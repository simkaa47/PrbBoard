
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c34  0801dfb0  0801dfb0  0002dfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021be4  08021be4  0004035c  2**0
                  CONTENTS
  4 .ARM          00000008  08021be4  08021be4  00031be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021bec  08021bec  0004035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021bec  08021bec  00031bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021bf0  08021bf0  00031bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08021bf4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004035c  2**0
                  CONTENTS
 10 .bss          0000dbe0  2000035c  2000035c  0004035c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000df3c  2000df3c  0004035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005931b  00000000  00000000  0004038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ac23  00000000  00000000  000996a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a0  00000000  00000000  000a42d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002750  00000000  00000000  000a6c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000380eb  00000000  00000000  000a93c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044f6a  00000000  00000000  000e14ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102fb4  00000000  00000000  00126415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002293c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b1fc  00000000  00000000  0022941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801df98 	.word	0x0801df98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	0801df98 	.word	0x0801df98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Analog_Start>:
extern Meas_Data meas_data;

static void Calc_Pt100();

void Analog_Start(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 800057c:	2206      	movs	r2, #6
 800057e:	4904      	ldr	r1, [pc, #16]	; (8000590 <Analog_Start+0x18>)
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <Analog_Start+0x1c>)
 8000582:	f005 fa5b 	bl	8005a3c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <Analog_Start+0x20>)
 8000588:	f009 fada 	bl	8009b40 <HAL_TIM_Base_Start>

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20006dd0 	.word	0x20006dd0
 8000594:	20007060 	.word	0x20007060
 8000598:	20006fc0 	.word	0x20006fc0

0800059c <Analog_Read>:

void Analog_Read(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	Calc_Pt100();
 80005a0:	f000 f802 	bl	80005a8 <Calc_Pt100>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Calc_Pt100>:

static void Calc_Pt100()
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
	float sum = 0;
 80005ae:	f04f 0300 	mov.w	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
	if(pt100_data_ready)
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <Calc_Pt100+0x64>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d020      	beq.n	80005fe <Calc_Pt100+0x56>
	{
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	e00e      	b.n	80005e0 <Calc_Pt100+0x38>
			sum+=pt100_buf[i];
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <Calc_Pt100+0x68>)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	edd3 7a00 	vldr	s15, [r3]
 80005ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80005d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d6:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b27      	cmp	r3, #39	; 0x27
 80005e4:	dded      	ble.n	80005c2 <Calc_Pt100+0x1a>
		}
		meas_data.pt100 = sum/PT100_INPUT_BUFFER_SIZE;
 80005e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80005ea:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000614 <Calc_Pt100+0x6c>
 80005ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <Calc_Pt100+0x70>)
 80005f4:	edc3 7a02 	vstr	s15, [r3, #8]
		pt100_data_ready = 0;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <Calc_Pt100+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20006d28 	.word	0x20006d28
 8000610:	20006d30 	.word	0x20006d30
 8000614:	42200000 	.word	0x42200000
 8000618:	200072cc 	.word	0x200072cc

0800061c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800061c:	b480      	push	{r7}
 800061e:	b08b      	sub	sp, #44	; 0x2c
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_3, vRef;
	vRef = pt100_input_buffer.V_ref;
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <HAL_ADC_ConvCpltCallback+0x120>)
 8000626:	895b      	ldrh	r3, [r3, #10]
 8000628:	ee07 3a90 	vmov	s15, r3
 800062c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000630:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vRef = 3.3f*(float)V_REF_VALUE/vRef;
 8000634:	4b42      	ldr	r3, [pc, #264]	; (8000740 <HAL_ADC_ConvCpltCallback+0x124>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000640:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000744 <HAL_ADC_ConvCpltCallback+0x128>
 8000644:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000648:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800064c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000650:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_0 = pt100_input_buffer.Pt100_0 * 3.3f/vRef;
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <HAL_ADC_ConvCpltCallback+0x120>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000660:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000744 <HAL_ADC_ConvCpltCallback+0x128>
 8000664:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000668:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800066c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000670:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_1 = pt100_input_buffer.Pt100_1 * 3.3f/vRef;
 8000674:	4b31      	ldr	r3, [pc, #196]	; (800073c <HAL_ADC_ConvCpltCallback+0x120>)
 8000676:	885b      	ldrh	r3, [r3, #2]
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000680:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000744 <HAL_ADC_ConvCpltCallback+0x128>
 8000684:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000688:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800068c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000690:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_input_buffer.Pt100_3 * 3.3f/vRef;
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <HAL_ADC_ConvCpltCallback+0x120>)
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000744 <HAL_ADC_ConvCpltCallback+0x128>
 80006a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b0:	edc7 7a06 	vstr	s15, [r7, #24]
	float vpt100 = pt100_3 - pt100_1;
 80006b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80006b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80006bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c0:	edc7 7a05 	vstr	s15, [r7, #20]
	float ref = pt100_1-pt100_0;
 80006c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80006c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80006cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d0:	edc7 7a04 	vstr	s15, [r7, #16]
	float v_result = vpt100*100/ref;
 80006d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80006d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000748 <HAL_ADC_ConvCpltCallback+0x12c>
 80006dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80006e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006e8:	edc7 7a03 	vstr	s15, [r7, #12]
	pt100_buf[j] = (v_result - 100)*2.5974f;
 80006ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000748 <HAL_ADC_ConvCpltCallback+0x12c>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_ADC_ConvCpltCallback+0x130>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000750 <HAL_ADC_ConvCpltCallback+0x134>
 8000700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <HAL_ADC_ConvCpltCallback+0x138>)
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	edc3 7a00 	vstr	s15, [r3]
	j++;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_ADC_ConvCpltCallback+0x130>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_ADC_ConvCpltCallback+0x130>)
 8000718:	701a      	strb	r2, [r3, #0]
	if(j>=PT100_INPUT_BUFFER_SIZE)j=0;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_ADC_ConvCpltCallback+0x130>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b27      	cmp	r3, #39	; 0x27
 8000720:	d902      	bls.n	8000728 <HAL_ADC_ConvCpltCallback+0x10c>
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_ADC_ConvCpltCallback+0x130>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
	pt100_data_ready = 1;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_ADC_ConvCpltCallback+0x13c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	372c      	adds	r7, #44	; 0x2c
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20006dd0 	.word	0x20006dd0
 8000740:	1fff7a2a 	.word	0x1fff7a2a
 8000744:	40533333 	.word	0x40533333
 8000748:	42c80000 	.word	0x42c80000
 800074c:	20006d29 	.word	0x20006d29
 8000750:	40263bcd 	.word	0x40263bcd
 8000754:	20006d30 	.word	0x20006d30
 8000758:	20006d28 	.word	0x20006d28

0800075c <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	80fb      	strh	r3, [r7, #6]
 8000768:	4613      	mov	r3, r2
 800076a:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	2201      	movs	r2, #1
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	b21a      	sxth	r2, r3
 8000776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800077a:	4313      	orrs	r3, r2
 800077c:	b21b      	sxth	r3, r3
 800077e:	b29b      	uxth	r3, r3
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <Read_Inputs>:




void Read_Inputs()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	Filter_Inputs();
 8000790:	f000 fb16 	bl	8000dc0 <Filter_Inputs>
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  filters_inputs[0];
 8000794:	4b84      	ldr	r3, [pc, #528]	; (80009a8 <Read_Inputs+0x21c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <Read_Inputs+0x22>
 80007a2:	4b81      	ldr	r3, [pc, #516]	; (80009a8 <Read_Inputs+0x21c>)
 80007a4:	789b      	ldrb	r3, [r3, #2]
 80007a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	e004      	b.n	80007b8 <Read_Inputs+0x2c>
 80007ae:	4b7f      	ldr	r3, [pc, #508]	; (80009ac <Read_Inputs+0x220>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	497d      	ldr	r1, [pc, #500]	; (80009b0 <Read_Inputs+0x224>)
 80007ba:	780b      	ldrb	r3, [r1, #0]
 80007bc:	f362 0300 	bfi	r3, r2, #0, #1
 80007c0:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  filters_inputs[1];
 80007c2:	4b79      	ldr	r3, [pc, #484]	; (80009a8 <Read_Inputs+0x21c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <Read_Inputs+0x50>
 80007d0:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <Read_Inputs+0x21c>)
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	e004      	b.n	80007e6 <Read_Inputs+0x5a>
 80007dc:	4b73      	ldr	r3, [pc, #460]	; (80009ac <Read_Inputs+0x220>)
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4972      	ldr	r1, [pc, #456]	; (80009b0 <Read_Inputs+0x224>)
 80007e8:	780b      	ldrb	r3, [r1, #0]
 80007ea:	f362 0341 	bfi	r3, r2, #1, #1
 80007ee:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  filters_inputs[2];
 80007f0:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <Read_Inputs+0x21c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <Read_Inputs+0x7e>
 80007fe:	4b6a      	ldr	r3, [pc, #424]	; (80009a8 <Read_Inputs+0x21c>)
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	e004      	b.n	8000814 <Read_Inputs+0x88>
 800080a:	4b68      	ldr	r3, [pc, #416]	; (80009ac <Read_Inputs+0x220>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4966      	ldr	r1, [pc, #408]	; (80009b0 <Read_Inputs+0x224>)
 8000816:	780b      	ldrb	r3, [r1, #0]
 8000818:	f362 0382 	bfi	r3, r2, #2, #1
 800081c:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  filters_inputs[3];
 800081e:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <Read_Inputs+0x21c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <Read_Inputs+0xac>
 800082c:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <Read_Inputs+0x21c>)
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	e004      	b.n	8000842 <Read_Inputs+0xb6>
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <Read_Inputs+0x220>)
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	495b      	ldr	r1, [pc, #364]	; (80009b0 <Read_Inputs+0x224>)
 8000844:	780b      	ldrb	r3, [r1, #0]
 8000846:	f362 03c3 	bfi	r3, r2, #3, #1
 800084a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  filters_inputs[4];
 800084c:	4b56      	ldr	r3, [pc, #344]	; (80009a8 <Read_Inputs+0x21c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <Read_Inputs+0xda>
 800085a:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <Read_Inputs+0x21c>)
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	e004      	b.n	8000870 <Read_Inputs+0xe4>
 8000866:	4b51      	ldr	r3, [pc, #324]	; (80009ac <Read_Inputs+0x220>)
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	494f      	ldr	r1, [pc, #316]	; (80009b0 <Read_Inputs+0x224>)
 8000872:	780b      	ldrb	r3, [r1, #0]
 8000874:	f362 1304 	bfi	r3, r2, #4, #1
 8000878:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  filters_inputs[5];
 800087a:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <Read_Inputs+0x21c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <Read_Inputs+0x108>
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <Read_Inputs+0x21c>)
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	e004      	b.n	800089e <Read_Inputs+0x112>
 8000894:	4b45      	ldr	r3, [pc, #276]	; (80009ac <Read_Inputs+0x220>)
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4944      	ldr	r1, [pc, #272]	; (80009b0 <Read_Inputs+0x224>)
 80008a0:	780b      	ldrb	r3, [r1, #0]
 80008a2:	f362 1345 	bfi	r3, r2, #5, #1
 80008a6:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  filters_inputs[6];
 80008a8:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <Read_Inputs+0x21c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <Read_Inputs+0x136>
 80008b6:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <Read_Inputs+0x21c>)
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	e004      	b.n	80008cc <Read_Inputs+0x140>
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <Read_Inputs+0x220>)
 80008c4:	799b      	ldrb	r3, [r3, #6]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4938      	ldr	r1, [pc, #224]	; (80009b0 <Read_Inputs+0x224>)
 80008ce:	780b      	ldrb	r3, [r1, #0]
 80008d0:	f362 1386 	bfi	r3, r2, #6, #1
 80008d4:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  filters_inputs[7];
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <Read_Inputs+0x21c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d005      	beq.n	80008f0 <Read_Inputs+0x164>
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <Read_Inputs+0x21c>)
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	e004      	b.n	80008fa <Read_Inputs+0x16e>
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <Read_Inputs+0x220>)
 80008f2:	79db      	ldrb	r3, [r3, #7]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	492d      	ldr	r1, [pc, #180]	; (80009b0 <Read_Inputs+0x224>)
 80008fc:	780b      	ldrb	r3, [r1, #0]
 80008fe:	f362 13c7 	bfi	r3, r2, #7, #1
 8000902:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  filters_inputs[8];
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <Read_Inputs+0x21c>)
 8000906:	785b      	ldrb	r3, [r3, #1]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <Read_Inputs+0x192>
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <Read_Inputs+0x21c>)
 8000914:	78db      	ldrb	r3, [r3, #3]
 8000916:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	e004      	b.n	8000928 <Read_Inputs+0x19c>
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <Read_Inputs+0x220>)
 8000920:	7a1b      	ldrb	r3, [r3, #8]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4921      	ldr	r1, [pc, #132]	; (80009b0 <Read_Inputs+0x224>)
 800092a:	784b      	ldrb	r3, [r1, #1]
 800092c:	f362 0300 	bfi	r3, r2, #0, #1
 8000930:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  filters_inputs[9];
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <Read_Inputs+0x21c>)
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d005      	beq.n	800094c <Read_Inputs+0x1c0>
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <Read_Inputs+0x21c>)
 8000942:	78db      	ldrb	r3, [r3, #3]
 8000944:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	e004      	b.n	8000956 <Read_Inputs+0x1ca>
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <Read_Inputs+0x220>)
 800094e:	7a5b      	ldrb	r3, [r3, #9]
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4916      	ldr	r1, [pc, #88]	; (80009b0 <Read_Inputs+0x224>)
 8000958:	784b      	ldrb	r3, [r1, #1]
 800095a:	f362 0341 	bfi	r3, r2, #1, #1
 800095e:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : filters_inputs[10];
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <Read_Inputs+0x21c>)
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d005      	beq.n	800097a <Read_Inputs+0x1ee>
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <Read_Inputs+0x21c>)
 8000970:	78db      	ldrb	r3, [r3, #3]
 8000972:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	e004      	b.n	8000984 <Read_Inputs+0x1f8>
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <Read_Inputs+0x220>)
 800097c:	7a9b      	ldrb	r3, [r3, #10]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490a      	ldr	r1, [pc, #40]	; (80009b0 <Read_Inputs+0x224>)
 8000986:	784b      	ldrb	r3, [r1, #1]
 8000988:	f362 0382 	bfi	r3, r2, #2, #1
 800098c:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : filters_inputs[11];
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <Read_Inputs+0x21c>)
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00b      	beq.n	80009b4 <Read_Inputs+0x228>
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <Read_Inputs+0x21c>)
 800099e:	78db      	ldrb	r3, [r3, #3]
 80009a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	e00a      	b.n	80009be <Read_Inputs+0x232>
 80009a8:	20007230 	.word	0x20007230
 80009ac:	20006ddc 	.word	0x20006ddc
 80009b0:	200072cc 	.word	0x200072cc
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <Read_Inputs+0x31c>)
 80009b6:	7adb      	ldrb	r3, [r3, #11]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	493b      	ldr	r1, [pc, #236]	; (8000aac <Read_Inputs+0x320>)
 80009c0:	784b      	ldrb	r3, [r1, #1]
 80009c2:	f362 03c3 	bfi	r3, r2, #3, #1
 80009c6:	704b      	strb	r3, [r1, #1]

	d_inputs.uz_prob_fail 				= meas_data.d_inputs.in0;
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <Read_Inputs+0x320>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009d0:	b2d9      	uxtb	r1, r3
 80009d2:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <Read_Inputs+0x324>)
 80009d4:	7813      	ldrb	r3, [r2, #0]
 80009d6:	f361 0300 	bfi	r3, r1, #0, #1
 80009da:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_1 		= meas_data.d_inputs.in1;
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <Read_Inputs+0x320>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009e4:	b2d9      	uxtb	r1, r3
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <Read_Inputs+0x324>)
 80009e8:	7813      	ldrb	r3, [r2, #0]
 80009ea:	f361 0341 	bfi	r3, r1, #1, #1
 80009ee:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_2		= meas_data.d_inputs.in2;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <Read_Inputs+0x320>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009f8:	b2d9      	uxtb	r1, r3
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <Read_Inputs+0x324>)
 80009fc:	7813      	ldrb	r3, [r2, #0]
 80009fe:	f361 0382 	bfi	r3, r1, #2, #1
 8000a02:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_1 		= meas_data.d_inputs.in3;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <Read_Inputs+0x320>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a0c:	b2d9      	uxtb	r1, r3
 8000a0e:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <Read_Inputs+0x324>)
 8000a10:	7813      	ldrb	r3, [r2, #0]
 8000a12:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a16:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_2		= meas_data.d_inputs.in4;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <Read_Inputs+0x320>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a20:	b2d9      	uxtb	r1, r3
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <Read_Inputs+0x324>)
 8000a24:	7813      	ldrb	r3, [r2, #0]
 8000a26:	f361 1304 	bfi	r3, r1, #4, #1
 8000a2a:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_stop					= meas_data.d_inputs.in5;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <Read_Inputs+0x320>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a34:	b2d9      	uxtb	r1, r3
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <Read_Inputs+0x324>)
 8000a38:	7813      	ldrb	r3, [r2, #0]
 8000a3a:	f361 1345 	bfi	r3, r1, #5, #1
 8000a3e:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_make_proba				= meas_data.d_inputs.in6;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <Read_Inputs+0x320>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a48:	b2d9      	uxtb	r1, r3
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <Read_Inputs+0x324>)
 8000a4c:	7813      	ldrb	r3, [r2, #0]
 8000a4e:	f361 1386 	bfi	r3, r1, #6, #1
 8000a52:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_vozvrat					= meas_data.d_inputs.in7;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <Read_Inputs+0x320>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a5c:	b2d9      	uxtb	r1, r3
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <Read_Inputs+0x324>)
 8000a60:	7813      	ldrb	r3, [r2, #0]
 8000a62:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a66:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_auto_local				= meas_data.d_inputs.in8;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <Read_Inputs+0x320>)
 8000a6a:	785b      	ldrb	r3, [r3, #1]
 8000a6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a70:	b2d9      	uxtb	r1, r3
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <Read_Inputs+0x324>)
 8000a74:	7853      	ldrb	r3, [r2, #1]
 8000a76:	f361 0300 	bfi	r3, r1, #0, #1
 8000a7a:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra				= meas_data.d_inputs.in9;
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <Read_Inputs+0x320>)
 8000a7e:	785b      	ldrb	r3, [r3, #1]
 8000a80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a84:	b2d9      	uxtb	r1, r3
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <Read_Inputs+0x324>)
 8000a88:	7853      	ldrb	r3, [r2, #1]
 8000a8a:	f361 0341 	bfi	r3, r1, #1, #1
 8000a8e:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra_door			= meas_data.d_inputs.in10;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <Read_Inputs+0x320>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a98:	b2d9      	uxtb	r1, r3
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <Read_Inputs+0x324>)
 8000a9c:	7853      	ldrb	r3, [r2, #1]
 8000a9e:	f361 0382 	bfi	r3, r1, #2, #1
 8000aa2:	7053      	strb	r3, [r2, #1]




}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20006ddc 	.word	0x20006ddc
 8000aac:	200072cc 	.word	0x200072cc
 8000ab0:	20006dec 	.word	0x20006dec

08000ab4 <Write_Outputs>:

void Write_Outputs()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  d_outputs.uz_prob_forv;
 8000ab8:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <Write_Outputs+0x1d8>)
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <Write_Outputs+0x1e>
 8000ac6:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <Write_Outputs+0x1d8>)
 8000ac8:	799b      	ldrb	r3, [r3, #6]
 8000aca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	e004      	b.n	8000adc <Write_Outputs+0x28>
 8000ad2:	4b6f      	ldr	r3, [pc, #444]	; (8000c90 <Write_Outputs+0x1dc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	496d      	ldr	r1, [pc, #436]	; (8000c94 <Write_Outputs+0x1e0>)
 8000ade:	788b      	ldrb	r3, [r1, #2]
 8000ae0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ae4:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  d_outputs.uz_prob_rev;
 8000ae6:	4b69      	ldr	r3, [pc, #420]	; (8000c8c <Write_Outputs+0x1d8>)
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <Write_Outputs+0x4c>
 8000af4:	4b65      	ldr	r3, [pc, #404]	; (8000c8c <Write_Outputs+0x1d8>)
 8000af6:	799b      	ldrb	r3, [r3, #6]
 8000af8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	e004      	b.n	8000b0a <Write_Outputs+0x56>
 8000b00:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <Write_Outputs+0x1dc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4962      	ldr	r1, [pc, #392]	; (8000c94 <Write_Outputs+0x1e0>)
 8000b0c:	788b      	ldrb	r3, [r1, #2]
 8000b0e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b12:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  d_outputs.prob_ready;
 8000b14:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <Write_Outputs+0x7a>
 8000b22:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b24:	799b      	ldrb	r3, [r3, #6]
 8000b26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	e004      	b.n	8000b38 <Write_Outputs+0x84>
 8000b2e:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <Write_Outputs+0x1dc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4956      	ldr	r1, [pc, #344]	; (8000c94 <Write_Outputs+0x1e0>)
 8000b3a:	788b      	ldrb	r3, [r1, #2]
 8000b3c:	f362 0382 	bfi	r3, r2, #2, #1
 8000b40:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 8000b42:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b44:	791b      	ldrb	r3, [r3, #4]
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <Write_Outputs+0xa8>
 8000b50:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b52:	799b      	ldrb	r3, [r3, #6]
 8000b54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b58:	b2d9      	uxtb	r1, r3
 8000b5a:	e000      	b.n	8000b5e <Write_Outputs+0xaa>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4a4d      	ldr	r2, [pc, #308]	; (8000c94 <Write_Outputs+0x1e0>)
 8000b60:	7893      	ldrb	r3, [r2, #2]
 8000b62:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b66:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 8000b68:	4b48      	ldr	r3, [pc, #288]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <Write_Outputs+0xce>
 8000b76:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b78:	799b      	ldrb	r3, [r3, #6]
 8000b7a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b7e:	b2d9      	uxtb	r1, r3
 8000b80:	e000      	b.n	8000b84 <Write_Outputs+0xd0>
 8000b82:	2100      	movs	r1, #0
 8000b84:	4a43      	ldr	r2, [pc, #268]	; (8000c94 <Write_Outputs+0x1e0>)
 8000b86:	7893      	ldrb	r3, [r2, #2]
 8000b88:	f361 1304 	bfi	r3, r1, #4, #1
 8000b8c:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b90:	791b      	ldrb	r3, [r3, #4]
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <Write_Outputs+0xf4>
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <Write_Outputs+0x1d8>)
 8000b9e:	799b      	ldrb	r3, [r3, #6]
 8000ba0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000ba4:	b2d9      	uxtb	r1, r3
 8000ba6:	e000      	b.n	8000baa <Write_Outputs+0xf6>
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <Write_Outputs+0x1e0>)
 8000bac:	7893      	ldrb	r3, [r2, #2]
 8000bae:	f361 1345 	bfi	r3, r1, #5, #1
 8000bb2:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8000bb4:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <Write_Outputs+0x1d8>)
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <Write_Outputs+0x11a>
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <Write_Outputs+0x1d8>)
 8000bc4:	799b      	ldrb	r3, [r3, #6]
 8000bc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000bca:	b2d9      	uxtb	r1, r3
 8000bcc:	e000      	b.n	8000bd0 <Write_Outputs+0x11c>
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4a30      	ldr	r2, [pc, #192]	; (8000c94 <Write_Outputs+0x1e0>)
 8000bd2:	7893      	ldrb	r3, [r2, #2]
 8000bd4:	f361 1386 	bfi	r3, r1, #6, #1
 8000bd8:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <Write_Outputs+0x1d8>)
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <Write_Outputs+0x140>
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <Write_Outputs+0x1d8>)
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000bf0:	b2d9      	uxtb	r1, r3
 8000bf2:	e000      	b.n	8000bf6 <Write_Outputs+0x142>
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <Write_Outputs+0x1e0>)
 8000bf8:	7893      	ldrb	r3, [r2, #2]
 8000bfa:	f361 13c7 	bfi	r3, r1, #7, #1
 8000bfe:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c02:	795b      	ldrb	r3, [r3, #5]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <Write_Outputs+0x166>
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c10:	79db      	ldrb	r3, [r3, #7]
 8000c12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c16:	b2d9      	uxtb	r1, r3
 8000c18:	e000      	b.n	8000c1c <Write_Outputs+0x168>
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <Write_Outputs+0x1e0>)
 8000c1e:	78d3      	ldrb	r3, [r2, #3]
 8000c20:	f361 0300 	bfi	r3, r1, #0, #1
 8000c24:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d005      	beq.n	8000c40 <Write_Outputs+0x18c>
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c36:	79db      	ldrb	r3, [r3, #7]
 8000c38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c3c:	b2d9      	uxtb	r1, r3
 8000c3e:	e000      	b.n	8000c42 <Write_Outputs+0x18e>
 8000c40:	2100      	movs	r1, #0
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <Write_Outputs+0x1e0>)
 8000c44:	78d3      	ldrb	r3, [r2, #3]
 8000c46:	f361 0341 	bfi	r3, r1, #1, #1
 8000c4a:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c4e:	795b      	ldrb	r3, [r3, #5]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <Write_Outputs+0x1b2>
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c5c:	79db      	ldrb	r3, [r3, #7]
 8000c5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c62:	b2d9      	uxtb	r1, r3
 8000c64:	e000      	b.n	8000c68 <Write_Outputs+0x1b4>
 8000c66:	2100      	movs	r1, #0
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <Write_Outputs+0x1e0>)
 8000c6a:	78d3      	ldrb	r3, [r2, #3]
 8000c6c:	f361 0382 	bfi	r3, r1, #2, #1
 8000c70:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00b      	beq.n	8000c98 <Write_Outputs+0x1e4>
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <Write_Outputs+0x1d8>)
 8000c82:	79db      	ldrb	r3, [r3, #7]
 8000c84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c88:	b2d9      	uxtb	r1, r3
 8000c8a:	e006      	b.n	8000c9a <Write_Outputs+0x1e6>
 8000c8c:	20007230 	.word	0x20007230
 8000c90:	20006de8 	.word	0x20006de8
 8000c94:	200072cc 	.word	0x200072cc
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4a45      	ldr	r2, [pc, #276]	; (8000db0 <Write_Outputs+0x2fc>)
 8000c9c:	78d3      	ldrb	r3, [r2, #3]
 8000c9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ca2:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8000ca4:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <Write_Outputs+0x2fc>)
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4840      	ldr	r0, [pc, #256]	; (8000db4 <Write_Outputs+0x300>)
 8000cb4:	f007 fc50 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <Write_Outputs+0x2fc>)
 8000cba:	789b      	ldrb	r3, [r3, #2]
 8000cbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc8:	483a      	ldr	r0, [pc, #232]	; (8000db4 <Write_Outputs+0x300>)
 8000cca:	f007 fc45 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <Write_Outputs+0x2fc>)
 8000cd0:	789b      	ldrb	r3, [r3, #2]
 8000cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cde:	4835      	ldr	r0, [pc, #212]	; (8000db4 <Write_Outputs+0x300>)
 8000ce0:	f007 fc3a 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <Write_Outputs+0x2fc>)
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf4:	482f      	ldr	r0, [pc, #188]	; (8000db4 <Write_Outputs+0x300>)
 8000cf6:	f007 fc2f 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <Write_Outputs+0x2fc>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	482a      	ldr	r0, [pc, #168]	; (8000db4 <Write_Outputs+0x300>)
 8000d0c:	f007 fc24 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d12:	789b      	ldrb	r3, [r3, #2]
 8000d14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	4824      	ldr	r0, [pc, #144]	; (8000db4 <Write_Outputs+0x300>)
 8000d22:	f007 fc19 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d36:	481f      	ldr	r0, [pc, #124]	; (8000db4 <Write_Outputs+0x300>)
 8000d38:	f007 fc0e 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <Write_Outputs+0x300>)
 8000d4e:	f007 fc03 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d54:	78db      	ldrb	r3, [r3, #3]
 8000d56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d62:	4814      	ldr	r0, [pc, #80]	; (8000db4 <Write_Outputs+0x300>)
 8000d64:	f007 fbf8 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d6a:	78db      	ldrb	r3, [r3, #3]
 8000d6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <Write_Outputs+0x304>)
 8000d7a:	f007 fbed 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d80:	78db      	ldrb	r3, [r3, #3]
 8000d82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <Write_Outputs+0x308>)
 8000d90:	f007 fbe2 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <Write_Outputs+0x2fc>)
 8000d96:	78db      	ldrb	r3, [r3, #3]
 8000d98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <Write_Outputs+0x308>)
 8000da6:	f007 fbd7 	bl	8008558 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200072cc 	.word	0x200072cc
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <Filter_Inputs>:

static void Filter_Inputs()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
	uint8_t inputs[INPUT_NUMBER];

	inputs[0] = !HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 8000dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dca:	486a      	ldr	r0, [pc, #424]	; (8000f74 <Filter_Inputs+0x1b4>)
 8000dcc:	f007 fbac 	bl	8008528 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	703b      	strb	r3, [r7, #0]
	inputs[1] = !HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8000dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de2:	4864      	ldr	r0, [pc, #400]	; (8000f74 <Filter_Inputs+0x1b4>)
 8000de4:	f007 fba0 	bl	8008528 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf0c      	ite	eq
 8000dee:	2301      	moveq	r3, #1
 8000df0:	2300      	movne	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	707b      	strb	r3, [r7, #1]
	inputs[2] = !HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000df6:	2101      	movs	r1, #1
 8000df8:	485f      	ldr	r0, [pc, #380]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000dfa:	f007 fb95 	bl	8008528 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	70bb      	strb	r3, [r7, #2]
	inputs[3] = !HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	485a      	ldr	r0, [pc, #360]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000e10:	f007 fb8a 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	70fb      	strb	r3, [r7, #3]
	inputs[4] = !HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000e22:	2104      	movs	r1, #4
 8000e24:	4854      	ldr	r0, [pc, #336]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000e26:	f007 fb7f 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	713b      	strb	r3, [r7, #4]
	inputs[5] = !HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 8000e38:	2108      	movs	r1, #8
 8000e3a:	484f      	ldr	r0, [pc, #316]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000e3c:	f007 fb74 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf0c      	ite	eq
 8000e46:	2301      	moveq	r3, #1
 8000e48:	2300      	movne	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	717b      	strb	r3, [r7, #5]
	inputs[6] = !HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4849      	ldr	r0, [pc, #292]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000e52:	f007 fb69 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	71bb      	strb	r3, [r7, #6]
	inputs[7] = !HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 8000e64:	2120      	movs	r1, #32
 8000e66:	4844      	ldr	r0, [pc, #272]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000e68:	f007 fb5e 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	71fb      	strb	r3, [r7, #7]
	inputs[8] = !HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	483e      	ldr	r0, [pc, #248]	; (8000f78 <Filter_Inputs+0x1b8>)
 8000e7e:	f007 fb53 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	723b      	strb	r3, [r7, #8]
	inputs[9] = !HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4839      	ldr	r0, [pc, #228]	; (8000f7c <Filter_Inputs+0x1bc>)
 8000e96:	f007 fb47 	bl	8008528 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	727b      	strb	r3, [r7, #9]
	inputs[10] = !HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 8000ea8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eac:	4833      	ldr	r0, [pc, #204]	; (8000f7c <Filter_Inputs+0x1bc>)
 8000eae:	f007 fb3b 	bl	8008528 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	72bb      	strb	r3, [r7, #10]
	inputs[11] = !HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8000ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec4:	482d      	ldr	r0, [pc, #180]	; (8000f7c <Filter_Inputs+0x1bc>)
 8000ec6:	f007 fb2f 	bl	8008528 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf0c      	ite	eq
 8000ed0:	2301      	moveq	r3, #1
 8000ed2:	2300      	movne	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e041      	b.n	8000f62 <Filter_Inputs+0x1a2>
		if(inputs[i])
 8000ede:	463a      	mov	r2, r7
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00f      	beq.n	8000f0a <Filter_Inputs+0x14a>
		{
			filter_state[i] = filter_state[i]<ANTIDREBEZG_CNT ? filter_state[i]+1 : ANTIDREBEZG_CNT;
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	460a      	mov	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e011      	b.n	8000f2e <Filter_Inputs+0x16e>
		}
		else
		{
			filter_state[i] = filter_state[i]>0 ? filter_state[i]-1 : 0;
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <Filter_Inputs+0x164>
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	e000      	b.n	8000f26 <Filter_Inputs+0x166>
 8000f24:	2200      	movs	r2, #0
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
		}
		if (filter_state[i]>=ANTIDREBEZG_CNT) {
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d905      	bls.n	8000f46 <Filter_Inputs+0x186>
			filters_inputs[i]=1;
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <Filter_Inputs+0x1c4>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e00a      	b.n	8000f5c <Filter_Inputs+0x19c>
		} else if(filter_state[i]==0) {
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <Filter_Inputs+0x1c0>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d104      	bne.n	8000f5c <Filter_Inputs+0x19c>
			filters_inputs[i]=0;
 8000f52:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <Filter_Inputs+0x1c4>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b0b      	cmp	r3, #11
 8000f66:	ddba      	ble.n	8000ede <Filter_Inputs+0x11e>
		}
	}

}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	20006df0 	.word	0x20006df0
 8000f84:	20006ddc 	.word	0x20006ddc

08000f88 <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <ethernet_reset+0x24>)
 8000f92:	f007 fae1 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f004 fce8 	bl	800596c <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <ethernet_reset+0x24>)
 8000fa2:	f007 fad9 	bl	8008558 <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40020000 	.word	0x40020000

08000fb0 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0cc      	sub	sp, #304	; 0x130
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2020      	movs	r0, #32
 8000fca:	f00e fc41 	bl	800f850 <netconn_new_with_proto_and_callback>
 8000fce:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000fd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d05b      	beq.n	8001092 <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000fda:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000fde:	461a      	mov	r2, r3
 8000fe0:	492e      	ldr	r1, [pc, #184]	; (800109c <ethernet_thread+0xec>)
 8000fe2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000fe6:	f00e fced 	bl	800f9c4 <netconn_bind>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8000ff0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d148      	bne.n	800108a <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8000ff8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001002:	f00e fe93 	bl	800fd2c <netconn_recv>
 8001006:	4603      	mov	r3, r0
 8001008:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 800100c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f1      	bne.n	8000ff8 <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8001014:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001018:	3308      	adds	r3, #8
 800101a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 800101e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001022:	899b      	ldrh	r3, [r3, #12]
 8001024:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8001028:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800102c:	f107 020a 	add.w	r2, r7, #10
 8001030:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001034:	4618      	mov	r0, r3
 8001036:	f010 fa4b 	bl	80114d0 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 800103a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800103e:	f107 030a 	add.w	r3, r7, #10
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	f107 020c 	add.w	r2, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	f000 f859 	bl	8001100 <ethernet_answer>
 800104e:	4603      	mov	r3, r0
 8001050:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8001054:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001058:	2b00      	cmp	r3, #0
 800105a:	d010      	beq.n	800107e <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 800105c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001060:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001064:	f107 010c 	add.w	r1, r7, #12
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001074:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001078:	f000 f812 	bl	80010a0 <Send>
 800107c:	e7bc      	b.n	8000ff8 <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 800107e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001082:	4618      	mov	r0, r3
 8001084:	f010 f9ba 	bl	80113fc <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8001088:	e7b6      	b.n	8000ff8 <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 800108a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800108e:	f00e fc7d 	bl	800f98c <netconn_delete>
	  }
	}
}
 8001092:	bf00      	nop
 8001094:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08021a7c 	.word	0x08021a7c

080010a0 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 80010b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010b8:	f010 f9a0 	bl	80113fc <netbuf_delete>
	buf = netbuf_new();
 80010bc:	f010 f98a 	bl	80113d4 <netbuf_new>
 80010c0:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	8c3a      	ldrh	r2, [r7, #32]
 80010c6:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	461a      	mov	r2, r3
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d6:	f010 f9b1 	bl	801143c <netbuf_ref>
 80010da:	4603      	mov	r3, r0
 80010dc:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 80010de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d108      	bne.n	80010f8 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 80010e6:	8c3b      	ldrh	r3, [r7, #32]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f00e fe97 	bl	800fe20 <netconn_sendto>
		netbuf_delete(buf);
 80010f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010f4:	f010 f982 	bl	80113fc <netbuf_delete>
	}
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	460b      	mov	r3, r1
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 800110e:	8979      	ldrh	r1, [r7, #10]
 8001110:	2301      	movs	r3, #1
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f002 fbcb 	bl	80038b0 <ModbusParse>
 800111a:	6178      	str	r0, [r7, #20]
	if(result)return result;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <ethernet_answer+0x26>
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	e00d      	b.n	8001142 <ethernet_answer+0x42>
	result = OnKeyPress(data, data_length, answer);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 fc8a 	bl	8001a48 <OnKeyPress>
 8001134:	6178      	str	r0, [r7, #20]
	if(result!=0)return 81;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <ethernet_answer+0x40>
 800113c:	2351      	movs	r3, #81	; 0x51
 800113e:	e000      	b.n	8001142 <ethernet_answer+0x42>
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4613      	mov	r3, r2
 800115a:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 8001160:	2303      	movs	r3, #3
 8001162:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117a:	4811      	ldr	r0, [pc, #68]	; (80011c0 <framDataRead+0x74>)
 800117c:	f007 f9ec 	bl	8008558 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001180:	f107 0108 	add.w	r1, r7, #8
 8001184:	23c8      	movs	r3, #200	; 0xc8
 8001186:	2203      	movs	r2, #3
 8001188:	480e      	ldr	r0, [pc, #56]	; (80011c4 <framDataRead+0x78>)
 800118a:	f007 ff6a 	bl	8009062 <HAL_SPI_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	23c8      	movs	r3, #200	; 0xc8
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <framDataRead+0x78>)
 800119a:	f008 f89e 	bl	80092da <HAL_SPI_Receive>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <framDataRead+0x74>)
 80011b0:	f007 f9d2 	bl	8008558 <HAL_GPIO_WritePin>

	return result;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020000 	.word	0x40020000
 80011c4:	20007008 	.word	0x20007008

080011c8 <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 80011e4:	2306      	movs	r3, #6
 80011e6:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ee:	483f      	ldr	r0, [pc, #252]	; (80012ec <framDataWrite+0x124>)
 80011f0:	f007 f9b2 	bl	8008558 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 80011f4:	f107 0108 	add.w	r1, r7, #8
 80011f8:	23c8      	movs	r3, #200	; 0xc8
 80011fa:	2201      	movs	r2, #1
 80011fc:	483c      	ldr	r0, [pc, #240]	; (80012f0 <framDataWrite+0x128>)
 80011fe:	f007 ff30 	bl	8009062 <HAL_SPI_Transmit>
 8001202:	4603      	mov	r3, r0
 8001204:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120c:	4837      	ldr	r0, [pc, #220]	; (80012ec <framDataWrite+0x124>)
 800120e:	f007 f9a3 	bl	8008558 <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 8001212:	2305      	movs	r3, #5
 8001214:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8001216:	e027      	b.n	8001268 <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121e:	4833      	ldr	r0, [pc, #204]	; (80012ec <framDataWrite+0x124>)
 8001220:	f007 f99a 	bl	8008558 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001224:	f107 0108 	add.w	r1, r7, #8
 8001228:	23c8      	movs	r3, #200	; 0xc8
 800122a:	2201      	movs	r2, #1
 800122c:	4830      	ldr	r0, [pc, #192]	; (80012f0 <framDataWrite+0x128>)
 800122e:	f007 ff18 	bl	8009062 <HAL_SPI_Transmit>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	23c8      	movs	r3, #200	; 0xc8
 8001242:	2201      	movs	r2, #1
 8001244:	482a      	ldr	r0, [pc, #168]	; (80012f0 <framDataWrite+0x128>)
 8001246:	f008 f848 	bl	80092da <HAL_SPI_Receive>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125a:	4824      	ldr	r0, [pc, #144]	; (80012ec <framDataWrite+0x124>)
 800125c:	f007 f97c 	bl	8008558 <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 8001260:	7a3b      	ldrb	r3, [r7, #8]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <framDataWrite+0xb0>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	60fa      	str	r2, [r7, #12]
 8001274:	2b63      	cmp	r3, #99	; 0x63
 8001276:	ddcf      	ble.n	8001218 <framDataWrite+0x50>
	}
	if (!status)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <framDataWrite+0xbe>
		result = -2;
 800127e:	f06f 0301 	mvn.w	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e02c      	b.n	80012e0 <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 8001286:	2302      	movs	r3, #2
 8001288:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4812      	ldr	r0, [pc, #72]	; (80012ec <framDataWrite+0x124>)
 80012a2:	f007 f959 	bl	8008558 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	23c8      	movs	r3, #200	; 0xc8
 80012ac:	2203      	movs	r2, #3
 80012ae:	4810      	ldr	r0, [pc, #64]	; (80012f0 <framDataWrite+0x128>)
 80012b0:	f007 fed7 	bl	8009062 <HAL_SPI_Transmit>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	23c8      	movs	r3, #200	; 0xc8
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <framDataWrite+0x128>)
 80012c6:	f007 fecc 	bl	8009062 <HAL_SPI_Transmit>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <framDataWrite+0x124>)
 80012dc:	f007 f93c 	bl	8008558 <HAL_GPIO_WritePin>
	}

	return result;
 80012e0:	697b      	ldr	r3, [r7, #20]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40020000 	.word	0x40020000
 80012f0:	20007008 	.word	0x20007008

080012f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a07      	ldr	r2, [pc, #28]	; (8001320 <vApplicationGetIdleTaskMemory+0x2c>)
 8001304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <vApplicationGetIdleTaskMemory+0x30>)
 800130a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000378 	.word	0x20000378
 8001324:	2000042c 	.word	0x2000042c

08001328 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af02      	add	r7, sp, #8
	size_t fre = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8001332:	f00e f9a7 	bl	800f684 <xPortGetFreeHeapSize>
 8001336:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001338:	2300      	movs	r3, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <task_init+0x90>)
 8001342:	491e      	ldr	r1, [pc, #120]	; (80013bc <task_init+0x94>)
 8001344:	481e      	ldr	r0, [pc, #120]	; (80013c0 <task_init+0x98>)
 8001346:	f01b fb31 	bl	801c9ac <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800134a:	f00e f99b 	bl	800f684 <xPortGetFreeHeapSize>
 800134e:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001358:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <task_init+0x9c>)
 800135a:	4918      	ldr	r1, [pc, #96]	; (80013bc <task_init+0x94>)
 800135c:	481a      	ldr	r0, [pc, #104]	; (80013c8 <task_init+0xa0>)
 800135e:	f01b fb25 	bl	801c9ac <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001362:	f00e f98f 	bl	800f684 <xPortGetFreeHeapSize>
 8001366:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001370:	2200      	movs	r2, #0
 8001372:	4916      	ldr	r1, [pc, #88]	; (80013cc <task_init+0xa4>)
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <task_init+0xa8>)
 8001376:	f01b fb19 	bl	801c9ac <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800137a:	f00e f983 	bl	800f684 <xPortGetFreeHeapSize>
 800137e:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	2310      	movs	r3, #16
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00b fbea 	bl	800cb6c <osMailCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <task_init+0xac>)
 800139c:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	2200      	movs	r2, #0
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <task_init+0xb0>)
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <task_init+0xb4>)
 80013aa:	f01b faff 	bl	801c9ac <sys_thread_new>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000
 80013bc:	08000fb1 	.word	0x08000fb1
 80013c0:	0801dfb0 	.word	0x0801dfb0
 80013c4:	20000002 	.word	0x20000002
 80013c8:	0801dfbc 	.word	0x0801dfbc
 80013cc:	080053a1 	.word	0x080053a1
 80013d0:	0801dfc8 	.word	0x0801dfc8
 80013d4:	20006dfc 	.word	0x20006dfc
 80013d8:	080013e1 	.word	0x080013e1
 80013dc:	0801dfd4 	.word	0x0801dfd4

080013e0 <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	int result = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
	int time;
	int last_time;

	result = OnKeyPress("F1", strlen("F1"), lcd);
 80013ec:	4a3a      	ldr	r2, [pc, #232]	; (80014d8 <keyscan_thread+0xf8>)
 80013ee:	2102      	movs	r1, #2
 80013f0:	483a      	ldr	r0, [pc, #232]	; (80014dc <keyscan_thread+0xfc>)
 80013f2:	f000 fb29 	bl	8001a48 <OnKeyPress>
 80013f6:	6138      	str	r0, [r7, #16]
	if(result!=0)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <keyscan_thread+0x22>
	{
		SendToLcd();
 80013fe:	f000 fb03 	bl	8001a08 <SendToLcd>
	}
	while(1)
	{
		Tact_pins();
 8001402:	f000 f871 	bl	80014e8 <Tact_pins>
		Key_Read();
 8001406:	f000 f97b 	bl	8001700 <Key_Read>
		key_filter_all();
 800140a:	f000 f9ef 	bl	80017ec <key_filter_all>
		GetPositiveFront();
 800140e:	f000 fa9d 	bl	800194c <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	e04a      	b.n	80014ae <keyscan_thread+0xce>
			for (int j = 0; j < 6; ++j) {
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e041      	b.n	80014a2 <keyscan_thread+0xc2>
				if(positive_fronts[i][j])
 800141e:	4930      	ldr	r1, [pc, #192]	; (80014e0 <keyscan_thread+0x100>)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	18ca      	adds	r2, r1, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d032      	beq.n	800149c <keyscan_thread+0xbc>
				{
					if(keys[i][j]!=NULL)
 8001436:	492b      	ldr	r1, [pc, #172]	; (80014e4 <keyscan_thread+0x104>)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4413      	add	r3, r2
 8001446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d026      	beq.n	800149c <keyscan_thread+0xbc>
					{
						result = OnKeyPress(keys[i][j], strlen(keys[i][j]), lcd);
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <keyscan_thread+0x104>)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4413      	add	r3, r2
 800145e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001462:	4920      	ldr	r1, [pc, #128]	; (80014e4 <keyscan_thread+0x104>)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4413      	add	r3, r2
 8001472:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe feaa 	bl	80001d0 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <keyscan_thread+0xf8>)
 8001482:	4619      	mov	r1, r3
 8001484:	4620      	mov	r0, r4
 8001486:	f000 fadf 	bl	8001a48 <OnKeyPress>
 800148a:	6138      	str	r0, [r7, #16]
						if(result!=0)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <keyscan_thread+0xbc>
						{
							SendToLcd();
 8001492:	f000 fab9 	bl	8001a08 <SendToLcd>
							SetCursor(47);
 8001496:	202f      	movs	r0, #47	; 0x2f
 8001498:	f001 fc9c 	bl	8002dd4 <SetCursor>
			for (int j = 0; j < 6; ++j) {
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	ddba      	ble.n	800141e <keyscan_thread+0x3e>
		for (int i = 0; i < 6; ++i) {
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	ddb1      	ble.n	8001418 <keyscan_thread+0x38>
						}
					}
				}
			}
		}
		time = HAL_GetTick();
 80014b4:	f004 fa4e 	bl	8005954 <HAL_GetTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	60fb      	str	r3, [r7, #12]
		if((time-last_time)>500)
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c6:	dd03      	ble.n	80014d0 <keyscan_thread+0xf0>
		{
			LcdUpdate();
 80014c8:	f001 fb3f 	bl	8002b4a <LcdUpdate>
			last_time = time;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	61fb      	str	r3, [r7, #28]
		}
		osDelay(2);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f00a fff4 	bl	800c4be <osDelay>
		Tact_pins();
 80014d6:	e794      	b.n	8001402 <keyscan_thread+0x22>
 80014d8:	20006e00 	.word	0x20006e00
 80014dc:	0801dffc 	.word	0x0801dffc
 80014e0:	200006bc 	.word	0x200006bc
 80014e4:	20000004 	.word	0x20000004

080014e8 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 80014ec:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <Tact_pins+0x20c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <Tact_pins+0x210>)
 80014f4:	fb83 3102 	smull	r3, r1, r3, r2
 80014f8:	17d3      	asrs	r3, r2, #31
 80014fa:	1ac9      	subs	r1, r1, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <Tact_pins+0x20c>)
 800150a:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 800150c:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <Tact_pins+0x20c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b05      	cmp	r3, #5
 8001512:	f200 80ed 	bhi.w	80016f0 <Tact_pins+0x208>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <Tact_pins+0x34>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	08001535 	.word	0x08001535
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c9 	.word	0x080015c9
 8001528:	08001613 	.word	0x08001613
 800152c:	0800165d 	.word	0x0800165d
 8001530:	080016a7 	.word	0x080016a7
	{
		case 0:
			C0_HIGH;
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153a:	4870      	ldr	r0, [pc, #448]	; (80016fc <Tact_pins+0x214>)
 800153c:	f007 f80c 	bl	8008558 <HAL_GPIO_WritePin>
			C1_LOW;
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001546:	486d      	ldr	r0, [pc, #436]	; (80016fc <Tact_pins+0x214>)
 8001548:	f007 f806 	bl	8008558 <HAL_GPIO_WritePin>
			C2_LOW;
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001552:	486a      	ldr	r0, [pc, #424]	; (80016fc <Tact_pins+0x214>)
 8001554:	f007 f800 	bl	8008558 <HAL_GPIO_WritePin>
			C3_LOW;
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155e:	4867      	ldr	r0, [pc, #412]	; (80016fc <Tact_pins+0x214>)
 8001560:	f006 fffa 	bl	8008558 <HAL_GPIO_WritePin>
			C4_LOW;
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156a:	4864      	ldr	r0, [pc, #400]	; (80016fc <Tact_pins+0x214>)
 800156c:	f006 fff4 	bl	8008558 <HAL_GPIO_WritePin>
			C5_LOW;
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001576:	4861      	ldr	r0, [pc, #388]	; (80016fc <Tact_pins+0x214>)
 8001578:	f006 ffee 	bl	8008558 <HAL_GPIO_WritePin>
			break;
 800157c:	e0b8      	b.n	80016f0 <Tact_pins+0x208>
		case 1:
			C0_LOW;
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001584:	485d      	ldr	r0, [pc, #372]	; (80016fc <Tact_pins+0x214>)
 8001586:	f006 ffe7 	bl	8008558 <HAL_GPIO_WritePin>
			C1_HIGH;
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001590:	485a      	ldr	r0, [pc, #360]	; (80016fc <Tact_pins+0x214>)
 8001592:	f006 ffe1 	bl	8008558 <HAL_GPIO_WritePin>
			C2_LOW;
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159c:	4857      	ldr	r0, [pc, #348]	; (80016fc <Tact_pins+0x214>)
 800159e:	f006 ffdb 	bl	8008558 <HAL_GPIO_WritePin>
			C3_LOW;
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a8:	4854      	ldr	r0, [pc, #336]	; (80016fc <Tact_pins+0x214>)
 80015aa:	f006 ffd5 	bl	8008558 <HAL_GPIO_WritePin>
			C4_LOW;
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b4:	4851      	ldr	r0, [pc, #324]	; (80016fc <Tact_pins+0x214>)
 80015b6:	f006 ffcf 	bl	8008558 <HAL_GPIO_WritePin>
			C5_LOW;
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c0:	484e      	ldr	r0, [pc, #312]	; (80016fc <Tact_pins+0x214>)
 80015c2:	f006 ffc9 	bl	8008558 <HAL_GPIO_WritePin>
			break;
 80015c6:	e093      	b.n	80016f0 <Tact_pins+0x208>
		case 2:
			C0_LOW;
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	484b      	ldr	r0, [pc, #300]	; (80016fc <Tact_pins+0x214>)
 80015d0:	f006 ffc2 	bl	8008558 <HAL_GPIO_WritePin>
			C1_LOW;
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015da:	4848      	ldr	r0, [pc, #288]	; (80016fc <Tact_pins+0x214>)
 80015dc:	f006 ffbc 	bl	8008558 <HAL_GPIO_WritePin>
			C2_HIGH;
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e6:	4845      	ldr	r0, [pc, #276]	; (80016fc <Tact_pins+0x214>)
 80015e8:	f006 ffb6 	bl	8008558 <HAL_GPIO_WritePin>
			C3_LOW;
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f2:	4842      	ldr	r0, [pc, #264]	; (80016fc <Tact_pins+0x214>)
 80015f4:	f006 ffb0 	bl	8008558 <HAL_GPIO_WritePin>
			C4_LOW;
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fe:	483f      	ldr	r0, [pc, #252]	; (80016fc <Tact_pins+0x214>)
 8001600:	f006 ffaa 	bl	8008558 <HAL_GPIO_WritePin>
			C5_LOW;
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160a:	483c      	ldr	r0, [pc, #240]	; (80016fc <Tact_pins+0x214>)
 800160c:	f006 ffa4 	bl	8008558 <HAL_GPIO_WritePin>
			break;
 8001610:	e06e      	b.n	80016f0 <Tact_pins+0x208>
		case 3:
			C0_LOW;
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001618:	4838      	ldr	r0, [pc, #224]	; (80016fc <Tact_pins+0x214>)
 800161a:	f006 ff9d 	bl	8008558 <HAL_GPIO_WritePin>
			C1_LOW;
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001624:	4835      	ldr	r0, [pc, #212]	; (80016fc <Tact_pins+0x214>)
 8001626:	f006 ff97 	bl	8008558 <HAL_GPIO_WritePin>
			C2_LOW;
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001630:	4832      	ldr	r0, [pc, #200]	; (80016fc <Tact_pins+0x214>)
 8001632:	f006 ff91 	bl	8008558 <HAL_GPIO_WritePin>
			C3_HIGH;
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	482f      	ldr	r0, [pc, #188]	; (80016fc <Tact_pins+0x214>)
 800163e:	f006 ff8b 	bl	8008558 <HAL_GPIO_WritePin>
			C4_LOW;
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001648:	482c      	ldr	r0, [pc, #176]	; (80016fc <Tact_pins+0x214>)
 800164a:	f006 ff85 	bl	8008558 <HAL_GPIO_WritePin>
			C5_LOW;
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001654:	4829      	ldr	r0, [pc, #164]	; (80016fc <Tact_pins+0x214>)
 8001656:	f006 ff7f 	bl	8008558 <HAL_GPIO_WritePin>
			break;
 800165a:	e049      	b.n	80016f0 <Tact_pins+0x208>
		case 4:
			C0_LOW;
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001662:	4826      	ldr	r0, [pc, #152]	; (80016fc <Tact_pins+0x214>)
 8001664:	f006 ff78 	bl	8008558 <HAL_GPIO_WritePin>
			C1_LOW;
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166e:	4823      	ldr	r0, [pc, #140]	; (80016fc <Tact_pins+0x214>)
 8001670:	f006 ff72 	bl	8008558 <HAL_GPIO_WritePin>
			C2_LOW;
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167a:	4820      	ldr	r0, [pc, #128]	; (80016fc <Tact_pins+0x214>)
 800167c:	f006 ff6c 	bl	8008558 <HAL_GPIO_WritePin>
			C3_LOW;
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001686:	481d      	ldr	r0, [pc, #116]	; (80016fc <Tact_pins+0x214>)
 8001688:	f006 ff66 	bl	8008558 <HAL_GPIO_WritePin>
			C4_HIGH;
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	481a      	ldr	r0, [pc, #104]	; (80016fc <Tact_pins+0x214>)
 8001694:	f006 ff60 	bl	8008558 <HAL_GPIO_WritePin>
			C5_LOW;
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <Tact_pins+0x214>)
 80016a0:	f006 ff5a 	bl	8008558 <HAL_GPIO_WritePin>
			break;
 80016a4:	e024      	b.n	80016f0 <Tact_pins+0x208>
		case 5:
			C0_LOW;
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ac:	4813      	ldr	r0, [pc, #76]	; (80016fc <Tact_pins+0x214>)
 80016ae:	f006 ff53 	bl	8008558 <HAL_GPIO_WritePin>
			C1_LOW;
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <Tact_pins+0x214>)
 80016ba:	f006 ff4d 	bl	8008558 <HAL_GPIO_WritePin>
			C2_LOW;
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <Tact_pins+0x214>)
 80016c6:	f006 ff47 	bl	8008558 <HAL_GPIO_WritePin>
			C3_LOW;
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d0:	480a      	ldr	r0, [pc, #40]	; (80016fc <Tact_pins+0x214>)
 80016d2:	f006 ff41 	bl	8008558 <HAL_GPIO_WritePin>
			C4_LOW;
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <Tact_pins+0x214>)
 80016de:	f006 ff3b 	bl	8008558 <HAL_GPIO_WritePin>
			C5_HIGH;
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <Tact_pins+0x214>)
 80016ea:	f006 ff35 	bl	8008558 <HAL_GPIO_WritePin>
			break;
 80016ee:	bf00      	nop
	}
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20006e50 	.word	0x20006e50
 80016f8:	2aaaaaab 	.word	0x2aaaaaab
 80016fc:	40020c00 	.word	0x40020c00

08001700 <Key_Read>:


static void Key_Read(void)
{
 8001700:	b598      	push	{r3, r4, r7, lr}
 8001702:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <Key_Read+0xe0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461c      	mov	r4, r3
 800170a:	2101      	movs	r1, #1
 800170c:	4835      	ldr	r0, [pc, #212]	; (80017e4 <Key_Read+0xe4>)
 800170e:	f006 ff0b 	bl	8008528 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	4619      	mov	r1, r3
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <Key_Read+0xe8>)
 8001718:	4623      	mov	r3, r4
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4423      	add	r3, r4
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	460a      	mov	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <Key_Read+0xe0>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461c      	mov	r4, r3
 800172c:	2102      	movs	r1, #2
 800172e:	482d      	ldr	r0, [pc, #180]	; (80017e4 <Key_Read+0xe4>)
 8001730:	f006 fefa 	bl	8008528 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	4619      	mov	r1, r3
 8001738:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <Key_Read+0xe8>)
 800173a:	4623      	mov	r3, r4
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4423      	add	r3, r4
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3301      	adds	r3, #1
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <Key_Read+0xe0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461c      	mov	r4, r3
 8001750:	2104      	movs	r1, #4
 8001752:	4824      	ldr	r0, [pc, #144]	; (80017e4 <Key_Read+0xe4>)
 8001754:	f006 fee8 	bl	8008528 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	4619      	mov	r1, r3
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <Key_Read+0xe8>)
 800175e:	4623      	mov	r3, r4
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4423      	add	r3, r4
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3302      	adds	r3, #2
 800176a:	460a      	mov	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <Key_Read+0xe0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461c      	mov	r4, r3
 8001774:	2108      	movs	r1, #8
 8001776:	481b      	ldr	r0, [pc, #108]	; (80017e4 <Key_Read+0xe4>)
 8001778:	f006 fed6 	bl	8008528 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	4619      	mov	r1, r3
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <Key_Read+0xe8>)
 8001782:	4623      	mov	r3, r4
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4423      	add	r3, r4
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	3303      	adds	r3, #3
 800178e:	460a      	mov	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <Key_Read+0xe0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461c      	mov	r4, r3
 8001798:	2110      	movs	r1, #16
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <Key_Read+0xe4>)
 800179c:	f006 fec4 	bl	8008528 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <Key_Read+0xe8>)
 80017a6:	4623      	mov	r3, r4
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4423      	add	r3, r4
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	3304      	adds	r3, #4
 80017b2:	460a      	mov	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <Key_Read+0xe0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461c      	mov	r4, r3
 80017bc:	2120      	movs	r1, #32
 80017be:	4809      	ldr	r0, [pc, #36]	; (80017e4 <Key_Read+0xe4>)
 80017c0:	f006 feb2 	bl	8008528 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <Key_Read+0xe8>)
 80017ca:	4623      	mov	r3, r4
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4423      	add	r3, r4
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	3305      	adds	r3, #5
 80017d6:	460a      	mov	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	bd98      	pop	{r3, r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20006e50 	.word	0x20006e50
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	2000062c 	.word	0x2000062c

080017ec <key_filter_all>:

static void key_filter_all()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e013      	b.n	8001820 <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	e00a      	b.n	8001814 <key_filter_all+0x28>
			key_filter(x, y);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f811 	bl	8001830 <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b05      	cmp	r3, #5
 8001818:	ddf1      	ble.n	80017fe <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3301      	adds	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b05      	cmp	r3, #5
 8001824:	dde8      	ble.n	80017f8 <key_filter_all+0xc>
		}
	}
}
 8001826:	bf00      	nop
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 8001830:	b490      	push	{r4, r7}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 8001840:	79fa      	ldrb	r2, [r7, #7]
 8001842:	79b9      	ldrb	r1, [r7, #6]
 8001844:	483e      	ldr	r0, [pc, #248]	; (8001940 <key_filter+0x110>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4403      	add	r3, r0
 8001850:	440b      	add	r3, r1
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01b      	beq.n	8001890 <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	79b9      	ldrb	r1, [r7, #6]
 800185c:	4839      	ldr	r0, [pc, #228]	; (8001944 <key_filter+0x114>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4403      	add	r3, r0
 8001868:	440b      	add	r3, r1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b18      	cmp	r3, #24
 800186e:	bf28      	it	cs
 8001870:	2318      	movcs	r3, #24
 8001872:	b2db      	uxtb	r3, r3
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	79b9      	ldrb	r1, [r7, #6]
 8001878:	3301      	adds	r3, #1
 800187a:	b2dc      	uxtb	r4, r3
 800187c:	4831      	ldr	r0, [pc, #196]	; (8001944 <key_filter+0x114>)
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4403      	add	r3, r0
 8001888:	440b      	add	r3, r1
 800188a:	4622      	mov	r2, r4
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e024      	b.n	80018da <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	79b9      	ldrb	r1, [r7, #6]
 8001894:	482b      	ldr	r0, [pc, #172]	; (8001944 <key_filter+0x114>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4403      	add	r3, r0
 80018a0:	440b      	add	r3, r1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00c      	beq.n	80018c2 <key_filter+0x92>
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	79b9      	ldrb	r1, [r7, #6]
 80018ac:	4825      	ldr	r0, [pc, #148]	; (8001944 <key_filter+0x114>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4403      	add	r3, r0
 80018b8:	440b      	add	r3, r1
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2d8      	uxtb	r0, r3
 80018c0:	e000      	b.n	80018c4 <key_filter+0x94>
 80018c2:	2000      	movs	r0, #0
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	79b9      	ldrb	r1, [r7, #6]
 80018c8:	4c1e      	ldr	r4, [pc, #120]	; (8001944 <key_filter+0x114>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4423      	add	r3, r4
 80018d4:	440b      	add	r3, r1
 80018d6:	4602      	mov	r2, r0
 80018d8:	701a      	strb	r2, [r3, #0]
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	79b9      	ldrb	r1, [r7, #6]
 80018de:	4819      	ldr	r0, [pc, #100]	; (8001944 <key_filter+0x114>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4403      	add	r3, r0
 80018ea:	440b      	add	r3, r1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b19      	cmp	r3, #25
 80018f0:	d10a      	bne.n	8001908 <key_filter+0xd8>
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	79b9      	ldrb	r1, [r7, #6]
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <key_filter+0x118>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4403      	add	r3, r0
 8001902:	440b      	add	r3, r1
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	79b9      	ldrb	r1, [r7, #6]
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <key_filter+0x114>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4403      	add	r3, r0
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <key_filter+0x106>
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	79b9      	ldrb	r1, [r7, #6]
 8001924:	4808      	ldr	r0, [pc, #32]	; (8001948 <key_filter+0x118>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4403      	add	r3, r0
 8001930:	440b      	add	r3, r1
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bc90      	pop	{r4, r7}
 800193e:	4770      	bx	lr
 8001940:	2000062c 	.word	0x2000062c
 8001944:	20000698 	.word	0x20000698
 8001948:	20000650 	.word	0x20000650

0800194c <GetPositiveFront>:

static void GetPositiveFront()
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	e047      	b.n	80019e8 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	e03e      	b.n	80019dc <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <GetPositiveFront+0xb0>)
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	18ca      	adds	r2, r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10d      	bne.n	8001992 <GetPositiveFront+0x46>
 8001976:	4922      	ldr	r1, [pc, #136]	; (8001a00 <GetPositiveFront+0xb4>)
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	18ca      	adds	r2, r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <GetPositiveFront+0x46>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <GetPositiveFront+0x48>
 8001992:	2300      	movs	r3, #0
 8001994:	b2d8      	uxtb	r0, r3
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <GetPositiveFront+0xb8>)
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	18ca      	adds	r2, r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4602      	mov	r2, r0
 80019aa:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 80019ac:	4913      	ldr	r1, [pc, #76]	; (80019fc <GetPositiveFront+0xb0>)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	18ca      	adds	r2, r1, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	7818      	ldrb	r0, [r3, #0]
 80019c0:	490f      	ldr	r1, [pc, #60]	; (8001a00 <GetPositiveFront+0xb4>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	4602      	mov	r2, r0
 80019d4:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	ddbd      	ble.n	800195e <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3301      	adds	r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	ddb4      	ble.n	8001958 <GetPositiveFront+0xc>
		}
	}
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20000650 	.word	0x20000650
 8001a00:	20000674 	.word	0x20000674
 8001a04:	200006bc 	.word	0x200006bc

08001a08 <SendToLcd>:
	row_pointer = row_pointer>=3 ? 0 : row_pointer+1;
	SendToLcd();
}

static void SendToLcd()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	sendStr(lcd[0], 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <SendToLcd+0x30>)
 8001a12:	f001 facd 	bl	8002fb0 <sendStr>
	sendStr(lcd[1], 1, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <SendToLcd+0x34>)
 8001a1c:	f001 fac8 	bl	8002fb0 <sendStr>
	sendStr(lcd[2], 2, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2102      	movs	r1, #2
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <SendToLcd+0x38>)
 8001a26:	f001 fac3 	bl	8002fb0 <sendStr>
	sendStr(lcd[3], 3, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <SendToLcd+0x3c>)
 8001a30:	f001 fabe 	bl	8002fb0 <sendStr>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20006e00 	.word	0x20006e00
 8001a3c:	20006e14 	.word	0x20006e14
 8001a40:	20006e28 	.word	0x20006e28
 8001a44:	20006e3c 	.word	0x20006e3c

08001a48 <OnKeyPress>:
};

static int get_answer(uint8_t len, uint8_t *req, uint8_t *answer);

int OnKeyPress(uint8_t *req,uint8_t req_length, uint8_t *answer)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	460b      	mov	r3, r1
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	72fb      	strb	r3, [r7, #11]
	char *p = (char*)req;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	617b      	str	r3, [r7, #20]
	if(!strncmp(p, "Enter", strlen("Enter")))
 8001a5a:	2205      	movs	r2, #5
 8001a5c:	49a1      	ldr	r1, [pc, #644]	; (8001ce4 <OnKeyPress+0x29c>)
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f01b fb27 	bl	801d0b2 <strncmp>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <OnKeyPress+0x32>
	{
		if(!OnEnterPressAction()) return 0;
 8001a6a:	f000 f97d 	bl	8001d68 <OnEnterPressAction>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 8110 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001a76:	2300      	movs	r3, #0
 8001a78:	e12f      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Esc", strlen("Esc")))
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	499a      	ldr	r1, [pc, #616]	; (8001ce8 <OnKeyPress+0x2a0>)
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f01b fb17 	bl	801d0b2 <strncmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d107      	bne.n	8001a9a <OnKeyPress+0x52>
	{
		if(!OnEscPressKey()) return 0;
 8001a8a:	f000 fd3d 	bl	8002508 <OnEscPressKey>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 8100 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001a96:	2300      	movs	r3, #0
 8001a98:	e11f      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Delete", strlen("Delete")))
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	4993      	ldr	r1, [pc, #588]	; (8001cec <OnKeyPress+0x2a4>)
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f01b fb07 	bl	801d0b2 <strncmp>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <OnKeyPress+0x70>
	{
		return get_answer(strlen("Delete"),req,answer);
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	2006      	movs	r0, #6
 8001ab0:	f000 f948 	bl	8001d44 <get_answer>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	e110      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Up", strlen("Up")))
 8001ab8:	2202      	movs	r2, #2
 8001aba:	498d      	ldr	r1, [pc, #564]	; (8001cf0 <OnKeyPress+0x2a8>)
 8001abc:	6978      	ldr	r0, [r7, #20]
 8001abe:	f01b faf8 	bl	801d0b2 <strncmp>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <OnKeyPress+0x90>
	{
		if(!OnUpPressKey())return 0;
 8001ac8:	f000 fc36 	bl	8002338 <OnUpPressKey>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80e1 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e100      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Right", strlen("Right")))
 8001ad8:	2205      	movs	r2, #5
 8001ada:	4986      	ldr	r1, [pc, #536]	; (8001cf4 <OnKeyPress+0x2ac>)
 8001adc:	6978      	ldr	r0, [r7, #20]
 8001ade:	f01b fae8 	bl	801d0b2 <strncmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <OnKeyPress+0xb0>
	{
		if(!OnRightPressKey())return 0;
 8001ae8:	f000 fba6 	bl	8002238 <OnRightPressKey>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80d1 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001af4:	2300      	movs	r3, #0
 8001af6:	e0f0      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Left", strlen("Left")))
 8001af8:	2204      	movs	r2, #4
 8001afa:	497f      	ldr	r1, [pc, #508]	; (8001cf8 <OnKeyPress+0x2b0>)
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	f01b fad8 	bl	801d0b2 <strncmp>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <OnKeyPress+0xd0>
	{
		if(!OnLeftPressKey())return 0;
 8001b08:	f000 fb16 	bl	8002138 <OnLeftPressKey>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80c1 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0e0      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Down", strlen("Down")))
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4978      	ldr	r1, [pc, #480]	; (8001cfc <OnKeyPress+0x2b4>)
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f01b fac8 	bl	801d0b2 <strncmp>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <OnKeyPress+0xf0>
	{
		if(!OnDownPressKey())return 0;
 8001b28:	f000 fabe 	bl	80020a8 <OnDownPressKey>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80b1 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001b34:	2300      	movs	r3, #0
 8001b36:	e0d0      	b.n	8001cda <OnKeyPress+0x292>

	}
	else if(!strncmp(p, "F1", strlen("F1")))
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4971      	ldr	r1, [pc, #452]	; (8001d00 <OnKeyPress+0x2b8>)
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	f01b fab8 	bl	801d0b2 <strncmp>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <OnKeyPress+0x110>
	{
		if(!OnF1PressKey())return 0;
 8001b48:	f000 fc3e 	bl	80023c8 <OnF1PressKey>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80a1 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001b54:	2300      	movs	r3, #0
 8001b56:	e0c0      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "F2", strlen("F2")))
 8001b58:	2202      	movs	r2, #2
 8001b5a:	496a      	ldr	r1, [pc, #424]	; (8001d04 <OnKeyPress+0x2bc>)
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f01b faa8 	bl	801d0b2 <strncmp>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <OnKeyPress+0x130>
	{
		if(!OnF2PressKey())return 0;
 8001b68:	f000 fc40 	bl	80023ec <OnF2PressKey>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8091 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e0b0      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "F3", strlen("F3")))
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4963      	ldr	r1, [pc, #396]	; (8001d08 <OnKeyPress+0x2c0>)
 8001b7c:	6978      	ldr	r0, [r7, #20]
 8001b7e:	f01b fa98 	bl	801d0b2 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <OnKeyPress+0x150>
	{
		if(!OnF3PressKey())return 0;
 8001b88:	f000 fc68 	bl	800245c <OnF3PressKey>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8081 	bne.w	8001c96 <OnKeyPress+0x24e>
 8001b94:	2300      	movs	r3, #0
 8001b96:	e0a0      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "F4", strlen("F4")))
 8001b98:	2202      	movs	r2, #2
 8001b9a:	495c      	ldr	r1, [pc, #368]	; (8001d0c <OnKeyPress+0x2c4>)
 8001b9c:	6978      	ldr	r0, [r7, #20]
 8001b9e:	f01b fa88 	bl	801d0b2 <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <OnKeyPress+0x16e>
	{
		if(!OnF4PressKey())return 0;
 8001ba8:	f000 fc90 	bl	80024cc <OnF4PressKey>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d171      	bne.n	8001c96 <OnKeyPress+0x24e>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e091      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad0", strlen("NumPad0")))
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	4955      	ldr	r1, [pc, #340]	; (8001d10 <OnKeyPress+0x2c8>)
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f01b fa79 	bl	801d0b2 <strncmp>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <OnKeyPress+0x182>
	{
		return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e087      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad1", strlen("NumPad1")))
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4951      	ldr	r1, [pc, #324]	; (8001d14 <OnKeyPress+0x2cc>)
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f01b fa6f 	bl	801d0b2 <strncmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <OnKeyPress+0x196>
	{
		return 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e07d      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad2", strlen("NumPad2")))
 8001bde:	2207      	movs	r2, #7
 8001be0:	494d      	ldr	r1, [pc, #308]	; (8001d18 <OnKeyPress+0x2d0>)
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f01b fa65 	bl	801d0b2 <strncmp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <OnKeyPress+0x1aa>
	{
		return 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e073      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad3", strlen("NumPad3")))
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	4949      	ldr	r1, [pc, #292]	; (8001d1c <OnKeyPress+0x2d4>)
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f01b fa5b 	bl	801d0b2 <strncmp>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <OnKeyPress+0x1be>
	{
		return 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e069      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad4", strlen("NumPad4")))
 8001c06:	2207      	movs	r2, #7
 8001c08:	4945      	ldr	r1, [pc, #276]	; (8001d20 <OnKeyPress+0x2d8>)
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f01b fa51 	bl	801d0b2 <strncmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <OnKeyPress+0x1d2>
	{
		return 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e05f      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad5", strlen("NumPad5")))
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4941      	ldr	r1, [pc, #260]	; (8001d24 <OnKeyPress+0x2dc>)
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f01b fa47 	bl	801d0b2 <strncmp>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <OnKeyPress+0x1e6>
	{
		return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e055      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad6", strlen("NumPad6")))
 8001c2e:	2207      	movs	r2, #7
 8001c30:	493d      	ldr	r1, [pc, #244]	; (8001d28 <OnKeyPress+0x2e0>)
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f01b fa3d 	bl	801d0b2 <strncmp>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <OnKeyPress+0x1fa>
	{
		return 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e04b      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad7", strlen("NumPad7")))
 8001c42:	2207      	movs	r2, #7
 8001c44:	4939      	ldr	r1, [pc, #228]	; (8001d2c <OnKeyPress+0x2e4>)
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f01b fa33 	bl	801d0b2 <strncmp>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <OnKeyPress+0x20e>
	{
		return 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e041      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad8", strlen("NumPad8")))
 8001c56:	2207      	movs	r2, #7
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <OnKeyPress+0x2e8>)
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f01b fa29 	bl	801d0b2 <strncmp>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <OnKeyPress+0x222>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e037      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "NumPad9", strlen("NumPad9")))
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4931      	ldr	r1, [pc, #196]	; (8001d34 <OnKeyPress+0x2ec>)
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f01b fa1f 	bl	801d0b2 <strncmp>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <OnKeyPress+0x236>
	{
		return 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e02d      	b.n	8001cda <OnKeyPress+0x292>
	}
	else if(!strncmp(p, "Dec", strlen("Dec")))
 8001c7e:	2203      	movs	r2, #3
 8001c80:	492d      	ldr	r1, [pc, #180]	; (8001d38 <OnKeyPress+0x2f0>)
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f01b fa15 	bl	801d0b2 <strncmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <OnKeyPress+0x24a>
	{
		return 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e023      	b.n	8001cda <OnKeyPress+0x292>
	}
	else return 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e021      	b.n	8001cda <OnKeyPress+0x292>
	memcpy(answer,lcdAnswer,80);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <OnKeyPress+0x2f4>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	2350      	movs	r3, #80	; 0x50
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f01a fff7 	bl	801cc94 <memcpy>
	if(currentCursorPosition==-1)
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <OnKeyPress+0x2f8>)
 8001ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d106      	bne.n	8001cc0 <OnKeyPress+0x278>
	{
		answer[80] = 255;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3350      	adds	r3, #80	; 0x50
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	701a      	strb	r2, [r3, #0]
		return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e00c      	b.n	8001cda <OnKeyPress+0x292>

	}
	else
	{
		answer[80] = currentCursorPosition+40;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <OnKeyPress+0x2f8>)
 8001cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3350      	adds	r3, #80	; 0x50
 8001ccc:	3228      	adds	r2, #40	; 0x28
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
	}
	return currentCursorPosition+40;
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <OnKeyPress+0x2f8>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	3328      	adds	r3, #40	; 0x28
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	0801e24c 	.word	0x0801e24c
 8001ce8:	0801e254 	.word	0x0801e254
 8001cec:	0801e258 	.word	0x0801e258
 8001cf0:	0801e260 	.word	0x0801e260
 8001cf4:	0801e264 	.word	0x0801e264
 8001cf8:	0801e26c 	.word	0x0801e26c
 8001cfc:	0801e274 	.word	0x0801e274
 8001d00:	0801e27c 	.word	0x0801e27c
 8001d04:	0801e280 	.word	0x0801e280
 8001d08:	0801e284 	.word	0x0801e284
 8001d0c:	0801e288 	.word	0x0801e288
 8001d10:	0801e28c 	.word	0x0801e28c
 8001d14:	0801e294 	.word	0x0801e294
 8001d18:	0801e29c 	.word	0x0801e29c
 8001d1c:	0801e2a4 	.word	0x0801e2a4
 8001d20:	0801e2ac 	.word	0x0801e2ac
 8001d24:	0801e2b4 	.word	0x0801e2b4
 8001d28:	0801e2bc 	.word	0x0801e2bc
 8001d2c:	0801e2c4 	.word	0x0801e2c4
 8001d30:	0801e2cc 	.word	0x0801e2cc
 8001d34:	0801e2d4 	.word	0x0801e2d4
 8001d38:	0801e2dc 	.word	0x0801e2dc
 8001d3c:	20006e54 	.word	0x20006e54
 8001d40:	200000a0 	.word	0x200000a0

08001d44 <get_answer>:

static int get_answer(uint8_t len, uint8_t *req, uint8_t *answer)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	73fb      	strb	r3, [r7, #15]
	memcpy(answer,req,len);
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	461a      	mov	r2, r3
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f01a ff9b 	bl	801cc94 <memcpy>
	return len;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <OnEnterPressAction>:

static uint8_t OnEnterPressAction()
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
	Row *par = NULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
	if(currentParameters == NULL)
 8001d72:	4b76      	ldr	r3, [pc, #472]	; (8001f4c <OnEnterPressAction+0x1e4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d122      	bne.n	8001dc0 <OnEnterPressAction+0x58>
	{
		currentCursorPosition = -1;
 8001d7a:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <OnEnterPressAction+0x1e8>)
 8001d7c:	22ff      	movs	r2, #255	; 0xff
 8001d7e:	701a      	strb	r2, [r3, #0]
		currentParameters = indication_rows;
 8001d80:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <OnEnterPressAction+0x1e4>)
 8001d82:	4a74      	ldr	r2, [pc, #464]	; (8001f54 <OnEnterPressAction+0x1ec>)
 8001d84:	601a      	str	r2, [r3, #0]
		paramIndex = 0;
 8001d86:	4b74      	ldr	r3, [pc, #464]	; (8001f58 <OnEnterPressAction+0x1f0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
		currentParamLength = sizeof(indication_rows)/sizeof(Row);
 8001d8c:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <OnEnterPressAction+0x1f4>)
 8001d8e:	2202      	movs	r2, #2
 8001d90:	701a      	strb	r2, [r3, #0]
		editMode = 0;
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <OnEnterPressAction+0x1f8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
		groupParamName = indicationName;
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <OnEnterPressAction+0x1fc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a72      	ldr	r2, [pc, #456]	; (8001f68 <OnEnterPressAction+0x200>)
 8001d9e:	6013      	str	r3, [r2, #0]
		groupParamNameLength = strlen(indicationName);
 8001da0:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <OnEnterPressAction+0x1fc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fa13 	bl	80001d0 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <OnEnterPressAction+0x204>)
 8001db0:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters);
 8001db2:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <OnEnterPressAction+0x1e4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fbea 	bl	8002590 <ShowParameter>
		return 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0c1      	b.n	8001f44 <OnEnterPressAction+0x1dc>
	}
	else if(currentParameters!=Errors)// В случае если находимся в параметре
 8001dc0:	4b62      	ldr	r3, [pc, #392]	; (8001f4c <OnEnterPressAction+0x1e4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <OnEnterPressAction+0x208>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f000 80bb 	beq.w	8001f42 <OnEnterPressAction+0x1da>
	{
		par = currentParameters+paramIndex;
 8001dcc:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <OnEnterPressAction+0x1e4>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <OnEnterPressAction+0x1f0>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	440b      	add	r3, r1
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	60bb      	str	r3, [r7, #8]
		if(!editMode)// Если находимся не в режиме редактирования
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <OnEnterPressAction+0x1f8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 80a3 	bne.w	8001f32 <OnEnterPressAction+0x1ca>
		{

			if(par->isEdited)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <OnEnterPressAction+0x1da>
			{
				Clear();
 8001df6:	f000 f8c3 	bl	8001f80 <Clear>
				if(!par->isEnum)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	7a1b      	ldrb	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d123      	bne.n	8001e4a <OnEnterPressAction+0xe2>
				{
					Print(par,2);
 8001e02:	2102      	movs	r1, #2
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f000 fea7 	bl	8002b58 <Print>
					for (int i = 0; i < 20; ++i) {
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	e00c      	b.n	8001e2a <OnEnterPressAction+0xc2>
						editedValue[i] = lcdAnswer[2][i];
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <OnEnterPressAction+0x20c>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	3328      	adds	r3, #40	; 0x28
 8001e18:	7819      	ldrb	r1, [r3, #0]
 8001e1a:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <OnEnterPressAction+0x210>)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	460a      	mov	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 20; ++i) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b13      	cmp	r3, #19
 8001e2e:	ddef      	ble.n	8001e10 <OnEnterPressAction+0xa8>
					}
					editMode = 1;
 8001e30:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <OnEnterPressAction+0x1f8>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
					currentCursorPosition = par->param_pos;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	79db      	ldrb	r3, [r3, #7]
 8001e3a:	b25a      	sxtb	r2, r3
 8001e3c:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <OnEnterPressAction+0x1e8>)
 8001e3e:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f000 fba5 	bl	8002590 <ShowParameter>
					return 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07c      	b.n	8001f44 <OnEnterPressAction+0x1dc>
				}
				else
				{
					if(par->enums==NULL)return 0;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <OnEnterPressAction+0xee>
 8001e52:	2300      	movs	r3, #0
 8001e54:	e076      	b.n	8001f44 <OnEnterPressAction+0x1dc>
					memset(editedValue,0,20);
 8001e56:	2214      	movs	r2, #20
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4847      	ldr	r0, [pc, #284]	; (8001f78 <OnEnterPressAction+0x210>)
 8001e5c:	f01a ff42 	bl	801cce4 <memset>
					switch (par->type) {
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	7d5b      	ldrb	r3, [r3, #21]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <OnEnterPressAction+0x106>
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d00b      	beq.n	8001e84 <OnEnterPressAction+0x11c>
							break;
						case ROW_UINT:
							currentEnumKey = *((uint32_t*)par->data);
							break;
						default:
							break;
 8001e6c:	e015      	b.n	8001e9a <OnEnterPressAction+0x132>
							currentEnumKey = *((uint16_t*)par->data);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <OnEnterPressAction+0x214>)
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
							break;
 8001e82:	e00a      	b.n	8001e9a <OnEnterPressAction+0x132>
							currentEnumKey = *((uint32_t*)par->data);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <OnEnterPressAction+0x214>)
 8001e94:	edc3 7a00 	vstr	s15, [r3]
							break;
 8001e98:	bf00      	nop
					}
					Dictionary *dict = FindDictionaryFromValue(currentEnumKey, par->enums, par->enums_len);
 8001e9a:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <OnEnterPressAction+0x214>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	7d1b      	ldrb	r3, [r3, #20]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	f000 fdf2 	bl	8002a98 <FindDictionaryFromValue>
 8001eb4:	6078      	str	r0, [r7, #4]
					if(dict==NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d119      	bne.n	8001ef0 <OnEnterPressAction+0x188>
					{
						currentEnumKey = par->enums->value;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <OnEnterPressAction+0x214>)
 8001ec4:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,par->enums->name, strlen(par->enums->name));
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	79db      	ldrb	r3, [r3, #7]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <OnEnterPressAction+0x210>)
 8001ece:	18d4      	adds	r4, r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	685d      	ldr	r5, [r3, #4]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe f977 	bl	80001d0 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f01a fed3 	bl	801cc94 <memcpy>
 8001eee:	e015      	b.n	8001f1c <OnEnterPressAction+0x1b4>
					}
					else
					{
						currentEnumKey = dict->value;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <OnEnterPressAction+0x214>)
 8001ef6:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,dict->name, strlen(dict->name));
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	79db      	ldrb	r3, [r3, #7]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <OnEnterPressAction+0x210>)
 8001f00:	18d4      	adds	r4, r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685d      	ldr	r5, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe f960 	bl	80001d0 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4629      	mov	r1, r5
 8001f16:	4620      	mov	r0, r4
 8001f18:	f01a febc 	bl	801cc94 <memcpy>
					}
					currentCursorPosition = -1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <OnEnterPressAction+0x1e8>)
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	701a      	strb	r2, [r3, #0]
					editMode = 1;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <OnEnterPressAction+0x1f8>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 8001f28:	68b8      	ldr	r0, [r7, #8]
 8001f2a:	f000 fb31 	bl	8002590 <ShowParameter>
					return 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e008      	b.n	8001f44 <OnEnterPressAction+0x1dc>
				}
			}
		}
		else
		{
			AcceptEdit(par);
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f000 febe 	bl	8002cb4 <AcceptEdit>
			ShowParameter(par);
 8001f38:	68b8      	ldr	r0, [r7, #8]
 8001f3a:	f000 fb29 	bl	8002590 <ShowParameter>
			return 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <OnEnterPressAction+0x1dc>
		}
	}
	return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4c:	200006e0 	.word	0x200006e0
 8001f50:	200000a0 	.word	0x200000a0
 8001f54:	200002ac 	.word	0x200002ac
 8001f58:	200006e4 	.word	0x200006e4
 8001f5c:	20006f10 	.word	0x20006f10
 8001f60:	200006e5 	.word	0x200006e5
 8001f64:	2000009c 	.word	0x2000009c
 8001f68:	20006f0c 	.word	0x20006f0c
 8001f6c:	20006ea4 	.word	0x20006ea4
 8001f70:	200000fc 	.word	0x200000fc
 8001f74:	20006e54 	.word	0x20006e54
 8001f78:	20006ea8 	.word	0x20006ea8
 8001f7c:	200006e8 	.word	0x200006e8

08001f80 <Clear>:



static void Clear()
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	e016      	b.n	8001fba <Clear+0x3a>
		for (int j = 0; j < 20; ++j) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	e00d      	b.n	8001fae <Clear+0x2e>
			lcdAnswer[i][j] = 0;
 8001f92:	490f      	ldr	r1, [pc, #60]	; (8001fd0 <Clear+0x50>)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18ca      	adds	r2, r1, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 20; ++j) {
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b13      	cmp	r3, #19
 8001fb2:	ddee      	ble.n	8001f92 <Clear+0x12>
	for (int i = 0; i < 4; ++i) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	dde5      	ble.n	8001f8c <Clear+0xc>
		}
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20006e54 	.word	0x20006e54

08001fd4 <ShowMainDisplay>:

static uint8_t ShowMainDisplay()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	Clear();
 8001fd8:	f7ff ffd2 	bl	8001f80 <Clear>
	if(meas_data.automat_mode)
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <ShowMainDisplay+0x9c>)
 8001fde:	8a5b      	ldrh	r3, [r3, #18]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <ShowMainDisplay+0x32>
	{
		memcpy(lcdAnswer[0],"Auto mode ON",strlen("Auto mode ON"));
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4923      	ldr	r1, [pc, #140]	; (8002074 <ShowMainDisplay+0xa0>)
 8001fe8:	4823      	ldr	r0, [pc, #140]	; (8002078 <ShowMainDisplay+0xa4>)
 8001fea:	f01a fe53 	bl	801cc94 <memcpy>
		if(meas_data.probotbor_ready)sprintf(lcdAnswer[2],"Next sel. in %d s",meas_data.toNextOtborTime);
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <ShowMainDisplay+0x9c>)
 8001ff0:	899b      	ldrh	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <ShowMainDisplay+0x3c>
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <ShowMainDisplay+0x9c>)
 8001ff8:	8a9b      	ldrh	r3, [r3, #20]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	491f      	ldr	r1, [pc, #124]	; (800207c <ShowMainDisplay+0xa8>)
 8001ffe:	4820      	ldr	r0, [pc, #128]	; (8002080 <ShowMainDisplay+0xac>)
 8002000:	f01a fff4 	bl	801cfec <siprintf>
 8002004:	e004      	b.n	8002010 <ShowMainDisplay+0x3c>
	}
	else
	{
		memcpy(lcdAnswer[0],"Auto mode OFF",strlen("Auto mode OFF"));
 8002006:	220d      	movs	r2, #13
 8002008:	491e      	ldr	r1, [pc, #120]	; (8002084 <ShowMainDisplay+0xb0>)
 800200a:	481b      	ldr	r0, [pc, #108]	; (8002078 <ShowMainDisplay+0xa4>)
 800200c:	f01a fe42 	bl	801cc94 <memcpy>
	}

	if(meas_data.probotbor_ready)
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <ShowMainDisplay+0x9c>)
 8002012:	899b      	ldrh	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <ShowMainDisplay+0x50>
	{
		memcpy(lcdAnswer[1],"Ready for selection",strlen("Ready for selection"));
 8002018:	2213      	movs	r2, #19
 800201a:	491b      	ldr	r1, [pc, #108]	; (8002088 <ShowMainDisplay+0xb4>)
 800201c:	481b      	ldr	r0, [pc, #108]	; (800208c <ShowMainDisplay+0xb8>)
 800201e:	f01a fe39 	bl	801cc94 <memcpy>
 8002022:	e01c      	b.n	800205e <ShowMainDisplay+0x8a>
	}
	else if(meas_data.probotbor_busy)
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <ShowMainDisplay+0x9c>)
 8002026:	89db      	ldrh	r3, [r3, #14]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <ShowMainDisplay+0x64>
	{
		memcpy(lcdAnswer[1],"Executing selection",strlen("Executing selection"));
 800202c:	2213      	movs	r2, #19
 800202e:	4918      	ldr	r1, [pc, #96]	; (8002090 <ShowMainDisplay+0xbc>)
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <ShowMainDisplay+0xb8>)
 8002032:	f01a fe2f 	bl	801cc94 <memcpy>
 8002036:	e012      	b.n	800205e <ShowMainDisplay+0x8a>
	}
	else if(meas_data.vozvrat_probotbor_busy)
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <ShowMainDisplay+0x9c>)
 800203a:	8a1b      	ldrh	r3, [r3, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <ShowMainDisplay+0x78>
	{
		memcpy(lcdAnswer[1],"Executing return",strlen("Executing return"));
 8002040:	2210      	movs	r2, #16
 8002042:	4914      	ldr	r1, [pc, #80]	; (8002094 <ShowMainDisplay+0xc0>)
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <ShowMainDisplay+0xb8>)
 8002046:	f01a fe25 	bl	801cc94 <memcpy>
 800204a:	e008      	b.n	800205e <ShowMainDisplay+0x8a>
	}
	else if(*((uint16_t*)&meas_data.errors))
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <ShowMainDisplay+0xc4>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <ShowMainDisplay+0x8a>
	{
		memcpy(lcdAnswer[1],"Errors, press F4",strlen("Errors, press F4"));
 8002054:	2210      	movs	r2, #16
 8002056:	4911      	ldr	r1, [pc, #68]	; (800209c <ShowMainDisplay+0xc8>)
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <ShowMainDisplay+0xb8>)
 800205a:	f01a fe1b 	bl	801cc94 <memcpy>
	}
	memcpy(lcdAnswer[3]+3,"Indication->Enter",strlen("Indication->Enter"));
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <ShowMainDisplay+0xcc>)
 8002060:	2211      	movs	r2, #17
 8002062:	4910      	ldr	r1, [pc, #64]	; (80020a4 <ShowMainDisplay+0xd0>)
 8002064:	4618      	mov	r0, r3
 8002066:	f01a fe15 	bl	801cc94 <memcpy>
	return 1;
 800206a:	2301      	movs	r3, #1

}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200072cc 	.word	0x200072cc
 8002074:	0801e2e0 	.word	0x0801e2e0
 8002078:	20006e54 	.word	0x20006e54
 800207c:	0801e2f0 	.word	0x0801e2f0
 8002080:	20006e7c 	.word	0x20006e7c
 8002084:	0801e304 	.word	0x0801e304
 8002088:	0801e314 	.word	0x0801e314
 800208c:	20006e68 	.word	0x20006e68
 8002090:	0801e328 	.word	0x0801e328
 8002094:	0801e33c 	.word	0x0801e33c
 8002098:	200072e4 	.word	0x200072e4
 800209c:	0801e350 	.word	0x0801e350
 80020a0:	20006e93 	.word	0x20006e93
 80020a4:	0801e364 	.word	0x0801e364

080020a8 <OnDownPressKey>:


static uint8_t OnDownPressKey()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <OnDownPressKey+0x7c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <OnDownPressKey+0x10>
 80020b4:	2300      	movs	r3, #0
 80020b6:	e032      	b.n	800211e <OnDownPressKey+0x76>
	if(editMode)return 0; // Если находимся в режиме редактирования, то не реагируем
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <OnDownPressKey+0x80>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <OnDownPressKey+0x1c>
 80020c0:	2300      	movs	r3, #0
 80020c2:	e02c      	b.n	800211e <OnDownPressKey+0x76>
	if(paramIndex>=currentParamLength-1)return 0;// Если курсор находится внизу, не реагируем
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <OnDownPressKey+0x84>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <OnDownPressKey+0x88>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	429a      	cmp	r2, r3
 80020d2:	db01      	blt.n	80020d8 <OnDownPressKey+0x30>
 80020d4:	2300      	movs	r3, #0
 80020d6:	e022      	b.n	800211e <OnDownPressKey+0x76>
	if(currentParameters == Errors)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <OnDownPressKey+0x7c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <OnDownPressKey+0x8c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d109      	bne.n	80020f6 <OnDownPressKey+0x4e>
	{
		paramIndex++;
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <OnDownPressKey+0x84>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <OnDownPressKey+0x84>)
 80020ec:	701a      	strb	r2, [r3, #0]
		return ShowErrors();
 80020ee:	f000 fb3f 	bl	8002770 <ShowErrors>
 80020f2:	4603      	mov	r3, r0
 80020f4:	e013      	b.n	800211e <OnDownPressKey+0x76>
	}
	paramIndex++;
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <OnDownPressKey+0x84>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <OnDownPressKey+0x84>)
 8002100:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <OnDownPressKey+0x7c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <OnDownPressKey+0x84>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	460b      	mov	r3, r1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	440b      	add	r3, r1
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fa3a 	bl	8002590 <ShowParameter>
	return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200006e0 	.word	0x200006e0
 8002128:	200006e5 	.word	0x200006e5
 800212c:	200006e4 	.word	0x200006e4
 8002130:	20006f10 	.word	0x20006f10
 8002134:	200000fc 	.word	0x200000fc

08002138 <OnLeftPressKey>:

static uint8_t OnLeftPressKey()
{
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	int index = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <OnLeftPressKey+0xec>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <OnLeftPressKey+0x16>
 800214a:	2300      	movs	r3, #0
 800214c:	e065      	b.n	800221a <OnLeftPressKey+0xe2>
	if(currentParameters==NULL)return 0;
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <OnLeftPressKey+0xf0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <OnLeftPressKey+0x22>
 8002156:	2300      	movs	r3, #0
 8002158:	e05f      	b.n	800221a <OnLeftPressKey+0xe2>
	Row *par = currentParameters+paramIndex;
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <OnLeftPressKey+0xf0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <OnLeftPressKey+0xf4>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	460b      	mov	r3, r1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	440b      	add	r3, r1
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	7a1b      	ldrb	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d04f      	beq.n	8002218 <OnLeftPressKey+0xe0>
	{
		if(par->enums==NULL)return 0;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <OnLeftPressKey+0x4c>
 8002180:	2300      	movs	r3, #0
 8002182:	e04a      	b.n	800221a <OnLeftPressKey+0xe2>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <OnLeftPressKey+0xf8>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	7d1b      	ldrb	r3, [r3, #20]
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	f000 fca9 	bl	8002af0 <FindIndexFromValue>
 800219e:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d101      	bne.n	80021ac <OnLeftPressKey+0x74>
 80021a8:	2300      	movs	r3, #0
 80021aa:	e036      	b.n	800221a <OnLeftPressKey+0xe2>
		index = index==0 ? par->enums_len-1 : index-1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <OnLeftPressKey+0x82>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7d1b      	ldrb	r3, [r3, #20]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	e001      	b.n	80021be <OnLeftPressKey+0x86>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3b01      	subs	r3, #1
 80021be:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <OnLeftPressKey+0xf8>)
 80021ce:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 80021d0:	2214      	movs	r2, #20
 80021d2:	2100      	movs	r1, #0
 80021d4:	4817      	ldr	r0, [pc, #92]	; (8002234 <OnLeftPressKey+0xfc>)
 80021d6:	f01a fd85 	bl	801cce4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	79db      	ldrb	r3, [r3, #7]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <OnLeftPressKey+0xfc>)
 80021e2:	18d4      	adds	r4, r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	685d      	ldr	r5, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fd ffe7 	bl	80001d0 <strlen>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	4629      	mov	r1, r5
 8002208:	4620      	mov	r0, r4
 800220a:	f01a ff64 	bl	801d0d6 <strncpy>
		ShowParameter(par);
 800220e:	6838      	ldr	r0, [r7, #0]
 8002210:	f000 f9be 	bl	8002590 <ShowParameter>
		return 1;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <OnLeftPressKey+0xe2>

	}
	return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bdb0      	pop	{r4, r5, r7, pc}
 8002222:	bf00      	nop
 8002224:	200006e5 	.word	0x200006e5
 8002228:	200006e0 	.word	0x200006e0
 800222c:	200006e4 	.word	0x200006e4
 8002230:	200006e8 	.word	0x200006e8
 8002234:	20006ea8 	.word	0x20006ea8

08002238 <OnRightPressKey>:

static uint8_t OnRightPressKey()
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
	int index = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <OnRightPressKey+0xec>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <OnRightPressKey+0x16>
 800224a:	2300      	movs	r3, #0
 800224c:	e066      	b.n	800231c <OnRightPressKey+0xe4>
	if(currentParameters==NULL)return 0;
 800224e:	4b36      	ldr	r3, [pc, #216]	; (8002328 <OnRightPressKey+0xf0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <OnRightPressKey+0x22>
 8002256:	2300      	movs	r3, #0
 8002258:	e060      	b.n	800231c <OnRightPressKey+0xe4>
	Row *par = currentParameters+paramIndex;
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <OnRightPressKey+0xf0>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b33      	ldr	r3, [pc, #204]	; (800232c <OnRightPressKey+0xf4>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	460b      	mov	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	440b      	add	r3, r1
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	7a1b      	ldrb	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d050      	beq.n	800231a <OnRightPressKey+0xe2>
	{
		if(par->enums==NULL)return 0;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <OnRightPressKey+0x4c>
 8002280:	2300      	movs	r3, #0
 8002282:	e04b      	b.n	800231c <OnRightPressKey+0xe4>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <OnRightPressKey+0xf8>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	7d1b      	ldrb	r3, [r3, #20]
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	eeb0 0a67 	vmov.f32	s0, s15
 800229a:	f000 fc29 	bl	8002af0 <FindIndexFromValue>
 800229e:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d101      	bne.n	80022ac <OnRightPressKey+0x74>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e037      	b.n	800231c <OnRightPressKey+0xe4>
		index = index==par->enums_len-1 ? 0 : index+1;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	7d1b      	ldrb	r3, [r3, #20]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d002      	beq.n	80022be <OnRightPressKey+0x86>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	e000      	b.n	80022c0 <OnRightPressKey+0x88>
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <OnRightPressKey+0xf8>)
 80022d0:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 80022d2:	2214      	movs	r2, #20
 80022d4:	2100      	movs	r1, #0
 80022d6:	4817      	ldr	r0, [pc, #92]	; (8002334 <OnRightPressKey+0xfc>)
 80022d8:	f01a fd04 	bl	801cce4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	79db      	ldrb	r3, [r3, #7]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <OnRightPressKey+0xfc>)
 80022e4:	18d4      	adds	r4, r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	685d      	ldr	r5, [r3, #4]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff66 	bl	80001d0 <strlen>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4629      	mov	r1, r5
 800230a:	4620      	mov	r0, r4
 800230c:	f01a fee3 	bl	801d0d6 <strncpy>
		ShowParameter(par);
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f000 f93d 	bl	8002590 <ShowParameter>
		return 1;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <OnRightPressKey+0xe4>

	}
	return 0;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bdb0      	pop	{r4, r5, r7, pc}
 8002324:	200006e5 	.word	0x200006e5
 8002328:	200006e0 	.word	0x200006e0
 800232c:	200006e4 	.word	0x200006e4
 8002330:	200006e8 	.word	0x200006e8
 8002334:	20006ea8 	.word	0x20006ea8

08002338 <OnUpPressKey>:

static uint8_t OnUpPressKey()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <OnUpPressKey+0x80>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <OnUpPressKey+0x10>
 8002344:	2300      	movs	r3, #0
 8002346:	e035      	b.n	80023b4 <OnUpPressKey+0x7c>
	if(editMode)return 0; // Если находимся в режиме редактирования, то не реагируем
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <OnUpPressKey+0x84>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <OnUpPressKey+0x1c>
 8002350:	2300      	movs	r3, #0
 8002352:	e02f      	b.n	80023b4 <OnUpPressKey+0x7c>
	if(paramIndex<=0)return 0;// Если курсор находится ddth[e, не реагируем
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <OnUpPressKey+0x88>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <OnUpPressKey+0x28>
 800235c:	2300      	movs	r3, #0
 800235e:	e029      	b.n	80023b4 <OnUpPressKey+0x7c>
	if(currentParameters == Errors)
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <OnUpPressKey+0x80>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <OnUpPressKey+0x8c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d110      	bne.n	800238c <OnUpPressKey+0x54>
	{
		paramIndex = paramIndex == 0 ? paramIndex : paramIndex -1;
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <OnUpPressKey+0x88>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <OnUpPressKey+0x44>
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <OnUpPressKey+0x88>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e001      	b.n	8002380 <OnUpPressKey+0x48>
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <OnUpPressKey+0x88>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <OnUpPressKey+0x88>)
 8002382:	7013      	strb	r3, [r2, #0]
		return ShowErrors();
 8002384:	f000 f9f4 	bl	8002770 <ShowErrors>
 8002388:	4603      	mov	r3, r0
 800238a:	e013      	b.n	80023b4 <OnUpPressKey+0x7c>

	}
	paramIndex--;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <OnUpPressKey+0x88>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	3b01      	subs	r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <OnUpPressKey+0x88>)
 8002396:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <OnUpPressKey+0x80>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <OnUpPressKey+0x88>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	460b      	mov	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f8ef 	bl	8002590 <ShowParameter>
	return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200006e0 	.word	0x200006e0
 80023bc:	200006e5 	.word	0x200006e5
 80023c0:	200006e4 	.word	0x200006e4
 80023c4:	200000fc 	.word	0x200000fc

080023c8 <OnF1PressKey>:


static uint8_t OnF1PressKey()
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <OnF1PressKey+0x1c>)
 80023ce:	22ff      	movs	r2, #255	; 0xff
 80023d0:	701a      	strb	r2, [r3, #0]
	currentParameters = NULL;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <OnF1PressKey+0x20>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
	return ShowMainDisplay();
 80023d8:	f7ff fdfc 	bl	8001fd4 <ShowMainDisplay>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200000a0 	.word	0x200000a0
 80023e8:	200006e0 	.word	0x200006e0

080023ec <OnF2PressKey>:

static uint8_t OnF2PressKey()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <OnF2PressKey+0x4c>)
 80023f2:	22ff      	movs	r2, #255	; 0xff
 80023f4:	701a      	strb	r2, [r3, #0]
	currentParameters = probotbor_parameters;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <OnF2PressKey+0x50>)
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <OnF2PressKey+0x54>)
 80023fa:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <OnF2PressKey+0x58>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(probotbor_parameters)/sizeof(Row);
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <OnF2PressKey+0x5c>)
 8002404:	2203      	movs	r2, #3
 8002406:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <OnF2PressKey+0x60>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
	groupParamName = processParametersName;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <OnF2PressKey+0x64>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <OnF2PressKey+0x68>)
 8002414:	6013      	str	r3, [r2, #0]
	groupParamNameLength = strlen(processParametersName);
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <OnF2PressKey+0x64>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fd fed8 	bl	80001d0 <strlen>
 8002420:	4603      	mov	r3, r0
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <OnF2PressKey+0x6c>)
 8002426:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <OnF2PressKey+0x50>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f8af 	bl	8002590 <ShowParameter>
	return 1;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200000a0 	.word	0x200000a0
 800243c:	200006e0 	.word	0x200006e0
 8002440:	200001d4 	.word	0x200001d4
 8002444:	200006e4 	.word	0x200006e4
 8002448:	20006f10 	.word	0x20006f10
 800244c:	200006e5 	.word	0x200006e5
 8002450:	20000098 	.word	0x20000098
 8002454:	20006f0c 	.word	0x20006f0c
 8002458:	20006ea4 	.word	0x20006ea4

0800245c <OnF3PressKey>:

static uint8_t OnF3PressKey()
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <OnF3PressKey+0x4c>)
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	701a      	strb	r2, [r3, #0]
	currentParameters = commParameters;
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <OnF3PressKey+0x50>)
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <OnF3PressKey+0x54>)
 800246a:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <OnF3PressKey+0x58>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(commParameters)/sizeof(Row);
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <OnF3PressKey+0x5c>)
 8002474:	2206      	movs	r2, #6
 8002476:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <OnF3PressKey+0x60>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
	groupParamName = commParametersName;
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <OnF3PressKey+0x64>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <OnF3PressKey+0x68>)
 8002484:	6013      	str	r3, [r2, #0]
	groupParamNameLength = strlen(commParametersName);
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <OnF3PressKey+0x64>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fea0 	bl	80001d0 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <OnF3PressKey+0x6c>)
 8002496:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <OnF3PressKey+0x50>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f877 	bl	8002590 <ShowParameter>
	return 1;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200000a0 	.word	0x200000a0
 80024ac:	200006e0 	.word	0x200006e0
 80024b0:	2000021c 	.word	0x2000021c
 80024b4:	200006e4 	.word	0x200006e4
 80024b8:	20006f10 	.word	0x20006f10
 80024bc:	200006e5 	.word	0x200006e5
 80024c0:	20000094 	.word	0x20000094
 80024c4:	20006f0c 	.word	0x20006f0c
 80024c8:	20006ea4 	.word	0x20006ea4

080024cc <OnF4PressKey>:

static uint8_t OnF4PressKey()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <OnF4PressKey+0x28>)
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	701a      	strb	r2, [r3, #0]
	currentParameters = Errors;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <OnF4PressKey+0x2c>)
 80024d8:	4a08      	ldr	r2, [pc, #32]	; (80024fc <OnF4PressKey+0x30>)
 80024da:	601a      	str	r2, [r3, #0]
	editMode  = 0;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <OnF4PressKey+0x34>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
	paramIndex = 0;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <OnF4PressKey+0x38>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
	return ShowErrors();
 80024e8:	f000 f942 	bl	8002770 <ShowErrors>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200000a0 	.word	0x200000a0
 80024f8:	200006e0 	.word	0x200006e0
 80024fc:	200000fc 	.word	0x200000fc
 8002500:	200006e5 	.word	0x200006e5
 8002504:	200006e4 	.word	0x200006e4

08002508 <OnEscPressKey>:

static uint8_t OnEscPressKey()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <OnEscPressKey+0x70>)
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	701a      	strb	r2, [r3, #0]
	if(currentParameters==NULL)return 0;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <OnEscPressKey+0x74>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <OnEscPressKey+0x16>
 800251a:	2300      	movs	r3, #0
 800251c:	e029      	b.n	8002572 <OnEscPressKey+0x6a>
	if(currentParameters==Errors)return 0;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <OnEscPressKey+0x74>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <OnEscPressKey+0x78>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <OnEscPressKey+0x24>
 8002528:	2300      	movs	r3, #0
 800252a:	e022      	b.n	8002572 <OnEscPressKey+0x6a>
	if(currentParameters==indication_rows)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <OnEscPressKey+0x74>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <OnEscPressKey+0x7c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d106      	bne.n	8002544 <OnEscPressKey+0x3c>
	{
		currentParameters = NULL;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <OnEscPressKey+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
		return ShowMainDisplay();
 800253c:	f7ff fd4a 	bl	8001fd4 <ShowMainDisplay>
 8002540:	4603      	mov	r3, r0
 8002542:	e016      	b.n	8002572 <OnEscPressKey+0x6a>
	}
	else if(editMode)
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <OnEscPressKey+0x80>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <OnEscPressKey+0x68>
	{
		editMode = 0;
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <OnEscPressKey+0x80>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters+paramIndex);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <OnEscPressKey+0x74>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <OnEscPressKey+0x84>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	460b      	mov	r3, r1
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	440b      	add	r3, r1
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f812 	bl	8002590 <ShowParameter>
		return 1;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <OnEscPressKey+0x6a>
	}
	return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200000a0 	.word	0x200000a0
 800257c:	200006e0 	.word	0x200006e0
 8002580:	200000fc 	.word	0x200000fc
 8002584:	200002ac 	.word	0x200002ac
 8002588:	200006e5 	.word	0x200006e5
 800258c:	200006e4 	.word	0x200006e4

08002590 <ShowParameter>:

static void ShowParameter(Row *parameter)
{
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	Clear();
 8002598:	f7ff fcf2 	bl	8001f80 <Clear>
	memcpy(lcdAnswer[0],groupParamName,groupParamNameLength); // Имя группы параметра
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <ShowParameter+0x178>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a5a      	ldr	r2, [pc, #360]	; (800270c <ShowParameter+0x17c>)
 80025a2:	7812      	ldrb	r2, [r2, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	485a      	ldr	r0, [pc, #360]	; (8002710 <ShowParameter+0x180>)
 80025a8:	f01a fb74 	bl	801cc94 <memcpy>
	memcpy(lcdAnswer[1],parameter->name,parameter->name_len); // Имя  параметра
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	795b      	ldrb	r3, [r3, #5]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4857      	ldr	r0, [pc, #348]	; (8002714 <ShowParameter+0x184>)
 80025b8:	f01a fb6c 	bl	801cc94 <memcpy>
	if(parameter->isEnum)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7a1b      	ldrb	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d069      	beq.n	8002698 <ShowParameter+0x108>
	{
		if(editMode)
 80025c4:	4b54      	ldr	r3, [pc, #336]	; (8002718 <ShowParameter+0x188>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d018      	beq.n	80025fe <ShowParameter+0x6e>
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,editedValue+parameter->param_pos, strlen(editedValue+parameter->param_pos));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	79db      	ldrb	r3, [r3, #7]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b52      	ldr	r3, [pc, #328]	; (800271c <ShowParameter+0x18c>)
 80025d4:	18d4      	adds	r4, r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	79db      	ldrb	r3, [r3, #7]
 80025da:	461a      	mov	r2, r3
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <ShowParameter+0x190>)
 80025de:	18d5      	adds	r5, r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	79db      	ldrb	r3, [r3, #7]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <ShowParameter+0x190>)
 80025e8:	4413      	add	r3, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd fdf0 	bl	80001d0 <strlen>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4629      	mov	r1, r5
 80025f6:	4620      	mov	r0, r4
 80025f8:	f01a fd6d 	bl	801d0d6 <strncpy>
 80025fc:	e050      	b.n	80026a0 <ShowParameter+0x110>
		}
		else
		{
			float value = 0;
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
			switch (parameter->type) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7d5b      	ldrb	r3, [r3, #21]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <ShowParameter+0x82>
 800260c:	2b01      	cmp	r3, #1
 800260e:	d00a      	beq.n	8002626 <ShowParameter+0x96>
					break;
				case ROW_UINT:
					value = *((uint32_t*)parameter->data);
					break;
				default:
					break;
 8002610:	e013      	b.n	800263a <ShowParameter+0xaa>
					value = *((uint16_t*)parameter->data);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002620:	edc7 7a03 	vstr	s15, [r7, #12]
					break;
 8002624:	e009      	b.n	800263a <ShowParameter+0xaa>
					value = *((uint32_t*)parameter->data);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002634:	edc7 7a03 	vstr	s15, [r7, #12]
					break;
 8002638:	bf00      	nop
			}
			Dictionary *pair = FindDictionaryFromValue(value, parameter->enums, parameter->enums_len);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7d1b      	ldrb	r3, [r3, #20]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	ed97 0a03 	vldr	s0, [r7, #12]
 800264a:	f000 fa25 	bl	8002a98 <FindDictionaryFromValue>
 800264e:	60b8      	str	r0, [r7, #8]
			if(pair == NULL)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <ShowParameter+0xe2>
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,"Undefined", strlen("Undefined"));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	79db      	ldrb	r3, [r3, #7]
 800265a:	461a      	mov	r2, r3
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <ShowParameter+0x18c>)
 800265e:	4413      	add	r3, r2
 8002660:	4930      	ldr	r1, [pc, #192]	; (8002724 <ShowParameter+0x194>)
 8002662:	461a      	mov	r2, r3
 8002664:	460b      	mov	r3, r1
 8002666:	cb03      	ldmia	r3!, {r0, r1}
 8002668:	6010      	str	r0, [r2, #0]
 800266a:	6051      	str	r1, [r2, #4]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	7213      	strb	r3, [r2, #8]
 8002670:	e016      	b.n	80026a0 <ShowParameter+0x110>
			}
			else
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,pair->name, strlen(pair->name));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	79db      	ldrb	r3, [r3, #7]
 8002676:	461a      	mov	r2, r3
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <ShowParameter+0x18c>)
 800267a:	18d4      	adds	r4, r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	685d      	ldr	r5, [r3, #4]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fda3 	bl	80001d0 <strlen>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4629      	mov	r1, r5
 8002690:	4620      	mov	r0, r4
 8002692:	f01a fd20 	bl	801d0d6 <strncpy>
 8002696:	e003      	b.n	80026a0 <ShowParameter+0x110>
		}

	}
	else
	{
		Print(parameter, 2);
 8002698:	2102      	movs	r1, #2
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa5c 	bl	8002b58 <Print>
	}

	if(parameter->isEdited)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01c      	beq.n	80026e2 <ShowParameter+0x152>
	{
		if(!editMode)
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <ShowParameter+0x188>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <ShowParameter+0x134>
		{
			strncpy(lcdAnswer[3]+9,"Edit->Enter", strlen("Edit->Enter"));
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <ShowParameter+0x198>)
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <ShowParameter+0x19c>)
 80026b4:	cb03      	ldmia	r3!, {r0, r1}
 80026b6:	6010      	str	r0, [r2, #0]
 80026b8:	6051      	str	r1, [r2, #4]
 80026ba:	8819      	ldrh	r1, [r3, #0]
 80026bc:	789b      	ldrb	r3, [r3, #2]
 80026be:	8111      	strh	r1, [r2, #8]
 80026c0:	7293      	strb	r3, [r2, #10]
	}
	else if(currentParameters == indication_rows)
	{
		strncpy(lcdAnswer[3]+7,"To main-> Esc", strlen("To main-> Esc"));
	}
}
 80026c2:	e01c      	b.n	80026fe <ShowParameter+0x16e>
			strncpy(lcdAnswer[3],"Back->Esc", strlen("Back->Esc"));
 80026c4:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <ShowParameter+0x1a0>)
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <ShowParameter+0x1a4>)
 80026c8:	cb03      	ldmia	r3!, {r0, r1}
 80026ca:	6010      	str	r0, [r2, #0]
 80026cc:	6051      	str	r1, [r2, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	7213      	strb	r3, [r2, #8]
			strncpy(lcdAnswer[3]+11,"Ok->Enter", strlen("Ok->Enter"));
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <ShowParameter+0x1a8>)
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <ShowParameter+0x1ac>)
 80026d6:	cb03      	ldmia	r3!, {r0, r1}
 80026d8:	6010      	str	r0, [r2, #0]
 80026da:	6051      	str	r1, [r2, #4]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	7213      	strb	r3, [r2, #8]
}
 80026e0:	e00d      	b.n	80026fe <ShowParameter+0x16e>
	else if(currentParameters == indication_rows)
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <ShowParameter+0x1b0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <ShowParameter+0x1b4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <ShowParameter+0x16e>
		strncpy(lcdAnswer[3]+7,"To main-> Esc", strlen("To main-> Esc"));
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <ShowParameter+0x1b8>)
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <ShowParameter+0x1bc>)
 80026f0:	4614      	mov	r4, r2
 80026f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026f4:	6020      	str	r0, [r4, #0]
 80026f6:	6061      	str	r1, [r4, #4]
 80026f8:	60a2      	str	r2, [r4, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	7323      	strb	r3, [r4, #12]
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	bf00      	nop
 8002708:	20006f0c 	.word	0x20006f0c
 800270c:	20006ea4 	.word	0x20006ea4
 8002710:	20006e54 	.word	0x20006e54
 8002714:	20006e68 	.word	0x20006e68
 8002718:	200006e5 	.word	0x200006e5
 800271c:	20006e7c 	.word	0x20006e7c
 8002720:	20006ea8 	.word	0x20006ea8
 8002724:	0801e378 	.word	0x0801e378
 8002728:	20006e99 	.word	0x20006e99
 800272c:	0801e384 	.word	0x0801e384
 8002730:	20006e90 	.word	0x20006e90
 8002734:	0801e390 	.word	0x0801e390
 8002738:	20006e9b 	.word	0x20006e9b
 800273c:	0801e39c 	.word	0x0801e39c
 8002740:	200006e0 	.word	0x200006e0
 8002744:	200002ac 	.word	0x200002ac
 8002748:	20006e97 	.word	0x20006e97
 800274c:	0801e3a8 	.word	0x0801e3a8

08002750 <Min>:

static int Min(int x,int y)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	return x<y?x:y;
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4293      	cmp	r3, r2
 8002760:	bfa8      	it	ge
 8002762:	4613      	movge	r3, r2
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <ShowErrors>:

static uint8_t ShowErrors()
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
	GetAllErrors();
 8002776:	f000 f861 	bl	800283c <GetAllErrors>
	Clear();
 800277a:	f7ff fc01 	bl	8001f80 <Clear>
	strncpy(lcdAnswer[0],"Errors", strlen("Errors"));
 800277e:	4b29      	ldr	r3, [pc, #164]	; (8002824 <ShowErrors+0xb4>)
 8002780:	4a29      	ldr	r2, [pc, #164]	; (8002828 <ShowErrors+0xb8>)
 8002782:	6810      	ldr	r0, [r2, #0]
 8002784:	6018      	str	r0, [r3, #0]
 8002786:	8892      	ldrh	r2, [r2, #4]
 8002788:	809a      	strh	r2, [r3, #4]
	if(err_count==0)return 1;
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <ShowErrors+0xbc>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <ShowErrors+0x26>
 8002792:	2301      	movs	r3, #1
 8002794:	e042      	b.n	800281c <ShowErrors+0xac>
	if(paramIndex>=err_count-1)paramIndex = err_count==0 ? 0 : err_count-1;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <ShowErrors+0xc0>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <ShowErrors+0xbc>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	429a      	cmp	r2, r3
 80027a4:	db0b      	blt.n	80027be <ShowErrors+0x4e>
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <ShowErrors+0xbc>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <ShowErrors+0x48>
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <ShowErrors+0xbc>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e000      	b.n	80027ba <ShowErrors+0x4a>
 80027b8:	2300      	movs	r3, #0
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <ShowErrors+0xc0>)
 80027bc:	7013      	strb	r3, [r2, #0]
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <ShowErrors+0xc0>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	e01b      	b.n	80027fe <ShowErrors+0x8e>
		sprintf(lcdAnswer[1+i-paramIndex],"%d.%s",errors_info[i].num, errors_info[i].errorName);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3301      	adds	r3, #1
 80027ca:	4a19      	ldr	r2, [pc, #100]	; (8002830 <ShowErrors+0xc0>)
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	1a9a      	subs	r2, r3, r2
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <ShowErrors+0xb4>)
 80027da:	1898      	adds	r0, r3, r2
 80027dc:	4a15      	ldr	r2, [pc, #84]	; (8002834 <ShowErrors+0xc4>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <ShowErrors+0xc4>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	460a      	mov	r2, r1
 80027f2:	4911      	ldr	r1, [pc, #68]	; (8002838 <ShowErrors+0xc8>)
 80027f4:	f01a fbfa 	bl	801cfec <siprintf>
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3301      	adds	r3, #1
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <ShowErrors+0xbc>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <ShowErrors+0xc0>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3303      	adds	r3, #3
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7ff ff9f 	bl	8002750 <Min>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4293      	cmp	r3, r2
 8002818:	dbd5      	blt.n	80027c6 <ShowErrors+0x56>
	}
	return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20006e54 	.word	0x20006e54
 8002828:	0801e0a0 	.word	0x0801e0a0
 800282c:	20006f11 	.word	0x20006f11
 8002830:	200006e4 	.word	0x200006e4
 8002834:	20006ebc 	.word	0x20006ebc
 8002838:	0801e3b8 	.word	0x0801e3b8

0800283c <GetAllErrors>:

static uint8_t GetAllErrors()
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	err_count = 0;
 8002840:	4b91      	ldr	r3, [pc, #580]	; (8002a88 <GetAllErrors+0x24c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
	if(meas_data.errors.nakopitel_kanistra_err)
 8002846:	4b91      	ldr	r3, [pc, #580]	; (8002a8c <GetAllErrors+0x250>)
 8002848:	7e1b      	ldrb	r3, [r3, #24]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <GetAllErrors+0x48>
	{
		errors_info[err_count].num = err_count+1;
 8002854:	4b8c      	ldr	r3, [pc, #560]	; (8002a88 <GetAllErrors+0x24c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4a8b      	ldr	r2, [pc, #556]	; (8002a88 <GetAllErrors+0x24c>)
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	b2d9      	uxtb	r1, r3
 8002860:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <GetAllErrors+0x254>)
 8002862:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[0].name;
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <GetAllErrors+0x24c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <GetAllErrors+0x258>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4987      	ldr	r1, [pc, #540]	; (8002a90 <GetAllErrors+0x254>)
 8002872:	00c3      	lsls	r3, r0, #3
 8002874:	440b      	add	r3, r1
 8002876:	605a      	str	r2, [r3, #4]
		err_count++;
 8002878:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <GetAllErrors+0x24c>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b81      	ldr	r3, [pc, #516]	; (8002a88 <GetAllErrors+0x24c>)
 8002882:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.nakopitel_door_err)
 8002884:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <GetAllErrors+0x250>)
 8002886:	7e1b      	ldrb	r3, [r3, #24]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <GetAllErrors+0x86>
	{
		errors_info[err_count].num = err_count+1;
 8002892:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <GetAllErrors+0x24c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <GetAllErrors+0x24c>)
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b2d9      	uxtb	r1, r3
 800289e:	4b7c      	ldr	r3, [pc, #496]	; (8002a90 <GetAllErrors+0x254>)
 80028a0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[1].name;
 80028a4:	4b78      	ldr	r3, [pc, #480]	; (8002a88 <GetAllErrors+0x24c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	4b7a      	ldr	r3, [pc, #488]	; (8002a94 <GetAllErrors+0x258>)
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	4978      	ldr	r1, [pc, #480]	; (8002a90 <GetAllErrors+0x254>)
 80028b0:	00c3      	lsls	r3, r0, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	605a      	str	r2, [r3, #4]
		err_count++;
 80028b6:	4b74      	ldr	r3, [pc, #464]	; (8002a88 <GetAllErrors+0x24c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <GetAllErrors+0x24c>)
 80028c0:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.uz_err)
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <GetAllErrors+0x250>)
 80028c4:	7e1b      	ldrb	r3, [r3, #24]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d017      	beq.n	8002900 <GetAllErrors+0xc4>
	{
		errors_info[err_count].num = err_count+1;
 80028d0:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <GetAllErrors+0x24c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <GetAllErrors+0x24c>)
 80028d6:	7812      	ldrb	r2, [r2, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	b2d9      	uxtb	r1, r3
 80028dc:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <GetAllErrors+0x254>)
 80028de:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[2].name;
 80028e2:	4b69      	ldr	r3, [pc, #420]	; (8002a88 <GetAllErrors+0x24c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <GetAllErrors+0x258>)
 80028ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ec:	4968      	ldr	r1, [pc, #416]	; (8002a90 <GetAllErrors+0x254>)
 80028ee:	00c3      	lsls	r3, r0, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	605a      	str	r2, [r3, #4]
		err_count++;
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <GetAllErrors+0x24c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <GetAllErrors+0x24c>)
 80028fe:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sb_abort_err)
 8002900:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <GetAllErrors+0x250>)
 8002902:	7e1b      	ldrb	r3, [r3, #24]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d017      	beq.n	800293e <GetAllErrors+0x102>
	{
		errors_info[err_count].num = err_count+1;
 800290e:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <GetAllErrors+0x24c>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <GetAllErrors+0x24c>)
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	b2d9      	uxtb	r1, r3
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <GetAllErrors+0x254>)
 800291c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[3].name;
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <GetAllErrors+0x24c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <GetAllErrors+0x258>)
 8002928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800292a:	4959      	ldr	r1, [pc, #356]	; (8002a90 <GetAllErrors+0x254>)
 800292c:	00c3      	lsls	r3, r0, #3
 800292e:	440b      	add	r3, r1
 8002930:	605a      	str	r2, [r3, #4]
		err_count++;
 8002932:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <GetAllErrors+0x24c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <GetAllErrors+0x24c>)
 800293c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_left_err)
 800293e:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <GetAllErrors+0x250>)
 8002940:	7e1b      	ldrb	r3, [r3, #24]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d017      	beq.n	800297c <GetAllErrors+0x140>
	{
		errors_info[err_count].num = err_count+1;
 800294c:	4b4e      	ldr	r3, [pc, #312]	; (8002a88 <GetAllErrors+0x24c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <GetAllErrors+0x24c>)
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	b2d9      	uxtb	r1, r3
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <GetAllErrors+0x254>)
 800295a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[4].name;
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <GetAllErrors+0x24c>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <GetAllErrors+0x258>)
 8002966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002968:	4949      	ldr	r1, [pc, #292]	; (8002a90 <GetAllErrors+0x254>)
 800296a:	00c3      	lsls	r3, r0, #3
 800296c:	440b      	add	r3, r1
 800296e:	605a      	str	r2, [r3, #4]
		err_count++;
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <GetAllErrors+0x24c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <GetAllErrors+0x24c>)
 800297a:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_right_err)
 800297c:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <GetAllErrors+0x250>)
 800297e:	7e1b      	ldrb	r3, [r3, #24]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <GetAllErrors+0x17e>
	{
		errors_info[err_count].num = err_count+1;
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <GetAllErrors+0x24c>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4a3e      	ldr	r2, [pc, #248]	; (8002a88 <GetAllErrors+0x24c>)
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	b2d9      	uxtb	r1, r3
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <GetAllErrors+0x254>)
 8002998:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[5].name;
 800299c:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <GetAllErrors+0x24c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <GetAllErrors+0x258>)
 80029a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <GetAllErrors+0x254>)
 80029a8:	00c3      	lsls	r3, r0, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	605a      	str	r2, [r3, #4]
		err_count++;
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <GetAllErrors+0x24c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <GetAllErrors+0x24c>)
 80029b8:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_right_err)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <GetAllErrors+0x250>)
 80029bc:	7e1b      	ldrb	r3, [r3, #24]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d018      	beq.n	80029fa <GetAllErrors+0x1be>
	{
		errors_info[err_count].num = err_count+1;
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <GetAllErrors+0x24c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <GetAllErrors+0x24c>)
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2d9      	uxtb	r1, r3
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <GetAllErrors+0x254>)
 80029d6:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[6].name;
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <GetAllErrors+0x24c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <GetAllErrors+0x258>)
 80029e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80029e6:	492a      	ldr	r1, [pc, #168]	; (8002a90 <GetAllErrors+0x254>)
 80029e8:	00c3      	lsls	r3, r0, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	605a      	str	r2, [r3, #4]
		err_count++;
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <GetAllErrors+0x24c>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <GetAllErrors+0x24c>)
 80029f8:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_left_err)
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <GetAllErrors+0x250>)
 80029fc:	7e1b      	ldrb	r3, [r3, #24]
 80029fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d018      	beq.n	8002a3a <GetAllErrors+0x1fe>
	{
		errors_info[err_count].num = err_count+1;
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <GetAllErrors+0x24c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <GetAllErrors+0x24c>)
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b2d9      	uxtb	r1, r3
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <GetAllErrors+0x254>)
 8002a16:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[7].name;
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <GetAllErrors+0x24c>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <GetAllErrors+0x258>)
 8002a22:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002a26:	491a      	ldr	r1, [pc, #104]	; (8002a90 <GetAllErrors+0x254>)
 8002a28:	00c3      	lsls	r3, r0, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	605a      	str	r2, [r3, #4]
		err_count++;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <GetAllErrors+0x24c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <GetAllErrors+0x24c>)
 8002a38:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.need_return_err)
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <GetAllErrors+0x250>)
 8002a3c:	7e5b      	ldrb	r3, [r3, #25]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d018      	beq.n	8002a7a <GetAllErrors+0x23e>
	{
		errors_info[err_count].num = err_count+1;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <GetAllErrors+0x24c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <GetAllErrors+0x24c>)
 8002a4e:	7812      	ldrb	r2, [r2, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2d9      	uxtb	r1, r3
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <GetAllErrors+0x254>)
 8002a56:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[8].name;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <GetAllErrors+0x24c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <GetAllErrors+0x258>)
 8002a62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <GetAllErrors+0x254>)
 8002a68:	00c3      	lsls	r3, r0, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	605a      	str	r2, [r3, #4]
		err_count++;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <GetAllErrors+0x24c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <GetAllErrors+0x24c>)
 8002a78:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 8002a7a:	2301      	movs	r3, #1

}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20006f11 	.word	0x20006f11
 8002a8c:	200072cc 	.word	0x200072cc
 8002a90:	20006ebc 	.word	0x20006ebc
 8002a94:	200000fc 	.word	0x200000fc

08002a98 <FindDictionaryFromValue>:

/*Возращает ссылку на пару "ключ-значение", если записи нет, то возвращает NULL */
static Dictionary *FindDictionaryFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002aa2:	60b8      	str	r0, [r7, #8]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e013      	b.n	8002ada <FindDictionaryFromValue+0x42>
		temp = dictionary+i;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return temp;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ac6:	eeb4 7a67 	vcmp.f32	s14, s15
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	d101      	bne.n	8002ad4 <FindDictionaryFromValue+0x3c>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	e007      	b.n	8002ae4 <FindDictionaryFromValue+0x4c>
	for (int i = 0; i < dict_len; ++i) {
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	dbe7      	blt.n	8002ab2 <FindDictionaryFromValue+0x1a>

	}
	return NULL;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <FindIndexFromValue>:

/*Возращает индекс "ключ-значение", если записи нет, -1*/
static int FindIndexFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002afa:	60b8      	str	r0, [r7, #8]
 8002afc:	460b      	mov	r3, r1
 8002afe:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e013      	b.n	8002b32 <FindIndexFromValue+0x42>
		temp = dictionary+i;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4413      	add	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return i;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	d101      	bne.n	8002b2c <FindIndexFromValue+0x3c>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	e008      	b.n	8002b3e <FindIndexFromValue+0x4e>
	for (int i = 0; i < dict_len; ++i) {
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	dbe7      	blt.n	8002b0a <FindIndexFromValue+0x1a>

	}
	return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LcdUpdate>:



void LcdUpdate()
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <Print>:

static void Print(Row *parameter, uint8_t index)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	817b      	strh	r3, [r7, #10]
	if(editMode)
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <Print+0x144>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d012      	beq.n	8002b96 <Print+0x3e>
	{
		memcpy(lcdAnswer[index],editedValue,20);
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <Print+0x148>)
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <Print+0x14c>)
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	6855      	ldr	r5, [r2, #4]
 8002b84:	6894      	ldr	r4, [r2, #8]
 8002b86:	68d0      	ldr	r0, [r2, #12]
 8002b88:	6019      	str	r1, [r3, #0]
 8002b8a:	605d      	str	r5, [r3, #4]
 8002b8c:	609c      	str	r4, [r3, #8]
 8002b8e:	60d8      	str	r0, [r3, #12]
 8002b90:	6911      	ldr	r1, [r2, #16]
 8002b92:	6119      	str	r1, [r3, #16]
		return;
 8002b94:	e07e      	b.n	8002c94 <Print+0x13c>
	}
	switch (parameter->type) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7d5b      	ldrb	r3, [r3, #21]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d879      	bhi.n	8002c92 <Print+0x13a>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <Print+0x4c>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c01 	.word	0x08002c01
 8002ba8:	08002c25 	.word	0x08002c25
 8002bac:	08002c93 	.word	0x08002c93
 8002bb0:	08002c49 	.word	0x08002c49
 8002bb4:	08002bb9 	.word	0x08002bb9
		case ROW_ETH_ADDR:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d.%d.%d.%d",*((uint16_t*)parameter->data),*(((uint16_t*)parameter->data)+1),*(((uint16_t*)parameter->data)+2),*(((uint16_t*)parameter->data)+3));
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <Print+0x148>)
 8002bc4:	4413      	add	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	79d2      	ldrb	r2, [r2, #7]
 8002bca:	1898      	adds	r0, r3, r2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	461c      	mov	r4, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	3304      	adds	r3, #4
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3306      	adds	r3, #6
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	460a      	mov	r2, r1
 8002bf8:	492b      	ldr	r1, [pc, #172]	; (8002ca8 <Print+0x150>)
 8002bfa:	f01a f9f7 	bl	801cfec <siprintf>
			break;
 8002bfe:	e049      	b.n	8002c94 <Print+0x13c>
		case ROW_USHORT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint16_t*)parameter->data));
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <Print+0x148>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	79d2      	ldrb	r2, [r2, #7]
 8002c12:	1898      	adds	r0, r3, r2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4923      	ldr	r1, [pc, #140]	; (8002cac <Print+0x154>)
 8002c1e:	f01a f9e5 	bl	801cfec <siprintf>
			break;
 8002c22:	e037      	b.n	8002c94 <Print+0x13c>
		case ROW_UINT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint32_t*)parameter->data));
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <Print+0x148>)
 8002c30:	4413      	add	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	79d2      	ldrb	r2, [r2, #7]
 8002c36:	1898      	adds	r0, r3, r2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	491a      	ldr	r1, [pc, #104]	; (8002cac <Print+0x154>)
 8002c42:	f01a f9d3 	bl	801cfec <siprintf>
			break;
 8002c46:	e025      	b.n	8002c94 <Print+0x13c>
		case ROW_BINARY_12:
			temp = *(uint16_t*)parameter->data;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < 12; ++j) {
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e01a      	b.n	8002c8c <Print+0x134>
				uint8_t num = (temp & (1<<j))>0;
 8002c56:	897a      	ldrh	r2, [r7, #10]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bfcc      	ite	gt
 8002c66:	2301      	movgt	r3, #1
 8002c68:	2300      	movle	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	727b      	strb	r3, [r7, #9]
				sprintf(lcdAnswer[2]+parameter->param_pos+j,"%d",num);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	79db      	ldrb	r3, [r3, #7]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <Print+0x158>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	7a7a      	ldrb	r2, [r7, #9]
 8002c7e:	490b      	ldr	r1, [pc, #44]	; (8002cac <Print+0x154>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f01a f9b3 	bl	801cfec <siprintf>
			for (int j = 0; j < 12; ++j) {
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b0b      	cmp	r3, #11
 8002c90:	dde1      	ble.n	8002c56 <Print+0xfe>
			}

		default:
			break;
 8002c92:	bf00      	nop
	}
}
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200006e5 	.word	0x200006e5
 8002ca0:	20006e54 	.word	0x20006e54
 8002ca4:	20006ea8 	.word	0x20006ea8
 8002ca8:	0801e3c0 	.word	0x0801e3c0
 8002cac:	0801e3cc 	.word	0x0801e3cc
 8002cb0:	20006e7c 	.word	0x20006e7c

08002cb4 <AcceptEdit>:

static void AcceptEdit(Row *par)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	if(editMode==0)return;
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <AcceptEdit+0x88>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d037      	beq.n	8002d34 <AcceptEdit+0x80>
	if(par->isEnum)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7a1b      	ldrb	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d027      	beq.n	8002d1c <AcceptEdit+0x68>
	{
		switch (par->type) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7d5b      	ldrb	r3, [r3, #21]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d01d      	beq.n	8002d10 <AcceptEdit+0x5c>
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	dc23      	bgt.n	8002d20 <AcceptEdit+0x6c>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <AcceptEdit+0x2e>
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d00c      	beq.n	8002cfa <AcceptEdit+0x46>
				break;
			case ROW_FLOAT:
				*((float*)par->data) = currentEnumKey;
				break;
			default:
				break;
 8002ce0:	e01e      	b.n	8002d20 <AcceptEdit+0x6c>
				*((uint16_t*)par->data) = (uint16_t)currentEnumKey;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <AcceptEdit+0x8c>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf0:	ee17 2a90 	vmov	r2, s15
 8002cf4:	b292      	uxth	r2, r2
 8002cf6:	801a      	strh	r2, [r3, #0]
				break;
 8002cf8:	e013      	b.n	8002d22 <AcceptEdit+0x6e>
				*((uint32_t*)par->data) = (uint32_t)currentEnumKey;
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <AcceptEdit+0x8c>)
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d08:	ee17 2a90 	vmov	r2, s15
 8002d0c:	601a      	str	r2, [r3, #0]
				break;
 8002d0e:	e008      	b.n	8002d22 <AcceptEdit+0x6e>
				*((float*)par->data) = currentEnumKey;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <AcceptEdit+0x8c>)
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	601a      	str	r2, [r3, #0]
				break;
 8002d1a:	e002      	b.n	8002d22 <AcceptEdit+0x6e>
		}
	}
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <AcceptEdit+0x6e>
				break;
 8002d20:	bf00      	nop
	settingsSaveFRAM();
 8002d22:	f001 fe39 	bl	8004998 <settingsSaveFRAM>
	editMode = 0;
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <AcceptEdit+0x88>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
	currentCursorPosition = -1;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <AcceptEdit+0x90>)
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e000      	b.n	8002d36 <AcceptEdit+0x82>
	if(editMode==0)return;
 8002d34:	bf00      	nop

}
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200006e5 	.word	0x200006e5
 8002d40:	200006e8 	.word	0x200006e8
 8002d44:	200000a0 	.word	0x200000a0

08002d48 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d52:	481f      	ldr	r0, [pc, #124]	; (8002dd0 <lcd_init+0x88>)
 8002d54:	f005 fc00 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	481c      	ldr	r0, [pc, #112]	; (8002dd0 <lcd_init+0x88>)
 8002d5e:	f005 fbfb 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8002d62:	200f      	movs	r0, #15
 8002d64:	f002 fe02 	bl	800596c <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2033      	movs	r0, #51	; 0x33
 8002d6c:	f000 f892 	bl	8002e94 <sendByte>
	HAL_Delay(1);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f002 fdfb 	bl	800596c <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8002d76:	2100      	movs	r1, #0
 8002d78:	2032      	movs	r0, #50	; 0x32
 8002d7a:	f000 f88b 	bl	8002e94 <sendByte>
	HAL_Delay(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f002 fdf4 	bl	800596c <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 8002d84:	2100      	movs	r1, #0
 8002d86:	2028      	movs	r0, #40	; 0x28
 8002d88:	f000 f884 	bl	8002e94 <sendByte>
	HAL_Delay(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f002 fded 	bl	800596c <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8002d92:	2100      	movs	r1, #0
 8002d94:	2008      	movs	r0, #8
 8002d96:	f000 f87d 	bl	8002e94 <sendByte>
	HAL_Delay(1);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f002 fde6 	bl	800596c <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8002da0:	2100      	movs	r1, #0
 8002da2:	2001      	movs	r0, #1
 8002da4:	f000 f876 	bl	8002e94 <sendByte>
	HAL_Delay(2);
 8002da8:	2002      	movs	r0, #2
 8002daa:	f002 fddf 	bl	800596c <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8002dae:	2100      	movs	r1, #0
 8002db0:	2006      	movs	r0, #6
 8002db2:	f000 f86f 	bl	8002e94 <sendByte>
	HAL_Delay(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f002 fdd8 	bl	800596c <HAL_Delay>
	sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	200c      	movs	r0, #12
 8002dc0:	f000 f868 	bl	8002e94 <sendByte>
	HAL_Delay(1);
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f002 fdd1 	bl	800596c <HAL_Delay>
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40020400 	.word	0x40020400

08002dd4 <SetCursor>:

void SetCursor(int position)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	if(position==-1 || position>79)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d002      	beq.n	8002dea <SetCursor+0x16>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b4f      	cmp	r3, #79	; 0x4f
 8002de8:	dd07      	ble.n	8002dfa <SetCursor+0x26>
	{
		sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8002dea:	2100      	movs	r1, #0
 8002dec:	200c      	movs	r0, #12
 8002dee:	f000 f851 	bl	8002e94 <sendByte>
		HAL_Delay(1);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f002 fdba 	bl	800596c <HAL_Delay>
 8002df8:	e047      	b.n	8002e8a <SetCursor+0xb6>
	}
	else
	{
		sendByte(DISPLAY_ON_CURSOR_ON, 0);// включаем дисплей и ставим курсор
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	200f      	movs	r0, #15
 8002dfe:	f000 f849 	bl	8002e94 <sendByte>
		HAL_Delay(1);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f002 fdb2 	bl	800596c <HAL_Delay>
		uint8_t row = position/20;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <SetCursor+0xbc>)
 8002e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e10:	10d2      	asrs	r2, r2, #3
 8002e12:	17db      	asrs	r3, r3, #31
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	73bb      	strb	r3, [r7, #14]
		uint8_t col = position%20;
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <SetCursor+0xbc>)
 8002e1c:	fb83 1302 	smull	r1, r3, r3, r2
 8002e20:	10d9      	asrs	r1, r3, #3
 8002e22:	17d3      	asrs	r3, r2, #31
 8002e24:	1ac9      	subs	r1, r1, r3
 8002e26:	460b      	mov	r3, r1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	1ad1      	subs	r1, r2, r3
 8002e30:	460b      	mov	r3, r1
 8002e32:	737b      	strb	r3, [r7, #13]
		uint8_t addr = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
		switch (row) {
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d824      	bhi.n	8002e88 <SetCursor+0xb4>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <SetCursor+0x70>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e5b 	.word	0x08002e5b
 8002e4c:	08002e61 	.word	0x08002e61
 8002e50:	08002e67 	.word	0x08002e67
			case 0:
				addr = 0x0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
				break;
 8002e58:	e008      	b.n	8002e6c <SetCursor+0x98>
			case 1:
				addr = 0x40;
 8002e5a:	2340      	movs	r3, #64	; 0x40
 8002e5c:	73fb      	strb	r3, [r7, #15]
				break;
 8002e5e:	e005      	b.n	8002e6c <SetCursor+0x98>
			case 2:
				addr = 0x14;
 8002e60:	2314      	movs	r3, #20
 8002e62:	73fb      	strb	r3, [r7, #15]
				break;
 8002e64:	e002      	b.n	8002e6c <SetCursor+0x98>
			case 3:
				addr = 0x54;
 8002e66:	2354      	movs	r3, #84	; 0x54
 8002e68:	73fb      	strb	r3, [r7, #15]
				break;
 8002e6a:	bf00      	nop
			default:
				return;
		}
		sendByte(64+addr+col, 0); // установка курсора
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	7b7b      	ldrb	r3, [r7, #13]
 8002e70:	4413      	add	r3, r2
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3340      	adds	r3, #64	; 0x40
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f80a 	bl	8002e94 <sendByte>
		HAL_Delay(1);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f002 fd73 	bl	800596c <HAL_Delay>
 8002e86:	e000      	b.n	8002e8a <SetCursor+0xb6>
				return;
 8002e88:	bf00      	nop
	}
}
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	66666667 	.word	0x66666667

08002e94 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	216f      	movs	r1, #111	; 0x6f
 8002ea4:	4841      	ldr	r0, [pc, #260]	; (8002fac <sendByte+0x118>)
 8002ea6:	f005 fb57 	bl	8008558 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <sendByte+0x28>
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	483d      	ldr	r0, [pc, #244]	; (8002fac <sendByte+0x118>)
 8002eb6:	f005 fb4f 	bl	8008558 <HAL_GPIO_WritePin>
 8002eba:	e004      	b.n	8002ec6 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2140      	movs	r1, #64	; 0x40
 8002ec0:	483a      	ldr	r0, [pc, #232]	; (8002fac <sendByte+0x118>)
 8002ec2:	f005 fb49 	bl	8008558 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da04      	bge.n	8002ed8 <sendByte+0x44>
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2108      	movs	r1, #8
 8002ed2:	4836      	ldr	r0, [pc, #216]	; (8002fac <sendByte+0x118>)
 8002ed4:	f005 fb40 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <sendByte+0x58>
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	4831      	ldr	r0, [pc, #196]	; (8002fac <sendByte+0x118>)
 8002ee8:	f005 fb36 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <sendByte+0x6c>
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2102      	movs	r1, #2
 8002efa:	482c      	ldr	r0, [pc, #176]	; (8002fac <sendByte+0x118>)
 8002efc:	f005 fb2c 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <sendByte+0x80>
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4827      	ldr	r0, [pc, #156]	; (8002fac <sendByte+0x118>)
 8002f10:	f005 fb22 	bl	8008558 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8002f14:	2201      	movs	r2, #1
 8002f16:	2120      	movs	r1, #32
 8002f18:	4824      	ldr	r0, [pc, #144]	; (8002fac <sendByte+0x118>)
 8002f1a:	f005 fb1d 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f002 fd24 	bl	800596c <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8002f24:	2200      	movs	r2, #0
 8002f26:	2120      	movs	r1, #32
 8002f28:	4820      	ldr	r0, [pc, #128]	; (8002fac <sendByte+0x118>)
 8002f2a:	f005 fb15 	bl	8008558 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	212f      	movs	r1, #47	; 0x2f
 8002f32:	481e      	ldr	r0, [pc, #120]	; (8002fac <sendByte+0x118>)
 8002f34:	f005 fb10 	bl	8008558 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	481b      	ldr	r0, [pc, #108]	; (8002fac <sendByte+0x118>)
 8002f3e:	f005 fb0b 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <sendByte+0xc2>
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2108      	movs	r1, #8
 8002f50:	4816      	ldr	r0, [pc, #88]	; (8002fac <sendByte+0x118>)
 8002f52:	f005 fb01 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <sendByte+0xd6>
 8002f60:	2201      	movs	r2, #1
 8002f62:	2104      	movs	r1, #4
 8002f64:	4811      	ldr	r0, [pc, #68]	; (8002fac <sendByte+0x118>)
 8002f66:	f005 faf7 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <sendByte+0xea>
 8002f74:	2201      	movs	r2, #1
 8002f76:	2102      	movs	r1, #2
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <sendByte+0x118>)
 8002f7a:	f005 faed 	bl	8008558 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <sendByte+0xfe>
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4807      	ldr	r0, [pc, #28]	; (8002fac <sendByte+0x118>)
 8002f8e:	f005 fae3 	bl	8008558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8002f92:	2200      	movs	r2, #0
 8002f94:	2120      	movs	r1, #32
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <sendByte+0x118>)
 8002f98:	f005 fade 	bl	8008558 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f002 fce5 	bl	800596c <HAL_Delay>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40020400 	.word	0x40020400

08002fb0 <sendStr>:


void sendStr( char *str, int row , int position )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d816      	bhi.n	8002ff0 <sendStr+0x40>
 8002fc2:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <sendStr+0x18>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	08002fd9 	.word	0x08002fd9
 8002fcc:	08002fdf 	.word	0x08002fdf
 8002fd0:	08002fe5 	.word	0x08002fe5
 8002fd4:	08002feb 	.word	0x08002feb

	switch (row)
	{

		case 0:
			start_address = 0x0; // 1 строка
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]
			break;
 8002fdc:	e008      	b.n	8002ff0 <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 8002fde:	2340      	movs	r3, #64	; 0x40
 8002fe0:	75fb      	strb	r3, [r7, #23]
			break;
 8002fe2:	e005      	b.n	8002ff0 <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8002fe4:	2314      	movs	r3, #20
 8002fe6:	75fb      	strb	r3, [r7, #23]
			break;
 8002fe8:	e002      	b.n	8002ff0 <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 8002fea:	2354      	movs	r3, #84	; 0x54
 8002fec:	75fb      	strb	r3, [r7, #23]
			break;
 8002fee:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003000:	75fb      	strb	r3, [r7, #23]
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff44 	bl	8002e94 <sendByte>

	HAL_Delay(4);
 800300c:	2004      	movs	r0, #4
 800300e:	f002 fcad 	bl	800596c <HAL_Delay>
//	while(*str != '\0'){
//
//		sendByte(*str, 1);
//		str++;
//	}
	uint8_t byte  = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 20; ++i) {
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e011      	b.n	8003040 <sendStr+0x90>
		byte = *(str+i);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	75bb      	strb	r3, [r7, #22]
		if(byte==0)byte = 32;
 8003026:	7dbb      	ldrb	r3, [r7, #22]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <sendStr+0x80>
 800302c:	2320      	movs	r3, #32
 800302e:	75bb      	strb	r3, [r7, #22]
		sendByte(byte, 1);
 8003030:	7dbb      	ldrb	r3, [r7, #22]
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff2d 	bl	8002e94 <sendByte>
	for (int i = 0; i < 20; ++i) {
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3301      	adds	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b13      	cmp	r3, #19
 8003044:	ddea      	ble.n	800301c <sendStr+0x6c>
	}
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 8003056:	f000 fc05 	bl	8003864 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800305a:	f002 fc45 	bl	80058e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305e:	f000 f83f 	bl	80030e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003062:	f000 fa9b 	bl	800359c <MX_GPIO_Init>
  MX_DMA_Init();
 8003066:	f000 fa69 	bl	800353c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800306a:	f000 fa13 	bl	8003494 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800306e:	f000 fa3b 	bl	80034e8 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8003072:	f000 f93d 	bl	80032f0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8003076:	f000 f8a3 	bl	80031c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800307a:	f000 f96f 	bl	800335c <MX_TIM3_Init>
  MX_TIM4_Init();
 800307e:	f000 f9bb 	bl	80033f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8003082:	f7ff fe61 	bl	8002d48 <lcd_init>
  ethernet_reset();
 8003086:	f7fd ff7f 	bl	8000f88 <ethernet_reset>
  Analog_Start();
 800308a:	f7fd fa75 	bl	8000578 <Analog_Start>
  Start_Timers();
 800308e:	f002 f8f9 	bl	8005284 <Start_Timers>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f009 fabd 	bl	800c620 <osSemaphoreCreate>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <main+0x84>)
 80030aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <main+0x88>)
 80030ae:	1d3c      	adds	r4, r7, #4
 80030b0:	461d      	mov	r5, r3
 80030b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f009 f9af 	bl	800c426 <osThreadCreate>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a04      	ldr	r2, [pc, #16]	; (80030dc <main+0x8c>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80030ce:	f009 f993 	bl	800c3f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <main+0x82>
 80030d4:	200071ac 	.word	0x200071ac
 80030d8:	0801e3dc 	.word	0x0801e3dc
 80030dc:	20006f14 	.word	0x20006f14

080030e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b094      	sub	sp, #80	; 0x50
 80030e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030e6:	f107 0320 	add.w	r3, r7, #32
 80030ea:	2230      	movs	r2, #48	; 0x30
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f019 fdf8 	bl	801cce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <SystemClock_Config+0xd8>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <SystemClock_Config+0xd8>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	6413      	str	r3, [r2, #64]	; 0x40
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <SystemClock_Config+0xd8>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <SystemClock_Config+0xdc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <SystemClock_Config+0xdc>)
 800312a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <SystemClock_Config+0xdc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800313c:	2301      	movs	r3, #1
 800313e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003146:	2302      	movs	r3, #2
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800314a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003150:	2319      	movs	r3, #25
 8003152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003154:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003158:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800315a:	2302      	movs	r3, #2
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800315e:	2304      	movs	r3, #4
 8003160:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003162:	f107 0320 	add.w	r3, r7, #32
 8003166:	4618      	mov	r0, r3
 8003168:	f005 fa10 	bl	800858c <HAL_RCC_OscConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003172:	f000 fb5b 	bl	800382c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003176:	230f      	movs	r3, #15
 8003178:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003182:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003186:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800318e:	f107 030c 	add.w	r3, r7, #12
 8003192:	2105      	movs	r1, #5
 8003194:	4618      	mov	r0, r3
 8003196:	f005 fc71 	bl	8008a7c <HAL_RCC_ClockConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80031a0:	f000 fb44 	bl	800382c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80031a4:	2200      	movs	r2, #0
 80031a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031aa:	2000      	movs	r0, #0
 80031ac:	f005 fd4c 	bl	8008c48 <HAL_RCC_MCOConfig>
}
 80031b0:	bf00      	nop
 80031b2:	3750      	adds	r7, #80	; 0x50
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40007000 	.word	0x40007000

080031c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031c6:	463b      	mov	r3, r7
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031d4:	4a45      	ldr	r2, [pc, #276]	; (80032ec <MX_ADC1_Init+0x12c>)
 80031d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80031e6:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <MX_ADC1_Init+0x128>)
 80031fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <MX_ADC1_Init+0x128>)
 800320c:	2200      	movs	r2, #0
 800320e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003212:	2206      	movs	r2, #6
 8003214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003216:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800321e:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003220:	2201      	movs	r2, #1
 8003222:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003224:	4830      	ldr	r0, [pc, #192]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003226:	f002 fbc5 	bl	80059b4 <HAL_ADC_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003230:	f000 fafc 	bl	800382c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003234:	230a      	movs	r3, #10
 8003236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003238:	2301      	movs	r3, #1
 800323a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800323c:	2307      	movs	r3, #7
 800323e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003240:	463b      	mov	r3, r7
 8003242:	4619      	mov	r1, r3
 8003244:	4828      	ldr	r0, [pc, #160]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003246:	f002 fd1d 	bl	8005c84 <HAL_ADC_ConfigChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003250:	f000 faec 	bl	800382c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003254:	230c      	movs	r3, #12
 8003256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003258:	2302      	movs	r3, #2
 800325a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800325c:	463b      	mov	r3, r7
 800325e:	4619      	mov	r1, r3
 8003260:	4821      	ldr	r0, [pc, #132]	; (80032e8 <MX_ADC1_Init+0x128>)
 8003262:	f002 fd0f 	bl	8005c84 <HAL_ADC_ConfigChannel>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800326c:	f000 fade 	bl	800382c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003270:	230d      	movs	r3, #13
 8003272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003274:	2303      	movs	r3, #3
 8003276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003278:	463b      	mov	r3, r7
 800327a:	4619      	mov	r1, r3
 800327c:	481a      	ldr	r0, [pc, #104]	; (80032e8 <MX_ADC1_Init+0x128>)
 800327e:	f002 fd01 	bl	8005c84 <HAL_ADC_ConfigChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003288:	f000 fad0 	bl	800382c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800328c:	2303      	movs	r3, #3
 800328e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003290:	2304      	movs	r3, #4
 8003292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003294:	463b      	mov	r3, r7
 8003296:	4619      	mov	r1, r3
 8003298:	4813      	ldr	r0, [pc, #76]	; (80032e8 <MX_ADC1_Init+0x128>)
 800329a:	f002 fcf3 	bl	8005c84 <HAL_ADC_ConfigChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80032a4:	f000 fac2 	bl	800382c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80032a8:	2304      	movs	r3, #4
 80032aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80032ac:	2305      	movs	r3, #5
 80032ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b0:	463b      	mov	r3, r7
 80032b2:	4619      	mov	r1, r3
 80032b4:	480c      	ldr	r0, [pc, #48]	; (80032e8 <MX_ADC1_Init+0x128>)
 80032b6:	f002 fce5 	bl	8005c84 <HAL_ADC_ConfigChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80032c0:	f000 fab4 	bl	800382c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80032c4:	2311      	movs	r3, #17
 80032c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80032c8:	2306      	movs	r3, #6
 80032ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032cc:	463b      	mov	r3, r7
 80032ce:	4619      	mov	r1, r3
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_ADC1_Init+0x128>)
 80032d2:	f002 fcd7 	bl	8005c84 <HAL_ADC_ConfigChannel>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80032dc:	f000 faa6 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20007060 	.word	0x20007060
 80032ec:	40012000 	.word	0x40012000

080032f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <MX_SPI3_Init+0x64>)
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <MX_SPI3_Init+0x68>)
 80032f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <MX_SPI3_Init+0x64>)
 80032fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003300:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <MX_SPI3_Init+0x64>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_SPI3_Init+0x64>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <MX_SPI3_Init+0x64>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <MX_SPI3_Init+0x64>)
 8003316:	2200      	movs	r2, #0
 8003318:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <MX_SPI3_Init+0x64>)
 800331c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003320:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <MX_SPI3_Init+0x64>)
 8003324:	2200      	movs	r2, #0
 8003326:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <MX_SPI3_Init+0x64>)
 800332a:	2200      	movs	r2, #0
 800332c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <MX_SPI3_Init+0x64>)
 8003330:	2200      	movs	r2, #0
 8003332:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <MX_SPI3_Init+0x64>)
 8003336:	2200      	movs	r2, #0
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <MX_SPI3_Init+0x64>)
 800333c:	220a      	movs	r2, #10
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003340:	4804      	ldr	r0, [pc, #16]	; (8003354 <MX_SPI3_Init+0x64>)
 8003342:	f005 fe05 	bl	8008f50 <HAL_SPI_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800334c:	f000 fa6e 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20007008 	.word	0x20007008
 8003358:	40003c00 	.word	0x40003c00

0800335c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003370:	463b      	mov	r3, r7
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <MX_TIM3_Init+0x94>)
 800337a:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <MX_TIM3_Init+0x98>)
 800337c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <MX_TIM3_Init+0x94>)
 8003380:	2229      	movs	r2, #41	; 0x29
 8003382:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <MX_TIM3_Init+0x94>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <MX_TIM3_Init+0x94>)
 800338c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003390:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <MX_TIM3_Init+0x94>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <MX_TIM3_Init+0x94>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800339e:	4814      	ldr	r0, [pc, #80]	; (80033f0 <MX_TIM3_Init+0x94>)
 80033a0:	f006 fb7e 	bl	8009aa0 <HAL_TIM_Base_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80033aa:	f000 fa3f 	bl	800382c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033b4:	f107 0308 	add.w	r3, r7, #8
 80033b8:	4619      	mov	r1, r3
 80033ba:	480d      	ldr	r0, [pc, #52]	; (80033f0 <MX_TIM3_Init+0x94>)
 80033bc:	f006 fda0 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80033c6:	f000 fa31 	bl	800382c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033ca:	2320      	movs	r3, #32
 80033cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033d2:	463b      	mov	r3, r7
 80033d4:	4619      	mov	r1, r3
 80033d6:	4806      	ldr	r0, [pc, #24]	; (80033f0 <MX_TIM3_Init+0x94>)
 80033d8:	f006 ffbc 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80033e2:	f000 fa23 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20006fc0 	.word	0x20006fc0
 80033f4:	40000400 	.word	0x40000400

080033f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033fe:	f107 0308 	add.w	r3, r7, #8
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800340c:	463b      	mov	r3, r7
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <MX_TIM4_Init+0x94>)
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <MX_TIM4_Init+0x98>)
 8003418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <MX_TIM4_Init+0x94>)
 800341c:	2229      	movs	r2, #41	; 0x29
 800341e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <MX_TIM4_Init+0x94>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003426:	4b19      	ldr	r3, [pc, #100]	; (800348c <MX_TIM4_Init+0x94>)
 8003428:	f240 32e7 	movw	r2, #999	; 0x3e7
 800342c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <MX_TIM4_Init+0x94>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <MX_TIM4_Init+0x94>)
 8003436:	2200      	movs	r2, #0
 8003438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800343a:	4814      	ldr	r0, [pc, #80]	; (800348c <MX_TIM4_Init+0x94>)
 800343c:	f006 fb30 	bl	8009aa0 <HAL_TIM_Base_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003446:	f000 f9f1 	bl	800382c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800344a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	4619      	mov	r1, r3
 8003456:	480d      	ldr	r0, [pc, #52]	; (800348c <MX_TIM4_Init+0x94>)
 8003458:	f006 fd52 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003462:	f000 f9e3 	bl	800382c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003466:	2320      	movs	r3, #32
 8003468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800346e:	463b      	mov	r3, r7
 8003470:	4619      	mov	r1, r3
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <MX_TIM4_Init+0x94>)
 8003474:	f006 ff6e 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800347e:	f000 f9d5 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20006f78 	.word	0x20006f78
 8003490:	40000800 	.word	0x40000800

08003494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 800349a:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <MX_USART1_UART_Init+0x50>)
 800349c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034ba:	220c      	movs	r2, #12
 80034bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034ca:	4805      	ldr	r0, [pc, #20]	; (80034e0 <MX_USART1_UART_Init+0x4c>)
 80034cc:	f006 ffd2 	bl	800a474 <HAL_UART_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034d6:	f000 f9a9 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20007108 	.word	0x20007108
 80034e4:	40011000 	.word	0x40011000

080034e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <MX_USART6_UART_Init+0x50>)
 80034f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 80034f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 800350e:	220c      	movs	r2, #12
 8003510:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <MX_USART6_UART_Init+0x4c>)
 8003520:	f006 ffa8 	bl	800a474 <HAL_UART_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800352a:	f000 f97f 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200071b0 	.word	0x200071b0
 8003538:	40011400 	.word	0x40011400

0800353c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <MX_DMA_Init+0x5c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <MX_DMA_Init+0x5c>)
 800354c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <MX_DMA_Init+0x5c>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2105      	movs	r1, #5
 8003562:	2038      	movs	r0, #56	; 0x38
 8003564:	f002 ff0a 	bl	800637c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003568:	2038      	movs	r0, #56	; 0x38
 800356a:	f002 ff23 	bl	80063b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2105      	movs	r1, #5
 8003572:	2039      	movs	r0, #57	; 0x39
 8003574:	f002 ff02 	bl	800637c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003578:	2039      	movs	r0, #57	; 0x39
 800357a:	f002 ff1b 	bl	80063b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2105      	movs	r1, #5
 8003582:	203a      	movs	r0, #58	; 0x3a
 8003584:	f002 fefa 	bl	800637c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003588:	203a      	movs	r0, #58	; 0x3a
 800358a:	f002 ff13 	bl	80063b4 <HAL_NVIC_EnableIRQ>

}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a2:	f107 031c 	add.w	r3, r7, #28
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	4b83      	ldr	r3, [pc, #524]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a82      	ldr	r2, [pc, #520]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035bc:	f043 0310 	orr.w	r3, r3, #16
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b80      	ldr	r3, [pc, #512]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	4b7c      	ldr	r3, [pc, #496]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a7b      	ldr	r2, [pc, #492]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b79      	ldr	r3, [pc, #484]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a74      	ldr	r2, [pc, #464]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <MX_GPIO_Init+0x228>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	4b6e      	ldr	r3, [pc, #440]	; (80037c4 <MX_GPIO_Init+0x228>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a6d      	ldr	r2, [pc, #436]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a66      	ldr	r2, [pc, #408]	; (80037c4 <MX_GPIO_Init+0x228>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a5f      	ldr	r2, [pc, #380]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b5d      	ldr	r3, [pc, #372]	; (80037c4 <MX_GPIO_Init+0x228>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 800365a:	2200      	movs	r2, #0
 800365c:	2101      	movs	r1, #1
 800365e:	485a      	ldr	r0, [pc, #360]	; (80037c8 <MX_GPIO_Init+0x22c>)
 8003660:	f004 ff7a 	bl	8008558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8003664:	2200      	movs	r2, #0
 8003666:	f24c 417f 	movw	r1, #50303	; 0xc47f
 800366a:	4858      	ldr	r0, [pc, #352]	; (80037cc <MX_GPIO_Init+0x230>)
 800366c:	f004 ff74 	bl	8008558 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8003670:	2200      	movs	r2, #0
 8003672:	f64f 7180 	movw	r1, #65408	; 0xff80
 8003676:	4856      	ldr	r0, [pc, #344]	; (80037d0 <MX_GPIO_Init+0x234>)
 8003678:	f004 ff6e 	bl	8008558 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003682:	4854      	ldr	r0, [pc, #336]	; (80037d4 <MX_GPIO_Init+0x238>)
 8003684:	f004 ff68 	bl	8008558 <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800368e:	4852      	ldr	r0, [pc, #328]	; (80037d8 <MX_GPIO_Init+0x23c>)
 8003690:	f004 ff62 	bl	8008558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8003694:	2201      	movs	r2, #1
 8003696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800369a:	484b      	ldr	r0, [pc, #300]	; (80037c8 <MX_GPIO_Init+0x22c>)
 800369c:	f004 ff5c 	bl	8008558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 80036a0:	237f      	movs	r3, #127	; 0x7f
 80036a2:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a8:	2301      	movs	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ac:	f107 031c 	add.w	r3, r7, #28
 80036b0:	4619      	mov	r1, r3
 80036b2:	4847      	ldr	r0, [pc, #284]	; (80037d0 <MX_GPIO_Init+0x234>)
 80036b4:	f004 fca0 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 80036b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	4619      	mov	r1, r3
 80036cc:	4842      	ldr	r0, [pc, #264]	; (80037d8 <MX_GPIO_Init+0x23c>)
 80036ce:	f004 fc93 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 80036d2:	f248 0301 	movw	r3, #32769	; 0x8001
 80036d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d8:	2301      	movs	r3, #1
 80036da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	4619      	mov	r1, r3
 80036ea:	4837      	ldr	r0, [pc, #220]	; (80037c8 <MX_GPIO_Init+0x22c>)
 80036ec:	f004 fc84 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 80036f0:	f24c 437f 	movw	r3, #50303	; 0xc47f
 80036f4:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f6:	2301      	movs	r3, #1
 80036f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	f107 031c 	add.w	r3, r7, #28
 8003706:	4619      	mov	r1, r3
 8003708:	4830      	ldr	r0, [pc, #192]	; (80037cc <MX_GPIO_Init+0x230>)
 800370a:	f004 fc75 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 800370e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003712:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003714:	2301      	movs	r3, #1
 8003716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003720:	f107 031c 	add.w	r3, r7, #28
 8003724:	4619      	mov	r1, r3
 8003726:	482a      	ldr	r0, [pc, #168]	; (80037d0 <MX_GPIO_Init+0x234>)
 8003728:	f004 fc66 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 800372c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003730:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003732:	2301      	movs	r3, #1
 8003734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	4619      	mov	r1, r3
 8003744:	4823      	ldr	r0, [pc, #140]	; (80037d4 <MX_GPIO_Init+0x238>)
 8003746:	f004 fc57 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 800374a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003750:	2301      	movs	r3, #1
 8003752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800375c:	f107 031c 	add.w	r3, r7, #28
 8003760:	4619      	mov	r1, r3
 8003762:	481d      	ldr	r0, [pc, #116]	; (80037d8 <MX_GPIO_Init+0x23c>)
 8003764:	f004 fc48 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800376c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800377a:	2300      	movs	r3, #0
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 031c 	add.w	r3, r7, #28
 8003782:	4619      	mov	r1, r3
 8003784:	4810      	ldr	r0, [pc, #64]	; (80037c8 <MX_GPIO_Init+0x22c>)
 8003786:	f004 fc37 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 800378a:	233f      	movs	r3, #63	; 0x3f
 800378c:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003792:	2302      	movs	r3, #2
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003796:	f107 031c 	add.w	r3, r7, #28
 800379a:	4619      	mov	r1, r3
 800379c:	480d      	ldr	r0, [pc, #52]	; (80037d4 <MX_GPIO_Init+0x238>)
 800379e:	f004 fc2b 	bl	8007ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 80037a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	2300      	movs	r3, #0
 80037aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ac:	2301      	movs	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	4619      	mov	r1, r3
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <MX_GPIO_Init+0x230>)
 80037b8:	f004 fc1e 	bl	8007ff8 <HAL_GPIO_Init>

}
 80037bc:	bf00      	nop
 80037be:	3730      	adds	r7, #48	; 0x30
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40020000 	.word	0x40020000
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40020800 	.word	0x40020800

080037dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80037e4:	f008 f8be 	bl	800b964 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int result = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  task_init();
 80037ec:	f7fd fd9c 	bl	8001328 <task_init>
  result = settingsLoadFRAM();
 80037f0:	f001 f88a 	bl	8004908 <settingsLoadFRAM>
 80037f4:	60f8      	str	r0, [r7, #12]
  main_process_init();
 80037f6:	f000 f82d 	bl	8003854 <main_process_init>
  /* Infinite loop */
  for(;;)
  {
	main_process();
 80037fa:	f000 f81c 	bl	8003836 <main_process>
    osDelay(1);
 80037fe:	2001      	movs	r0, #1
 8003800:	f008 fe5d 	bl	800c4be <osDelay>
	main_process();
 8003804:	e7f9      	b.n	80037fa <StartDefaultTask+0x1e>
	...

08003808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800381a:	f002 f887 	bl	800592c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000

0800382c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003830:	b672      	cpsid	i
}
 8003832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003834:	e7fe      	b.n	8003834 <Error_Handler+0x8>

08003836 <main_process>:
#include <probotbornik.h>



void main_process()
{
 8003836:	b580      	push	{r7, lr}
 8003838:	af00      	add	r7, sp, #0
	Read_Inputs();
 800383a:	f7fc ffa7 	bl	800078c <Read_Inputs>
	Analog_Read();
 800383e:	f7fc fead 	bl	800059c <Analog_Read>
	probotbor_process();
 8003842:	f000 fc47 	bl	80040d4 <probotbor_process>
	Write_Outputs();
 8003846:	f7fd f935 	bl	8000ab4 <Write_Outputs>

	osDelay(1);
 800384a:	2001      	movs	r0, #1
 800384c:	f008 fe37 	bl	800c4be <osDelay>
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}

08003854 <main_process_init>:

void main_process_init()
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <ModbusInit+0x34>)
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <ModbusInit+0x38>)
 800386c:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <ModbusInit+0x3c>)
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <ModbusInit+0x40>)
 8003872:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <ModbusInit+0x44>)
 8003876:	224e      	movs	r2, #78	; 0x4e
 8003878:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <ModbusInit+0x48>)
 800387c:	2236      	movs	r2, #54	; 0x36
 800387e:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <ModbusInit+0x38>)
 8003882:	891b      	ldrh	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <ModbusInit+0x2a>
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <ModbusInit+0x38>)
 800388a:	2201      	movs	r2, #1
 800388c:	811a      	strh	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	200006ec 	.word	0x200006ec
 800389c:	20007230 	.word	0x20007230
 80038a0:	200006f0 	.word	0x200006f0
 80038a4:	200072cc 	.word	0x200072cc
 80038a8:	200006f4 	.word	0x200006f4
 80038ac:	200006f6 	.word	0x200006f6

080038b0 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	461a      	mov	r2, r3
 80038bc:	460b      	mov	r3, r1
 80038be:	817b      	strh	r3, [r7, #10]
 80038c0:	4613      	mov	r3, r2
 80038c2:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 80038c4:	4b26      	ldr	r3, [pc, #152]	; (8003960 <ModbusParse+0xb0>)
 80038c6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80038ca:	3301      	adds	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <ModbusParse+0xb0>)
 80038d0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <ModbusParse+0x2e>
 80038da:	2300      	movs	r3, #0
 80038dc:	e03c      	b.n	8003958 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	7a7a      	ldrb	r2, [r7, #9]
 80038e2:	4619      	mov	r1, r3
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f83d 	bl	8003964 <CheckRequestLength>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <ModbusParse+0x44>
 80038f0:	2300      	movs	r3, #0
 80038f2:	e031      	b.n	8003958 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 80038f4:	7a7b      	ldrb	r3, [r7, #9]
 80038f6:	4619      	mov	r1, r3
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f857 	bl	80039ac <CheckMbAddr>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <ModbusParse+0x58>
 8003904:	2300      	movs	r3, #0
 8003906:	e027      	b.n	8003958 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8003908:	7a7b      	ldrb	r3, [r7, #9]
 800390a:	4619      	mov	r1, r3
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f873 	bl	80039f8 <IsCorrectMbCommand>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8003918:	7a7b      	ldrb	r3, [r7, #9]
 800391a:	2201      	movs	r2, #1
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f89e 	bl	8003a60 <SetInvalidCommand>
 8003924:	4603      	mov	r3, r0
 8003926:	e017      	b.n	8003958 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8003928:	897b      	ldrh	r3, [r7, #10]
 800392a:	7a7a      	ldrb	r2, [r7, #9]
 800392c:	4619      	mov	r1, r3
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f93f 	bl	8003bb2 <CheckCrc>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d107      	bne.n	800394a <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 800393a:	7a7b      	ldrb	r3, [r7, #9]
 800393c:	2203      	movs	r2, #3
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f88d 	bl	8003a60 <SetInvalidCommand>
 8003946:	4603      	mov	r3, r0
 8003948:	e006      	b.n	8003958 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 800394a:	7a7b      	ldrb	r3, [r7, #9]
 800394c:	461a      	mov	r2, r3
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f963 	bl	8003c1c <GetModbusAnswer>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20007230 	.word	0x20007230

08003964 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <CheckRequestLength+0x18>
 8003978:	2301      	movs	r3, #1
 800397a:	e010      	b.n	800399e <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3304      	adds	r3, #4
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	3205      	adds	r2, #5
 8003988:	7812      	ldrb	r2, [r2, #0]
 800398a:	4413      	add	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3306      	adds	r3, #6
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
}
 800399e:	4618      	mov	r0, r3
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d103      	bne.n	80039ca <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	799b      	ldrb	r3, [r3, #6]
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e005      	b.n	80039d6 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <CheckMbAddr+0x48>)
 80039dc:	891b      	ldrh	r3, [r3, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20007230 	.word	0x20007230

080039f8 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d103      	bne.n	8003a16 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	79db      	ldrb	r3, [r3, #7]
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	e005      	b.n	8003a22 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	bf8c      	ite	hi
 8003a28:	2201      	movhi	r2, #1
 8003a2a:	2200      	movls	r2, #0
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d10c      	bne.n	8003a4c <IsCorrectMbCommand+0x54>
 8003a32:	2201      	movs	r2, #1
 8003a34:	409a      	lsls	r2, r3
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <IsCorrectMbCommand+0x64>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8003a4c:	2300      	movs	r3, #0
	}
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	00010058 	.word	0x00010058

08003a60 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	460b      	mov	r3, r1
 8003a70:	71fb      	strb	r3, [r7, #7]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	785b      	ldrb	r3, [r3, #1]
 8003a7a:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2107      	movs	r1, #7
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fe6a 	bl	800075c <set_bit>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8003a8c:	79bb      	ldrb	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11d      	bne.n	8003ace <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003a92:	2300      	movs	r3, #0
 8003a94:	82bb      	strh	r3, [r7, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	7dfa      	ldrb	r2, [r7, #23]
 8003aa4:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	79fa      	ldrb	r2, [r7, #7]
 8003aac:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f000 f832 	bl	8003b20 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3303      	adds	r3, #3
 8003ac0:	7d3a      	ldrb	r2, [r7, #20]
 8003ac2:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	7d7a      	ldrb	r2, [r7, #21]
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e01c      	b.n	8003b08 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8003ace:	79bb      	ldrb	r3, [r7, #6]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d119      	bne.n	8003b08 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	68b8      	ldr	r0, [r7, #8]
 8003ada:	f019 f8db 	bl	801cc94 <memcpy>
		*(answer+4) = 0;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3305      	adds	r3, #5
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	3307      	adds	r3, #7
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3307      	adds	r3, #7
 8003af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3308      	adds	r3, #8
 8003b04:	79fa      	ldrb	r2, [r7, #7]
 8003b06:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <SetInvalidCommand+0xb2>
 8003b0e:	2305      	movs	r3, #5
 8003b10:	e000      	b.n	8003b14 <SetInvalidCommand+0xb4>
 8003b12:	2309      	movs	r3, #9
 8003b14:	75bb      	strb	r3, [r7, #22]
	return len;
 8003b16:	7dbb      	ldrb	r3, [r7, #22]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8003b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b32:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8003b34:	f24a 0301 	movw	r3, #40961	; 0xa001
 8003b38:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e023      	b.n	8003b88 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	8bfb      	ldrh	r3, [r7, #30]
 8003b4c:	4053      	eors	r3, r2
 8003b4e:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e012      	b.n	8003b7c <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8003b56:	8bfb      	ldrh	r3, [r7, #30]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <CRC16_CALC+0x50>
					reg>>=1;
 8003b60:	8bfb      	ldrh	r3, [r7, #30]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8003b66:	8bfa      	ldrh	r2, [r7, #30]
 8003b68:	8a7b      	ldrh	r3, [r7, #18]
 8003b6a:	4053      	eors	r3, r2
 8003b6c:	83fb      	strh	r3, [r7, #30]
 8003b6e:	e002      	b.n	8003b76 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8003b70:	8bfb      	ldrh	r3, [r7, #30]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b07      	cmp	r3, #7
 8003b80:	dde9      	ble.n	8003b56 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	dbd7      	blt.n	8003b40 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8003b90:	8bfb      	ldrh	r3, [r7, #30]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8003b9e:	8bfb      	ldrh	r3, [r7, #30]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	701a      	strb	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	3724      	adds	r7, #36	; 0x24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <CheckCrc+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e024      	b.n	8003c14 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003bca:	2300      	movs	r3, #0
 8003bcc:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	dc01      	bgt.n	8003bd8 <CheckCrc+0x26>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e01d      	b.n	8003c14 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3b02      	subs	r3, #2
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	4619      	mov	r1, r3
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff ff9a 	bl	8003b20 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3b02      	subs	r3, #2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	7d3b      	ldrb	r3, [r7, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d109      	bne.n	8003c10 <CheckCrc+0x5e>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	7d7b      	ldrb	r3, [r7, #21]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d101      	bne.n	8003c10 <CheckCrc+0x5e>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <CheckCrc+0x60>
 8003c10:	2300      	movs	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <GetModbusAnswer+0x1a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	e001      	b.n	8003c3a <GetModbusAnswer+0x1e>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	79db      	ldrb	r3, [r3, #7]
 8003c3a:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	3b03      	subs	r3, #3
 8003c40:	2b0d      	cmp	r3, #13
 8003c42:	d849      	bhi.n	8003cd8 <GetModbusAnswer+0xbc>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <GetModbusAnswer+0x30>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c9f 	.word	0x08003c9f
 8003c54:	08003cd9 	.word	0x08003cd9
 8003c58:	08003cb9 	.word	0x08003cb9
 8003c5c:	08003cd9 	.word	0x08003cd9
 8003c60:	08003cd9 	.word	0x08003cd9
 8003c64:	08003cd9 	.word	0x08003cd9
 8003c68:	08003cd9 	.word	0x08003cd9
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003cd9 	.word	0x08003cd9
 8003c74:	08003cd9 	.word	0x08003cd9
 8003c78:	08003cd9 	.word	0x08003cd9
 8003c7c:	08003cd9 	.word	0x08003cd9
 8003c80:	08003cc9 	.word	0x08003cc9
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8003c84:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <GetModbusAnswer+0xc8>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <GetModbusAnswer+0xcc>)
 8003c8a:	8819      	ldrh	r1, [r3, #0]
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	460b      	mov	r3, r1
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f831 	bl	8003cfc <ReadRegisters>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	e01e      	b.n	8003cdc <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <GetModbusAnswer+0xd0>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <GetModbusAnswer+0xd4>)
 8003ca4:	8819      	ldrh	r1, [r3, #0]
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	460b      	mov	r3, r1
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f824 	bl	8003cfc <ReadRegisters>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	e011      	b.n	8003cdc <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8003cb8:	79fa      	ldrb	r2, [r7, #7]
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <GetModbusAnswer+0xd8>)
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9dc 	bl	800407c <WriteToHoldings>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	e009      	b.n	8003cdc <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8003cc8:	79fa      	ldrb	r2, [r7, #7]
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <GetModbusAnswer+0xdc>)
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f9d4 	bl	800407c <WriteToHoldings>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	e001      	b.n	8003cdc <GetModbusAnswer+0xc0>
		default:
			break;
 8003cd8:	bf00      	nop
	}
	return 0;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200006ec 	.word	0x200006ec
 8003ce8:	200006f4 	.word	0x200006f4
 8003cec:	200006f0 	.word	0x200006f0
 8003cf0:	200006f6 	.word	0x200006f6
 8003cf4:	08003edd 	.word	0x08003edd
 8003cf8:	08003f81 	.word	0x08003f81

08003cfc <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8003d10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <ReadRegisters+0x20>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e000      	b.n	8003d1e <ReadRegisters+0x22>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f882 	bl	8003e2a <GetWordFromBytes>
 8003d26:	4603      	mov	r3, r0
 8003d28:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8003d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <ReadRegisters+0x3a>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e000      	b.n	8003d38 <ReadRegisters+0x3c>
 8003d36:	230a      	movs	r3, #10
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f875 	bl	8003e2a <GetWordFromBytes>
 8003d40:	4603      	mov	r3, r0
 8003d42:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8003d44:	8bba      	ldrh	r2, [r7, #28]
 8003d46:	8b7b      	ldrh	r3, [r7, #26]
 8003d48:	4413      	add	r3, r2
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	8bfb      	ldrh	r3, [r7, #30]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	dd08      	ble.n	8003d64 <ReadRegisters+0x68>
 8003d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d56:	2202      	movs	r2, #2
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fe80 	bl	8003a60 <SetInvalidCommand>
 8003d60:	4603      	mov	r3, r0
 8003d62:	e05e      	b.n	8003e22 <ReadRegisters+0x126>
	if(source==ETHERNET)
 8003d64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d124      	bne.n	8003db6 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	68b8      	ldr	r0, [r7, #8]
 8003d72:	f018 ff8f 	bl	801cc94 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 8003d76:	8b7b      	ldrh	r3, [r7, #26]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3303      	adds	r3, #3
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 f86a 	bl	8003e60 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8003d8c:	8b7b      	ldrh	r3, [r7, #26]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	3308      	adds	r3, #8
 8003d94:	0052      	lsls	r2, r2, #1
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8003d9a:	8bbb      	ldrh	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	18d0      	adds	r0, r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3309      	adds	r3, #9
 8003da6:	8b7a      	ldrh	r2, [r7, #26]
 8003da8:	4619      	mov	r1, r3
 8003daa:	f000 f869 	bl	8003e80 <InsertWordsToMemory>
		return 9+reg_count*2;
 8003dae:	8b7b      	ldrh	r3, [r7, #26]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	3309      	adds	r3, #9
 8003db4:	e035      	b.n	8003e22 <ReadRegisters+0x126>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8003dc0:	8b7b      	ldrh	r3, [r7, #26]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	0052      	lsls	r2, r2, #1
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 8003dce:	8bbb      	ldrh	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	18d0      	adds	r0, r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3303      	adds	r3, #3
 8003dda:	8b7a      	ldrh	r2, [r7, #26]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f000 f84f 	bl	8003e80 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003de2:	2300      	movs	r3, #0
 8003de4:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 8003de6:	8b7b      	ldrh	r3, [r7, #26]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	3303      	adds	r3, #3
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	f107 0310 	add.w	r3, r7, #16
 8003df6:	4619      	mov	r1, r3
 8003df8:	68b8      	ldr	r0, [r7, #8]
 8003dfa:	f7ff fe91 	bl	8003b20 <CRC16_CALC>
		int offset = 3+reg_count*2;
 8003dfe:	8b7b      	ldrh	r3, [r7, #26]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	3303      	adds	r3, #3
 8003e04:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	7c3a      	ldrb	r2, [r7, #16]
 8003e0e:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	4413      	add	r3, r2
 8003e18:	7c7a      	ldrb	r2, [r7, #17]
 8003e1a:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 8003e1c:	8b7b      	ldrh	r3, [r7, #26]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	3305      	adds	r3, #5

	}
	return 0;
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	3301      	adds	r3, #1
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	440b      	add	r3, r1
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	b29b      	uxth	r3, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8003e6c:	1dbb      	adds	r3, r7, #6
 8003e6e:	2201      	movs	r2, #1
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f804 	bl	8003e80 <InsertWordsToMemory>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e014      	b.n	8003ec2 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	441a      	add	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	440b      	add	r3, r1
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3301      	adds	r3, #1
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	441a      	add	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	440b      	add	r3, r1
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	dbe5      	blt.n	8003e98 <InsertWordsToMemory+0x18>
    }
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <WriteSingleRegister+0x9c>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <WriteSingleRegister+0x20>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e000      	b.n	8003efe <WriteSingleRegister+0x22>
 8003efc:	2308      	movs	r3, #8
 8003efe:	4619      	mov	r1, r3
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff ff92 	bl	8003e2a <GetWordFromBytes>
 8003f06:	4603      	mov	r3, r0
 8003f08:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8003f0a:	8aba      	ldrh	r2, [r7, #20]
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d907      	bls.n	8003f22 <WriteSingleRegister+0x46>
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	2202      	movs	r2, #2
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff fda1 	bl	8003a60 <SetInvalidCommand>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	e026      	b.n	8003f70 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d112      	bne.n	8003f4e <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f103 000a 	add.w	r0, r3, #10
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <WriteSingleRegister+0xa0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	8aba      	ldrh	r2, [r7, #20]
 8003f34:	0052      	lsls	r2, r2, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7ff ffa0 	bl	8003e80 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 8003f40:	220c      	movs	r2, #12
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	f018 fea5 	bl	801cc94 <memcpy>
    	return 12;
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	e010      	b.n	8003f70 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1d18      	adds	r0, r3, #4
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <WriteSingleRegister+0xa0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	8aba      	ldrh	r2, [r7, #20]
 8003f58:	0052      	lsls	r2, r2, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7ff ff8e 	bl	8003e80 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 8003f64:	2208      	movs	r2, #8
 8003f66:	68f9      	ldr	r1, [r7, #12]
 8003f68:	68b8      	ldr	r0, [r7, #8]
 8003f6a:	f018 fe93 	bl	801cc94 <memcpy>
    	return 8;
 8003f6e:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200006f4 	.word	0x200006f4
 8003f7c:	200006ec 	.word	0x200006ec

08003f80 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8003f8e:	4b39      	ldr	r3, [pc, #228]	; (8004074 <WrieMultiplyRegisters+0xf4>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <WrieMultiplyRegisters+0x20>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e000      	b.n	8003fa2 <WrieMultiplyRegisters+0x22>
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff ff40 	bl	8003e2a <GetWordFromBytes>
 8003faa:	4603      	mov	r3, r0
 8003fac:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <WrieMultiplyRegisters+0x38>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	e000      	b.n	8003fba <WrieMultiplyRegisters+0x3a>
 8003fb8:	230a      	movs	r3, #10
 8003fba:	4619      	mov	r1, r3
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff ff34 	bl	8003e2a <GetWordFromBytes>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8003fc6:	8aba      	ldrh	r2, [r7, #20]
 8003fc8:	8a7b      	ldrh	r3, [r7, #18]
 8003fca:	4413      	add	r3, r2
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	8afb      	ldrh	r3, [r7, #22]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	dd07      	ble.n	8003fe4 <WrieMultiplyRegisters+0x64>
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff fd40 	bl	8003a60 <SetInvalidCommand>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	e042      	b.n	800406a <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d11d      	bne.n	8004026 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 8003fea:	220c      	movs	r2, #12
 8003fec:	68f9      	ldr	r1, [r7, #12]
 8003fee:	68b8      	ldr	r0, [r7, #8]
 8003ff0:	f018 fe50 	bl	801cc94 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8003ff4:	8a7b      	ldrh	r3, [r7, #18]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	3304      	adds	r3, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7ff ff2b 	bl	8003e60 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f103 000d 	add.w	r0, r3, #13
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <WrieMultiplyRegisters+0xf8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	8aba      	ldrh	r2, [r7, #20]
 8004016:	0052      	lsls	r2, r2, #1
 8004018:	4413      	add	r3, r2
 800401a:	8a7a      	ldrh	r2, [r7, #18]
 800401c:	4619      	mov	r1, r3
 800401e:	f7ff ff2f 	bl	8003e80 <InsertWordsToMemory>
        return 12;
 8004022:	230c      	movs	r3, #12
 8004024:	e021      	b.n	800406a <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 8004026:	2206      	movs	r2, #6
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f018 fe32 	bl	801cc94 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004030:	2300      	movs	r3, #0
 8004032:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 8004034:	f107 0310 	add.w	r3, r7, #16
 8004038:	2206      	movs	r2, #6
 800403a:	4619      	mov	r1, r3
 800403c:	68b8      	ldr	r0, [r7, #8]
 800403e:	f7ff fd6f 	bl	8003b20 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	3306      	adds	r3, #6
 8004046:	7c3a      	ldrb	r2, [r7, #16]
 8004048:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3307      	adds	r3, #7
 800404e:	7c7a      	ldrb	r2, [r7, #17]
 8004050:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1dd8      	adds	r0, r3, #7
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <WrieMultiplyRegisters+0xf8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	8aba      	ldrh	r2, [r7, #20]
 800405c:	0052      	lsls	r2, r2, #1
 800405e:	4413      	add	r3, r2
 8004060:	8a7a      	ldrh	r2, [r7, #18]
 8004062:	4619      	mov	r1, r3
 8004064:	f7ff ff0c 	bl	8003e80 <InsertWordsToMemory>
		return 8;
 8004068:	2308      	movs	r3, #8
    }

    return 0;
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200006f4 	.word	0x200006f4
 8004078:	200006ec 	.word	0x200006ec

0800407c <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <WriteToHoldings+0x54>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d016      	beq.n	80040c6 <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <WriteToHoldings+0x54>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80040a0:	4618      	mov	r0, r3
 80040a2:	f008 faef 	bl	800c684 <osSemaphoreWait>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 80040ac:	79fa      	ldrb	r2, [r7, #7]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	4798      	blx	r3
 80040b6:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 80040b8:	f000 fc6e 	bl	8004998 <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <WriteToHoldings+0x54>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f008 fb2d 	bl	800c720 <osSemaphoreRelease>
		}
	}
	return result;
 80040c6:	697b      	ldr	r3, [r7, #20]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200071ac 	.word	0x200071ac

080040d4 <probotbor_process>:
static void StopCycles();
static void Indication();
static void GetPositiveFronts();

void probotbor_process()
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	SetTimers();
 80040d8:	f000 f918 	bl	800430c <SetTimers>
	if(!initialized)
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <probotbor_process+0x58>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d108      	bne.n	80040f6 <probotbor_process+0x22>
	{
		if(!Init_timers())return;
 80040e4:	f000 f8d6 	bl	8004294 <Init_timers>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01c      	beq.n	8004128 <probotbor_process+0x54>
		initialized = 1;
 80040ee:	4b0f      	ldr	r3, [pc, #60]	; (800412c <probotbor_process+0x58>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
		return;
 80040f4:	e019      	b.n	800412a <probotbor_process+0x56>
	}
	GetPositiveFronts();
 80040f6:	f000 fb6f 	bl	80047d8 <GetPositiveFronts>
	GetErrors();
 80040fa:	f000 f81f 	bl	800413c <GetErrors>
	OnCommandCycle();
 80040fe:	f000 fa85 	bl	800460c <OnCommandCycle>
	Moving();
 8004102:	f000 f96f 	bl	80043e4 <Moving>
	if(automatTON.OUT && d_outputs.prob_ready)
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <probotbor_process+0x5c>)
 8004108:	7a5b      	ldrb	r3, [r3, #9]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <probotbor_process+0x4e>
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <probotbor_process+0x60>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <probotbor_process+0x4e>
	{
		startOtborCommand = 1;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <probotbor_process+0x64>)
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
	}
	Indication();
 8004122:	f000 fb1b 	bl	800475c <Indication>
 8004126:	e000      	b.n	800412a <probotbor_process+0x56>
		if(!Init_timers())return;
 8004128:	bf00      	nop

}
 800412a:	bd80      	pop	{r7, pc}
 800412c:	2000721c 	.word	0x2000721c
 8004130:	200071f8 	.word	0x200071f8
 8004134:	20006de8 	.word	0x20006de8
 8004138:	20007218 	.word	0x20007218

0800413c <GetErrors>:

static void GetErrors()
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
	// Inputs
	meas_data.errors.nakopitel_door_err = !d_inputs.sq_kanistra_door;
 8004140:	4b4d      	ldr	r3, [pc, #308]	; (8004278 <GetErrors+0x13c>)
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	4a49      	ldr	r2, [pc, #292]	; (800427c <GetErrors+0x140>)
 8004156:	7e13      	ldrb	r3, [r2, #24]
 8004158:	f361 0341 	bfi	r3, r1, #1, #1
 800415c:	7613      	strb	r3, [r2, #24]
	meas_data.errors.nakopitel_kanistra_err = !d_inputs.sq_kanistra;
 800415e:	4b46      	ldr	r3, [pc, #280]	; (8004278 <GetErrors+0x13c>)
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2d9      	uxtb	r1, r3
 8004172:	4a42      	ldr	r2, [pc, #264]	; (800427c <GetErrors+0x140>)
 8004174:	7e13      	ldrb	r3, [r2, #24]
 8004176:	f361 0300 	bfi	r3, r1, #0, #1
 800417a:	7613      	strb	r3, [r2, #24]
	meas_data.errors.uz_err = !d_inputs.uz_prob_fail;
 800417c:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <GetErrors+0x13c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2d9      	uxtb	r1, r3
 8004190:	4a3a      	ldr	r2, [pc, #232]	; (800427c <GetErrors+0x140>)
 8004192:	7e13      	ldrb	r3, [r2, #24]
 8004194:	f361 0382 	bfi	r3, r1, #2, #1
 8004198:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sb_abort_err = d_inputs.sb_stop;
 800419a:	4b37      	ldr	r3, [pc, #220]	; (8004278 <GetErrors+0x13c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80041a2:	b2d9      	uxtb	r1, r3
 80041a4:	4a35      	ldr	r2, [pc, #212]	; (800427c <GetErrors+0x140>)
 80041a6:	7e13      	ldrb	r3, [r2, #24]
 80041a8:	f361 03c3 	bfi	r3, r1, #3, #1
 80041ac:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sq_left_err = d_inputs.sq_kovsh_prob_left_1;
 80041ae:	4b32      	ldr	r3, [pc, #200]	; (8004278 <GetErrors+0x13c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80041b6:	b2d9      	uxtb	r1, r3
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <GetErrors+0x140>)
 80041ba:	7e13      	ldrb	r3, [r2, #24]
 80041bc:	f361 1304 	bfi	r3, r1, #4, #1
 80041c0:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sq_right_err = d_inputs.sq_kovsh_prob_right_1;
 80041c2:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <GetErrors+0x13c>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <GetErrors+0x140>)
 80041ce:	7e13      	ldrb	r3, [r2, #24]
 80041d0:	f361 1345 	bfi	r3, r1, #5, #1
 80041d4:	7613      	strb	r3, [r2, #24]

	//Timeouts
	if(sqHomeTON.OUT){
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <GetErrors+0x144>)
 80041d8:	7a5b      	ldrb	r3, [r3, #9]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <GetErrors+0xac>
		meas_data.errors.timeout_moving_left_err = 1;
 80041de:	4a27      	ldr	r2, [pc, #156]	; (800427c <GetErrors+0x140>)
 80041e0:	7e13      	ldrb	r3, [r2, #24]
 80041e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e6:	7613      	strb	r3, [r2, #24]
	}
	if(sqWorkTON.OUT){
 80041e8:	4b26      	ldr	r3, [pc, #152]	; (8004284 <GetErrors+0x148>)
 80041ea:	7a5b      	ldrb	r3, [r3, #9]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <GetErrors+0xbe>
		meas_data.errors.timeout_moving_right_err = 1;
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <GetErrors+0x140>)
 80041f2:	7e13      	ldrb	r3, [r2, #24]
 80041f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f8:	7613      	strb	r3, [r2, #24]
	}
	if(rtSbMakeProba|| rtSbMakeVozvrat)
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <GetErrors+0x14c>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <GetErrors+0xce>
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <GetErrors+0x150>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <GetErrors+0xe2>
	{
		meas_data.errors.timeout_moving_left_err = 0;
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <GetErrors+0x140>)
 800420c:	7e13      	ldrb	r3, [r2, #24]
 800420e:	f36f 13c7 	bfc	r3, #7, #1
 8004212:	7613      	strb	r3, [r2, #24]
		meas_data.errors.timeout_moving_right_err = 0;
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <GetErrors+0x140>)
 8004216:	7e13      	ldrb	r3, [r2, #24]
 8004218:	f36f 1386 	bfc	r3, #6, #1
 800421c:	7613      	strb	r3, [r2, #24]
	}
	// Need Return
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 800421e:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <GetErrors+0x154>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d116      	bne.n	800425a <GetErrors+0x11e>
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <GetErrors+0x154>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10f      	bne.n	800425a <GetErrors+0x11e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <GetErrors+0x13c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <GetErrors+0x11e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <GetErrors+0x13c>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <GetErrors+0x11e>
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <GetErrors+0x120>
 800425a:	2300      	movs	r3, #0
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	b2d9      	uxtb	r1, r3
 8004262:	4a06      	ldr	r2, [pc, #24]	; (800427c <GetErrors+0x140>)
 8004264:	7e53      	ldrb	r3, [r2, #25]
 8004266:	f361 0300 	bfi	r3, r1, #0, #1
 800426a:	7653      	strb	r3, [r2, #25]

}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20006dec 	.word	0x20006dec
 800427c:	200072cc 	.word	0x200072cc
 8004280:	20007220 	.word	0x20007220
 8004284:	20007208 	.word	0x20007208
 8004288:	20007217 	.word	0x20007217
 800428c:	20007216 	.word	0x20007216
 8004290:	20006de8 	.word	0x20006de8

08004294 <Init_timers>:

static uint8_t Init_timers()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	if(Timer_Init(&(sqHomeTON))==TIMER_FAIL)return 0;
 8004298:	4818      	ldr	r0, [pc, #96]	; (80042fc <Init_timers+0x68>)
 800429a:	f000 fffd 	bl	8005298 <Timer_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <Init_timers+0x14>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e027      	b.n	80042f8 <Init_timers+0x64>
	if(Timer_Init(&(sqWorkTON))==TIMER_FAIL)return 0;
 80042a8:	4815      	ldr	r0, [pc, #84]	; (8004300 <Init_timers+0x6c>)
 80042aa:	f000 fff5 	bl	8005298 <Timer_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <Init_timers+0x24>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e01f      	b.n	80042f8 <Init_timers+0x64>
	if(Timer_Init(&(automatTON))==TIMER_FAIL)return 0;
 80042b8:	4812      	ldr	r0, [pc, #72]	; (8004304 <Init_timers+0x70>)
 80042ba:	f000 ffed 	bl	8005298 <Timer_Init>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <Init_timers+0x34>
 80042c4:	2300      	movs	r3, #0
 80042c6:	e017      	b.n	80042f8 <Init_timers+0x64>
	if(settings.retain.prob_toHomeTime==0)settings.retain.prob_toHomeTime = 10;
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <Init_timers+0x74>)
 80042ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <Init_timers+0x42>
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <Init_timers+0x74>)
 80042d2:	220a      	movs	r2, #10
 80042d4:	859a      	strh	r2, [r3, #44]	; 0x2c
	if(settings.retain.prob_toWorkTime==0)settings.retain.prob_toWorkTime = 10;
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <Init_timers+0x74>)
 80042d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <Init_timers+0x50>
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <Init_timers+0x74>)
 80042e0:	220a      	movs	r2, #10
 80042e2:	85da      	strh	r2, [r3, #46]	; 0x2e
	if(settings.retain.automat_timer==0)settings.retain.automat_timer = 60;
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <Init_timers+0x74>)
 80042e6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <Init_timers+0x5e>
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <Init_timers+0x74>)
 80042ee:	223c      	movs	r2, #60	; 0x3c
 80042f0:	861a      	strh	r2, [r3, #48]	; 0x30
	SetTimers();
 80042f2:	f000 f80b 	bl	800430c <SetTimers>
	return 1;
 80042f6:	2301      	movs	r3, #1
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20007220 	.word	0x20007220
 8004300:	20007208 	.word	0x20007208
 8004304:	200071f8 	.word	0x200071f8
 8004308:	20007230 	.word	0x20007230

0800430c <SetTimers>:

static void SetTimers()
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
	// Тайм-аут движения влево
	sqHomeTON.IN = !d_inputs.sq_kovsh_prob_left_2 && d_outputs.uz_prob_rev;
 8004310:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <SetTimers+0xbc>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <SetTimers+0x24>
 800431e:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <SetTimers+0xc0>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <SetTimers+0x24>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <SetTimers+0x26>
 8004330:	2300      	movs	r3, #0
 8004332:	b2da      	uxtb	r2, r3
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <SetTimers+0xc4>)
 8004336:	721a      	strb	r2, [r3, #8]
	sqHomeTON.SV = settings.retain.prob_toHomeTime * 1000;
 8004338:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <SetTimers+0xc8>)
 800433a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800433c:	461a      	mov	r2, r3
 800433e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004342:	fb03 f302 	mul.w	r3, r3, r2
 8004346:	461a      	mov	r2, r3
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <SetTimers+0xc4>)
 800434a:	601a      	str	r2, [r3, #0]

	// Тайм-аут движения вправо
	sqWorkTON.IN = !d_inputs.sq_kovsh_prob_right_2 && d_outputs.uz_prob_forv;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <SetTimers+0xbc>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <SetTimers+0x60>
 800435a:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <SetTimers+0xc0>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <SetTimers+0x60>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <SetTimers+0x62>
 800436c:	2300      	movs	r3, #0
 800436e:	b2da      	uxtb	r2, r3
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <SetTimers+0xcc>)
 8004372:	721a      	strb	r2, [r3, #8]
	sqWorkTON.SV = settings.retain.prob_toWorkTime * 1000;
 8004374:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <SetTimers+0xc8>)
 8004376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800437e:	fb03 f302 	mul.w	r3, r3, r2
 8004382:	461a      	mov	r2, r3
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <SetTimers+0xcc>)
 8004386:	601a      	str	r2, [r3, #0]

	// Таймер автоматической работы
	automatTON.IN = d_inputs.sb_auto_local && !cycle_probotbor;
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <SetTimers+0xbc>)
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <SetTimers+0x96>
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <SetTimers+0xd0>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <SetTimers+0x96>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <SetTimers+0x98>
 80043a2:	2300      	movs	r3, #0
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <SetTimers+0xd4>)
 80043a8:	721a      	strb	r2, [r3, #8]
	automatTON.SV = settings.retain.automat_timer * 1000;
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <SetTimers+0xc8>)
 80043ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80043ae:	461a      	mov	r2, r3
 80043b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b4:	fb03 f302 	mul.w	r3, r3, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <SetTimers+0xd4>)
 80043bc:	601a      	str	r2, [r3, #0]

	// Осталось до следующей пробы
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20006dec 	.word	0x20006dec
 80043cc:	20006de8 	.word	0x20006de8
 80043d0:	20007220 	.word	0x20007220
 80043d4:	20007230 	.word	0x20007230
 80043d8:	20007208 	.word	0x20007208
 80043dc:	2000721a 	.word	0x2000721a
 80043e0:	200071f8 	.word	0x200071f8

080043e4 <Moving>:

static void Moving()
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	if(!CheckCriticalError())
 80043e8:	f000 f8ae 	bl	8004548 <CheckCriticalError>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <Moving+0x14>
	{
		cycle_probotbor = 0;
 80043f2:	4b42      	ldr	r3, [pc, #264]	; (80044fc <Moving+0x118>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
	}
	// Условия остановки движения
	if(cycle_probotbor || cycle_vozvrat)
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <Moving+0x118>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <Moving+0x24>
 8004400:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <Moving+0x11c>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d034      	beq.n	8004472 <Moving+0x8e>
	{
		// остановка по концевикам b
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <Moving+0x120>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <Moving+0x48>
 8004410:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <Moving+0x124>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d120      	bne.n	8004460 <Moving+0x7c>
 800441e:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <Moving+0x124>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d119      	bne.n	8004460 <Moving+0x7c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <Moving+0x120>)
 800442e:	781b      	ldrb	r3, [r3, #0]
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <Moving+0x6c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <Moving+0x124>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <Moving+0x7c>
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <Moving+0x124>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <Moving+0x7c>
				|| rtSq_kovsh_left_1 || rtSq_kovsh_right_1)
 8004450:	4b2e      	ldr	r3, [pc, #184]	; (800450c <Moving+0x128>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <Moving+0x7c>
 8004458:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <Moving+0x12c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <Moving+0x80>
		{
			StopCycles();
 8004460:	f000 f8c2 	bl	80045e8 <StopCycles>
		}
		// остановка по критической ошибке
		if(!CheckCriticalError()){
 8004464:	f000 f870 	bl	8004548 <CheckCriticalError>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <Moving+0x8e>
			StopCycles();
 800446e:	f000 f8bb 	bl	80045e8 <StopCycles>
		}
	}


	// Управление двигателем
	if(cycle_probotbor || cycle_vozvrat)
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <Moving+0x118>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <Moving+0x9e>
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <Moving+0x11c>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d023      	beq.n	80044ca <Moving+0xe6>
	{
		d_outputs.prob_ready=0;
 8004482:	4a24      	ldr	r2, [pc, #144]	; (8004514 <Moving+0x130>)
 8004484:	7813      	ldrb	r3, [r2, #0]
 8004486:	f36f 0382 	bfc	r3, #2, #1
 800448a:	7013      	strb	r3, [r2, #0]
		if(targetSq)
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <Moving+0x120>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <Moving+0xc6>
		{
			d_outputs.uz_prob_forv = 1;
 8004494:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <Moving+0x130>)
 8004496:	7813      	ldrb	r3, [r2, #0]
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 0;
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <Moving+0x130>)
 80044a0:	7813      	ldrb	r3, [r2, #0]
 80044a2:	f36f 0341 	bfc	r3, #1, #1
 80044a6:	7013      	strb	r3, [r2, #0]
 80044a8:	e009      	b.n	80044be <Moving+0xda>
		}
		else
		{
			d_outputs.uz_prob_forv = 0;
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <Moving+0x130>)
 80044ac:	7813      	ldrb	r3, [r2, #0]
 80044ae:	f36f 0300 	bfc	r3, #0, #1
 80044b2:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 1;
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <Moving+0x130>)
 80044b6:	7813      	ldrb	r3, [r2, #0]
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	7013      	strb	r3, [r2, #0]
		}
		d_outputs.prob_ready = 0;
 80044be:	4a15      	ldr	r2, [pc, #84]	; (8004514 <Moving+0x130>)
 80044c0:	7813      	ldrb	r3, [r2, #0]
 80044c2:	f36f 0382 	bfc	r3, #2, #1
 80044c6:	7013      	strb	r3, [r2, #0]
 80044c8:	e015      	b.n	80044f6 <Moving+0x112>
	}
	else
	{
		d_outputs.uz_prob_forv =0 ;
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <Moving+0x130>)
 80044cc:	7813      	ldrb	r3, [r2, #0]
 80044ce:	f36f 0300 	bfc	r3, #0, #1
 80044d2:	7013      	strb	r3, [r2, #0]
		d_outputs.uz_prob_rev = 0 ;
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <Moving+0x130>)
 80044d6:	7813      	ldrb	r3, [r2, #0]
 80044d8:	f36f 0341 	bfc	r3, #1, #1
 80044dc:	7013      	strb	r3, [r2, #0]
		d_outputs.prob_ready = CheckCommonError();
 80044de:	f000 f81b 	bl	8004518 <CheckCommonError>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	b2d9      	uxtb	r1, r3
 80044ea:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <Moving+0x130>)
 80044ec:	7813      	ldrb	r3, [r2, #0]
 80044ee:	f361 0382 	bfi	r3, r1, #2, #1
 80044f2:	7013      	strb	r3, [r2, #0]
	}
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2000721a 	.word	0x2000721a
 8004500:	2000721b 	.word	0x2000721b
 8004504:	20007214 	.word	0x20007214
 8004508:	20006dec 	.word	0x20006dec
 800450c:	200071f5 	.word	0x200071f5
 8004510:	20007215 	.word	0x20007215
 8004514:	20006de8 	.word	0x20006de8

08004518 <CheckCommonError>:

static uint8_t CheckCommonError()
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
	uint16_t *errPointer = (uint16_t*)&(meas_data.errors);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <CheckCommonError+0x2c>)
 8004520:	607b      	str	r3, [r7, #4]
	uint16_t result = *errPointer ? 0 : 1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	807b      	strh	r3, [r7, #2]
	return result;
 8004532:	887b      	ldrh	r3, [r7, #2]
 8004534:	b2db      	uxtb	r3, r3

}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	200072e4 	.word	0x200072e4

08004548 <CheckCriticalError>:

static uint8_t CheckCriticalError()
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
	// Ошибки, при которых нужно срочно остановить ковш
	uint8_t error =  meas_data.errors.sb_abort_err ||
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <CheckCriticalError+0x98>)
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
			(meas_data.errors.timeout_moving_left_err)||
 8004558:	2b00      	cmp	r3, #0
 800455a:	d130      	bne.n	80045be <CheckCriticalError+0x76>
	uint8_t error =  meas_data.errors.sb_abort_err ||
 800455c:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <CheckCriticalError+0x98>)
 800455e:	7e1b      	ldrb	r3, [r3, #24]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d129      	bne.n	80045be <CheckCriticalError+0x76>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <CheckCriticalError+0x98>)
 800456c:	7e1b      	ldrb	r3, [r3, #24]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <CheckCriticalError+0x3e>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <CheckCriticalError+0x9c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11b      	bne.n	80045be <CheckCriticalError+0x76>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <CheckCriticalError+0x98>)
 8004588:	7e1b      	ldrb	r3, [r3, #24]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	b2db      	uxtb	r3, r3
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <CheckCriticalError+0x5a>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <CheckCriticalError+0x9c>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <CheckCriticalError+0x76>
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <CheckCriticalError+0x98>)
 80045a4:	7e1b      	ldrb	r3, [r3, #24]
 80045a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <CheckCriticalError+0x76>
			(meas_data.errors.timeout_moving_left_err)||
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <CheckCriticalError+0x98>)
 80045b2:	7e1b      	ldrb	r3, [r3, #24]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <CheckCriticalError+0x7a>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <CheckCriticalError+0x7c>
 80045c2:	2300      	movs	r3, #0
	uint8_t error =  meas_data.errors.sb_abort_err ||
 80045c4:	71fb      	strb	r3, [r7, #7]
			(meas_data.errors.timeout_moving_right_err);
	return !error;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	200072cc 	.word	0x200072cc
 80045e4:	20006de8 	.word	0x20006de8

080045e8 <StopCycles>:

static void StopCycles()
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
	cycle_probotbor = 0;
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <StopCycles+0x1c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
	cycle_vozvrat = 0;
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <StopCycles+0x20>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	2000721a 	.word	0x2000721a
 8004608:	2000721b 	.word	0x2000721b

0800460c <OnCommandCycle>:

static void OnCommandCycle()
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
	// действия по нажатию кнопки
	if(d_inputs.sb_make_proba ||
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <OnCommandCycle+0x130>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <OnCommandCycle+0x1a>
			settings.non_retain.start_otbor)
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <OnCommandCycle+0x134>)
 8004620:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
	if(d_inputs.sb_make_proba ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <OnCommandCycle+0x26>
	{
		settings.non_retain.start_otbor = 0;
 8004626:	4b46      	ldr	r3, [pc, #280]	; (8004740 <OnCommandCycle+0x134>)
 8004628:	2200      	movs	r2, #0
 800462a:	869a      	strh	r2, [r3, #52]	; 0x34
		startOtborCommand = 1;
 800462c:	4b45      	ldr	r3, [pc, #276]	; (8004744 <OnCommandCycle+0x138>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
	}

	if(meas_data.errors.need_return_err &&
 8004632:	4b45      	ldr	r3, [pc, #276]	; (8004748 <OnCommandCycle+0x13c>)
 8004634:	7e5b      	ldrb	r3, [r3, #25]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d040      	beq.n	80046c2 <OnCommandCycle+0xb6>
			CheckCriticalError() &&
 8004640:	f7ff ff82 	bl	8004548 <CheckCriticalError>
 8004644:	4603      	mov	r3, r0
	if(meas_data.errors.need_return_err &&
 8004646:	2b00      	cmp	r3, #0
 8004648:	d03b      	beq.n	80046c2 <OnCommandCycle+0xb6>
			!cycle_vozvrat &&
 800464a:	4b40      	ldr	r3, [pc, #256]	; (800474c <OnCommandCycle+0x140>)
 800464c:	781b      	ldrb	r3, [r3, #0]
			CheckCriticalError() &&
 800464e:	2b00      	cmp	r3, #0
 8004650:	d137      	bne.n	80046c2 <OnCommandCycle+0xb6>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8004652:	4b3a      	ldr	r3, [pc, #232]	; (800473c <OnCommandCycle+0x130>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800465a:	b2db      	uxtb	r3, r3
			!cycle_vozvrat &&
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <OnCommandCycle+0x5c>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8004660:	4b37      	ldr	r3, [pc, #220]	; (8004740 <OnCommandCycle+0x134>)
 8004662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02c      	beq.n	80046c2 <OnCommandCycle+0xb6>
	{
		cycle_probotbor = 0;
 8004668:	4b39      	ldr	r3, [pc, #228]	; (8004750 <OnCommandCycle+0x144>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
		cycle_vozvrat = 1;
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <OnCommandCycle+0x140>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
		if(d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2 ){
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <OnCommandCycle+0x130>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <OnCommandCycle+0x84>
 8004682:	4b2e      	ldr	r3, [pc, #184]	; (800473c <OnCommandCycle+0x130>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <OnCommandCycle+0x8c>
			targetSq = 0;
 8004690:	4b30      	ldr	r3, [pc, #192]	; (8004754 <OnCommandCycle+0x148>)
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e014      	b.n	80046c2 <OnCommandCycle+0xb6>
		}
		else if(d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2){
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <OnCommandCycle+0x130>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <OnCommandCycle+0xa8>
 80046a6:	4b25      	ldr	r3, [pc, #148]	; (800473c <OnCommandCycle+0x130>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <OnCommandCycle+0xb0>
			targetSq = 1;
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <OnCommandCycle+0x148>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e002      	b.n	80046c2 <OnCommandCycle+0xb6>
		}
		else{
			targetSq = 0;
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <OnCommandCycle+0x148>)
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
		};
	}
	settings.non_retain.start_vozvrat = 0;
 80046c2:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <OnCommandCycle+0x134>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	86da      	strh	r2, [r3, #54]	; 0x36

	if(startOtborCommand)
 80046c8:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <OnCommandCycle+0x138>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d032      	beq.n	8004736 <OnCommandCycle+0x12a>
	{
		startOtborCommand = 0;
 80046d0:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <OnCommandCycle+0x138>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
		if(d_outputs.prob_ready)
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <OnCommandCycle+0x14c>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d028      	beq.n	8004736 <OnCommandCycle+0x12a>
		{
			cycle_probotbor = 1;
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <OnCommandCycle+0x144>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
			cycle_vozvrat = 0;
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <OnCommandCycle+0x140>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]

			if(d_inputs.sq_kovsh_prob_left_2 || d_inputs.sq_kovsh_prob_left_1)
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <OnCommandCycle+0x130>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <OnCommandCycle+0x100>
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <OnCommandCycle+0x130>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <OnCommandCycle+0x108>
			{
				targetSq = 1;
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <OnCommandCycle+0x148>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
			{
				targetSq = 0;
			}
		}
	}
}
 8004712:	e010      	b.n	8004736 <OnCommandCycle+0x12a>
			else if(d_inputs.sq_kovsh_prob_right_2 || d_inputs.sq_kovsh_prob_right_1)
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <OnCommandCycle+0x130>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <OnCommandCycle+0x124>
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <OnCommandCycle+0x130>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <OnCommandCycle+0x12a>
				targetSq = 0;
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <OnCommandCycle+0x148>)
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20006dec 	.word	0x20006dec
 8004740:	20007230 	.word	0x20007230
 8004744:	20007218 	.word	0x20007218
 8004748:	200072cc 	.word	0x200072cc
 800474c:	2000721b 	.word	0x2000721b
 8004750:	2000721a 	.word	0x2000721a
 8004754:	20007214 	.word	0x20007214
 8004758:	20006de8 	.word	0x20006de8

0800475c <Indication>:

static void Indication()
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
	meas_data.probotbor_ready = d_outputs.prob_ready;
 8004760:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <Indication+0x5c>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004768:	b2db      	uxtb	r3, r3
 800476a:	b29a      	uxth	r2, r3
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <Indication+0x60>)
 800476e:	819a      	strh	r2, [r3, #12]
	meas_data.probotbor_busy = cycle_probotbor;
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <Indication+0x64>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b29a      	uxth	r2, r3
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <Indication+0x60>)
 8004778:	81da      	strh	r2, [r3, #14]
	meas_data.vozvrat_probotbor_busy = cycle_vozvrat;
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <Indication+0x68>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <Indication+0x60>)
 8004782:	821a      	strh	r2, [r3, #16]
	meas_data.automat_mode = d_inputs.sb_auto_local;
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <Indication+0x6c>)
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	b29a      	uxth	r2, r3
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <Indication+0x60>)
 8004792:	825a      	strh	r2, [r3, #18]
	meas_data.toNextOtborTime = settings.retain.automat_timer - (uint16_t)(automatTON.ET/1000);
 8004794:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <Indication+0x70>)
 8004796:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <Indication+0x74>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	490d      	ldr	r1, [pc, #52]	; (80047d4 <Indication+0x78>)
 800479e:	fba1 1303 	umull	r1, r3, r1, r3
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <Indication+0x60>)
 80047ac:	829a      	strh	r2, [r3, #20]
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20006de8 	.word	0x20006de8
 80047bc:	200072cc 	.word	0x200072cc
 80047c0:	2000721a 	.word	0x2000721a
 80047c4:	2000721b 	.word	0x2000721b
 80047c8:	20006dec 	.word	0x20006dec
 80047cc:	20007230 	.word	0x20007230
 80047d0:	200071f8 	.word	0x200071f8
 80047d4:	10624dd3 	.word	0x10624dd3

080047d8 <GetPositiveFronts>:

static void GetPositiveFronts()
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1 && !lastSq_kovsh_left_1;
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <GetPositiveFronts+0x10c>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <GetPositiveFronts+0x1e>
 80047ea:	4b3f      	ldr	r3, [pc, #252]	; (80048e8 <GetPositiveFronts+0x110>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <GetPositiveFronts+0x1e>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <GetPositiveFronts+0x20>
 80047f6:	2300      	movs	r3, #0
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <GetPositiveFronts+0x114>)
 80047fc:	701a      	strb	r2, [r3, #0]
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_right_1 && !lastSq_kovsh_right_1;
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <GetPositiveFronts+0x10c>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <GetPositiveFronts+0x40>
 800480c:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <GetPositiveFronts+0x118>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <GetPositiveFronts+0x40>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <GetPositiveFronts+0x42>
 8004818:	2300      	movs	r3, #0
 800481a:	b2da      	uxtb	r2, r3
 800481c:	4b33      	ldr	r3, [pc, #204]	; (80048ec <GetPositiveFronts+0x114>)
 800481e:	701a      	strb	r2, [r3, #0]
	rtSbMakeProba =  (d_inputs.sb_make_proba || settings.non_retain.start_otbor) && !lastSbMakeProba;
 8004820:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <GetPositiveFronts+0x10c>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <GetPositiveFronts+0x5e>
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <GetPositiveFronts+0x11c>)
 8004830:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <GetPositiveFronts+0x6a>
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <GetPositiveFronts+0x120>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <GetPositiveFronts+0x6a>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <GetPositiveFronts+0x6c>
 8004842:	2300      	movs	r3, #0
 8004844:	b2da      	uxtb	r2, r3
 8004846:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <GetPositiveFronts+0x124>)
 8004848:	701a      	strb	r2, [r3, #0]
	rtSbMakeVozvrat = (d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat) && !lastSbMakeVozvrat;
 800484a:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <GetPositiveFronts+0x10c>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <GetPositiveFronts+0x88>
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <GetPositiveFronts+0x11c>)
 800485a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <GetPositiveFronts+0x94>
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <GetPositiveFronts+0x128>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <GetPositiveFronts+0x94>
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <GetPositiveFronts+0x96>
 800486c:	2300      	movs	r3, #0
 800486e:	b2da      	uxtb	r2, r3
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <GetPositiveFronts+0x12c>)
 8004872:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1;
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <GetPositiveFronts+0x10c>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <GetPositiveFronts+0x110>)
 8004882:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1;
 8004884:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <GetPositiveFronts+0x10c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <GetPositiveFronts+0x118>)
 8004892:	701a      	strb	r2, [r3, #0]
	lastSbMakeProba = d_inputs.sb_make_proba || settings.non_retain.start_otbor;
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <GetPositiveFronts+0x10c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <GetPositiveFronts+0xd2>
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <GetPositiveFronts+0x11c>)
 80048a4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <GetPositiveFronts+0xd6>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <GetPositiveFronts+0xd8>
 80048ae:	2300      	movs	r3, #0
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <GetPositiveFronts+0x120>)
 80048b4:	701a      	strb	r2, [r3, #0]
	lastSbMakeVozvrat = d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <GetPositiveFronts+0x10c>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d103      	bne.n	80048cc <GetPositiveFronts+0xf4>
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <GetPositiveFronts+0x11c>)
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <GetPositiveFronts+0xf8>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <GetPositiveFronts+0xfa>
 80048d0:	2300      	movs	r3, #0
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <GetPositiveFronts+0x128>)
 80048d6:	701a      	strb	r2, [r3, #0]

}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20006dec 	.word	0x20006dec
 80048e8:	20007219 	.word	0x20007219
 80048ec:	200071f5 	.word	0x200071f5
 80048f0:	20007204 	.word	0x20007204
 80048f4:	20007230 	.word	0x20007230
 80048f8:	2000722c 	.word	0x2000722c
 80048fc:	20007217 	.word	0x20007217
 8004900:	200071f4 	.word	0x200071f4
 8004904:	20007216 	.word	0x20007216

08004908 <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
	int result = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 8004912:	f107 0308 	add.w	r3, r7, #8
 8004916:	2202      	movs	r2, #2
 8004918:	4619      	mov	r1, r3
 800491a:	2000      	movs	r0, #0
 800491c:	f7fc fc16 	bl	800114c <framDataRead>
 8004920:	60f8      	str	r0, [r7, #12]
	if (!result)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d130      	bne.n	800498a <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 8004928:	893b      	ldrh	r3, [r7, #8]
 800492a:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 800492e:	4293      	cmp	r3, r2
 8004930:	d128      	bne.n	8004984 <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 8004932:	2234      	movs	r2, #52	; 0x34
 8004934:	4917      	ldr	r1, [pc, #92]	; (8004994 <settingsLoadFRAM+0x8c>)
 8004936:	2002      	movs	r0, #2
 8004938:	f7fc fc08 	bl	800114c <framDataRead>
 800493c:	60f8      	str	r0, [r7, #12]
			if (!result)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11b      	bne.n	800497c <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8004944:	2134      	movs	r1, #52	; 0x34
 8004946:	4813      	ldr	r0, [pc, #76]	; (8004994 <settingsLoadFRAM+0x8c>)
 8004948:	f000 f864 	bl	8004a14 <checksumCalc>
 800494c:	4603      	mov	r3, r0
 800494e:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 8004950:	1dfb      	adds	r3, r7, #7
 8004952:	2201      	movs	r2, #1
 8004954:	4619      	mov	r1, r3
 8004956:	2036      	movs	r0, #54	; 0x36
 8004958:	f7fc fbf8 	bl	800114c <framDataRead>
 800495c:	60f8      	str	r0, [r7, #12]
 				if (!result)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	7afa      	ldrb	r2, [r7, #11]
 8004968:	429a      	cmp	r2, r3
 800496a:	d00e      	beq.n	800498a <settingsLoadFRAM+0x82>
						result = -2;
 800496c:	f06f 0301 	mvn.w	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e00a      	b.n	800498a <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e006      	b.n	800498a <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e002      	b.n	800498a <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 8004984:	f04f 33ff 	mov.w	r3, #4294967295
 8004988:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20007230 	.word	0x20007230

08004998 <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
	int result = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 80049a2:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 80049a6:	813b      	strh	r3, [r7, #8]
 80049a8:	2300      	movs	r3, #0
 80049aa:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 80049ac:	f107 0108 	add.w	r1, r7, #8
 80049b0:	897b      	ldrh	r3, [r7, #10]
 80049b2:	2202      	movs	r2, #2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fc fc07 	bl	80011c8 <framDataWrite>
 80049ba:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 80049bc:	897b      	ldrh	r3, [r7, #10]
 80049be:	3302      	adds	r3, #2
 80049c0:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 80049c2:	f009 fcf7 	bl	800e3b4 <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 80049c6:	897b      	ldrh	r3, [r7, #10]
 80049c8:	2234      	movs	r2, #52	; 0x34
 80049ca:	4911      	ldr	r1, [pc, #68]	; (8004a10 <settingsSaveFRAM+0x78>)
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fc fbfb 	bl	80011c8 <framDataWrite>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	3334      	adds	r3, #52	; 0x34
 80049de:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 80049e0:	2134      	movs	r1, #52	; 0x34
 80049e2:	480b      	ldr	r0, [pc, #44]	; (8004a10 <settingsSaveFRAM+0x78>)
 80049e4:	f000 f816 	bl	8004a14 <checksumCalc>
 80049e8:	4603      	mov	r3, r0
 80049ea:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 80049ec:	f009 fcf0 	bl	800e3d0 <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 80049f0:	1df9      	adds	r1, r7, #7
 80049f2:	897b      	ldrh	r3, [r7, #10]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc fbe6 	bl	80011c8 <framDataWrite>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]

	return result;
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20007230 	.word	0x20007230

08004a14 <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	e009      	b.n	8004a3e <checksumCalc+0x2a>
		xor ^= data[i];
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	4053      	eors	r3, r2
 8004a36:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	dbf1      	blt.n	8004a2a <checksumCalc+0x16>
	return xor;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_MspInit+0x54>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <HAL_MspInit+0x54>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a68:	6453      	str	r3, [r2, #68]	; 0x44
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_MspInit+0x54>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_MspInit+0x54>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_MspInit+0x54>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_MspInit+0x54>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a92:	2200      	movs	r2, #0
 8004a94:	210f      	movs	r1, #15
 8004a96:	f06f 0001 	mvn.w	r0, #1
 8004a9a:	f001 fc6f 	bl	800637c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800

08004aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3c      	ldr	r2, [pc, #240]	; (8004bbc <HAL_ADC_MspInit+0x110>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d171      	bne.n	8004bb2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004adc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ade:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b34      	ldr	r3, [pc, #208]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a33      	ldr	r2, [pc, #204]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b2a      	ldr	r3, [pc, #168]	; (8004bc0 <HAL_ADC_MspInit+0x114>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 8004b22:	230d      	movs	r3, #13
 8004b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b26:	2303      	movs	r3, #3
 8004b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2e:	f107 0314 	add.w	r3, r7, #20
 8004b32:	4619      	mov	r1, r3
 8004b34:	4823      	ldr	r0, [pc, #140]	; (8004bc4 <HAL_ADC_MspInit+0x118>)
 8004b36:	f003 fa5f 	bl	8007ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 8004b3a:	2318      	movs	r3, #24
 8004b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	481e      	ldr	r0, [pc, #120]	; (8004bc8 <HAL_ADC_MspInit+0x11c>)
 8004b4e:	f003 fa53 	bl	8007ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b54:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <HAL_ADC_MspInit+0x124>)
 8004b56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b96:	480d      	ldr	r0, [pc, #52]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004b98:	f001 fc28 	bl	80063ec <HAL_DMA_Init>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004ba2:	f7fe fe43 	bl	800382c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
 8004bac:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <HAL_ADC_MspInit+0x120>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	; 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40012000 	.word	0x40012000
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40020800 	.word	0x40020800
 8004bc8:	40020000 	.word	0x40020000
 8004bcc:	2000714c 	.word	0x2000714c
 8004bd0:	40026410 	.word	0x40026410

08004bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <HAL_SPI_MspInit+0x84>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d12c      	bne.n	8004c50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <HAL_SPI_MspInit+0x88>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <HAL_SPI_MspInit+0x88>)
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c04:	6413      	str	r3, [r2, #64]	; 0x40
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_SPI_MspInit+0x88>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_SPI_MspInit+0x88>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <HAL_SPI_MspInit+0x88>)
 8004c1c:	f043 0304 	orr.w	r3, r3, #4
 8004c20:	6313      	str	r3, [r2, #48]	; 0x30
 8004c22:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_SPI_MspInit+0x88>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 8004c2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c40:	2306      	movs	r3, #6
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4805      	ldr	r0, [pc, #20]	; (8004c60 <HAL_SPI_MspInit+0x8c>)
 8004c4c:	f003 f9d4 	bl	8007ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004c50:	bf00      	nop
 8004c52:	3728      	adds	r7, #40	; 0x28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40003c00 	.word	0x40003c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020800 	.word	0x40020800

08004c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_TIM_Base_MspInit+0x70>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10e      	bne.n	8004c94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <HAL_TIM_Base_MspInit+0x74>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <HAL_TIM_Base_MspInit+0x74>)
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	6413      	str	r3, [r2, #64]	; 0x40
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <HAL_TIM_Base_MspInit+0x74>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c92:	e01a      	b.n	8004cca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <HAL_TIM_Base_MspInit+0x78>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d115      	bne.n	8004cca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_TIM_Base_MspInit+0x74>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <HAL_TIM_Base_MspInit+0x74>)
 8004ca8:	f043 0304 	orr.w	r3, r3, #4
 8004cac:	6413      	str	r3, [r2, #64]	; 0x40
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <HAL_TIM_Base_MspInit+0x74>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2105      	movs	r1, #5
 8004cbe:	201e      	movs	r0, #30
 8004cc0:	f001 fb5c 	bl	800637c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004cc4:	201e      	movs	r0, #30
 8004cc6:	f001 fb75 	bl	80063b4 <HAL_NVIC_EnableIRQ>
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40000800 	.word	0x40000800

08004ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08c      	sub	sp, #48	; 0x30
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce8:	f107 031c 	add.w	r3, r7, #28
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a68      	ldr	r2, [pc, #416]	; (8004ea0 <HAL_UART_MspInit+0x1c0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d163      	bne.n	8004dca <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	4a66      	ldr	r2, [pc, #408]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004d0c:	f043 0310 	orr.w	r3, r3, #16
 8004d10:	6453      	str	r3, [r2, #68]	; 0x44
 8004d12:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	4b60      	ldr	r3, [pc, #384]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4a5f      	ldr	r2, [pc, #380]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	2302      	movs	r3, #2
 8004d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d4c:	2307      	movs	r3, #7
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d50:	f107 031c 	add.w	r3, r7, #28
 8004d54:	4619      	mov	r1, r3
 8004d56:	4854      	ldr	r0, [pc, #336]	; (8004ea8 <HAL_UART_MspInit+0x1c8>)
 8004d58:	f003 f94e 	bl	8007ff8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004d5c:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d5e:	4a54      	ldr	r2, [pc, #336]	; (8004eb0 <HAL_UART_MspInit+0x1d0>)
 8004d60:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004d62:	4b52      	ldr	r3, [pc, #328]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d68:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d6a:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d70:	4b4e      	ldr	r3, [pc, #312]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d76:	4b4d      	ldr	r3, [pc, #308]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d7e:	4b4b      	ldr	r3, [pc, #300]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d84:	4b49      	ldr	r3, [pc, #292]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004d8a:	4b48      	ldr	r3, [pc, #288]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d90:	4b46      	ldr	r3, [pc, #280]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d96:	4b45      	ldr	r3, [pc, #276]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004d9c:	4843      	ldr	r0, [pc, #268]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004d9e:	f001 fb25 	bl	80063ec <HAL_DMA_Init>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004da8:	f7fe fd40 	bl	800382c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3f      	ldr	r2, [pc, #252]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
 8004db2:	4a3e      	ldr	r2, [pc, #248]	; (8004eac <HAL_UART_MspInit+0x1cc>)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004db8:	2200      	movs	r2, #0
 8004dba:	2105      	movs	r1, #5
 8004dbc:	2025      	movs	r0, #37	; 0x25
 8004dbe:	f001 fadd 	bl	800637c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004dc2:	2025      	movs	r0, #37	; 0x25
 8004dc4:	f001 faf6 	bl	80063b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004dc8:	e066      	b.n	8004e98 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a39      	ldr	r2, [pc, #228]	; (8004eb4 <HAL_UART_MspInit+0x1d4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d161      	bne.n	8004e98 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	4a31      	ldr	r2, [pc, #196]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004dde:	f043 0320 	orr.w	r3, r3, #32
 8004de2:	6453      	str	r3, [r2, #68]	; 0x44
 8004de4:	4b2f      	ldr	r3, [pc, #188]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4a2a      	ldr	r2, [pc, #168]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004dfa:	f043 0304 	orr.w	r3, r3, #4
 8004dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004e00:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <HAL_UART_MspInit+0x1c4>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e0c:	23c0      	movs	r3, #192	; 0xc0
 8004e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e10:	2302      	movs	r3, #2
 8004e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e20:	f107 031c 	add.w	r3, r7, #28
 8004e24:	4619      	mov	r1, r3
 8004e26:	4824      	ldr	r0, [pc, #144]	; (8004eb8 <HAL_UART_MspInit+0x1d8>)
 8004e28:	f003 f8e6 	bl	8007ff8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004e2c:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e2e:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <HAL_UART_MspInit+0x1e0>)
 8004e30:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004e32:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e34:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004e38:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e4c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004e5a:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004e6c:	4813      	ldr	r0, [pc, #76]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e6e:	f001 fabd 	bl	80063ec <HAL_DMA_Init>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004e78:	f7fe fcd8 	bl	800382c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
 8004e82:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <HAL_UART_MspInit+0x1dc>)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2105      	movs	r1, #5
 8004e8c:	2047      	movs	r0, #71	; 0x47
 8004e8e:	f001 fa75 	bl	800637c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004e92:	2047      	movs	r0, #71	; 0x47
 8004e94:	f001 fa8e 	bl	80063b4 <HAL_NVIC_EnableIRQ>
}
 8004e98:	bf00      	nop
 8004e9a:	3730      	adds	r7, #48	; 0x30
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40011000 	.word	0x40011000
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	200070a8 	.word	0x200070a8
 8004eb0:	40026440 	.word	0x40026440
 8004eb4:	40011400 	.word	0x40011400
 8004eb8:	40020800 	.word	0x40020800
 8004ebc:	20006f18 	.word	0x20006f18
 8004ec0:	40026428 	.word	0x40026428

08004ec4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <HAL_UART_MspDeInit+0x70>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d113      	bne.n	8004efe <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_UART_MspDeInit+0x74>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <HAL_UART_MspDeInit+0x74>)
 8004edc:	f023 0310 	bic.w	r3, r3, #16
 8004ee0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004ee2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ee6:	4815      	ldr	r0, [pc, #84]	; (8004f3c <HAL_UART_MspDeInit+0x78>)
 8004ee8:	f003 fa22 	bl	8008330 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 fb29 	bl	8006548 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004ef6:	2025      	movs	r0, #37	; 0x25
 8004ef8:	f001 fa6a 	bl	80063d0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8004efc:	e016      	b.n	8004f2c <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART6)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <HAL_UART_MspDeInit+0x7c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d111      	bne.n	8004f2c <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_UART_MspDeInit+0x74>)
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_UART_MspDeInit+0x74>)
 8004f0e:	f023 0320 	bic.w	r3, r3, #32
 8004f12:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8004f14:	21c0      	movs	r1, #192	; 0xc0
 8004f16:	480b      	ldr	r0, [pc, #44]	; (8004f44 <HAL_UART_MspDeInit+0x80>)
 8004f18:	f003 fa0a 	bl	8008330 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 fb11 	bl	8006548 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004f26:	2047      	movs	r0, #71	; 0x47
 8004f28:	f001 fa52 	bl	80063d0 <HAL_NVIC_DisableIRQ>
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	40020000 	.word	0x40020000
 8004f40:	40011400 	.word	0x40011400
 8004f44:	40020800 	.word	0x40020800

08004f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	2019      	movs	r0, #25
 8004f5e:	f001 fa0d 	bl	800637c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f62:	2019      	movs	r0, #25
 8004f64:	f001 fa26 	bl	80063b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <HAL_InitTick+0xa4>)
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <HAL_InitTick+0xa4>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6453      	str	r3, [r2, #68]	; 0x44
 8004f78:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <HAL_InitTick+0xa4>)
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f84:	f107 0210 	add.w	r2, r7, #16
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f003 ffac 	bl	8008eec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004f94:	f003 ff96 	bl	8008ec4 <HAL_RCC_GetPCLK2Freq>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <HAL_InitTick+0xa8>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	0c9b      	lsrs	r3, r3, #18
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_InitTick+0xb0>)
 8004fb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004fba:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004fcc:	4809      	ldr	r0, [pc, #36]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fce:	f004 fd67 	bl	8009aa0 <HAL_TIM_Base_Init>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004fd8:	4806      	ldr	r0, [pc, #24]	; (8004ff4 <HAL_InitTick+0xac>)
 8004fda:	f004 fe19 	bl	8009c10 <HAL_TIM_Base_Start_IT>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	e000      	b.n	8004fe4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	; 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	431bde83 	.word	0x431bde83
 8004ff4:	20007338 	.word	0x20007338
 8004ff8:	40010000 	.word	0x40010000

08004ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005000:	e7fe      	b.n	8005000 <NMI_Handler+0x4>

08005002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005002:	b480      	push	{r7}
 8005004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005006:	e7fe      	b.n	8005006 <HardFault_Handler+0x4>

08005008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800500c:	e7fe      	b.n	800500c <MemManage_Handler+0x4>

0800500e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800500e:	b480      	push	{r7}
 8005010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005012:	e7fe      	b.n	8005012 <BusFault_Handler+0x4>

08005014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005018:	e7fe      	b.n	8005018 <UsageFault_Handler+0x4>

0800501a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800502e:	f004 fe5f 	bl	8009cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20007338 	.word	0x20007338

0800503c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005040:	4803      	ldr	r0, [pc, #12]	; (8005050 <TIM4_IRQHandler+0x14>)
 8005042:	f004 fe55 	bl	8009cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  UpdateTimers();
 8005046:	f000 f965 	bl	8005314 <UpdateTimers>
  /* USER CODE END TIM4_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20006f78 	.word	0x20006f78

08005054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005058:	4802      	ldr	r0, [pc, #8]	; (8005064 <USART1_IRQHandler+0x10>)
 800505a:	f005 fb7f 	bl	800a75c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20007108 	.word	0x20007108

08005068 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800506c:	4802      	ldr	r0, [pc, #8]	; (8005078 <DMA2_Stream0_IRQHandler+0x10>)
 800506e:	f001 fbb3 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	2000714c 	.word	0x2000714c

0800507c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005080:	4802      	ldr	r0, [pc, #8]	; (800508c <DMA2_Stream1_IRQHandler+0x10>)
 8005082:	f001 fba9 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20006f18 	.word	0x20006f18

08005090 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <DMA2_Stream2_IRQHandler+0x10>)
 8005096:	f001 fb9f 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	200070a8 	.word	0x200070a8

080050a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <ETH_IRQHandler+0x10>)
 80050aa:	f002 f9e3 	bl	8007474 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20008fa8 	.word	0x20008fa8

080050b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80050bc:	4802      	ldr	r0, [pc, #8]	; (80050c8 <USART6_IRQHandler+0x10>)
 80050be:	f005 fb4d 	bl	800a75c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200071b0 	.word	0x200071b0

080050cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
	return 1;
 80050d0:	2301      	movs	r3, #1
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <_kill>:

int _kill(int pid, int sig)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <_kill+0x20>)
 80050e8:	2216      	movs	r2, #22
 80050ea:	601a      	str	r2, [r3, #0]
	return -1;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2000df38 	.word	0x2000df38

08005100 <_exit>:

void _exit (int status)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005108:	f04f 31ff 	mov.w	r1, #4294967295
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ffe5 	bl	80050dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8005112:	e7fe      	b.n	8005112 <_exit+0x12>

08005114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e00a      	b.n	800513c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005126:	f3af 8000 	nop.w
 800512a:	4601      	mov	r1, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	60ba      	str	r2, [r7, #8]
 8005132:	b2ca      	uxtb	r2, r1
 8005134:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	3301      	adds	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	dbf0      	blt.n	8005126 <_read+0x12>
	}

return len;
 8005144:	687b      	ldr	r3, [r7, #4]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e009      	b.n	8005174 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	60ba      	str	r2, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	3301      	adds	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	dbf1      	blt.n	8005160 <_write+0x12>
	}
	return len;
 800517c:	687b      	ldr	r3, [r7, #4]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_close>:

int _close(int file)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
	return -1;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ae:	605a      	str	r2, [r3, #4]
	return 0;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <_isatty>:

int _isatty(int file)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
	return 1;
 80051c6:	2301      	movs	r3, #1
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
	return 0;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <_sbrk+0x5c>)
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <_sbrk+0x60>)
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <_sbrk+0x64>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <_sbrk+0x64>)
 800520e:	4a12      	ldr	r2, [pc, #72]	; (8005258 <_sbrk+0x68>)
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <_sbrk+0x64>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d205      	bcs.n	800522c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8005220:	4b0e      	ldr	r3, [pc, #56]	; (800525c <_sbrk+0x6c>)
 8005222:	220c      	movs	r2, #12
 8005224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	e009      	b.n	8005240 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <_sbrk+0x64>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <_sbrk+0x64>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	4a06      	ldr	r2, [pc, #24]	; (8005254 <_sbrk+0x64>)
 800523c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20020000 	.word	0x20020000
 8005250:	00000400 	.word	0x00000400
 8005254:	200006f8 	.word	0x200006f8
 8005258:	2000df40 	.word	0x2000df40
 800525c:	2000df38 	.word	0x2000df38

08005260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <SystemInit+0x20>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	4a05      	ldr	r2, [pc, #20]	; (8005280 <SystemInit+0x20>)
 800526c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <Start_Timers>:

static Timer_Init_State Push_To_List(TON *timer);
static void UpdateTimer(TON *timer);

void Start_Timers(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8005288:	4802      	ldr	r0, [pc, #8]	; (8005294 <Start_Timers+0x10>)
 800528a:	f004 fcc1 	bl	8009c10 <HAL_TIM_Base_Start_IT>

}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20006f78 	.word	0x20006f78

08005298 <Timer_Init>:

Timer_Init_State Timer_Init(TON *timer)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	return Push_To_List(timer);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f805 	bl	80052b0 <Push_To_List>
 80052a6:	4603      	mov	r3, r0

}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <Push_To_List>:

static Timer_Init_State Push_To_List(TON *timer)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	struct list_item *tmp, *top;
	tmp = malloc(sizeof(struct list_item));
 80052b8:	2008      	movs	r0, #8
 80052ba:	f017 fcd5 	bl	801cc68 <malloc>
 80052be:	4603      	mov	r3, r0
 80052c0:	60bb      	str	r3, [r7, #8]
	if(tmp == NULL)return TIMER_FAIL;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <Push_To_List+0x1c>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e01c      	b.n	8005306 <Push_To_List+0x56>
	tmp->next = NULL;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
	tmp->timer = timer;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
	if(timers)
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <Push_To_List+0x60>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00e      	beq.n	80052fe <Push_To_List+0x4e>
	{
		top = timers;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <Push_To_List+0x60>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]
		while(top->next)
 80052e6:	e002      	b.n	80052ee <Push_To_List+0x3e>
		{
			top = top->next;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
		while(top->next)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f8      	bne.n	80052e8 <Push_To_List+0x38>
		}
		top->next = tmp;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	e002      	b.n	8005304 <Push_To_List+0x54>
	}
	else
	{
		timers = tmp;
 80052fe:	4a04      	ldr	r2, [pc, #16]	; (8005310 <Push_To_List+0x60>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6013      	str	r3, [r2, #0]
	}
	return TIMER_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200006fc 	.word	0x200006fc

08005314 <UpdateTimers>:

/*Функция обновления значений всех таймеров*/
void UpdateTimers()
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
	struct list_item *tmp = timers;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <UpdateTimers+0x30>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	607b      	str	r3, [r7, #4]
	while(tmp)
 8005320:	e007      	b.n	8005332 <UpdateTimers+0x1e>
	{
		UpdateTimer(tmp->timer);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f80e 	bl	8005348 <UpdateTimer>
		tmp = tmp->next;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	607b      	str	r3, [r7, #4]
	while(tmp)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f4      	bne.n	8005322 <UpdateTimers+0xe>
	}
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200006fc 	.word	0x200006fc

08005348 <UpdateTimer>:

/*Функция обновления значений одного таймера*/
static void UpdateTimer(TON *timer)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	if(timer->IN)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7a1b      	ldrb	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00e      	beq.n	8005376 <UpdateTimer+0x2e>
	{
		timer->ET = timer->ET < timer->SV ? timer->ET+1 : timer->ET;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d203      	bcs.n	800536c <UpdateTimer+0x24>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	3301      	adds	r3, #1
 800536a:	e001      	b.n	8005370 <UpdateTimer+0x28>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6053      	str	r3, [r2, #4]
 8005374:	e002      	b.n	800537c <UpdateTimer+0x34>
	}
	else
	{
		timer->ET = 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	605a      	str	r2, [r3, #4]
	}
	timer->OUT = timer->ET == timer->SV;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	725a      	strb	r2, [r3, #9]
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <uart_thread>:
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);



void uart_thread(void *argument)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	RsReInit();
 80053a8:	f000 f958 	bl	800565c <RsReInit>
	StartReciveUartAll();
 80053ac:	f000 f82c 	bl	8005408 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <uart_thread+0x64>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	f107 030c 	add.w	r3, r7, #12
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	4618      	mov	r0, r3
 80053be:	f007 fc81 	bl	800ccc4 <osMailGet>
		if(event.status == osEventMail)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d1f3      	bne.n	80053b0 <uart_thread+0x10>
		{
			int result = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 80053d0:	69b8      	ldr	r0, [r7, #24]
 80053d2:	f000 f8c5 	bl	8005560 <RecognizePacket>
 80053d6:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <uart_thread+0x50>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	68d8      	ldr	r0, [r3, #12]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	b292      	uxth	r2, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	f000 f90e 	bl	800560c <Transmit>
			StartReceive(1);
 80053f0:	2001      	movs	r0, #1
 80053f2:	f000 f81d 	bl	8005430 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <uart_thread+0x64>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f007 fcd5 	bl	800cdac <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 8005402:	e7d5      	b.n	80053b0 <uart_thread+0x10>
 8005404:	20006dfc 	.word	0x20006dfc

08005408 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 800540e:	2300      	movs	r3, #0
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	e005      	b.n	8005420 <StartReciveUartAll+0x18>
		StartReceive(i);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f80b 	bl	8005430 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3301      	adds	r3, #1
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	ddf6      	ble.n	8005414 <StartReciveUartAll+0xc>
	}
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <StartReceive>:


static void StartReceive(int index)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	switch (index) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <StartReceive+0x16>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d016      	beq.n	8005472 <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8005444:	e02e      	b.n	80054a4 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 8005446:	4b19      	ldr	r3, [pc, #100]	; (80054ac <StartReceive+0x7c>)
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d124      	bne.n	800549e <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8005454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005458:	4915      	ldr	r1, [pc, #84]	; (80054b0 <StartReceive+0x80>)
 800545a:	4814      	ldr	r0, [pc, #80]	; (80054ac <StartReceive+0x7c>)
 800545c:	f005 f918 	bl	800a690 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <StartReceive+0x84>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <StartReceive+0x84>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0208 	bic.w	r2, r2, #8
 800546e:	601a      	str	r2, [r3, #0]
			break;
 8005470:	e015      	b.n	800549e <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 8005472:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <StartReceive+0x88>)
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d110      	bne.n	80054a2 <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 8005480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005484:	490d      	ldr	r1, [pc, #52]	; (80054bc <StartReceive+0x8c>)
 8005486:	480c      	ldr	r0, [pc, #48]	; (80054b8 <StartReceive+0x88>)
 8005488:	f005 f902 	bl	800a690 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <StartReceive+0x90>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <StartReceive+0x90>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0208 	bic.w	r2, r2, #8
 800549a:	601a      	str	r2, [r3, #0]
			break;
 800549c:	e001      	b.n	80054a2 <StartReceive+0x72>
			break;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <StartReceive+0x74>
			break;
 80054a2:	bf00      	nop
	}
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20007108 	.word	0x20007108
 80054b0:	20007380 	.word	0x20007380
 80054b4:	200070a8 	.word	0x200070a8
 80054b8:	200071b0 	.word	0x200071b0
 80054bc:	20007480 	.word	0x20007480
 80054c0:	20006f18 	.word	0x20006f18

080054c4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <HAL_UARTEx_RxEventCallback+0x84>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d105      	bne.n	80054ee <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <HAL_UARTEx_RxEventCallback+0x88>)
 80054e4:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7ff ffa2 	bl	8005430 <StartReceive>
 80054ec:	e008      	b.n	8005500 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <HAL_UARTEx_RxEventCallback+0x8c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d120      	bne.n	800553a <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 80054f8:	4b16      	ldr	r3, [pc, #88]	; (8005554 <HAL_UARTEx_RxEventCallback+0x90>)
 80054fa:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <HAL_UARTEx_RxEventCallback+0x94>)
 80054fe:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <HAL_UARTEx_RxEventCallback+0x98>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f007 fb88 	bl	800cc1c <osMailAlloc>
 800550c:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d014      	beq.n	800553e <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	887a      	ldrh	r2, [r7, #2]
 8005518:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_UARTEx_RxEventCallback+0x98>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	4618      	mov	r0, r3
 8005534:	f007 fb88 	bl	800cc48 <osMailPut>
 8005538:	e002      	b.n	8005540 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 800553e:	bf00      	nop
}
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40011000 	.word	0x40011000
 800554c:	20007380 	.word	0x20007380
 8005550:	40011400 	.word	0x40011400
 8005554:	20007480 	.word	0x20007480
 8005558:	20007580 	.word	0x20007580
 800555c:	20006dfc 	.word	0x20006dfc

08005560 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	int result = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <RecognizePacket+0x18>
 8005574:	2300      	movs	r3, #0
 8005576:	e03e      	b.n	80055f6 <RecognizePacket+0x96>
	if(request->huart->Instance==USART1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a20      	ldr	r2, [pc, #128]	; (8005600 <RecognizePacket+0xa0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d121      	bne.n	80055c8 <RecognizePacket+0x68>
	{
		float analog = 0;
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	891b      	ldrh	r3, [r3, #8]
 800558e:	2b06      	cmp	r3, #6
 8005590:	d118      	bne.n	80055c4 <RecognizePacket+0x64>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b0a      	cmp	r3, #10
 800559a:	d113      	bne.n	80055c4 <RecognizePacket+0x64>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3305      	adds	r3, #5
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b0d      	cmp	r3, #13
 80055a6:	d10d      	bne.n	80055c4 <RecognizePacket+0x64>
		{
			memcpy(&analog,(request->input_pointer)+1,sizeof(float));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]
			meas_data.analog_input = analog * 10;
 80055b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80055b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <RecognizePacket+0xa4>)
 80055c0:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		return 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e016      	b.n	80055f6 <RecognizePacket+0x96>
	}
	else if (request->huart->Instance==USART6) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <RecognizePacket+0xa8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10f      	bne.n	80055f4 <RecognizePacket+0x94>
		if(request->output_pointer == NULL)return 0;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <RecognizePacket+0x80>
 80055dc:	2300      	movs	r3, #0
 80055de:	e00a      	b.n	80055f6 <RecognizePacket+0x96>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8919      	ldrh	r1, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	2300      	movs	r3, #0
 80055ee:	f7fe f95f 	bl	80038b0 <ModbusParse>
 80055f2:	60f8      	str	r0, [r7, #12]
	}
	return result;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40011000 	.word	0x40011000
 8005604:	200072cc 	.word	0x200072cc
 8005608:	40011400 	.word	0x40011400

0800560c <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <Transmit+0x48>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d112      	bne.n	800564a <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 8005624:	2201      	movs	r2, #1
 8005626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800562a:	480b      	ldr	r0, [pc, #44]	; (8005658 <Transmit+0x4c>)
 800562c:	f002 ff94 	bl	8008558 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f004 ff97 	bl	800a56c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005644:	4804      	ldr	r0, [pc, #16]	; (8005658 <Transmit+0x4c>)
 8005646:	f002 ff87 	bl	8008558 <HAL_GPIO_WritePin>

	}
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40011400 	.word	0x40011400
 8005658:	40020800 	.word	0x40020800

0800565c <RsReInit>:

int RsReInit (void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
	int result = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
	result = HAL_UART_DeInit(&huart1);
 8005666:	4823      	ldr	r0, [pc, #140]	; (80056f4 <RsReInit+0x98>)
 8005668:	f004 ff51 	bl	800a50e <HAL_UART_DeInit>
 800566c:	4603      	mov	r3, r0
 800566e:	607b      	str	r3, [r7, #4]
	if (result == HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d138      	bne.n	80056e8 <RsReInit+0x8c>
	{
		uint32_t parity = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	603b      	str	r3, [r7, #0]
		switch (settings.retain.rs_sett.parity) {
 800567a:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <RsReInit+0x9c>)
 800567c:	8a1b      	ldrh	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <RsReInit+0x2c>
 8005682:	2b01      	cmp	r3, #1
 8005684:	d003      	beq.n	800568e <RsReInit+0x32>
 8005686:	e006      	b.n	8005696 <RsReInit+0x3a>
			case 0:
				parity = UART_PARITY_NONE;
 8005688:	2300      	movs	r3, #0
 800568a:	603b      	str	r3, [r7, #0]
				break;
 800568c:	e007      	b.n	800569e <RsReInit+0x42>
			case 1:
				parity = UART_PARITY_EVEN;
 800568e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005692:	603b      	str	r3, [r7, #0]
				break;
 8005694:	e003      	b.n	800569e <RsReInit+0x42>
			default:
				parity = UART_PARITY_ODD;
 8005696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800569a:	603b      	str	r3, [r7, #0]
				break;
 800569c:	bf00      	nop
		}
		huart6.Instance = USART6;
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <RsReInit+0xa0>)
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <RsReInit+0xa4>)
 80056a2:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = settings.retain.rs_sett.baudrate>0 ? settings.retain.rs_sett.baudrate : 9600;
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <RsReInit+0x9c>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <RsReInit+0x56>
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <RsReInit+0x9c>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	e001      	b.n	80056b6 <RsReInit+0x5a>
 80056b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <RsReInit+0xa0>)
 80056b8:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <RsReInit+0xa0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 80056c0:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <RsReInit+0xa0>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = parity;
 80056c6:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <RsReInit+0xa0>)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6113      	str	r3, [r2, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <RsReInit+0xa0>)
 80056ce:	220c      	movs	r2, #12
 80056d0:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <RsReInit+0xa0>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80056d8:	4b08      	ldr	r3, [pc, #32]	; (80056fc <RsReInit+0xa0>)
 80056da:	2200      	movs	r2, #0
 80056dc:	61da      	str	r2, [r3, #28]
		result = HAL_UART_Init(&huart6);
 80056de:	4807      	ldr	r0, [pc, #28]	; (80056fc <RsReInit+0xa0>)
 80056e0:	f004 fec8 	bl	800a474 <HAL_UART_Init>
 80056e4:	4603      	mov	r3, r0
 80056e6:	607b      	str	r3, [r7, #4]
	}
  return result;
 80056e8:	687b      	ldr	r3, [r7, #4]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20007108 	.word	0x20007108
 80056f8:	20007230 	.word	0x20007230
 80056fc:	200071b0 	.word	0x200071b0
 8005700:	40011400 	.word	0x40011400

08005704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800573c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005708:	480d      	ldr	r0, [pc, #52]	; (8005740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800570a:	490e      	ldr	r1, [pc, #56]	; (8005744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800570c:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800570e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005710:	e002      	b.n	8005718 <LoopCopyDataInit>

08005712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005716:	3304      	adds	r3, #4

08005718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800571a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800571c:	d3f9      	bcc.n	8005712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800571e:	4a0b      	ldr	r2, [pc, #44]	; (800574c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005720:	4c0b      	ldr	r4, [pc, #44]	; (8005750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005724:	e001      	b.n	800572a <LoopFillZerobss>

08005726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005728:	3204      	adds	r2, #4

0800572a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800572a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800572c:	d3fb      	bcc.n	8005726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800572e:	f7ff fd97 	bl	8005260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005732:	f017 fa75 	bl	801cc20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005736:	f7fd fc8b 	bl	8003050 <main>
  bx  lr    
 800573a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800573c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005744:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8005748:	08021bf4 	.word	0x08021bf4
  ldr r2, =_sbss
 800574c:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8005750:	2000df3c 	.word	0x2000df3c

08005754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005754:	e7fe      	b.n	8005754 <ADC_IRQHandler>

08005756 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005764:	b672      	cpsid	i
}
 8005766:	bf00      	nop
 8005768:	f7fe f860 	bl	800382c <Error_Handler>
 800576c:	e7fe      	b.n	800576c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e007      	b.n	8005784 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	2100      	movs	r1, #0
 800577a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d9f4      	bls.n	8005774 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	721a      	strb	r2, [r3, #8]
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80057a6:	b672      	cpsid	i
}
 80057a8:	bf00      	nop
 80057aa:	f7fe f83f 	bl	800382c <Error_Handler>
 80057ae:	e7fe      	b.n	80057ae <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7a1b      	ldrb	r3, [r3, #8]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d904      	bls.n	80057c2 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80057b8:	b672      	cpsid	i
}
 80057ba:	bf00      	nop
 80057bc:	f7fe f836 	bl	800382c <Error_Handler>
 80057c0:	e7fe      	b.n	80057c0 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7a1b      	ldrb	r3, [r3, #8]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	b2d1      	uxtb	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	7211      	strb	r1, [r2, #8]
 80057ce:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057d0:	f3ef 8211 	mrs	r2, BASEPRI
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fa      	str	r2, [r7, #12]
 80057e6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d104      	bne.n	8005810 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005806:	b672      	cpsid	i
}
 8005808:	bf00      	nop
 800580a:	f7fe f80f 	bl	800382c <Error_Handler>
 800580e:	e7fe      	b.n	800580e <stm32_lock_release+0x16>
  lock->nesting_level--;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7a1b      	ldrb	r3, [r3, #8]
 8005814:	3b01      	subs	r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7a1b      	ldrb	r3, [r3, #8]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d904      	bls.n	800582e <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8005824:	b672      	cpsid	i
}
 8005826:	bf00      	nop
 8005828:	f7fe f800 	bl	800382c <Error_Handler>
 800582c:	e7fe      	b.n	800582c <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7a1b      	ldrb	r3, [r3, #8]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005842:	bf00      	nop
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 800585a:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <__retarget_lock_init_recursive+0x48>)
 800585c:	2216      	movs	r2, #22
 800585e:	601a      	str	r2, [r3, #0]
    return;
 8005860:	e015      	b.n	800588e <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005862:	200c      	movs	r0, #12
 8005864:	f017 fa00 	bl	801cc68 <malloc>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff6a 	bl	8005756 <stm32_lock_init>
    return;
 8005882:	e004      	b.n	800588e <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8005884:	b672      	cpsid	i
}
 8005886:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005888:	f7fd ffd0 	bl	800382c <Error_Handler>
 800588c:	e7fe      	b.n	800588c <__retarget_lock_init_recursive+0x40>
}
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	2000df38 	.word	0x2000df38

08005898 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80058a6:	b672      	cpsid	i
}
 80058a8:	bf00      	nop
 80058aa:	f7fd ffbf 	bl	800382c <Error_Handler>
 80058ae:	e7fe      	b.n	80058ae <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ff70 	bl	8005798 <stm32_lock_acquire>
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80058ce:	b672      	cpsid	i
}
 80058d0:	bf00      	nop
 80058d2:	f7fd ffab 	bl	800382c <Error_Handler>
 80058d6:	e7fe      	b.n	80058d6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff ff8c 	bl	80057f8 <stm32_lock_release>
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <HAL_Init+0x40>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0d      	ldr	r2, [pc, #52]	; (8005928 <HAL_Init+0x40>)
 80058f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_Init+0x40>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <HAL_Init+0x40>)
 80058fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005904:	4b08      	ldr	r3, [pc, #32]	; (8005928 <HAL_Init+0x40>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a07      	ldr	r2, [pc, #28]	; (8005928 <HAL_Init+0x40>)
 800590a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005910:	2003      	movs	r0, #3
 8005912:	f000 fd28 	bl	8006366 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005916:	200f      	movs	r0, #15
 8005918:	f7ff fb16 	bl	8004f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800591c:	f7ff f89a 	bl	8004a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023c00 	.word	0x40023c00

0800592c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <HAL_IncTick+0x20>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_IncTick+0x24>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4413      	add	r3, r2
 800593c:	4a04      	ldr	r2, [pc, #16]	; (8005950 <HAL_IncTick+0x24>)
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	200002e4 	.word	0x200002e4
 8005950:	20007680 	.word	0x20007680

08005954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return uwTick;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_GetTick+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20007680 	.word	0x20007680

0800596c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005974:	f7ff ffee 	bl	8005954 <HAL_GetTick>
 8005978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d005      	beq.n	8005992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_Delay+0x44>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005992:	bf00      	nop
 8005994:	f7ff ffde 	bl	8005954 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d8f7      	bhi.n	8005994 <HAL_Delay+0x28>
  {
  }
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200002e4 	.word	0x200002e4

080059b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e033      	b.n	8005a32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff f86a 	bl	8004aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d118      	bne.n	8005a24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80059fa:	f023 0302 	bic.w	r3, r3, #2
 80059fe:	f043 0202 	orr.w	r2, r3, #2
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa5e 	bl	8005ec8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
 8005a22:	e001      	b.n	8005a28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_Start_DMA+0x1e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0e9      	b.n	8005c2e <HAL_ADC_Start_DMA+0x1f2>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d018      	beq.n	8005aa2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a80:	4b6d      	ldr	r3, [pc, #436]	; (8005c38 <HAL_ADC_Start_DMA+0x1fc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6d      	ldr	r2, [pc, #436]	; (8005c3c <HAL_ADC_Start_DMA+0x200>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0c9a      	lsrs	r2, r3, #18
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005a94:	e002      	b.n	8005a9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f9      	bne.n	8005a96 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab0:	d107      	bne.n	8005ac2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	f040 80a1 	bne.w	8005c14 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005afc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	d106      	bne.n	8005b20 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f023 0206 	bic.w	r2, r3, #6
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8005b1e:	e002      	b.n	8005b26 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b2e:	4b44      	ldr	r3, [pc, #272]	; (8005c40 <HAL_ADC_Start_DMA+0x204>)
 8005b30:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	4a43      	ldr	r2, [pc, #268]	; (8005c44 <HAL_ADC_Start_DMA+0x208>)
 8005b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	4a42      	ldr	r2, [pc, #264]	; (8005c48 <HAL_ADC_Start_DMA+0x20c>)
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	4a41      	ldr	r2, [pc, #260]	; (8005c4c <HAL_ADC_Start_DMA+0x210>)
 8005b48:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005b52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005b62:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b72:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	334c      	adds	r3, #76	; 0x4c
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f000 fd3e 	bl	8006604 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d12a      	bne.n	8005bea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2d      	ldr	r2, [pc, #180]	; (8005c50 <HAL_ADC_Start_DMA+0x214>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d015      	beq.n	8005bca <HAL_ADC_Start_DMA+0x18e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2c      	ldr	r2, [pc, #176]	; (8005c54 <HAL_ADC_Start_DMA+0x218>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d105      	bne.n	8005bb4 <HAL_ADC_Start_DMA+0x178>
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <HAL_ADC_Start_DMA+0x204>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a27      	ldr	r2, [pc, #156]	; (8005c58 <HAL_ADC_Start_DMA+0x21c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d136      	bne.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_ADC_Start_DMA+0x204>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d130      	bne.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d129      	bne.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	e020      	b.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a18      	ldr	r2, [pc, #96]	; (8005c50 <HAL_ADC_Start_DMA+0x214>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d11b      	bne.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d114      	bne.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	e00b      	b.n	8005c2c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	200002dc 	.word	0x200002dc
 8005c3c:	431bde83 	.word	0x431bde83
 8005c40:	40012300 	.word	0x40012300
 8005c44:	080060c1 	.word	0x080060c1
 8005c48:	0800617b 	.word	0x0800617b
 8005c4c:	08006197 	.word	0x08006197
 8005c50:	40012000 	.word	0x40012000
 8005c54:	40012100 	.word	0x40012100
 8005c58:	40012200 	.word	0x40012200

08005c5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_ADC_ConfigChannel+0x1c>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e105      	b.n	8005eac <HAL_ADC_ConfigChannel+0x228>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b09      	cmp	r3, #9
 8005cae:	d925      	bls.n	8005cfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68d9      	ldr	r1, [r3, #12]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3b1e      	subs	r3, #30
 8005cc6:	2207      	movs	r2, #7
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	43da      	mvns	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	400a      	ands	r2, r1
 8005cd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68d9      	ldr	r1, [r3, #12]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	4603      	mov	r3, r0
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4403      	add	r3, r0
 8005cee:	3b1e      	subs	r3, #30
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e022      	b.n	8005d42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4413      	add	r3, r2
 8005d10:	2207      	movs	r2, #7
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43da      	mvns	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6919      	ldr	r1, [r3, #16]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4618      	mov	r0, r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4403      	add	r3, r0
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b06      	cmp	r3, #6
 8005d48:	d824      	bhi.n	8005d94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	3b05      	subs	r3, #5
 8005d5c:	221f      	movs	r2, #31
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	43da      	mvns	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	400a      	ands	r2, r1
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	4618      	mov	r0, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	3b05      	subs	r3, #5
 8005d86:	fa00 f203 	lsl.w	r2, r0, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	635a      	str	r2, [r3, #52]	; 0x34
 8005d92:	e04c      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	d824      	bhi.n	8005de6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	3b23      	subs	r3, #35	; 0x23
 8005dae:	221f      	movs	r2, #31
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43da      	mvns	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	400a      	ands	r2, r1
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4618      	mov	r0, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3b23      	subs	r3, #35	; 0x23
 8005dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
 8005de4:	e023      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	3b41      	subs	r3, #65	; 0x41
 8005df8:	221f      	movs	r2, #31
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	400a      	ands	r2, r1
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4618      	mov	r0, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	3b41      	subs	r3, #65	; 0x41
 8005e22:	fa00 f203 	lsl.w	r2, r0, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e2e:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <HAL_ADC_ConfigChannel+0x234>)
 8005e30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_ADC_ConfigChannel+0x238>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d109      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x1cc>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b12      	cmp	r3, #18
 8005e42:	d105      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <HAL_ADC_ConfigChannel+0x238>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d123      	bne.n	8005ea2 <HAL_ADC_ConfigChannel+0x21e>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d003      	beq.n	8005e6a <HAL_ADC_ConfigChannel+0x1e6>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b11      	cmp	r3, #17
 8005e68:	d11b      	bne.n	8005ea2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d111      	bne.n	8005ea2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <HAL_ADC_ConfigChannel+0x23c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <HAL_ADC_ConfigChannel+0x240>)
 8005e84:	fba2 2303 	umull	r2, r3, r2, r3
 8005e88:	0c9a      	lsrs	r2, r3, #18
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e94:	e002      	b.n	8005e9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f9      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40012300 	.word	0x40012300
 8005ebc:	40012000 	.word	0x40012000
 8005ec0:	200002dc 	.word	0x200002dc
 8005ec4:	431bde83 	.word	0x431bde83

08005ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ed0:	4b79      	ldr	r3, [pc, #484]	; (80060b8 <ADC_Init+0x1f0>)
 8005ed2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	021a      	lsls	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6899      	ldr	r1, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	4a58      	ldr	r2, [pc, #352]	; (80060bc <ADC_Init+0x1f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d022      	beq.n	8005fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6899      	ldr	r1, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6899      	ldr	r1, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	e00f      	b.n	8005fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0202 	bic.w	r2, r2, #2
 8005fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7e1b      	ldrb	r3, [r3, #24]
 8005fe0:	005a      	lsls	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01b      	beq.n	800602c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006002:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	3b01      	subs	r3, #1
 8006020:	035a      	lsls	r2, r3, #13
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e007      	b.n	800603c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	3b01      	subs	r3, #1
 8006058:	051a      	lsls	r2, r3, #20
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6899      	ldr	r1, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800607e:	025a      	lsls	r2, r3, #9
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	029a      	lsls	r2, r3, #10
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40012300 	.word	0x40012300
 80060bc:	0f000001 	.word	0x0f000001

080060c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d13c      	bne.n	8006154 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d12b      	bne.n	800614c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d127      	bne.n	800614c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006114:	2b00      	cmp	r3, #0
 8006116:	d119      	bne.n	800614c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0220 	bic.w	r2, r2, #32
 8006126:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f043 0201 	orr.w	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7fa fa65 	bl	800061c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006152:	e00e      	b.n	8006172 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fd85 	bl	8005c70 <HAL_ADC_ErrorCallback>
}
 8006166:	e004      	b.n	8006172 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fd67 	bl	8005c5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2240      	movs	r2, #64	; 0x40
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	f043 0204 	orr.w	r2, r3, #4
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fd5a 	bl	8005c70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <__NVIC_SetPriorityGrouping+0x44>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061e0:	4013      	ands	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <__NVIC_SetPriorityGrouping+0x44>)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	60d3      	str	r3, [r2, #12]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <__NVIC_GetPriorityGrouping+0x18>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	f003 0307 	and.w	r3, r3, #7
}
 800621a:	4618      	mov	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	e000ed00 	.word	0xe000ed00

08006228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	db0b      	blt.n	8006252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	f003 021f 	and.w	r2, r3, #31
 8006240:	4907      	ldr	r1, [pc, #28]	; (8006260 <__NVIC_EnableIRQ+0x38>)
 8006242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	2001      	movs	r0, #1
 800624a:	fa00 f202 	lsl.w	r2, r0, r2
 800624e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	e000e100 	.word	0xe000e100

08006264 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800626e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	db12      	blt.n	800629c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	f003 021f 	and.w	r2, r3, #31
 800627c:	490a      	ldr	r1, [pc, #40]	; (80062a8 <__NVIC_DisableIRQ+0x44>)
 800627e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2001      	movs	r0, #1
 8006286:	fa00 f202 	lsl.w	r2, r0, r2
 800628a:	3320      	adds	r3, #32
 800628c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006290:	f3bf 8f4f 	dsb	sy
}
 8006294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006296:	f3bf 8f6f 	isb	sy
}
 800629a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000e100 	.word	0xe000e100

080062ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	db0a      	blt.n	80062d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	490c      	ldr	r1, [pc, #48]	; (80062f8 <__NVIC_SetPriority+0x4c>)
 80062c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ca:	0112      	lsls	r2, r2, #4
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	440b      	add	r3, r1
 80062d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062d4:	e00a      	b.n	80062ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	4908      	ldr	r1, [pc, #32]	; (80062fc <__NVIC_SetPriority+0x50>)
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	3b04      	subs	r3, #4
 80062e4:	0112      	lsls	r2, r2, #4
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	440b      	add	r3, r1
 80062ea:	761a      	strb	r2, [r3, #24]
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	e000e100 	.word	0xe000e100
 80062fc:	e000ed00 	.word	0xe000ed00

08006300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006300:	b480      	push	{r7}
 8006302:	b089      	sub	sp, #36	; 0x24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f1c3 0307 	rsb	r3, r3, #7
 800631a:	2b04      	cmp	r3, #4
 800631c:	bf28      	it	cs
 800631e:	2304      	movcs	r3, #4
 8006320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3304      	adds	r3, #4
 8006326:	2b06      	cmp	r3, #6
 8006328:	d902      	bls.n	8006330 <NVIC_EncodePriority+0x30>
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	3b03      	subs	r3, #3
 800632e:	e000      	b.n	8006332 <NVIC_EncodePriority+0x32>
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43da      	mvns	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	401a      	ands	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006348:	f04f 31ff 	mov.w	r1, #4294967295
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	fa01 f303 	lsl.w	r3, r1, r3
 8006352:	43d9      	mvns	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006358:	4313      	orrs	r3, r2
         );
}
 800635a:	4618      	mov	r0, r3
 800635c:	3724      	adds	r7, #36	; 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ff28 	bl	80061c4 <__NVIC_SetPriorityGrouping>
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800638e:	f7ff ff3d 	bl	800620c <__NVIC_GetPriorityGrouping>
 8006392:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	6978      	ldr	r0, [r7, #20]
 800639a:	f7ff ffb1 	bl	8006300 <NVIC_EncodePriority>
 800639e:	4602      	mov	r2, r0
 80063a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a4:	4611      	mov	r1, r2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff ff80 	bl	80062ac <__NVIC_SetPriority>
}
 80063ac:	bf00      	nop
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff ff30 	bl	8006228 <__NVIC_EnableIRQ>
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80063da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff ff40 	bl	8006264 <__NVIC_DisableIRQ>
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063f8:	f7ff faac 	bl	8005954 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e099      	b.n	800653c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0201 	bic.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006428:	e00f      	b.n	800644a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800642a:	f7ff fa93 	bl	8005954 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b05      	cmp	r3, #5
 8006436:	d908      	bls.n	800644a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e078      	b.n	800653c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e8      	bne.n	800642a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4b38      	ldr	r3, [pc, #224]	; (8006544 <HAL_DMA_Init+0x158>)
 8006464:	4013      	ands	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800648e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d107      	bne.n	80064b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	4313      	orrs	r3, r2
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d117      	bne.n	800650e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00e      	beq.n	800650e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fb5f 	bl	8006bb4 <DMA_CheckFifoParam>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800650a:	2301      	movs	r3, #1
 800650c:	e016      	b.n	800653c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb16 	bl	8006b48 <DMA_CalcBaseAndBitshift>
 800651c:	4603      	mov	r3, r0
 800651e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	223f      	movs	r2, #63	; 0x3f
 8006526:	409a      	lsls	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	f010803f 	.word	0xf010803f

08006548 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e050      	b.n	80065fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d101      	bne.n	800656a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	e048      	b.n	80065fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2200      	movs	r2, #0
 8006590:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2221      	movs	r2, #33	; 0x21
 80065a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 facc 	bl	8006b48 <DMA_CalcBaseAndBitshift>
 80065b0:	4603      	mov	r3, r0
 80065b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	223f      	movs	r2, #63	; 0x3f
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_DMA_Start_IT+0x26>
 8006626:	2302      	movs	r3, #2
 8006628:	e040      	b.n	80066ac <HAL_DMA_Start_IT+0xa8>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d12f      	bne.n	800669e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fa4a 	bl	8006aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665c:	223f      	movs	r2, #63	; 0x3f
 800665e:	409a      	lsls	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0216 	orr.w	r2, r2, #22
 8006672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0208 	orr.w	r2, r2, #8
 800668a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e005      	b.n	80066aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
 80066a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066c2:	f7ff f947 	bl	8005954 <HAL_GetTick>
 80066c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d008      	beq.n	80066e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2280      	movs	r2, #128	; 0x80
 80066d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e052      	b.n	800678c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0216 	bic.w	r2, r2, #22
 80066f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <HAL_DMA_Abort+0x62>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0208 	bic.w	r2, r2, #8
 8006724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006736:	e013      	b.n	8006760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006738:	f7ff f90c 	bl	8005954 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b05      	cmp	r3, #5
 8006744:	d90c      	bls.n	8006760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2203      	movs	r2, #3
 8006750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e015      	b.n	800678c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e4      	bne.n	8006738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006772:	223f      	movs	r2, #63	; 0x3f
 8006774:	409a      	lsls	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d004      	beq.n	80067b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2280      	movs	r2, #128	; 0x80
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e00c      	b.n	80067cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2205      	movs	r2, #5
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067e4:	4b92      	ldr	r3, [pc, #584]	; (8006a30 <HAL_DMA_IRQHandler+0x258>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a92      	ldr	r2, [pc, #584]	; (8006a34 <HAL_DMA_IRQHandler+0x25c>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006802:	2208      	movs	r2, #8
 8006804:	409a      	lsls	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01a      	beq.n	8006844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d013      	beq.n	8006844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0204 	bic.w	r2, r2, #4
 800682a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	2208      	movs	r2, #8
 8006832:	409a      	lsls	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683c:	f043 0201 	orr.w	r2, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d012      	beq.n	800687a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006866:	2201      	movs	r2, #1
 8006868:	409a      	lsls	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f043 0202 	orr.w	r2, r3, #2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687e:	2204      	movs	r2, #4
 8006880:	409a      	lsls	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4013      	ands	r3, r2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d012      	beq.n	80068b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689c:	2204      	movs	r2, #4
 800689e:	409a      	lsls	r2, r3
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a8:	f043 0204 	orr.w	r2, r3, #4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b4:	2210      	movs	r2, #16
 80068b6:	409a      	lsls	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d043      	beq.n	8006948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d03c      	beq.n	8006948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d2:	2210      	movs	r2, #16
 80068d4:	409a      	lsls	r2, r3
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d018      	beq.n	800691a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d108      	bne.n	8006908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d024      	beq.n	8006948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
 8006906:	e01f      	b.n	8006948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01b      	beq.n	8006948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
 8006918:	e016      	b.n	8006948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d107      	bne.n	8006938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0208 	bic.w	r2, r2, #8
 8006936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	2220      	movs	r2, #32
 800694e:	409a      	lsls	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4013      	ands	r3, r2
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 808e 	beq.w	8006a76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8086 	beq.w	8006a76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696e:	2220      	movs	r2, #32
 8006970:	409a      	lsls	r2, r3
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b05      	cmp	r3, #5
 8006980:	d136      	bne.n	80069f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0216 	bic.w	r2, r2, #22
 8006990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <HAL_DMA_IRQHandler+0x1da>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0208 	bic.w	r2, r2, #8
 80069c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c6:	223f      	movs	r2, #63	; 0x3f
 80069c8:	409a      	lsls	r2, r3
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d07d      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
        }
        return;
 80069ee:	e078      	b.n	8006ae2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01c      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d108      	bne.n	8006a1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d030      	beq.n	8006a76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
 8006a1c:	e02b      	b.n	8006a76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d027      	beq.n	8006a76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	e022      	b.n	8006a76 <HAL_DMA_IRQHandler+0x29e>
 8006a30:	200002dc 	.word	0x200002dc
 8006a34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10f      	bne.n	8006a66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0210 	bic.w	r2, r2, #16
 8006a54:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d032      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d022      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2205      	movs	r2, #5
 8006a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d307      	bcc.n	8006abe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f2      	bne.n	8006aa2 <HAL_DMA_IRQHandler+0x2ca>
 8006abc:	e000      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006abe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	e000      	b.n	8006ae4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006ae2:	bf00      	nop
    }
  }
}
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d108      	bne.n	8006b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b2a:	e007      	b.n	8006b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	3b10      	subs	r3, #16
 8006b58:	4a14      	ldr	r2, [pc, #80]	; (8006bac <DMA_CalcBaseAndBitshift+0x64>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b62:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d909      	bls.n	8006b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b7e:	f023 0303 	bic.w	r3, r3, #3
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	659a      	str	r2, [r3, #88]	; 0x58
 8006b88:	e007      	b.n	8006b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	aaaaaaab 	.word	0xaaaaaaab
 8006bb0:	08021960 	.word	0x08021960

08006bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11f      	bne.n	8006c0e <DMA_CheckFifoParam+0x5a>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d856      	bhi.n	8006c82 <DMA_CheckFifoParam+0xce>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <DMA_CheckFifoParam+0x28>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006bed 	.word	0x08006bed
 8006be0:	08006bff 	.word	0x08006bff
 8006be4:	08006bed 	.word	0x08006bed
 8006be8:	08006c83 	.word	0x08006c83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d046      	beq.n	8006c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bfc:	e043      	b.n	8006c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c06:	d140      	bne.n	8006c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c0c:	e03d      	b.n	8006c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c16:	d121      	bne.n	8006c5c <DMA_CheckFifoParam+0xa8>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d837      	bhi.n	8006c8e <DMA_CheckFifoParam+0xda>
 8006c1e:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <DMA_CheckFifoParam+0x70>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c35 	.word	0x08006c35
 8006c28:	08006c3b 	.word	0x08006c3b
 8006c2c:	08006c35 	.word	0x08006c35
 8006c30:	08006c4d 	.word	0x08006c4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
      break;
 8006c38:	e030      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d025      	beq.n	8006c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c4a:	e022      	b.n	8006c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c54:	d11f      	bne.n	8006c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c5a:	e01c      	b.n	8006c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d903      	bls.n	8006c6a <DMA_CheckFifoParam+0xb6>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d003      	beq.n	8006c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c68:	e018      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	e015      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00e      	beq.n	8006c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c80:	e00b      	b.n	8006c9a <DMA_CheckFifoParam+0xe6>
      break;
 8006c82:	bf00      	nop
 8006c84:	e00a      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      break;
 8006c86:	bf00      	nop
 8006c88:	e008      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e006      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e004      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      break;
 8006c92:	bf00      	nop
 8006c94:	e002      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8006c96:	bf00      	nop
 8006c98:	e000      	b.n	8006c9c <DMA_CheckFifoParam+0xe8>
      break;
 8006c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop

08006cac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8006cbc:	4baa      	ldr	r3, [pc, #680]	; (8006f68 <HAL_ETH_Init+0x2bc>)
 8006cbe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e183      	b.n	8006fda <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f004 ff8a 	bl	800bc00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cec:	2300      	movs	r3, #0
 8006cee:	60bb      	str	r3, [r7, #8]
 8006cf0:	4b9e      	ldr	r3, [pc, #632]	; (8006f6c <HAL_ETH_Init+0x2c0>)
 8006cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf4:	4a9d      	ldr	r2, [pc, #628]	; (8006f6c <HAL_ETH_Init+0x2c0>)
 8006cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8006cfc:	4b9b      	ldr	r3, [pc, #620]	; (8006f6c <HAL_ETH_Init+0x2c0>)
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006d08:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <HAL_ETH_Init+0x2c4>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4a98      	ldr	r2, [pc, #608]	; (8006f70 <HAL_ETH_Init+0x2c4>)
 8006d0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d12:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006d14:	4b96      	ldr	r3, [pc, #600]	; (8006f70 <HAL_ETH_Init+0x2c4>)
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	4994      	ldr	r1, [pc, #592]	; (8006f70 <HAL_ETH_Init+0x2c4>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
 8006d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d38:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006d3a:	f7fe fe0b 	bl	8005954 <HAL_GetTick>
 8006d3e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006d40:	e011      	b.n	8006d66 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8006d42:	f7fe fe07 	bl	8005954 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d50:	d909      	bls.n	8006d66 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2203      	movs	r2, #3
 8006d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e139      	b.n	8006fda <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e4      	bne.n	8006d42 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f023 031c 	bic.w	r3, r3, #28
 8006d86:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006d88:	f002 f87c 	bl	8008e84 <HAL_RCC_GetHCLKFreq>
 8006d8c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	4a78      	ldr	r2, [pc, #480]	; (8006f74 <HAL_ETH_Init+0x2c8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d908      	bls.n	8006da8 <HAL_ETH_Init+0xfc>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	4a77      	ldr	r2, [pc, #476]	; (8006f78 <HAL_ETH_Init+0x2cc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d804      	bhi.n	8006da8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f043 0308 	orr.w	r3, r3, #8
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	e027      	b.n	8006df8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	4a73      	ldr	r2, [pc, #460]	; (8006f78 <HAL_ETH_Init+0x2cc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d908      	bls.n	8006dc2 <HAL_ETH_Init+0x116>
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	4a6d      	ldr	r2, [pc, #436]	; (8006f68 <HAL_ETH_Init+0x2bc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d204      	bcs.n	8006dc2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f043 030c 	orr.w	r3, r3, #12
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	e01a      	b.n	8006df8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4a68      	ldr	r2, [pc, #416]	; (8006f68 <HAL_ETH_Init+0x2bc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d303      	bcc.n	8006dd2 <HAL_ETH_Init+0x126>
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	4a6b      	ldr	r2, [pc, #428]	; (8006f7c <HAL_ETH_Init+0x2d0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d911      	bls.n	8006df6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	4a69      	ldr	r2, [pc, #420]	; (8006f7c <HAL_ETH_Init+0x2d0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d908      	bls.n	8006dec <HAL_ETH_Init+0x140>
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	4a68      	ldr	r2, [pc, #416]	; (8006f80 <HAL_ETH_Init+0x2d4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d804      	bhi.n	8006dec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	e005      	b.n	8006df8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f043 0310 	orr.w	r3, r3, #16
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e000      	b.n	8006df8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8006df6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006e00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006e04:	2100      	movs	r1, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fc17 	bl	800763a <HAL_ETH_WritePHYRegister>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8006e16:	6939      	ldr	r1, [r7, #16]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fdcd 	bl	80079b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0d7      	b.n	8006fda <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8006e2a:	20ff      	movs	r0, #255	; 0xff
 8006e2c:	f7fe fd9e 	bl	800596c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80a5 	beq.w	8006f84 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e3a:	f7fe fd8b 	bl	8005954 <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006e40:	f107 030c 	add.w	r3, r7, #12
 8006e44:	461a      	mov	r2, r3
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb8e 	bl	800756a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006e4e:	f7fe fd81 	bl	8005954 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d90f      	bls.n	8006e80 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006e64:	6939      	ldr	r1, [r7, #16]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fda6 	bl	80079b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e0ac      	b.n	8006fda <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0da      	beq.n	8006e40 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fbd2 	bl	800763a <HAL_ETH_WritePHYRegister>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006ea0:	6939      	ldr	r1, [r7, #16]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fd88 	bl	80079b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e092      	b.n	8006fda <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eb4:	f7fe fd4e 	bl	8005954 <HAL_GetTick>
 8006eb8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006eba:	f107 030c 	add.w	r3, r7, #12
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fb51 	bl	800756a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006ec8:	f7fe fd44 	bl	8005954 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d90f      	bls.n	8006efa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006ede:	6939      	ldr	r1, [r7, #16]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fd69 	bl	80079b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e06f      	b.n	8006fda <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0da      	beq.n	8006eba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006f04:	f107 030c 	add.w	r3, r7, #12
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2110      	movs	r1, #16
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb2c 	bl	800756a <HAL_ETH_ReadPHYRegister>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006f1c:	6939      	ldr	r1, [r7, #16]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fd4a 	bl	80079b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e054      	b.n	8006fda <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	e002      	b.n	8006f4a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	609a      	str	r2, [r3, #8]
 8006f5a:	e035      	b.n	8006fc8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f62:	609a      	str	r2, [r3, #8]
 8006f64:	e030      	b.n	8006fc8 <HAL_ETH_Init+0x31c>
 8006f66:	bf00      	nop
 8006f68:	03938700 	.word	0x03938700
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	40013800 	.word	0x40013800
 8006f74:	01312cff 	.word	0x01312cff
 8006f78:	02160ebf 	.word	0x02160ebf
 8006f7c:	05f5e0ff 	.word	0x05f5e0ff
 8006f80:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fb4c 	bl	800763a <HAL_ETH_WritePHYRegister>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006fac:	6939      	ldr	r1, [r7, #16]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fd02 	bl	80079b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e00c      	b.n	8006fda <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8006fc0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006fc4:	f7fe fcd2 	bl	800596c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fcf4 	bl	80079b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop

08006fe4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_ETH_DMATxDescListInit+0x20>
 8007000:	2302      	movs	r3, #2
 8007002:	e052      	b.n	80070aa <HAL_ETH_DMATxDescListInit+0xc6>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e030      	b.n	8007082 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	015b      	lsls	r3, r3, #5
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4413      	add	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007030:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007038:	fb02 f303 	mul.w	r3, r2, r3
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	4413      	add	r3, r2
 8007040:	461a      	mov	r2, r3
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	3b01      	subs	r3, #1
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	429a      	cmp	r2, r3
 8007062:	d208      	bcs.n	8007076 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	3301      	adds	r3, #1
 8007068:	015b      	lsls	r3, r3, #5
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	461a      	mov	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	60da      	str	r2, [r3, #12]
 8007074:	e002      	b.n	800707c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3301      	adds	r3, #1
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d3ca      	bcc.n	8007020 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007094:	3310      	adds	r3, #16
 8007096:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b087      	sub	sp, #28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_ETH_DMARxDescListInit+0x20>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e056      	b.n	8007184 <HAL_ETH_DMARxDescListInit+0xce>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2202      	movs	r2, #2
 80070e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	e034      	b.n	800715c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	015b      	lsls	r3, r3, #5
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4413      	add	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007102:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800710a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4413      	add	r3, r2
 800711a:	461a      	mov	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d105      	bne.n	8007134 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	3b01      	subs	r3, #1
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	429a      	cmp	r2, r3
 800713c:	d208      	bcs.n	8007150 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	3301      	adds	r3, #1
 8007142:	015b      	lsls	r3, r3, #5
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	4413      	add	r3, r2
 8007148:	461a      	mov	r2, r3
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	e002      	b.n	8007156 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	3301      	adds	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d3c6      	bcc.n	80070f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716e:	330c      	adds	r3, #12
 8007170:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	2300      	movs	r3, #0
 80071a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_ETH_TransmitFrame+0x24>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e0cd      	b.n	8007350 <HAL_ETH_TransmitFrame+0x1c0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80071da:	2301      	movs	r3, #1
 80071dc:	e0b8      	b.n	8007350 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da09      	bge.n	80071fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2212      	movs	r2, #18
 80071ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0a9      	b.n	8007350 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007202:	4293      	cmp	r3, r2
 8007204:	d915      	bls.n	8007232 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	4a54      	ldr	r2, [pc, #336]	; (800735c <HAL_ETH_TransmitFrame+0x1cc>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	0a9b      	lsrs	r3, r3, #10
 8007210:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4b51      	ldr	r3, [pc, #324]	; (800735c <HAL_ETH_TransmitFrame+0x1cc>)
 8007216:	fba3 1302 	umull	r1, r3, r3, r2
 800721a:	0a9b      	lsrs	r3, r3, #10
 800721c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3301      	adds	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e001      	b.n	8007236 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8007232:	2301      	movs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d11c      	bne.n	8007276 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800724a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007256:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007266:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	62da      	str	r2, [r3, #44]	; 0x2c
 8007274:	e04b      	b.n	800730e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	e044      	b.n	8007306 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800728a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d107      	bne.n	80072a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072a0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80072aa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d116      	bne.n	80072e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80072c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4a25      	ldr	r2, [pc, #148]	; (8007360 <HAL_ETH_TransmitFrame+0x1d0>)
 80072ca:	fb02 f203 	mul.w	r2, r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	4413      	add	r3, r2
 80072d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80072d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80072e2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3301      	adds	r3, #1
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	429a      	cmp	r2, r3
 800730c:	d3b6      	bcc.n	800727c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007316:	3314      	adds	r3, #20
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00d      	beq.n	800733e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732a:	3314      	adds	r3, #20
 800732c:	2204      	movs	r2, #4
 800732e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007338:	3304      	adds	r3, #4
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	ac02b00b 	.word	0xac02b00b
 8007360:	fffffa0c 	.word	0xfffffa0c

08007364 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800737a:	2302      	movs	r3, #2
 800737c:	e074      	b.n	8007468 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800738e:	e05a      	b.n	8007446 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a4:	d10d      	bne.n	80073c2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	461a      	mov	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
 80073c0:	e041      	b.n	8007446 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
 80073e6:	e02e      	b.n	8007446 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d103      	bne.n	800740a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	0c1b      	lsrs	r3, r3, #16
 8007412:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007416:	1f1a      	subs	r2, r3, #4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	461a      	mov	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	e010      	b.n	8007468 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	db02      	blt.n	8007456 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b03      	cmp	r3, #3
 8007454:	d99c      	bls.n	8007390 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007484:	3314      	adds	r3, #20
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d112      	bne.n	80074b6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f004 fc63 	bl	800bd5c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	3314      	adds	r3, #20
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b4:	e01b      	b.n	80074ee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074be:	3314      	adds	r3, #20
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d111      	bne.n	80074ee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f839 	bl	8007542 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d8:	3314      	adds	r3, #20
 80074da:	2201      	movs	r2, #1
 80074dc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f6:	3314      	adds	r3, #20
 80074f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074fc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007506:	3314      	adds	r3, #20
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007512:	d112      	bne.n	800753a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f81e 	bl	8007556 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	3314      	adds	r3, #20
 8007524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007528:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	460b      	mov	r3, r1
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b82      	cmp	r3, #130	; 0x82
 800758a:	d101      	bne.n	8007590 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800758c:	2302      	movs	r3, #2
 800758e:	e050      	b.n	8007632 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2282      	movs	r2, #130	; 0x82
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f003 031c 	and.w	r3, r3, #28
 80075a6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8a1b      	ldrh	r3, [r3, #16]
 80075ac:	02db      	lsls	r3, r3, #11
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80075b6:	897b      	ldrh	r3, [r7, #10]
 80075b8:	019b      	lsls	r3, r3, #6
 80075ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0302 	bic.w	r3, r3, #2
 80075ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80075dc:	f7fe f9ba 	bl	8005954 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80075e2:	e015      	b.n	8007610 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80075e4:	f7fe f9b6 	bl	8005954 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f2:	d309      	bcc.n	8007608 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e014      	b.n	8007632 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e4      	bne.n	80075e4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	b29b      	uxth	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	460b      	mov	r3, r1
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b42      	cmp	r3, #66	; 0x42
 800765a:	d101      	bne.n	8007660 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
 800765e:	e04e      	b.n	80076fe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2242      	movs	r2, #66	; 0x42
 8007664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f003 031c 	and.w	r3, r3, #28
 8007676:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8a1b      	ldrh	r3, [r3, #16]
 800767c:	02db      	lsls	r3, r3, #11
 800767e:	b29b      	uxth	r3, r3
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007686:	897b      	ldrh	r3, [r7, #10]
 8007688:	019b      	lsls	r3, r3, #6
 800768a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f043 0302 	orr.w	r3, r3, #2
 800769a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80076b6:	f7fe f94d 	bl	8005954 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80076bc:	e015      	b.n	80076ea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80076be:	f7fe f949 	bl	8005954 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076cc:	d309      	bcc.n	80076e2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e00d      	b.n	80076fe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e4      	bne.n	80076be <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_ETH_Start+0x16>
 8007718:	2302      	movs	r3, #2
 800771a:	e01f      	b.n	800775c <HAL_ETH_Start+0x56>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fb45 	bl	8007dbc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb7c 	bl	8007e30 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fc13 	bl	8007f64 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fbb0 	bl	8007ea4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fbdd 	bl	8007f04 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_ETH_Stop+0x16>
 8007776:	2302      	movs	r3, #2
 8007778:	e01f      	b.n	80077ba <HAL_ETH_Stop+0x56>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fba2 	bl	8007ed4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fbcf 	bl	8007f34 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb67 	bl	8007e6a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fbe1 	bl	8007f64 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb27 	bl	8007df6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_ETH_ConfigMAC+0x1c>
 80077dc:	2302      	movs	r3, #2
 80077de:	e0e4      	b.n	80079aa <HAL_ETH_ConfigMAC+0x1e6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80b1 	beq.w	800795a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4b6c      	ldr	r3, [pc, #432]	; (80079b4 <HAL_ETH_ConfigMAC+0x1f0>)
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007810:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8007816:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800781c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8007822:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8007828:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800782e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8007834:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800783a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8007840:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8007846:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800784c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8007852:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800786a:	2001      	movs	r0, #1
 800786c:	f7fe f87e 	bl	800596c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007880:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8007886:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800788c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8007892:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8007898:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800789e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80078aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80078ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80078b6:	2001      	movs	r0, #1
 80078b8:	f7fe f858 	bl	800596c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80078e6:	4013      	ands	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80078f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80078fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8007900:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8007906:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800790c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007924:	2001      	movs	r0, #1
 8007926:	f7fe f821 	bl	800596c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800794a:	2001      	movs	r0, #1
 800794c:	f7fe f80e 	bl	800596c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	61da      	str	r2, [r3, #28]
 8007958:	e01e      	b.n	8007998 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007968:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800798a:	2001      	movs	r0, #1
 800798c:	f7fd ffee 	bl	800596c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	ff20810f 	.word	0xff20810f

080079b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b0b0      	sub	sp, #192	; 0xc0
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80079de:	2300      	movs	r3, #0
 80079e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80079e6:	2300      	movs	r3, #0
 80079e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80079fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a02:	663b      	str	r3, [r7, #96]	; 0x60
 8007a04:	e001      	b.n	8007a0a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8007a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a0e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007a14:	2300      	movs	r3, #0
 8007a16:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007a8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007a90:	4bac      	ldr	r3, [pc, #688]	; (8007d44 <ETH_MACDMAConfig+0x38c>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8007a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007a9c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8007a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8007aa0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8007aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8007aa4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8007aaa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8007aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8007aae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8007ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8007ab2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8007ab8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8007aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8007abc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8007abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8007ac0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8007ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8007ac4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8007ac8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8007aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8007acc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007ace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007ae0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007aec:	2001      	movs	r0, #1
 8007aee:	f7fd ff3d 	bl	800596c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007afa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007afc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8007afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007b00:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8007b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8007b04:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8007b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8007b0a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8007b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8007b10:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8007b16:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8007b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8007b1c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8007b20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8007b28:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007b2a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007b36:	2001      	movs	r0, #1
 8007b38:	f7fd ff18 	bl	800596c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b44:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b4e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b58:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007b64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b68:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b76:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8007b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007b7c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8007b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8007b82:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8007b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8007b88:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8007b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8007b8e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8007b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8007b94:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007b96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007ba8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	f7fd fed9 	bl	800596c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007bc2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007bc4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8007bc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007bde:	2001      	movs	r0, #1
 8007be0:	f7fd fec4 	bl	800596c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007bec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8007bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bf6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8007bfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c00:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007c02:	2300      	movs	r3, #0
 8007c04:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8007c12:	2304      	movs	r3, #4
 8007c14:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8007c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8007c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8007c2e:	2380      	movs	r3, #128	; 0x80
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007c36:	2300      	movs	r3, #0
 8007c38:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c42:	3318      	adds	r3, #24
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007c4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c4e:	4b3e      	ldr	r3, [pc, #248]	; (8007d48 <ETH_MACDMAConfig+0x390>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007c56:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8007c58:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007c5a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8007c5c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8007c5e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8007c60:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8007c62:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8007c64:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8007c66:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8007c68:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8007c6a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8007c6e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8007c72:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8007c76:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f7fd fe62 	bl	800596c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007cb6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007cbc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8007cc0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8007cc4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8007cc8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8007cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ccc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8007cce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8007cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8007cd2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	f7fd fe3b 	bl	800596c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007d02:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10f      	bne.n	8007d2c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d14:	331c      	adds	r3, #28
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d28:	331c      	adds	r3, #28
 8007d2a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	461a      	mov	r2, r3
 8007d32:	2100      	movs	r1, #0
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f809 	bl	8007d4c <ETH_MACAddressConfig>
}
 8007d3a:	bf00      	nop
 8007d3c:	37c0      	adds	r7, #192	; 0xc0
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	ff20810f 	.word	0xff20810f
 8007d48:	f8de3f23 	.word	0xf8de3f23

08007d4c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3305      	adds	r3, #5
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	3204      	adds	r2, #4
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <ETH_MACAddressConfig+0x68>)
 8007d6e:	4413      	add	r3, r2
 8007d70:	461a      	mov	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3303      	adds	r3, #3
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	061a      	lsls	r2, r3, #24
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3302      	adds	r3, #2
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	4313      	orrs	r3, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <ETH_MACAddressConfig+0x6c>)
 8007d9e:	4413      	add	r3, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	6013      	str	r3, [r2, #0]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40028040 	.word	0x40028040
 8007db8:	40028044 	.word	0x40028044

08007dbc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0208 	orr.w	r2, r2, #8
 8007dd6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007de0:	2001      	movs	r0, #1
 8007de2:	f000 f8e9 	bl	8007fb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	601a      	str	r2, [r3, #0]
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0208 	bic.w	r2, r2, #8
 8007e10:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	f000 f8cc 	bl	8007fb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]
}
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f042 0204 	orr.w	r2, r2, #4
 8007e4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007e54:	2001      	movs	r0, #1
 8007e56:	f000 f8af 	bl	8007fb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0204 	bic.w	r2, r2, #4
 8007e84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f000 f892 	bl	8007fb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	3318      	adds	r3, #24
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	3318      	adds	r3, #24
 8007ec6:	601a      	str	r2, [r3, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee4:	3318      	adds	r3, #24
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef4:	3318      	adds	r3, #24
 8007ef6:	601a      	str	r2, [r3, #0]
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f14:	3318      	adds	r3, #24
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0202 	orr.w	r2, r2, #2
 8007f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f24:	3318      	adds	r3, #24
 8007f26:	601a      	str	r2, [r3, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f44:	3318      	adds	r3, #24
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0202 	bic.w	r2, r2, #2
 8007f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f54:	3318      	adds	r3, #24
 8007f56:	601a      	str	r2, [r3, #0]
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f78:	3318      	adds	r3, #24
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f88:	3318      	adds	r3, #24
 8007f8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f94:	3318      	adds	r3, #24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	f000 f80c 	bl	8007fb8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007faa:	3318      	adds	r3, #24
 8007fac:	601a      	str	r2, [r3, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <ETH_Delay+0x38>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a0b      	ldr	r2, [pc, #44]	; (8007ff4 <ETH_Delay+0x3c>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8007fd4:	bf00      	nop
  } 
  while (Delay --);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1e5a      	subs	r2, r3, #1
 8007fda:	60fa      	str	r2, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1f9      	bne.n	8007fd4 <ETH_Delay+0x1c>
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	200002dc 	.word	0x200002dc
 8007ff4:	10624dd3 	.word	0x10624dd3

08007ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b089      	sub	sp, #36	; 0x24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008006:	2300      	movs	r3, #0
 8008008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800800a:	2300      	movs	r3, #0
 800800c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	e16b      	b.n	80082ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008014:	2201      	movs	r2, #1
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	fa02 f303 	lsl.w	r3, r2, r3
 800801c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4013      	ands	r3, r2
 8008026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	429a      	cmp	r2, r3
 800802e:	f040 815a 	bne.w	80082e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b01      	cmp	r3, #1
 800803c:	d005      	beq.n	800804a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008046:	2b02      	cmp	r3, #2
 8008048:	d130      	bne.n	80080ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	2203      	movs	r2, #3
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	43db      	mvns	r3, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	4013      	ands	r3, r2
 8008060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	4313      	orrs	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008080:	2201      	movs	r2, #1
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	fa02 f303 	lsl.w	r3, r2, r3
 8008088:	43db      	mvns	r3, r3
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4013      	ands	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	091b      	lsrs	r3, r3, #4
 8008096:	f003 0201 	and.w	r2, r3, #1
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d017      	beq.n	80080e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	2203      	movs	r2, #3
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	43db      	mvns	r3, r3
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	4013      	ands	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	4313      	orrs	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d123      	bne.n	800813c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	08da      	lsrs	r2, r3, #3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3208      	adds	r2, #8
 80080fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	220f      	movs	r2, #15
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	43db      	mvns	r3, r3
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	4013      	ands	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4313      	orrs	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	08da      	lsrs	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3208      	adds	r2, #8
 8008136:	69b9      	ldr	r1, [r7, #24]
 8008138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	2203      	movs	r2, #3
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	43db      	mvns	r3, r3
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	4013      	ands	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f003 0203 	and.w	r2, r3, #3
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4313      	orrs	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80b4 	beq.w	80082e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	4b60      	ldr	r3, [pc, #384]	; (8008304 <HAL_GPIO_Init+0x30c>)
 8008184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008186:	4a5f      	ldr	r2, [pc, #380]	; (8008304 <HAL_GPIO_Init+0x30c>)
 8008188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800818c:	6453      	str	r3, [r2, #68]	; 0x44
 800818e:	4b5d      	ldr	r3, [pc, #372]	; (8008304 <HAL_GPIO_Init+0x30c>)
 8008190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800819a:	4a5b      	ldr	r2, [pc, #364]	; (8008308 <HAL_GPIO_Init+0x310>)
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	3302      	adds	r3, #2
 80081a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	220f      	movs	r2, #15
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	43db      	mvns	r3, r3
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	4013      	ands	r3, r2
 80081bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a52      	ldr	r2, [pc, #328]	; (800830c <HAL_GPIO_Init+0x314>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02b      	beq.n	800821e <HAL_GPIO_Init+0x226>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a51      	ldr	r2, [pc, #324]	; (8008310 <HAL_GPIO_Init+0x318>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d025      	beq.n	800821a <HAL_GPIO_Init+0x222>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a50      	ldr	r2, [pc, #320]	; (8008314 <HAL_GPIO_Init+0x31c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01f      	beq.n	8008216 <HAL_GPIO_Init+0x21e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a4f      	ldr	r2, [pc, #316]	; (8008318 <HAL_GPIO_Init+0x320>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d019      	beq.n	8008212 <HAL_GPIO_Init+0x21a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a4e      	ldr	r2, [pc, #312]	; (800831c <HAL_GPIO_Init+0x324>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_GPIO_Init+0x216>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a4d      	ldr	r2, [pc, #308]	; (8008320 <HAL_GPIO_Init+0x328>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00d      	beq.n	800820a <HAL_GPIO_Init+0x212>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a4c      	ldr	r2, [pc, #304]	; (8008324 <HAL_GPIO_Init+0x32c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <HAL_GPIO_Init+0x20e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a4b      	ldr	r2, [pc, #300]	; (8008328 <HAL_GPIO_Init+0x330>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d101      	bne.n	8008202 <HAL_GPIO_Init+0x20a>
 80081fe:	2307      	movs	r3, #7
 8008200:	e00e      	b.n	8008220 <HAL_GPIO_Init+0x228>
 8008202:	2308      	movs	r3, #8
 8008204:	e00c      	b.n	8008220 <HAL_GPIO_Init+0x228>
 8008206:	2306      	movs	r3, #6
 8008208:	e00a      	b.n	8008220 <HAL_GPIO_Init+0x228>
 800820a:	2305      	movs	r3, #5
 800820c:	e008      	b.n	8008220 <HAL_GPIO_Init+0x228>
 800820e:	2304      	movs	r3, #4
 8008210:	e006      	b.n	8008220 <HAL_GPIO_Init+0x228>
 8008212:	2303      	movs	r3, #3
 8008214:	e004      	b.n	8008220 <HAL_GPIO_Init+0x228>
 8008216:	2302      	movs	r3, #2
 8008218:	e002      	b.n	8008220 <HAL_GPIO_Init+0x228>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <HAL_GPIO_Init+0x228>
 800821e:	2300      	movs	r3, #0
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	f002 0203 	and.w	r2, r2, #3
 8008226:	0092      	lsls	r2, r2, #2
 8008228:	4093      	lsls	r3, r2
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	4313      	orrs	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008230:	4935      	ldr	r1, [pc, #212]	; (8008308 <HAL_GPIO_Init+0x310>)
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	089b      	lsrs	r3, r3, #2
 8008236:	3302      	adds	r3, #2
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800823e:	4b3b      	ldr	r3, [pc, #236]	; (800832c <HAL_GPIO_Init+0x334>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	43db      	mvns	r3, r3
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	4013      	ands	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008262:	4a32      	ldr	r2, [pc, #200]	; (800832c <HAL_GPIO_Init+0x334>)
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008268:	4b30      	ldr	r3, [pc, #192]	; (800832c <HAL_GPIO_Init+0x334>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	43db      	mvns	r3, r3
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	4013      	ands	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800828c:	4a27      	ldr	r2, [pc, #156]	; (800832c <HAL_GPIO_Init+0x334>)
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008292:	4b26      	ldr	r3, [pc, #152]	; (800832c <HAL_GPIO_Init+0x334>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	43db      	mvns	r3, r3
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	4013      	ands	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80082b6:	4a1d      	ldr	r2, [pc, #116]	; (800832c <HAL_GPIO_Init+0x334>)
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <HAL_GPIO_Init+0x334>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	43db      	mvns	r3, r3
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	4013      	ands	r3, r2
 80082ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80082e0:	4a12      	ldr	r2, [pc, #72]	; (800832c <HAL_GPIO_Init+0x334>)
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	3301      	adds	r3, #1
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b0f      	cmp	r3, #15
 80082f0:	f67f ae90 	bls.w	8008014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
 80082f8:	3724      	adds	r7, #36	; 0x24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40023800 	.word	0x40023800
 8008308:	40013800 	.word	0x40013800
 800830c:	40020000 	.word	0x40020000
 8008310:	40020400 	.word	0x40020400
 8008314:	40020800 	.word	0x40020800
 8008318:	40020c00 	.word	0x40020c00
 800831c:	40021000 	.word	0x40021000
 8008320:	40021400 	.word	0x40021400
 8008324:	40021800 	.word	0x40021800
 8008328:	40021c00 	.word	0x40021c00
 800832c:	40013c00 	.word	0x40013c00

08008330 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008342:	2300      	movs	r3, #0
 8008344:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	e0cd      	b.n	80084e8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800834c:	2201      	movs	r2, #1
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	fa02 f303 	lsl.w	r3, r2, r3
 8008354:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	4013      	ands	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	f040 80bd 	bne.w	80084e2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008368:	4a65      	ldr	r2, [pc, #404]	; (8008500 <HAL_GPIO_DeInit+0x1d0>)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	3302      	adds	r3, #2
 8008370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008374:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	220f      	movs	r2, #15
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4013      	ands	r3, r2
 8008388:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a5d      	ldr	r2, [pc, #372]	; (8008504 <HAL_GPIO_DeInit+0x1d4>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d02b      	beq.n	80083ea <HAL_GPIO_DeInit+0xba>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a5c      	ldr	r2, [pc, #368]	; (8008508 <HAL_GPIO_DeInit+0x1d8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d025      	beq.n	80083e6 <HAL_GPIO_DeInit+0xb6>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a5b      	ldr	r2, [pc, #364]	; (800850c <HAL_GPIO_DeInit+0x1dc>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d01f      	beq.n	80083e2 <HAL_GPIO_DeInit+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a5a      	ldr	r2, [pc, #360]	; (8008510 <HAL_GPIO_DeInit+0x1e0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d019      	beq.n	80083de <HAL_GPIO_DeInit+0xae>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a59      	ldr	r2, [pc, #356]	; (8008514 <HAL_GPIO_DeInit+0x1e4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_GPIO_DeInit+0xaa>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a58      	ldr	r2, [pc, #352]	; (8008518 <HAL_GPIO_DeInit+0x1e8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00d      	beq.n	80083d6 <HAL_GPIO_DeInit+0xa6>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a57      	ldr	r2, [pc, #348]	; (800851c <HAL_GPIO_DeInit+0x1ec>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <HAL_GPIO_DeInit+0xa2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a56      	ldr	r2, [pc, #344]	; (8008520 <HAL_GPIO_DeInit+0x1f0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d101      	bne.n	80083ce <HAL_GPIO_DeInit+0x9e>
 80083ca:	2307      	movs	r3, #7
 80083cc:	e00e      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083ce:	2308      	movs	r3, #8
 80083d0:	e00c      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083d2:	2306      	movs	r3, #6
 80083d4:	e00a      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083d6:	2305      	movs	r3, #5
 80083d8:	e008      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083da:	2304      	movs	r3, #4
 80083dc:	e006      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083de:	2303      	movs	r3, #3
 80083e0:	e004      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e002      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <HAL_GPIO_DeInit+0xbc>
 80083ea:	2300      	movs	r3, #0
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	f002 0203 	and.w	r2, r2, #3
 80083f2:	0092      	lsls	r2, r2, #2
 80083f4:	4093      	lsls	r3, r2
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d132      	bne.n	8008462 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80083fc:	4b49      	ldr	r3, [pc, #292]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	43db      	mvns	r3, r3
 8008404:	4947      	ldr	r1, [pc, #284]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 8008406:	4013      	ands	r3, r2
 8008408:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800840a:	4b46      	ldr	r3, [pc, #280]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	43db      	mvns	r3, r3
 8008412:	4944      	ldr	r1, [pc, #272]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 8008414:	4013      	ands	r3, r2
 8008416:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008418:	4b42      	ldr	r3, [pc, #264]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	43db      	mvns	r3, r3
 8008420:	4940      	ldr	r1, [pc, #256]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 8008422:	4013      	ands	r3, r2
 8008424:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008426:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	43db      	mvns	r3, r3
 800842e:	493d      	ldr	r1, [pc, #244]	; (8008524 <HAL_GPIO_DeInit+0x1f4>)
 8008430:	4013      	ands	r3, r2
 8008432:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	220f      	movs	r2, #15
 800843e:	fa02 f303 	lsl.w	r3, r2, r3
 8008442:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008444:	4a2e      	ldr	r2, [pc, #184]	; (8008500 <HAL_GPIO_DeInit+0x1d0>)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	089b      	lsrs	r3, r3, #2
 800844a:	3302      	adds	r3, #2
 800844c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	43da      	mvns	r2, r3
 8008454:	482a      	ldr	r0, [pc, #168]	; (8008500 <HAL_GPIO_DeInit+0x1d0>)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	089b      	lsrs	r3, r3, #2
 800845a:	400a      	ands	r2, r1
 800845c:	3302      	adds	r3, #2
 800845e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	2103      	movs	r1, #3
 800846c:	fa01 f303 	lsl.w	r3, r1, r3
 8008470:	43db      	mvns	r3, r3
 8008472:	401a      	ands	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	08da      	lsrs	r2, r3, #3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3208      	adds	r2, #8
 8008480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	220f      	movs	r2, #15
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	43db      	mvns	r3, r3
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	08d2      	lsrs	r2, r2, #3
 8008498:	4019      	ands	r1, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3208      	adds	r2, #8
 800849e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	2103      	movs	r1, #3
 80084ac:	fa01 f303 	lsl.w	r3, r1, r3
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	2101      	movs	r1, #1
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	43db      	mvns	r3, r3
 80084c6:	401a      	ands	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2103      	movs	r1, #3
 80084d6:	fa01 f303 	lsl.w	r3, r1, r3
 80084da:	43db      	mvns	r3, r3
 80084dc:	401a      	ands	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	3301      	adds	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b0f      	cmp	r3, #15
 80084ec:	f67f af2e 	bls.w	800834c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40013800 	.word	0x40013800
 8008504:	40020000 	.word	0x40020000
 8008508:	40020400 	.word	0x40020400
 800850c:	40020800 	.word	0x40020800
 8008510:	40020c00 	.word	0x40020c00
 8008514:	40021000 	.word	0x40021000
 8008518:	40021400 	.word	0x40021400
 800851c:	40021800 	.word	0x40021800
 8008520:	40021c00 	.word	0x40021c00
 8008524:	40013c00 	.word	0x40013c00

08008528 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	887b      	ldrh	r3, [r7, #2]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
 8008544:	e001      	b.n	800854a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	807b      	strh	r3, [r7, #2]
 8008564:	4613      	mov	r3, r2
 8008566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008568:	787b      	ldrb	r3, [r7, #1]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800856e:	887a      	ldrh	r2, [r7, #2]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008574:	e003      	b.n	800857e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008576:	887b      	ldrh	r3, [r7, #2]
 8008578:	041a      	lsls	r2, r3, #16
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	619a      	str	r2, [r3, #24]
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e264      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d075      	beq.n	8008696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085aa:	4ba3      	ldr	r3, [pc, #652]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f003 030c 	and.w	r3, r3, #12
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d00c      	beq.n	80085d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085b6:	4ba0      	ldr	r3, [pc, #640]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d112      	bne.n	80085e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085c2:	4b9d      	ldr	r3, [pc, #628]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ce:	d10b      	bne.n	80085e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d0:	4b99      	ldr	r3, [pc, #612]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d05b      	beq.n	8008694 <HAL_RCC_OscConfig+0x108>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d157      	bne.n	8008694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e23f      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f0:	d106      	bne.n	8008600 <HAL_RCC_OscConfig+0x74>
 80085f2:	4b91      	ldr	r3, [pc, #580]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a90      	ldr	r2, [pc, #576]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e01d      	b.n	800863c <HAL_RCC_OscConfig+0xb0>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008608:	d10c      	bne.n	8008624 <HAL_RCC_OscConfig+0x98>
 800860a:	4b8b      	ldr	r3, [pc, #556]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a8a      	ldr	r2, [pc, #552]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	4b88      	ldr	r3, [pc, #544]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a87      	ldr	r2, [pc, #540]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 800861c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	e00b      	b.n	800863c <HAL_RCC_OscConfig+0xb0>
 8008624:	4b84      	ldr	r3, [pc, #528]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a83      	ldr	r2, [pc, #524]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 800862a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	4b81      	ldr	r3, [pc, #516]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a80      	ldr	r2, [pc, #512]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800863a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d013      	beq.n	800866c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008644:	f7fd f986 	bl	8005954 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800864c:	f7fd f982 	bl	8005954 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b64      	cmp	r3, #100	; 0x64
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e204      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800865e:	4b76      	ldr	r3, [pc, #472]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0f0      	beq.n	800864c <HAL_RCC_OscConfig+0xc0>
 800866a:	e014      	b.n	8008696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866c:	f7fd f972 	bl	8005954 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008674:	f7fd f96e 	bl	8005954 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b64      	cmp	r3, #100	; 0x64
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e1f0      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008686:	4b6c      	ldr	r3, [pc, #432]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0xe8>
 8008692:	e000      	b.n	8008696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d063      	beq.n	800876a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086a2:	4b65      	ldr	r3, [pc, #404]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 030c 	and.w	r3, r3, #12
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086ae:	4b62      	ldr	r3, [pc, #392]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d11c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086ba:	4b5f      	ldr	r3, [pc, #380]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d116      	bne.n	80086f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086c6:	4b5c      	ldr	r3, [pc, #368]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <HAL_RCC_OscConfig+0x152>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d001      	beq.n	80086de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e1c4      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086de:	4b56      	ldr	r3, [pc, #344]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4952      	ldr	r1, [pc, #328]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086f2:	e03a      	b.n	800876a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d020      	beq.n	800873e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086fc:	4b4f      	ldr	r3, [pc, #316]	; (800883c <HAL_RCC_OscConfig+0x2b0>)
 80086fe:	2201      	movs	r2, #1
 8008700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008702:	f7fd f927 	bl	8005954 <HAL_GetTick>
 8008706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008708:	e008      	b.n	800871c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800870a:	f7fd f923 	bl	8005954 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e1a5      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800871c:	4b46      	ldr	r3, [pc, #280]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0f0      	beq.n	800870a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008728:	4b43      	ldr	r3, [pc, #268]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	4940      	ldr	r1, [pc, #256]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008738:	4313      	orrs	r3, r2
 800873a:	600b      	str	r3, [r1, #0]
 800873c:	e015      	b.n	800876a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800873e:	4b3f      	ldr	r3, [pc, #252]	; (800883c <HAL_RCC_OscConfig+0x2b0>)
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fd f906 	bl	8005954 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800874c:	f7fd f902 	bl	8005954 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e184      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800875e:	4b36      	ldr	r3, [pc, #216]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d030      	beq.n	80087d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d016      	beq.n	80087ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800877e:	4b30      	ldr	r3, [pc, #192]	; (8008840 <HAL_RCC_OscConfig+0x2b4>)
 8008780:	2201      	movs	r2, #1
 8008782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008784:	f7fd f8e6 	bl	8005954 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800878c:	f7fd f8e2 	bl	8005954 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e164      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800879e:	4b26      	ldr	r3, [pc, #152]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80087a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0f0      	beq.n	800878c <HAL_RCC_OscConfig+0x200>
 80087aa:	e015      	b.n	80087d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <HAL_RCC_OscConfig+0x2b4>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087b2:	f7fd f8cf 	bl	8005954 <HAL_GetTick>
 80087b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087ba:	f7fd f8cb 	bl	8005954 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e14d      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087cc:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80087ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1f0      	bne.n	80087ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80a0 	beq.w	8008926 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087e6:	2300      	movs	r3, #0
 80087e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ea:	4b13      	ldr	r3, [pc, #76]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10f      	bne.n	8008816 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	4a0e      	ldr	r2, [pc, #56]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008804:	6413      	str	r3, [r2, #64]	; 0x40
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <HAL_RCC_OscConfig+0x2ac>)
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880e:	60bb      	str	r3, [r7, #8]
 8008810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <HAL_RCC_OscConfig+0x2b8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	2b00      	cmp	r3, #0
 8008820:	d121      	bne.n	8008866 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008822:	4b08      	ldr	r3, [pc, #32]	; (8008844 <HAL_RCC_OscConfig+0x2b8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a07      	ldr	r2, [pc, #28]	; (8008844 <HAL_RCC_OscConfig+0x2b8>)
 8008828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800882e:	f7fd f891 	bl	8005954 <HAL_GetTick>
 8008832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008834:	e011      	b.n	800885a <HAL_RCC_OscConfig+0x2ce>
 8008836:	bf00      	nop
 8008838:	40023800 	.word	0x40023800
 800883c:	42470000 	.word	0x42470000
 8008840:	42470e80 	.word	0x42470e80
 8008844:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008848:	f7fd f884 	bl	8005954 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e106      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800885a:	4b85      	ldr	r3, [pc, #532]	; (8008a70 <HAL_RCC_OscConfig+0x4e4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0f0      	beq.n	8008848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d106      	bne.n	800887c <HAL_RCC_OscConfig+0x2f0>
 800886e:	4b81      	ldr	r3, [pc, #516]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	4a80      	ldr	r2, [pc, #512]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	6713      	str	r3, [r2, #112]	; 0x70
 800887a:	e01c      	b.n	80088b6 <HAL_RCC_OscConfig+0x32a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b05      	cmp	r3, #5
 8008882:	d10c      	bne.n	800889e <HAL_RCC_OscConfig+0x312>
 8008884:	4b7b      	ldr	r3, [pc, #492]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008888:	4a7a      	ldr	r2, [pc, #488]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 800888a:	f043 0304 	orr.w	r3, r3, #4
 800888e:	6713      	str	r3, [r2, #112]	; 0x70
 8008890:	4b78      	ldr	r3, [pc, #480]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4a77      	ldr	r2, [pc, #476]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	6713      	str	r3, [r2, #112]	; 0x70
 800889c:	e00b      	b.n	80088b6 <HAL_RCC_OscConfig+0x32a>
 800889e:	4b75      	ldr	r3, [pc, #468]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	4a74      	ldr	r2, [pc, #464]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80088a4:	f023 0301 	bic.w	r3, r3, #1
 80088a8:	6713      	str	r3, [r2, #112]	; 0x70
 80088aa:	4b72      	ldr	r3, [pc, #456]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80088ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ae:	4a71      	ldr	r2, [pc, #452]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80088b0:	f023 0304 	bic.w	r3, r3, #4
 80088b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d015      	beq.n	80088ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088be:	f7fd f849 	bl	8005954 <HAL_GetTick>
 80088c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088c4:	e00a      	b.n	80088dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088c6:	f7fd f845 	bl	8005954 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0c5      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088dc:	4b65      	ldr	r3, [pc, #404]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0ee      	beq.n	80088c6 <HAL_RCC_OscConfig+0x33a>
 80088e8:	e014      	b.n	8008914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ea:	f7fd f833 	bl	8005954 <HAL_GetTick>
 80088ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f0:	e00a      	b.n	8008908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088f2:	f7fd f82f 	bl	8005954 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008900:	4293      	cmp	r3, r2
 8008902:	d901      	bls.n	8008908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e0af      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008908:	4b5a      	ldr	r3, [pc, #360]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1ee      	bne.n	80088f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d105      	bne.n	8008926 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800891a:	4b56      	ldr	r3, [pc, #344]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	4a55      	ldr	r2, [pc, #340]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 809b 	beq.w	8008a66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008930:	4b50      	ldr	r3, [pc, #320]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 030c 	and.w	r3, r3, #12
 8008938:	2b08      	cmp	r3, #8
 800893a:	d05c      	beq.n	80089f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d141      	bne.n	80089c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008944:	4b4c      	ldr	r3, [pc, #304]	; (8008a78 <HAL_RCC_OscConfig+0x4ec>)
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894a:	f7fd f803 	bl	8005954 <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008950:	e008      	b.n	8008964 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008952:	f7fc ffff 	bl	8005954 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d901      	bls.n	8008964 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e081      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008964:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1f0      	bne.n	8008952 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	69da      	ldr	r2, [r3, #28]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	019b      	lsls	r3, r3, #6
 8008980:	431a      	orrs	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	3b01      	subs	r3, #1
 800898a:	041b      	lsls	r3, r3, #16
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	4937      	ldr	r1, [pc, #220]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008996:	4313      	orrs	r3, r2
 8008998:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800899a:	4b37      	ldr	r3, [pc, #220]	; (8008a78 <HAL_RCC_OscConfig+0x4ec>)
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089a0:	f7fc ffd8 	bl	8005954 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a6:	e008      	b.n	80089ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a8:	f7fc ffd4 	bl	8005954 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d901      	bls.n	80089ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e056      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ba:	4b2e      	ldr	r3, [pc, #184]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0f0      	beq.n	80089a8 <HAL_RCC_OscConfig+0x41c>
 80089c6:	e04e      	b.n	8008a66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c8:	4b2b      	ldr	r3, [pc, #172]	; (8008a78 <HAL_RCC_OscConfig+0x4ec>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ce:	f7fc ffc1 	bl	8005954 <HAL_GetTick>
 80089d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d4:	e008      	b.n	80089e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d6:	f7fc ffbd 	bl	8005954 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e03f      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e8:	4b22      	ldr	r3, [pc, #136]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f0      	bne.n	80089d6 <HAL_RCC_OscConfig+0x44a>
 80089f4:	e037      	b.n	8008a66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e032      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a02:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <HAL_RCC_OscConfig+0x4e8>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d028      	beq.n	8008a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d121      	bne.n	8008a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d11a      	bne.n	8008a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a32:	4013      	ands	r3, r2
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d111      	bne.n	8008a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d107      	bne.n	8008a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d001      	beq.n	8008a66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40007000 	.word	0x40007000
 8008a74:	40023800 	.word	0x40023800
 8008a78:	42470060 	.word	0x42470060

08008a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0cc      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a90:	4b68      	ldr	r3, [pc, #416]	; (8008c34 <HAL_RCC_ClockConfig+0x1b8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d90c      	bls.n	8008ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a9e:	4b65      	ldr	r3, [pc, #404]	; (8008c34 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aa6:	4b63      	ldr	r3, [pc, #396]	; (8008c34 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d001      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0b8      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d020      	beq.n	8008b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ad0:	4b59      	ldr	r3, [pc, #356]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4a58      	ldr	r2, [pc, #352]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ae8:	4b53      	ldr	r3, [pc, #332]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	4a52      	ldr	r2, [pc, #328]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008af4:	4b50      	ldr	r3, [pc, #320]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	494d      	ldr	r1, [pc, #308]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d044      	beq.n	8008b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d107      	bne.n	8008b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b1a:	4b47      	ldr	r3, [pc, #284]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d119      	bne.n	8008b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e07f      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d003      	beq.n	8008b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d107      	bne.n	8008b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b3a:	4b3f      	ldr	r3, [pc, #252]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e06f      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b4a:	4b3b      	ldr	r3, [pc, #236]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e067      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b5a:	4b37      	ldr	r3, [pc, #220]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f023 0203 	bic.w	r2, r3, #3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4934      	ldr	r1, [pc, #208]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b6c:	f7fc fef2 	bl	8005954 <HAL_GetTick>
 8008b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b72:	e00a      	b.n	8008b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b74:	f7fc feee 	bl	8005954 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e04f      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b8a:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 020c 	and.w	r2, r3, #12
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d1eb      	bne.n	8008b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b9c:	4b25      	ldr	r3, [pc, #148]	; (8008c34 <HAL_RCC_ClockConfig+0x1b8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d20c      	bcs.n	8008bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008baa:	4b22      	ldr	r3, [pc, #136]	; (8008c34 <HAL_RCC_ClockConfig+0x1b8>)
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb2:	4b20      	ldr	r3, [pc, #128]	; (8008c34 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e032      	b.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bd0:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4916      	ldr	r1, [pc, #88]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bee:	4b12      	ldr	r3, [pc, #72]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	490e      	ldr	r1, [pc, #56]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c02:	f000 f889 	bl	8008d18 <HAL_RCC_GetSysClockFreq>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	091b      	lsrs	r3, r3, #4
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	490a      	ldr	r1, [pc, #40]	; (8008c3c <HAL_RCC_ClockConfig+0x1c0>)
 8008c14:	5ccb      	ldrb	r3, [r1, r3]
 8008c16:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1a:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <HAL_RCC_ClockConfig+0x1c4>)
 8008c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c1e:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fc f990 	bl	8004f48 <HAL_InitTick>

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40023c00 	.word	0x40023c00
 8008c38:	40023800 	.word	0x40023800
 8008c3c:	08021948 	.word	0x08021948
 8008c40:	200002dc 	.word	0x200002dc
 8008c44:	200002e0 	.word	0x200002e0

08008c48 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08c      	sub	sp, #48	; 0x30
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d129      	bne.n	8008cae <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	4b2b      	ldr	r3, [pc, #172]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c62:	4a2a      	ldr	r2, [pc, #168]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008c64:	f043 0301 	orr.w	r3, r3, #1
 8008c68:	6313      	str	r3, [r2, #48]	; 0x30
 8008c6a:	4b28      	ldr	r3, [pc, #160]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	61bb      	str	r3, [r7, #24]
 8008c74:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c80:	2303      	movs	r3, #3
 8008c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008c8c:	f107 031c 	add.w	r3, r7, #28
 8008c90:	4619      	mov	r1, r3
 8008c92:	481f      	ldr	r0, [pc, #124]	; (8008d10 <HAL_RCC_MCOConfig+0xc8>)
 8008c94:	f7ff f9b0 	bl	8007ff8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008c98:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	4919      	ldr	r1, [pc, #100]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8008cac:	e029      	b.n	8008d02 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8008cae:	2300      	movs	r3, #0
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	4a15      	ldr	r2, [pc, #84]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008cb8:	f043 0304 	orr.w	r3, r3, #4
 8008cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008ce0:	f107 031c 	add.w	r3, r7, #28
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	480b      	ldr	r0, [pc, #44]	; (8008d14 <HAL_RCC_MCOConfig+0xcc>)
 8008ce8:	f7ff f986 	bl	8007ff8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8008cec:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	00d9      	lsls	r1, r3, #3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	4903      	ldr	r1, [pc, #12]	; (8008d0c <HAL_RCC_MCOConfig+0xc4>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	608b      	str	r3, [r1, #8]
}
 8008d02:	bf00      	nop
 8008d04:	3730      	adds	r7, #48	; 0x30
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	40020000 	.word	0x40020000
 8008d14:	40020800 	.word	0x40020800

08008d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d18:	b5b0      	push	{r4, r5, r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d1e:	2100      	movs	r1, #0
 8008d20:	6079      	str	r1, [r7, #4]
 8008d22:	2100      	movs	r1, #0
 8008d24:	60f9      	str	r1, [r7, #12]
 8008d26:	2100      	movs	r1, #0
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d2e:	4952      	ldr	r1, [pc, #328]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d30:	6889      	ldr	r1, [r1, #8]
 8008d32:	f001 010c 	and.w	r1, r1, #12
 8008d36:	2908      	cmp	r1, #8
 8008d38:	d00d      	beq.n	8008d56 <HAL_RCC_GetSysClockFreq+0x3e>
 8008d3a:	2908      	cmp	r1, #8
 8008d3c:	f200 8094 	bhi.w	8008e68 <HAL_RCC_GetSysClockFreq+0x150>
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d002      	beq.n	8008d4a <HAL_RCC_GetSysClockFreq+0x32>
 8008d44:	2904      	cmp	r1, #4
 8008d46:	d003      	beq.n	8008d50 <HAL_RCC_GetSysClockFreq+0x38>
 8008d48:	e08e      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d4a:	4b4c      	ldr	r3, [pc, #304]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8008d4c:	60bb      	str	r3, [r7, #8]
       break;
 8008d4e:	e08e      	b.n	8008e6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d50:	4b4b      	ldr	r3, [pc, #300]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8008d52:	60bb      	str	r3, [r7, #8]
      break;
 8008d54:	e08b      	b.n	8008e6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d56:	4948      	ldr	r1, [pc, #288]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d58:	6849      	ldr	r1, [r1, #4]
 8008d5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008d5e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d60:	4945      	ldr	r1, [pc, #276]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d62:	6849      	ldr	r1, [r1, #4]
 8008d64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	d024      	beq.n	8008db6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d6c:	4942      	ldr	r1, [pc, #264]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d6e:	6849      	ldr	r1, [r1, #4]
 8008d70:	0989      	lsrs	r1, r1, #6
 8008d72:	4608      	mov	r0, r1
 8008d74:	f04f 0100 	mov.w	r1, #0
 8008d78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008d7c:	f04f 0500 	mov.w	r5, #0
 8008d80:	ea00 0204 	and.w	r2, r0, r4
 8008d84:	ea01 0305 	and.w	r3, r1, r5
 8008d88:	493d      	ldr	r1, [pc, #244]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8008d8a:	fb01 f003 	mul.w	r0, r1, r3
 8008d8e:	2100      	movs	r1, #0
 8008d90:	fb01 f102 	mul.w	r1, r1, r2
 8008d94:	1844      	adds	r4, r0, r1
 8008d96:	493a      	ldr	r1, [pc, #232]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8008d98:	fba2 0101 	umull	r0, r1, r2, r1
 8008d9c:	1863      	adds	r3, r4, r1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	f7f7 fa6a 	bl	8000280 <__aeabi_uldivmod>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4613      	mov	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	e04a      	b.n	8008e4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008db6:	4b30      	ldr	r3, [pc, #192]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	099b      	lsrs	r3, r3, #6
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	f04f 0300 	mov.w	r3, #0
 8008dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008dc6:	f04f 0100 	mov.w	r1, #0
 8008dca:	ea02 0400 	and.w	r4, r2, r0
 8008dce:	ea03 0501 	and.w	r5, r3, r1
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	f04f 0300 	mov.w	r3, #0
 8008dde:	014b      	lsls	r3, r1, #5
 8008de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008de4:	0142      	lsls	r2, r0, #5
 8008de6:	4610      	mov	r0, r2
 8008de8:	4619      	mov	r1, r3
 8008dea:	1b00      	subs	r0, r0, r4
 8008dec:	eb61 0105 	sbc.w	r1, r1, r5
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	f04f 0300 	mov.w	r3, #0
 8008df8:	018b      	lsls	r3, r1, #6
 8008dfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008dfe:	0182      	lsls	r2, r0, #6
 8008e00:	1a12      	subs	r2, r2, r0
 8008e02:	eb63 0301 	sbc.w	r3, r3, r1
 8008e06:	f04f 0000 	mov.w	r0, #0
 8008e0a:	f04f 0100 	mov.w	r1, #0
 8008e0e:	00d9      	lsls	r1, r3, #3
 8008e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e14:	00d0      	lsls	r0, r2, #3
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	1912      	adds	r2, r2, r4
 8008e1c:	eb45 0303 	adc.w	r3, r5, r3
 8008e20:	f04f 0000 	mov.w	r0, #0
 8008e24:	f04f 0100 	mov.w	r1, #0
 8008e28:	0299      	lsls	r1, r3, #10
 8008e2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008e2e:	0290      	lsls	r0, r2, #10
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4610      	mov	r0, r2
 8008e36:	4619      	mov	r1, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	f7f7 fa1e 	bl	8000280 <__aeabi_uldivmod>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4613      	mov	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	3301      	adds	r3, #1
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e64:	60bb      	str	r3, [r7, #8]
      break;
 8008e66:	e002      	b.n	8008e6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e68:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8008e6a:	60bb      	str	r3, [r7, #8]
      break;
 8008e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bdb0      	pop	{r4, r5, r7, pc}
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	00f42400 	.word	0x00f42400
 8008e80:	017d7840 	.word	0x017d7840

08008e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200002dc 	.word	0x200002dc

08008e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ea0:	f7ff fff0 	bl	8008e84 <HAL_RCC_GetHCLKFreq>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	0a9b      	lsrs	r3, r3, #10
 8008eac:	f003 0307 	and.w	r3, r3, #7
 8008eb0:	4903      	ldr	r1, [pc, #12]	; (8008ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eb2:	5ccb      	ldrb	r3, [r1, r3]
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	40023800 	.word	0x40023800
 8008ec0:	08021958 	.word	0x08021958

08008ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ec8:	f7ff ffdc 	bl	8008e84 <HAL_RCC_GetHCLKFreq>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	0b5b      	lsrs	r3, r3, #13
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	4903      	ldr	r1, [pc, #12]	; (8008ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eda:	5ccb      	ldrb	r3, [r1, r3]
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	08021958 	.word	0x08021958

08008eec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	220f      	movs	r2, #15
 8008efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008efc:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <HAL_RCC_GetClockConfig+0x5c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 0203 	and.w	r2, r3, #3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f08:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <HAL_RCC_GetClockConfig+0x5c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f14:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <HAL_RCC_GetClockConfig+0x5c>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f20:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <HAL_RCC_GetClockConfig+0x5c>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	08db      	lsrs	r3, r3, #3
 8008f26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <HAL_RCC_GetClockConfig+0x60>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0207 	and.w	r2, r3, #7
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	601a      	str	r2, [r3, #0]
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	40023c00 	.word	0x40023c00

08008f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e07b      	b.n	800905a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d108      	bne.n	8008f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f72:	d009      	beq.n	8008f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	61da      	str	r2, [r3, #28]
 8008f7a:	e005      	b.n	8008f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fb fe16 	bl	8004bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800900c:	ea42 0103 	orr.w	r1, r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	0c1b      	lsrs	r3, r3, #16
 8009026:	f003 0104 	and.w	r1, r3, #4
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	f003 0210 	and.w	r2, r3, #16
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69da      	ldr	r2, [r3, #28]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b088      	sub	sp, #32
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	603b      	str	r3, [r7, #0]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_SPI_Transmit+0x22>
 8009080:	2302      	movs	r3, #2
 8009082:	e126      	b.n	80092d2 <HAL_SPI_Transmit+0x270>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800908c:	f7fc fc62 	bl	8005954 <HAL_GetTick>
 8009090:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d002      	beq.n	80090a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090a2:	2302      	movs	r3, #2
 80090a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090a6:	e10b      	b.n	80092c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <HAL_SPI_Transmit+0x52>
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090b8:	e102      	b.n	80092c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2203      	movs	r2, #3
 80090be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	88fa      	ldrh	r2, [r7, #6]
 80090d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009100:	d10f      	bne.n	8009122 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009120:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912c:	2b40      	cmp	r3, #64	; 0x40
 800912e:	d007      	beq.n	8009140 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800913e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009148:	d14b      	bne.n	80091e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_SPI_Transmit+0xf6>
 8009152:	8afb      	ldrh	r3, [r7, #22]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d13e      	bne.n	80091d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915c:	881a      	ldrh	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	1c9a      	adds	r2, r3, #2
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800917c:	e02b      	b.n	80091d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b02      	cmp	r3, #2
 800918a:	d112      	bne.n	80091b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	881a      	ldrh	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919c:	1c9a      	adds	r2, r3, #2
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3b01      	subs	r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80091b0:	e011      	b.n	80091d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091b2:	f7fc fbcf 	bl	8005954 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d803      	bhi.n	80091ca <HAL_SPI_Transmit+0x168>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d102      	bne.n	80091d0 <HAL_SPI_Transmit+0x16e>
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091d4:	e074      	b.n	80092c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1ce      	bne.n	800917e <HAL_SPI_Transmit+0x11c>
 80091e0:	e04c      	b.n	800927c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <HAL_SPI_Transmit+0x18e>
 80091ea:	8afb      	ldrh	r3, [r7, #22]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d140      	bne.n	8009272 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	7812      	ldrb	r2, [r2, #0]
 80091fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009216:	e02c      	b.n	8009272 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b02      	cmp	r3, #2
 8009224:	d113      	bne.n	800924e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	330c      	adds	r3, #12
 8009230:	7812      	ldrb	r2, [r2, #0]
 8009232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	86da      	strh	r2, [r3, #54]	; 0x36
 800924c:	e011      	b.n	8009272 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800924e:	f7fc fb81 	bl	8005954 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d803      	bhi.n	8009266 <HAL_SPI_Transmit+0x204>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009264:	d102      	bne.n	800926c <HAL_SPI_Transmit+0x20a>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009270:	e026      	b.n	80092c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009276:	b29b      	uxth	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1cd      	bne.n	8009218 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fbcb 	bl	8009a1c <SPI_EndRxTxTransaction>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2220      	movs	r2, #32
 8009290:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10a      	bne.n	80092b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	613b      	str	r3, [r7, #16]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	613b      	str	r3, [r7, #16]
 80092ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	77fb      	strb	r3, [r7, #31]
 80092bc:	e000      	b.n	80092c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80092be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b088      	sub	sp, #32
 80092de:	af02      	add	r7, sp, #8
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	4613      	mov	r3, r2
 80092e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092f6:	d112      	bne.n	800931e <HAL_SPI_Receive+0x44>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10e      	bne.n	800931e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2204      	movs	r2, #4
 8009304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009308:	88fa      	ldrh	r2, [r7, #6]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	4613      	mov	r3, r2
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f8f1 	bl	80094fc <HAL_SPI_TransmitReceive>
 800931a:	4603      	mov	r3, r0
 800931c:	e0ea      	b.n	80094f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_SPI_Receive+0x52>
 8009328:	2302      	movs	r3, #2
 800932a:	e0e3      	b.n	80094f4 <HAL_SPI_Receive+0x21a>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009334:	f7fc fb0e 	bl	8005954 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b01      	cmp	r3, #1
 8009344:	d002      	beq.n	800934c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009346:	2302      	movs	r3, #2
 8009348:	75fb      	strb	r3, [r7, #23]
    goto error;
 800934a:	e0ca      	b.n	80094e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_SPI_Receive+0x7e>
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800935c:	e0c1      	b.n	80094e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2204      	movs	r2, #4
 8009362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	88fa      	ldrh	r2, [r7, #6]
 800937c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a4:	d10f      	bne.n	80093c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b40      	cmp	r3, #64	; 0x40
 80093d2:	d007      	beq.n	80093e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d162      	bne.n	80094b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80093ec:	e02e      	b.n	800944c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d115      	bne.n	8009428 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f103 020c 	add.w	r2, r3, #12
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800941c:	b29b      	uxth	r3, r3
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009426:	e011      	b.n	800944c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009428:	f7fc fa94 	bl	8005954 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d803      	bhi.n	8009440 <HAL_SPI_Receive+0x166>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d102      	bne.n	8009446 <HAL_SPI_Receive+0x16c>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d102      	bne.n	800944c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	75fb      	strb	r3, [r7, #23]
          goto error;
 800944a:	e04a      	b.n	80094e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1cb      	bne.n	80093ee <HAL_SPI_Receive+0x114>
 8009456:	e031      	b.n	80094bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b01      	cmp	r3, #1
 8009464:	d113      	bne.n	800948e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	b292      	uxth	r2, r2
 8009472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	1c9a      	adds	r2, r3, #2
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009482:	b29b      	uxth	r3, r3
 8009484:	3b01      	subs	r3, #1
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800948c:	e011      	b.n	80094b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800948e:	f7fc fa61 	bl	8005954 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d803      	bhi.n	80094a6 <HAL_SPI_Receive+0x1cc>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a4:	d102      	bne.n	80094ac <HAL_SPI_Receive+0x1d2>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80094b0:	e017      	b.n	80094e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1cd      	bne.n	8009458 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fa45 	bl	8009950 <SPI_EndRxTransaction>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	75fb      	strb	r3, [r7, #23]
 80094de:	e000      	b.n	80094e2 <HAL_SPI_Receive+0x208>
  }

error :
 80094e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08c      	sub	sp, #48	; 0x30
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800950a:	2301      	movs	r3, #1
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_SPI_TransmitReceive+0x26>
 800951e:	2302      	movs	r3, #2
 8009520:	e18a      	b.n	8009838 <HAL_SPI_TransmitReceive+0x33c>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800952a:	f7fc fa13 	bl	8005954 <HAL_GetTick>
 800952e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009548:	2b01      	cmp	r3, #1
 800954a:	d00f      	beq.n	800956c <HAL_SPI_TransmitReceive+0x70>
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009552:	d107      	bne.n	8009564 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d103      	bne.n	8009564 <HAL_SPI_TransmitReceive+0x68>
 800955c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009560:	2b04      	cmp	r3, #4
 8009562:	d003      	beq.n	800956c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009564:	2302      	movs	r3, #2
 8009566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800956a:	e15b      	b.n	8009824 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <HAL_SPI_TransmitReceive+0x82>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <HAL_SPI_TransmitReceive+0x82>
 8009578:	887b      	ldrh	r3, [r7, #2]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009584:	e14e      	b.n	8009824 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b04      	cmp	r3, #4
 8009590:	d003      	beq.n	800959a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2205      	movs	r2, #5
 8009596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	887a      	ldrh	r2, [r7, #2]
 80095aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	887a      	ldrh	r2, [r7, #2]
 80095b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	887a      	ldrh	r2, [r7, #2]
 80095bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d007      	beq.n	80095ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095f6:	d178      	bne.n	80096ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_SPI_TransmitReceive+0x10a>
 8009600:	8b7b      	ldrh	r3, [r7, #26]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d166      	bne.n	80096d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960a:	881a      	ldrh	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	1c9a      	adds	r2, r3, #2
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800962a:	e053      	b.n	80096d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b02      	cmp	r3, #2
 8009638:	d11b      	bne.n	8009672 <HAL_SPI_TransmitReceive+0x176>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d016      	beq.n	8009672 <HAL_SPI_TransmitReceive+0x176>
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	2b01      	cmp	r3, #1
 8009648:	d113      	bne.n	8009672 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964e:	881a      	ldrh	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965a:	1c9a      	adds	r2, r3, #2
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b01      	cmp	r3, #1
 800967e:	d119      	bne.n	80096b4 <HAL_SPI_TransmitReceive+0x1b8>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009684:	b29b      	uxth	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d014      	beq.n	80096b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	b292      	uxth	r2, r2
 8009696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	1c9a      	adds	r2, r3, #2
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096b0:	2301      	movs	r3, #1
 80096b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80096b4:	f7fc f94e 	bl	8005954 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d807      	bhi.n	80096d4 <HAL_SPI_TransmitReceive+0x1d8>
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d003      	beq.n	80096d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80096d2:	e0a7      	b.n	8009824 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1a6      	bne.n	800962c <HAL_SPI_TransmitReceive+0x130>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1a1      	bne.n	800962c <HAL_SPI_TransmitReceive+0x130>
 80096e8:	e07c      	b.n	80097e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_SPI_TransmitReceive+0x1fc>
 80096f2:	8b7b      	ldrh	r3, [r7, #26]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d16b      	bne.n	80097d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800971e:	e057      	b.n	80097d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d11c      	bne.n	8009768 <HAL_SPI_TransmitReceive+0x26c>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d017      	beq.n	8009768 <HAL_SPI_TransmitReceive+0x26c>
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	2b01      	cmp	r3, #1
 800973c:	d114      	bne.n	8009768 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	330c      	adds	r3, #12
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975a:	b29b      	uxth	r3, r3
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b01      	cmp	r3, #1
 8009774:	d119      	bne.n	80097aa <HAL_SPI_TransmitReceive+0x2ae>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d014      	beq.n	80097aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	b2d2      	uxtb	r2, r2
 800978c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b01      	subs	r3, #1
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097a6:	2301      	movs	r3, #1
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80097aa:	f7fc f8d3 	bl	8005954 <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d803      	bhi.n	80097c2 <HAL_SPI_TransmitReceive+0x2c6>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c0:	d102      	bne.n	80097c8 <HAL_SPI_TransmitReceive+0x2cc>
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097ce:	e029      	b.n	8009824 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1a2      	bne.n	8009720 <HAL_SPI_TransmitReceive+0x224>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d19d      	bne.n	8009720 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 f917 	bl	8009a1c <SPI_EndRxTxTransaction>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d006      	beq.n	8009802 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2220      	movs	r2, #32
 80097fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009800:	e010      	b.n	8009824 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	e000      	b.n	8009824 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009822:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009834:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009838:	4618      	mov	r0, r3
 800983a:	3730      	adds	r7, #48	; 0x30
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009850:	f7fc f880 	bl	8005954 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4413      	add	r3, r2
 800985e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009860:	f7fc f878 	bl	8005954 <HAL_GetTick>
 8009864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009866:	4b39      	ldr	r3, [pc, #228]	; (800994c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	015b      	lsls	r3, r3, #5
 800986c:	0d1b      	lsrs	r3, r3, #20
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	fb02 f303 	mul.w	r3, r2, r3
 8009874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009876:	e054      	b.n	8009922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d050      	beq.n	8009922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009880:	f7fc f868 	bl	8005954 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	429a      	cmp	r2, r3
 800988e:	d902      	bls.n	8009896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d13d      	bne.n	8009912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098ae:	d111      	bne.n	80098d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098b8:	d004      	beq.n	80098c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098c2:	d107      	bne.n	80098d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098dc:	d10f      	bne.n	80098fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e017      	b.n	8009942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	3b01      	subs	r3, #1
 8009920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4013      	ands	r3, r2
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	429a      	cmp	r2, r3
 8009930:	bf0c      	ite	eq
 8009932:	2301      	moveq	r3, #1
 8009934:	2300      	movne	r3, #0
 8009936:	b2db      	uxtb	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	429a      	cmp	r2, r3
 800993e:	d19b      	bne.n	8009878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200002dc 	.word	0x200002dc

08009950 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af02      	add	r7, sp, #8
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009964:	d111      	bne.n	800998a <SPI_EndRxTransaction+0x3a>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800996e:	d004      	beq.n	800997a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009978:	d107      	bne.n	800998a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009988:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009992:	d12a      	bne.n	80099ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800999c:	d012      	beq.n	80099c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2200      	movs	r2, #0
 80099a6:	2180      	movs	r1, #128	; 0x80
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f7ff ff49 	bl	8009840 <SPI_WaitFlagStateUntilTimeout>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d02d      	beq.n	8009a10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b8:	f043 0220 	orr.w	r2, r3, #32
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e026      	b.n	8009a12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2200      	movs	r2, #0
 80099cc:	2101      	movs	r1, #1
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff ff36 	bl	8009840 <SPI_WaitFlagStateUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01a      	beq.n	8009a10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	f043 0220 	orr.w	r2, r3, #32
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e013      	b.n	8009a12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2200      	movs	r2, #0
 80099f2:	2101      	movs	r1, #1
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff ff23 	bl	8009840 <SPI_WaitFlagStateUntilTimeout>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a04:	f043 0220 	orr.w	r2, r3, #32
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e000      	b.n	8009a12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <SPI_EndRxTxTransaction+0x7c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a1b      	ldr	r2, [pc, #108]	; (8009a9c <SPI_EndRxTxTransaction+0x80>)
 8009a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a32:	0d5b      	lsrs	r3, r3, #21
 8009a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a38:	fb02 f303 	mul.w	r3, r2, r3
 8009a3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a46:	d112      	bne.n	8009a6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2180      	movs	r1, #128	; 0x80
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7ff fef4 	bl	8009840 <SPI_WaitFlagStateUntilTimeout>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d016      	beq.n	8009a8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a62:	f043 0220 	orr.w	r2, r3, #32
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e00f      	b.n	8009a8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00a      	beq.n	8009a8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a84:	2b80      	cmp	r3, #128	; 0x80
 8009a86:	d0f2      	beq.n	8009a6e <SPI_EndRxTxTransaction+0x52>
 8009a88:	e000      	b.n	8009a8c <SPI_EndRxTxTransaction+0x70>
        break;
 8009a8a:	bf00      	nop
  }

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	200002dc 	.word	0x200002dc
 8009a9c:	165e9f81 	.word	0x165e9f81

08009aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e041      	b.n	8009b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fb f8cc 	bl	8004c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f000 fafe 	bl	800a0e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d001      	beq.n	8009b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e046      	b.n	8009be6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a23      	ldr	r2, [pc, #140]	; (8009bf4 <HAL_TIM_Base_Start+0xb4>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d022      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b72:	d01d      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a1f      	ldr	r2, [pc, #124]	; (8009bf8 <HAL_TIM_Base_Start+0xb8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d018      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <HAL_TIM_Base_Start+0xbc>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d013      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1c      	ldr	r2, [pc, #112]	; (8009c00 <HAL_TIM_Base_Start+0xc0>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00e      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <HAL_TIM_Base_Start+0xc4>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d009      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a19      	ldr	r2, [pc, #100]	; (8009c08 <HAL_TIM_Base_Start+0xc8>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d004      	beq.n	8009bb0 <HAL_TIM_Base_Start+0x70>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <HAL_TIM_Base_Start+0xcc>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d111      	bne.n	8009bd4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b06      	cmp	r3, #6
 8009bc0:	d010      	beq.n	8009be4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0201 	orr.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd2:	e007      	b.n	8009be4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0201 	orr.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40010000 	.word	0x40010000
 8009bf8:	40000400 	.word	0x40000400
 8009bfc:	40000800 	.word	0x40000800
 8009c00:	40000c00 	.word	0x40000c00
 8009c04:	40010400 	.word	0x40010400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40001800 	.word	0x40001800

08009c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d001      	beq.n	8009c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e04e      	b.n	8009cc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0201 	orr.w	r2, r2, #1
 8009c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a23      	ldr	r2, [pc, #140]	; (8009cd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d022      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c52:	d01d      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a1f      	ldr	r2, [pc, #124]	; (8009cd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d018      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a1e      	ldr	r2, [pc, #120]	; (8009cdc <HAL_TIM_Base_Start_IT+0xcc>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d013      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d00e      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a1b      	ldr	r2, [pc, #108]	; (8009ce4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d009      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a19      	ldr	r2, [pc, #100]	; (8009ce8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d004      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x80>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a18      	ldr	r2, [pc, #96]	; (8009cec <HAL_TIM_Base_Start_IT+0xdc>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d111      	bne.n	8009cb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b06      	cmp	r3, #6
 8009ca0:	d010      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f042 0201 	orr.w	r2, r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb2:	e007      	b.n	8009cc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	40010000 	.word	0x40010000
 8009cd8:	40000400 	.word	0x40000400
 8009cdc:	40000800 	.word	0x40000800
 8009ce0:	40000c00 	.word	0x40000c00
 8009ce4:	40010400 	.word	0x40010400
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	40001800 	.word	0x40001800

08009cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d122      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d11b      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0202 	mvn.w	r2, #2
 8009d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f9b5 	bl	800a0a2 <HAL_TIM_IC_CaptureCallback>
 8009d38:	e005      	b.n	8009d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f9a7 	bl	800a08e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f9b8 	bl	800a0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d122      	bne.n	8009da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d11b      	bne.n	8009da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0204 	mvn.w	r2, #4
 8009d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f98b 	bl	800a0a2 <HAL_TIM_IC_CaptureCallback>
 8009d8c:	e005      	b.n	8009d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f97d 	bl	800a08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f98e 	bl	800a0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f003 0308 	and.w	r3, r3, #8
 8009daa:	2b08      	cmp	r3, #8
 8009dac:	d122      	bne.n	8009df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f003 0308 	and.w	r3, r3, #8
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d11b      	bne.n	8009df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f06f 0208 	mvn.w	r2, #8
 8009dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2204      	movs	r2, #4
 8009dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f961 	bl	800a0a2 <HAL_TIM_IC_CaptureCallback>
 8009de0:	e005      	b.n	8009dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f953 	bl	800a08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f964 	bl	800a0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0310 	and.w	r3, r3, #16
 8009dfe:	2b10      	cmp	r3, #16
 8009e00:	d122      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	d11b      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f06f 0210 	mvn.w	r2, #16
 8009e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2208      	movs	r2, #8
 8009e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f937 	bl	800a0a2 <HAL_TIM_IC_CaptureCallback>
 8009e34:	e005      	b.n	8009e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f929 	bl	800a08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f93a 	bl	800a0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d10e      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d107      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f06f 0201 	mvn.w	r2, #1
 8009e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7f9 fcca 	bl	8003808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7e:	2b80      	cmp	r3, #128	; 0x80
 8009e80:	d10e      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8c:	2b80      	cmp	r3, #128	; 0x80
 8009e8e:	d107      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fae0 	bl	800a460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	d10e      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b40      	cmp	r3, #64	; 0x40
 8009eba:	d107      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f8ff 	bl	800a0ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	d10e      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d107      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f06f 0220 	mvn.w	r2, #32
 8009ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 faaa 	bl	800a44c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d101      	bne.n	8009f1c <HAL_TIM_ConfigClockSource+0x1c>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e0b4      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x186>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f54:	d03e      	beq.n	8009fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8009f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f5a:	f200 8087 	bhi.w	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f62:	f000 8086 	beq.w	800a072 <HAL_TIM_ConfigClockSource+0x172>
 8009f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f6a:	d87f      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f6c:	2b70      	cmp	r3, #112	; 0x70
 8009f6e:	d01a      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8009f70:	2b70      	cmp	r3, #112	; 0x70
 8009f72:	d87b      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f74:	2b60      	cmp	r3, #96	; 0x60
 8009f76:	d050      	beq.n	800a01a <HAL_TIM_ConfigClockSource+0x11a>
 8009f78:	2b60      	cmp	r3, #96	; 0x60
 8009f7a:	d877      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f7c:	2b50      	cmp	r3, #80	; 0x50
 8009f7e:	d03c      	beq.n	8009ffa <HAL_TIM_ConfigClockSource+0xfa>
 8009f80:	2b50      	cmp	r3, #80	; 0x50
 8009f82:	d873      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f84:	2b40      	cmp	r3, #64	; 0x40
 8009f86:	d058      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x13a>
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d86f      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f8c:	2b30      	cmp	r3, #48	; 0x30
 8009f8e:	d064      	beq.n	800a05a <HAL_TIM_ConfigClockSource+0x15a>
 8009f90:	2b30      	cmp	r3, #48	; 0x30
 8009f92:	d86b      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f94:	2b20      	cmp	r3, #32
 8009f96:	d060      	beq.n	800a05a <HAL_TIM_ConfigClockSource+0x15a>
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d867      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d05c      	beq.n	800a05a <HAL_TIM_ConfigClockSource+0x15a>
 8009fa0:	2b10      	cmp	r3, #16
 8009fa2:	d05a      	beq.n	800a05a <HAL_TIM_ConfigClockSource+0x15a>
 8009fa4:	e062      	b.n	800a06c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6818      	ldr	r0, [r3, #0]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	6899      	ldr	r1, [r3, #8]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f000 f9ad 	bl	800a314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	609a      	str	r2, [r3, #8]
      break;
 8009fd2:	e04f      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6818      	ldr	r0, [r3, #0]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	6899      	ldr	r1, [r3, #8]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f000 f996 	bl	800a314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ff6:	609a      	str	r2, [r3, #8]
      break;
 8009ff8:	e03c      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	461a      	mov	r2, r3
 800a008:	f000 f90a 	bl	800a220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2150      	movs	r1, #80	; 0x50
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f963 	bl	800a2de <TIM_ITRx_SetConfig>
      break;
 800a018:	e02c      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6859      	ldr	r1, [r3, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	461a      	mov	r2, r3
 800a028:	f000 f929 	bl	800a27e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2160      	movs	r1, #96	; 0x60
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f953 	bl	800a2de <TIM_ITRx_SetConfig>
      break;
 800a038:	e01c      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	6859      	ldr	r1, [r3, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	461a      	mov	r2, r3
 800a048:	f000 f8ea 	bl	800a220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2140      	movs	r1, #64	; 0x40
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f943 	bl	800a2de <TIM_ITRx_SetConfig>
      break;
 800a058:	e00c      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f000 f93a 	bl	800a2de <TIM_ITRx_SetConfig>
      break;
 800a06a:	e003      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	73fb      	strb	r3, [r7, #15]
      break;
 800a070:	e000      	b.n	800a074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a084:	7bfb      	ldrb	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a40      	ldr	r2, [pc, #256]	; (800a1f4 <TIM_Base_SetConfig+0x114>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d013      	beq.n	800a120 <TIM_Base_SetConfig+0x40>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fe:	d00f      	beq.n	800a120 <TIM_Base_SetConfig+0x40>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a3d      	ldr	r2, [pc, #244]	; (800a1f8 <TIM_Base_SetConfig+0x118>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00b      	beq.n	800a120 <TIM_Base_SetConfig+0x40>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a3c      	ldr	r2, [pc, #240]	; (800a1fc <TIM_Base_SetConfig+0x11c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d007      	beq.n	800a120 <TIM_Base_SetConfig+0x40>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a3b      	ldr	r2, [pc, #236]	; (800a200 <TIM_Base_SetConfig+0x120>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_Base_SetConfig+0x40>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a3a      	ldr	r2, [pc, #232]	; (800a204 <TIM_Base_SetConfig+0x124>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d108      	bne.n	800a132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a2f      	ldr	r2, [pc, #188]	; (800a1f4 <TIM_Base_SetConfig+0x114>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d02b      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a140:	d027      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a2c      	ldr	r2, [pc, #176]	; (800a1f8 <TIM_Base_SetConfig+0x118>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d023      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a2b      	ldr	r2, [pc, #172]	; (800a1fc <TIM_Base_SetConfig+0x11c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d01f      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a2a      	ldr	r2, [pc, #168]	; (800a200 <TIM_Base_SetConfig+0x120>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d01b      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a29      	ldr	r2, [pc, #164]	; (800a204 <TIM_Base_SetConfig+0x124>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d017      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a28      	ldr	r2, [pc, #160]	; (800a208 <TIM_Base_SetConfig+0x128>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d013      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a27      	ldr	r2, [pc, #156]	; (800a20c <TIM_Base_SetConfig+0x12c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d00f      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a26      	ldr	r2, [pc, #152]	; (800a210 <TIM_Base_SetConfig+0x130>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d00b      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a25      	ldr	r2, [pc, #148]	; (800a214 <TIM_Base_SetConfig+0x134>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d007      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a24      	ldr	r2, [pc, #144]	; (800a218 <TIM_Base_SetConfig+0x138>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d003      	beq.n	800a192 <TIM_Base_SetConfig+0xb2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a23      	ldr	r2, [pc, #140]	; (800a21c <TIM_Base_SetConfig+0x13c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d108      	bne.n	800a1a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a0a      	ldr	r2, [pc, #40]	; (800a1f4 <TIM_Base_SetConfig+0x114>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d003      	beq.n	800a1d8 <TIM_Base_SetConfig+0xf8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a0c      	ldr	r2, [pc, #48]	; (800a204 <TIM_Base_SetConfig+0x124>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d103      	bne.n	800a1e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	691a      	ldr	r2, [r3, #16]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	615a      	str	r2, [r3, #20]
}
 800a1e6:	bf00      	nop
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	40010000 	.word	0x40010000
 800a1f8:	40000400 	.word	0x40000400
 800a1fc:	40000800 	.word	0x40000800
 800a200:	40000c00 	.word	0x40000c00
 800a204:	40010400 	.word	0x40010400
 800a208:	40014000 	.word	0x40014000
 800a20c:	40014400 	.word	0x40014400
 800a210:	40014800 	.word	0x40014800
 800a214:	40001800 	.word	0x40001800
 800a218:	40001c00 	.word	0x40001c00
 800a21c:	40002000 	.word	0x40002000

0800a220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	f023 0201 	bic.w	r2, r3, #1
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a24a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f023 030a 	bic.w	r3, r3, #10
 800a25c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4313      	orrs	r3, r2
 800a264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	621a      	str	r2, [r3, #32]
}
 800a272:	bf00      	nop
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a27e:	b480      	push	{r7}
 800a280:	b087      	sub	sp, #28
 800a282:	af00      	add	r7, sp, #0
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	f023 0210 	bic.w	r2, r3, #16
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	031b      	lsls	r3, r3, #12
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b085      	sub	sp, #20
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	f043 0307 	orr.w	r3, r3, #7
 800a300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	609a      	str	r2, [r3, #8]
}
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a32e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	021a      	lsls	r2, r3, #8
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	431a      	orrs	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	609a      	str	r2, [r3, #8]
}
 800a348:	bf00      	nop
 800a34a:	371c      	adds	r7, #28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a364:	2b01      	cmp	r3, #1
 800a366:	d101      	bne.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a368:	2302      	movs	r3, #2
 800a36a:	e05a      	b.n	800a422 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a21      	ldr	r2, [pc, #132]	; (800a430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d022      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b8:	d01d      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d018      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a1b      	ldr	r2, [pc, #108]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d013      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1a      	ldr	r2, [pc, #104]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d00e      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a18      	ldr	r2, [pc, #96]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d009      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a17      	ldr	r2, [pc, #92]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d004      	beq.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a15      	ldr	r2, [pc, #84]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d10c      	bne.n	800a410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	4313      	orrs	r3, r2
 800a406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	40010000 	.word	0x40010000
 800a434:	40000400 	.word	0x40000400
 800a438:	40000800 	.word	0x40000800
 800a43c:	40000c00 	.word	0x40000c00
 800a440:	40010400 	.word	0x40010400
 800a444:	40014000 	.word	0x40014000
 800a448:	40001800 	.word	0x40001800

0800a44c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e03f      	b.n	800a506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fa fc20 	bl	8004ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	; 0x24
 800a4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 ffc7 	bl	800b44c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	695a      	ldr	r2, [r3, #20]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68da      	ldr	r2, [r3, #12]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b082      	sub	sp, #8
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e021      	b.n	800a564 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2224      	movs	r2, #36	; 0x24
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a536:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7fa fcc3 	bl	8004ec4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08a      	sub	sp, #40	; 0x28
 800a570:	af02      	add	r7, sp, #8
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	603b      	str	r3, [r7, #0]
 800a578:	4613      	mov	r3, r2
 800a57a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d17c      	bne.n	800a686 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <HAL_UART_Transmit+0x2c>
 800a592:	88fb      	ldrh	r3, [r7, #6]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e075      	b.n	800a688 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d101      	bne.n	800a5aa <HAL_UART_Transmit+0x3e>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e06e      	b.n	800a688 <HAL_UART_Transmit+0x11c>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2221      	movs	r2, #33	; 0x21
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5c0:	f7fb f9c8 	bl	8005954 <HAL_GetTick>
 800a5c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	88fa      	ldrh	r2, [r7, #6]
 800a5ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	88fa      	ldrh	r2, [r7, #6]
 800a5d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5da:	d108      	bne.n	800a5ee <HAL_UART_Transmit+0x82>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d104      	bne.n	800a5ee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	e003      	b.n	800a5f6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a5fe:	e02a      	b.n	800a656 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2200      	movs	r2, #0
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 fc54 	bl	800aeb8 <UART_WaitOnFlagUntilTimeout>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e036      	b.n	800a688 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10b      	bne.n	800a638 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a62e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	3302      	adds	r3, #2
 800a634:	61bb      	str	r3, [r7, #24]
 800a636:	e007      	b.n	800a648 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	3301      	adds	r3, #1
 800a646:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	b29a      	uxth	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1cf      	bne.n	800a600 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2200      	movs	r2, #0
 800a668:	2140      	movs	r1, #64	; 0x40
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 fc24 	bl	800aeb8 <UART_WaitOnFlagUntilTimeout>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e006      	b.n	800a688 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	e000      	b.n	800a688 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a686:	2302      	movs	r3, #2
  }
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b20      	cmp	r3, #32
 800a6a8:	d152      	bne.n	800a750 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a6b0:	88fb      	ldrh	r3, [r7, #6]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e04b      	b.n	800a752 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e044      	b.n	800a752 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 fc59 	bl	800af94 <UART_Start_Receive_DMA>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a6e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d12c      	bne.n	800a74a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d125      	bne.n	800a744 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	613b      	str	r3, [r7, #16]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	613b      	str	r3, [r7, #16]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	613b      	str	r3, [r7, #16]
 800a70c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	330c      	adds	r3, #12
 800a714:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	617b      	str	r3, [r7, #20]
   return(result);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f043 0310 	orr.w	r3, r3, #16
 800a724:	62bb      	str	r3, [r7, #40]	; 0x28
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	330c      	adds	r3, #12
 800a72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a72e:	627a      	str	r2, [r7, #36]	; 0x24
 800a730:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6a39      	ldr	r1, [r7, #32]
 800a734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e5      	bne.n	800a70e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a742:	e002      	b.n	800a74a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a74a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a74e:	e000      	b.n	800a752 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a750:	2302      	movs	r3, #2
  }
}
 800a752:	4618      	mov	r0, r3
 800a754:	3730      	adds	r7, #48	; 0x30
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b0ba      	sub	sp, #232	; 0xe8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a782:	2300      	movs	r3, #0
 800a784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a79a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10f      	bne.n	800a7c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x66>
 800a7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b2:	f003 0320 	and.w	r3, r3, #32
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fd8b 	bl	800b2d6 <UART_Receive_IT>
      return;
 800a7c0:	e256      	b.n	800ac70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 80de 	beq.w	800a988 <HAL_UART_IRQHandler+0x22c>
 800a7cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d106      	bne.n	800a7e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 80d1 	beq.w	800a988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00b      	beq.n	800a80a <HAL_UART_IRQHandler+0xae>
 800a7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	f043 0201 	orr.w	r2, r3, #1
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00b      	beq.n	800a82e <HAL_UART_IRQHandler+0xd2>
 800a816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	f043 0202 	orr.w	r2, r3, #2
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00b      	beq.n	800a852 <HAL_UART_IRQHandler+0xf6>
 800a83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	f043 0204 	orr.w	r2, r3, #4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a856:	f003 0308 	and.w	r3, r3, #8
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d011      	beq.n	800a882 <HAL_UART_IRQHandler+0x126>
 800a85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b00      	cmp	r3, #0
 800a868:	d105      	bne.n	800a876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a86a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	f043 0208 	orr.w	r2, r3, #8
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 81ed 	beq.w	800ac66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a890:	f003 0320 	and.w	r3, r3, #32
 800a894:	2b00      	cmp	r3, #0
 800a896:	d008      	beq.n	800a8aa <HAL_UART_IRQHandler+0x14e>
 800a898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a89c:	f003 0320 	and.w	r3, r3, #32
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fd16 	bl	800b2d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b4:	2b40      	cmp	r3, #64	; 0x40
 800a8b6:	bf0c      	ite	eq
 800a8b8:	2301      	moveq	r3, #1
 800a8ba:	2300      	movne	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	f003 0308 	and.w	r3, r3, #8
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d103      	bne.n	800a8d6 <HAL_UART_IRQHandler+0x17a>
 800a8ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d04f      	beq.n	800a976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fc1e 	bl	800b118 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e6:	2b40      	cmp	r3, #64	; 0x40
 800a8e8:	d141      	bne.n	800a96e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3314      	adds	r3, #20
 800a8f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3314      	adds	r3, #20
 800a912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a91a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a92e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1d9      	bne.n	800a8ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d013      	beq.n	800a966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	4a7d      	ldr	r2, [pc, #500]	; (800ab38 <HAL_UART_IRQHandler+0x3dc>)
 800a944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fb ff22 	bl	8006794 <HAL_DMA_Abort_IT>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d016      	beq.n	800a984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a964:	e00e      	b.n	800a984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f9a4 	bl	800acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a96c:	e00a      	b.n	800a984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f9a0 	bl	800acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a974:	e006      	b.n	800a984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f99c 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a982:	e170      	b.n	800ac66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a984:	bf00      	nop
    return;
 800a986:	e16e      	b.n	800ac66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	f040 814a 	bne.w	800ac26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a996:	f003 0310 	and.w	r3, r3, #16
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 8143 	beq.w	800ac26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 813c 	beq.w	800ac26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60bb      	str	r3, [r7, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	60bb      	str	r3, [r7, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ce:	2b40      	cmp	r3, #64	; 0x40
 800a9d0:	f040 80b4 	bne.w	800ab3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8140 	beq.w	800ac6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	f080 8139 	bcs.w	800ac6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa0a:	f000 8088 	beq.w	800ab1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	330c      	adds	r3, #12
 800aa14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa1c:	e853 3f00 	ldrex	r3, [r3]
 800aa20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	330c      	adds	r3, #12
 800aa36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1d9      	bne.n	800aa0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3314      	adds	r3, #20
 800aa60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa6c:	f023 0301 	bic.w	r3, r3, #1
 800aa70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e1      	bne.n	800aa5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	3314      	adds	r3, #20
 800aa9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aaa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3314      	adds	r3, #20
 800aab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aabc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e3      	bne.n	800aa96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	330c      	adds	r3, #12
 800aae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aaec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaee:	f023 0310 	bic.w	r3, r3, #16
 800aaf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	330c      	adds	r3, #12
 800aafc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab00:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e3      	bne.n	800aadc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fb fdcb 	bl	80066b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7fa fcc8 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab34:	e099      	b.n	800ac6a <HAL_UART_IRQHandler+0x50e>
 800ab36:	bf00      	nop
 800ab38:	0800b1df 	.word	0x0800b1df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f000 808b 	beq.w	800ac6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ab58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 8086 	beq.w	800ac6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	330c      	adds	r3, #12
 800ab68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	330c      	adds	r3, #12
 800ab82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab86:	647a      	str	r2, [r7, #68]	; 0x44
 800ab88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e3      	bne.n	800ab62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3314      	adds	r3, #20
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	623b      	str	r3, [r7, #32]
   return(result);
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	f023 0301 	bic.w	r3, r3, #1
 800abb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3314      	adds	r3, #20
 800abba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abbe:	633a      	str	r2, [r7, #48]	; 0x30
 800abc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e3      	bne.n	800ab9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	330c      	adds	r3, #12
 800abe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	60fb      	str	r3, [r7, #12]
   return(result);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f023 0310 	bic.w	r3, r3, #16
 800abf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	330c      	adds	r3, #12
 800ac00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac04:	61fa      	str	r2, [r7, #28]
 800ac06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	69b9      	ldr	r1, [r7, #24]
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	e841 2300 	strex	r3, r2, [r1]
 800ac10:	617b      	str	r3, [r7, #20]
   return(result);
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e3      	bne.n	800abe0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7fa fc50 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac24:	e023      	b.n	800ac6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d009      	beq.n	800ac46 <HAL_UART_IRQHandler+0x4ea>
 800ac32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fae1 	bl	800b206 <UART_Transmit_IT>
    return;
 800ac44:	e014      	b.n	800ac70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00e      	beq.n	800ac70 <HAL_UART_IRQHandler+0x514>
 800ac52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d008      	beq.n	800ac70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb21 	bl	800b2a6 <UART_EndTransmit_IT>
    return;
 800ac64:	e004      	b.n	800ac70 <HAL_UART_IRQHandler+0x514>
    return;
 800ac66:	bf00      	nop
 800ac68:	e002      	b.n	800ac70 <HAL_UART_IRQHandler+0x514>
      return;
 800ac6a:	bf00      	nop
 800ac6c:	e000      	b.n	800ac70 <HAL_UART_IRQHandler+0x514>
      return;
 800ac6e:	bf00      	nop
  }
}
 800ac70:	37e8      	adds	r7, #232	; 0xe8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop

0800ac78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b09c      	sub	sp, #112	; 0x70
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d172      	bne.n	800adca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ace4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace6:	2200      	movs	r2, #0
 800ace8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	330c      	adds	r3, #12
 800acf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad00:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	330c      	adds	r3, #12
 800ad08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad0a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e5      	bne.n	800acea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3314      	adds	r3, #20
 800ad24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	667b      	str	r3, [r7, #100]	; 0x64
 800ad36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad3e:	647a      	str	r2, [r7, #68]	; 0x44
 800ad40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3314      	adds	r3, #20
 800ad58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	623b      	str	r3, [r7, #32]
   return(result);
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad68:	663b      	str	r3, [r7, #96]	; 0x60
 800ad6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad72:	633a      	str	r2, [r7, #48]	; 0x30
 800ad74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d119      	bne.n	800adca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	330c      	adds	r3, #12
 800ad9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f023 0310 	bic.w	r3, r3, #16
 800adac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	330c      	adds	r3, #12
 800adb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adb6:	61fa      	str	r2, [r7, #28]
 800adb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adba:	69b9      	ldr	r1, [r7, #24]
 800adbc:	69fa      	ldr	r2, [r7, #28]
 800adbe:	e841 2300 	strex	r3, r2, [r1]
 800adc2:	617b      	str	r3, [r7, #20]
   return(result);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e5      	bne.n	800ad96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	2b01      	cmp	r3, #1
 800add0:	d106      	bne.n	800ade0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800add2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800add6:	4619      	mov	r1, r3
 800add8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800adda:	f7fa fb73 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adde:	e002      	b.n	800ade6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ade0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ade2:	f7ff ff53 	bl	800ac8c <HAL_UART_RxCpltCallback>
}
 800ade6:	bf00      	nop
 800ade8:	3770      	adds	r7, #112	; 0x70
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d108      	bne.n	800ae16 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae08:	085b      	lsrs	r3, r3, #1
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f7fa fb58 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae14:	e002      	b.n	800ae1c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff ff42 	bl	800aca0 <HAL_UART_RxHalfCpltCallback>
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	695b      	ldr	r3, [r3, #20]
 800ae3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae40:	2b80      	cmp	r3, #128	; 0x80
 800ae42:	bf0c      	ite	eq
 800ae44:	2301      	moveq	r3, #1
 800ae46:	2300      	movne	r3, #0
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b21      	cmp	r3, #33	; 0x21
 800ae56:	d108      	bne.n	800ae6a <UART_DMAError+0x46>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d005      	beq.n	800ae6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2200      	movs	r2, #0
 800ae62:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae64:	68b8      	ldr	r0, [r7, #8]
 800ae66:	f000 f92f 	bl	800b0c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b40      	cmp	r3, #64	; 0x40
 800ae76:	bf0c      	ite	eq
 800ae78:	2301      	moveq	r3, #1
 800ae7a:	2300      	movne	r3, #0
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b22      	cmp	r3, #34	; 0x22
 800ae8a:	d108      	bne.n	800ae9e <UART_DMAError+0x7a>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2200      	movs	r2, #0
 800ae96:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f000 f93d 	bl	800b118 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	f043 0210 	orr.w	r2, r3, #16
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aeaa:	68b8      	ldr	r0, [r7, #8]
 800aeac:	f7ff ff02 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeb0:	bf00      	nop
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b090      	sub	sp, #64	; 0x40
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	603b      	str	r3, [r7, #0]
 800aec4:	4613      	mov	r3, r2
 800aec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aec8:	e050      	b.n	800af6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d04c      	beq.n	800af6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d007      	beq.n	800aee8 <UART_WaitOnFlagUntilTimeout+0x30>
 800aed8:	f7fa fd3c 	bl	8005954 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d241      	bcs.n	800af6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	330c      	adds	r3, #12
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	330c      	adds	r3, #12
 800af06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af08:	637a      	str	r2, [r7, #52]	; 0x34
 800af0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e5      	bne.n	800aee8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3314      	adds	r3, #20
 800af22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	613b      	str	r3, [r7, #16]
   return(result);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f023 0301 	bic.w	r3, r3, #1
 800af32:	63bb      	str	r3, [r7, #56]	; 0x38
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3314      	adds	r3, #20
 800af3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af3c:	623a      	str	r2, [r7, #32]
 800af3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	69f9      	ldr	r1, [r7, #28]
 800af42:	6a3a      	ldr	r2, [r7, #32]
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	61bb      	str	r3, [r7, #24]
   return(result);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e5      	bne.n	800af1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2220      	movs	r2, #32
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e00f      	b.n	800af8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	4013      	ands	r3, r2
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	429a      	cmp	r2, r3
 800af7a:	bf0c      	ite	eq
 800af7c:	2301      	moveq	r3, #1
 800af7e:	2300      	movne	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	461a      	mov	r2, r3
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	429a      	cmp	r2, r3
 800af88:	d09f      	beq.n	800aeca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3740      	adds	r7, #64	; 0x40
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b098      	sub	sp, #96	; 0x60
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	4613      	mov	r3, r2
 800afa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	88fa      	ldrh	r2, [r7, #6]
 800afac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2222      	movs	r2, #34	; 0x22
 800afb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc0:	4a3e      	ldr	r2, [pc, #248]	; (800b0bc <UART_Start_Receive_DMA+0x128>)
 800afc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	4a3d      	ldr	r2, [pc, #244]	; (800b0c0 <UART_Start_Receive_DMA+0x12c>)
 800afca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd0:	4a3c      	ldr	r2, [pc, #240]	; (800b0c4 <UART_Start_Receive_DMA+0x130>)
 800afd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	2200      	movs	r2, #0
 800afda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3304      	adds	r3, #4
 800afec:	4619      	mov	r1, r3
 800afee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	f7fb fb06 	bl	8006604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aff8:	2300      	movs	r3, #0
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	613b      	str	r3, [r7, #16]
 800b00c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	330c      	adds	r3, #12
 800b01c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b020:	e853 3f00 	ldrex	r3, [r3]
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b02c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	330c      	adds	r3, #12
 800b034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b036:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b038:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b03c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b03e:	e841 2300 	strex	r3, r2, [r1]
 800b042:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1e5      	bne.n	800b016 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3314      	adds	r3, #20
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	f043 0301 	orr.w	r3, r3, #1
 800b060:	657b      	str	r3, [r7, #84]	; 0x54
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3314      	adds	r3, #20
 800b068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b06a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e5      	bne.n	800b04a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3314      	adds	r3, #20
 800b084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	617b      	str	r3, [r7, #20]
   return(result);
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b094:	653b      	str	r3, [r7, #80]	; 0x50
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3314      	adds	r3, #20
 800b09c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b09e:	627a      	str	r2, [r7, #36]	; 0x24
 800b0a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6a39      	ldr	r1, [r7, #32]
 800b0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e5      	bne.n	800b07e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3760      	adds	r7, #96	; 0x60
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	0800acc9 	.word	0x0800acc9
 800b0c0:	0800adef 	.word	0x0800adef
 800b0c4:	0800ae25 	.word	0x0800ae25

0800b0c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b089      	sub	sp, #36	; 0x24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	330c      	adds	r3, #12
 800b0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0e6:	61fb      	str	r3, [r7, #28]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	330c      	adds	r3, #12
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	61ba      	str	r2, [r7, #24]
 800b0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6979      	ldr	r1, [r7, #20]
 800b0f6:	69ba      	ldr	r2, [r7, #24]
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e5      	bne.n	800b0d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b10c:	bf00      	nop
 800b10e:	3724      	adds	r7, #36	; 0x24
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b095      	sub	sp, #84	; 0x54
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	330c      	adds	r3, #12
 800b126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b136:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	330c      	adds	r3, #12
 800b13e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b140:	643a      	str	r2, [r7, #64]	; 0x40
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e5      	bne.n	800b120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3314      	adds	r3, #20
 800b15a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	61fb      	str	r3, [r7, #28]
   return(result);
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	f023 0301 	bic.w	r3, r3, #1
 800b16a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3314      	adds	r3, #20
 800b172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b174:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b17a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e5      	bne.n	800b154 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d119      	bne.n	800b1c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	330c      	adds	r3, #12
 800b196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	e853 3f00 	ldrex	r3, [r3]
 800b19e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f023 0310 	bic.w	r3, r3, #16
 800b1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1b0:	61ba      	str	r2, [r7, #24]
 800b1b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	6979      	ldr	r1, [r7, #20]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e5      	bne.n	800b190 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b1d2:	bf00      	nop
 800b1d4:	3754      	adds	r7, #84	; 0x54
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f7ff fd5b 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b21      	cmp	r3, #33	; 0x21
 800b218:	d13e      	bne.n	800b298 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b222:	d114      	bne.n	800b24e <UART_Transmit_IT+0x48>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d110      	bne.n	800b24e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b240:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	1c9a      	adds	r2, r3, #2
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	621a      	str	r2, [r3, #32]
 800b24c:	e008      	b.n	800b260 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	1c59      	adds	r1, r3, #1
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6211      	str	r1, [r2, #32]
 800b258:	781a      	ldrb	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b264:	b29b      	uxth	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	b29b      	uxth	r3, r3
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	4619      	mov	r1, r3
 800b26e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10f      	bne.n	800b294 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b282:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b292:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	e000      	b.n	800b29a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b298:	2302      	movs	r3, #2
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68da      	ldr	r2, [r3, #12]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7ff fcd6 	bl	800ac78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b08c      	sub	sp, #48	; 0x30
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b22      	cmp	r3, #34	; 0x22
 800b2e8:	f040 80ab 	bne.w	800b442 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f4:	d117      	bne.n	800b326 <UART_Receive_IT+0x50>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d113      	bne.n	800b326 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b306:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b314:	b29a      	uxth	r2, r3
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31e:	1c9a      	adds	r2, r3, #2
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	629a      	str	r2, [r3, #40]	; 0x28
 800b324:	e026      	b.n	800b374 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b338:	d007      	beq.n	800b34a <UART_Receive_IT+0x74>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <UART_Receive_IT+0x82>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	b2da      	uxtb	r2, r3
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	701a      	strb	r2, [r3, #0]
 800b356:	e008      	b.n	800b36a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b364:	b2da      	uxtb	r2, r3
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	4619      	mov	r1, r3
 800b382:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b384:	2b00      	cmp	r3, #0
 800b386:	d15a      	bne.n	800b43e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f022 0220 	bic.w	r2, r2, #32
 800b396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	695a      	ldr	r2, [r3, #20]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f022 0201 	bic.w	r2, r2, #1
 800b3b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2220      	movs	r2, #32
 800b3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d135      	bne.n	800b434 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	330c      	adds	r3, #12
 800b3d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	e853 3f00 	ldrex	r3, [r3]
 800b3dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	f023 0310 	bic.w	r3, r3, #16
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	330c      	adds	r3, #12
 800b3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ee:	623a      	str	r2, [r7, #32]
 800b3f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	69f9      	ldr	r1, [r7, #28]
 800b3f4:	6a3a      	ldr	r2, [r7, #32]
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1e5      	bne.n	800b3ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0310 	and.w	r3, r3, #16
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d10a      	bne.n	800b426 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7fa f849 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
 800b432:	e002      	b.n	800b43a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fc29 	bl	800ac8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	e002      	b.n	800b444 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	e000      	b.n	800b444 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b442:	2302      	movs	r3, #2
  }
}
 800b444:	4618      	mov	r0, r3
 800b446:	3730      	adds	r7, #48	; 0x30
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	b09f      	sub	sp, #124	; 0x7c
 800b452:	af00      	add	r7, sp, #0
 800b454:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b462:	68d9      	ldr	r1, [r3, #12]
 800b464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	ea40 0301 	orr.w	r3, r0, r1
 800b46c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b470:	689a      	ldr	r2, [r3, #8]
 800b472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	431a      	orrs	r2, r3
 800b478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	431a      	orrs	r2, r3
 800b47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b480:	69db      	ldr	r3, [r3, #28]
 800b482:	4313      	orrs	r3, r2
 800b484:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b490:	f021 010c 	bic.w	r1, r1, #12
 800b494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b49a:	430b      	orrs	r3, r1
 800b49c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4aa:	6999      	ldr	r1, [r3, #24]
 800b4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	ea40 0301 	orr.w	r3, r0, r1
 800b4b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	4bc5      	ldr	r3, [pc, #788]	; (800b7d0 <UART_SetConfig+0x384>)
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d004      	beq.n	800b4ca <UART_SetConfig+0x7e>
 800b4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	4bc3      	ldr	r3, [pc, #780]	; (800b7d4 <UART_SetConfig+0x388>)
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d103      	bne.n	800b4d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4ca:	f7fd fcfb 	bl	8008ec4 <HAL_RCC_GetPCLK2Freq>
 800b4ce:	6778      	str	r0, [r7, #116]	; 0x74
 800b4d0:	e002      	b.n	800b4d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4d2:	f7fd fce3 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800b4d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4e0:	f040 80b6 	bne.w	800b650 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4e6:	461c      	mov	r4, r3
 800b4e8:	f04f 0500 	mov.w	r5, #0
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	462b      	mov	r3, r5
 800b4f0:	1891      	adds	r1, r2, r2
 800b4f2:	6439      	str	r1, [r7, #64]	; 0x40
 800b4f4:	415b      	adcs	r3, r3
 800b4f6:	647b      	str	r3, [r7, #68]	; 0x44
 800b4f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b4fc:	1912      	adds	r2, r2, r4
 800b4fe:	eb45 0303 	adc.w	r3, r5, r3
 800b502:	f04f 0000 	mov.w	r0, #0
 800b506:	f04f 0100 	mov.w	r1, #0
 800b50a:	00d9      	lsls	r1, r3, #3
 800b50c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b510:	00d0      	lsls	r0, r2, #3
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	1911      	adds	r1, r2, r4
 800b518:	6639      	str	r1, [r7, #96]	; 0x60
 800b51a:	416b      	adcs	r3, r5
 800b51c:	667b      	str	r3, [r7, #100]	; 0x64
 800b51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	461a      	mov	r2, r3
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	1891      	adds	r1, r2, r2
 800b52a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b52c:	415b      	adcs	r3, r3
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b534:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b538:	f7f4 fea2 	bl	8000280 <__aeabi_uldivmod>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4ba5      	ldr	r3, [pc, #660]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b542:	fba3 2302 	umull	r2, r3, r3, r2
 800b546:	095b      	lsrs	r3, r3, #5
 800b548:	011e      	lsls	r6, r3, #4
 800b54a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b54c:	461c      	mov	r4, r3
 800b54e:	f04f 0500 	mov.w	r5, #0
 800b552:	4622      	mov	r2, r4
 800b554:	462b      	mov	r3, r5
 800b556:	1891      	adds	r1, r2, r2
 800b558:	6339      	str	r1, [r7, #48]	; 0x30
 800b55a:	415b      	adcs	r3, r3
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34
 800b55e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b562:	1912      	adds	r2, r2, r4
 800b564:	eb45 0303 	adc.w	r3, r5, r3
 800b568:	f04f 0000 	mov.w	r0, #0
 800b56c:	f04f 0100 	mov.w	r1, #0
 800b570:	00d9      	lsls	r1, r3, #3
 800b572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b576:	00d0      	lsls	r0, r2, #3
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	1911      	adds	r1, r2, r4
 800b57e:	65b9      	str	r1, [r7, #88]	; 0x58
 800b580:	416b      	adcs	r3, r5
 800b582:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	461a      	mov	r2, r3
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	1891      	adds	r1, r2, r2
 800b590:	62b9      	str	r1, [r7, #40]	; 0x28
 800b592:	415b      	adcs	r3, r3
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b59a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b59e:	f7f4 fe6f 	bl	8000280 <__aeabi_uldivmod>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4b8c      	ldr	r3, [pc, #560]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b5a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	2164      	movs	r1, #100	; 0x64
 800b5b0:	fb01 f303 	mul.w	r3, r1, r3
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	3332      	adds	r3, #50	; 0x32
 800b5ba:	4a87      	ldr	r2, [pc, #540]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c0:	095b      	lsrs	r3, r3, #5
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5c8:	441e      	add	r6, r3
 800b5ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f04f 0100 	mov.w	r1, #0
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	1894      	adds	r4, r2, r2
 800b5d8:	623c      	str	r4, [r7, #32]
 800b5da:	415b      	adcs	r3, r3
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5e2:	1812      	adds	r2, r2, r0
 800b5e4:	eb41 0303 	adc.w	r3, r1, r3
 800b5e8:	f04f 0400 	mov.w	r4, #0
 800b5ec:	f04f 0500 	mov.w	r5, #0
 800b5f0:	00dd      	lsls	r5, r3, #3
 800b5f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b5f6:	00d4      	lsls	r4, r2, #3
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	1814      	adds	r4, r2, r0
 800b5fe:	653c      	str	r4, [r7, #80]	; 0x50
 800b600:	414b      	adcs	r3, r1
 800b602:	657b      	str	r3, [r7, #84]	; 0x54
 800b604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	461a      	mov	r2, r3
 800b60a:	f04f 0300 	mov.w	r3, #0
 800b60e:	1891      	adds	r1, r2, r2
 800b610:	61b9      	str	r1, [r7, #24]
 800b612:	415b      	adcs	r3, r3
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b61a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b61e:	f7f4 fe2f 	bl	8000280 <__aeabi_uldivmod>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4b6c      	ldr	r3, [pc, #432]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b628:	fba3 1302 	umull	r1, r3, r3, r2
 800b62c:	095b      	lsrs	r3, r3, #5
 800b62e:	2164      	movs	r1, #100	; 0x64
 800b630:	fb01 f303 	mul.w	r3, r1, r3
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	3332      	adds	r3, #50	; 0x32
 800b63a:	4a67      	ldr	r2, [pc, #412]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b63c:	fba2 2303 	umull	r2, r3, r2, r3
 800b640:	095b      	lsrs	r3, r3, #5
 800b642:	f003 0207 	and.w	r2, r3, #7
 800b646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4432      	add	r2, r6
 800b64c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b64e:	e0b9      	b.n	800b7c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b652:	461c      	mov	r4, r3
 800b654:	f04f 0500 	mov.w	r5, #0
 800b658:	4622      	mov	r2, r4
 800b65a:	462b      	mov	r3, r5
 800b65c:	1891      	adds	r1, r2, r2
 800b65e:	6139      	str	r1, [r7, #16]
 800b660:	415b      	adcs	r3, r3
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b668:	1912      	adds	r2, r2, r4
 800b66a:	eb45 0303 	adc.w	r3, r5, r3
 800b66e:	f04f 0000 	mov.w	r0, #0
 800b672:	f04f 0100 	mov.w	r1, #0
 800b676:	00d9      	lsls	r1, r3, #3
 800b678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b67c:	00d0      	lsls	r0, r2, #3
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	eb12 0804 	adds.w	r8, r2, r4
 800b686:	eb43 0905 	adc.w	r9, r3, r5
 800b68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4618      	mov	r0, r3
 800b690:	f04f 0100 	mov.w	r1, #0
 800b694:	f04f 0200 	mov.w	r2, #0
 800b698:	f04f 0300 	mov.w	r3, #0
 800b69c:	008b      	lsls	r3, r1, #2
 800b69e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b6a2:	0082      	lsls	r2, r0, #2
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	f7f4 fdea 	bl	8000280 <__aeabi_uldivmod>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4b49      	ldr	r3, [pc, #292]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b6b2:	fba3 2302 	umull	r2, r3, r3, r2
 800b6b6:	095b      	lsrs	r3, r3, #5
 800b6b8:	011e      	lsls	r6, r3, #4
 800b6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f04f 0100 	mov.w	r1, #0
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	1894      	adds	r4, r2, r2
 800b6c8:	60bc      	str	r4, [r7, #8]
 800b6ca:	415b      	adcs	r3, r3
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6d2:	1812      	adds	r2, r2, r0
 800b6d4:	eb41 0303 	adc.w	r3, r1, r3
 800b6d8:	f04f 0400 	mov.w	r4, #0
 800b6dc:	f04f 0500 	mov.w	r5, #0
 800b6e0:	00dd      	lsls	r5, r3, #3
 800b6e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b6e6:	00d4      	lsls	r4, r2, #3
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	462b      	mov	r3, r5
 800b6ec:	1814      	adds	r4, r2, r0
 800b6ee:	64bc      	str	r4, [r7, #72]	; 0x48
 800b6f0:	414b      	adcs	r3, r1
 800b6f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f04f 0100 	mov.w	r1, #0
 800b6fe:	f04f 0200 	mov.w	r2, #0
 800b702:	f04f 0300 	mov.w	r3, #0
 800b706:	008b      	lsls	r3, r1, #2
 800b708:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b70c:	0082      	lsls	r2, r0, #2
 800b70e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b712:	f7f4 fdb5 	bl	8000280 <__aeabi_uldivmod>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4b2f      	ldr	r3, [pc, #188]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b71c:	fba3 1302 	umull	r1, r3, r3, r2
 800b720:	095b      	lsrs	r3, r3, #5
 800b722:	2164      	movs	r1, #100	; 0x64
 800b724:	fb01 f303 	mul.w	r3, r1, r3
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	011b      	lsls	r3, r3, #4
 800b72c:	3332      	adds	r3, #50	; 0x32
 800b72e:	4a2a      	ldr	r2, [pc, #168]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b730:	fba2 2303 	umull	r2, r3, r2, r3
 800b734:	095b      	lsrs	r3, r3, #5
 800b736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b73a:	441e      	add	r6, r3
 800b73c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b73e:	4618      	mov	r0, r3
 800b740:	f04f 0100 	mov.w	r1, #0
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	1894      	adds	r4, r2, r2
 800b74a:	603c      	str	r4, [r7, #0]
 800b74c:	415b      	adcs	r3, r3
 800b74e:	607b      	str	r3, [r7, #4]
 800b750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b754:	1812      	adds	r2, r2, r0
 800b756:	eb41 0303 	adc.w	r3, r1, r3
 800b75a:	f04f 0400 	mov.w	r4, #0
 800b75e:	f04f 0500 	mov.w	r5, #0
 800b762:	00dd      	lsls	r5, r3, #3
 800b764:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b768:	00d4      	lsls	r4, r2, #3
 800b76a:	4622      	mov	r2, r4
 800b76c:	462b      	mov	r3, r5
 800b76e:	eb12 0a00 	adds.w	sl, r2, r0
 800b772:	eb43 0b01 	adc.w	fp, r3, r1
 800b776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f04f 0100 	mov.w	r1, #0
 800b780:	f04f 0200 	mov.w	r2, #0
 800b784:	f04f 0300 	mov.w	r3, #0
 800b788:	008b      	lsls	r3, r1, #2
 800b78a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b78e:	0082      	lsls	r2, r0, #2
 800b790:	4650      	mov	r0, sl
 800b792:	4659      	mov	r1, fp
 800b794:	f7f4 fd74 	bl	8000280 <__aeabi_uldivmod>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b79e:	fba3 1302 	umull	r1, r3, r3, r2
 800b7a2:	095b      	lsrs	r3, r3, #5
 800b7a4:	2164      	movs	r1, #100	; 0x64
 800b7a6:	fb01 f303 	mul.w	r3, r1, r3
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	011b      	lsls	r3, r3, #4
 800b7ae:	3332      	adds	r3, #50	; 0x32
 800b7b0:	4a09      	ldr	r2, [pc, #36]	; (800b7d8 <UART_SetConfig+0x38c>)
 800b7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b6:	095b      	lsrs	r3, r3, #5
 800b7b8:	f003 020f 	and.w	r2, r3, #15
 800b7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4432      	add	r2, r6
 800b7c2:	609a      	str	r2, [r3, #8]
}
 800b7c4:	bf00      	nop
 800b7c6:	377c      	adds	r7, #124	; 0x7c
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	bf00      	nop
 800b7d0:	40011000 	.word	0x40011000
 800b7d4:	40011400 	.word	0x40011400
 800b7d8:	51eb851f 	.word	0x51eb851f

0800b7dc <LWIP_ReInit>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
static void LWIP_ReInit()
{
 800b7dc:	b480      	push	{r7}
 800b7de:	af00      	add	r7, sp, #0
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800b7e0:	4b5c      	ldr	r3, [pc, #368]	; (800b954 <LWIP_ReInit+0x178>)
 800b7e2:	8a9b      	ldrh	r3, [r3, #20]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10e      	bne.n	800b808 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800b7ea:	4b5a      	ldr	r3, [pc, #360]	; (800b954 <LWIP_ReInit+0x178>)
 800b7ec:	8adb      	ldrh	r3, [r3, #22]
 800b7ee:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d109      	bne.n	800b808 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800b7f4:	4b57      	ldr	r3, [pc, #348]	; (800b954 <LWIP_ReInit+0x178>)
 800b7f6:	8b1b      	ldrh	r3, [r3, #24]
 800b7f8:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d104      	bne.n	800b808 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr3))
 800b7fe:	4b55      	ldr	r3, [pc, #340]	; (800b954 <LWIP_ReInit+0x178>)
 800b800:	8b5b      	ldrh	r3, [r3, #26]
 800b802:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800b804:	2b00      	cmp	r3, #0
 800b806:	d013      	beq.n	800b830 <LWIP_ReInit+0x54>
	{
		  IP_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.addr0;
 800b808:	4b52      	ldr	r3, [pc, #328]	; (800b954 <LWIP_ReInit+0x178>)
 800b80a:	8a9b      	ldrh	r3, [r3, #20]
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	4b52      	ldr	r3, [pc, #328]	; (800b958 <LWIP_ReInit+0x17c>)
 800b810:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.addr1;
 800b812:	4b50      	ldr	r3, [pc, #320]	; (800b954 <LWIP_ReInit+0x178>)
 800b814:	8adb      	ldrh	r3, [r3, #22]
 800b816:	b2da      	uxtb	r2, r3
 800b818:	4b4f      	ldr	r3, [pc, #316]	; (800b958 <LWIP_ReInit+0x17c>)
 800b81a:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.addr2;
 800b81c:	4b4d      	ldr	r3, [pc, #308]	; (800b954 <LWIP_ReInit+0x178>)
 800b81e:	8b1b      	ldrh	r3, [r3, #24]
 800b820:	b2da      	uxtb	r2, r3
 800b822:	4b4d      	ldr	r3, [pc, #308]	; (800b958 <LWIP_ReInit+0x17c>)
 800b824:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.addr3;
 800b826:	4b4b      	ldr	r3, [pc, #300]	; (800b954 <LWIP_ReInit+0x178>)
 800b828:	8b5b      	ldrh	r3, [r3, #26]
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	4b4a      	ldr	r3, [pc, #296]	; (800b958 <LWIP_ReInit+0x17c>)
 800b82e:	70da      	strb	r2, [r3, #3]
	}

	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800b830:	4b48      	ldr	r3, [pc, #288]	; (800b954 <LWIP_ReInit+0x178>)
 800b832:	8b9b      	ldrh	r3, [r3, #28]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10e      	bne.n	800b858 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800b83a:	4b46      	ldr	r3, [pc, #280]	; (800b954 <LWIP_ReInit+0x178>)
 800b83c:	8bdb      	ldrh	r3, [r3, #30]
 800b83e:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800b840:	2b00      	cmp	r3, #0
 800b842:	d109      	bne.n	800b858 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800b844:	4b43      	ldr	r3, [pc, #268]	; (800b954 <LWIP_ReInit+0x178>)
 800b846:	8c1b      	ldrh	r3, [r3, #32]
 800b848:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d104      	bne.n	800b858 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask3))
 800b84e:	4b41      	ldr	r3, [pc, #260]	; (800b954 <LWIP_ReInit+0x178>)
 800b850:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b852:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800b854:	2b00      	cmp	r3, #0
 800b856:	d013      	beq.n	800b880 <LWIP_ReInit+0xa4>
	{
		  NETMASK_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.mask0;
 800b858:	4b3e      	ldr	r3, [pc, #248]	; (800b954 <LWIP_ReInit+0x178>)
 800b85a:	8b9b      	ldrh	r3, [r3, #28]
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	4b3f      	ldr	r3, [pc, #252]	; (800b95c <LWIP_ReInit+0x180>)
 800b860:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.mask1;
 800b862:	4b3c      	ldr	r3, [pc, #240]	; (800b954 <LWIP_ReInit+0x178>)
 800b864:	8bdb      	ldrh	r3, [r3, #30]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	4b3c      	ldr	r3, [pc, #240]	; (800b95c <LWIP_ReInit+0x180>)
 800b86a:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.mask2;
 800b86c:	4b39      	ldr	r3, [pc, #228]	; (800b954 <LWIP_ReInit+0x178>)
 800b86e:	8c1b      	ldrh	r3, [r3, #32]
 800b870:	b2da      	uxtb	r2, r3
 800b872:	4b3a      	ldr	r3, [pc, #232]	; (800b95c <LWIP_ReInit+0x180>)
 800b874:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.mask3;
 800b876:	4b37      	ldr	r3, [pc, #220]	; (800b954 <LWIP_ReInit+0x178>)
 800b878:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	4b37      	ldr	r3, [pc, #220]	; (800b95c <LWIP_ReInit+0x180>)
 800b87e:	70da      	strb	r2, [r3, #3]
	}
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800b880:	4b34      	ldr	r3, [pc, #208]	; (800b954 <LWIP_ReInit+0x178>)
 800b882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10e      	bne.n	800b8a8 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800b88a:	4b32      	ldr	r3, [pc, #200]	; (800b954 <LWIP_ReInit+0x178>)
 800b88c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b88e:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800b890:	2b00      	cmp	r3, #0
 800b892:	d109      	bne.n	800b8a8 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800b894:	4b2f      	ldr	r3, [pc, #188]	; (800b954 <LWIP_ReInit+0x178>)
 800b896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b898:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d104      	bne.n	800b8a8 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway3))
 800b89e:	4b2d      	ldr	r3, [pc, #180]	; (800b954 <LWIP_ReInit+0x178>)
 800b8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8a2:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d013      	beq.n	800b8d0 <LWIP_ReInit+0xf4>
	{
		  GATEWAY_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.gateway0;
 800b8a8:	4b2a      	ldr	r3, [pc, #168]	; (800b954 <LWIP_ReInit+0x178>)
 800b8aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	4b2c      	ldr	r3, [pc, #176]	; (800b960 <LWIP_ReInit+0x184>)
 800b8b0:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.gateway1;
 800b8b2:	4b28      	ldr	r3, [pc, #160]	; (800b954 <LWIP_ReInit+0x178>)
 800b8b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	4b29      	ldr	r3, [pc, #164]	; (800b960 <LWIP_ReInit+0x184>)
 800b8ba:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.gateway2;
 800b8bc:	4b25      	ldr	r3, [pc, #148]	; (800b954 <LWIP_ReInit+0x178>)
 800b8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b27      	ldr	r3, [pc, #156]	; (800b960 <LWIP_ReInit+0x184>)
 800b8c4:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.gateway3;
 800b8c6:	4b23      	ldr	r3, [pc, #140]	; (800b954 <LWIP_ReInit+0x178>)
 800b8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	4b24      	ldr	r3, [pc, #144]	; (800b960 <LWIP_ReInit+0x184>)
 800b8ce:	70da      	strb	r2, [r3, #3]
	}
	settings.retain.eth_sett.addr0 = IP_ADDRESS[0];
 800b8d0:	4b21      	ldr	r3, [pc, #132]	; (800b958 <LWIP_ReInit+0x17c>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	4b1f      	ldr	r3, [pc, #124]	; (800b954 <LWIP_ReInit+0x178>)
 800b8d8:	829a      	strh	r2, [r3, #20]
	settings.retain.eth_sett.addr1 = IP_ADDRESS[1];
 800b8da:	4b1f      	ldr	r3, [pc, #124]	; (800b958 <LWIP_ReInit+0x17c>)
 800b8dc:	785b      	ldrb	r3, [r3, #1]
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	4b1c      	ldr	r3, [pc, #112]	; (800b954 <LWIP_ReInit+0x178>)
 800b8e2:	82da      	strh	r2, [r3, #22]
	settings.retain.eth_sett.addr2 = IP_ADDRESS[2];
 800b8e4:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <LWIP_ReInit+0x17c>)
 800b8e6:	789b      	ldrb	r3, [r3, #2]
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	4b1a      	ldr	r3, [pc, #104]	; (800b954 <LWIP_ReInit+0x178>)
 800b8ec:	831a      	strh	r2, [r3, #24]
	settings.retain.eth_sett.addr3 = IP_ADDRESS[3];
 800b8ee:	4b1a      	ldr	r3, [pc, #104]	; (800b958 <LWIP_ReInit+0x17c>)
 800b8f0:	78db      	ldrb	r3, [r3, #3]
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	4b17      	ldr	r3, [pc, #92]	; (800b954 <LWIP_ReInit+0x178>)
 800b8f6:	835a      	strh	r2, [r3, #26]

	settings.retain.eth_sett.mask0 = NETMASK_ADDRESS[0];
 800b8f8:	4b18      	ldr	r3, [pc, #96]	; (800b95c <LWIP_ReInit+0x180>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	4b15      	ldr	r3, [pc, #84]	; (800b954 <LWIP_ReInit+0x178>)
 800b900:	839a      	strh	r2, [r3, #28]
	settings.retain.eth_sett.mask1 = NETMASK_ADDRESS[1];
 800b902:	4b16      	ldr	r3, [pc, #88]	; (800b95c <LWIP_ReInit+0x180>)
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	b29a      	uxth	r2, r3
 800b908:	4b12      	ldr	r3, [pc, #72]	; (800b954 <LWIP_ReInit+0x178>)
 800b90a:	83da      	strh	r2, [r3, #30]
	settings.retain.eth_sett.mask2 = NETMASK_ADDRESS[2];
 800b90c:	4b13      	ldr	r3, [pc, #76]	; (800b95c <LWIP_ReInit+0x180>)
 800b90e:	789b      	ldrb	r3, [r3, #2]
 800b910:	b29a      	uxth	r2, r3
 800b912:	4b10      	ldr	r3, [pc, #64]	; (800b954 <LWIP_ReInit+0x178>)
 800b914:	841a      	strh	r2, [r3, #32]
	settings.retain.eth_sett.mask3 = NETMASK_ADDRESS[3];
 800b916:	4b11      	ldr	r3, [pc, #68]	; (800b95c <LWIP_ReInit+0x180>)
 800b918:	78db      	ldrb	r3, [r3, #3]
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	4b0d      	ldr	r3, [pc, #52]	; (800b954 <LWIP_ReInit+0x178>)
 800b91e:	845a      	strh	r2, [r3, #34]	; 0x22

	settings.retain.eth_sett.gateway0 =  GATEWAY_ADDRESS[0];
 800b920:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <LWIP_ReInit+0x184>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	b29a      	uxth	r2, r3
 800b926:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <LWIP_ReInit+0x178>)
 800b928:	849a      	strh	r2, [r3, #36]	; 0x24
	settings.retain.eth_sett.gateway1 =  GATEWAY_ADDRESS[1];
 800b92a:	4b0d      	ldr	r3, [pc, #52]	; (800b960 <LWIP_ReInit+0x184>)
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	4b08      	ldr	r3, [pc, #32]	; (800b954 <LWIP_ReInit+0x178>)
 800b932:	84da      	strh	r2, [r3, #38]	; 0x26
	settings.retain.eth_sett.gateway2 =  GATEWAY_ADDRESS[2];
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <LWIP_ReInit+0x184>)
 800b936:	789b      	ldrb	r3, [r3, #2]
 800b938:	b29a      	uxth	r2, r3
 800b93a:	4b06      	ldr	r3, [pc, #24]	; (800b954 <LWIP_ReInit+0x178>)
 800b93c:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.retain.eth_sett.gateway3 =  GATEWAY_ADDRESS[3];
 800b93e:	4b08      	ldr	r3, [pc, #32]	; (800b960 <LWIP_ReInit+0x184>)
 800b940:	78db      	ldrb	r3, [r3, #3]
 800b942:	b29a      	uxth	r2, r3
 800b944:	4b03      	ldr	r3, [pc, #12]	; (800b954 <LWIP_ReInit+0x178>)
 800b946:	855a      	strh	r2, [r3, #42]	; 0x2a


}
 800b948:	bf00      	nop
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	20007230 	.word	0x20007230
 800b958:	200076cc 	.word	0x200076cc
 800b95c:	200076c8 	.word	0x200076c8
 800b960:	2000768c 	.word	0x2000768c

0800b964 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b96a:	4b99      	ldr	r3, [pc, #612]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b96c:	22c0      	movs	r2, #192	; 0xc0
 800b96e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b970:	4b97      	ldr	r3, [pc, #604]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b972:	22a8      	movs	r2, #168	; 0xa8
 800b974:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800b976:	4b96      	ldr	r3, [pc, #600]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b978:	2264      	movs	r2, #100	; 0x64
 800b97a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 800b97c:	4b94      	ldr	r3, [pc, #592]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b97e:	22b1      	movs	r2, #177	; 0xb1
 800b980:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b982:	4b94      	ldr	r3, [pc, #592]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800b984:	22ff      	movs	r2, #255	; 0xff
 800b986:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b988:	4b92      	ldr	r3, [pc, #584]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800b98a:	22ff      	movs	r2, #255	; 0xff
 800b98c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b98e:	4b91      	ldr	r3, [pc, #580]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800b990:	22ff      	movs	r2, #255	; 0xff
 800b992:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b994:	4b8f      	ldr	r3, [pc, #572]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800b996:	2200      	movs	r2, #0
 800b998:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b99a:	4b8f      	ldr	r3, [pc, #572]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800b99c:	22c0      	movs	r2, #192	; 0xc0
 800b99e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b9a0:	4b8d      	ldr	r3, [pc, #564]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800b9a2:	22a8      	movs	r2, #168	; 0xa8
 800b9a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800b9a6:	4b8c      	ldr	r3, [pc, #560]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800b9a8:	2264      	movs	r2, #100	; 0x64
 800b9aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b9ac:	4b8a      	ldr	r3, [pc, #552]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  LWIP_ReInit();
 800b9b2:	f7ff ff13 	bl	800b7dc <LWIP_ReInit>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f005 ff41 	bl	8011840 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b9be:	4b84      	ldr	r3, [pc, #528]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	061a      	lsls	r2, r3, #24
 800b9c4:	4b82      	ldr	r3, [pc, #520]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9c6:	785b      	ldrb	r3, [r3, #1]
 800b9c8:	041b      	lsls	r3, r3, #16
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	4b80      	ldr	r3, [pc, #512]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9ce:	789b      	ldrb	r3, [r3, #2]
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	4a7e      	ldr	r2, [pc, #504]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9d6:	78d2      	ldrb	r2, [r2, #3]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	061a      	lsls	r2, r3, #24
 800b9dc:	4b7c      	ldr	r3, [pc, #496]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	0619      	lsls	r1, r3, #24
 800b9e2:	4b7b      	ldr	r3, [pc, #492]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9e4:	785b      	ldrb	r3, [r3, #1]
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	4319      	orrs	r1, r3
 800b9ea:	4b79      	ldr	r3, [pc, #484]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9ec:	789b      	ldrb	r3, [r3, #2]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	4977      	ldr	r1, [pc, #476]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800b9f4:	78c9      	ldrb	r1, [r1, #3]
 800b9f6:	430b      	orrs	r3, r1
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	4b73      	ldr	r3, [pc, #460]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	0619      	lsls	r1, r3, #24
 800ba06:	4b72      	ldr	r3, [pc, #456]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba08:	785b      	ldrb	r3, [r3, #1]
 800ba0a:	041b      	lsls	r3, r3, #16
 800ba0c:	4319      	orrs	r1, r3
 800ba0e:	4b70      	ldr	r3, [pc, #448]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba10:	789b      	ldrb	r3, [r3, #2]
 800ba12:	021b      	lsls	r3, r3, #8
 800ba14:	430b      	orrs	r3, r1
 800ba16:	496e      	ldr	r1, [pc, #440]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba18:	78c9      	ldrb	r1, [r1, #3]
 800ba1a:	430b      	orrs	r3, r1
 800ba1c:	0a1b      	lsrs	r3, r3, #8
 800ba1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba22:	431a      	orrs	r2, r3
 800ba24:	4b6a      	ldr	r3, [pc, #424]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	0619      	lsls	r1, r3, #24
 800ba2a:	4b69      	ldr	r3, [pc, #420]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba2c:	785b      	ldrb	r3, [r3, #1]
 800ba2e:	041b      	lsls	r3, r3, #16
 800ba30:	4319      	orrs	r1, r3
 800ba32:	4b67      	ldr	r3, [pc, #412]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba34:	789b      	ldrb	r3, [r3, #2]
 800ba36:	021b      	lsls	r3, r3, #8
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	4965      	ldr	r1, [pc, #404]	; (800bbd0 <MX_LWIP_Init+0x26c>)
 800ba3c:	78c9      	ldrb	r1, [r1, #3]
 800ba3e:	430b      	orrs	r3, r1
 800ba40:	0e1b      	lsrs	r3, r3, #24
 800ba42:	4313      	orrs	r3, r2
 800ba44:	4a65      	ldr	r2, [pc, #404]	; (800bbdc <MX_LWIP_Init+0x278>)
 800ba46:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ba48:	4b62      	ldr	r3, [pc, #392]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	061a      	lsls	r2, r3, #24
 800ba4e:	4b61      	ldr	r3, [pc, #388]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba50:	785b      	ldrb	r3, [r3, #1]
 800ba52:	041b      	lsls	r3, r3, #16
 800ba54:	431a      	orrs	r2, r3
 800ba56:	4b5f      	ldr	r3, [pc, #380]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba58:	789b      	ldrb	r3, [r3, #2]
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	4a5d      	ldr	r2, [pc, #372]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba60:	78d2      	ldrb	r2, [r2, #3]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	061a      	lsls	r2, r3, #24
 800ba66:	4b5b      	ldr	r3, [pc, #364]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	0619      	lsls	r1, r3, #24
 800ba6c:	4b59      	ldr	r3, [pc, #356]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	041b      	lsls	r3, r3, #16
 800ba72:	4319      	orrs	r1, r3
 800ba74:	4b57      	ldr	r3, [pc, #348]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba76:	789b      	ldrb	r3, [r3, #2]
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	4955      	ldr	r1, [pc, #340]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba7e:	78c9      	ldrb	r1, [r1, #3]
 800ba80:	430b      	orrs	r3, r1
 800ba82:	021b      	lsls	r3, r3, #8
 800ba84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba88:	431a      	orrs	r2, r3
 800ba8a:	4b52      	ldr	r3, [pc, #328]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	0619      	lsls	r1, r3, #24
 800ba90:	4b50      	ldr	r3, [pc, #320]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	4319      	orrs	r1, r3
 800ba98:	4b4e      	ldr	r3, [pc, #312]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800ba9a:	789b      	ldrb	r3, [r3, #2]
 800ba9c:	021b      	lsls	r3, r3, #8
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	494c      	ldr	r1, [pc, #304]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800baa2:	78c9      	ldrb	r1, [r1, #3]
 800baa4:	430b      	orrs	r3, r1
 800baa6:	0a1b      	lsrs	r3, r3, #8
 800baa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800baac:	431a      	orrs	r2, r3
 800baae:	4b49      	ldr	r3, [pc, #292]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	0619      	lsls	r1, r3, #24
 800bab4:	4b47      	ldr	r3, [pc, #284]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800bab6:	785b      	ldrb	r3, [r3, #1]
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	4319      	orrs	r1, r3
 800babc:	4b45      	ldr	r3, [pc, #276]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800babe:	789b      	ldrb	r3, [r3, #2]
 800bac0:	021b      	lsls	r3, r3, #8
 800bac2:	430b      	orrs	r3, r1
 800bac4:	4943      	ldr	r1, [pc, #268]	; (800bbd4 <MX_LWIP_Init+0x270>)
 800bac6:	78c9      	ldrb	r1, [r1, #3]
 800bac8:	430b      	orrs	r3, r1
 800baca:	0e1b      	lsrs	r3, r3, #24
 800bacc:	4313      	orrs	r3, r2
 800bace:	4a44      	ldr	r2, [pc, #272]	; (800bbe0 <MX_LWIP_Init+0x27c>)
 800bad0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bad2:	4b41      	ldr	r3, [pc, #260]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	061a      	lsls	r2, r3, #24
 800bad8:	4b3f      	ldr	r3, [pc, #252]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bada:	785b      	ldrb	r3, [r3, #1]
 800badc:	041b      	lsls	r3, r3, #16
 800bade:	431a      	orrs	r2, r3
 800bae0:	4b3d      	ldr	r3, [pc, #244]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bae2:	789b      	ldrb	r3, [r3, #2]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	4313      	orrs	r3, r2
 800bae8:	4a3b      	ldr	r2, [pc, #236]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800baea:	78d2      	ldrb	r2, [r2, #3]
 800baec:	4313      	orrs	r3, r2
 800baee:	061a      	lsls	r2, r3, #24
 800baf0:	4b39      	ldr	r3, [pc, #228]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	0619      	lsls	r1, r3, #24
 800baf6:	4b38      	ldr	r3, [pc, #224]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800baf8:	785b      	ldrb	r3, [r3, #1]
 800bafa:	041b      	lsls	r3, r3, #16
 800bafc:	4319      	orrs	r1, r3
 800bafe:	4b36      	ldr	r3, [pc, #216]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb00:	789b      	ldrb	r3, [r3, #2]
 800bb02:	021b      	lsls	r3, r3, #8
 800bb04:	430b      	orrs	r3, r1
 800bb06:	4934      	ldr	r1, [pc, #208]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb08:	78c9      	ldrb	r1, [r1, #3]
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	021b      	lsls	r3, r3, #8
 800bb0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb12:	431a      	orrs	r2, r3
 800bb14:	4b30      	ldr	r3, [pc, #192]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	0619      	lsls	r1, r3, #24
 800bb1a:	4b2f      	ldr	r3, [pc, #188]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	041b      	lsls	r3, r3, #16
 800bb20:	4319      	orrs	r1, r3
 800bb22:	4b2d      	ldr	r3, [pc, #180]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb24:	789b      	ldrb	r3, [r3, #2]
 800bb26:	021b      	lsls	r3, r3, #8
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	492b      	ldr	r1, [pc, #172]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb2c:	78c9      	ldrb	r1, [r1, #3]
 800bb2e:	430b      	orrs	r3, r1
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb36:	431a      	orrs	r2, r3
 800bb38:	4b27      	ldr	r3, [pc, #156]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	0619      	lsls	r1, r3, #24
 800bb3e:	4b26      	ldr	r3, [pc, #152]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb40:	785b      	ldrb	r3, [r3, #1]
 800bb42:	041b      	lsls	r3, r3, #16
 800bb44:	4319      	orrs	r1, r3
 800bb46:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb48:	789b      	ldrb	r3, [r3, #2]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	430b      	orrs	r3, r1
 800bb4e:	4922      	ldr	r1, [pc, #136]	; (800bbd8 <MX_LWIP_Init+0x274>)
 800bb50:	78c9      	ldrb	r1, [r1, #3]
 800bb52:	430b      	orrs	r3, r1
 800bb54:	0e1b      	lsrs	r3, r3, #24
 800bb56:	4313      	orrs	r3, r2
 800bb58:	4a22      	ldr	r2, [pc, #136]	; (800bbe4 <MX_LWIP_Init+0x280>)
 800bb5a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bb5c:	4b22      	ldr	r3, [pc, #136]	; (800bbe8 <MX_LWIP_Init+0x284>)
 800bb5e:	9302      	str	r3, [sp, #8]
 800bb60:	4b22      	ldr	r3, [pc, #136]	; (800bbec <MX_LWIP_Init+0x288>)
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	2300      	movs	r3, #0
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	4b1e      	ldr	r3, [pc, #120]	; (800bbe4 <MX_LWIP_Init+0x280>)
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	; (800bbe0 <MX_LWIP_Init+0x27c>)
 800bb6c:	491b      	ldr	r1, [pc, #108]	; (800bbdc <MX_LWIP_Init+0x278>)
 800bb6e:	4820      	ldr	r0, [pc, #128]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bb70:	f006 fbea 	bl	8012348 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bb74:	481e      	ldr	r0, [pc, #120]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bb76:	f006 fd99 	bl	80126ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bb7a:	4b1d      	ldr	r3, [pc, #116]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bb7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb80:	089b      	lsrs	r3, r3, #2
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <MX_LWIP_Init+0x230>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bb8c:	4818      	ldr	r0, [pc, #96]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bb8e:	f006 fd9d 	bl	80126cc <netif_set_up>
 800bb92:	e002      	b.n	800bb9a <MX_LWIP_Init+0x236>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bb94:	4816      	ldr	r0, [pc, #88]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bb96:	f006 fe05 	bl	80127a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800bb9a:	4916      	ldr	r1, [pc, #88]	; (800bbf4 <MX_LWIP_Init+0x290>)
 800bb9c:	4814      	ldr	r0, [pc, #80]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bb9e:	f006 fe33 	bl	8012808 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800bba2:	2300      	movs	r3, #0
 800bba4:	603b      	str	r3, [r7, #0]
 800bba6:	2300      	movs	r3, #0
 800bba8:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800bbaa:	463b      	mov	r3, r7
 800bbac:	2101      	movs	r1, #1
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fd36 	bl	800c620 <osSemaphoreCreate>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	4a10      	ldr	r2, [pc, #64]	; (800bbf8 <MX_LWIP_Init+0x294>)
 800bbb8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800bbba:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <MX_LWIP_Init+0x298>)
 800bbbc:	4a0c      	ldr	r2, [pc, #48]	; (800bbf0 <MX_LWIP_Init+0x28c>)
 800bbbe:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	; (800bbf8 <MX_LWIP_Init+0x294>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a0d      	ldr	r2, [pc, #52]	; (800bbfc <MX_LWIP_Init+0x298>)
 800bbc6:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bbc8:	bf00      	nop
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	200076cc 	.word	0x200076cc
 800bbd4:	200076c8 	.word	0x200076c8
 800bbd8:	2000768c 	.word	0x2000768c
 800bbdc:	200076c4 	.word	0x200076c4
 800bbe0:	200076d0 	.word	0x200076d0
 800bbe4:	200076d4 	.word	0x200076d4
 800bbe8:	08011751 	.word	0x08011751
 800bbec:	0800c22d 	.word	0x0800c22d
 800bbf0:	20007690 	.word	0x20007690
 800bbf4:	0800c299 	.word	0x0800c299
 800bbf8:	20000724 	.word	0x20000724
 800bbfc:	20007684 	.word	0x20007684

0800bc00 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08e      	sub	sp, #56	; 0x38
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	605a      	str	r2, [r3, #4]
 800bc12:	609a      	str	r2, [r3, #8]
 800bc14:	60da      	str	r2, [r3, #12]
 800bc16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a4a      	ldr	r2, [pc, #296]	; (800bd48 <HAL_ETH_MspInit+0x148>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	f040 808d 	bne.w	800bd3e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bc24:	2300      	movs	r3, #0
 800bc26:	623b      	str	r3, [r7, #32]
 800bc28:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2c:	4a47      	ldr	r2, [pc, #284]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bc32:	6313      	str	r3, [r2, #48]	; 0x30
 800bc34:	4b45      	ldr	r3, [pc, #276]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc3c:	623b      	str	r3, [r7, #32]
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	2300      	movs	r3, #0
 800bc42:	61fb      	str	r3, [r7, #28]
 800bc44:	4b41      	ldr	r3, [pc, #260]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc48:	4a40      	ldr	r2, [pc, #256]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc4e:	6313      	str	r3, [r2, #48]	; 0x30
 800bc50:	4b3e      	ldr	r3, [pc, #248]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61bb      	str	r3, [r7, #24]
 800bc60:	4b3a      	ldr	r3, [pc, #232]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc64:	4a39      	ldr	r2, [pc, #228]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc6a:	6313      	str	r3, [r2, #48]	; 0x30
 800bc6c:	4b37      	ldr	r3, [pc, #220]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc74:	61bb      	str	r3, [r7, #24]
 800bc76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	4b33      	ldr	r3, [pc, #204]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc80:	4a32      	ldr	r2, [pc, #200]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc82:	f043 0304 	orr.w	r3, r3, #4
 800bc86:	6313      	str	r3, [r2, #48]	; 0x30
 800bc88:	4b30      	ldr	r3, [pc, #192]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc94:	2300      	movs	r3, #0
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	4b2c      	ldr	r3, [pc, #176]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	4a2b      	ldr	r2, [pc, #172]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	6313      	str	r3, [r2, #48]	; 0x30
 800bca4:	4b29      	ldr	r3, [pc, #164]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	4b25      	ldr	r3, [pc, #148]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bcb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb8:	4a24      	ldr	r2, [pc, #144]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bcba:	f043 0302 	orr.w	r3, r3, #2
 800bcbe:	6313      	str	r3, [r2, #48]	; 0x30
 800bcc0:	4b22      	ldr	r3, [pc, #136]	; (800bd4c <HAL_ETH_MspInit+0x14c>)
 800bcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc4:	f003 0302 	and.w	r3, r3, #2
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bccc:	2332      	movs	r3, #50	; 0x32
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bcdc:	230b      	movs	r3, #11
 800bcde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bce4:	4619      	mov	r1, r3
 800bce6:	481a      	ldr	r0, [pc, #104]	; (800bd50 <HAL_ETH_MspInit+0x150>)
 800bce8:	f7fc f986 	bl	8007ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bcec:	2386      	movs	r3, #134	; 0x86
 800bcee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bcfc:	230b      	movs	r3, #11
 800bcfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd04:	4619      	mov	r1, r3
 800bd06:	4813      	ldr	r0, [pc, #76]	; (800bd54 <HAL_ETH_MspInit+0x154>)
 800bd08:	f7fc f976 	bl	8007ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800bd0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bd10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd12:	2302      	movs	r3, #2
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd1e:	230b      	movs	r3, #11
 800bd20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd26:	4619      	mov	r1, r3
 800bd28:	480b      	ldr	r0, [pc, #44]	; (800bd58 <HAL_ETH_MspInit+0x158>)
 800bd2a:	f7fc f965 	bl	8007ff8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2105      	movs	r1, #5
 800bd32:	203d      	movs	r0, #61	; 0x3d
 800bd34:	f7fa fb22 	bl	800637c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bd38:	203d      	movs	r0, #61	; 0x3d
 800bd3a:	f7fa fb3b 	bl	80063b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bd3e:	bf00      	nop
 800bd40:	3738      	adds	r7, #56	; 0x38
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	40028000 	.word	0x40028000
 800bd4c:	40023800 	.word	0x40023800
 800bd50:	40020800 	.word	0x40020800
 800bd54:	40020000 	.word	0x40020000
 800bd58:	40020400 	.word	0x40020400

0800bd5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <HAL_ETH_RxCpltCallback+0x1c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 fcd9 	bl	800c720 <osSemaphoreRelease>
}
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20000728 	.word	0x20000728

0800bd7c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bd7c:	b5b0      	push	{r4, r5, r7, lr}
 800bd7e:	b090      	sub	sp, #64	; 0x40
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bd88:	4b5f      	ldr	r3, [pc, #380]	; (800bf08 <low_level_init+0x18c>)
 800bd8a:	4a60      	ldr	r2, [pc, #384]	; (800bf0c <low_level_init+0x190>)
 800bd8c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800bd8e:	4b5e      	ldr	r3, [pc, #376]	; (800bf08 <low_level_init+0x18c>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800bd94:	4b5c      	ldr	r3, [pc, #368]	; (800bf08 <low_level_init+0x18c>)
 800bd96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bd9a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800bd9c:	4b5a      	ldr	r3, [pc, #360]	; (800bf08 <low_level_init+0x18c>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bda2:	4b59      	ldr	r3, [pc, #356]	; (800bf08 <low_level_init+0x18c>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800bdae:	2380      	movs	r3, #128	; 0x80
 800bdb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800bdb4:	23e1      	movs	r3, #225	; 0xe1
 800bdb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x13;
 800bdc0:	2313      	movs	r3, #19
 800bdc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800bdcc:	4a4e      	ldr	r2, [pc, #312]	; (800bf08 <low_level_init+0x18c>)
 800bdce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdd2:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bdd4:	4b4c      	ldr	r3, [pc, #304]	; (800bf08 <low_level_init+0x18c>)
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bdda:	4b4b      	ldr	r3, [pc, #300]	; (800bf08 <low_level_init+0x18c>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bde0:	4b49      	ldr	r3, [pc, #292]	; (800bf08 <low_level_init+0x18c>)
 800bde2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bde6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bde8:	4847      	ldr	r0, [pc, #284]	; (800bf08 <low_level_init+0x18c>)
 800bdea:	f7fa ff5f 	bl	8006cac <HAL_ETH_Init>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800bdf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d108      	bne.n	800be0e <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be02:	f043 0304 	orr.w	r3, r3, #4
 800be06:	b2da      	uxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800be0e:	2304      	movs	r3, #4
 800be10:	4a3f      	ldr	r2, [pc, #252]	; (800bf10 <low_level_init+0x194>)
 800be12:	4940      	ldr	r1, [pc, #256]	; (800bf14 <low_level_init+0x198>)
 800be14:	483c      	ldr	r0, [pc, #240]	; (800bf08 <low_level_init+0x18c>)
 800be16:	f7fb f8e5 	bl	8006fe4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800be1a:	2304      	movs	r3, #4
 800be1c:	4a3e      	ldr	r2, [pc, #248]	; (800bf18 <low_level_init+0x19c>)
 800be1e:	493f      	ldr	r1, [pc, #252]	; (800bf1c <low_level_init+0x1a0>)
 800be20:	4839      	ldr	r0, [pc, #228]	; (800bf08 <low_level_init+0x18c>)
 800be22:	f7fb f948 	bl	80070b6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2206      	movs	r2, #6
 800be2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800be2e:	4b36      	ldr	r3, [pc, #216]	; (800bf08 <low_level_init+0x18c>)
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	781a      	ldrb	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800be3a:	4b33      	ldr	r3, [pc, #204]	; (800bf08 <low_level_init+0x18c>)
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	785a      	ldrb	r2, [r3, #1]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800be46:	4b30      	ldr	r3, [pc, #192]	; (800bf08 <low_level_init+0x18c>)
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	789a      	ldrb	r2, [r3, #2]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800be52:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <low_level_init+0x18c>)
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	78da      	ldrb	r2, [r3, #3]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800be5e:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <low_level_init+0x18c>)
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	791a      	ldrb	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800be6a:	4b27      	ldr	r3, [pc, #156]	; (800bf08 <low_level_init+0x18c>)
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	795a      	ldrb	r2, [r3, #5]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800be7c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be84:	f043 030a 	orr.w	r3, r3, #10
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800be90:	2300      	movs	r3, #0
 800be92:	62bb      	str	r3, [r7, #40]	; 0x28
 800be94:	2300      	movs	r3, #0
 800be96:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800be98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be9c:	2101      	movs	r1, #1
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 fbbe 	bl	800c620 <osSemaphoreCreate>
 800bea4:	4603      	mov	r3, r0
 800bea6:	4a1e      	ldr	r2, [pc, #120]	; (800bf20 <low_level_init+0x1a4>)
 800bea8:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800beaa:	4b1e      	ldr	r3, [pc, #120]	; (800bf24 <low_level_init+0x1a8>)
 800beac:	f107 040c 	add.w	r4, r7, #12
 800beb0:	461d      	mov	r5, r3
 800beb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800beb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800beb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800beba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800bebe:	f107 030c 	add.w	r3, r7, #12
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 faae 	bl	800c426 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800beca:	480f      	ldr	r0, [pc, #60]	; (800bf08 <low_level_init+0x18c>)
 800becc:	f7fb fc1b 	bl	8007706 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bed4:	461a      	mov	r2, r3
 800bed6:	211d      	movs	r1, #29
 800bed8:	480b      	ldr	r0, [pc, #44]	; (800bf08 <low_level_init+0x18c>)
 800beda:	f7fb fb46 	bl	800756a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	f043 030b 	orr.w	r3, r3, #11
 800bee4:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	461a      	mov	r2, r3
 800beea:	211d      	movs	r1, #29
 800beec:	4806      	ldr	r0, [pc, #24]	; (800bf08 <low_level_init+0x18c>)
 800beee:	f7fb fba4 	bl	800763a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bef6:	461a      	mov	r2, r3
 800bef8:	211d      	movs	r1, #29
 800befa:	4803      	ldr	r0, [pc, #12]	; (800bf08 <low_level_init+0x18c>)
 800befc:	f7fb fb35 	bl	800756a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bf00:	bf00      	nop
 800bf02:	3740      	adds	r7, #64	; 0x40
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bdb0      	pop	{r4, r5, r7, pc}
 800bf08:	20008fa8 	.word	0x20008fa8
 800bf0c:	40028000 	.word	0x40028000
 800bf10:	20008ff0 	.word	0x20008ff0
 800bf14:	200076d8 	.word	0x200076d8
 800bf18:	20007758 	.word	0x20007758
 800bf1c:	20008f28 	.word	0x20008f28
 800bf20:	20000728 	.word	0x20000728
 800bf24:	0801e400 	.word	0x0801e400

0800bf28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08a      	sub	sp, #40	; 0x28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bf32:	4b4b      	ldr	r3, [pc, #300]	; (800c060 <low_level_output+0x138>)
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800bf4a:	4b45      	ldr	r3, [pc, #276]	; (800c060 <low_level_output+0x138>)
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	623b      	str	r3, [r7, #32]
 800bf58:	e05a      	b.n	800c010 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	da03      	bge.n	800bf6a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800bf62:	23f8      	movs	r3, #248	; 0xf8
 800bf64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800bf68:	e05c      	b.n	800c024 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	895b      	ldrh	r3, [r3, #10]
 800bf6e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bf74:	e02f      	b.n	800bfd6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bf76:	69fa      	ldr	r2, [r7, #28]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	18d0      	adds	r0, r2, r3
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f010 fe81 	bl	801cc94 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da03      	bge.n	800bfa8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800bfa0:	23f8      	movs	r3, #248	; 0xf8
 800bfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800bfa6:	e03d      	b.n	800c024 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800bfb8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bfc4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bfd0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d8c8      	bhi.n	800bf76 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bfe4:	69fa      	ldr	r2, [r7, #28]
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	18d0      	adds	r0, r2, r3
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	4413      	add	r3, r2
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4619      	mov	r1, r3
 800bff6:	f010 fe4d 	bl	801cc94 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	623b      	str	r3, [r7, #32]
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1a1      	bne.n	800bf5a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c016:	6979      	ldr	r1, [r7, #20]
 800c018:	4811      	ldr	r0, [pc, #68]	; (800c060 <low_level_output+0x138>)
 800c01a:	f7fb f8b9 	bl	8007190 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <low_level_output+0x138>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c02c:	3314      	adds	r3, #20
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 0320 	and.w	r3, r3, #32
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00d      	beq.n	800c054 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c038:	4b09      	ldr	r3, [pc, #36]	; (800c060 <low_level_output+0x138>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c040:	3314      	adds	r3, #20
 800c042:	2220      	movs	r2, #32
 800c044:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800c046:	4b06      	ldr	r3, [pc, #24]	; (800c060 <low_level_output+0x138>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c04e:	3304      	adds	r3, #4
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800c054:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3728      	adds	r7, #40	; 0x28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	20008fa8 	.word	0x20008fa8

0800c064 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	; 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c06c:	2300      	movs	r3, #0
 800c06e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800c070:	2300      	movs	r3, #0
 800c072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800c084:	2300      	movs	r3, #0
 800c086:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800c088:	484f      	ldr	r0, [pc, #316]	; (800c1c8 <low_level_input+0x164>)
 800c08a:	f7fb f96b 	bl	8007364 <HAL_ETH_GetReceivedFrame_IT>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <low_level_input+0x34>

    return NULL;
 800c094:	2300      	movs	r3, #0
 800c096:	e092      	b.n	800c1be <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800c098:	4b4b      	ldr	r3, [pc, #300]	; (800c1c8 <low_level_input+0x164>)
 800c09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800c09e:	4b4a      	ldr	r3, [pc, #296]	; (800c1c8 <low_level_input+0x164>)
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800c0a4:	89fb      	ldrh	r3, [r7, #14]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d007      	beq.n	800c0ba <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c0aa:	89fb      	ldrh	r3, [r7, #14]
 800c0ac:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f006 fc72 	bl	801299c <pbuf_alloc>
 800c0b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d04b      	beq.n	800c158 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c0c0:	4b41      	ldr	r3, [pc, #260]	; (800c1c8 <low_level_input+0x164>)
 800c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ce:	e040      	b.n	800c152 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	895b      	ldrh	r3, [r3, #10]
 800c0d4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c0da:	e021      	b.n	800c120 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	18d0      	adds	r0, r2, r3
 800c0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	18d1      	adds	r1, r2, r3
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f010 fdce 	bl	801cc94 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	4413      	add	r3, r2
 800c10a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c10e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c11a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c120:	697a      	ldr	r2, [r7, #20]
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	4413      	add	r3, r2
 800c126:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d8d6      	bhi.n	800c0dc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	685a      	ldr	r2, [r3, #4]
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	18d0      	adds	r0, r2, r3
 800c136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	4413      	add	r3, r2
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	4619      	mov	r1, r3
 800c140:	f010 fda8 	bl	801cc94 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	4413      	add	r3, r2
 800c14a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	62bb      	str	r3, [r7, #40]	; 0x28
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1bb      	bne.n	800c0d0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c158:	4b1b      	ldr	r3, [pc, #108]	; (800c1c8 <low_level_input+0x164>)
 800c15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c15e:	2300      	movs	r3, #0
 800c160:	613b      	str	r3, [r7, #16]
 800c162:	e00b      	b.n	800c17c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3301      	adds	r3, #1
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <low_level_input+0x164>)
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	429a      	cmp	r2, r3
 800c184:	d3ee      	bcc.n	800c164 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800c186:	4b10      	ldr	r3, [pc, #64]	; (800c1c8 <low_level_input+0x164>)
 800c188:	2200      	movs	r2, #0
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800c18c:	4b0e      	ldr	r3, [pc, #56]	; (800c1c8 <low_level_input+0x164>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c194:	3314      	adds	r3, #20
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00d      	beq.n	800c1bc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <low_level_input+0x164>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a8:	3314      	adds	r3, #20
 800c1aa:	2280      	movs	r2, #128	; 0x80
 800c1ac:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800c1ae:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <low_level_input+0x164>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]
  }
  return p;
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3730      	adds	r7, #48	; 0x30
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20008fa8 	.word	0x20008fa8

0800c1cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c1d8:	4b12      	ldr	r3, [pc, #72]	; (800c224 <ethernetif_input+0x58>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f04f 31ff 	mov.w	r1, #4294967295
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 fa4f 	bl	800c684 <osSemaphoreWait>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1f5      	bne.n	800c1d8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800c1ec:	480e      	ldr	r0, [pc, #56]	; (800c228 <ethernetif_input+0x5c>)
 800c1ee:	f010 fbc1 	bl	801c974 <sys_mutex_lock>
        p = low_level_input( netif );
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f7ff ff36 	bl	800c064 <low_level_input>
 800c1f8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00a      	beq.n	800c216 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	68f9      	ldr	r1, [r7, #12]
 800c206:	68b8      	ldr	r0, [r7, #8]
 800c208:	4798      	blx	r3
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800c210:	68b8      	ldr	r0, [r7, #8]
 800c212:	f006 fea7 	bl	8012f64 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800c216:	4804      	ldr	r0, [pc, #16]	; (800c228 <ethernetif_input+0x5c>)
 800c218:	f010 fbbb 	bl	801c992 <sys_mutex_unlock>
      } while(p!=NULL);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e4      	bne.n	800c1ec <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c222:	e7d9      	b.n	800c1d8 <ethernetif_input+0xc>
 800c224:	20000728 	.word	0x20000728
 800c228:	2000a800 	.word	0x2000a800

0800c22c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <ethernetif_init+0x1c>
 800c23a:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <ethernetif_init+0x48>)
 800c23c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800c240:	490d      	ldr	r1, [pc, #52]	; (800c278 <ethernetif_init+0x4c>)
 800c242:	480e      	ldr	r0, [pc, #56]	; (800c27c <ethernetif_init+0x50>)
 800c244:	f010 fe00 	bl	801ce48 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2273      	movs	r2, #115	; 0x73
 800c24c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2274      	movs	r2, #116	; 0x74
 800c254:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a09      	ldr	r2, [pc, #36]	; (800c280 <ethernetif_init+0x54>)
 800c25c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a08      	ldr	r2, [pc, #32]	; (800c284 <ethernetif_init+0x58>)
 800c262:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7ff fd89 	bl	800bd7c <low_level_init>

  return ERR_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	0801e41c 	.word	0x0801e41c
 800c278:	0801e438 	.word	0x0801e438
 800c27c:	0801e448 	.word	0x0801e448
 800c280:	0801a989 	.word	0x0801a989
 800c284:	0800bf29 	.word	0x0800bf29

0800c288 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c28c:	f7f9 fb62 	bl	8005954 <HAL_GetTick>
 800c290:	4603      	mov	r3, r0
}
 800c292:	4618      	mov	r0, r3
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2ae:	089b      	lsrs	r3, r3, #2
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d05d      	beq.n	800c376 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c2ba:	4b34      	ldr	r3, [pc, #208]	; (800c38c <ethernetif_update_config+0xf4>)
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d03f      	beq.n	800c342 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800c2c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4830      	ldr	r0, [pc, #192]	; (800c38c <ethernetif_update_config+0xf4>)
 800c2ca:	f7fb f9b6 	bl	800763a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c2ce:	f7f9 fb41 	bl	8005954 <HAL_GetTick>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c2d6:	f107 0308 	add.w	r3, r7, #8
 800c2da:	461a      	mov	r2, r3
 800c2dc:	2101      	movs	r1, #1
 800c2de:	482b      	ldr	r0, [pc, #172]	; (800c38c <ethernetif_update_config+0xf4>)
 800c2e0:	f7fb f943 	bl	800756a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c2e4:	f7f9 fb36 	bl	8005954 <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2f2:	d828      	bhi.n	800c346 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0eb      	beq.n	800c2d6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c2fe:	f107 0308 	add.w	r3, r7, #8
 800c302:	461a      	mov	r2, r3
 800c304:	2110      	movs	r1, #16
 800c306:	4821      	ldr	r0, [pc, #132]	; (800c38c <ethernetif_update_config+0xf4>)
 800c308:	f7fb f92f 	bl	800756a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	f003 0304 	and.w	r3, r3, #4
 800c312:	2b00      	cmp	r3, #0
 800c314:	d004      	beq.n	800c320 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c316:	4b1d      	ldr	r3, [pc, #116]	; (800c38c <ethernetif_update_config+0xf4>)
 800c318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	e002      	b.n	800c326 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <ethernetif_update_config+0xf4>)
 800c322:	2200      	movs	r2, #0
 800c324:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d003      	beq.n	800c338 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c330:	4b16      	ldr	r3, [pc, #88]	; (800c38c <ethernetif_update_config+0xf4>)
 800c332:	2200      	movs	r2, #0
 800c334:	609a      	str	r2, [r3, #8]
 800c336:	e016      	b.n	800c366 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c338:	4b14      	ldr	r3, [pc, #80]	; (800c38c <ethernetif_update_config+0xf4>)
 800c33a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c33e:	609a      	str	r2, [r3, #8]
 800c340:	e011      	b.n	800c366 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c342:	bf00      	nop
 800c344:	e000      	b.n	800c348 <ethernetif_update_config+0xb0>
          goto error;
 800c346:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c348:	4b10      	ldr	r3, [pc, #64]	; (800c38c <ethernetif_update_config+0xf4>)
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	08db      	lsrs	r3, r3, #3
 800c34e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c350:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <ethernetif_update_config+0xf4>)
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	085b      	lsrs	r3, r3, #1
 800c356:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c358:	4313      	orrs	r3, r2
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	461a      	mov	r2, r3
 800c35e:	2100      	movs	r1, #0
 800c360:	480a      	ldr	r0, [pc, #40]	; (800c38c <ethernetif_update_config+0xf4>)
 800c362:	f7fb f96a 	bl	800763a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c366:	2100      	movs	r1, #0
 800c368:	4808      	ldr	r0, [pc, #32]	; (800c38c <ethernetif_update_config+0xf4>)
 800c36a:	f7fb fa2b 	bl	80077c4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c36e:	4807      	ldr	r0, [pc, #28]	; (800c38c <ethernetif_update_config+0xf4>)
 800c370:	f7fb f9c9 	bl	8007706 <HAL_ETH_Start>
 800c374:	e002      	b.n	800c37c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c376:	4805      	ldr	r0, [pc, #20]	; (800c38c <ethernetif_update_config+0xf4>)
 800c378:	f7fb f9f4 	bl	8007764 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f807 	bl	800c390 <ethernetif_notify_conn_changed>
}
 800c382:	bf00      	nop
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20008fa8 	.word	0x20008fa8

0800c390 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c3b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3b6:	2b84      	cmp	r3, #132	; 0x84
 800c3b8:	d005      	beq.n	800c3c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c3ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	3303      	adds	r3, #3
 800c3c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3da:	f3ef 8305 	mrs	r3, IPSR
 800c3de:	607b      	str	r3, [r7, #4]
  return(result);
 800c3e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bf14      	ite	ne
 800c3e6:	2301      	movne	r3, #1
 800c3e8:	2300      	moveq	r3, #0
 800c3ea:	b2db      	uxtb	r3, r3
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3fc:	f001 ff70 	bl	800e2e0 <vTaskStartScheduler>
  
  return osOK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	bd80      	pop	{r7, pc}

0800c406 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c40a:	f7ff ffe3 	bl	800c3d4 <inHandlerMode>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d003      	beq.n	800c41c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c414:	f002 f888 	bl	800e528 <xTaskGetTickCountFromISR>
 800c418:	4603      	mov	r3, r0
 800c41a:	e002      	b.n	800c422 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c41c:	f002 f874 	bl	800e508 <xTaskGetTickCount>
 800c420:	4603      	mov	r3, r0
  }
}
 800c422:	4618      	mov	r0, r3
 800c424:	bd80      	pop	{r7, pc}

0800c426 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c426:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c428:	b089      	sub	sp, #36	; 0x24
 800c42a:	af04      	add	r7, sp, #16
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d020      	beq.n	800c47a <osThreadCreate+0x54>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01c      	beq.n	800c47a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685c      	ldr	r4, [r3, #4]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681d      	ldr	r5, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691e      	ldr	r6, [r3, #16]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff ffa6 	bl	800c3a4 <makeFreeRtosPriority>
 800c458:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c462:	9202      	str	r2, [sp, #8]
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	9100      	str	r1, [sp, #0]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	4632      	mov	r2, r6
 800c46c:	4629      	mov	r1, r5
 800c46e:	4620      	mov	r0, r4
 800c470:	f001 fd58 	bl	800df24 <xTaskCreateStatic>
 800c474:	4603      	mov	r3, r0
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	e01c      	b.n	800c4b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685c      	ldr	r4, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c486:	b29e      	uxth	r6, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff ff88 	bl	800c3a4 <makeFreeRtosPriority>
 800c494:	4602      	mov	r2, r0
 800c496:	f107 030c 	add.w	r3, r7, #12
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	9200      	str	r2, [sp, #0]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f001 fd9a 	bl	800dfde <xTaskCreate>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d001      	beq.n	800c4b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e000      	b.n	800c4b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d001      	beq.n	800c4d4 <osDelay+0x16>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	e000      	b.n	800c4d6 <osDelay+0x18>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f001 fece 	bl	800e278 <vTaskDelay>
  
  return osOK;
 800c4dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d007      	beq.n	800c506 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	f000 feb2 	bl	800d266 <xQueueCreateMutexStatic>
 800c502:	4603      	mov	r3, r0
 800c504:	e003      	b.n	800c50e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c506:	2001      	movs	r0, #1
 800c508:	f000 fe95 	bl	800d236 <xQueueCreateMutex>
 800c50c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c522:	2300      	movs	r3, #0
 800c524:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <osMutexWait+0x18>
    return osErrorParameter;
 800c52c:	2380      	movs	r3, #128	; 0x80
 800c52e:	e03a      	b.n	800c5a6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53a:	d103      	bne.n	800c544 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c53c:	f04f 33ff 	mov.w	r3, #4294967295
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e009      	b.n	800c558 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d006      	beq.n	800c558 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <osMutexWait+0x40>
      ticks = 1;
 800c554:	2301      	movs	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c558:	f7ff ff3c 	bl	800c3d4 <inHandlerMode>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d017      	beq.n	800c592 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c562:	f107 0308 	add.w	r3, r7, #8
 800c566:	461a      	mov	r2, r3
 800c568:	2100      	movs	r1, #0
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f001 faa8 	bl	800dac0 <xQueueReceiveFromISR>
 800c570:	4603      	mov	r3, r0
 800c572:	2b01      	cmp	r3, #1
 800c574:	d001      	beq.n	800c57a <osMutexWait+0x62>
      return osErrorOS;
 800c576:	23ff      	movs	r3, #255	; 0xff
 800c578:	e015      	b.n	800c5a6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d011      	beq.n	800c5a4 <osMutexWait+0x8c>
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <osMutexWait+0x98>)
 800c582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c586:	601a      	str	r2, [r3, #0]
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	e008      	b.n	800c5a4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f001 f987 	bl	800d8a8 <xQueueSemaphoreTake>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d001      	beq.n	800c5a4 <osMutexWait+0x8c>
    return osErrorOS;
 800c5a0:	23ff      	movs	r3, #255	; 0xff
 800c5a2:	e000      	b.n	800c5a6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c5c4:	f7ff ff06 	bl	800c3d4 <inHandlerMode>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d016      	beq.n	800c5fc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c5ce:	f107 0308 	add.w	r3, r7, #8
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fffa 	bl	800d5ce <xQueueGiveFromISR>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d001      	beq.n	800c5e4 <osMutexRelease+0x30>
      return osErrorOS;
 800c5e0:	23ff      	movs	r3, #255	; 0xff
 800c5e2:	e017      	b.n	800c614 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d013      	beq.n	800c612 <osMutexRelease+0x5e>
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <osMutexRelease+0x68>)
 800c5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	e00a      	b.n	800c612 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fe4a 	bl	800d29c <xQueueGenericSend>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d001      	beq.n	800c612 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c60e:	23ff      	movs	r3, #255	; 0xff
 800c610:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c612:	68fb      	ldr	r3, [r7, #12]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00f      	beq.n	800c652 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d10a      	bne.n	800c64e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	2203      	movs	r2, #3
 800c63e:	9200      	str	r2, [sp, #0]
 800c640:	2200      	movs	r2, #0
 800c642:	2100      	movs	r1, #0
 800c644:	2001      	movs	r0, #1
 800c646:	f000 fd0b 	bl	800d060 <xQueueGenericCreateStatic>
 800c64a:	4603      	mov	r3, r0
 800c64c:	e016      	b.n	800c67c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	e014      	b.n	800c67c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d110      	bne.n	800c67a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c658:	2203      	movs	r2, #3
 800c65a:	2100      	movs	r1, #0
 800c65c:	2001      	movs	r0, #1
 800c65e:	f000 fd77 	bl	800d150 <xQueueGenericCreate>
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d005      	beq.n	800c676 <osSemaphoreCreate+0x56>
 800c66a:	2300      	movs	r3, #0
 800c66c:	2200      	movs	r2, #0
 800c66e:	2100      	movs	r1, #0
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 fe13 	bl	800d29c <xQueueGenericSend>
      return sema;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	e000      	b.n	800c67c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c67a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c68e:	2300      	movs	r3, #0
 800c690:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c698:	2380      	movs	r3, #128	; 0x80
 800c69a:	e03a      	b.n	800c712 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d103      	bne.n	800c6b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	e009      	b.n	800c6c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <osSemaphoreWait+0x40>
      ticks = 1;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c6c4:	f7ff fe86 	bl	800c3d4 <inHandlerMode>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d017      	beq.n	800c6fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c6ce:	f107 0308 	add.w	r3, r7, #8
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 f9f2 	bl	800dac0 <xQueueReceiveFromISR>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d001      	beq.n	800c6e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c6e2:	23ff      	movs	r3, #255	; 0xff
 800c6e4:	e015      	b.n	800c712 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d011      	beq.n	800c710 <osSemaphoreWait+0x8c>
 800c6ec:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <osSemaphoreWait+0x98>)
 800c6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f2:	601a      	str	r2, [r3, #0]
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	e008      	b.n	800c710 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c6fe:	68f9      	ldr	r1, [r7, #12]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 f8d1 	bl	800d8a8 <xQueueSemaphoreTake>
 800c706:	4603      	mov	r3, r0
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d001      	beq.n	800c710 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c70c:	23ff      	movs	r3, #255	; 0xff
 800c70e:	e000      	b.n	800c712 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	e000ed04 	.word	0xe000ed04

0800c720 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c728:	2300      	movs	r3, #0
 800c72a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c72c:	2300      	movs	r3, #0
 800c72e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c730:	f7ff fe50 	bl	800c3d4 <inHandlerMode>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d016      	beq.n	800c768 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c73a:	f107 0308 	add.w	r3, r7, #8
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 ff44 	bl	800d5ce <xQueueGiveFromISR>
 800c746:	4603      	mov	r3, r0
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d001      	beq.n	800c750 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c74c:	23ff      	movs	r3, #255	; 0xff
 800c74e:	e017      	b.n	800c780 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d013      	beq.n	800c77e <osSemaphoreRelease+0x5e>
 800c756:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <osSemaphoreRelease+0x68>)
 800c758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	e00a      	b.n	800c77e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c768:	2300      	movs	r3, #0
 800c76a:	2200      	movs	r2, #0
 800c76c:	2100      	movs	r1, #0
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fd94 	bl	800d29c <xQueueGenericSend>
 800c774:	4603      	mov	r3, r0
 800c776:	2b01      	cmp	r3, #1
 800c778:	d001      	beq.n	800c77e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c77a:	23ff      	movs	r3, #255	; 0xff
 800c77c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c77e:	68fb      	ldr	r3, [r7, #12]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c794:	f7ff fe1e 	bl	800c3d4 <inHandlerMode>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c79e:	2382      	movs	r3, #130	; 0x82
 800c7a0:	e003      	b.n	800c7aa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 fa48 	bl	800dc38 <vQueueDelete>

  return osOK; 
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b086      	sub	sp, #24
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	3303      	adds	r3, #3
 800c7c0:	f023 0303 	bic.w	r3, r3, #3
 800c7c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800c7c6:	2014      	movs	r0, #20
 800c7c8:	f002 fe2e 	bl	800f428 <pvPortMalloc>
 800c7cc:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d046      	beq.n	800c862 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f002 fe1b 	bl	800f428 <pvPortMalloc>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d02b      	beq.n	800c858 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	fb02 f303 	mul.w	r3, r2, r3
 800c80a:	4618      	mov	r0, r3
 800c80c:	f002 fe0c 	bl	800f428 <pvPortMalloc>
 800c810:	4602      	mov	r2, r0
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d011      	beq.n	800c842 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800c81e:	2300      	movs	r3, #0
 800c820:	613b      	str	r3, [r7, #16]
 800c822:	e008      	b.n	800c836 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	685a      	ldr	r2, [r3, #4]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	4413      	add	r3, r2
 800c82c:	2200      	movs	r2, #0
 800c82e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	3301      	adds	r3, #1
 800c834:	613b      	str	r3, [r7, #16]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d3f1      	bcc.n	800c824 <osPoolCreate+0x72>
 800c840:	e00f      	b.n	800c862 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	4618      	mov	r0, r3
 800c848:	f002 feba 	bl	800f5c0 <vPortFree>
        vPortFree(thePool);
 800c84c:	6978      	ldr	r0, [r7, #20]
 800c84e:	f002 feb7 	bl	800f5c0 <vPortFree>
        thePool = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]
 800c856:	e004      	b.n	800c862 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800c858:	6978      	ldr	r0, [r7, #20]
 800c85a:	f002 feb1 	bl	800f5c0 <vPortFree>
      thePool = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800c862:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08a      	sub	sp, #40	; 0x28
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800c878:	2300      	movs	r3, #0
 800c87a:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800c87c:	f7ff fdaa 	bl	800c3d4 <inHandlerMode>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00e      	beq.n	800c8a4 <osPoolAlloc+0x38>
	__asm volatile
 800c886:	f3ef 8211 	mrs	r2, BASEPRI
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	617a      	str	r2, [r7, #20]
 800c89c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c89e:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8a2:	e001      	b.n	800c8a8 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800c8a4:	f002 fc9e 	bl	800f1e4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	61fb      	str	r3, [r7, #28]
 800c8ac:	e029      	b.n	800c902 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	691a      	ldr	r2, [r3, #16]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6892      	ldr	r2, [r2, #8]
 800c8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8be:	fb02 f201 	mul.w	r2, r2, r1
 800c8c2:	1a9b      	subs	r3, r3, r2
 800c8c4:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d113      	bne.n	800c8fc <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	4413      	add	r3, r2
 800c8dc:	2201      	movs	r2, #1
 800c8de:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	fb02 f303 	mul.w	r3, r2, r3
 800c8f0:	440b      	add	r3, r1
 800c8f2:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	611a      	str	r2, [r3, #16]
      break;
 800c8fa:	e007      	b.n	800c90c <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	3301      	adds	r3, #1
 800c900:	61fb      	str	r3, [r7, #28]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d3d0      	bcc.n	800c8ae <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800c90c:	f7ff fd62 	bl	800c3d4 <inHandlerMode>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d005      	beq.n	800c922 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f383 8811 	msr	BASEPRI, r3
}
 800c920:	e001      	b.n	800c926 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800c922:	f002 fc8f 	bl	800f244 <vPortExitCritical>
  }
  
  return p;
 800c926:	6a3b      	ldr	r3, [r7, #32]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3728      	adds	r7, #40	; 0x28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <osPoolFree+0x14>
    return osErrorParameter;
 800c940:	2380      	movs	r3, #128	; 0x80
 800c942:	e030      	b.n	800c9a6 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d101      	bne.n	800c94e <osPoolFree+0x1e>
    return osErrorParameter;
 800c94a:	2380      	movs	r3, #128	; 0x80
 800c94c:	e02b      	b.n	800c9a6 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	429a      	cmp	r2, r3
 800c956:	d201      	bcs.n	800c95c <osPoolFree+0x2c>
    return osErrorParameter;
 800c958:	2380      	movs	r3, #128	; 0x80
 800c95a:	e024      	b.n	800c9a6 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	1a9b      	subs	r3, r3, r2
 800c964:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c970:	fb02 f201 	mul.w	r2, r2, r1
 800c974:	1a9b      	subs	r3, r3, r2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <osPoolFree+0x4e>
    return osErrorParameter;
 800c97a:	2380      	movs	r3, #128	; 0x80
 800c97c:	e013      	b.n	800c9a6 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	fbb2 f3f3 	udiv	r3, r2, r3
 800c988:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	429a      	cmp	r2, r3
 800c992:	d301      	bcc.n	800c998 <osPoolFree+0x68>
    return osErrorParameter;
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	e006      	b.n	800c9a6 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	4413      	add	r3, r2
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c9b2:	b590      	push	{r4, r7, lr}
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	af02      	add	r7, sp, #8
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d011      	beq.n	800c9e8 <osMessageCreate+0x36>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00d      	beq.n	800c9e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6859      	ldr	r1, [r3, #4]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689a      	ldr	r2, [r3, #8]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	2400      	movs	r4, #0
 800c9de:	9400      	str	r4, [sp, #0]
 800c9e0:	f000 fb3e 	bl	800d060 <xQueueGenericCreateStatic>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	e008      	b.n	800c9fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6818      	ldr	r0, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	f000 fbac 	bl	800d150 <xQueueGenericCreate>
 800c9f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd90      	pop	{r4, r7, pc}
	...

0800ca04 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca10:	2300      	movs	r3, #0
 800ca12:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <osMessagePut+0x1e>
    ticks = 1;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ca22:	f7ff fcd7 	bl	800c3d4 <inHandlerMode>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d018      	beq.n	800ca5e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ca2c:	f107 0210 	add.w	r2, r7, #16
 800ca30:	f107 0108 	add.w	r1, r7, #8
 800ca34:	2300      	movs	r3, #0
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 fd2e 	bl	800d498 <xQueueGenericSendFromISR>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d001      	beq.n	800ca46 <osMessagePut+0x42>
      return osErrorOS;
 800ca42:	23ff      	movs	r3, #255	; 0xff
 800ca44:	e018      	b.n	800ca78 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d014      	beq.n	800ca76 <osMessagePut+0x72>
 800ca4c:	4b0c      	ldr	r3, [pc, #48]	; (800ca80 <osMessagePut+0x7c>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	e00b      	b.n	800ca76 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ca5e:	f107 0108 	add.w	r1, r7, #8
 800ca62:	2300      	movs	r3, #0
 800ca64:	697a      	ldr	r2, [r7, #20]
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f000 fc18 	bl	800d29c <xQueueGenericSend>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d001      	beq.n	800ca76 <osMessagePut+0x72>
      return osErrorOS;
 800ca72:	23ff      	movs	r3, #255	; 0xff
 800ca74:	e000      	b.n	800ca78 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ca84:	b590      	push	{r4, r7, lr}
 800ca86:	b08b      	sub	sp, #44	; 0x2c
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10a      	bne.n	800cab4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ca9e:	2380      	movs	r3, #128	; 0x80
 800caa0:	617b      	str	r3, [r7, #20]
    return event;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	461c      	mov	r4, r3
 800caa6:	f107 0314 	add.w	r3, r7, #20
 800caaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800caae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cab2:	e054      	b.n	800cb5e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cab4:	2300      	movs	r3, #0
 800cab6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac2:	d103      	bne.n	800cacc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cac4:	f04f 33ff 	mov.w	r3, #4294967295
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
 800caca:	e009      	b.n	800cae0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d006      	beq.n	800cae0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <osMessageGet+0x5c>
      ticks = 1;
 800cadc:	2301      	movs	r3, #1
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cae0:	f7ff fc78 	bl	800c3d4 <inHandlerMode>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d01c      	beq.n	800cb24 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800caea:	f107 0220 	add.w	r2, r7, #32
 800caee:	f107 0314 	add.w	r3, r7, #20
 800caf2:	3304      	adds	r3, #4
 800caf4:	4619      	mov	r1, r3
 800caf6:	68b8      	ldr	r0, [r7, #8]
 800caf8:	f000 ffe2 	bl	800dac0 <xQueueReceiveFromISR>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d102      	bne.n	800cb08 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cb02:	2310      	movs	r3, #16
 800cb04:	617b      	str	r3, [r7, #20]
 800cb06:	e001      	b.n	800cb0c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb0c:	6a3b      	ldr	r3, [r7, #32]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d01d      	beq.n	800cb4e <osMessageGet+0xca>
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <osMessageGet+0xe4>)
 800cb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	e014      	b.n	800cb4e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cb24:	f107 0314 	add.w	r3, r7, #20
 800cb28:	3304      	adds	r3, #4
 800cb2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	68b8      	ldr	r0, [r7, #8]
 800cb30:	f000 fdda 	bl	800d6e8 <xQueueReceive>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d102      	bne.n	800cb40 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cb3a:	2310      	movs	r3, #16
 800cb3c:	617b      	str	r3, [r7, #20]
 800cb3e:	e006      	b.n	800cb4e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d101      	bne.n	800cb4a <osMessageGet+0xc6>
 800cb46:	2300      	movs	r3, #0
 800cb48:	e000      	b.n	800cb4c <osMessageGet+0xc8>
 800cb4a:	2340      	movs	r3, #64	; 0x40
 800cb4c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	461c      	mov	r4, r3
 800cb52:	f107 0314 	add.w	r3, r7, #20
 800cb56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	372c      	adds	r7, #44	; 0x2c
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd90      	pop	{r4, r7, pc}
 800cb66:	bf00      	nop
 800cb68:	e000ed04 	.word	0xe000ed04

0800cb6c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800cb6c:	b590      	push	{r4, r7, lr}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	613b      	str	r3, [r7, #16]
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689c      	ldr	r4, [r3, #8]
 800cb8a:	200c      	movs	r0, #12
 800cb8c:	f002 fc4c 	bl	800f428 <pvPortMalloc>
 800cb90:	4603      	mov	r3, r0
 800cb92:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <osMailCreate+0x36>
    return NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e038      	b.n	800cc14 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6818      	ldr	r0, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	681c      	ldr	r4, [r3, #0]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2104      	movs	r1, #4
 800cbba:	f000 fac9 	bl	800d150 <xQueueGenericCreate>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d107      	bne.n	800cbde <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f002 fcf3 	bl	800f5c0 <vPortFree>
    return NULL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	e01a      	b.n	800cc14 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	681c      	ldr	r4, [r3, #0]
 800cbe4:	f107 030c 	add.w	r3, r7, #12
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff fde2 	bl	800c7b2 <osPoolCreate>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d107      	bne.n	800cc0e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f002 fcdb 	bl	800f5c0 <vPortFree>
    return NULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e002      	b.n	800cc14 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	371c      	adds	r7, #28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd90      	pop	{r4, r7, pc}

0800cc1c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <osMailAlloc+0x14>
    return NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e006      	b.n	800cc3e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fe19 	bl	800c86c <osPoolAlloc>
 800cc3a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <osMailPut+0x14>
    return osErrorParameter;
 800cc58:	2380      	movs	r3, #128	; 0x80
 800cc5a:	e02c      	b.n	800ccb6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800cc60:	f7ff fbb8 	bl	800c3d4 <inHandlerMode>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d018      	beq.n	800cc9c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6858      	ldr	r0, [r3, #4]
 800cc6e:	f107 020c 	add.w	r2, r7, #12
 800cc72:	4639      	mov	r1, r7
 800cc74:	2300      	movs	r3, #0
 800cc76:	f000 fc0f 	bl	800d498 <xQueueGenericSendFromISR>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d001      	beq.n	800cc84 <osMailPut+0x3c>
      return osErrorOS;
 800cc80:	23ff      	movs	r3, #255	; 0xff
 800cc82:	e018      	b.n	800ccb6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d014      	beq.n	800ccb4 <osMailPut+0x6c>
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <osMailPut+0x78>)
 800cc8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	e00b      	b.n	800ccb4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6858      	ldr	r0, [r3, #4]
 800cca0:	4639      	mov	r1, r7
 800cca2:	2300      	movs	r3, #0
 800cca4:	2200      	movs	r2, #0
 800cca6:	f000 faf9 	bl	800d29c <xQueueGenericSend>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d001      	beq.n	800ccb4 <osMailPut+0x6c>
      return osErrorOS;
 800ccb0:	23ff      	movs	r3, #255	; 0xff
 800ccb2:	e000      	b.n	800ccb6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	e000ed04 	.word	0xe000ed04

0800ccc4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800ccc4:	b590      	push	{r4, r7, lr}
 800ccc6:	b08b      	sub	sp, #44	; 0x2c
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10a      	bne.n	800ccf0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800ccda:	2380      	movs	r3, #128	; 0x80
 800ccdc:	617b      	str	r3, [r7, #20]
    return event;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	461c      	mov	r4, r3
 800cce2:	f107 0314 	add.w	r3, r7, #20
 800cce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ccee:	e056      	b.n	800cd9e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfe:	d103      	bne.n	800cd08 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800cd00:	f04f 33ff 	mov.w	r3, #4294967295
 800cd04:	627b      	str	r3, [r7, #36]	; 0x24
 800cd06:	e009      	b.n	800cd1c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d006      	beq.n	800cd1c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <osMailGet+0x58>
      ticks = 1;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cd1c:	f7ff fb5a 	bl	800c3d4 <inHandlerMode>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d01d      	beq.n	800cd62 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	6858      	ldr	r0, [r3, #4]
 800cd2a:	f107 0220 	add.w	r2, r7, #32
 800cd2e:	f107 0314 	add.w	r3, r7, #20
 800cd32:	3304      	adds	r3, #4
 800cd34:	4619      	mov	r1, r3
 800cd36:	f000 fec3 	bl	800dac0 <xQueueReceiveFromISR>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d102      	bne.n	800cd46 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800cd40:	2320      	movs	r3, #32
 800cd42:	617b      	str	r3, [r7, #20]
 800cd44:	e001      	b.n	800cd4a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01e      	beq.n	800cd8e <osMailGet+0xca>
 800cd50:	4b15      	ldr	r3, [pc, #84]	; (800cda8 <osMailGet+0xe4>)
 800cd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	e015      	b.n	800cd8e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	6858      	ldr	r0, [r3, #4]
 800cd66:	f107 0314 	add.w	r3, r7, #20
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f000 fcba 	bl	800d6e8 <xQueueReceive>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d102      	bne.n	800cd80 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800cd7a:	2320      	movs	r3, #32
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	e006      	b.n	800cd8e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d101      	bne.n	800cd8a <osMailGet+0xc6>
 800cd86:	2300      	movs	r3, #0
 800cd88:	e000      	b.n	800cd8c <osMailGet+0xc8>
 800cd8a:	2340      	movs	r3, #64	; 0x40
 800cd8c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	461c      	mov	r4, r3
 800cd92:	f107 0314 	add.w	r3, r7, #20
 800cd96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	372c      	adds	r7, #44	; 0x2c
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd90      	pop	{r4, r7, pc}
 800cda6:	bf00      	nop
 800cda8:	e000ed04 	.word	0xe000ed04

0800cdac <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <osMailFree+0x14>
    return osErrorParameter;
 800cdbc:	2380      	movs	r3, #128	; 0x80
 800cdbe:	e006      	b.n	800cdce <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7ff fdb2 	bl	800c930 <osPoolFree>
 800cdcc:	4603      	mov	r3, r0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cdde:	f7ff faf9 	bl	800c3d4 <inHandlerMode>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 ff07 	bl	800dbfc <uxQueueMessagesWaitingFromISR>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	e003      	b.n	800cdfa <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fee4 	bl	800dbc0 <uxQueueMessagesWaiting>
 800cdf8:	4603      	mov	r3, r0
  }
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ce0a:	f7ff fae3 	bl	800c3d4 <inHandlerMode>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <osMessageDelete+0x16>
    return osErrorISR;
 800ce14:	2382      	movs	r3, #130	; 0x82
 800ce16:	e003      	b.n	800ce20 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 ff0d 	bl	800dc38 <vQueueDelete>

  return osOK; 
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f103 0208 	add.w	r2, r3, #8
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f103 0208 	add.w	r2, r3, #8
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f103 0208 	add.w	r2, r3, #8
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce5c:	bf00      	nop
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce82:	b480      	push	{r7}
 800ce84:	b085      	sub	sp, #20
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]
}
 800cebe:	bf00      	nop
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceca:	b480      	push	{r7}
 800cecc:	b085      	sub	sp, #20
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee0:	d103      	bne.n	800ceea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e00c      	b.n	800cf04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3308      	adds	r3, #8
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	e002      	b.n	800cef8 <vListInsert+0x2e>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d2f6      	bcs.n	800cef2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
}
 800cf30:	bf00      	nop
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	6892      	ldr	r2, [r2, #8]
 800cf52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	6852      	ldr	r2, [r2, #4]
 800cf5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d103      	bne.n	800cf70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	1e5a      	subs	r2, r3, #1
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <xQueueGenericReset+0x2a>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	60bb      	str	r3, [r7, #8]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cfba:	f002 f913 	bl	800f1e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cfca:	fb01 f303 	mul.w	r3, r1, r3
 800cfce:	441a      	add	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	3b01      	subs	r3, #1
 800cfec:	68f9      	ldr	r1, [r7, #12]
 800cfee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cff0:	fb01 f303 	mul.w	r3, r1, r3
 800cff4:	441a      	add	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	22ff      	movs	r2, #255	; 0xff
 800cffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	22ff      	movs	r2, #255	; 0xff
 800d006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d114      	bne.n	800d03a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d01a      	beq.n	800d04e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	3310      	adds	r3, #16
 800d01c:	4618      	mov	r0, r3
 800d01e:	f001 fbd3 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d012      	beq.n	800d04e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d028:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <xQueueGenericReset+0xcc>)
 800d02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	e009      	b.n	800d04e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3310      	adds	r3, #16
 800d03e:	4618      	mov	r0, r3
 800d040:	f7ff fef2 	bl	800ce28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3324      	adds	r3, #36	; 0x24
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff feed 	bl	800ce28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d04e:	f002 f8f9 	bl	800f244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d052:	2301      	movs	r3, #1
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	e000ed04 	.word	0xe000ed04

0800d060 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d060:	b580      	push	{r7, lr}
 800d062:	b08e      	sub	sp, #56	; 0x38
 800d064:	af02      	add	r7, sp, #8
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
 800d06c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <xQueueGenericCreateStatic+0x52>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <xQueueGenericCreateStatic+0x56>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e000      	b.n	800d0b8 <xQueueGenericCreateStatic+0x58>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	623b      	str	r3, [r7, #32]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <xQueueGenericCreateStatic+0x7e>
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <xQueueGenericCreateStatic+0x82>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e000      	b.n	800d0e4 <xQueueGenericCreateStatic+0x84>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10a      	bne.n	800d0fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	61fb      	str	r3, [r7, #28]
}
 800d0fa:	bf00      	nop
 800d0fc:	e7fe      	b.n	800d0fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d0fe:	2348      	movs	r3, #72	; 0x48
 800d100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b48      	cmp	r3, #72	; 0x48
 800d106:	d00a      	beq.n	800d11e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	61bb      	str	r3, [r7, #24]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d11e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00d      	beq.n	800d146 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d132:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	4613      	mov	r3, r2
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 f83f 	bl	800d1c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d148:	4618      	mov	r0, r3
 800d14a:	3730      	adds	r7, #48	; 0x30
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08a      	sub	sp, #40	; 0x28
 800d154:	af02      	add	r7, sp, #8
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	4613      	mov	r3, r2
 800d15c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	613b      	str	r3, [r7, #16]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	fb02 f303 	mul.w	r3, r2, r3
 800d182:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	3348      	adds	r3, #72	; 0x48
 800d188:	4618      	mov	r0, r3
 800d18a:	f002 f94d 	bl	800f428 <pvPortMalloc>
 800d18e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d011      	beq.n	800d1ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	3348      	adds	r3, #72	; 0x48
 800d19e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1a8:	79fa      	ldrb	r2, [r7, #7]
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	697a      	ldr	r2, [r7, #20]
 800d1b2:	68b9      	ldr	r1, [r7, #8]
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f000 f805 	bl	800d1c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1ba:	69bb      	ldr	r3, [r7, #24]
	}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3720      	adds	r7, #32
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d103      	bne.n	800d1e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	69ba      	ldr	r2, [r7, #24]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	e002      	b.n	800d1e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1f2:	2101      	movs	r1, #1
 800d1f4:	69b8      	ldr	r0, [r7, #24]
 800d1f6:	f7ff fecb 	bl	800cf90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1fa:	bf00      	nop
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00e      	beq.n	800d22e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d222:	2300      	movs	r3, #0
 800d224:	2200      	movs	r2, #0
 800d226:	2100      	movs	r1, #0
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f837 	bl	800d29c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d22e:	bf00      	nop
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d236:	b580      	push	{r7, lr}
 800d238:	b086      	sub	sp, #24
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	4603      	mov	r3, r0
 800d23e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d240:	2301      	movs	r3, #1
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	2300      	movs	r3, #0
 800d246:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	461a      	mov	r2, r3
 800d24c:	6939      	ldr	r1, [r7, #16]
 800d24e:	6978      	ldr	r0, [r7, #20]
 800d250:	f7ff ff7e 	bl	800d150 <xQueueGenericCreate>
 800d254:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7ff ffd3 	bl	800d202 <prvInitialiseMutex>

		return xNewQueue;
 800d25c:	68fb      	ldr	r3, [r7, #12]
	}
 800d25e:	4618      	mov	r0, r3
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d266:	b580      	push	{r7, lr}
 800d268:	b088      	sub	sp, #32
 800d26a:	af02      	add	r7, sp, #8
 800d26c:	4603      	mov	r3, r0
 800d26e:	6039      	str	r1, [r7, #0]
 800d270:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d272:	2301      	movs	r3, #1
 800d274:	617b      	str	r3, [r7, #20]
 800d276:	2300      	movs	r3, #0
 800d278:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2200      	movs	r2, #0
 800d282:	6939      	ldr	r1, [r7, #16]
 800d284:	6978      	ldr	r0, [r7, #20]
 800d286:	f7ff feeb 	bl	800d060 <xQueueGenericCreateStatic>
 800d28a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f7ff ffb8 	bl	800d202 <prvInitialiseMutex>

		return xNewQueue;
 800d292:	68fb      	ldr	r3, [r7, #12]
	}
 800d294:	4618      	mov	r0, r3
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08e      	sub	sp, #56	; 0x38
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10a      	bne.n	800d2ce <xQueueGenericSend+0x32>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2ca:	bf00      	nop
 800d2cc:	e7fe      	b.n	800d2cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d103      	bne.n	800d2dc <xQueueGenericSend+0x40>
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <xQueueGenericSend+0x44>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <xQueueGenericSend+0x46>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <xQueueGenericSend+0x60>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d103      	bne.n	800d30a <xQueueGenericSend+0x6e>
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <xQueueGenericSend+0x72>
 800d30a:	2301      	movs	r3, #1
 800d30c:	e000      	b.n	800d310 <xQueueGenericSend+0x74>
 800d30e:	2300      	movs	r3, #0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10a      	bne.n	800d32a <xQueueGenericSend+0x8e>
	__asm volatile
 800d314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d318:	f383 8811 	msr	BASEPRI, r3
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	f3bf 8f4f 	dsb	sy
 800d324:	623b      	str	r3, [r7, #32]
}
 800d326:	bf00      	nop
 800d328:	e7fe      	b.n	800d328 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d32a:	f001 fc0d 	bl	800eb48 <xTaskGetSchedulerState>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d102      	bne.n	800d33a <xQueueGenericSend+0x9e>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <xQueueGenericSend+0xa2>
 800d33a:	2301      	movs	r3, #1
 800d33c:	e000      	b.n	800d340 <xQueueGenericSend+0xa4>
 800d33e:	2300      	movs	r3, #0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <xQueueGenericSend+0xbe>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	61fb      	str	r3, [r7, #28]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d35a:	f001 ff43 	bl	800f1e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d366:	429a      	cmp	r2, r3
 800d368:	d302      	bcc.n	800d370 <xQueueGenericSend+0xd4>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d129      	bne.n	800d3c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d370:	683a      	ldr	r2, [r7, #0]
 800d372:	68b9      	ldr	r1, [r7, #8]
 800d374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d376:	f000 fc9a 	bl	800dcae <prvCopyDataToQueue>
 800d37a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	2b00      	cmp	r3, #0
 800d382:	d010      	beq.n	800d3a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	3324      	adds	r3, #36	; 0x24
 800d388:	4618      	mov	r0, r3
 800d38a:	f001 fa1d 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d013      	beq.n	800d3bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d394:	4b3f      	ldr	r3, [pc, #252]	; (800d494 <xQueueGenericSend+0x1f8>)
 800d396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	e00a      	b.n	800d3bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d007      	beq.n	800d3bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3ac:	4b39      	ldr	r3, [pc, #228]	; (800d494 <xQueueGenericSend+0x1f8>)
 800d3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3bc:	f001 ff42 	bl	800f244 <vPortExitCritical>
				return pdPASS;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e063      	b.n	800d48c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d103      	bne.n	800d3d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3ca:	f001 ff3b 	bl	800f244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e05c      	b.n	800d48c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d106      	bne.n	800d3e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3d8:	f107 0314 	add.w	r3, r7, #20
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f001 fa55 	bl	800e88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3e6:	f001 ff2d 	bl	800f244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3ea:	f000 ffe3 	bl	800e3b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ee:	f001 fef9 	bl	800f1e4 <vPortEnterCritical>
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3f8:	b25b      	sxtb	r3, r3
 800d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fe:	d103      	bne.n	800d408 <xQueueGenericSend+0x16c>
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d40e:	b25b      	sxtb	r3, r3
 800d410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d414:	d103      	bne.n	800d41e <xQueueGenericSend+0x182>
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d41e:	f001 ff11 	bl	800f244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d422:	1d3a      	adds	r2, r7, #4
 800d424:	f107 0314 	add.w	r3, r7, #20
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 fa44 	bl	800e8b8 <xTaskCheckForTimeOut>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d124      	bne.n	800d480 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d438:	f000 fd31 	bl	800de9e <prvIsQueueFull>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d018      	beq.n	800d474 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	3310      	adds	r3, #16
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f001 f998 	bl	800e780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d452:	f000 fcbc 	bl	800ddce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d456:	f000 ffbb 	bl	800e3d0 <xTaskResumeAll>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f47f af7c 	bne.w	800d35a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <xQueueGenericSend+0x1f8>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	e772      	b.n	800d35a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d476:	f000 fcaa 	bl	800ddce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d47a:	f000 ffa9 	bl	800e3d0 <xTaskResumeAll>
 800d47e:	e76c      	b.n	800d35a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d482:	f000 fca4 	bl	800ddce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d486:	f000 ffa3 	bl	800e3d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d48a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3738      	adds	r7, #56	; 0x38
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	e000ed04 	.word	0xe000ed04

0800d498 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b090      	sub	sp, #64	; 0x40
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10a      	bne.n	800d4c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4c2:	bf00      	nop
 800d4c4:	e7fe      	b.n	800d4c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d103      	bne.n	800d4d4 <xQueueGenericSendFromISR+0x3c>
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <xQueueGenericSendFromISR+0x40>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e000      	b.n	800d4da <xQueueGenericSendFromISR+0x42>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10a      	bne.n	800d4f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4f0:	bf00      	nop
 800d4f2:	e7fe      	b.n	800d4f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d103      	bne.n	800d502 <xQueueGenericSendFromISR+0x6a>
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d101      	bne.n	800d506 <xQueueGenericSendFromISR+0x6e>
 800d502:	2301      	movs	r3, #1
 800d504:	e000      	b.n	800d508 <xQueueGenericSendFromISR+0x70>
 800d506:	2300      	movs	r3, #0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10a      	bne.n	800d522 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d510:	f383 8811 	msr	BASEPRI, r3
 800d514:	f3bf 8f6f 	isb	sy
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	623b      	str	r3, [r7, #32]
}
 800d51e:	bf00      	nop
 800d520:	e7fe      	b.n	800d520 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d522:	f001 ff41 	bl	800f3a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d526:	f3ef 8211 	mrs	r2, BASEPRI
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	61fa      	str	r2, [r7, #28]
 800d53c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d53e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d540:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d302      	bcc.n	800d554 <xQueueGenericSendFromISR+0xbc>
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d12f      	bne.n	800d5b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d562:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d56a:	f000 fba0 	bl	800dcae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d56e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d576:	d112      	bne.n	800d59e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d016      	beq.n	800d5ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	3324      	adds	r3, #36	; 0x24
 800d584:	4618      	mov	r0, r3
 800d586:	f001 f91f 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00e      	beq.n	800d5ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00b      	beq.n	800d5ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	e007      	b.n	800d5ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d59e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	b25a      	sxtb	r2, r3
 800d5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d5b2:	e001      	b.n	800d5b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ba:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f383 8811 	msr	BASEPRI, r3
}
 800d5c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3740      	adds	r7, #64	; 0x40
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b08e      	sub	sp, #56	; 0x38
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10a      	bne.n	800d5f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	623b      	str	r3, [r7, #32]
}
 800d5f4:	bf00      	nop
 800d5f6:	e7fe      	b.n	800d5f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00a      	beq.n	800d616 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	61fb      	str	r3, [r7, #28]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d103      	bne.n	800d626 <xQueueGiveFromISR+0x58>
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <xQueueGiveFromISR+0x5c>
 800d626:	2301      	movs	r3, #1
 800d628:	e000      	b.n	800d62c <xQueueGiveFromISR+0x5e>
 800d62a:	2300      	movs	r3, #0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	61bb      	str	r3, [r7, #24]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d646:	f001 feaf 	bl	800f3a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d64a:	f3ef 8211 	mrs	r2, BASEPRI
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	617a      	str	r2, [r7, #20]
 800d660:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d662:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d664:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d672:	429a      	cmp	r2, r3
 800d674:	d22b      	bcs.n	800d6ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d686:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d690:	d112      	bne.n	800d6b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	2b00      	cmp	r3, #0
 800d698:	d016      	beq.n	800d6c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69c:	3324      	adds	r3, #36	; 0x24
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 f892 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00e      	beq.n	800d6c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00b      	beq.n	800d6c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	e007      	b.n	800d6c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6bc:	3301      	adds	r3, #1
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	b25a      	sxtb	r2, r3
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d6cc:	e001      	b.n	800d6d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f383 8811 	msr	BASEPRI, r3
}
 800d6dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3738      	adds	r7, #56	; 0x38
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08c      	sub	sp, #48	; 0x30
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10a      	bne.n	800d718 <xQueueReceive+0x30>
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	f383 8811 	msr	BASEPRI, r3
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	623b      	str	r3, [r7, #32]
}
 800d714:	bf00      	nop
 800d716:	e7fe      	b.n	800d716 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d103      	bne.n	800d726 <xQueueReceive+0x3e>
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <xQueueReceive+0x42>
 800d726:	2301      	movs	r3, #1
 800d728:	e000      	b.n	800d72c <xQueueReceive+0x44>
 800d72a:	2300      	movs	r3, #0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xQueueReceive+0x5e>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	61fb      	str	r3, [r7, #28]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d746:	f001 f9ff 	bl	800eb48 <xTaskGetSchedulerState>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <xQueueReceive+0x6e>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <xQueueReceive+0x72>
 800d756:	2301      	movs	r3, #1
 800d758:	e000      	b.n	800d75c <xQueueReceive+0x74>
 800d75a:	2300      	movs	r3, #0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10a      	bne.n	800d776 <xQueueReceive+0x8e>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	61bb      	str	r3, [r7, #24]
}
 800d772:	bf00      	nop
 800d774:	e7fe      	b.n	800d774 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d776:	f001 fd35 	bl	800f1e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	2b00      	cmp	r3, #0
 800d784:	d01f      	beq.n	800d7c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d78a:	f000 fafa 	bl	800dd82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d790:	1e5a      	subs	r2, r3, #1
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00f      	beq.n	800d7be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	3310      	adds	r3, #16
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 f810 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d007      	beq.n	800d7be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7ae:	4b3d      	ldr	r3, [pc, #244]	; (800d8a4 <xQueueReceive+0x1bc>)
 800d7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7be:	f001 fd41 	bl	800f244 <vPortExitCritical>
				return pdPASS;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e069      	b.n	800d89a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d103      	bne.n	800d7d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7cc:	f001 fd3a 	bl	800f244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e062      	b.n	800d89a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d106      	bne.n	800d7e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7da:	f107 0310 	add.w	r3, r7, #16
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 f854 	bl	800e88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7e8:	f001 fd2c 	bl	800f244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7ec:	f000 fde2 	bl	800e3b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7f0:	f001 fcf8 	bl	800f1e4 <vPortEnterCritical>
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7fa:	b25b      	sxtb	r3, r3
 800d7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d800:	d103      	bne.n	800d80a <xQueueReceive+0x122>
 800d802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d810:	b25b      	sxtb	r3, r3
 800d812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d816:	d103      	bne.n	800d820 <xQueueReceive+0x138>
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	2200      	movs	r2, #0
 800d81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d820:	f001 fd10 	bl	800f244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d824:	1d3a      	adds	r2, r7, #4
 800d826:	f107 0310 	add.w	r3, r7, #16
 800d82a:	4611      	mov	r1, r2
 800d82c:	4618      	mov	r0, r3
 800d82e:	f001 f843 	bl	800e8b8 <xTaskCheckForTimeOut>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d123      	bne.n	800d880 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d83a:	f000 fb1a 	bl	800de72 <prvIsQueueEmpty>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d017      	beq.n	800d874 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	3324      	adds	r3, #36	; 0x24
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 ff97 	bl	800e780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d854:	f000 fabb 	bl	800ddce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d858:	f000 fdba 	bl	800e3d0 <xTaskResumeAll>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d189      	bne.n	800d776 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d862:	4b10      	ldr	r3, [pc, #64]	; (800d8a4 <xQueueReceive+0x1bc>)
 800d864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	e780      	b.n	800d776 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d876:	f000 faaa 	bl	800ddce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d87a:	f000 fda9 	bl	800e3d0 <xTaskResumeAll>
 800d87e:	e77a      	b.n	800d776 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d882:	f000 faa4 	bl	800ddce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d886:	f000 fda3 	bl	800e3d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d88c:	f000 faf1 	bl	800de72 <prvIsQueueEmpty>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	f43f af6f 	beq.w	800d776 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d898:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3730      	adds	r7, #48	; 0x30
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	e000ed04 	.word	0xe000ed04

0800d8a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b08e      	sub	sp, #56	; 0x38
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10a      	bne.n	800d8da <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	623b      	str	r3, [r7, #32]
}
 800d8d6:	bf00      	nop
 800d8d8:	e7fe      	b.n	800d8d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	61fb      	str	r3, [r7, #28]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8f8:	f001 f926 	bl	800eb48 <xTaskGetSchedulerState>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d102      	bne.n	800d908 <xQueueSemaphoreTake+0x60>
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <xQueueSemaphoreTake+0x64>
 800d908:	2301      	movs	r3, #1
 800d90a:	e000      	b.n	800d90e <xQueueSemaphoreTake+0x66>
 800d90c:	2300      	movs	r3, #0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10a      	bne.n	800d928 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	61bb      	str	r3, [r7, #24]
}
 800d924:	bf00      	nop
 800d926:	e7fe      	b.n	800d926 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d928:	f001 fc5c 	bl	800f1e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d930:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	2b00      	cmp	r3, #0
 800d936:	d024      	beq.n	800d982 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	1e5a      	subs	r2, r3, #1
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d104      	bne.n	800d952 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d948:	f001 faa6 	bl	800ee98 <pvTaskIncrementMutexHeldCount>
 800d94c:	4602      	mov	r2, r0
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00f      	beq.n	800d97a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	3310      	adds	r3, #16
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 ff32 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d007      	beq.n	800d97a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d96a:	4b54      	ldr	r3, [pc, #336]	; (800dabc <xQueueSemaphoreTake+0x214>)
 800d96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d97a:	f001 fc63 	bl	800f244 <vPortExitCritical>
				return pdPASS;
 800d97e:	2301      	movs	r3, #1
 800d980:	e097      	b.n	800dab2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d111      	bne.n	800d9ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d9a4:	f001 fc4e 	bl	800f244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e082      	b.n	800dab2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 ff68 	bl	800e88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9c0:	f001 fc40 	bl	800f244 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9c4:	f000 fcf6 	bl	800e3b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9c8:	f001 fc0c 	bl	800f1e4 <vPortEnterCritical>
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9d2:	b25b      	sxtb	r3, r3
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d8:	d103      	bne.n	800d9e2 <xQueueSemaphoreTake+0x13a>
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9e8:	b25b      	sxtb	r3, r3
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	d103      	bne.n	800d9f8 <xQueueSemaphoreTake+0x150>
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9f8:	f001 fc24 	bl	800f244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	4611      	mov	r1, r2
 800da04:	4618      	mov	r0, r3
 800da06:	f000 ff57 	bl	800e8b8 <xTaskCheckForTimeOut>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d132      	bne.n	800da76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da12:	f000 fa2e 	bl	800de72 <prvIsQueueEmpty>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d026      	beq.n	800da6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d109      	bne.n	800da38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800da24:	f001 fbde 	bl	800f1e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f001 f8a9 	bl	800eb84 <xTaskPriorityInherit>
 800da32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da34:	f001 fc06 	bl	800f244 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	3324      	adds	r3, #36	; 0x24
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	4611      	mov	r1, r2
 800da40:	4618      	mov	r0, r3
 800da42:	f000 fe9d 	bl	800e780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da48:	f000 f9c1 	bl	800ddce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da4c:	f000 fcc0 	bl	800e3d0 <xTaskResumeAll>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	f47f af68 	bne.w	800d928 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800da58:	4b18      	ldr	r3, [pc, #96]	; (800dabc <xQueueSemaphoreTake+0x214>)
 800da5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da5e:	601a      	str	r2, [r3, #0]
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	e75e      	b.n	800d928 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da6c:	f000 f9af 	bl	800ddce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da70:	f000 fcae 	bl	800e3d0 <xTaskResumeAll>
 800da74:	e758      	b.n	800d928 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da78:	f000 f9a9 	bl	800ddce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da7c:	f000 fca8 	bl	800e3d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da82:	f000 f9f6 	bl	800de72 <prvIsQueueEmpty>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f43f af4d 	beq.w	800d928 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00d      	beq.n	800dab0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800da94:	f001 fba6 	bl	800f1e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da9a:	f000 f8f0 	bl	800dc7e <prvGetDisinheritPriorityAfterTimeout>
 800da9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daa6:	4618      	mov	r0, r3
 800daa8:	f001 f968 	bl	800ed7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800daac:	f001 fbca 	bl	800f244 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3738      	adds	r7, #56	; 0x38
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	e000ed04 	.word	0xe000ed04

0800dac0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b08e      	sub	sp, #56	; 0x38
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10a      	bne.n	800daec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	623b      	str	r3, [r7, #32]
}
 800dae8:	bf00      	nop
 800daea:	e7fe      	b.n	800daea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d103      	bne.n	800dafa <xQueueReceiveFromISR+0x3a>
 800daf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <xQueueReceiveFromISR+0x3e>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e000      	b.n	800db00 <xQueueReceiveFromISR+0x40>
 800dafe:	2300      	movs	r3, #0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10a      	bne.n	800db1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	61fb      	str	r3, [r7, #28]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db1a:	f001 fc45 	bl	800f3a8 <vPortValidateInterruptPriority>
	__asm volatile
 800db1e:	f3ef 8211 	mrs	r2, BASEPRI
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	61ba      	str	r2, [r7, #24]
 800db34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	2b00      	cmp	r3, #0
 800db44:	d02f      	beq.n	800dba6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db50:	68b9      	ldr	r1, [r7, #8]
 800db52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db54:	f000 f915 	bl	800dd82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	1e5a      	subs	r2, r3, #1
 800db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db68:	d112      	bne.n	800db90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d016      	beq.n	800dba0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db74:	3310      	adds	r3, #16
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fe26 	bl	800e7c8 <xTaskRemoveFromEventList>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00e      	beq.n	800dba0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00b      	beq.n	800dba0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	e007      	b.n	800dba0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db94:	3301      	adds	r3, #1
 800db96:	b2db      	uxtb	r3, r3
 800db98:	b25a      	sxtb	r2, r3
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dba0:	2301      	movs	r3, #1
 800dba2:	637b      	str	r3, [r7, #52]	; 0x34
 800dba4:	e001      	b.n	800dbaa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	637b      	str	r3, [r7, #52]	; 0x34
 800dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f383 8811 	msr	BASEPRI, r3
}
 800dbb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3738      	adds	r7, #56	; 0x38
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10a      	bne.n	800dbe4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	60bb      	str	r3, [r7, #8]
}
 800dbe0:	bf00      	nop
 800dbe2:	e7fe      	b.n	800dbe2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800dbe4:	f001 fafe 	bl	800f1e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800dbee:	f001 fb29 	bl	800f244 <vPortExitCritical>

	return uxReturn;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b087      	sub	sp, #28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d10a      	bne.n	800dc24 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	60fb      	str	r3, [r7, #12]
}
 800dc20:	bf00      	nop
 800dc22:	e7fe      	b.n	800dc22 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc28:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800dc2a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	371c      	adds	r7, #28
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10a      	bne.n	800dc60 <vQueueDelete+0x28>
	__asm volatile
 800dc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4e:	f383 8811 	msr	BASEPRI, r3
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	60bb      	str	r3, [r7, #8]
}
 800dc5c:	bf00      	nop
 800dc5e:	e7fe      	b.n	800dc5e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f000 f935 	bl	800ded0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f001 fca5 	bl	800f5c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dc76:	bf00      	nop
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc7e:	b480      	push	{r7}
 800dc80:	b085      	sub	sp, #20
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f1c3 0307 	rsb	r3, r3, #7
 800dc98:	60fb      	str	r3, [r7, #12]
 800dc9a:	e001      	b.n	800dca0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dca0:	68fb      	ldr	r3, [r7, #12]
	}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b086      	sub	sp, #24
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	60f8      	str	r0, [r7, #12]
 800dcb6:	60b9      	str	r1, [r7, #8]
 800dcb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10d      	bne.n	800dce8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d14d      	bne.n	800dd70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 ffc9 	bl	800ec70 <xTaskPriorityDisinherit>
 800dcde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	609a      	str	r2, [r3, #8]
 800dce6:	e043      	b.n	800dd70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d119      	bne.n	800dd22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6858      	ldr	r0, [r3, #4]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	68b9      	ldr	r1, [r7, #8]
 800dcfa:	f00e ffcb 	bl	801cc94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd06:	441a      	add	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d32b      	bcc.n	800dd70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	605a      	str	r2, [r3, #4]
 800dd20:	e026      	b.n	800dd70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	68d8      	ldr	r0, [r3, #12]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	68b9      	ldr	r1, [r7, #8]
 800dd2e:	f00e ffb1 	bl	801cc94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68da      	ldr	r2, [r3, #12]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3a:	425b      	negs	r3, r3
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d207      	bcs.n	800dd5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	689a      	ldr	r2, [r3, #8]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	425b      	negs	r3, r3
 800dd58:	441a      	add	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d105      	bne.n	800dd70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd78:	697b      	ldr	r3, [r7, #20]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3718      	adds	r7, #24
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d018      	beq.n	800ddc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9c:	441a      	add	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68da      	ldr	r2, [r3, #12]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d303      	bcc.n	800ddb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68d9      	ldr	r1, [r3, #12]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	6838      	ldr	r0, [r7, #0]
 800ddc2:	f00e ff67 	bl	801cc94 <memcpy>
	}
}
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddd6:	f001 fa05 	bl	800f1e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dde0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dde2:	e011      	b.n	800de08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d012      	beq.n	800de12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	3324      	adds	r3, #36	; 0x24
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 fce9 	bl	800e7c8 <xTaskRemoveFromEventList>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ddfc:	f000 fdbe 	bl	800e97c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	3b01      	subs	r3, #1
 800de04:	b2db      	uxtb	r3, r3
 800de06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dce9      	bgt.n	800dde4 <prvUnlockQueue+0x16>
 800de10:	e000      	b.n	800de14 <prvUnlockQueue+0x46>
					break;
 800de12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	22ff      	movs	r2, #255	; 0xff
 800de18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de1c:	f001 fa12 	bl	800f244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de20:	f001 f9e0 	bl	800f1e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de2c:	e011      	b.n	800de52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d012      	beq.n	800de5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	3310      	adds	r3, #16
 800de3a:	4618      	mov	r0, r3
 800de3c:	f000 fcc4 	bl	800e7c8 <xTaskRemoveFromEventList>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de46:	f000 fd99 	bl	800e97c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de4a:	7bbb      	ldrb	r3, [r7, #14]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de56:	2b00      	cmp	r3, #0
 800de58:	dce9      	bgt.n	800de2e <prvUnlockQueue+0x60>
 800de5a:	e000      	b.n	800de5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	22ff      	movs	r2, #255	; 0xff
 800de62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de66:	f001 f9ed 	bl	800f244 <vPortExitCritical>
}
 800de6a:	bf00      	nop
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b084      	sub	sp, #16
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de7a:	f001 f9b3 	bl	800f1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de82:	2b00      	cmp	r3, #0
 800de84:	d102      	bne.n	800de8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de86:	2301      	movs	r3, #1
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	e001      	b.n	800de90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de90:	f001 f9d8 	bl	800f244 <vPortExitCritical>

	return xReturn;
 800de94:	68fb      	ldr	r3, [r7, #12]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dea6:	f001 f99d 	bl	800f1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d102      	bne.n	800debc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800deb6:	2301      	movs	r3, #1
 800deb8:	60fb      	str	r3, [r7, #12]
 800deba:	e001      	b.n	800dec0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800debc:	2300      	movs	r3, #0
 800debe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dec0:	f001 f9c0 	bl	800f244 <vPortExitCritical>

	return xReturn;
 800dec4:	68fb      	ldr	r3, [r7, #12]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
	...

0800ded0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	e016      	b.n	800df0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dede:	4a10      	ldr	r2, [pc, #64]	; (800df20 <vQueueUnregisterQueue+0x50>)
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	4413      	add	r3, r2
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	429a      	cmp	r2, r3
 800deec:	d10b      	bne.n	800df06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800deee:	4a0c      	ldr	r2, [pc, #48]	; (800df20 <vQueueUnregisterQueue+0x50>)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2100      	movs	r1, #0
 800def4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800def8:	4a09      	ldr	r2, [pc, #36]	; (800df20 <vQueueUnregisterQueue+0x50>)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	00db      	lsls	r3, r3, #3
 800defe:	4413      	add	r3, r2
 800df00:	2200      	movs	r2, #0
 800df02:	605a      	str	r2, [r3, #4]
				break;
 800df04:	e006      	b.n	800df14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3301      	adds	r3, #1
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2b07      	cmp	r3, #7
 800df10:	d9e5      	bls.n	800dede <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800df12:	bf00      	nop
 800df14:	bf00      	nop
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	2000a7c0 	.word	0x2000a7c0

0800df24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08e      	sub	sp, #56	; 0x38
 800df28:	af04      	add	r7, sp, #16
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
 800df30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10a      	bne.n	800df4e <xTaskCreateStatic+0x2a>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	623b      	str	r3, [r7, #32]
}
 800df4a:	bf00      	nop
 800df4c:	e7fe      	b.n	800df4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10a      	bne.n	800df6a <xTaskCreateStatic+0x46>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	61fb      	str	r3, [r7, #28]
}
 800df66:	bf00      	nop
 800df68:	e7fe      	b.n	800df68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df6a:	23b4      	movs	r3, #180	; 0xb4
 800df6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	2bb4      	cmp	r3, #180	; 0xb4
 800df72:	d00a      	beq.n	800df8a <xTaskCreateStatic+0x66>
	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	61bb      	str	r3, [r7, #24]
}
 800df86:	bf00      	nop
 800df88:	e7fe      	b.n	800df88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d01e      	beq.n	800dfd0 <xTaskCreateStatic+0xac>
 800df92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01b      	beq.n	800dfd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	2202      	movs	r2, #2
 800dfa6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9303      	str	r3, [sp, #12]
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	9302      	str	r3, [sp, #8]
 800dfb2:	f107 0314 	add.w	r3, r7, #20
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f000 f850 	bl	800e068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfca:	f000 f8eb 	bl	800e1a4 <prvAddNewTaskToReadyList>
 800dfce:	e001      	b.n	800dfd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfd4:	697b      	ldr	r3, [r7, #20]
	}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3728      	adds	r7, #40	; 0x28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b08c      	sub	sp, #48	; 0x30
 800dfe2:	af04      	add	r7, sp, #16
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	603b      	str	r3, [r7, #0]
 800dfea:	4613      	mov	r3, r2
 800dfec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 fa18 	bl	800f428 <pvPortMalloc>
 800dff8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00e      	beq.n	800e01e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e000:	20b4      	movs	r0, #180	; 0xb4
 800e002:	f001 fa11 	bl	800f428 <pvPortMalloc>
 800e006:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d003      	beq.n	800e016 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	631a      	str	r2, [r3, #48]	; 0x30
 800e014:	e005      	b.n	800e022 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e016:	6978      	ldr	r0, [r7, #20]
 800e018:	f001 fad2 	bl	800f5c0 <vPortFree>
 800e01c:	e001      	b.n	800e022 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d017      	beq.n	800e058 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e030:	88fa      	ldrh	r2, [r7, #6]
 800e032:	2300      	movs	r3, #0
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	9302      	str	r3, [sp, #8]
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f000 f80e 	bl	800e068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e04c:	69f8      	ldr	r0, [r7, #28]
 800e04e:	f000 f8a9 	bl	800e1a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e052:	2301      	movs	r3, #1
 800e054:	61bb      	str	r3, [r7, #24]
 800e056:	e002      	b.n	800e05e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e058:	f04f 33ff 	mov.w	r3, #4294967295
 800e05c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e05e:	69bb      	ldr	r3, [r7, #24]
	}
 800e060:	4618      	mov	r0, r3
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b088      	sub	sp, #32
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e080:	3b01      	subs	r3, #1
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	f023 0307 	bic.w	r3, r3, #7
 800e08e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00a      	beq.n	800e0b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	617b      	str	r3, [r7, #20]
}
 800e0ac:	bf00      	nop
 800e0ae:	e7fe      	b.n	800e0ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d01f      	beq.n	800e0f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	61fb      	str	r3, [r7, #28]
 800e0ba:	e012      	b.n	800e0e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	7819      	ldrb	r1, [r3, #0]
 800e0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	3334      	adds	r3, #52	; 0x34
 800e0cc:	460a      	mov	r2, r1
 800e0ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d006      	beq.n	800e0ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	61fb      	str	r3, [r7, #28]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	2b0f      	cmp	r3, #15
 800e0e6:	d9e9      	bls.n	800e0bc <prvInitialiseNewTask+0x54>
 800e0e8:	e000      	b.n	800e0ec <prvInitialiseNewTask+0x84>
			{
				break;
 800e0ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0f4:	e003      	b.n	800e0fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e100:	2b06      	cmp	r3, #6
 800e102:	d901      	bls.n	800e108 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e104:	2306      	movs	r3, #6
 800e106:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e10c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e112:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e116:	2200      	movs	r2, #0
 800e118:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	3304      	adds	r3, #4
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fe fea2 	bl	800ce68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e126:	3318      	adds	r3, #24
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fe9d 	bl	800ce68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e132:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	f1c3 0207 	rsb	r2, r3, #7
 800e13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e142:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e146:	2200      	movs	r2, #0
 800e148:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e156:	334c      	adds	r3, #76	; 0x4c
 800e158:	2260      	movs	r2, #96	; 0x60
 800e15a:	2100      	movs	r1, #0
 800e15c:	4618      	mov	r0, r3
 800e15e:	f00e fdc1 	bl	801cce4 <memset>
 800e162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e164:	4a0c      	ldr	r2, [pc, #48]	; (800e198 <prvInitialiseNewTask+0x130>)
 800e166:	651a      	str	r2, [r3, #80]	; 0x50
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	4a0c      	ldr	r2, [pc, #48]	; (800e19c <prvInitialiseNewTask+0x134>)
 800e16c:	655a      	str	r2, [r3, #84]	; 0x54
 800e16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e170:	4a0b      	ldr	r2, [pc, #44]	; (800e1a0 <prvInitialiseNewTask+0x138>)
 800e172:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	68f9      	ldr	r1, [r7, #12]
 800e178:	69b8      	ldr	r0, [r7, #24]
 800e17a:	f000 ff07 	bl	800ef8c <pxPortInitialiseStack>
 800e17e:	4602      	mov	r2, r0
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e18e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e190:	bf00      	nop
 800e192:	3720      	adds	r7, #32
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	08021ab8 	.word	0x08021ab8
 800e19c:	08021ad8 	.word	0x08021ad8
 800e1a0:	08021a98 	.word	0x08021a98

0800e1a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1ac:	f001 f81a 	bl	800f1e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1b0:	4b2a      	ldr	r3, [pc, #168]	; (800e25c <prvAddNewTaskToReadyList+0xb8>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	4a29      	ldr	r2, [pc, #164]	; (800e25c <prvAddNewTaskToReadyList+0xb8>)
 800e1b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1ba:	4b29      	ldr	r3, [pc, #164]	; (800e260 <prvAddNewTaskToReadyList+0xbc>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d109      	bne.n	800e1d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1c2:	4a27      	ldr	r2, [pc, #156]	; (800e260 <prvAddNewTaskToReadyList+0xbc>)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1c8:	4b24      	ldr	r3, [pc, #144]	; (800e25c <prvAddNewTaskToReadyList+0xb8>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d110      	bne.n	800e1f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1d0:	f000 fbf8 	bl	800e9c4 <prvInitialiseTaskLists>
 800e1d4:	e00d      	b.n	800e1f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1d6:	4b23      	ldr	r3, [pc, #140]	; (800e264 <prvAddNewTaskToReadyList+0xc0>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d109      	bne.n	800e1f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1de:	4b20      	ldr	r3, [pc, #128]	; (800e260 <prvAddNewTaskToReadyList+0xbc>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d802      	bhi.n	800e1f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1ec:	4a1c      	ldr	r2, [pc, #112]	; (800e260 <prvAddNewTaskToReadyList+0xbc>)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e1f2:	4b1d      	ldr	r3, [pc, #116]	; (800e268 <prvAddNewTaskToReadyList+0xc4>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	4a1b      	ldr	r2, [pc, #108]	; (800e268 <prvAddNewTaskToReadyList+0xc4>)
 800e1fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e200:	2201      	movs	r2, #1
 800e202:	409a      	lsls	r2, r3
 800e204:	4b19      	ldr	r3, [pc, #100]	; (800e26c <prvAddNewTaskToReadyList+0xc8>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4313      	orrs	r3, r2
 800e20a:	4a18      	ldr	r2, [pc, #96]	; (800e26c <prvAddNewTaskToReadyList+0xc8>)
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e212:	4613      	mov	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	4a15      	ldr	r2, [pc, #84]	; (800e270 <prvAddNewTaskToReadyList+0xcc>)
 800e21c:	441a      	add	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	3304      	adds	r3, #4
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f7fe fe2c 	bl	800ce82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e22a:	f001 f80b 	bl	800f244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e22e:	4b0d      	ldr	r3, [pc, #52]	; (800e264 <prvAddNewTaskToReadyList+0xc0>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00e      	beq.n	800e254 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e236:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <prvAddNewTaskToReadyList+0xbc>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e240:	429a      	cmp	r2, r3
 800e242:	d207      	bcs.n	800e254 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e244:	4b0b      	ldr	r3, [pc, #44]	; (800e274 <prvAddNewTaskToReadyList+0xd0>)
 800e246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	2000082c 	.word	0x2000082c
 800e260:	2000072c 	.word	0x2000072c
 800e264:	20000838 	.word	0x20000838
 800e268:	20000848 	.word	0x20000848
 800e26c:	20000834 	.word	0x20000834
 800e270:	20000730 	.word	0x20000730
 800e274:	e000ed04 	.word	0xe000ed04

0800e278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d017      	beq.n	800e2ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e28a:	4b13      	ldr	r3, [pc, #76]	; (800e2d8 <vTaskDelay+0x60>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00a      	beq.n	800e2a8 <vTaskDelay+0x30>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	60bb      	str	r3, [r7, #8]
}
 800e2a4:	bf00      	nop
 800e2a6:	e7fe      	b.n	800e2a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2a8:	f000 f884 	bl	800e3b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fe06 	bl	800eec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2b4:	f000 f88c 	bl	800e3d0 <xTaskResumeAll>
 800e2b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d107      	bne.n	800e2d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e2c0:	4b06      	ldr	r3, [pc, #24]	; (800e2dc <vTaskDelay+0x64>)
 800e2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2d0:	bf00      	nop
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20000854 	.word	0x20000854
 800e2dc:	e000ed04 	.word	0xe000ed04

0800e2e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b08a      	sub	sp, #40	; 0x28
 800e2e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2ee:	463a      	mov	r2, r7
 800e2f0:	1d39      	adds	r1, r7, #4
 800e2f2:	f107 0308 	add.w	r3, r7, #8
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7f2 fffc 	bl	80012f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	9202      	str	r2, [sp, #8]
 800e304:	9301      	str	r3, [sp, #4]
 800e306:	2300      	movs	r3, #0
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	2300      	movs	r3, #0
 800e30c:	460a      	mov	r2, r1
 800e30e:	4921      	ldr	r1, [pc, #132]	; (800e394 <vTaskStartScheduler+0xb4>)
 800e310:	4821      	ldr	r0, [pc, #132]	; (800e398 <vTaskStartScheduler+0xb8>)
 800e312:	f7ff fe07 	bl	800df24 <xTaskCreateStatic>
 800e316:	4603      	mov	r3, r0
 800e318:	4a20      	ldr	r2, [pc, #128]	; (800e39c <vTaskStartScheduler+0xbc>)
 800e31a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e31c:	4b1f      	ldr	r3, [pc, #124]	; (800e39c <vTaskStartScheduler+0xbc>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e324:	2301      	movs	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
 800e328:	e001      	b.n	800e32e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	2b01      	cmp	r3, #1
 800e332:	d11b      	bne.n	800e36c <vTaskStartScheduler+0x8c>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	613b      	str	r3, [r7, #16]
}
 800e346:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e348:	4b15      	ldr	r3, [pc, #84]	; (800e3a0 <vTaskStartScheduler+0xc0>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	334c      	adds	r3, #76	; 0x4c
 800e34e:	4a15      	ldr	r2, [pc, #84]	; (800e3a4 <vTaskStartScheduler+0xc4>)
 800e350:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e352:	4b15      	ldr	r3, [pc, #84]	; (800e3a8 <vTaskStartScheduler+0xc8>)
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <vTaskStartScheduler+0xcc>)
 800e35c:	2201      	movs	r2, #1
 800e35e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e360:	4b13      	ldr	r3, [pc, #76]	; (800e3b0 <vTaskStartScheduler+0xd0>)
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e366:	f000 fe9b 	bl	800f0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e36a:	e00e      	b.n	800e38a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e372:	d10a      	bne.n	800e38a <vTaskStartScheduler+0xaa>
	__asm volatile
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	60fb      	str	r3, [r7, #12]
}
 800e386:	bf00      	nop
 800e388:	e7fe      	b.n	800e388 <vTaskStartScheduler+0xa8>
}
 800e38a:	bf00      	nop
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0801e470 	.word	0x0801e470
 800e398:	0800e995 	.word	0x0800e995
 800e39c:	20000850 	.word	0x20000850
 800e3a0:	2000072c 	.word	0x2000072c
 800e3a4:	200002f8 	.word	0x200002f8
 800e3a8:	2000084c 	.word	0x2000084c
 800e3ac:	20000838 	.word	0x20000838
 800e3b0:	20000830 	.word	0x20000830

0800e3b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e3b8:	4b04      	ldr	r3, [pc, #16]	; (800e3cc <vTaskSuspendAll+0x18>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	4a03      	ldr	r2, [pc, #12]	; (800e3cc <vTaskSuspendAll+0x18>)
 800e3c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e3c2:	bf00      	nop
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr
 800e3cc:	20000854 	.word	0x20000854

0800e3d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3de:	4b41      	ldr	r3, [pc, #260]	; (800e4e4 <xTaskResumeAll+0x114>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10a      	bne.n	800e3fc <xTaskResumeAll+0x2c>
	__asm volatile
 800e3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	603b      	str	r3, [r7, #0]
}
 800e3f8:	bf00      	nop
 800e3fa:	e7fe      	b.n	800e3fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3fc:	f000 fef2 	bl	800f1e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e400:	4b38      	ldr	r3, [pc, #224]	; (800e4e4 <xTaskResumeAll+0x114>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3b01      	subs	r3, #1
 800e406:	4a37      	ldr	r2, [pc, #220]	; (800e4e4 <xTaskResumeAll+0x114>)
 800e408:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e40a:	4b36      	ldr	r3, [pc, #216]	; (800e4e4 <xTaskResumeAll+0x114>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d161      	bne.n	800e4d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e412:	4b35      	ldr	r3, [pc, #212]	; (800e4e8 <xTaskResumeAll+0x118>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d05d      	beq.n	800e4d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e41a:	e02e      	b.n	800e47a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e41c:	4b33      	ldr	r3, [pc, #204]	; (800e4ec <xTaskResumeAll+0x11c>)
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3318      	adds	r3, #24
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe fd87 	bl	800cf3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	3304      	adds	r3, #4
 800e432:	4618      	mov	r0, r3
 800e434:	f7fe fd82 	bl	800cf3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43c:	2201      	movs	r2, #1
 800e43e:	409a      	lsls	r2, r3
 800e440:	4b2b      	ldr	r3, [pc, #172]	; (800e4f0 <xTaskResumeAll+0x120>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4313      	orrs	r3, r2
 800e446:	4a2a      	ldr	r2, [pc, #168]	; (800e4f0 <xTaskResumeAll+0x120>)
 800e448:	6013      	str	r3, [r2, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44e:	4613      	mov	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4413      	add	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4a27      	ldr	r2, [pc, #156]	; (800e4f4 <xTaskResumeAll+0x124>)
 800e458:	441a      	add	r2, r3
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f7fe fd0e 	bl	800ce82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46a:	4b23      	ldr	r3, [pc, #140]	; (800e4f8 <xTaskResumeAll+0x128>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e470:	429a      	cmp	r2, r3
 800e472:	d302      	bcc.n	800e47a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e474:	4b21      	ldr	r3, [pc, #132]	; (800e4fc <xTaskResumeAll+0x12c>)
 800e476:	2201      	movs	r2, #1
 800e478:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e47a:	4b1c      	ldr	r3, [pc, #112]	; (800e4ec <xTaskResumeAll+0x11c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1cc      	bne.n	800e41c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e488:	f000 fb3e 	bl	800eb08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e48c:	4b1c      	ldr	r3, [pc, #112]	; (800e500 <xTaskResumeAll+0x130>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d010      	beq.n	800e4ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e498:	f000 f858 	bl	800e54c <xTaskIncrementTick>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e4a2:	4b16      	ldr	r3, [pc, #88]	; (800e4fc <xTaskResumeAll+0x12c>)
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1f1      	bne.n	800e498 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e4b4:	4b12      	ldr	r3, [pc, #72]	; (800e500 <xTaskResumeAll+0x130>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4ba:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <xTaskResumeAll+0x12c>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d009      	beq.n	800e4d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4c6:	4b0f      	ldr	r3, [pc, #60]	; (800e504 <xTaskResumeAll+0x134>)
 800e4c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4d6:	f000 feb5 	bl	800f244 <vPortExitCritical>

	return xAlreadyYielded;
 800e4da:	68bb      	ldr	r3, [r7, #8]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	20000854 	.word	0x20000854
 800e4e8:	2000082c 	.word	0x2000082c
 800e4ec:	200007ec 	.word	0x200007ec
 800e4f0:	20000834 	.word	0x20000834
 800e4f4:	20000730 	.word	0x20000730
 800e4f8:	2000072c 	.word	0x2000072c
 800e4fc:	20000840 	.word	0x20000840
 800e500:	2000083c 	.word	0x2000083c
 800e504:	e000ed04 	.word	0xe000ed04

0800e508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e50e:	4b05      	ldr	r3, [pc, #20]	; (800e524 <xTaskGetTickCount+0x1c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e514:	687b      	ldr	r3, [r7, #4]
}
 800e516:	4618      	mov	r0, r3
 800e518:	370c      	adds	r7, #12
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	20000830 	.word	0x20000830

0800e528 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e52e:	f000 ff3b 	bl	800f3a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e532:	2300      	movs	r3, #0
 800e534:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e536:	4b04      	ldr	r3, [pc, #16]	; (800e548 <xTaskGetTickCountFromISR+0x20>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e53c:	683b      	ldr	r3, [r7, #0]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	20000830 	.word	0x20000830

0800e54c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e552:	2300      	movs	r3, #0
 800e554:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e556:	4b4e      	ldr	r3, [pc, #312]	; (800e690 <xTaskIncrementTick+0x144>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f040 808e 	bne.w	800e67c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e560:	4b4c      	ldr	r3, [pc, #304]	; (800e694 <xTaskIncrementTick+0x148>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3301      	adds	r3, #1
 800e566:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e568:	4a4a      	ldr	r2, [pc, #296]	; (800e694 <xTaskIncrementTick+0x148>)
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d120      	bne.n	800e5b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e574:	4b48      	ldr	r3, [pc, #288]	; (800e698 <xTaskIncrementTick+0x14c>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00a      	beq.n	800e594 <xTaskIncrementTick+0x48>
	__asm volatile
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	603b      	str	r3, [r7, #0]
}
 800e590:	bf00      	nop
 800e592:	e7fe      	b.n	800e592 <xTaskIncrementTick+0x46>
 800e594:	4b40      	ldr	r3, [pc, #256]	; (800e698 <xTaskIncrementTick+0x14c>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	60fb      	str	r3, [r7, #12]
 800e59a:	4b40      	ldr	r3, [pc, #256]	; (800e69c <xTaskIncrementTick+0x150>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a3e      	ldr	r2, [pc, #248]	; (800e698 <xTaskIncrementTick+0x14c>)
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	4a3e      	ldr	r2, [pc, #248]	; (800e69c <xTaskIncrementTick+0x150>)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6013      	str	r3, [r2, #0]
 800e5a8:	4b3d      	ldr	r3, [pc, #244]	; (800e6a0 <xTaskIncrementTick+0x154>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	4a3c      	ldr	r2, [pc, #240]	; (800e6a0 <xTaskIncrementTick+0x154>)
 800e5b0:	6013      	str	r3, [r2, #0]
 800e5b2:	f000 faa9 	bl	800eb08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5b6:	4b3b      	ldr	r3, [pc, #236]	; (800e6a4 <xTaskIncrementTick+0x158>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	693a      	ldr	r2, [r7, #16]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d348      	bcc.n	800e652 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5c0:	4b35      	ldr	r3, [pc, #212]	; (800e698 <xTaskIncrementTick+0x14c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d104      	bne.n	800e5d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5ca:	4b36      	ldr	r3, [pc, #216]	; (800e6a4 <xTaskIncrementTick+0x158>)
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d0:	601a      	str	r2, [r3, #0]
					break;
 800e5d2:	e03e      	b.n	800e652 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d4:	4b30      	ldr	r3, [pc, #192]	; (800e698 <xTaskIncrementTick+0x14c>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5e4:	693a      	ldr	r2, [r7, #16]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d203      	bcs.n	800e5f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5ec:	4a2d      	ldr	r2, [pc, #180]	; (800e6a4 <xTaskIncrementTick+0x158>)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5f2:	e02e      	b.n	800e652 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe fc9f 	bl	800cf3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e602:	2b00      	cmp	r3, #0
 800e604:	d004      	beq.n	800e610 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	3318      	adds	r3, #24
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fc96 	bl	800cf3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e614:	2201      	movs	r2, #1
 800e616:	409a      	lsls	r2, r3
 800e618:	4b23      	ldr	r3, [pc, #140]	; (800e6a8 <xTaskIncrementTick+0x15c>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	4a22      	ldr	r2, [pc, #136]	; (800e6a8 <xTaskIncrementTick+0x15c>)
 800e620:	6013      	str	r3, [r2, #0]
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e626:	4613      	mov	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4413      	add	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4a1f      	ldr	r2, [pc, #124]	; (800e6ac <xTaskIncrementTick+0x160>)
 800e630:	441a      	add	r2, r3
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	3304      	adds	r3, #4
 800e636:	4619      	mov	r1, r3
 800e638:	4610      	mov	r0, r2
 800e63a:	f7fe fc22 	bl	800ce82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e642:	4b1b      	ldr	r3, [pc, #108]	; (800e6b0 <xTaskIncrementTick+0x164>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e648:	429a      	cmp	r2, r3
 800e64a:	d3b9      	bcc.n	800e5c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e650:	e7b6      	b.n	800e5c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e652:	4b17      	ldr	r3, [pc, #92]	; (800e6b0 <xTaskIncrementTick+0x164>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e658:	4914      	ldr	r1, [pc, #80]	; (800e6ac <xTaskIncrementTick+0x160>)
 800e65a:	4613      	mov	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	440b      	add	r3, r1
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d901      	bls.n	800e66e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e66a:	2301      	movs	r3, #1
 800e66c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e66e:	4b11      	ldr	r3, [pc, #68]	; (800e6b4 <xTaskIncrementTick+0x168>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d007      	beq.n	800e686 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e676:	2301      	movs	r3, #1
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	e004      	b.n	800e686 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e67c:	4b0e      	ldr	r3, [pc, #56]	; (800e6b8 <xTaskIncrementTick+0x16c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	3301      	adds	r3, #1
 800e682:	4a0d      	ldr	r2, [pc, #52]	; (800e6b8 <xTaskIncrementTick+0x16c>)
 800e684:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e686:	697b      	ldr	r3, [r7, #20]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	20000854 	.word	0x20000854
 800e694:	20000830 	.word	0x20000830
 800e698:	200007e4 	.word	0x200007e4
 800e69c:	200007e8 	.word	0x200007e8
 800e6a0:	20000844 	.word	0x20000844
 800e6a4:	2000084c 	.word	0x2000084c
 800e6a8:	20000834 	.word	0x20000834
 800e6ac:	20000730 	.word	0x20000730
 800e6b0:	2000072c 	.word	0x2000072c
 800e6b4:	20000840 	.word	0x20000840
 800e6b8:	2000083c 	.word	0x2000083c

0800e6bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b087      	sub	sp, #28
 800e6c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6c2:	4b29      	ldr	r3, [pc, #164]	; (800e768 <vTaskSwitchContext+0xac>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6ca:	4b28      	ldr	r3, [pc, #160]	; (800e76c <vTaskSwitchContext+0xb0>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6d0:	e044      	b.n	800e75c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e6d2:	4b26      	ldr	r3, [pc, #152]	; (800e76c <vTaskSwitchContext+0xb0>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d8:	4b25      	ldr	r3, [pc, #148]	; (800e770 <vTaskSwitchContext+0xb4>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	fab3 f383 	clz	r3, r3
 800e6e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e6e6:	7afb      	ldrb	r3, [r7, #11]
 800e6e8:	f1c3 031f 	rsb	r3, r3, #31
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	4921      	ldr	r1, [pc, #132]	; (800e774 <vTaskSwitchContext+0xb8>)
 800e6f0:	697a      	ldr	r2, [r7, #20]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	440b      	add	r3, r1
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d10a      	bne.n	800e718 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e706:	f383 8811 	msr	BASEPRI, r3
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	607b      	str	r3, [r7, #4]
}
 800e714:	bf00      	nop
 800e716:	e7fe      	b.n	800e716 <vTaskSwitchContext+0x5a>
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4a14      	ldr	r2, [pc, #80]	; (800e774 <vTaskSwitchContext+0xb8>)
 800e724:	4413      	add	r3, r2
 800e726:	613b      	str	r3, [r7, #16]
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	605a      	str	r2, [r3, #4]
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	685a      	ldr	r2, [r3, #4]
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	3308      	adds	r3, #8
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d104      	bne.n	800e748 <vTaskSwitchContext+0x8c>
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	685a      	ldr	r2, [r3, #4]
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	605a      	str	r2, [r3, #4]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	4a0a      	ldr	r2, [pc, #40]	; (800e778 <vTaskSwitchContext+0xbc>)
 800e750:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <vTaskSwitchContext+0xbc>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	334c      	adds	r3, #76	; 0x4c
 800e758:	4a08      	ldr	r2, [pc, #32]	; (800e77c <vTaskSwitchContext+0xc0>)
 800e75a:	6013      	str	r3, [r2, #0]
}
 800e75c:	bf00      	nop
 800e75e:	371c      	adds	r7, #28
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr
 800e768:	20000854 	.word	0x20000854
 800e76c:	20000840 	.word	0x20000840
 800e770:	20000834 	.word	0x20000834
 800e774:	20000730 	.word	0x20000730
 800e778:	2000072c 	.word	0x2000072c
 800e77c:	200002f8 	.word	0x200002f8

0800e780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10a      	bne.n	800e7a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	60fb      	str	r3, [r7, #12]
}
 800e7a2:	bf00      	nop
 800e7a4:	e7fe      	b.n	800e7a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7a6:	4b07      	ldr	r3, [pc, #28]	; (800e7c4 <vTaskPlaceOnEventList+0x44>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3318      	adds	r3, #24
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7fe fb8b 	bl	800ceca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	6838      	ldr	r0, [r7, #0]
 800e7b8:	f000 fb82 	bl	800eec0 <prvAddCurrentTaskToDelayedList>
}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	2000072c 	.word	0x2000072c

0800e7c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d10a      	bne.n	800e7f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	60fb      	str	r3, [r7, #12]
}
 800e7f0:	bf00      	nop
 800e7f2:	e7fe      	b.n	800e7f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3318      	adds	r3, #24
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe fb9f 	bl	800cf3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7fe:	4b1d      	ldr	r3, [pc, #116]	; (800e874 <xTaskRemoveFromEventList+0xac>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d11c      	bne.n	800e840 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	3304      	adds	r3, #4
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fe fb96 	bl	800cf3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e814:	2201      	movs	r2, #1
 800e816:	409a      	lsls	r2, r3
 800e818:	4b17      	ldr	r3, [pc, #92]	; (800e878 <xTaskRemoveFromEventList+0xb0>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	4a16      	ldr	r2, [pc, #88]	; (800e878 <xTaskRemoveFromEventList+0xb0>)
 800e820:	6013      	str	r3, [r2, #0]
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e826:	4613      	mov	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4a13      	ldr	r2, [pc, #76]	; (800e87c <xTaskRemoveFromEventList+0xb4>)
 800e830:	441a      	add	r2, r3
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	3304      	adds	r3, #4
 800e836:	4619      	mov	r1, r3
 800e838:	4610      	mov	r0, r2
 800e83a:	f7fe fb22 	bl	800ce82 <vListInsertEnd>
 800e83e:	e005      	b.n	800e84c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	3318      	adds	r3, #24
 800e844:	4619      	mov	r1, r3
 800e846:	480e      	ldr	r0, [pc, #56]	; (800e880 <xTaskRemoveFromEventList+0xb8>)
 800e848:	f7fe fb1b 	bl	800ce82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e850:	4b0c      	ldr	r3, [pc, #48]	; (800e884 <xTaskRemoveFromEventList+0xbc>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e856:	429a      	cmp	r2, r3
 800e858:	d905      	bls.n	800e866 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e85a:	2301      	movs	r3, #1
 800e85c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e85e:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <xTaskRemoveFromEventList+0xc0>)
 800e860:	2201      	movs	r2, #1
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	e001      	b.n	800e86a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e86a:	697b      	ldr	r3, [r7, #20]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20000854 	.word	0x20000854
 800e878:	20000834 	.word	0x20000834
 800e87c:	20000730 	.word	0x20000730
 800e880:	200007ec 	.word	0x200007ec
 800e884:	2000072c 	.word	0x2000072c
 800e888:	20000840 	.word	0x20000840

0800e88c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e894:	4b06      	ldr	r3, [pc, #24]	; (800e8b0 <vTaskInternalSetTimeOutState+0x24>)
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e89c:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <vTaskInternalSetTimeOutState+0x28>)
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	605a      	str	r2, [r3, #4]
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	20000844 	.word	0x20000844
 800e8b4:	20000830 	.word	0x20000830

0800e8b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b088      	sub	sp, #32
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10a      	bne.n	800e8de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	613b      	str	r3, [r7, #16]
}
 800e8da:	bf00      	nop
 800e8dc:	e7fe      	b.n	800e8dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10a      	bne.n	800e8fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	60fb      	str	r3, [r7, #12]
}
 800e8f6:	bf00      	nop
 800e8f8:	e7fe      	b.n	800e8f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e8fa:	f000 fc73 	bl	800f1e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8fe:	4b1d      	ldr	r3, [pc, #116]	; (800e974 <xTaskCheckForTimeOut+0xbc>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	69ba      	ldr	r2, [r7, #24]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e916:	d102      	bne.n	800e91e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e918:	2300      	movs	r3, #0
 800e91a:	61fb      	str	r3, [r7, #28]
 800e91c:	e023      	b.n	800e966 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	4b15      	ldr	r3, [pc, #84]	; (800e978 <xTaskCheckForTimeOut+0xc0>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	429a      	cmp	r2, r3
 800e928:	d007      	beq.n	800e93a <xTaskCheckForTimeOut+0x82>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	69ba      	ldr	r2, [r7, #24]
 800e930:	429a      	cmp	r2, r3
 800e932:	d302      	bcc.n	800e93a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e934:	2301      	movs	r3, #1
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	e015      	b.n	800e966 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	429a      	cmp	r2, r3
 800e942:	d20b      	bcs.n	800e95c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	1ad2      	subs	r2, r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff ff9b 	bl	800e88c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e956:	2300      	movs	r3, #0
 800e958:	61fb      	str	r3, [r7, #28]
 800e95a:	e004      	b.n	800e966 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	2200      	movs	r2, #0
 800e960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e962:	2301      	movs	r3, #1
 800e964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e966:	f000 fc6d 	bl	800f244 <vPortExitCritical>

	return xReturn;
 800e96a:	69fb      	ldr	r3, [r7, #28]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	20000830 	.word	0x20000830
 800e978:	20000844 	.word	0x20000844

0800e97c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e97c:	b480      	push	{r7}
 800e97e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e980:	4b03      	ldr	r3, [pc, #12]	; (800e990 <vTaskMissedYield+0x14>)
 800e982:	2201      	movs	r2, #1
 800e984:	601a      	str	r2, [r3, #0]
}
 800e986:	bf00      	nop
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	20000840 	.word	0x20000840

0800e994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e99c:	f000 f852 	bl	800ea44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9a0:	4b06      	ldr	r3, [pc, #24]	; (800e9bc <prvIdleTask+0x28>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d9f9      	bls.n	800e99c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9a8:	4b05      	ldr	r3, [pc, #20]	; (800e9c0 <prvIdleTask+0x2c>)
 800e9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9b8:	e7f0      	b.n	800e99c <prvIdleTask+0x8>
 800e9ba:	bf00      	nop
 800e9bc:	20000730 	.word	0x20000730
 800e9c0:	e000ed04 	.word	0xe000ed04

0800e9c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	607b      	str	r3, [r7, #4]
 800e9ce:	e00c      	b.n	800e9ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4a12      	ldr	r2, [pc, #72]	; (800ea24 <prvInitialiseTaskLists+0x60>)
 800e9dc:	4413      	add	r3, r2
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fa22 	bl	800ce28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b06      	cmp	r3, #6
 800e9ee:	d9ef      	bls.n	800e9d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9f0:	480d      	ldr	r0, [pc, #52]	; (800ea28 <prvInitialiseTaskLists+0x64>)
 800e9f2:	f7fe fa19 	bl	800ce28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9f6:	480d      	ldr	r0, [pc, #52]	; (800ea2c <prvInitialiseTaskLists+0x68>)
 800e9f8:	f7fe fa16 	bl	800ce28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9fc:	480c      	ldr	r0, [pc, #48]	; (800ea30 <prvInitialiseTaskLists+0x6c>)
 800e9fe:	f7fe fa13 	bl	800ce28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea02:	480c      	ldr	r0, [pc, #48]	; (800ea34 <prvInitialiseTaskLists+0x70>)
 800ea04:	f7fe fa10 	bl	800ce28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea08:	480b      	ldr	r0, [pc, #44]	; (800ea38 <prvInitialiseTaskLists+0x74>)
 800ea0a:	f7fe fa0d 	bl	800ce28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	; (800ea3c <prvInitialiseTaskLists+0x78>)
 800ea10:	4a05      	ldr	r2, [pc, #20]	; (800ea28 <prvInitialiseTaskLists+0x64>)
 800ea12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea14:	4b0a      	ldr	r3, [pc, #40]	; (800ea40 <prvInitialiseTaskLists+0x7c>)
 800ea16:	4a05      	ldr	r2, [pc, #20]	; (800ea2c <prvInitialiseTaskLists+0x68>)
 800ea18:	601a      	str	r2, [r3, #0]
}
 800ea1a:	bf00      	nop
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20000730 	.word	0x20000730
 800ea28:	200007bc 	.word	0x200007bc
 800ea2c:	200007d0 	.word	0x200007d0
 800ea30:	200007ec 	.word	0x200007ec
 800ea34:	20000800 	.word	0x20000800
 800ea38:	20000818 	.word	0x20000818
 800ea3c:	200007e4 	.word	0x200007e4
 800ea40:	200007e8 	.word	0x200007e8

0800ea44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea4a:	e019      	b.n	800ea80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea4c:	f000 fbca 	bl	800f1e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea50:	4b10      	ldr	r3, [pc, #64]	; (800ea94 <prvCheckTasksWaitingTermination+0x50>)
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe fa6d 	bl	800cf3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea62:	4b0d      	ldr	r3, [pc, #52]	; (800ea98 <prvCheckTasksWaitingTermination+0x54>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	4a0b      	ldr	r2, [pc, #44]	; (800ea98 <prvCheckTasksWaitingTermination+0x54>)
 800ea6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea6c:	4b0b      	ldr	r3, [pc, #44]	; (800ea9c <prvCheckTasksWaitingTermination+0x58>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3b01      	subs	r3, #1
 800ea72:	4a0a      	ldr	r2, [pc, #40]	; (800ea9c <prvCheckTasksWaitingTermination+0x58>)
 800ea74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea76:	f000 fbe5 	bl	800f244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 f810 	bl	800eaa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea80:	4b06      	ldr	r3, [pc, #24]	; (800ea9c <prvCheckTasksWaitingTermination+0x58>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e1      	bne.n	800ea4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	20000800 	.word	0x20000800
 800ea98:	2000082c 	.word	0x2000082c
 800ea9c:	20000814 	.word	0x20000814

0800eaa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	334c      	adds	r3, #76	; 0x4c
 800eaac:	4618      	mov	r0, r3
 800eaae:	f00e fa31 	bl	801cf14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d108      	bne.n	800eace <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eac0:	4618      	mov	r0, r3
 800eac2:	f000 fd7d 	bl	800f5c0 <vPortFree>
				vPortFree( pxTCB );
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 fd7a 	bl	800f5c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eacc:	e018      	b.n	800eb00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d103      	bne.n	800eae0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 fd71 	bl	800f5c0 <vPortFree>
	}
 800eade:	e00f      	b.n	800eb00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d00a      	beq.n	800eb00 <prvDeleteTCB+0x60>
	__asm volatile
 800eaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	60fb      	str	r3, [r7, #12]
}
 800eafc:	bf00      	nop
 800eafe:	e7fe      	b.n	800eafe <prvDeleteTCB+0x5e>
	}
 800eb00:	bf00      	nop
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb0e:	4b0c      	ldr	r3, [pc, #48]	; (800eb40 <prvResetNextTaskUnblockTime+0x38>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d104      	bne.n	800eb22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb18:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <prvResetNextTaskUnblockTime+0x3c>)
 800eb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb20:	e008      	b.n	800eb34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb22:	4b07      	ldr	r3, [pc, #28]	; (800eb40 <prvResetNextTaskUnblockTime+0x38>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	4a04      	ldr	r2, [pc, #16]	; (800eb44 <prvResetNextTaskUnblockTime+0x3c>)
 800eb32:	6013      	str	r3, [r2, #0]
}
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	200007e4 	.word	0x200007e4
 800eb44:	2000084c 	.word	0x2000084c

0800eb48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <xTaskGetSchedulerState+0x34>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d102      	bne.n	800eb5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb56:	2301      	movs	r3, #1
 800eb58:	607b      	str	r3, [r7, #4]
 800eb5a:	e008      	b.n	800eb6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb5c:	4b08      	ldr	r3, [pc, #32]	; (800eb80 <xTaskGetSchedulerState+0x38>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d102      	bne.n	800eb6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb64:	2302      	movs	r3, #2
 800eb66:	607b      	str	r3, [r7, #4]
 800eb68:	e001      	b.n	800eb6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb6e:	687b      	ldr	r3, [r7, #4]
	}
 800eb70:	4618      	mov	r0, r3
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr
 800eb7c:	20000838 	.word	0x20000838
 800eb80:	20000854 	.word	0x20000854

0800eb84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d05e      	beq.n	800ec58 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9e:	4b31      	ldr	r3, [pc, #196]	; (800ec64 <xTaskPriorityInherit+0xe0>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d24e      	bcs.n	800ec46 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	699b      	ldr	r3, [r3, #24]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	db06      	blt.n	800ebbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebb0:	4b2c      	ldr	r3, [pc, #176]	; (800ec64 <xTaskPriorityInherit+0xe0>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb6:	f1c3 0207 	rsb	r2, r3, #7
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	6959      	ldr	r1, [r3, #20]
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4a26      	ldr	r2, [pc, #152]	; (800ec68 <xTaskPriorityInherit+0xe4>)
 800ebd0:	4413      	add	r3, r2
 800ebd2:	4299      	cmp	r1, r3
 800ebd4:	d12f      	bne.n	800ec36 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe f9ae 	bl	800cf3c <uxListRemove>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10a      	bne.n	800ebfc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebea:	2201      	movs	r2, #1
 800ebec:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf0:	43da      	mvns	r2, r3
 800ebf2:	4b1e      	ldr	r3, [pc, #120]	; (800ec6c <xTaskPriorityInherit+0xe8>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	4a1c      	ldr	r2, [pc, #112]	; (800ec6c <xTaskPriorityInherit+0xe8>)
 800ebfa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebfc:	4b19      	ldr	r3, [pc, #100]	; (800ec64 <xTaskPriorityInherit+0xe0>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	409a      	lsls	r2, r3
 800ec0e:	4b17      	ldr	r3, [pc, #92]	; (800ec6c <xTaskPriorityInherit+0xe8>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4313      	orrs	r3, r2
 800ec14:	4a15      	ldr	r2, [pc, #84]	; (800ec6c <xTaskPriorityInherit+0xe8>)
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	4413      	add	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4a10      	ldr	r2, [pc, #64]	; (800ec68 <xTaskPriorityInherit+0xe4>)
 800ec26:	441a      	add	r2, r3
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	3304      	adds	r3, #4
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	4610      	mov	r0, r2
 800ec30:	f7fe f927 	bl	800ce82 <vListInsertEnd>
 800ec34:	e004      	b.n	800ec40 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec36:	4b0b      	ldr	r3, [pc, #44]	; (800ec64 <xTaskPriorityInherit+0xe0>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec40:	2301      	movs	r3, #1
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e008      	b.n	800ec58 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec4a:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <xTaskPriorityInherit+0xe0>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d201      	bcs.n	800ec58 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec54:	2301      	movs	r3, #1
 800ec56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec58:	68fb      	ldr	r3, [r7, #12]
	}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	2000072c 	.word	0x2000072c
 800ec68:	20000730 	.word	0x20000730
 800ec6c:	20000834 	.word	0x20000834

0800ec70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d06e      	beq.n	800ed64 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec86:	4b3a      	ldr	r3, [pc, #232]	; (800ed70 <xTaskPriorityDisinherit+0x100>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	693a      	ldr	r2, [r7, #16]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d00a      	beq.n	800eca6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	60fb      	str	r3, [r7, #12]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10a      	bne.n	800ecc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	f383 8811 	msr	BASEPRI, r3
 800ecb6:	f3bf 8f6f 	isb	sy
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	60bb      	str	r3, [r7, #8]
}
 800ecc0:	bf00      	nop
 800ecc2:	e7fe      	b.n	800ecc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecc8:	1e5a      	subs	r2, r3, #1
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d044      	beq.n	800ed64 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d140      	bne.n	800ed64 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	3304      	adds	r3, #4
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe f928 	bl	800cf3c <uxListRemove>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d115      	bne.n	800ed1e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf6:	491f      	ldr	r1, [pc, #124]	; (800ed74 <xTaskPriorityDisinherit+0x104>)
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	440b      	add	r3, r1
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10a      	bne.n	800ed1e <xTaskPriorityDisinherit+0xae>
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ed12:	43da      	mvns	r2, r3
 800ed14:	4b18      	ldr	r3, [pc, #96]	; (800ed78 <xTaskPriorityDisinherit+0x108>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4013      	ands	r3, r2
 800ed1a:	4a17      	ldr	r2, [pc, #92]	; (800ed78 <xTaskPriorityDisinherit+0x108>)
 800ed1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2a:	f1c3 0207 	rsb	r2, r3, #7
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed36:	2201      	movs	r2, #1
 800ed38:	409a      	lsls	r2, r3
 800ed3a:	4b0f      	ldr	r3, [pc, #60]	; (800ed78 <xTaskPriorityDisinherit+0x108>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	4a0d      	ldr	r2, [pc, #52]	; (800ed78 <xTaskPriorityDisinherit+0x108>)
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed48:	4613      	mov	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4a08      	ldr	r2, [pc, #32]	; (800ed74 <xTaskPriorityDisinherit+0x104>)
 800ed52:	441a      	add	r2, r3
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	3304      	adds	r3, #4
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7fe f891 	bl	800ce82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed60:	2301      	movs	r3, #1
 800ed62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed64:	697b      	ldr	r3, [r7, #20]
	}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3718      	adds	r7, #24
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	2000072c 	.word	0x2000072c
 800ed74:	20000730 	.word	0x20000730
 800ed78:	20000834 	.word	0x20000834

0800ed7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d077      	beq.n	800ee84 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10a      	bne.n	800edb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ed9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda0:	f383 8811 	msr	BASEPRI, r3
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	60fb      	str	r3, [r7, #12]
}
 800edae:	bf00      	nop
 800edb0:	e7fe      	b.n	800edb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d902      	bls.n	800edc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	61fb      	str	r3, [r7, #28]
 800edc0:	e002      	b.n	800edc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edcc:	69fa      	ldr	r2, [r7, #28]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d058      	beq.n	800ee84 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d153      	bne.n	800ee84 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eddc:	4b2b      	ldr	r3, [pc, #172]	; (800ee8c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	69ba      	ldr	r2, [r7, #24]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d10a      	bne.n	800edfc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ede6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	60bb      	str	r3, [r7, #8]
}
 800edf8:	bf00      	nop
 800edfa:	e7fe      	b.n	800edfa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	69fa      	ldr	r2, [r7, #28]
 800ee06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	db04      	blt.n	800ee1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	f1c3 0207 	rsb	r2, r3, #7
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	6959      	ldr	r1, [r3, #20]
 800ee1e:	693a      	ldr	r2, [r7, #16]
 800ee20:	4613      	mov	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4413      	add	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4a19      	ldr	r2, [pc, #100]	; (800ee90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ee2a:	4413      	add	r3, r2
 800ee2c:	4299      	cmp	r1, r3
 800ee2e:	d129      	bne.n	800ee84 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	3304      	adds	r3, #4
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fe f881 	bl	800cf3c <uxListRemove>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10a      	bne.n	800ee56 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee44:	2201      	movs	r2, #1
 800ee46:	fa02 f303 	lsl.w	r3, r2, r3
 800ee4a:	43da      	mvns	r2, r3
 800ee4c:	4b11      	ldr	r3, [pc, #68]	; (800ee94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4013      	ands	r3, r2
 800ee52:	4a10      	ldr	r2, [pc, #64]	; (800ee94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ee54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	409a      	lsls	r2, r3
 800ee5e:	4b0d      	ldr	r3, [pc, #52]	; (800ee94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	4a0b      	ldr	r2, [pc, #44]	; (800ee94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4a06      	ldr	r2, [pc, #24]	; (800ee90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ee76:	441a      	add	r2, r3
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fd ffff 	bl	800ce82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee84:	bf00      	nop
 800ee86:	3720      	adds	r7, #32
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	2000072c 	.word	0x2000072c
 800ee90:	20000730 	.word	0x20000730
 800ee94:	20000834 	.word	0x20000834

0800ee98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ee98:	b480      	push	{r7}
 800ee9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee9c:	4b07      	ldr	r3, [pc, #28]	; (800eebc <pvTaskIncrementMutexHeldCount+0x24>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d004      	beq.n	800eeae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eea4:	4b05      	ldr	r3, [pc, #20]	; (800eebc <pvTaskIncrementMutexHeldCount+0x24>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeaa:	3201      	adds	r2, #1
 800eeac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eeae:	4b03      	ldr	r3, [pc, #12]	; (800eebc <pvTaskIncrementMutexHeldCount+0x24>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
	}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	2000072c 	.word	0x2000072c

0800eec0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eeca:	4b29      	ldr	r3, [pc, #164]	; (800ef70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eed0:	4b28      	ldr	r3, [pc, #160]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	3304      	adds	r3, #4
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fe f830 	bl	800cf3c <uxListRemove>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10b      	bne.n	800eefa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eee2:	4b24      	ldr	r3, [pc, #144]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee8:	2201      	movs	r2, #1
 800eeea:	fa02 f303 	lsl.w	r3, r2, r3
 800eeee:	43da      	mvns	r2, r3
 800eef0:	4b21      	ldr	r3, [pc, #132]	; (800ef78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4013      	ands	r3, r2
 800eef6:	4a20      	ldr	r2, [pc, #128]	; (800ef78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef00:	d10a      	bne.n	800ef18 <prvAddCurrentTaskToDelayedList+0x58>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d007      	beq.n	800ef18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef08:	4b1a      	ldr	r3, [pc, #104]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	4619      	mov	r1, r3
 800ef10:	481a      	ldr	r0, [pc, #104]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef12:	f7fd ffb6 	bl	800ce82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef16:	e026      	b.n	800ef66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef20:	4b14      	ldr	r3, [pc, #80]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68ba      	ldr	r2, [r7, #8]
 800ef26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d209      	bcs.n	800ef44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef30:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	4b0f      	ldr	r3, [pc, #60]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7fd ffc4 	bl	800ceca <vListInsert>
}
 800ef42:	e010      	b.n	800ef66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef44:	4b0f      	ldr	r3, [pc, #60]	; (800ef84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	4b0a      	ldr	r3, [pc, #40]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4610      	mov	r0, r2
 800ef52:	f7fd ffba 	bl	800ceca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef56:	4b0c      	ldr	r3, [pc, #48]	; (800ef88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d202      	bcs.n	800ef66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ef60:	4a09      	ldr	r2, [pc, #36]	; (800ef88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	6013      	str	r3, [r2, #0]
}
 800ef66:	bf00      	nop
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	20000830 	.word	0x20000830
 800ef74:	2000072c 	.word	0x2000072c
 800ef78:	20000834 	.word	0x20000834
 800ef7c:	20000818 	.word	0x20000818
 800ef80:	200007e8 	.word	0x200007e8
 800ef84:	200007e4 	.word	0x200007e4
 800ef88:	2000084c 	.word	0x2000084c

0800ef8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3b04      	subs	r3, #4
 800ef9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3b04      	subs	r3, #4
 800efaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	f023 0201 	bic.w	r2, r3, #1
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3b04      	subs	r3, #4
 800efba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efbc:	4a0c      	ldr	r2, [pc, #48]	; (800eff0 <pxPortInitialiseStack+0x64>)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3b14      	subs	r3, #20
 800efc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3b04      	subs	r3, #4
 800efd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f06f 0202 	mvn.w	r2, #2
 800efda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	3b20      	subs	r3, #32
 800efe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efe2:	68fb      	ldr	r3, [r7, #12]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	0800eff5 	.word	0x0800eff5

0800eff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800effe:	4b12      	ldr	r3, [pc, #72]	; (800f048 <prvTaskExitError+0x54>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f006:	d00a      	beq.n	800f01e <prvTaskExitError+0x2a>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00c:	f383 8811 	msr	BASEPRI, r3
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	f3bf 8f4f 	dsb	sy
 800f018:	60fb      	str	r3, [r7, #12]
}
 800f01a:	bf00      	nop
 800f01c:	e7fe      	b.n	800f01c <prvTaskExitError+0x28>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	60bb      	str	r3, [r7, #8]
}
 800f030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f032:	bf00      	nop
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0fc      	beq.n	800f034 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f03a:	bf00      	nop
 800f03c:	bf00      	nop
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	200002e8 	.word	0x200002e8
 800f04c:	00000000 	.word	0x00000000

0800f050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <pxCurrentTCBConst2>)
 800f052:	6819      	ldr	r1, [r3, #0]
 800f054:	6808      	ldr	r0, [r1, #0]
 800f056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	f380 8809 	msr	PSP, r0
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f04f 0000 	mov.w	r0, #0
 800f066:	f380 8811 	msr	BASEPRI, r0
 800f06a:	4770      	bx	lr
 800f06c:	f3af 8000 	nop.w

0800f070 <pxCurrentTCBConst2>:
 800f070:	2000072c 	.word	0x2000072c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop

0800f078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f078:	4808      	ldr	r0, [pc, #32]	; (800f09c <prvPortStartFirstTask+0x24>)
 800f07a:	6800      	ldr	r0, [r0, #0]
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	f380 8808 	msr	MSP, r0
 800f082:	f04f 0000 	mov.w	r0, #0
 800f086:	f380 8814 	msr	CONTROL, r0
 800f08a:	b662      	cpsie	i
 800f08c:	b661      	cpsie	f
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	df00      	svc	0
 800f098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f09a:	bf00      	nop
 800f09c:	e000ed08 	.word	0xe000ed08

0800f0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b086      	sub	sp, #24
 800f0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0a6:	4b46      	ldr	r3, [pc, #280]	; (800f1c0 <xPortStartScheduler+0x120>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a46      	ldr	r2, [pc, #280]	; (800f1c4 <xPortStartScheduler+0x124>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d10a      	bne.n	800f0c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	613b      	str	r3, [r7, #16]
}
 800f0c2:	bf00      	nop
 800f0c4:	e7fe      	b.n	800f0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0c6:	4b3e      	ldr	r3, [pc, #248]	; (800f1c0 <xPortStartScheduler+0x120>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a3f      	ldr	r2, [pc, #252]	; (800f1c8 <xPortStartScheduler+0x128>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d10a      	bne.n	800f0e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	60fb      	str	r3, [r7, #12]
}
 800f0e2:	bf00      	nop
 800f0e4:	e7fe      	b.n	800f0e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0e6:	4b39      	ldr	r3, [pc, #228]	; (800f1cc <xPortStartScheduler+0x12c>)
 800f0e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	22ff      	movs	r2, #255	; 0xff
 800f0f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f100:	78fb      	ldrb	r3, [r7, #3]
 800f102:	b2db      	uxtb	r3, r3
 800f104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	4b31      	ldr	r3, [pc, #196]	; (800f1d0 <xPortStartScheduler+0x130>)
 800f10c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f10e:	4b31      	ldr	r3, [pc, #196]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f110:	2207      	movs	r2, #7
 800f112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f114:	e009      	b.n	800f12a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f116:	4b2f      	ldr	r3, [pc, #188]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	4a2d      	ldr	r2, [pc, #180]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f11e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	b2db      	uxtb	r3, r3
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	b2db      	uxtb	r3, r3
 800f128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f12a:	78fb      	ldrb	r3, [r7, #3]
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f132:	2b80      	cmp	r3, #128	; 0x80
 800f134:	d0ef      	beq.n	800f116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f136:	4b27      	ldr	r3, [pc, #156]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f1c3 0307 	rsb	r3, r3, #7
 800f13e:	2b04      	cmp	r3, #4
 800f140:	d00a      	beq.n	800f158 <xPortStartScheduler+0xb8>
	__asm volatile
 800f142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	60bb      	str	r3, [r7, #8]
}
 800f154:	bf00      	nop
 800f156:	e7fe      	b.n	800f156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f158:	4b1e      	ldr	r3, [pc, #120]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	4a1d      	ldr	r2, [pc, #116]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f162:	4b1c      	ldr	r3, [pc, #112]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f16a:	4a1a      	ldr	r2, [pc, #104]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f16c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	b2da      	uxtb	r2, r3
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f176:	4b18      	ldr	r3, [pc, #96]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a17      	ldr	r2, [pc, #92]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f17c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f182:	4b15      	ldr	r3, [pc, #84]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a14      	ldr	r2, [pc, #80]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f18c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f18e:	f000 f8dd 	bl	800f34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f192:	4b12      	ldr	r3, [pc, #72]	; (800f1dc <xPortStartScheduler+0x13c>)
 800f194:	2200      	movs	r2, #0
 800f196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f198:	f000 f8fc 	bl	800f394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f19c:	4b10      	ldr	r3, [pc, #64]	; (800f1e0 <xPortStartScheduler+0x140>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a0f      	ldr	r2, [pc, #60]	; (800f1e0 <xPortStartScheduler+0x140>)
 800f1a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1a8:	f7ff ff66 	bl	800f078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1ac:	f7ff fa86 	bl	800e6bc <vTaskSwitchContext>
	prvTaskExitError();
 800f1b0:	f7ff ff20 	bl	800eff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	e000ed00 	.word	0xe000ed00
 800f1c4:	410fc271 	.word	0x410fc271
 800f1c8:	410fc270 	.word	0x410fc270
 800f1cc:	e000e400 	.word	0xe000e400
 800f1d0:	20000858 	.word	0x20000858
 800f1d4:	2000085c 	.word	0x2000085c
 800f1d8:	e000ed20 	.word	0xe000ed20
 800f1dc:	200002e8 	.word	0x200002e8
 800f1e0:	e000ef34 	.word	0xe000ef34

0800f1e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ee:	f383 8811 	msr	BASEPRI, r3
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	f3bf 8f4f 	dsb	sy
 800f1fa:	607b      	str	r3, [r7, #4]
}
 800f1fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1fe:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <vPortEnterCritical+0x58>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3301      	adds	r3, #1
 800f204:	4a0d      	ldr	r2, [pc, #52]	; (800f23c <vPortEnterCritical+0x58>)
 800f206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f208:	4b0c      	ldr	r3, [pc, #48]	; (800f23c <vPortEnterCritical+0x58>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d10f      	bne.n	800f230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <vPortEnterCritical+0x5c>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00a      	beq.n	800f230 <vPortEnterCritical+0x4c>
	__asm volatile
 800f21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21e:	f383 8811 	msr	BASEPRI, r3
 800f222:	f3bf 8f6f 	isb	sy
 800f226:	f3bf 8f4f 	dsb	sy
 800f22a:	603b      	str	r3, [r7, #0]
}
 800f22c:	bf00      	nop
 800f22e:	e7fe      	b.n	800f22e <vPortEnterCritical+0x4a>
	}
}
 800f230:	bf00      	nop
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr
 800f23c:	200002e8 	.word	0x200002e8
 800f240:	e000ed04 	.word	0xe000ed04

0800f244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f24a:	4b12      	ldr	r3, [pc, #72]	; (800f294 <vPortExitCritical+0x50>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10a      	bne.n	800f268 <vPortExitCritical+0x24>
	__asm volatile
 800f252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f256:	f383 8811 	msr	BASEPRI, r3
 800f25a:	f3bf 8f6f 	isb	sy
 800f25e:	f3bf 8f4f 	dsb	sy
 800f262:	607b      	str	r3, [r7, #4]
}
 800f264:	bf00      	nop
 800f266:	e7fe      	b.n	800f266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f268:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <vPortExitCritical+0x50>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	4a09      	ldr	r2, [pc, #36]	; (800f294 <vPortExitCritical+0x50>)
 800f270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f272:	4b08      	ldr	r3, [pc, #32]	; (800f294 <vPortExitCritical+0x50>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d105      	bne.n	800f286 <vPortExitCritical+0x42>
 800f27a:	2300      	movs	r3, #0
 800f27c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	f383 8811 	msr	BASEPRI, r3
}
 800f284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f286:	bf00      	nop
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	200002e8 	.word	0x200002e8
	...

0800f2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2a0:	f3ef 8009 	mrs	r0, PSP
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	4b15      	ldr	r3, [pc, #84]	; (800f300 <pxCurrentTCBConst>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	f01e 0f10 	tst.w	lr, #16
 800f2b0:	bf08      	it	eq
 800f2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ba:	6010      	str	r0, [r2, #0]
 800f2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2c4:	f380 8811 	msr	BASEPRI, r0
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f7ff f9f4 	bl	800e6bc <vTaskSwitchContext>
 800f2d4:	f04f 0000 	mov.w	r0, #0
 800f2d8:	f380 8811 	msr	BASEPRI, r0
 800f2dc:	bc09      	pop	{r0, r3}
 800f2de:	6819      	ldr	r1, [r3, #0]
 800f2e0:	6808      	ldr	r0, [r1, #0]
 800f2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e6:	f01e 0f10 	tst.w	lr, #16
 800f2ea:	bf08      	it	eq
 800f2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2f0:	f380 8809 	msr	PSP, r0
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	f3af 8000 	nop.w

0800f300 <pxCurrentTCBConst>:
 800f300:	2000072c 	.word	0x2000072c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop

0800f308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	607b      	str	r3, [r7, #4]
}
 800f320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f322:	f7ff f913 	bl	800e54c <xTaskIncrementTick>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f32c:	4b06      	ldr	r3, [pc, #24]	; (800f348 <SysTick_Handler+0x40>)
 800f32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	2300      	movs	r3, #0
 800f336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	f383 8811 	msr	BASEPRI, r3
}
 800f33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f350:	4b0b      	ldr	r3, [pc, #44]	; (800f380 <vPortSetupTimerInterrupt+0x34>)
 800f352:	2200      	movs	r2, #0
 800f354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f356:	4b0b      	ldr	r3, [pc, #44]	; (800f384 <vPortSetupTimerInterrupt+0x38>)
 800f358:	2200      	movs	r2, #0
 800f35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f35c:	4b0a      	ldr	r3, [pc, #40]	; (800f388 <vPortSetupTimerInterrupt+0x3c>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a0a      	ldr	r2, [pc, #40]	; (800f38c <vPortSetupTimerInterrupt+0x40>)
 800f362:	fba2 2303 	umull	r2, r3, r2, r3
 800f366:	099b      	lsrs	r3, r3, #6
 800f368:	4a09      	ldr	r2, [pc, #36]	; (800f390 <vPortSetupTimerInterrupt+0x44>)
 800f36a:	3b01      	subs	r3, #1
 800f36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f36e:	4b04      	ldr	r3, [pc, #16]	; (800f380 <vPortSetupTimerInterrupt+0x34>)
 800f370:	2207      	movs	r2, #7
 800f372:	601a      	str	r2, [r3, #0]
}
 800f374:	bf00      	nop
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	e000e010 	.word	0xe000e010
 800f384:	e000e018 	.word	0xe000e018
 800f388:	200002dc 	.word	0x200002dc
 800f38c:	10624dd3 	.word	0x10624dd3
 800f390:	e000e014 	.word	0xe000e014

0800f394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3a4 <vPortEnableVFP+0x10>
 800f398:	6801      	ldr	r1, [r0, #0]
 800f39a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f39e:	6001      	str	r1, [r0, #0]
 800f3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3a2:	bf00      	nop
 800f3a4:	e000ed88 	.word	0xe000ed88

0800f3a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3ae:	f3ef 8305 	mrs	r3, IPSR
 800f3b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b0f      	cmp	r3, #15
 800f3b8:	d914      	bls.n	800f3e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3ba:	4a17      	ldr	r2, [pc, #92]	; (800f418 <vPortValidateInterruptPriority+0x70>)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3c4:	4b15      	ldr	r3, [pc, #84]	; (800f41c <vPortValidateInterruptPriority+0x74>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	7afa      	ldrb	r2, [r7, #11]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d20a      	bcs.n	800f3e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	607b      	str	r3, [r7, #4]
}
 800f3e0:	bf00      	nop
 800f3e2:	e7fe      	b.n	800f3e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3e4:	4b0e      	ldr	r3, [pc, #56]	; (800f420 <vPortValidateInterruptPriority+0x78>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3ec:	4b0d      	ldr	r3, [pc, #52]	; (800f424 <vPortValidateInterruptPriority+0x7c>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d90a      	bls.n	800f40a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	603b      	str	r3, [r7, #0]
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <vPortValidateInterruptPriority+0x60>
	}
 800f40a:	bf00      	nop
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	e000e3f0 	.word	0xe000e3f0
 800f41c:	20000858 	.word	0x20000858
 800f420:	e000ed0c 	.word	0xe000ed0c
 800f424:	2000085c 	.word	0x2000085c

0800f428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	; 0x28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f434:	f7fe ffbe 	bl	800e3b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f438:	4b5b      	ldr	r3, [pc, #364]	; (800f5a8 <pvPortMalloc+0x180>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f440:	f000 f92c 	bl	800f69c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f444:	4b59      	ldr	r3, [pc, #356]	; (800f5ac <pvPortMalloc+0x184>)
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4013      	ands	r3, r2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f040 8093 	bne.w	800f578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01d      	beq.n	800f494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f458:	2208      	movs	r2, #8
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4413      	add	r3, r2
 800f45e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f003 0307 	and.w	r3, r3, #7
 800f466:	2b00      	cmp	r3, #0
 800f468:	d014      	beq.n	800f494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f023 0307 	bic.w	r3, r3, #7
 800f470:	3308      	adds	r3, #8
 800f472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f003 0307 	and.w	r3, r3, #7
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00a      	beq.n	800f494 <pvPortMalloc+0x6c>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	617b      	str	r3, [r7, #20]
}
 800f490:	bf00      	nop
 800f492:	e7fe      	b.n	800f492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d06e      	beq.n	800f578 <pvPortMalloc+0x150>
 800f49a:	4b45      	ldr	r3, [pc, #276]	; (800f5b0 <pvPortMalloc+0x188>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d869      	bhi.n	800f578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4a4:	4b43      	ldr	r3, [pc, #268]	; (800f5b4 <pvPortMalloc+0x18c>)
 800f4a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4a8:	4b42      	ldr	r3, [pc, #264]	; (800f5b4 <pvPortMalloc+0x18c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ae:	e004      	b.n	800f4ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d903      	bls.n	800f4cc <pvPortMalloc+0xa4>
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1f1      	bne.n	800f4b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4cc:	4b36      	ldr	r3, [pc, #216]	; (800f5a8 <pvPortMalloc+0x180>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d050      	beq.n	800f578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2208      	movs	r2, #8
 800f4dc:	4413      	add	r3, r2
 800f4de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	6a3b      	ldr	r3, [r7, #32]
 800f4e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	1ad2      	subs	r2, r2, r3
 800f4f0:	2308      	movs	r3, #8
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d91f      	bls.n	800f538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	f003 0307 	and.w	r3, r3, #7
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00a      	beq.n	800f520 <pvPortMalloc+0xf8>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	f383 8811 	msr	BASEPRI, r3
 800f512:	f3bf 8f6f 	isb	sy
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	613b      	str	r3, [r7, #16]
}
 800f51c:	bf00      	nop
 800f51e:	e7fe      	b.n	800f51e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	685a      	ldr	r2, [r3, #4]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	1ad2      	subs	r2, r2, r3
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f532:	69b8      	ldr	r0, [r7, #24]
 800f534:	f000 f914 	bl	800f760 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f538:	4b1d      	ldr	r3, [pc, #116]	; (800f5b0 <pvPortMalloc+0x188>)
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	4a1b      	ldr	r2, [pc, #108]	; (800f5b0 <pvPortMalloc+0x188>)
 800f544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f546:	4b1a      	ldr	r3, [pc, #104]	; (800f5b0 <pvPortMalloc+0x188>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	4b1b      	ldr	r3, [pc, #108]	; (800f5b8 <pvPortMalloc+0x190>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d203      	bcs.n	800f55a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f552:	4b17      	ldr	r3, [pc, #92]	; (800f5b0 <pvPortMalloc+0x188>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a18      	ldr	r2, [pc, #96]	; (800f5b8 <pvPortMalloc+0x190>)
 800f558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <pvPortMalloc+0x184>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	431a      	orrs	r2, r3
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	2200      	movs	r2, #0
 800f56c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f56e:	4b13      	ldr	r3, [pc, #76]	; (800f5bc <pvPortMalloc+0x194>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3301      	adds	r3, #1
 800f574:	4a11      	ldr	r2, [pc, #68]	; (800f5bc <pvPortMalloc+0x194>)
 800f576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f578:	f7fe ff2a 	bl	800e3d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	f003 0307 	and.w	r3, r3, #7
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <pvPortMalloc+0x174>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	60fb      	str	r3, [r7, #12]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <pvPortMalloc+0x172>
	return pvReturn;
 800f59c:	69fb      	ldr	r3, [r7, #28]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3728      	adds	r7, #40	; 0x28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20006b78 	.word	0x20006b78
 800f5ac:	20006b8c 	.word	0x20006b8c
 800f5b0:	20006b7c 	.word	0x20006b7c
 800f5b4:	20006b70 	.word	0x20006b70
 800f5b8:	20006b80 	.word	0x20006b80
 800f5bc:	20006b84 	.word	0x20006b84

0800f5c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d04d      	beq.n	800f66e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5d2:	2308      	movs	r3, #8
 800f5d4:	425b      	negs	r3, r3
 800f5d6:	697a      	ldr	r2, [r7, #20]
 800f5d8:	4413      	add	r3, r2
 800f5da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	4b24      	ldr	r3, [pc, #144]	; (800f678 <vPortFree+0xb8>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d10a      	bne.n	800f604 <vPortFree+0x44>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	60fb      	str	r3, [r7, #12]
}
 800f600:	bf00      	nop
 800f602:	e7fe      	b.n	800f602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00a      	beq.n	800f622 <vPortFree+0x62>
	__asm volatile
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	60bb      	str	r3, [r7, #8]
}
 800f61e:	bf00      	nop
 800f620:	e7fe      	b.n	800f620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	685a      	ldr	r2, [r3, #4]
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <vPortFree+0xb8>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4013      	ands	r3, r2
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01e      	beq.n	800f66e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d11a      	bne.n	800f66e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	4b0e      	ldr	r3, [pc, #56]	; (800f678 <vPortFree+0xb8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	43db      	mvns	r3, r3
 800f642:	401a      	ands	r2, r3
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f648:	f7fe feb4 	bl	800e3b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	685a      	ldr	r2, [r3, #4]
 800f650:	4b0a      	ldr	r3, [pc, #40]	; (800f67c <vPortFree+0xbc>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4413      	add	r3, r2
 800f656:	4a09      	ldr	r2, [pc, #36]	; (800f67c <vPortFree+0xbc>)
 800f658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f65a:	6938      	ldr	r0, [r7, #16]
 800f65c:	f000 f880 	bl	800f760 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f660:	4b07      	ldr	r3, [pc, #28]	; (800f680 <vPortFree+0xc0>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	3301      	adds	r3, #1
 800f666:	4a06      	ldr	r2, [pc, #24]	; (800f680 <vPortFree+0xc0>)
 800f668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f66a:	f7fe feb1 	bl	800e3d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f66e:	bf00      	nop
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	20006b8c 	.word	0x20006b8c
 800f67c:	20006b7c 	.word	0x20006b7c
 800f680:	20006b88 	.word	0x20006b88

0800f684 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800f688:	4b03      	ldr	r3, [pc, #12]	; (800f698 <xPortGetFreeHeapSize+0x14>)
 800f68a:	681b      	ldr	r3, [r3, #0]
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	20006b7c 	.word	0x20006b7c

0800f69c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6a2:	f246 3310 	movw	r3, #25360	; 0x6310
 800f6a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6a8:	4b27      	ldr	r3, [pc, #156]	; (800f748 <prvHeapInit+0xac>)
 800f6aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f003 0307 	and.w	r3, r3, #7
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d00c      	beq.n	800f6d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3307      	adds	r3, #7
 800f6ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f023 0307 	bic.w	r3, r3, #7
 800f6c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	4a1f      	ldr	r2, [pc, #124]	; (800f748 <prvHeapInit+0xac>)
 800f6cc:	4413      	add	r3, r2
 800f6ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6d4:	4a1d      	ldr	r2, [pc, #116]	; (800f74c <prvHeapInit+0xb0>)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6da:	4b1c      	ldr	r3, [pc, #112]	; (800f74c <prvHeapInit+0xb0>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6e8:	2208      	movs	r2, #8
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	1a9b      	subs	r3, r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f023 0307 	bic.w	r3, r3, #7
 800f6f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	4a15      	ldr	r2, [pc, #84]	; (800f750 <prvHeapInit+0xb4>)
 800f6fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6fe:	4b14      	ldr	r3, [pc, #80]	; (800f750 <prvHeapInit+0xb4>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2200      	movs	r2, #0
 800f704:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f706:	4b12      	ldr	r3, [pc, #72]	; (800f750 <prvHeapInit+0xb4>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2200      	movs	r2, #0
 800f70c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	1ad2      	subs	r2, r2, r3
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f71c:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <prvHeapInit+0xb4>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	4a0a      	ldr	r2, [pc, #40]	; (800f754 <prvHeapInit+0xb8>)
 800f72a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	4a09      	ldr	r2, [pc, #36]	; (800f758 <prvHeapInit+0xbc>)
 800f732:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f734:	4b09      	ldr	r3, [pc, #36]	; (800f75c <prvHeapInit+0xc0>)
 800f736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f73a:	601a      	str	r2, [r3, #0]
}
 800f73c:	bf00      	nop
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	20000860 	.word	0x20000860
 800f74c:	20006b70 	.word	0x20006b70
 800f750:	20006b78 	.word	0x20006b78
 800f754:	20006b80 	.word	0x20006b80
 800f758:	20006b7c 	.word	0x20006b7c
 800f75c:	20006b8c 	.word	0x20006b8c

0800f760 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f768:	4b28      	ldr	r3, [pc, #160]	; (800f80c <prvInsertBlockIntoFreeList+0xac>)
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	e002      	b.n	800f774 <prvInsertBlockIntoFreeList+0x14>
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	60fb      	str	r3, [r7, #12]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d8f7      	bhi.n	800f76e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	4413      	add	r3, r2
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d108      	bne.n	800f7a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	685a      	ldr	r2, [r3, #4]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	441a      	add	r2, r3
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	441a      	add	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d118      	bne.n	800f7e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	4b15      	ldr	r3, [pc, #84]	; (800f810 <prvInsertBlockIntoFreeList+0xb0>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d00d      	beq.n	800f7de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	441a      	add	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	601a      	str	r2, [r3, #0]
 800f7dc:	e008      	b.n	800f7f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7de:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <prvInsertBlockIntoFreeList+0xb0>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	601a      	str	r2, [r3, #0]
 800f7e6:	e003      	b.n	800f7f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d002      	beq.n	800f7fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7fe:	bf00      	nop
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	20006b70 	.word	0x20006b70
 800f810:	20006b78 	.word	0x20006b78

0800f814 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	330c      	adds	r3, #12
 800f824:	461a      	mov	r2, r3
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f001 fff3 	bl	8011814 <tcpip_send_msg_wait_sem>
 800f82e:	4603      	mov	r3, r0
 800f830:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d103      	bne.n	800f842 <netconn_apimsg+0x2e>
    return apimsg->err;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f840:	e001      	b.n	800f846 <netconn_apimsg+0x32>
  }
  return err;
 800f842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
	...

0800f850 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08c      	sub	sp, #48	; 0x30
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	603a      	str	r2, [r7, #0]
 800f85a:	71fb      	strb	r3, [r7, #7]
 800f85c:	460b      	mov	r3, r1
 800f85e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f860:	79fb      	ldrb	r3, [r7, #7]
 800f862:	6839      	ldr	r1, [r7, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	f000 ff21 	bl	80106ac <netconn_alloc>
 800f86a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d054      	beq.n	800f91c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f872:	79bb      	ldrb	r3, [r7, #6]
 800f874:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f878:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f87a:	f107 0308 	add.w	r3, r7, #8
 800f87e:	4619      	mov	r1, r3
 800f880:	4829      	ldr	r0, [pc, #164]	; (800f928 <netconn_new_with_proto_and_callback+0xd8>)
 800f882:	f7ff ffc7 	bl	800f814 <netconn_apimsg>
 800f886:	4603      	mov	r3, r0
 800f888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f88c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f890:	2b00      	cmp	r3, #0
 800f892:	d043      	beq.n	800f91c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d005      	beq.n	800f8a8 <netconn_new_with_proto_and_callback+0x58>
 800f89c:	4b23      	ldr	r3, [pc, #140]	; (800f92c <netconn_new_with_proto_and_callback+0xdc>)
 800f89e:	22a3      	movs	r2, #163	; 0xa3
 800f8a0:	4923      	ldr	r1, [pc, #140]	; (800f930 <netconn_new_with_proto_and_callback+0xe0>)
 800f8a2:	4824      	ldr	r0, [pc, #144]	; (800f934 <netconn_new_with_proto_and_callback+0xe4>)
 800f8a4:	f00d fad0 	bl	801ce48 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	3310      	adds	r3, #16
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f00c ff88 	bl	801c7c2 <sys_mbox_valid>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d105      	bne.n	800f8c4 <netconn_new_with_proto_and_callback+0x74>
 800f8b8:	4b1c      	ldr	r3, [pc, #112]	; (800f92c <netconn_new_with_proto_and_callback+0xdc>)
 800f8ba:	22a4      	movs	r2, #164	; 0xa4
 800f8bc:	491e      	ldr	r1, [pc, #120]	; (800f938 <netconn_new_with_proto_and_callback+0xe8>)
 800f8be:	481d      	ldr	r0, [pc, #116]	; (800f934 <netconn_new_with_proto_and_callback+0xe4>)
 800f8c0:	f00d fac2 	bl	801ce48 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	3314      	adds	r3, #20
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f00c ff7a 	bl	801c7c2 <sys_mbox_valid>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d005      	beq.n	800f8e0 <netconn_new_with_proto_and_callback+0x90>
 800f8d4:	4b15      	ldr	r3, [pc, #84]	; (800f92c <netconn_new_with_proto_and_callback+0xdc>)
 800f8d6:	22a6      	movs	r2, #166	; 0xa6
 800f8d8:	4918      	ldr	r1, [pc, #96]	; (800f93c <netconn_new_with_proto_and_callback+0xec>)
 800f8da:	4816      	ldr	r0, [pc, #88]	; (800f934 <netconn_new_with_proto_and_callback+0xe4>)
 800f8dc:	f00d fab4 	bl	801ce48 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	330c      	adds	r3, #12
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f00c fffd 	bl	801c8e4 <sys_sem_valid>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d105      	bne.n	800f8fc <netconn_new_with_proto_and_callback+0xac>
 800f8f0:	4b0e      	ldr	r3, [pc, #56]	; (800f92c <netconn_new_with_proto_and_callback+0xdc>)
 800f8f2:	22a9      	movs	r2, #169	; 0xa9
 800f8f4:	4912      	ldr	r1, [pc, #72]	; (800f940 <netconn_new_with_proto_and_callback+0xf0>)
 800f8f6:	480f      	ldr	r0, [pc, #60]	; (800f934 <netconn_new_with_proto_and_callback+0xe4>)
 800f8f8:	f00d faa6 	bl	801ce48 <iprintf>
      sys_sem_free(&conn->op_completed);
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	330c      	adds	r3, #12
 800f900:	4618      	mov	r0, r3
 800f902:	f00c ffe2 	bl	801c8ca <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	3310      	adds	r3, #16
 800f90a:	4618      	mov	r0, r3
 800f90c:	f00c fed2 	bl	801c6b4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f912:	2007      	movs	r0, #7
 800f914:	f002 fce6 	bl	80122e4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	e000      	b.n	800f91e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3730      	adds	r7, #48	; 0x30
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	08010681 	.word	0x08010681
 800f92c:	0801e478 	.word	0x0801e478
 800f930:	0801e4ac 	.word	0x0801e4ac
 800f934:	0801e4d0 	.word	0x0801e4d0
 800f938:	0801e4f8 	.word	0x0801e4f8
 800f93c:	0801e510 	.word	0x0801e510
 800f940:	0801e534 	.word	0x0801e534

0800f944 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b08c      	sub	sp, #48	; 0x30
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f952:	2300      	movs	r3, #0
 800f954:	e014      	b.n	800f980 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f95a:	2329      	movs	r3, #41	; 0x29
 800f95c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f95e:	f107 030c 	add.w	r3, r7, #12
 800f962:	4619      	mov	r1, r3
 800f964:	4808      	ldr	r0, [pc, #32]	; (800f988 <netconn_prepare_delete+0x44>)
 800f966:	f7ff ff55 	bl	800f814 <netconn_apimsg>
 800f96a:	4603      	mov	r3, r0
 800f96c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f970:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <netconn_prepare_delete+0x3a>
    return err;
 800f978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f97c:	e000      	b.n	800f980 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f97e:	2300      	movs	r3, #0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3730      	adds	r7, #48	; 0x30
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	08010be5 	.word	0x08010be5

0800f98c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d101      	bne.n	800f99e <netconn_delete+0x12>
    return ERR_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	e00d      	b.n	800f9ba <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7ff ffd0 	bl	800f944 <netconn_prepare_delete>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d102      	bne.n	800f9b6 <netconn_delete+0x2a>
    netconn_free(conn);
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fee9 	bl	8010788 <netconn_free>
  }
  return err;
 800f9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
	...

0800f9c4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b08e      	sub	sp, #56	; 0x38
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d109      	bne.n	800f9ec <netconn_bind+0x28>
 800f9d8:	4b11      	ldr	r3, [pc, #68]	; (800fa20 <netconn_bind+0x5c>)
 800f9da:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f9de:	4911      	ldr	r1, [pc, #68]	; (800fa24 <netconn_bind+0x60>)
 800f9e0:	4811      	ldr	r0, [pc, #68]	; (800fa28 <netconn_bind+0x64>)
 800f9e2:	f00d fa31 	bl	801ce48 <iprintf>
 800f9e6:	f06f 030f 	mvn.w	r3, #15
 800f9ea:	e015      	b.n	800fa18 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d101      	bne.n	800f9f6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800f9f2:	4b0e      	ldr	r3, [pc, #56]	; (800fa2c <netconn_bind+0x68>)
 800f9f4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f9fe:	88fb      	ldrh	r3, [r7, #6]
 800fa00:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800fa02:	f107 0314 	add.w	r3, r7, #20
 800fa06:	4619      	mov	r1, r3
 800fa08:	4809      	ldr	r0, [pc, #36]	; (800fa30 <netconn_bind+0x6c>)
 800fa0a:	f7ff ff03 	bl	800f814 <netconn_apimsg>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800fa14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3738      	adds	r7, #56	; 0x38
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	0801e478 	.word	0x0801e478
 800fa24:	0801e5b0 	.word	0x0801e5b0
 800fa28:	0801e4d0 	.word	0x0801e4d0
 800fa2c:	08021a7c 	.word	0x08021a7c
 800fa30:	08010dad 	.word	0x08010dad

0800fa34 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800fa42:	2300      	movs	r3, #0
 800fa44:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d109      	bne.n	800fa60 <netconn_recv_data+0x2c>
 800fa4c:	4b58      	ldr	r3, [pc, #352]	; (800fbb0 <netconn_recv_data+0x17c>)
 800fa4e:	f44f 7212 	mov.w	r2, #584	; 0x248
 800fa52:	4958      	ldr	r1, [pc, #352]	; (800fbb4 <netconn_recv_data+0x180>)
 800fa54:	4858      	ldr	r0, [pc, #352]	; (800fbb8 <netconn_recv_data+0x184>)
 800fa56:	f00d f9f7 	bl	801ce48 <iprintf>
 800fa5a:	f06f 030f 	mvn.w	r3, #15
 800fa5e:	e0a2      	b.n	800fba6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d109      	bne.n	800fa80 <netconn_recv_data+0x4c>
 800fa6c:	4b50      	ldr	r3, [pc, #320]	; (800fbb0 <netconn_recv_data+0x17c>)
 800fa6e:	f240 224a 	movw	r2, #586	; 0x24a
 800fa72:	4952      	ldr	r1, [pc, #328]	; (800fbbc <netconn_recv_data+0x188>)
 800fa74:	4850      	ldr	r0, [pc, #320]	; (800fbb8 <netconn_recv_data+0x184>)
 800fa76:	f00d f9e7 	bl	801ce48 <iprintf>
 800fa7a:	f06f 030f 	mvn.w	r3, #15
 800fa7e:	e092      	b.n	800fba6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3310      	adds	r3, #16
 800fa84:	4618      	mov	r0, r3
 800fa86:	f00c fe9c 	bl	801c7c2 <sys_mbox_valid>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10e      	bne.n	800faae <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f000 fa45 	bl	800ff20 <netconn_err>
 800fa96:	4603      	mov	r3, r0
 800fa98:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800fa9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d002      	beq.n	800faa8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800faa2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800faa6:	e07e      	b.n	800fba6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800faa8:	f06f 030a 	mvn.w	r3, #10
 800faac:	e07b      	b.n	800fba6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	7f1b      	ldrb	r3, [r3, #28]
 800fab2:	f003 0302 	and.w	r3, r3, #2
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10f      	bne.n	800fada <netconn_recv_data+0xa6>
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	f003 0304 	and.w	r3, r3, #4
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d10a      	bne.n	800fada <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	7f1b      	ldrb	r3, [r3, #28]
 800fac8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800facc:	2b00      	cmp	r3, #0
 800face:	d104      	bne.n	800fada <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d023      	beq.n	800fb22 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	3310      	adds	r3, #16
 800fade:	f107 0218 	add.w	r2, r7, #24
 800fae2:	4611      	mov	r1, r2
 800fae4:	4618      	mov	r0, r3
 800fae6:	f00c fe50 	bl	801c78a <sys_arch_mbox_tryfetch>
 800faea:	4603      	mov	r3, r0
 800faec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf0:	d11f      	bne.n	800fb32 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f000 fa14 	bl	800ff20 <netconn_err>
 800faf8:	4603      	mov	r3, r0
 800fafa:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800fafc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d002      	beq.n	800fb0a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800fb04:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fb08:	e04d      	b.n	800fba6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	7f1b      	ldrb	r3, [r3, #28]
 800fb0e:	f003 0301 	and.w	r3, r3, #1
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800fb16:	f06f 030a 	mvn.w	r3, #10
 800fb1a:	e044      	b.n	800fba6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800fb1c:	f06f 0306 	mvn.w	r3, #6
 800fb20:	e041      	b.n	800fba6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	3310      	adds	r3, #16
 800fb26:	f107 0118 	add.w	r1, r7, #24
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f00c fded 	bl	801c70c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb3a:	2b10      	cmp	r3, #16
 800fb3c:	d117      	bne.n	800fb6e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	f107 0217 	add.w	r2, r7, #23
 800fb44:	4611      	mov	r1, r2
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 fa3c 	bl	800ffc4 <lwip_netconn_is_err_msg>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d009      	beq.n	800fb66 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800fb52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb56:	f113 0f0f 	cmn.w	r3, #15
 800fb5a:	d101      	bne.n	800fb60 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	e022      	b.n	800fba6 <netconn_recv_data+0x172>
      }
      return err;
 800fb60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb64:	e01f      	b.n	800fba6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	891b      	ldrh	r3, [r3, #8]
 800fb6a:	83fb      	strh	r3, [r7, #30]
 800fb6c:	e00d      	b.n	800fb8a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d106      	bne.n	800fb82 <netconn_recv_data+0x14e>
 800fb74:	4b0e      	ldr	r3, [pc, #56]	; (800fbb0 <netconn_recv_data+0x17c>)
 800fb76:	f240 2291 	movw	r2, #657	; 0x291
 800fb7a:	4911      	ldr	r1, [pc, #68]	; (800fbc0 <netconn_recv_data+0x18c>)
 800fb7c:	480e      	ldr	r0, [pc, #56]	; (800fbb8 <netconn_recv_data+0x184>)
 800fb7e:	f00d f963 	bl	801ce48 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	891b      	ldrh	r3, [r3, #8]
 800fb88:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d005      	beq.n	800fb9e <netconn_recv_data+0x16a>
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb96:	8bfa      	ldrh	r2, [r7, #30]
 800fb98:	2101      	movs	r1, #1
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800fb9e:	69ba      	ldr	r2, [r7, #24]
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3720      	adds	r7, #32
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	0801e478 	.word	0x0801e478
 800fbb4:	0801e690 	.word	0x0801e690
 800fbb8:	0801e4d0 	.word	0x0801e4d0
 800fbbc:	0801e6b0 	.word	0x0801e6b0
 800fbc0:	0801e6cc 	.word	0x0801e6cc

0800fbc4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d005      	beq.n	800fbe2 <netconn_tcp_recvd_msg+0x1e>
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbde:	2b10      	cmp	r3, #16
 800fbe0:	d009      	beq.n	800fbf6 <netconn_tcp_recvd_msg+0x32>
 800fbe2:	4b0c      	ldr	r3, [pc, #48]	; (800fc14 <netconn_tcp_recvd_msg+0x50>)
 800fbe4:	f240 22a7 	movw	r2, #679	; 0x2a7
 800fbe8:	490b      	ldr	r1, [pc, #44]	; (800fc18 <netconn_tcp_recvd_msg+0x54>)
 800fbea:	480c      	ldr	r0, [pc, #48]	; (800fc1c <netconn_tcp_recvd_msg+0x58>)
 800fbec:	f00d f92c 	bl	801ce48 <iprintf>
 800fbf0:	f06f 030f 	mvn.w	r3, #15
 800fbf4:	e00a      	b.n	800fc0c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800fc02:	6879      	ldr	r1, [r7, #4]
 800fc04:	4806      	ldr	r0, [pc, #24]	; (800fc20 <netconn_tcp_recvd_msg+0x5c>)
 800fc06:	f7ff fe05 	bl	800f814 <netconn_apimsg>
 800fc0a:	4603      	mov	r3, r0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	0801e478 	.word	0x0801e478
 800fc18:	0801e6d8 	.word	0x0801e6d8
 800fc1c:	0801e4d0 	.word	0x0801e4d0
 800fc20:	08010ebb 	.word	0x08010ebb

0800fc24 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b090      	sub	sp, #64	; 0x40
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	3310      	adds	r3, #16
 800fc36:	4618      	mov	r0, r3
 800fc38:	f00c fdc3 	bl	801c7c2 <sys_mbox_valid>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d102      	bne.n	800fc48 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800fc42:	f06f 030a 	mvn.w	r3, #10
 800fc46:	e06d      	b.n	800fd24 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	7f1b      	ldrb	r3, [r3, #28]
 800fc4c:	b25b      	sxtb	r3, r3
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	da07      	bge.n	800fc62 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	7f1b      	ldrb	r3, [r3, #28]
 800fc56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800fc60:	e039      	b.n	800fcd6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	461a      	mov	r2, r3
 800fc66:	68b9      	ldr	r1, [r7, #8]
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f7ff fee3 	bl	800fa34 <netconn_recv_data>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800fc74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d002      	beq.n	800fc82 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800fc7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc80:	e050      	b.n	800fd24 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800fc88:	79fb      	ldrb	r3, [r7, #7]
 800fc8a:	f003 0308 	and.w	r3, r3, #8
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10e      	bne.n	800fcb0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800fc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <netconn_recv_data_tcp+0x7a>
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	891b      	ldrh	r3, [r3, #8]
 800fc9c:	e000      	b.n	800fca0 <netconn_recv_data_tcp+0x7c>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800fca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fca4:	f107 0214 	add.w	r2, r7, #20
 800fca8:	4619      	mov	r1, r3
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f7ff ff8a 	bl	800fbc4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d134      	bne.n	800fd20 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800fcb6:	79fb      	ldrb	r3, [r7, #7]
 800fcb8:	f003 0310 	and.w	r3, r3, #16
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d009      	beq.n	800fcd4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	7f1b      	ldrb	r3, [r3, #28]
 800fcc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800fcce:	f06f 0306 	mvn.w	r3, #6
 800fcd2:	e027      	b.n	800fd24 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800fcd4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d005      	beq.n	800fcea <netconn_recv_data_tcp+0xc6>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	2200      	movs	r2, #0
 800fce4:	2101      	movs	r1, #1
 800fce6:	68f8      	ldr	r0, [r7, #12]
 800fce8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10f      	bne.n	800fd12 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800fcf2:	68f8      	ldr	r0, [r7, #12]
 800fcf4:	f000 f914 	bl	800ff20 <netconn_err>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800fcfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d002      	beq.n	800fd0c <netconn_recv_data_tcp+0xe8>
          return err;
 800fd06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd0a:	e00b      	b.n	800fd24 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800fd0c:	f06f 030d 	mvn.w	r3, #13
 800fd10:	e008      	b.n	800fd24 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800fd12:	2101      	movs	r1, #1
 800fd14:	68f8      	ldr	r0, [r7, #12]
 800fd16:	f000 f8d3 	bl	800fec0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800fd1a:	f06f 030e 	mvn.w	r3, #14
 800fd1e:	e001      	b.n	800fd24 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800fd20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3740      	adds	r7, #64	; 0x40
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800fd36:	2300      	movs	r3, #0
 800fd38:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d109      	bne.n	800fd54 <netconn_recv+0x28>
 800fd40:	4b32      	ldr	r3, [pc, #200]	; (800fe0c <netconn_recv+0xe0>)
 800fd42:	f240 3263 	movw	r2, #867	; 0x363
 800fd46:	4932      	ldr	r1, [pc, #200]	; (800fe10 <netconn_recv+0xe4>)
 800fd48:	4832      	ldr	r0, [pc, #200]	; (800fe14 <netconn_recv+0xe8>)
 800fd4a:	f00d f87d 	bl	801ce48 <iprintf>
 800fd4e:	f06f 030f 	mvn.w	r3, #15
 800fd52:	e056      	b.n	800fe02 <netconn_recv+0xd6>
  *new_buf = NULL;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2200      	movs	r2, #0
 800fd58:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d109      	bne.n	800fd74 <netconn_recv+0x48>
 800fd60:	4b2a      	ldr	r3, [pc, #168]	; (800fe0c <netconn_recv+0xe0>)
 800fd62:	f240 3265 	movw	r2, #869	; 0x365
 800fd66:	492c      	ldr	r1, [pc, #176]	; (800fe18 <netconn_recv+0xec>)
 800fd68:	482a      	ldr	r0, [pc, #168]	; (800fe14 <netconn_recv+0xe8>)
 800fd6a:	f00d f86d 	bl	801ce48 <iprintf>
 800fd6e:	f06f 030f 	mvn.w	r3, #15
 800fd72:	e046      	b.n	800fe02 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd7c:	2b10      	cmp	r3, #16
 800fd7e:	d13a      	bne.n	800fdf6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800fd80:	2300      	movs	r3, #0
 800fd82:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800fd84:	2006      	movs	r0, #6
 800fd86:	f002 fa5b 	bl	8012240 <memp_malloc>
 800fd8a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d102      	bne.n	800fd98 <netconn_recv+0x6c>
      return ERR_MEM;
 800fd92:	f04f 33ff 	mov.w	r3, #4294967295
 800fd96:	e034      	b.n	800fe02 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800fd98:	f107 030c 	add.w	r3, r7, #12
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	4619      	mov	r1, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ff3f 	bl	800fc24 <netconn_recv_data_tcp>
 800fda6:	4603      	mov	r3, r0
 800fda8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800fdaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d006      	beq.n	800fdc0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800fdb2:	6979      	ldr	r1, [r7, #20]
 800fdb4:	2006      	movs	r0, #6
 800fdb6:	f002 fa95 	bl	80122e4 <memp_free>
      return err;
 800fdba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fdbe:	e020      	b.n	800fe02 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d106      	bne.n	800fdd4 <netconn_recv+0xa8>
 800fdc6:	4b11      	ldr	r3, [pc, #68]	; (800fe0c <netconn_recv+0xe0>)
 800fdc8:	f240 3279 	movw	r2, #889	; 0x379
 800fdcc:	4913      	ldr	r1, [pc, #76]	; (800fe1c <netconn_recv+0xf0>)
 800fdce:	4811      	ldr	r0, [pc, #68]	; (800fe14 <netconn_recv+0xe8>)
 800fdd0:	f00d f83a 	bl	801ce48 <iprintf>

    buf->p = p;
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	2200      	movs	r2, #0
 800fde4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2200      	movs	r2, #0
 800fdea:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e005      	b.n	800fe02 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	6839      	ldr	r1, [r7, #0]
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7ff fe1a 	bl	800fa34 <netconn_recv_data>
 800fe00:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	0801e478 	.word	0x0801e478
 800fe10:	0801e690 	.word	0x0801e690
 800fe14:	0801e4d0 	.word	0x0801e4d0
 800fe18:	0801e6b0 	.word	0x0801e6b0
 800fe1c:	0801e728 	.word	0x0801e728

0800fe20 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
 800fe2c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d011      	beq.n	800fe58 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d002      	beq.n	800fe40 <netconn_sendto+0x20>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	e000      	b.n	800fe42 <netconn_sendto+0x22>
 800fe40:	2300      	movs	r3, #0
 800fe42:	68ba      	ldr	r2, [r7, #8]
 800fe44:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	887a      	ldrh	r2, [r7, #2]
 800fe4a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800fe4c:	68b9      	ldr	r1, [r7, #8]
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f000 f808 	bl	800fe64 <netconn_send>
 800fe54:	4603      	mov	r3, r0
 800fe56:	e001      	b.n	800fe5c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800fe58:	f06f 0305 	mvn.w	r3, #5
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08c      	sub	sp, #48	; 0x30
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d109      	bne.n	800fe88 <netconn_send+0x24>
 800fe74:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <netconn_send+0x4c>)
 800fe76:	f240 32b2 	movw	r2, #946	; 0x3b2
 800fe7a:	490e      	ldr	r1, [pc, #56]	; (800feb4 <netconn_send+0x50>)
 800fe7c:	480e      	ldr	r0, [pc, #56]	; (800feb8 <netconn_send+0x54>)
 800fe7e:	f00c ffe3 	bl	801ce48 <iprintf>
 800fe82:	f06f 030f 	mvn.w	r3, #15
 800fe86:	e00e      	b.n	800fea6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800fe90:	f107 030c 	add.w	r3, r7, #12
 800fe94:	4619      	mov	r1, r3
 800fe96:	4809      	ldr	r0, [pc, #36]	; (800febc <netconn_send+0x58>)
 800fe98:	f7ff fcbc 	bl	800f814 <netconn_apimsg>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3730      	adds	r7, #48	; 0x30
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	0801e478 	.word	0x0801e478
 800feb4:	0801e734 	.word	0x0801e734
 800feb8:	0801e4d0 	.word	0x0801e4d0
 800febc:	08010e21 	.word	0x08010e21

0800fec0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b08c      	sub	sp, #48	; 0x30
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	460b      	mov	r3, r1
 800feca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d109      	bne.n	800fee6 <netconn_close_shutdown+0x26>
 800fed2:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <netconn_close_shutdown+0x50>)
 800fed4:	f240 4247 	movw	r2, #1095	; 0x447
 800fed8:	490e      	ldr	r1, [pc, #56]	; (800ff14 <netconn_close_shutdown+0x54>)
 800feda:	480f      	ldr	r0, [pc, #60]	; (800ff18 <netconn_close_shutdown+0x58>)
 800fedc:	f00c ffb4 	bl	801ce48 <iprintf>
 800fee0:	f06f 030f 	mvn.w	r3, #15
 800fee4:	e010      	b.n	800ff08 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800feea:	78fb      	ldrb	r3, [r7, #3]
 800feec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800feee:	2329      	movs	r3, #41	; 0x29
 800fef0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800fef2:	f107 030c 	add.w	r3, r7, #12
 800fef6:	4619      	mov	r1, r3
 800fef8:	4808      	ldr	r0, [pc, #32]	; (800ff1c <netconn_close_shutdown+0x5c>)
 800fefa:	f7ff fc8b 	bl	800f814 <netconn_apimsg>
 800fefe:	4603      	mov	r3, r0
 800ff00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ff04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3730      	adds	r7, #48	; 0x30
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	0801e478 	.word	0x0801e478
 800ff14:	0801e7b4 	.word	0x0801e7b4
 800ff18:	0801e4d0 	.word	0x0801e4d0
 800ff1c:	080112bd 	.word	0x080112bd

0800ff20 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <netconn_err+0x12>
    return ERR_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	e00d      	b.n	800ff4e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ff32:	f00c fd61 	bl	801c9f8 <sys_arch_protect>
 800ff36:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	7a1b      	ldrb	r3, [r3, #8]
 800ff3c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f00c fd65 	bl	801ca14 <sys_arch_unprotect>
  return err;
 800ff4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
	...

0800ff58 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ff62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff66:	f113 0f0d 	cmn.w	r3, #13
 800ff6a:	d009      	beq.n	800ff80 <lwip_netconn_err_to_msg+0x28>
 800ff6c:	f113 0f0d 	cmn.w	r3, #13
 800ff70:	dc0c      	bgt.n	800ff8c <lwip_netconn_err_to_msg+0x34>
 800ff72:	f113 0f0f 	cmn.w	r3, #15
 800ff76:	d007      	beq.n	800ff88 <lwip_netconn_err_to_msg+0x30>
 800ff78:	f113 0f0e 	cmn.w	r3, #14
 800ff7c:	d002      	beq.n	800ff84 <lwip_netconn_err_to_msg+0x2c>
 800ff7e:	e005      	b.n	800ff8c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ff80:	4b0a      	ldr	r3, [pc, #40]	; (800ffac <lwip_netconn_err_to_msg+0x54>)
 800ff82:	e00e      	b.n	800ffa2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ff84:	4b0a      	ldr	r3, [pc, #40]	; (800ffb0 <lwip_netconn_err_to_msg+0x58>)
 800ff86:	e00c      	b.n	800ffa2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ff88:	4b0a      	ldr	r3, [pc, #40]	; (800ffb4 <lwip_netconn_err_to_msg+0x5c>)
 800ff8a:	e00a      	b.n	800ffa2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ff8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d005      	beq.n	800ffa0 <lwip_netconn_err_to_msg+0x48>
 800ff94:	4b08      	ldr	r3, [pc, #32]	; (800ffb8 <lwip_netconn_err_to_msg+0x60>)
 800ff96:	227d      	movs	r2, #125	; 0x7d
 800ff98:	4908      	ldr	r1, [pc, #32]	; (800ffbc <lwip_netconn_err_to_msg+0x64>)
 800ff9a:	4809      	ldr	r0, [pc, #36]	; (800ffc0 <lwip_netconn_err_to_msg+0x68>)
 800ff9c:	f00c ff54 	bl	801ce48 <iprintf>
      return NULL;
 800ffa0:	2300      	movs	r3, #0
  }
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3708      	adds	r7, #8
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	08021968 	.word	0x08021968
 800ffb0:	08021969 	.word	0x08021969
 800ffb4:	0802196a 	.word	0x0802196a
 800ffb8:	0801e7d0 	.word	0x0801e7d0
 800ffbc:	0801e804 	.word	0x0801e804
 800ffc0:	0801e814 	.word	0x0801e814

0800ffc4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d105      	bne.n	800ffe0 <lwip_netconn_is_err_msg+0x1c>
 800ffd4:	4b12      	ldr	r3, [pc, #72]	; (8010020 <lwip_netconn_is_err_msg+0x5c>)
 800ffd6:	2285      	movs	r2, #133	; 0x85
 800ffd8:	4912      	ldr	r1, [pc, #72]	; (8010024 <lwip_netconn_is_err_msg+0x60>)
 800ffda:	4813      	ldr	r0, [pc, #76]	; (8010028 <lwip_netconn_is_err_msg+0x64>)
 800ffdc:	f00c ff34 	bl	801ce48 <iprintf>

  if (msg == &netconn_aborted) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a12      	ldr	r2, [pc, #72]	; (801002c <lwip_netconn_is_err_msg+0x68>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d104      	bne.n	800fff2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	22f3      	movs	r2, #243	; 0xf3
 800ffec:	701a      	strb	r2, [r3, #0]
    return 1;
 800ffee:	2301      	movs	r3, #1
 800fff0:	e012      	b.n	8010018 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4a0e      	ldr	r2, [pc, #56]	; (8010030 <lwip_netconn_is_err_msg+0x6c>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d104      	bne.n	8010004 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	22f2      	movs	r2, #242	; 0xf2
 800fffe:	701a      	strb	r2, [r3, #0]
    return 1;
 8010000:	2301      	movs	r3, #1
 8010002:	e009      	b.n	8010018 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4a0b      	ldr	r2, [pc, #44]	; (8010034 <lwip_netconn_is_err_msg+0x70>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d104      	bne.n	8010016 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	22f1      	movs	r2, #241	; 0xf1
 8010010:	701a      	strb	r2, [r3, #0]
    return 1;
 8010012:	2301      	movs	r3, #1
 8010014:	e000      	b.n	8010018 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	0801e7d0 	.word	0x0801e7d0
 8010024:	0801e83c 	.word	0x0801e83c
 8010028:	0801e814 	.word	0x0801e814
 801002c:	08021968 	.word	0x08021968
 8010030:	08021969 	.word	0x08021969
 8010034:	0802196a 	.word	0x0802196a

08010038 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
 8010044:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d105      	bne.n	8010058 <recv_udp+0x20>
 801004c:	4b34      	ldr	r3, [pc, #208]	; (8010120 <recv_udp+0xe8>)
 801004e:	22e5      	movs	r2, #229	; 0xe5
 8010050:	4934      	ldr	r1, [pc, #208]	; (8010124 <recv_udp+0xec>)
 8010052:	4835      	ldr	r0, [pc, #212]	; (8010128 <recv_udp+0xf0>)
 8010054:	f00c fef8 	bl	801ce48 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d105      	bne.n	801006a <recv_udp+0x32>
 801005e:	4b30      	ldr	r3, [pc, #192]	; (8010120 <recv_udp+0xe8>)
 8010060:	22e6      	movs	r2, #230	; 0xe6
 8010062:	4932      	ldr	r1, [pc, #200]	; (801012c <recv_udp+0xf4>)
 8010064:	4830      	ldr	r0, [pc, #192]	; (8010128 <recv_udp+0xf0>)
 8010066:	f00c feef 	bl	801ce48 <iprintf>
  conn = (struct netconn *)arg;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d103      	bne.n	801007c <recv_udp+0x44>
    pbuf_free(p);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f002 ff75 	bl	8012f64 <pbuf_free>
    return;
 801007a:	e04d      	b.n	8010118 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	429a      	cmp	r2, r3
 8010084:	d005      	beq.n	8010092 <recv_udp+0x5a>
 8010086:	4b26      	ldr	r3, [pc, #152]	; (8010120 <recv_udp+0xe8>)
 8010088:	22ee      	movs	r2, #238	; 0xee
 801008a:	4929      	ldr	r1, [pc, #164]	; (8010130 <recv_udp+0xf8>)
 801008c:	4826      	ldr	r0, [pc, #152]	; (8010128 <recv_udp+0xf0>)
 801008e:	f00c fedb 	bl	801ce48 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	3310      	adds	r3, #16
 8010096:	4618      	mov	r0, r3
 8010098:	f00c fb93 	bl	801c7c2 <sys_mbox_valid>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d103      	bne.n	80100aa <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f002 ff5e 	bl	8012f64 <pbuf_free>
    return;
 80100a8:	e036      	b.n	8010118 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80100aa:	2006      	movs	r0, #6
 80100ac:	f002 f8c8 	bl	8012240 <memp_malloc>
 80100b0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d103      	bne.n	80100c0 <recv_udp+0x88>
    pbuf_free(p);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f002 ff53 	bl	8012f64 <pbuf_free>
    return;
 80100be:	e02b      	b.n	8010118 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <recv_udp+0xa0>
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	e000      	b.n	80100da <recv_udp+0xa2>
 80100d8:	2300      	movs	r3, #0
 80100da:	69ba      	ldr	r2, [r7, #24]
 80100dc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80100e2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	891b      	ldrh	r3, [r3, #8]
 80100e8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	3310      	adds	r3, #16
 80100ee:	69b9      	ldr	r1, [r7, #24]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f00c faf1 	bl	801c6d8 <sys_mbox_trypost>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <recv_udp+0xcc>
    netbuf_delete(buf);
 80100fc:	69b8      	ldr	r0, [r7, #24]
 80100fe:	f001 f97d 	bl	80113fc <netbuf_delete>
    return;
 8010102:	e009      	b.n	8010118 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	2b00      	cmp	r3, #0
 801010a:	d005      	beq.n	8010118 <recv_udp+0xe0>
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	8afa      	ldrh	r2, [r7, #22]
 8010112:	2100      	movs	r1, #0
 8010114:	69f8      	ldr	r0, [r7, #28]
 8010116:	4798      	blx	r3
  }
}
 8010118:	3720      	adds	r7, #32
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	0801e7d0 	.word	0x0801e7d0
 8010124:	0801e848 	.word	0x0801e848
 8010128:	0801e814 	.word	0x0801e814
 801012c:	0801e86c 	.word	0x0801e86c
 8010130:	0801e88c 	.word	0x0801e88c

08010134 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b088      	sub	sp, #32
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
 8010140:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d106      	bne.n	8010156 <recv_tcp+0x22>
 8010148:	4b36      	ldr	r3, [pc, #216]	; (8010224 <recv_tcp+0xf0>)
 801014a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801014e:	4936      	ldr	r1, [pc, #216]	; (8010228 <recv_tcp+0xf4>)
 8010150:	4836      	ldr	r0, [pc, #216]	; (801022c <recv_tcp+0xf8>)
 8010152:	f00c fe79 	bl	801ce48 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d106      	bne.n	801016a <recv_tcp+0x36>
 801015c:	4b31      	ldr	r3, [pc, #196]	; (8010224 <recv_tcp+0xf0>)
 801015e:	f240 122d 	movw	r2, #301	; 0x12d
 8010162:	4933      	ldr	r1, [pc, #204]	; (8010230 <recv_tcp+0xfc>)
 8010164:	4831      	ldr	r0, [pc, #196]	; (801022c <recv_tcp+0xf8>)
 8010166:	f00c fe6f 	bl	801ce48 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801016a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d006      	beq.n	8010180 <recv_tcp+0x4c>
 8010172:	4b2c      	ldr	r3, [pc, #176]	; (8010224 <recv_tcp+0xf0>)
 8010174:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010178:	492e      	ldr	r1, [pc, #184]	; (8010234 <recv_tcp+0x100>)
 801017a:	482c      	ldr	r0, [pc, #176]	; (801022c <recv_tcp+0xf8>)
 801017c:	f00c fe64 	bl	801ce48 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <recv_tcp+0x5c>
    return ERR_VAL;
 801018a:	f06f 0305 	mvn.w	r3, #5
 801018e:	e045      	b.n	801021c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	429a      	cmp	r2, r3
 8010198:	d006      	beq.n	80101a8 <recv_tcp+0x74>
 801019a:	4b22      	ldr	r3, [pc, #136]	; (8010224 <recv_tcp+0xf0>)
 801019c:	f240 1235 	movw	r2, #309	; 0x135
 80101a0:	4925      	ldr	r1, [pc, #148]	; (8010238 <recv_tcp+0x104>)
 80101a2:	4822      	ldr	r0, [pc, #136]	; (801022c <recv_tcp+0xf8>)
 80101a4:	f00c fe50 	bl	801ce48 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	3310      	adds	r3, #16
 80101ac:	4618      	mov	r0, r3
 80101ae:	f00c fb08 	bl	801c7c2 <sys_mbox_valid>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10d      	bne.n	80101d4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d008      	beq.n	80101d0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	891b      	ldrh	r3, [r3, #8]
 80101c2:	4619      	mov	r1, r3
 80101c4:	68b8      	ldr	r0, [r7, #8]
 80101c6:	f003 fdcb 	bl	8013d60 <tcp_recved>
      pbuf_free(p);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f002 feca 	bl	8012f64 <pbuf_free>
    }
    return ERR_OK;
 80101d0:	2300      	movs	r3, #0
 80101d2:	e023      	b.n	801021c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d005      	beq.n	80101e6 <recv_tcp+0xb2>
    msg = p;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	891b      	ldrh	r3, [r3, #8]
 80101e2:	83fb      	strh	r3, [r7, #30]
 80101e4:	e003      	b.n	80101ee <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80101e6:	4b15      	ldr	r3, [pc, #84]	; (801023c <recv_tcp+0x108>)
 80101e8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	3310      	adds	r3, #16
 80101f2:	69b9      	ldr	r1, [r7, #24]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f00c fa6f 	bl	801c6d8 <sys_mbox_trypost>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d002      	beq.n	8010206 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8010200:	f04f 33ff 	mov.w	r3, #4294967295
 8010204:	e00a      	b.n	801021c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <recv_tcp+0xe6>
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010212:	8bfa      	ldrh	r2, [r7, #30]
 8010214:	2100      	movs	r1, #0
 8010216:	6978      	ldr	r0, [r7, #20]
 8010218:	4798      	blx	r3
  }

  return ERR_OK;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3720      	adds	r7, #32
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	0801e7d0 	.word	0x0801e7d0
 8010228:	0801e8ac 	.word	0x0801e8ac
 801022c:	0801e814 	.word	0x0801e814
 8010230:	0801e8d0 	.word	0x0801e8d0
 8010234:	0801e8f0 	.word	0x0801e8f0
 8010238:	0801e908 	.word	0x0801e908
 801023c:	0802196a 	.word	0x0802196a

08010240 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d106      	bne.n	8010262 <poll_tcp+0x22>
 8010254:	4b29      	ldr	r3, [pc, #164]	; (80102fc <poll_tcp+0xbc>)
 8010256:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801025a:	4929      	ldr	r1, [pc, #164]	; (8010300 <poll_tcp+0xc0>)
 801025c:	4829      	ldr	r0, [pc, #164]	; (8010304 <poll_tcp+0xc4>)
 801025e:	f00c fdf3 	bl	801ce48 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	785b      	ldrb	r3, [r3, #1]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d104      	bne.n	8010274 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801026a:	2101      	movs	r1, #1
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 fe59 	bl	8010f24 <lwip_netconn_do_writemore>
 8010272:	e016      	b.n	80102a2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	785b      	ldrb	r3, [r3, #1]
 8010278:	2b04      	cmp	r3, #4
 801027a:	d112      	bne.n	80102a2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6a1b      	ldr	r3, [r3, #32]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00a      	beq.n	801029a <poll_tcp+0x5a>
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6a1b      	ldr	r3, [r3, #32]
 8010288:	7a5b      	ldrb	r3, [r3, #9]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d005      	beq.n	801029a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6a1b      	ldr	r3, [r3, #32]
 8010292:	7a5a      	ldrb	r2, [r3, #9]
 8010294:	3a01      	subs	r2, #1
 8010296:	b2d2      	uxtb	r2, r2
 8010298:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801029a:	2101      	movs	r1, #1
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 fb3b 	bl	8010918 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	7f1b      	ldrb	r3, [r3, #28]
 80102a6:	f003 0310 	and.w	r3, r3, #16
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d021      	beq.n	80102f2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d01d      	beq.n	80102f2 <poll_tcp+0xb2>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80102be:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80102c2:	d316      	bcc.n	80102f2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80102cc:	2b04      	cmp	r3, #4
 80102ce:	d810      	bhi.n	80102f2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	7f1b      	ldrb	r3, [r3, #28]
 80102d4:	f023 0310 	bic.w	r3, r3, #16
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d005      	beq.n	80102f2 <poll_tcp+0xb2>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ea:	2200      	movs	r2, #0
 80102ec:	2102      	movs	r1, #2
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80102f2:	2300      	movs	r3, #0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3710      	adds	r7, #16
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	0801e7d0 	.word	0x0801e7d0
 8010300:	0801e928 	.word	0x0801e928
 8010304:	0801e814 	.word	0x0801e814

08010308 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b086      	sub	sp, #24
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	4613      	mov	r3, r2
 8010314:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d106      	bne.n	801032e <sent_tcp+0x26>
 8010320:	4b20      	ldr	r3, [pc, #128]	; (80103a4 <sent_tcp+0x9c>)
 8010322:	f240 1293 	movw	r2, #403	; 0x193
 8010326:	4920      	ldr	r1, [pc, #128]	; (80103a8 <sent_tcp+0xa0>)
 8010328:	4820      	ldr	r0, [pc, #128]	; (80103ac <sent_tcp+0xa4>)
 801032a:	f00c fd8d 	bl	801ce48 <iprintf>

  if (conn) {
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d032      	beq.n	801039a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	785b      	ldrb	r3, [r3, #1]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d104      	bne.n	8010346 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801033c:	2101      	movs	r1, #1
 801033e:	6978      	ldr	r0, [r7, #20]
 8010340:	f000 fdf0 	bl	8010f24 <lwip_netconn_do_writemore>
 8010344:	e007      	b.n	8010356 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	785b      	ldrb	r3, [r3, #1]
 801034a:	2b04      	cmp	r3, #4
 801034c:	d103      	bne.n	8010356 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801034e:	2101      	movs	r1, #1
 8010350:	6978      	ldr	r0, [r7, #20]
 8010352:	f000 fae1 	bl	8010918 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d01d      	beq.n	801039a <sent_tcp+0x92>
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010366:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801036a:	d316      	bcc.n	801039a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010374:	2b04      	cmp	r3, #4
 8010376:	d810      	bhi.n	801039a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	7f1b      	ldrb	r3, [r3, #28]
 801037c:	f023 0310 	bic.w	r3, r3, #16
 8010380:	b2da      	uxtb	r2, r3
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038a:	2b00      	cmp	r3, #0
 801038c:	d005      	beq.n	801039a <sent_tcp+0x92>
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010392:	88fa      	ldrh	r2, [r7, #6]
 8010394:	2102      	movs	r1, #2
 8010396:	6978      	ldr	r0, [r7, #20]
 8010398:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801039a:	2300      	movs	r3, #0
}
 801039c:	4618      	mov	r0, r3
 801039e:	3718      	adds	r7, #24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	0801e7d0 	.word	0x0801e7d0
 80103a8:	0801e928 	.word	0x0801e928
 80103ac:	0801e814 	.word	0x0801e814

080103b0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	460b      	mov	r3, r1
 80103ba:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d106      	bne.n	80103d4 <err_tcp+0x24>
 80103c6:	4b5f      	ldr	r3, [pc, #380]	; (8010544 <err_tcp+0x194>)
 80103c8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80103cc:	495e      	ldr	r1, [pc, #376]	; (8010548 <err_tcp+0x198>)
 80103ce:	485f      	ldr	r0, [pc, #380]	; (801054c <err_tcp+0x19c>)
 80103d0:	f00c fd3a 	bl	801ce48 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80103d4:	f00c fb10 	bl	801c9f8 <sys_arch_protect>
 80103d8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	2200      	movs	r2, #0
 80103de:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	78fa      	ldrb	r2, [r7, #3]
 80103e4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	7f1b      	ldrb	r3, [r3, #28]
 80103ea:	f043 0301 	orr.w	r3, r3, #1
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	785b      	ldrb	r3, [r3, #1]
 80103f8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	2200      	movs	r2, #0
 80103fe:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010400:	69b8      	ldr	r0, [r7, #24]
 8010402:	f00c fb07 	bl	801ca14 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040a:	2b00      	cmp	r3, #0
 801040c:	d005      	beq.n	801041a <err_tcp+0x6a>
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010412:	2200      	movs	r2, #0
 8010414:	2104      	movs	r1, #4
 8010416:	69f8      	ldr	r0, [r7, #28]
 8010418:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801041e:	2b00      	cmp	r3, #0
 8010420:	d005      	beq.n	801042e <err_tcp+0x7e>
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010426:	2200      	movs	r2, #0
 8010428:	2100      	movs	r1, #0
 801042a:	69f8      	ldr	r0, [r7, #28]
 801042c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010432:	2b00      	cmp	r3, #0
 8010434:	d005      	beq.n	8010442 <err_tcp+0x92>
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801043a:	2200      	movs	r2, #0
 801043c:	2102      	movs	r1, #2
 801043e:	69f8      	ldr	r0, [r7, #28]
 8010440:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010446:	4618      	mov	r0, r3
 8010448:	f7ff fd86 	bl	800ff58 <lwip_netconn_err_to_msg>
 801044c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	3310      	adds	r3, #16
 8010452:	4618      	mov	r0, r3
 8010454:	f00c f9b5 	bl	801c7c2 <sys_mbox_valid>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d005      	beq.n	801046a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	3310      	adds	r3, #16
 8010462:	6939      	ldr	r1, [r7, #16]
 8010464:	4618      	mov	r0, r3
 8010466:	f00c f937 	bl	801c6d8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	3314      	adds	r3, #20
 801046e:	4618      	mov	r0, r3
 8010470:	f00c f9a7 	bl	801c7c2 <sys_mbox_valid>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d005      	beq.n	8010486 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	3314      	adds	r3, #20
 801047e:	6939      	ldr	r1, [r7, #16]
 8010480:	4618      	mov	r0, r3
 8010482:	f00c f929 	bl	801c6d8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010486:	7dfb      	ldrb	r3, [r7, #23]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d005      	beq.n	8010498 <err_tcp+0xe8>
 801048c:	7dfb      	ldrb	r3, [r7, #23]
 801048e:	2b04      	cmp	r3, #4
 8010490:	d002      	beq.n	8010498 <err_tcp+0xe8>
 8010492:	7dfb      	ldrb	r3, [r7, #23]
 8010494:	2b03      	cmp	r3, #3
 8010496:	d143      	bne.n	8010520 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	7f1b      	ldrb	r3, [r3, #28]
 801049c:	f003 0304 	and.w	r3, r3, #4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	bf14      	ite	ne
 80104a4:	2301      	movne	r3, #1
 80104a6:	2300      	moveq	r3, #0
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	7f1b      	ldrb	r3, [r3, #28]
 80104b0:	f023 0304 	bic.w	r3, r3, #4
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d13b      	bne.n	8010538 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	6a1b      	ldr	r3, [r3, #32]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d106      	bne.n	80104d6 <err_tcp+0x126>
 80104c8:	4b1e      	ldr	r3, [pc, #120]	; (8010544 <err_tcp+0x194>)
 80104ca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80104ce:	4920      	ldr	r1, [pc, #128]	; (8010550 <err_tcp+0x1a0>)
 80104d0:	481e      	ldr	r0, [pc, #120]	; (801054c <err_tcp+0x19c>)
 80104d2:	f00c fcb9 	bl	801ce48 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
 80104d8:	2b04      	cmp	r3, #4
 80104da:	d104      	bne.n	80104e6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	6a1b      	ldr	r3, [r3, #32]
 80104e0:	2200      	movs	r2, #0
 80104e2:	711a      	strb	r2, [r3, #4]
 80104e4:	e003      	b.n	80104ee <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	6a1b      	ldr	r3, [r3, #32]
 80104ea:	78fa      	ldrb	r2, [r7, #3]
 80104ec:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	6a1b      	ldr	r3, [r3, #32]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	330c      	adds	r3, #12
 80104f6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80104f8:	68b8      	ldr	r0, [r7, #8]
 80104fa:	f00c f9f3 	bl	801c8e4 <sys_sem_valid>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d106      	bne.n	8010512 <err_tcp+0x162>
 8010504:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <err_tcp+0x194>)
 8010506:	f240 12ef 	movw	r2, #495	; 0x1ef
 801050a:	4912      	ldr	r1, [pc, #72]	; (8010554 <err_tcp+0x1a4>)
 801050c:	480f      	ldr	r0, [pc, #60]	; (801054c <err_tcp+0x19c>)
 801050e:	f00c fc9b 	bl	801ce48 <iprintf>
      conn->current_msg = NULL;
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	2200      	movs	r2, #0
 8010516:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010518:	68b8      	ldr	r0, [r7, #8]
 801051a:	f00c f9c9 	bl	801c8b0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801051e:	e00b      	b.n	8010538 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	6a1b      	ldr	r3, [r3, #32]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d008      	beq.n	801053a <err_tcp+0x18a>
 8010528:	4b06      	ldr	r3, [pc, #24]	; (8010544 <err_tcp+0x194>)
 801052a:	f240 12f7 	movw	r2, #503	; 0x1f7
 801052e:	490a      	ldr	r1, [pc, #40]	; (8010558 <err_tcp+0x1a8>)
 8010530:	4806      	ldr	r0, [pc, #24]	; (801054c <err_tcp+0x19c>)
 8010532:	f00c fc89 	bl	801ce48 <iprintf>
  }
}
 8010536:	e000      	b.n	801053a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010538:	bf00      	nop
}
 801053a:	bf00      	nop
 801053c:	3720      	adds	r7, #32
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	0801e7d0 	.word	0x0801e7d0
 8010548:	0801e928 	.word	0x0801e928
 801054c:	0801e814 	.word	0x0801e814
 8010550:	0801e938 	.word	0x0801e938
 8010554:	0801e954 	.word	0x0801e954
 8010558:	0801e970 	.word	0x0801e970

0801055c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801056a:	6879      	ldr	r1, [r7, #4]
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f004 fabd 	bl	8014aec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010572:	490a      	ldr	r1, [pc, #40]	; (801059c <setup_tcp+0x40>)
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f004 facb 	bl	8014b10 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801057a:	4909      	ldr	r1, [pc, #36]	; (80105a0 <setup_tcp+0x44>)
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f004 fae9 	bl	8014b54 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010582:	2202      	movs	r2, #2
 8010584:	4907      	ldr	r1, [pc, #28]	; (80105a4 <setup_tcp+0x48>)
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f004 fb40 	bl	8014c0c <tcp_poll>
  tcp_err(pcb, err_tcp);
 801058c:	4906      	ldr	r1, [pc, #24]	; (80105a8 <setup_tcp+0x4c>)
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f004 fb02 	bl	8014b98 <tcp_err>
}
 8010594:	bf00      	nop
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	08010135 	.word	0x08010135
 80105a0:	08010309 	.word	0x08010309
 80105a4:	08010241 	.word	0x08010241
 80105a8:	080103b1 	.word	0x080103b1

080105ac <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80105ac:	b590      	push	{r4, r7, lr}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80105b4:	2300      	movs	r3, #0
 80105b6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d006      	beq.n	80105d0 <pcb_new+0x24>
 80105c2:	4b2b      	ldr	r3, [pc, #172]	; (8010670 <pcb_new+0xc4>)
 80105c4:	f240 2265 	movw	r2, #613	; 0x265
 80105c8:	492a      	ldr	r1, [pc, #168]	; (8010674 <pcb_new+0xc8>)
 80105ca:	482b      	ldr	r0, [pc, #172]	; (8010678 <pcb_new+0xcc>)
 80105cc:	f00c fc3c 	bl	801ce48 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105da:	2b10      	cmp	r3, #16
 80105dc:	d022      	beq.n	8010624 <pcb_new+0x78>
 80105de:	2b20      	cmp	r3, #32
 80105e0:	d133      	bne.n	801064a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681c      	ldr	r4, [r3, #0]
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f009 fd44 	bl	801a076 <udp_new_ip_type>
 80105ee:	4603      	mov	r3, r0
 80105f0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d02a      	beq.n	8010652 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b22      	cmp	r3, #34	; 0x22
 8010604:	d104      	bne.n	8010610 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	2201      	movs	r2, #1
 801060e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	6858      	ldr	r0, [r3, #4]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	461a      	mov	r2, r3
 801061c:	4917      	ldr	r1, [pc, #92]	; (801067c <pcb_new+0xd0>)
 801061e:	f009 fcb1 	bl	8019f84 <udp_recv>
      }
      break;
 8010622:	e016      	b.n	8010652 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681c      	ldr	r4, [r3, #0]
 8010628:	7bfb      	ldrb	r3, [r7, #15]
 801062a:	4618      	mov	r0, r3
 801062c:	f004 fa50 	bl	8014ad0 <tcp_new_ip_type>
 8010630:	4603      	mov	r3, r0
 8010632:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00b      	beq.n	8010656 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4618      	mov	r0, r3
 8010644:	f7ff ff8a 	bl	801055c <setup_tcp>
      }
      break;
 8010648:	e005      	b.n	8010656 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	22fa      	movs	r2, #250	; 0xfa
 801064e:	711a      	strb	r2, [r3, #4]
      return;
 8010650:	e00a      	b.n	8010668 <pcb_new+0xbc>
      break;
 8010652:	bf00      	nop
 8010654:	e000      	b.n	8010658 <pcb_new+0xac>
      break;
 8010656:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d102      	bne.n	8010668 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	22ff      	movs	r2, #255	; 0xff
 8010666:	711a      	strb	r2, [r3, #4]
  }
}
 8010668:	3714      	adds	r7, #20
 801066a:	46bd      	mov	sp, r7
 801066c:	bd90      	pop	{r4, r7, pc}
 801066e:	bf00      	nop
 8010670:	0801e7d0 	.word	0x0801e7d0
 8010674:	0801e9b4 	.word	0x0801e9b4
 8010678:	0801e814 	.word	0x0801e814
 801067c:	08010039 	.word	0x08010039

08010680 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2200      	movs	r2, #0
 8010690:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff ff85 	bl	80105ac <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80106a2:	bf00      	nop
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
	...

080106ac <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	4603      	mov	r3, r0
 80106b4:	6039      	str	r1, [r7, #0]
 80106b6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80106bc:	2007      	movs	r0, #7
 80106be:	f001 fdbf 	bl	8012240 <memp_malloc>
 80106c2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d101      	bne.n	80106ce <netconn_alloc+0x22>
    return NULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	e052      	b.n	8010774 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2200      	movs	r2, #0
 80106d2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	79fa      	ldrb	r2, [r7, #7]
 80106d8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2200      	movs	r2, #0
 80106de:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106e6:	2b10      	cmp	r3, #16
 80106e8:	d004      	beq.n	80106f4 <netconn_alloc+0x48>
 80106ea:	2b20      	cmp	r3, #32
 80106ec:	d105      	bne.n	80106fa <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80106ee:	2306      	movs	r3, #6
 80106f0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80106f2:	e00a      	b.n	801070a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80106f4:	2306      	movs	r3, #6
 80106f6:	617b      	str	r3, [r7, #20]
      break;
 80106f8:	e007      	b.n	801070a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80106fa:	4b20      	ldr	r3, [pc, #128]	; (801077c <netconn_alloc+0xd0>)
 80106fc:	f240 22e5 	movw	r2, #741	; 0x2e5
 8010700:	491f      	ldr	r1, [pc, #124]	; (8010780 <netconn_alloc+0xd4>)
 8010702:	4820      	ldr	r0, [pc, #128]	; (8010784 <netconn_alloc+0xd8>)
 8010704:	f00c fba0 	bl	801ce48 <iprintf>
      goto free_and_return;
 8010708:	e02f      	b.n	801076a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	3310      	adds	r3, #16
 801070e:	6979      	ldr	r1, [r7, #20]
 8010710:	4618      	mov	r0, r3
 8010712:	f00b ffad 	bl	801c670 <sys_mbox_new>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d125      	bne.n	8010768 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	330c      	adds	r3, #12
 8010720:	2100      	movs	r1, #0
 8010722:	4618      	mov	r0, r3
 8010724:	f00c f86b 	bl	801c7fe <sys_sem_new>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d005      	beq.n	801073a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	3310      	adds	r3, #16
 8010732:	4618      	mov	r0, r3
 8010734:	f00b ffbe 	bl	801c6b4 <sys_mbox_free>
    goto free_and_return;
 8010738:	e017      	b.n	801076a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	3314      	adds	r3, #20
 801073e:	4618      	mov	r0, r3
 8010740:	f00c f850 	bl	801c7e4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2200      	movs	r2, #0
 8010748:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f04f 32ff 	mov.w	r2, #4294967295
 8010750:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	683a      	ldr	r2, [r7, #0]
 8010756:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2200      	movs	r2, #0
 801075c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	7cfa      	ldrb	r2, [r7, #19]
 8010762:	771a      	strb	r2, [r3, #28]
  return conn;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	e005      	b.n	8010774 <netconn_alloc+0xc8>
    goto free_and_return;
 8010768:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801076a:	68f9      	ldr	r1, [r7, #12]
 801076c:	2007      	movs	r0, #7
 801076e:	f001 fdb9 	bl	80122e4 <memp_free>
  return NULL;
 8010772:	2300      	movs	r3, #0
}
 8010774:	4618      	mov	r0, r3
 8010776:	3718      	adds	r7, #24
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	0801e7d0 	.word	0x0801e7d0
 8010780:	0801e9d4 	.word	0x0801e9d4
 8010784:	0801e814 	.word	0x0801e814

08010788 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d006      	beq.n	80107a6 <netconn_free+0x1e>
 8010798:	4b1b      	ldr	r3, [pc, #108]	; (8010808 <netconn_free+0x80>)
 801079a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801079e:	491b      	ldr	r1, [pc, #108]	; (801080c <netconn_free+0x84>)
 80107a0:	481b      	ldr	r0, [pc, #108]	; (8010810 <netconn_free+0x88>)
 80107a2:	f00c fb51 	bl	801ce48 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	3310      	adds	r3, #16
 80107aa:	4618      	mov	r0, r3
 80107ac:	f00c f809 	bl	801c7c2 <sys_mbox_valid>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d006      	beq.n	80107c4 <netconn_free+0x3c>
 80107b6:	4b14      	ldr	r3, [pc, #80]	; (8010808 <netconn_free+0x80>)
 80107b8:	f240 3223 	movw	r2, #803	; 0x323
 80107bc:	4915      	ldr	r1, [pc, #84]	; (8010814 <netconn_free+0x8c>)
 80107be:	4814      	ldr	r0, [pc, #80]	; (8010810 <netconn_free+0x88>)
 80107c0:	f00c fb42 	bl	801ce48 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3314      	adds	r3, #20
 80107c8:	4618      	mov	r0, r3
 80107ca:	f00b fffa 	bl	801c7c2 <sys_mbox_valid>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d006      	beq.n	80107e2 <netconn_free+0x5a>
 80107d4:	4b0c      	ldr	r3, [pc, #48]	; (8010808 <netconn_free+0x80>)
 80107d6:	f240 3226 	movw	r2, #806	; 0x326
 80107da:	490f      	ldr	r1, [pc, #60]	; (8010818 <netconn_free+0x90>)
 80107dc:	480c      	ldr	r0, [pc, #48]	; (8010810 <netconn_free+0x88>)
 80107de:	f00c fb33 	bl	801ce48 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	330c      	adds	r3, #12
 80107e6:	4618      	mov	r0, r3
 80107e8:	f00c f86f 	bl	801c8ca <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	330c      	adds	r3, #12
 80107f0:	4618      	mov	r0, r3
 80107f2:	f00c f888 	bl	801c906 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80107f6:	6879      	ldr	r1, [r7, #4]
 80107f8:	2007      	movs	r0, #7
 80107fa:	f001 fd73 	bl	80122e4 <memp_free>
}
 80107fe:	bf00      	nop
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	0801e7d0 	.word	0x0801e7d0
 801080c:	0801e9fc 	.word	0x0801e9fc
 8010810:	0801e814 	.word	0x0801e814
 8010814:	0801ea2c 	.word	0x0801ea2c
 8010818:	0801ea68 	.word	0x0801ea68

0801081c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b086      	sub	sp, #24
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3310      	adds	r3, #16
 8010828:	4618      	mov	r0, r3
 801082a:	f00b ffca 	bl	801c7c2 <sys_mbox_valid>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d02f      	beq.n	8010894 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010834:	e018      	b.n	8010868 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801083e:	2b10      	cmp	r3, #16
 8010840:	d10e      	bne.n	8010860 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	f107 020f 	add.w	r2, r7, #15
 8010848:	4611      	mov	r1, r2
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff fbba 	bl	800ffc4 <lwip_netconn_is_err_msg>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d108      	bne.n	8010868 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	4618      	mov	r0, r3
 801085a:	f002 fb83 	bl	8012f64 <pbuf_free>
 801085e:	e003      	b.n	8010868 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	4618      	mov	r0, r3
 8010864:	f000 fdca 	bl	80113fc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3310      	adds	r3, #16
 801086c:	f107 0210 	add.w	r2, r7, #16
 8010870:	4611      	mov	r1, r2
 8010872:	4618      	mov	r0, r3
 8010874:	f00b ff89 	bl	801c78a <sys_arch_mbox_tryfetch>
 8010878:	4603      	mov	r3, r0
 801087a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801087e:	d1da      	bne.n	8010836 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	3310      	adds	r3, #16
 8010884:	4618      	mov	r0, r3
 8010886:	f00b ff15 	bl	801c6b4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	3310      	adds	r3, #16
 801088e:	4618      	mov	r0, r3
 8010890:	f00b ffa8 	bl	801c7e4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	3314      	adds	r3, #20
 8010898:	4618      	mov	r0, r3
 801089a:	f00b ff92 	bl	801c7c2 <sys_mbox_valid>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d034      	beq.n	801090e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80108a4:	e01d      	b.n	80108e2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	f107 020e 	add.w	r2, r7, #14
 80108ac:	4611      	mov	r1, r2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7ff fb88 	bl	800ffc4 <lwip_netconn_is_err_msg>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d113      	bne.n	80108e2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80108be:	6978      	ldr	r0, [r7, #20]
 80108c0:	f7ff ffac 	bl	801081c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d007      	beq.n	80108dc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	f003 f947 	bl	8013b64 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	2200      	movs	r2, #0
 80108da:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80108dc:	6978      	ldr	r0, [r7, #20]
 80108de:	f7ff ff53 	bl	8010788 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	3314      	adds	r3, #20
 80108e6:	f107 0210 	add.w	r2, r7, #16
 80108ea:	4611      	mov	r1, r2
 80108ec:	4618      	mov	r0, r3
 80108ee:	f00b ff4c 	bl	801c78a <sys_arch_mbox_tryfetch>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f8:	d1d5      	bne.n	80108a6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	3314      	adds	r3, #20
 80108fe:	4618      	mov	r0, r3
 8010900:	f00b fed8 	bl	801c6b4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	3314      	adds	r3, #20
 8010908:	4618      	mov	r0, r3
 801090a:	f00b ff6b 	bl	801c7e4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801090e:	bf00      	nop
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	460b      	mov	r3, r1
 8010922:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010924:	2300      	movs	r3, #0
 8010926:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <lwip_netconn_do_close_internal+0x24>
 801092e:	4ba1      	ldr	r3, [pc, #644]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 8010930:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010934:	49a0      	ldr	r1, [pc, #640]	; (8010bb8 <lwip_netconn_do_close_internal+0x2a0>)
 8010936:	48a1      	ldr	r0, [pc, #644]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 8010938:	f00c fa86 	bl	801ce48 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010944:	2b10      	cmp	r3, #16
 8010946:	d006      	beq.n	8010956 <lwip_netconn_do_close_internal+0x3e>
 8010948:	4b9a      	ldr	r3, [pc, #616]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 801094a:	f240 32a3 	movw	r2, #931	; 0x3a3
 801094e:	499c      	ldr	r1, [pc, #624]	; (8010bc0 <lwip_netconn_do_close_internal+0x2a8>)
 8010950:	489a      	ldr	r0, [pc, #616]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 8010952:	f00c fa79 	bl	801ce48 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	785b      	ldrb	r3, [r3, #1]
 801095a:	2b04      	cmp	r3, #4
 801095c:	d006      	beq.n	801096c <lwip_netconn_do_close_internal+0x54>
 801095e:	4b95      	ldr	r3, [pc, #596]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 8010960:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010964:	4997      	ldr	r1, [pc, #604]	; (8010bc4 <lwip_netconn_do_close_internal+0x2ac>)
 8010966:	4895      	ldr	r0, [pc, #596]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 8010968:	f00c fa6e 	bl	801ce48 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <lwip_netconn_do_close_internal+0x6a>
 8010974:	4b8f      	ldr	r3, [pc, #572]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 8010976:	f240 32a5 	movw	r2, #933	; 0x3a5
 801097a:	4993      	ldr	r1, [pc, #588]	; (8010bc8 <lwip_netconn_do_close_internal+0x2b0>)
 801097c:	488f      	ldr	r0, [pc, #572]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 801097e:	f00c fa63 	bl	801ce48 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6a1b      	ldr	r3, [r3, #32]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d106      	bne.n	8010998 <lwip_netconn_do_close_internal+0x80>
 801098a:	4b8a      	ldr	r3, [pc, #552]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 801098c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010990:	498e      	ldr	r1, [pc, #568]	; (8010bcc <lwip_netconn_do_close_internal+0x2b4>)
 8010992:	488a      	ldr	r0, [pc, #552]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 8010994:	f00c fa58 	bl	801ce48 <iprintf>

  tpcb = conn->pcb.tcp;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6a1b      	ldr	r3, [r3, #32]
 80109a2:	7a1b      	ldrb	r3, [r3, #8]
 80109a4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	f003 0301 	and.w	r3, r3, #1
 80109ac:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	f003 0302 	and.w	r3, r3, #2
 80109b4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80109b6:	7bfb      	ldrb	r3, [r7, #15]
 80109b8:	2b03      	cmp	r3, #3
 80109ba:	d102      	bne.n	80109c2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80109bc:	2301      	movs	r3, #1
 80109be:	75bb      	strb	r3, [r7, #22]
 80109c0:	e01f      	b.n	8010a02 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80109c2:	7bbb      	ldrb	r3, [r7, #14]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00e      	beq.n	80109e6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80109cc:	2b05      	cmp	r3, #5
 80109ce:	d007      	beq.n	80109e0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80109d4:	2b06      	cmp	r3, #6
 80109d6:	d003      	beq.n	80109e0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80109dc:	2b08      	cmp	r3, #8
 80109de:	d102      	bne.n	80109e6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80109e0:	2301      	movs	r3, #1
 80109e2:	75bb      	strb	r3, [r7, #22]
 80109e4:	e00d      	b.n	8010a02 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80109e6:	7b7b      	ldrb	r3, [r7, #13]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d008      	beq.n	80109fe <lwip_netconn_do_close_internal+0xe6>
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	8b5b      	ldrh	r3, [r3, #26]
 80109f0:	f003 0310 	and.w	r3, r3, #16
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d002      	beq.n	80109fe <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80109f8:	2301      	movs	r3, #1
 80109fa:	75bb      	strb	r3, [r7, #22]
 80109fc:	e001      	b.n	8010a02 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8010a02:	7dbb      	ldrb	r3, [r7, #22]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010a08:	2100      	movs	r1, #0
 8010a0a:	6938      	ldr	r0, [r7, #16]
 8010a0c:	f004 f86e 	bl	8014aec <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	7d1b      	ldrb	r3, [r3, #20]
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d104      	bne.n	8010a22 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010a18:	2100      	movs	r1, #0
 8010a1a:	6938      	ldr	r0, [r7, #16]
 8010a1c:	f004 f8de 	bl	8014bdc <tcp_accept>
 8010a20:	e01d      	b.n	8010a5e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8010a22:	7bbb      	ldrb	r3, [r7, #14]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d007      	beq.n	8010a38 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010a28:	2100      	movs	r1, #0
 8010a2a:	6938      	ldr	r0, [r7, #16]
 8010a2c:	f004 f870 	bl	8014b10 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010a30:	2100      	movs	r1, #0
 8010a32:	6938      	ldr	r0, [r7, #16]
 8010a34:	f004 f8d2 	bl	8014bdc <tcp_accept>
    }
    if (shut_tx) {
 8010a38:	7b7b      	ldrb	r3, [r7, #13]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8010a3e:	2100      	movs	r1, #0
 8010a40:	6938      	ldr	r0, [r7, #16]
 8010a42:	f004 f887 	bl	8014b54 <tcp_sent>
    }
    if (shut_close) {
 8010a46:	7dbb      	ldrb	r3, [r7, #22]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d008      	beq.n	8010a5e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2100      	movs	r1, #0
 8010a50:	6938      	ldr	r0, [r7, #16]
 8010a52:	f004 f8db 	bl	8014c0c <tcp_poll>
      tcp_err(tpcb, NULL);
 8010a56:	2100      	movs	r1, #0
 8010a58:	6938      	ldr	r0, [r7, #16]
 8010a5a:	f004 f89d 	bl	8014b98 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010a5e:	7dbb      	ldrb	r3, [r7, #22]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d005      	beq.n	8010a70 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010a64:	6938      	ldr	r0, [r7, #16]
 8010a66:	f002 ff37 	bl	80138d8 <tcp_close>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	75fb      	strb	r3, [r7, #23]
 8010a6e:	e007      	b.n	8010a80 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010a70:	7bbb      	ldrb	r3, [r7, #14]
 8010a72:	7b7a      	ldrb	r2, [r7, #13]
 8010a74:	4619      	mov	r1, r3
 8010a76:	6938      	ldr	r0, [r7, #16]
 8010a78:	f002 ff5a 	bl	8013930 <tcp_shutdown>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d102      	bne.n	8010a8e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	757b      	strb	r3, [r7, #21]
 8010a8c:	e016      	b.n	8010abc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8010a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a96:	d10f      	bne.n	8010ab8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6a1b      	ldr	r3, [r3, #32]
 8010a9c:	7a5b      	ldrb	r3, [r3, #9]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d10c      	bne.n	8010abc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8010aa6:	7dbb      	ldrb	r3, [r7, #22]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d007      	beq.n	8010abc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8010aac:	6938      	ldr	r0, [r7, #16]
 8010aae:	f003 f859 	bl	8013b64 <tcp_abort>
          err = ERR_OK;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	75fb      	strb	r3, [r7, #23]
 8010ab6:	e001      	b.n	8010abc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010abc:	7d7b      	ldrb	r3, [r7, #21]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d044      	beq.n	8010b4c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6a1b      	ldr	r3, [r3, #32]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	330c      	adds	r3, #12
 8010aca:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6a1b      	ldr	r3, [r3, #32]
 8010ad0:	7dfa      	ldrb	r2, [r7, #23]
 8010ad2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8010ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d129      	bne.n	8010b3c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010ae8:	7dbb      	ldrb	r3, [r7, #22]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00c      	beq.n	8010b08 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d005      	beq.n	8010b08 <lwip_netconn_do_close_internal+0x1f0>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b00:	2200      	movs	r2, #0
 8010b02:	2104      	movs	r1, #4
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	4798      	blx	r3
      }
      if (shut_rx) {
 8010b08:	7bbb      	ldrb	r3, [r7, #14]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d009      	beq.n	8010b22 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d005      	beq.n	8010b22 <lwip_netconn_do_close_internal+0x20a>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2100      	movs	r1, #0
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	4798      	blx	r3
      }
      if (shut_tx) {
 8010b22:	7b7b      	ldrb	r3, [r7, #13]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d009      	beq.n	8010b3c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d005      	beq.n	8010b3c <lwip_netconn_do_close_internal+0x224>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b34:	2200      	movs	r2, #0
 8010b36:	2102      	movs	r1, #2
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010b3c:	78fb      	ldrb	r3, [r7, #3]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d002      	beq.n	8010b48 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8010b42:	68b8      	ldr	r0, [r7, #8]
 8010b44:	f00b feb4 	bl	801c8b0 <sys_sem_signal>
    }
    return ERR_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	e02e      	b.n	8010baa <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8010b4c:	7d7b      	ldrb	r3, [r7, #21]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d11e      	bne.n	8010b90 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	7d1b      	ldrb	r3, [r3, #20]
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	d106      	bne.n	8010b68 <lwip_netconn_do_close_internal+0x250>
 8010b5a:	4b16      	ldr	r3, [pc, #88]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 8010b5c:	f240 4241 	movw	r2, #1089	; 0x441
 8010b60:	491b      	ldr	r1, [pc, #108]	; (8010bd0 <lwip_netconn_do_close_internal+0x2b8>)
 8010b62:	4816      	ldr	r0, [pc, #88]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 8010b64:	f00c f970 	bl	801ce48 <iprintf>
    if (shut_tx) {
 8010b68:	7b7b      	ldrb	r3, [r7, #13]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d003      	beq.n	8010b76 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8010b6e:	4919      	ldr	r1, [pc, #100]	; (8010bd4 <lwip_netconn_do_close_internal+0x2bc>)
 8010b70:	6938      	ldr	r0, [r7, #16]
 8010b72:	f003 ffef 	bl	8014b54 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8010b76:	2201      	movs	r2, #1
 8010b78:	4917      	ldr	r1, [pc, #92]	; (8010bd8 <lwip_netconn_do_close_internal+0x2c0>)
 8010b7a:	6938      	ldr	r0, [r7, #16]
 8010b7c:	f004 f846 	bl	8014c0c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010b80:	4916      	ldr	r1, [pc, #88]	; (8010bdc <lwip_netconn_do_close_internal+0x2c4>)
 8010b82:	6938      	ldr	r0, [r7, #16]
 8010b84:	f004 f808 	bl	8014b98 <tcp_err>
    tcp_arg(tpcb, conn);
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	6938      	ldr	r0, [r7, #16]
 8010b8c:	f003 ffae 	bl	8014aec <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d106      	bne.n	8010ba6 <lwip_netconn_do_close_internal+0x28e>
 8010b98:	4b06      	ldr	r3, [pc, #24]	; (8010bb4 <lwip_netconn_do_close_internal+0x29c>)
 8010b9a:	f240 424d 	movw	r2, #1101	; 0x44d
 8010b9e:	4910      	ldr	r1, [pc, #64]	; (8010be0 <lwip_netconn_do_close_internal+0x2c8>)
 8010ba0:	4806      	ldr	r0, [pc, #24]	; (8010bbc <lwip_netconn_do_close_internal+0x2a4>)
 8010ba2:	f00c f951 	bl	801ce48 <iprintf>
  return err;
 8010ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3718      	adds	r7, #24
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	0801e7d0 	.word	0x0801e7d0
 8010bb8:	0801eaa4 	.word	0x0801eaa4
 8010bbc:	0801e814 	.word	0x0801e814
 8010bc0:	0801eab4 	.word	0x0801eab4
 8010bc4:	0801ead4 	.word	0x0801ead4
 8010bc8:	0801eaf8 	.word	0x0801eaf8
 8010bcc:	0801e938 	.word	0x0801e938
 8010bd0:	0801eb0c 	.word	0x0801eb0c
 8010bd4:	08010309 	.word	0x08010309
 8010bd8:	08010241 	.word	0x08010241
 8010bdc:	080103b1 	.word	0x080103b1
 8010be0:	0801eb30 	.word	0x0801eb30

08010be4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	785b      	ldrb	r3, [r3, #1]
 8010bf6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8010bf8:	7afb      	ldrb	r3, [r7, #11]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d00d      	beq.n	8010c1a <lwip_netconn_do_delconn+0x36>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c08:	2b10      	cmp	r3, #16
 8010c0a:	d006      	beq.n	8010c1a <lwip_netconn_do_delconn+0x36>
 8010c0c:	4b60      	ldr	r3, [pc, #384]	; (8010d90 <lwip_netconn_do_delconn+0x1ac>)
 8010c0e:	f240 425e 	movw	r2, #1118	; 0x45e
 8010c12:	4960      	ldr	r1, [pc, #384]	; (8010d94 <lwip_netconn_do_delconn+0x1b0>)
 8010c14:	4860      	ldr	r0, [pc, #384]	; (8010d98 <lwip_netconn_do_delconn+0x1b4>)
 8010c16:	f00c f917 	bl	801ce48 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8010c1a:	7afb      	ldrb	r3, [r7, #11]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d005      	beq.n	8010c2c <lwip_netconn_do_delconn+0x48>
 8010c20:	7afb      	ldrb	r3, [r7, #11]
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	d002      	beq.n	8010c2c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8010c26:	7afb      	ldrb	r3, [r7, #11]
 8010c28:	2b03      	cmp	r3, #3
 8010c2a:	d109      	bne.n	8010c40 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010c2c:	7afb      	ldrb	r3, [r7, #11]
 8010c2e:	2b03      	cmp	r3, #3
 8010c30:	d10a      	bne.n	8010c48 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	7f1b      	ldrb	r3, [r3, #28]
 8010c38:	f003 0304 	and.w	r3, r3, #4
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d103      	bne.n	8010c48 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	22fb      	movs	r2, #251	; 0xfb
 8010c44:	711a      	strb	r2, [r3, #4]
 8010c46:	e097      	b.n	8010d78 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010c48:	7afb      	ldrb	r3, [r7, #11]
 8010c4a:	2b03      	cmp	r3, #3
 8010c4c:	d10d      	bne.n	8010c6a <lwip_netconn_do_delconn+0x86>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	7f1b      	ldrb	r3, [r3, #28]
 8010c54:	f003 0304 	and.w	r3, r3, #4
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d106      	bne.n	8010c6a <lwip_netconn_do_delconn+0x86>
 8010c5c:	4b4c      	ldr	r3, [pc, #304]	; (8010d90 <lwip_netconn_do_delconn+0x1ac>)
 8010c5e:	f240 427a 	movw	r2, #1146	; 0x47a
 8010c62:	494e      	ldr	r1, [pc, #312]	; (8010d9c <lwip_netconn_do_delconn+0x1b8>)
 8010c64:	484c      	ldr	r0, [pc, #304]	; (8010d98 <lwip_netconn_do_delconn+0x1b4>)
 8010c66:	f00c f8ef 	bl	801ce48 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff fdd1 	bl	801081c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d05f      	beq.n	8010d44 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c8e:	2b10      	cmp	r3, #16
 8010c90:	d00d      	beq.n	8010cae <lwip_netconn_do_delconn+0xca>
 8010c92:	2b20      	cmp	r3, #32
 8010c94:	d151      	bne.n	8010d3a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f009 f98c 	bl	8019fc4 <udp_remove>
          break;
 8010cac:	e046      	b.n	8010d3c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	6a1b      	ldr	r3, [r3, #32]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d006      	beq.n	8010cc6 <lwip_netconn_do_delconn+0xe2>
 8010cb8:	4b35      	ldr	r3, [pc, #212]	; (8010d90 <lwip_netconn_do_delconn+0x1ac>)
 8010cba:	f240 4294 	movw	r2, #1172	; 0x494
 8010cbe:	4938      	ldr	r1, [pc, #224]	; (8010da0 <lwip_netconn_do_delconn+0x1bc>)
 8010cc0:	4835      	ldr	r0, [pc, #212]	; (8010d98 <lwip_netconn_do_delconn+0x1b4>)
 8010cc2:	f00c f8c1 	bl	801ce48 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2204      	movs	r2, #4
 8010ccc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2203      	movs	r2, #3
 8010cd2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	68fa      	ldr	r2, [r7, #12]
 8010cda:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff fe18 	bl	8010918 <lwip_netconn_do_close_internal>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d04b      	beq.n	8010d86 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	785b      	ldrb	r3, [r3, #1]
 8010cf4:	2b04      	cmp	r3, #4
 8010cf6:	d006      	beq.n	8010d06 <lwip_netconn_do_delconn+0x122>
 8010cf8:	4b25      	ldr	r3, [pc, #148]	; (8010d90 <lwip_netconn_do_delconn+0x1ac>)
 8010cfa:	f240 429a 	movw	r2, #1178	; 0x49a
 8010cfe:	4929      	ldr	r1, [pc, #164]	; (8010da4 <lwip_netconn_do_delconn+0x1c0>)
 8010d00:	4825      	ldr	r0, [pc, #148]	; (8010d98 <lwip_netconn_do_delconn+0x1b4>)
 8010d02:	f00c f8a1 	bl	801ce48 <iprintf>
            UNLOCK_TCPIP_CORE();
 8010d06:	4828      	ldr	r0, [pc, #160]	; (8010da8 <lwip_netconn_do_delconn+0x1c4>)
 8010d08:	f00b fe43 	bl	801c992 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	330c      	adds	r3, #12
 8010d12:	2100      	movs	r1, #0
 8010d14:	4618      	mov	r0, r3
 8010d16:	f00b fd9a 	bl	801c84e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8010d1a:	4823      	ldr	r0, [pc, #140]	; (8010da8 <lwip_netconn_do_delconn+0x1c4>)
 8010d1c:	f00b fe2a 	bl	801c974 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	785b      	ldrb	r3, [r3, #1]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d02d      	beq.n	8010d86 <lwip_netconn_do_delconn+0x1a2>
 8010d2a:	4b19      	ldr	r3, [pc, #100]	; (8010d90 <lwip_netconn_do_delconn+0x1ac>)
 8010d2c:	f240 429e 	movw	r2, #1182	; 0x49e
 8010d30:	491c      	ldr	r1, [pc, #112]	; (8010da4 <lwip_netconn_do_delconn+0x1c0>)
 8010d32:	4819      	ldr	r0, [pc, #100]	; (8010d98 <lwip_netconn_do_delconn+0x1b4>)
 8010d34:	f00c f888 	bl	801ce48 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010d38:	e025      	b.n	8010d86 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010d3a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	2200      	movs	r2, #0
 8010d42:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d007      	beq.n	8010d5e <lwip_netconn_do_delconn+0x17a>
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d54:	68fa      	ldr	r2, [r7, #12]
 8010d56:	6810      	ldr	r0, [r2, #0]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d007      	beq.n	8010d78 <lwip_netconn_do_delconn+0x194>
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	6810      	ldr	r0, [r2, #0]
 8010d72:	2200      	movs	r2, #0
 8010d74:	2102      	movs	r1, #2
 8010d76:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	330c      	adds	r3, #12
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f00b fdb0 	bl	801c8e4 <sys_sem_valid>
 8010d84:	e000      	b.n	8010d88 <lwip_netconn_do_delconn+0x1a4>
          return;
 8010d86:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	0801e7d0 	.word	0x0801e7d0
 8010d94:	0801eb40 	.word	0x0801eb40
 8010d98:	0801e814 	.word	0x0801e814
 8010d9c:	0801eb54 	.word	0x0801eb54
 8010da0:	0801eb74 	.word	0x0801eb74
 8010da4:	0801eb90 	.word	0x0801eb90
 8010da8:	2000a800 	.word	0x2000a800

08010dac <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d025      	beq.n	8010e0e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010dcc:	2b10      	cmp	r3, #16
 8010dce:	d00e      	beq.n	8010dee <lwip_netconn_do_bind+0x42>
 8010dd0:	2b20      	cmp	r3, #32
 8010dd2:	d119      	bne.n	8010e08 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6858      	ldr	r0, [r3, #4]
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	6899      	ldr	r1, [r3, #8]
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	899b      	ldrh	r3, [r3, #12]
 8010de2:	461a      	mov	r2, r3
 8010de4:	f009 f846 	bl	8019e74 <udp_bind>
 8010de8:	4603      	mov	r3, r0
 8010dea:	73fb      	strb	r3, [r7, #15]
        break;
 8010dec:	e011      	b.n	8010e12 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	6858      	ldr	r0, [r3, #4]
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	6899      	ldr	r1, [r3, #8]
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	899b      	ldrh	r3, [r3, #12]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	f002 febd 	bl	8013b7c <tcp_bind>
 8010e02:	4603      	mov	r3, r0
 8010e04:	73fb      	strb	r3, [r7, #15]
        break;
 8010e06:	e004      	b.n	8010e12 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8010e08:	23fa      	movs	r3, #250	; 0xfa
 8010e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8010e0c:	e001      	b.n	8010e12 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010e0e:	23fa      	movs	r3, #250	; 0xfa
 8010e10:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	7bfa      	ldrb	r2, [r7, #15]
 8010e16:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010e18:	bf00      	nop
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7ff f875 	bl	800ff20 <netconn_err>
 8010e36:	4603      	mov	r3, r0
 8010e38:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d134      	bne.n	8010eac <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d02d      	beq.n	8010ea8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e56:	2b20      	cmp	r3, #32
 8010e58:	d123      	bne.n	8010ea2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d10c      	bne.n	8010e7e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	685a      	ldr	r2, [r3, #4]
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4619      	mov	r1, r3
 8010e72:	4610      	mov	r0, r2
 8010e74:	f008 fe14 	bl	8019aa0 <udp_send>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8010e7c:	e016      	b.n	8010eac <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6858      	ldr	r0, [r3, #4]
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	689b      	ldr	r3, [r3, #8]
 8010e88:	6819      	ldr	r1, [r3, #0]
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	f103 0208 	add.w	r2, r3, #8
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	689b      	ldr	r3, [r3, #8]
 8010e96:	899b      	ldrh	r3, [r3, #12]
 8010e98:	f008 fe36 	bl	8019b08 <udp_sendto>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	73fb      	strb	r3, [r7, #15]
          break;
 8010ea0:	e004      	b.n	8010eac <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8010ea2:	23f5      	movs	r3, #245	; 0xf5
 8010ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8010ea6:	e001      	b.n	8010eac <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8010ea8:	23f5      	movs	r3, #245	; 0xf5
 8010eaa:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	7bfa      	ldrb	r2, [r7, #15]
 8010eb0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010eb2:	bf00      	nop
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b086      	sub	sp, #24
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d022      	beq.n	8010f1c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ee0:	2b10      	cmp	r3, #16
 8010ee2:	d11b      	bne.n	8010f1c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ef0:	d202      	bcs.n	8010ef8 <lwip_netconn_do_recv+0x3e>
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	e001      	b.n	8010efc <lwip_netconn_do_recv+0x42>
 8010ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010efc:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	89fa      	ldrh	r2, [r7, #14]
 8010f06:	4611      	mov	r1, r2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f002 ff29 	bl	8013d60 <tcp_recved>
        remaining -= recved;
 8010f0e:	89fb      	ldrh	r3, [r7, #14]
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d1e6      	bne.n	8010eea <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010f1c:	bf00      	nop
 8010f1e:	3718      	adds	r7, #24
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b088      	sub	sp, #32
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010f30:	2300      	movs	r3, #0
 8010f32:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d106      	bne.n	8010f48 <lwip_netconn_do_writemore+0x24>
 8010f3a:	4b96      	ldr	r3, [pc, #600]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 8010f3c:	f240 6273 	movw	r2, #1651	; 0x673
 8010f40:	4995      	ldr	r1, [pc, #596]	; (8011198 <lwip_netconn_do_writemore+0x274>)
 8010f42:	4896      	ldr	r0, [pc, #600]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8010f44:	f00b ff80 	bl	801ce48 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	785b      	ldrb	r3, [r3, #1]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d006      	beq.n	8010f5e <lwip_netconn_do_writemore+0x3a>
 8010f50:	4b90      	ldr	r3, [pc, #576]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 8010f52:	f240 6274 	movw	r2, #1652	; 0x674
 8010f56:	4992      	ldr	r1, [pc, #584]	; (80111a0 <lwip_netconn_do_writemore+0x27c>)
 8010f58:	4890      	ldr	r0, [pc, #576]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8010f5a:	f00b ff75 	bl	801ce48 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d106      	bne.n	8010f74 <lwip_netconn_do_writemore+0x50>
 8010f66:	4b8b      	ldr	r3, [pc, #556]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 8010f68:	f240 6275 	movw	r2, #1653	; 0x675
 8010f6c:	498d      	ldr	r1, [pc, #564]	; (80111a4 <lwip_netconn_do_writemore+0x280>)
 8010f6e:	488b      	ldr	r0, [pc, #556]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8010f70:	f00b ff6a 	bl	801ce48 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d106      	bne.n	8010f8a <lwip_netconn_do_writemore+0x66>
 8010f7c:	4b85      	ldr	r3, [pc, #532]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 8010f7e:	f240 6276 	movw	r2, #1654	; 0x676
 8010f82:	4989      	ldr	r1, [pc, #548]	; (80111a8 <lwip_netconn_do_writemore+0x284>)
 8010f84:	4885      	ldr	r0, [pc, #532]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8010f86:	f00b ff5f 	bl	801ce48 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	699a      	ldr	r2, [r3, #24]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6a1b      	ldr	r3, [r3, #32]
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d306      	bcc.n	8010fa8 <lwip_netconn_do_writemore+0x84>
 8010f9a:	4b7e      	ldr	r3, [pc, #504]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 8010f9c:	f240 6277 	movw	r2, #1655	; 0x677
 8010fa0:	4982      	ldr	r1, [pc, #520]	; (80111ac <lwip_netconn_do_writemore+0x288>)
 8010fa2:	487e      	ldr	r0, [pc, #504]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8010fa4:	f00b ff50 	bl	801ce48 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6a1b      	ldr	r3, [r3, #32]
 8010fac:	899b      	ldrh	r3, [r3, #12]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d106      	bne.n	8010fc0 <lwip_netconn_do_writemore+0x9c>
 8010fb2:	4b78      	ldr	r3, [pc, #480]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 8010fb4:	f240 6279 	movw	r2, #1657	; 0x679
 8010fb8:	497d      	ldr	r1, [pc, #500]	; (80111b0 <lwip_netconn_do_writemore+0x28c>)
 8010fba:	4878      	ldr	r0, [pc, #480]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8010fbc:	f00b ff44 	bl	801ce48 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a1b      	ldr	r3, [r3, #32]
 8010fc4:	7f1b      	ldrb	r3, [r3, #28]
 8010fc6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	7f1b      	ldrb	r3, [r3, #28]
 8010fcc:	f003 0302 	and.w	r3, r3, #2
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d104      	bne.n	8010fde <lwip_netconn_do_writemore+0xba>
 8010fd4:	7ebb      	ldrb	r3, [r7, #26]
 8010fd6:	f003 0304 	and.w	r3, r3, #4
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d001      	beq.n	8010fe2 <lwip_netconn_do_writemore+0xbe>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e000      	b.n	8010fe4 <lwip_netconn_do_writemore+0xc0>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a1b      	ldr	r3, [r3, #32]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6a1b      	ldr	r3, [r3, #32]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6a1b      	ldr	r3, [r3, #32]
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	685a      	ldr	r2, [r3, #4]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6a1b      	ldr	r3, [r3, #32]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011010:	d307      	bcc.n	8011022 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8011012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011016:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011018:	7ebb      	ldrb	r3, [r7, #26]
 801101a:	f043 0302 	orr.w	r3, r3, #2
 801101e:	76bb      	strb	r3, [r7, #26]
 8011020:	e001      	b.n	8011026 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801102e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011030:	89fa      	ldrh	r2, [r7, #14]
 8011032:	8bbb      	ldrh	r3, [r7, #28]
 8011034:	429a      	cmp	r2, r3
 8011036:	d216      	bcs.n	8011066 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011038:	89fb      	ldrh	r3, [r7, #14]
 801103a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801103c:	7e3b      	ldrb	r3, [r7, #24]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00d      	beq.n	801105e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8011042:	8bbb      	ldrh	r3, [r7, #28]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10e      	bne.n	8011066 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6a1b      	ldr	r3, [r3, #32]
 801104c:	699b      	ldr	r3, [r3, #24]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d102      	bne.n	8011058 <lwip_netconn_do_writemore+0x134>
 8011052:	f06f 0306 	mvn.w	r3, #6
 8011056:	e000      	b.n	801105a <lwip_netconn_do_writemore+0x136>
 8011058:	2300      	movs	r3, #0
 801105a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801105c:	e07d      	b.n	801115a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801105e:	7ebb      	ldrb	r3, [r7, #26]
 8011060:	f043 0302 	orr.w	r3, r3, #2
 8011064:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a1b      	ldr	r3, [r3, #32]
 801106a:	691a      	ldr	r2, [r3, #16]
 801106c:	8bbb      	ldrh	r3, [r7, #28]
 801106e:	441a      	add	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6a1b      	ldr	r3, [r3, #32]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	429a      	cmp	r2, r3
 801107a:	d906      	bls.n	801108a <lwip_netconn_do_writemore+0x166>
 801107c:	4b45      	ldr	r3, [pc, #276]	; (8011194 <lwip_netconn_do_writemore+0x270>)
 801107e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8011082:	494c      	ldr	r1, [pc, #304]	; (80111b4 <lwip_netconn_do_writemore+0x290>)
 8011084:	4845      	ldr	r0, [pc, #276]	; (801119c <lwip_netconn_do_writemore+0x278>)
 8011086:	f00b fedf 	bl	801ce48 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801108a:	8bbb      	ldrh	r3, [r7, #28]
 801108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011090:	4293      	cmp	r3, r2
 8011092:	d103      	bne.n	801109c <lwip_netconn_do_writemore+0x178>
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801109a:	d209      	bcs.n	80110b0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80110a0:	8bba      	ldrh	r2, [r7, #28]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d10b      	bne.n	80110be <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	899b      	ldrh	r3, [r3, #12]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d906      	bls.n	80110be <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80110b0:	2301      	movs	r3, #1
 80110b2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80110b4:	7ebb      	ldrb	r3, [r7, #26]
 80110b6:	f043 0302 	orr.w	r3, r3, #2
 80110ba:	76bb      	strb	r3, [r7, #26]
 80110bc:	e001      	b.n	80110c2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80110be:	2300      	movs	r3, #0
 80110c0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6858      	ldr	r0, [r3, #4]
 80110c6:	7ebb      	ldrb	r3, [r7, #26]
 80110c8:	8bba      	ldrh	r2, [r7, #28]
 80110ca:	6979      	ldr	r1, [r7, #20]
 80110cc:	f006 fc4c 	bl	8017968 <tcp_write>
 80110d0:	4603      	mov	r3, r0
 80110d2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80110d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d12c      	bne.n	8011136 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	6999      	ldr	r1, [r3, #24]
 80110e2:	8bba      	ldrh	r2, [r7, #28]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6a1b      	ldr	r3, [r3, #32]
 80110e8:	440a      	add	r2, r1
 80110ea:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6a1b      	ldr	r3, [r3, #32]
 80110f0:	6919      	ldr	r1, [r3, #16]
 80110f2:	8bba      	ldrh	r2, [r7, #28]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a1b      	ldr	r3, [r3, #32]
 80110f8:	440a      	add	r2, r1
 80110fa:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6a1b      	ldr	r3, [r3, #32]
 8011100:	691a      	ldr	r2, [r3, #16]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6a1b      	ldr	r3, [r3, #32]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	429a      	cmp	r2, r3
 801110c:	d113      	bne.n	8011136 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6a1b      	ldr	r3, [r3, #32]
 8011112:	899a      	ldrh	r2, [r3, #12]
 8011114:	3a01      	subs	r2, #1
 8011116:	b292      	uxth	r2, r2
 8011118:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6a1b      	ldr	r3, [r3, #32]
 801111e:	899b      	ldrh	r3, [r3, #12]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d008      	beq.n	8011136 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6a1b      	ldr	r3, [r3, #32]
 8011128:	689a      	ldr	r2, [r3, #8]
 801112a:	3208      	adds	r2, #8
 801112c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6a1b      	ldr	r3, [r3, #32]
 8011132:	2200      	movs	r2, #0
 8011134:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8011136:	7e7b      	ldrb	r3, [r7, #25]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d004      	beq.n	8011146 <lwip_netconn_do_writemore+0x222>
 801113c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f43f af50 	beq.w	8010fe6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8011146:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d004      	beq.n	8011158 <lwip_netconn_do_writemore+0x234>
 801114e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011156:	d146      	bne.n	80111e6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8011158:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801115a:	7e3b      	ldrb	r3, [r7, #24]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d02b      	beq.n	80111b8 <lwip_netconn_do_writemore+0x294>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a1b      	ldr	r3, [r3, #32]
 8011164:	699a      	ldr	r2, [r3, #24]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6a1b      	ldr	r3, [r3, #32]
 801116a:	695b      	ldr	r3, [r3, #20]
 801116c:	429a      	cmp	r2, r3
 801116e:	d223      	bcs.n	80111b8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011174:	2b00      	cmp	r3, #0
 8011176:	d005      	beq.n	8011184 <lwip_netconn_do_writemore+0x260>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117c:	2200      	movs	r2, #0
 801117e:	2103      	movs	r1, #3
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	7f1b      	ldrb	r3, [r3, #28]
 8011188:	f043 0310 	orr.w	r3, r3, #16
 801118c:	b2da      	uxtb	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	771a      	strb	r2, [r3, #28]
 8011192:	e028      	b.n	80111e6 <lwip_netconn_do_writemore+0x2c2>
 8011194:	0801e7d0 	.word	0x0801e7d0
 8011198:	0801e928 	.word	0x0801e928
 801119c:	0801e814 	.word	0x0801e814
 80111a0:	0801ec30 	.word	0x0801ec30
 80111a4:	0801e938 	.word	0x0801e938
 80111a8:	0801ec50 	.word	0x0801ec50
 80111ac:	0801ec68 	.word	0x0801ec68
 80111b0:	0801eca8 	.word	0x0801eca8
 80111b4:	0801ecd0 	.word	0x0801ecd0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80111c0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80111c4:	d305      	bcc.n	80111d2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80111ce:	2b04      	cmp	r3, #4
 80111d0:	d909      	bls.n	80111e6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d005      	beq.n	80111e6 <lwip_netconn_do_writemore+0x2c2>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111de:	2200      	movs	r2, #0
 80111e0:	2103      	movs	r1, #3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80111e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d11d      	bne.n	801122a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6a1b      	ldr	r3, [r3, #32]
 80111f2:	699a      	ldr	r2, [r3, #24]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6a1b      	ldr	r3, [r3, #32]
 80111f8:	695b      	ldr	r3, [r3, #20]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d002      	beq.n	8011204 <lwip_netconn_do_writemore+0x2e0>
 80111fe:	7e3b      	ldrb	r3, [r7, #24]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011204:	2301      	movs	r3, #1
 8011206:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	f007 f995 	bl	801853c <tcp_output>
 8011212:	4603      	mov	r3, r0
 8011214:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011216:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801121a:	f113 0f04 	cmn.w	r3, #4
 801121e:	d12c      	bne.n	801127a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011220:	7b3b      	ldrb	r3, [r7, #12]
 8011222:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011224:	2301      	movs	r3, #1
 8011226:	76fb      	strb	r3, [r7, #27]
 8011228:	e027      	b.n	801127a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801122a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011232:	d120      	bne.n	8011276 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	f007 f97f 	bl	801853c <tcp_output>
 801123e:	4603      	mov	r3, r0
 8011240:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011242:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011246:	f113 0f04 	cmn.w	r3, #4
 801124a:	d104      	bne.n	8011256 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801124c:	7b7b      	ldrb	r3, [r7, #13]
 801124e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011250:	2301      	movs	r3, #1
 8011252:	76fb      	strb	r3, [r7, #27]
 8011254:	e011      	b.n	801127a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8011256:	7e3b      	ldrb	r3, [r7, #24]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d00e      	beq.n	801127a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6a1b      	ldr	r3, [r3, #32]
 8011260:	699b      	ldr	r3, [r3, #24]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d102      	bne.n	801126c <lwip_netconn_do_writemore+0x348>
 8011266:	f06f 0306 	mvn.w	r3, #6
 801126a:	e000      	b.n	801126e <lwip_netconn_do_writemore+0x34a>
 801126c:	2300      	movs	r3, #0
 801126e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011270:	2301      	movs	r3, #1
 8011272:	76fb      	strb	r3, [r7, #27]
 8011274:	e001      	b.n	801127a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011276:	2301      	movs	r3, #1
 8011278:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801127a:	7efb      	ldrb	r3, [r7, #27]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d015      	beq.n	80112ac <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a1b      	ldr	r3, [r3, #32]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	330c      	adds	r3, #12
 8011288:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6a1b      	ldr	r3, [r3, #32]
 801128e:	7ffa      	ldrb	r2, [r7, #31]
 8011290:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2200      	movs	r2, #0
 801129c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801129e:	78fb      	ldrb	r3, [r7, #3]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d006      	beq.n	80112b2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80112a4:	68b8      	ldr	r0, [r7, #8]
 80112a6:	f00b fb03 	bl	801c8b0 <sys_sem_signal>
 80112aa:	e002      	b.n	80112b2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80112ac:	f04f 33ff 	mov.w	r3, #4294967295
 80112b0:	e000      	b.n	80112b4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3720      	adds	r7, #32
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	785b      	ldrb	r3, [r3, #1]
 80112ce:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d069      	beq.n	80113ae <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80112e4:	2b10      	cmp	r3, #16
 80112e6:	d162      	bne.n	80113ae <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80112ec:	2b03      	cmp	r3, #3
 80112ee:	d002      	beq.n	80112f6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80112f0:	7afb      	ldrb	r3, [r7, #11]
 80112f2:	2b02      	cmp	r3, #2
 80112f4:	d05b      	beq.n	80113ae <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80112f6:	7afb      	ldrb	r3, [r7, #11]
 80112f8:	2b03      	cmp	r3, #3
 80112fa:	d103      	bne.n	8011304 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	22f5      	movs	r2, #245	; 0xf5
 8011300:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011302:	e059      	b.n	80113b8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011304:	7afb      	ldrb	r3, [r7, #11]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d103      	bne.n	8011312 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	22fb      	movs	r2, #251	; 0xfb
 801130e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011310:	e052      	b.n	80113b8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	7a1b      	ldrb	r3, [r3, #8]
 8011316:	f003 0301 	and.w	r3, r3, #1
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	4618      	mov	r0, r3
 8011324:	f7ff fa7a 	bl	801081c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	6a1b      	ldr	r3, [r3, #32]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d006      	beq.n	8011340 <lwip_netconn_do_close+0x84>
 8011332:	4b23      	ldr	r3, [pc, #140]	; (80113c0 <lwip_netconn_do_close+0x104>)
 8011334:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8011338:	4922      	ldr	r1, [pc, #136]	; (80113c4 <lwip_netconn_do_close+0x108>)
 801133a:	4823      	ldr	r0, [pc, #140]	; (80113c8 <lwip_netconn_do_close+0x10c>)
 801133c:	f00b fd84 	bl	801ce48 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2204      	movs	r2, #4
 8011346:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	68fa      	ldr	r2, [r7, #12]
 801134e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2100      	movs	r1, #0
 8011356:	4618      	mov	r0, r3
 8011358:	f7ff fade 	bl	8010918 <lwip_netconn_do_close_internal>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d029      	beq.n	80113b6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	785b      	ldrb	r3, [r3, #1]
 8011368:	2b04      	cmp	r3, #4
 801136a:	d006      	beq.n	801137a <lwip_netconn_do_close+0xbe>
 801136c:	4b14      	ldr	r3, [pc, #80]	; (80113c0 <lwip_netconn_do_close+0x104>)
 801136e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8011372:	4916      	ldr	r1, [pc, #88]	; (80113cc <lwip_netconn_do_close+0x110>)
 8011374:	4814      	ldr	r0, [pc, #80]	; (80113c8 <lwip_netconn_do_close+0x10c>)
 8011376:	f00b fd67 	bl	801ce48 <iprintf>
        UNLOCK_TCPIP_CORE();
 801137a:	4815      	ldr	r0, [pc, #84]	; (80113d0 <lwip_netconn_do_close+0x114>)
 801137c:	f00b fb09 	bl	801c992 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	330c      	adds	r3, #12
 8011386:	2100      	movs	r1, #0
 8011388:	4618      	mov	r0, r3
 801138a:	f00b fa60 	bl	801c84e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801138e:	4810      	ldr	r0, [pc, #64]	; (80113d0 <lwip_netconn_do_close+0x114>)
 8011390:	f00b faf0 	bl	801c974 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	785b      	ldrb	r3, [r3, #1]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00b      	beq.n	80113b6 <lwip_netconn_do_close+0xfa>
 801139e:	4b08      	ldr	r3, [pc, #32]	; (80113c0 <lwip_netconn_do_close+0x104>)
 80113a0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80113a4:	4909      	ldr	r1, [pc, #36]	; (80113cc <lwip_netconn_do_close+0x110>)
 80113a6:	4808      	ldr	r0, [pc, #32]	; (80113c8 <lwip_netconn_do_close+0x10c>)
 80113a8:	f00b fd4e 	bl	801ce48 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80113ac:	e003      	b.n	80113b6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	22f5      	movs	r2, #245	; 0xf5
 80113b2:	711a      	strb	r2, [r3, #4]
 80113b4:	e000      	b.n	80113b8 <lwip_netconn_do_close+0xfc>
      return;
 80113b6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	0801e7d0 	.word	0x0801e7d0
 80113c4:	0801eb74 	.word	0x0801eb74
 80113c8:	0801e814 	.word	0x0801e814
 80113cc:	0801eb90 	.word	0x0801eb90
 80113d0:	2000a800 	.word	0x2000a800

080113d4 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80113da:	2006      	movs	r0, #6
 80113dc:	f000 ff30 	bl	8012240 <memp_malloc>
 80113e0:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d004      	beq.n	80113f2 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80113e8:	2210      	movs	r2, #16
 80113ea:	2100      	movs	r1, #0
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f00b fc79 	bl	801cce4 <memset>
  }
  return buf;
 80113f2:	687b      	ldr	r3, [r7, #4]
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d013      	beq.n	8011432 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00b      	beq.n	801142a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4618      	mov	r0, r3
 8011418:	f001 fda4 	bl	8012f64 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	605a      	str	r2, [r3, #4]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801142a:	6879      	ldr	r1, [r7, #4]
 801142c:	2006      	movs	r0, #6
 801142e:	f000 ff59 	bl	80122e4 <memp_free>
  }
}
 8011432:	bf00      	nop
 8011434:	3708      	adds	r7, #8
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	4613      	mov	r3, r2
 8011448:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d108      	bne.n	8011462 <netbuf_ref+0x26>
 8011450:	4b1c      	ldr	r3, [pc, #112]	; (80114c4 <netbuf_ref+0x88>)
 8011452:	2299      	movs	r2, #153	; 0x99
 8011454:	491c      	ldr	r1, [pc, #112]	; (80114c8 <netbuf_ref+0x8c>)
 8011456:	481d      	ldr	r0, [pc, #116]	; (80114cc <netbuf_ref+0x90>)
 8011458:	f00b fcf6 	bl	801ce48 <iprintf>
 801145c:	f06f 030f 	mvn.w	r3, #15
 8011460:	e02b      	b.n	80114ba <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d004      	beq.n	8011474 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4618      	mov	r0, r3
 8011470:	f001 fd78 	bl	8012f64 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8011474:	2241      	movs	r2, #65	; 0x41
 8011476:	2100      	movs	r1, #0
 8011478:	2036      	movs	r0, #54	; 0x36
 801147a:	f001 fa8f 	bl	801299c <pbuf_alloc>
 801147e:	4602      	mov	r2, r0
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d105      	bne.n	8011498 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8011492:	f04f 33ff 	mov.w	r3, #4294967295
 8011496:	e010      	b.n	80114ba <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	88fa      	ldrh	r2, [r7, #6]
 80114a6:	811a      	strh	r2, [r3, #8]
 80114a8:	68fa      	ldr	r2, [r7, #12]
 80114aa:	6812      	ldr	r2, [r2, #0]
 80114ac:	891b      	ldrh	r3, [r3, #8]
 80114ae:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	0801ed28 	.word	0x0801ed28
 80114c8:	0801ede0 	.word	0x0801ede0
 80114cc:	0801ed78 	.word	0x0801ed78

080114d0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d108      	bne.n	80114f4 <netbuf_data+0x24>
 80114e2:	4b1b      	ldr	r3, [pc, #108]	; (8011550 <netbuf_data+0x80>)
 80114e4:	22c6      	movs	r2, #198	; 0xc6
 80114e6:	491b      	ldr	r1, [pc, #108]	; (8011554 <netbuf_data+0x84>)
 80114e8:	481b      	ldr	r0, [pc, #108]	; (8011558 <netbuf_data+0x88>)
 80114ea:	f00b fcad 	bl	801ce48 <iprintf>
 80114ee:	f06f 030f 	mvn.w	r3, #15
 80114f2:	e029      	b.n	8011548 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d108      	bne.n	801150c <netbuf_data+0x3c>
 80114fa:	4b15      	ldr	r3, [pc, #84]	; (8011550 <netbuf_data+0x80>)
 80114fc:	22c7      	movs	r2, #199	; 0xc7
 80114fe:	4917      	ldr	r1, [pc, #92]	; (801155c <netbuf_data+0x8c>)
 8011500:	4815      	ldr	r0, [pc, #84]	; (8011558 <netbuf_data+0x88>)
 8011502:	f00b fca1 	bl	801ce48 <iprintf>
 8011506:	f06f 030f 	mvn.w	r3, #15
 801150a:	e01d      	b.n	8011548 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d108      	bne.n	8011524 <netbuf_data+0x54>
 8011512:	4b0f      	ldr	r3, [pc, #60]	; (8011550 <netbuf_data+0x80>)
 8011514:	22c8      	movs	r2, #200	; 0xc8
 8011516:	4912      	ldr	r1, [pc, #72]	; (8011560 <netbuf_data+0x90>)
 8011518:	480f      	ldr	r0, [pc, #60]	; (8011558 <netbuf_data+0x88>)
 801151a:	f00b fc95 	bl	801ce48 <iprintf>
 801151e:	f06f 030f 	mvn.w	r3, #15
 8011522:	e011      	b.n	8011548 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d102      	bne.n	8011532 <netbuf_data+0x62>
    return ERR_BUF;
 801152c:	f06f 0301 	mvn.w	r3, #1
 8011530:	e00a      	b.n	8011548 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	895a      	ldrh	r2, [r3, #10]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3710      	adds	r7, #16
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	0801ed28 	.word	0x0801ed28
 8011554:	0801ee30 	.word	0x0801ee30
 8011558:	0801ed78 	.word	0x0801ed78
 801155c:	0801ee4c 	.word	0x0801ee4c
 8011560:	0801ee6c 	.word	0x0801ee6c

08011564 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801156e:	f008 f89d 	bl	80196ac <sys_timeouts_sleeptime>
 8011572:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801157a:	d10b      	bne.n	8011594 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801157c:	4813      	ldr	r0, [pc, #76]	; (80115cc <tcpip_timeouts_mbox_fetch+0x68>)
 801157e:	f00b fa08 	bl	801c992 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011582:	2200      	movs	r2, #0
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f00b f8c0 	bl	801c70c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801158c:	480f      	ldr	r0, [pc, #60]	; (80115cc <tcpip_timeouts_mbox_fetch+0x68>)
 801158e:	f00b f9f1 	bl	801c974 <sys_mutex_lock>
    return;
 8011592:	e018      	b.n	80115c6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d102      	bne.n	80115a0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801159a:	f008 f84d 	bl	8019638 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801159e:	e7e6      	b.n	801156e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80115a0:	480a      	ldr	r0, [pc, #40]	; (80115cc <tcpip_timeouts_mbox_fetch+0x68>)
 80115a2:	f00b f9f6 	bl	801c992 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f00b f8ae 	bl	801c70c <sys_arch_mbox_fetch>
 80115b0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80115b2:	4806      	ldr	r0, [pc, #24]	; (80115cc <tcpip_timeouts_mbox_fetch+0x68>)
 80115b4:	f00b f9de 	bl	801c974 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115be:	d102      	bne.n	80115c6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80115c0:	f008 f83a 	bl	8019638 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80115c4:	e7d3      	b.n	801156e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80115c6:	3710      	adds	r7, #16
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	2000a800 	.word	0x2000a800

080115d0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80115d8:	4810      	ldr	r0, [pc, #64]	; (801161c <tcpip_thread+0x4c>)
 80115da:	f00b f9cb 	bl	801c974 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80115de:	4b10      	ldr	r3, [pc, #64]	; (8011620 <tcpip_thread+0x50>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d005      	beq.n	80115f2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80115e6:	4b0e      	ldr	r3, [pc, #56]	; (8011620 <tcpip_thread+0x50>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4a0e      	ldr	r2, [pc, #56]	; (8011624 <tcpip_thread+0x54>)
 80115ec:	6812      	ldr	r2, [r2, #0]
 80115ee:	4610      	mov	r0, r2
 80115f0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80115f2:	f107 030c 	add.w	r3, r7, #12
 80115f6:	4619      	mov	r1, r3
 80115f8:	480b      	ldr	r0, [pc, #44]	; (8011628 <tcpip_thread+0x58>)
 80115fa:	f7ff ffb3 	bl	8011564 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d106      	bne.n	8011612 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011604:	4b09      	ldr	r3, [pc, #36]	; (801162c <tcpip_thread+0x5c>)
 8011606:	2291      	movs	r2, #145	; 0x91
 8011608:	4909      	ldr	r1, [pc, #36]	; (8011630 <tcpip_thread+0x60>)
 801160a:	480a      	ldr	r0, [pc, #40]	; (8011634 <tcpip_thread+0x64>)
 801160c:	f00b fc1c 	bl	801ce48 <iprintf>
      continue;
 8011610:	e003      	b.n	801161a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	4618      	mov	r0, r3
 8011616:	f000 f80f 	bl	8011638 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801161a:	e7ea      	b.n	80115f2 <tcpip_thread+0x22>
 801161c:	2000a800 	.word	0x2000a800
 8011620:	20006b90 	.word	0x20006b90
 8011624:	20006b94 	.word	0x20006b94
 8011628:	20006b98 	.word	0x20006b98
 801162c:	0801eec0 	.word	0x0801eec0
 8011630:	0801eef0 	.word	0x0801eef0
 8011634:	0801ef10 	.word	0x0801ef10

08011638 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b02      	cmp	r3, #2
 8011646:	d026      	beq.n	8011696 <tcpip_thread_handle_msg+0x5e>
 8011648:	2b02      	cmp	r3, #2
 801164a:	dc2b      	bgt.n	80116a4 <tcpip_thread_handle_msg+0x6c>
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <tcpip_thread_handle_msg+0x1e>
 8011650:	2b01      	cmp	r3, #1
 8011652:	d015      	beq.n	8011680 <tcpip_thread_handle_msg+0x48>
 8011654:	e026      	b.n	80116a4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	68db      	ldr	r3, [r3, #12]
 801165a:	687a      	ldr	r2, [r7, #4]
 801165c:	6850      	ldr	r0, [r2, #4]
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	6892      	ldr	r2, [r2, #8]
 8011662:	4611      	mov	r1, r2
 8011664:	4798      	blx	r3
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d004      	beq.n	8011676 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	4618      	mov	r0, r3
 8011672:	f001 fc77 	bl	8012f64 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011676:	6879      	ldr	r1, [r7, #4]
 8011678:	2009      	movs	r0, #9
 801167a:	f000 fe33 	bl	80122e4 <memp_free>
      break;
 801167e:	e018      	b.n	80116b2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	6892      	ldr	r2, [r2, #8]
 8011688:	4610      	mov	r0, r2
 801168a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801168c:	6879      	ldr	r1, [r7, #4]
 801168e:	2008      	movs	r0, #8
 8011690:	f000 fe28 	bl	80122e4 <memp_free>
      break;
 8011694:	e00d      	b.n	80116b2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	6892      	ldr	r2, [r2, #8]
 801169e:	4610      	mov	r0, r2
 80116a0:	4798      	blx	r3
      break;
 80116a2:	e006      	b.n	80116b2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80116a4:	4b05      	ldr	r3, [pc, #20]	; (80116bc <tcpip_thread_handle_msg+0x84>)
 80116a6:	22cf      	movs	r2, #207	; 0xcf
 80116a8:	4905      	ldr	r1, [pc, #20]	; (80116c0 <tcpip_thread_handle_msg+0x88>)
 80116aa:	4806      	ldr	r0, [pc, #24]	; (80116c4 <tcpip_thread_handle_msg+0x8c>)
 80116ac:	f00b fbcc 	bl	801ce48 <iprintf>
      break;
 80116b0:	bf00      	nop
  }
}
 80116b2:	bf00      	nop
 80116b4:	3708      	adds	r7, #8
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	0801eec0 	.word	0x0801eec0
 80116c0:	0801eef0 	.word	0x0801eef0
 80116c4:	0801ef10 	.word	0x0801ef10

080116c8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80116d4:	481a      	ldr	r0, [pc, #104]	; (8011740 <tcpip_inpkt+0x78>)
 80116d6:	f00b f874 	bl	801c7c2 <sys_mbox_valid>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d105      	bne.n	80116ec <tcpip_inpkt+0x24>
 80116e0:	4b18      	ldr	r3, [pc, #96]	; (8011744 <tcpip_inpkt+0x7c>)
 80116e2:	22fc      	movs	r2, #252	; 0xfc
 80116e4:	4918      	ldr	r1, [pc, #96]	; (8011748 <tcpip_inpkt+0x80>)
 80116e6:	4819      	ldr	r0, [pc, #100]	; (801174c <tcpip_inpkt+0x84>)
 80116e8:	f00b fbae 	bl	801ce48 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80116ec:	2009      	movs	r0, #9
 80116ee:	f000 fda7 	bl	8012240 <memp_malloc>
 80116f2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d102      	bne.n	8011700 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80116fa:	f04f 33ff 	mov.w	r3, #4294967295
 80116fe:	e01a      	b.n	8011736 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	2200      	movs	r2, #0
 8011704:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	68ba      	ldr	r2, [r7, #8]
 8011710:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011718:	6979      	ldr	r1, [r7, #20]
 801171a:	4809      	ldr	r0, [pc, #36]	; (8011740 <tcpip_inpkt+0x78>)
 801171c:	f00a ffdc 	bl	801c6d8 <sys_mbox_trypost>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d006      	beq.n	8011734 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011726:	6979      	ldr	r1, [r7, #20]
 8011728:	2009      	movs	r0, #9
 801172a:	f000 fddb 	bl	80122e4 <memp_free>
    return ERR_MEM;
 801172e:	f04f 33ff 	mov.w	r3, #4294967295
 8011732:	e000      	b.n	8011736 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011734:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011736:	4618      	mov	r0, r3
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	20006b98 	.word	0x20006b98
 8011744:	0801eec0 	.word	0x0801eec0
 8011748:	0801ef38 	.word	0x0801ef38
 801174c:	0801ef10 	.word	0x0801ef10

08011750 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011760:	f003 0318 	and.w	r3, r3, #24
 8011764:	2b00      	cmp	r3, #0
 8011766:	d006      	beq.n	8011776 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011768:	4a08      	ldr	r2, [pc, #32]	; (801178c <tcpip_input+0x3c>)
 801176a:	6839      	ldr	r1, [r7, #0]
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7ff ffab 	bl	80116c8 <tcpip_inpkt>
 8011772:	4603      	mov	r3, r0
 8011774:	e005      	b.n	8011782 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011776:	4a06      	ldr	r2, [pc, #24]	; (8011790 <tcpip_input+0x40>)
 8011778:	6839      	ldr	r1, [r7, #0]
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7ff ffa4 	bl	80116c8 <tcpip_inpkt>
 8011780:	4603      	mov	r3, r0
}
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	0801c4c5 	.word	0x0801c4c5
 8011790:	0801b3d9 	.word	0x0801b3d9

08011794 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801179e:	4819      	ldr	r0, [pc, #100]	; (8011804 <tcpip_try_callback+0x70>)
 80117a0:	f00b f80f 	bl	801c7c2 <sys_mbox_valid>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcpip_try_callback+0x24>
 80117aa:	4b17      	ldr	r3, [pc, #92]	; (8011808 <tcpip_try_callback+0x74>)
 80117ac:	f240 125d 	movw	r2, #349	; 0x15d
 80117b0:	4916      	ldr	r1, [pc, #88]	; (801180c <tcpip_try_callback+0x78>)
 80117b2:	4817      	ldr	r0, [pc, #92]	; (8011810 <tcpip_try_callback+0x7c>)
 80117b4:	f00b fb48 	bl	801ce48 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80117b8:	2008      	movs	r0, #8
 80117ba:	f000 fd41 	bl	8012240 <memp_malloc>
 80117be:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d102      	bne.n	80117cc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80117c6:	f04f 33ff 	mov.w	r3, #4294967295
 80117ca:	e017      	b.n	80117fc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2201      	movs	r2, #1
 80117d0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80117de:	68f9      	ldr	r1, [r7, #12]
 80117e0:	4808      	ldr	r0, [pc, #32]	; (8011804 <tcpip_try_callback+0x70>)
 80117e2:	f00a ff79 	bl	801c6d8 <sys_mbox_trypost>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d006      	beq.n	80117fa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80117ec:	68f9      	ldr	r1, [r7, #12]
 80117ee:	2008      	movs	r0, #8
 80117f0:	f000 fd78 	bl	80122e4 <memp_free>
    return ERR_MEM;
 80117f4:	f04f 33ff 	mov.w	r3, #4294967295
 80117f8:	e000      	b.n	80117fc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3710      	adds	r7, #16
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	20006b98 	.word	0x20006b98
 8011808:	0801eec0 	.word	0x0801eec0
 801180c:	0801ef38 	.word	0x0801ef38
 8011810:	0801ef10 	.word	0x0801ef10

08011814 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011820:	4806      	ldr	r0, [pc, #24]	; (801183c <tcpip_send_msg_wait_sem+0x28>)
 8011822:	f00b f8a7 	bl	801c974 <sys_mutex_lock>
  fn(apimsg);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	68b8      	ldr	r0, [r7, #8]
 801182a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801182c:	4803      	ldr	r0, [pc, #12]	; (801183c <tcpip_send_msg_wait_sem+0x28>)
 801182e:	f00b f8b0 	bl	801c992 <sys_mutex_unlock>
  return ERR_OK;
 8011832:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011834:	4618      	mov	r0, r3
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	2000a800 	.word	0x2000a800

08011840 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b084      	sub	sp, #16
 8011844:	af02      	add	r7, sp, #8
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
  lwip_init();
 801184a:	f000 f871 	bl	8011930 <lwip_init>

  tcpip_init_done = initfunc;
 801184e:	4a17      	ldr	r2, [pc, #92]	; (80118ac <tcpip_init+0x6c>)
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011854:	4a16      	ldr	r2, [pc, #88]	; (80118b0 <tcpip_init+0x70>)
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801185a:	2106      	movs	r1, #6
 801185c:	4815      	ldr	r0, [pc, #84]	; (80118b4 <tcpip_init+0x74>)
 801185e:	f00a ff07 	bl	801c670 <sys_mbox_new>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d006      	beq.n	8011876 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011868:	4b13      	ldr	r3, [pc, #76]	; (80118b8 <tcpip_init+0x78>)
 801186a:	f240 2261 	movw	r2, #609	; 0x261
 801186e:	4913      	ldr	r1, [pc, #76]	; (80118bc <tcpip_init+0x7c>)
 8011870:	4813      	ldr	r0, [pc, #76]	; (80118c0 <tcpip_init+0x80>)
 8011872:	f00b fae9 	bl	801ce48 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011876:	4813      	ldr	r0, [pc, #76]	; (80118c4 <tcpip_init+0x84>)
 8011878:	f00b f860 	bl	801c93c <sys_mutex_new>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d006      	beq.n	8011890 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011882:	4b0d      	ldr	r3, [pc, #52]	; (80118b8 <tcpip_init+0x78>)
 8011884:	f240 2265 	movw	r2, #613	; 0x265
 8011888:	490f      	ldr	r1, [pc, #60]	; (80118c8 <tcpip_init+0x88>)
 801188a:	480d      	ldr	r0, [pc, #52]	; (80118c0 <tcpip_init+0x80>)
 801188c:	f00b fadc 	bl	801ce48 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011890:	2300      	movs	r3, #0
 8011892:	9300      	str	r3, [sp, #0]
 8011894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011898:	2200      	movs	r2, #0
 801189a:	490c      	ldr	r1, [pc, #48]	; (80118cc <tcpip_init+0x8c>)
 801189c:	480c      	ldr	r0, [pc, #48]	; (80118d0 <tcpip_init+0x90>)
 801189e:	f00b f885 	bl	801c9ac <sys_thread_new>
}
 80118a2:	bf00      	nop
 80118a4:	3708      	adds	r7, #8
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	20006b90 	.word	0x20006b90
 80118b0:	20006b94 	.word	0x20006b94
 80118b4:	20006b98 	.word	0x20006b98
 80118b8:	0801eec0 	.word	0x0801eec0
 80118bc:	0801ef48 	.word	0x0801ef48
 80118c0:	0801ef10 	.word	0x0801ef10
 80118c4:	2000a800 	.word	0x2000a800
 80118c8:	0801ef6c 	.word	0x0801ef6c
 80118cc:	080115d1 	.word	0x080115d1
 80118d0:	0801ef90 	.word	0x0801ef90

080118d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4603      	mov	r3, r0
 80118dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80118de:	88fb      	ldrh	r3, [r7, #6]
 80118e0:	021b      	lsls	r3, r3, #8
 80118e2:	b21a      	sxth	r2, r3
 80118e4:	88fb      	ldrh	r3, [r7, #6]
 80118e6:	0a1b      	lsrs	r3, r3, #8
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	b21b      	sxth	r3, r3
 80118ec:	4313      	orrs	r3, r2
 80118ee:	b21b      	sxth	r3, r3
 80118f0:	b29b      	uxth	r3, r3
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	370c      	adds	r7, #12
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80118fe:	b480      	push	{r7}
 8011900:	b083      	sub	sp, #12
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	061a      	lsls	r2, r3, #24
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	021b      	lsls	r3, r3, #8
 801190e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011912:	431a      	orrs	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	0a1b      	lsrs	r3, r3, #8
 8011918:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801191c:	431a      	orrs	r2, r3
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	0e1b      	lsrs	r3, r3, #24
 8011922:	4313      	orrs	r3, r2
}
 8011924:	4618      	mov	r0, r3
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801193a:	f00a fff1 	bl	801c920 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801193e:	f000 f8d5 	bl	8011aec <mem_init>
  memp_init();
 8011942:	f000 fc31 	bl	80121a8 <memp_init>
  pbuf_init();
  netif_init();
 8011946:	f000 fcf7 	bl	8012338 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801194a:	f007 fee7 	bl	801971c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801194e:	f001 fdb3 	bl	80134b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011952:	f007 fe29 	bl	80195a8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
	...

08011960 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	4603      	mov	r3, r0
 8011968:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801196a:	4b05      	ldr	r3, [pc, #20]	; (8011980 <ptr_to_mem+0x20>)
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	88fb      	ldrh	r3, [r7, #6]
 8011970:	4413      	add	r3, r2
}
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	20006b9c 	.word	0x20006b9c

08011984 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801198c:	4b05      	ldr	r3, [pc, #20]	; (80119a4 <mem_to_ptr+0x20>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	1ad3      	subs	r3, r2, r3
 8011994:	b29b      	uxth	r3, r3
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	20006b9c 	.word	0x20006b9c

080119a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80119a8:	b590      	push	{r4, r7, lr}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80119b0:	4b45      	ldr	r3, [pc, #276]	; (8011ac8 <plug_holes+0x120>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d206      	bcs.n	80119c8 <plug_holes+0x20>
 80119ba:	4b44      	ldr	r3, [pc, #272]	; (8011acc <plug_holes+0x124>)
 80119bc:	f240 12df 	movw	r2, #479	; 0x1df
 80119c0:	4943      	ldr	r1, [pc, #268]	; (8011ad0 <plug_holes+0x128>)
 80119c2:	4844      	ldr	r0, [pc, #272]	; (8011ad4 <plug_holes+0x12c>)
 80119c4:	f00b fa40 	bl	801ce48 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80119c8:	4b43      	ldr	r3, [pc, #268]	; (8011ad8 <plug_holes+0x130>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d306      	bcc.n	80119e0 <plug_holes+0x38>
 80119d2:	4b3e      	ldr	r3, [pc, #248]	; (8011acc <plug_holes+0x124>)
 80119d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80119d8:	4940      	ldr	r1, [pc, #256]	; (8011adc <plug_holes+0x134>)
 80119da:	483e      	ldr	r0, [pc, #248]	; (8011ad4 <plug_holes+0x12c>)
 80119dc:	f00b fa34 	bl	801ce48 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	791b      	ldrb	r3, [r3, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d006      	beq.n	80119f6 <plug_holes+0x4e>
 80119e8:	4b38      	ldr	r3, [pc, #224]	; (8011acc <plug_holes+0x124>)
 80119ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 80119ee:	493c      	ldr	r1, [pc, #240]	; (8011ae0 <plug_holes+0x138>)
 80119f0:	4838      	ldr	r0, [pc, #224]	; (8011ad4 <plug_holes+0x12c>)
 80119f2:	f00b fa29 	bl	801ce48 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80119fe:	d906      	bls.n	8011a0e <plug_holes+0x66>
 8011a00:	4b32      	ldr	r3, [pc, #200]	; (8011acc <plug_holes+0x124>)
 8011a02:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011a06:	4937      	ldr	r1, [pc, #220]	; (8011ae4 <plug_holes+0x13c>)
 8011a08:	4832      	ldr	r0, [pc, #200]	; (8011ad4 <plug_holes+0x12c>)
 8011a0a:	f00b fa1d 	bl	801ce48 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7ff ffa4 	bl	8011960 <ptr_to_mem>
 8011a18:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d024      	beq.n	8011a6c <plug_holes+0xc4>
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	791b      	ldrb	r3, [r3, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d120      	bne.n	8011a6c <plug_holes+0xc4>
 8011a2a:	4b2b      	ldr	r3, [pc, #172]	; (8011ad8 <plug_holes+0x130>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	68fa      	ldr	r2, [r7, #12]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d01b      	beq.n	8011a6c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011a34:	4b2c      	ldr	r3, [pc, #176]	; (8011ae8 <plug_holes+0x140>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d102      	bne.n	8011a44 <plug_holes+0x9c>
      lfree = mem;
 8011a3e:	4a2a      	ldr	r2, [pc, #168]	; (8011ae8 <plug_holes+0x140>)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	881a      	ldrh	r2, [r3, #0]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a54:	d00a      	beq.n	8011a6c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7ff ff80 	bl	8011960 <ptr_to_mem>
 8011a60:	4604      	mov	r4, r0
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f7ff ff8e 	bl	8011984 <mem_to_ptr>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	885b      	ldrh	r3, [r3, #2]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff ff75 	bl	8011960 <ptr_to_mem>
 8011a76:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d01f      	beq.n	8011ac0 <plug_holes+0x118>
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	791b      	ldrb	r3, [r3, #4]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d11b      	bne.n	8011ac0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011a88:	4b17      	ldr	r3, [pc, #92]	; (8011ae8 <plug_holes+0x140>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d102      	bne.n	8011a98 <plug_holes+0xf0>
      lfree = pmem;
 8011a92:	4a15      	ldr	r2, [pc, #84]	; (8011ae8 <plug_holes+0x140>)
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	881a      	ldrh	r2, [r3, #0]
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011aa8:	d00a      	beq.n	8011ac0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	881b      	ldrh	r3, [r3, #0]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff ff56 	bl	8011960 <ptr_to_mem>
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	68b8      	ldr	r0, [r7, #8]
 8011ab8:	f7ff ff64 	bl	8011984 <mem_to_ptr>
 8011abc:	4603      	mov	r3, r0
 8011abe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011ac0:	bf00      	nop
 8011ac2:	3714      	adds	r7, #20
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd90      	pop	{r4, r7, pc}
 8011ac8:	20006b9c 	.word	0x20006b9c
 8011acc:	0801efa0 	.word	0x0801efa0
 8011ad0:	0801efd0 	.word	0x0801efd0
 8011ad4:	0801efe8 	.word	0x0801efe8
 8011ad8:	20006ba0 	.word	0x20006ba0
 8011adc:	0801f010 	.word	0x0801f010
 8011ae0:	0801f02c 	.word	0x0801f02c
 8011ae4:	0801f048 	.word	0x0801f048
 8011ae8:	20006ba8 	.word	0x20006ba8

08011aec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011af2:	4b1f      	ldr	r3, [pc, #124]	; (8011b70 <mem_init+0x84>)
 8011af4:	3303      	adds	r3, #3
 8011af6:	f023 0303 	bic.w	r3, r3, #3
 8011afa:	461a      	mov	r2, r3
 8011afc:	4b1d      	ldr	r3, [pc, #116]	; (8011b74 <mem_init+0x88>)
 8011afe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011b00:	4b1c      	ldr	r3, [pc, #112]	; (8011b74 <mem_init+0x88>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011b0c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011b1a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011b1e:	f7ff ff1f 	bl	8011960 <ptr_to_mem>
 8011b22:	4603      	mov	r3, r0
 8011b24:	4a14      	ldr	r2, [pc, #80]	; (8011b78 <mem_init+0x8c>)
 8011b26:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011b28:	4b13      	ldr	r3, [pc, #76]	; (8011b78 <mem_init+0x8c>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011b30:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <mem_init+0x8c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011b38:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011b3a:	4b0f      	ldr	r3, [pc, #60]	; (8011b78 <mem_init+0x8c>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011b42:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011b44:	4b0b      	ldr	r3, [pc, #44]	; (8011b74 <mem_init+0x88>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a0c      	ldr	r2, [pc, #48]	; (8011b7c <mem_init+0x90>)
 8011b4a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011b4c:	480c      	ldr	r0, [pc, #48]	; (8011b80 <mem_init+0x94>)
 8011b4e:	f00a fef5 	bl	801c93c <sys_mutex_new>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d006      	beq.n	8011b66 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011b58:	4b0a      	ldr	r3, [pc, #40]	; (8011b84 <mem_init+0x98>)
 8011b5a:	f240 221f 	movw	r2, #543	; 0x21f
 8011b5e:	490a      	ldr	r1, [pc, #40]	; (8011b88 <mem_init+0x9c>)
 8011b60:	480a      	ldr	r0, [pc, #40]	; (8011b8c <mem_init+0xa0>)
 8011b62:	f00b f971 	bl	801ce48 <iprintf>
  }
}
 8011b66:	bf00      	nop
 8011b68:	3708      	adds	r7, #8
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	2000a81c 	.word	0x2000a81c
 8011b74:	20006b9c 	.word	0x20006b9c
 8011b78:	20006ba0 	.word	0x20006ba0
 8011b7c:	20006ba8 	.word	0x20006ba8
 8011b80:	20006ba4 	.word	0x20006ba4
 8011b84:	0801efa0 	.word	0x0801efa0
 8011b88:	0801f074 	.word	0x0801f074
 8011b8c:	0801efe8 	.word	0x0801efe8

08011b90 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7ff fef3 	bl	8011984 <mem_to_ptr>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7ff feda 	bl	8011960 <ptr_to_mem>
 8011bac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	885b      	ldrh	r3, [r3, #2]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7ff fed4 	bl	8011960 <ptr_to_mem>
 8011bb8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	881b      	ldrh	r3, [r3, #0]
 8011bbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bc2:	d818      	bhi.n	8011bf6 <mem_link_valid+0x66>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	885b      	ldrh	r3, [r3, #2]
 8011bc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bcc:	d813      	bhi.n	8011bf6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011bd2:	8afa      	ldrh	r2, [r7, #22]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d004      	beq.n	8011be2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	881b      	ldrh	r3, [r3, #0]
 8011bdc:	8afa      	ldrh	r2, [r7, #22]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d109      	bne.n	8011bf6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011be2:	4b08      	ldr	r3, [pc, #32]	; (8011c04 <mem_link_valid+0x74>)
 8011be4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011be6:	693a      	ldr	r2, [r7, #16]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d006      	beq.n	8011bfa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	885b      	ldrh	r3, [r3, #2]
 8011bf0:	8afa      	ldrh	r2, [r7, #22]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d001      	beq.n	8011bfa <mem_link_valid+0x6a>
    return 0;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	e000      	b.n	8011bfc <mem_link_valid+0x6c>
  }
  return 1;
 8011bfa:	2301      	movs	r3, #1
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	20006ba0 	.word	0x20006ba0

08011c08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b088      	sub	sp, #32
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d070      	beq.n	8011cf8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f003 0303 	and.w	r3, r3, #3
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00d      	beq.n	8011c3c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011c20:	4b37      	ldr	r3, [pc, #220]	; (8011d00 <mem_free+0xf8>)
 8011c22:	f240 2273 	movw	r2, #627	; 0x273
 8011c26:	4937      	ldr	r1, [pc, #220]	; (8011d04 <mem_free+0xfc>)
 8011c28:	4837      	ldr	r0, [pc, #220]	; (8011d08 <mem_free+0x100>)
 8011c2a:	f00b f90d 	bl	801ce48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c2e:	f00a fee3 	bl	801c9f8 <sys_arch_protect>
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	68f8      	ldr	r0, [r7, #12]
 8011c36:	f00a feed 	bl	801ca14 <sys_arch_unprotect>
    return;
 8011c3a:	e05e      	b.n	8011cfa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	3b08      	subs	r3, #8
 8011c40:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011c42:	4b32      	ldr	r3, [pc, #200]	; (8011d0c <mem_free+0x104>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	69fa      	ldr	r2, [r7, #28]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d306      	bcc.n	8011c5a <mem_free+0x52>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f103 020c 	add.w	r2, r3, #12
 8011c52:	4b2f      	ldr	r3, [pc, #188]	; (8011d10 <mem_free+0x108>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d90d      	bls.n	8011c76 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011c5a:	4b29      	ldr	r3, [pc, #164]	; (8011d00 <mem_free+0xf8>)
 8011c5c:	f240 227f 	movw	r2, #639	; 0x27f
 8011c60:	492c      	ldr	r1, [pc, #176]	; (8011d14 <mem_free+0x10c>)
 8011c62:	4829      	ldr	r0, [pc, #164]	; (8011d08 <mem_free+0x100>)
 8011c64:	f00b f8f0 	bl	801ce48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c68:	f00a fec6 	bl	801c9f8 <sys_arch_protect>
 8011c6c:	6138      	str	r0, [r7, #16]
 8011c6e:	6938      	ldr	r0, [r7, #16]
 8011c70:	f00a fed0 	bl	801ca14 <sys_arch_unprotect>
    return;
 8011c74:	e041      	b.n	8011cfa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011c76:	4828      	ldr	r0, [pc, #160]	; (8011d18 <mem_free+0x110>)
 8011c78:	f00a fe7c 	bl	801c974 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011c7c:	69fb      	ldr	r3, [r7, #28]
 8011c7e:	791b      	ldrb	r3, [r3, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d110      	bne.n	8011ca6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011c84:	4b1e      	ldr	r3, [pc, #120]	; (8011d00 <mem_free+0xf8>)
 8011c86:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011c8a:	4924      	ldr	r1, [pc, #144]	; (8011d1c <mem_free+0x114>)
 8011c8c:	481e      	ldr	r0, [pc, #120]	; (8011d08 <mem_free+0x100>)
 8011c8e:	f00b f8db 	bl	801ce48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011c92:	4821      	ldr	r0, [pc, #132]	; (8011d18 <mem_free+0x110>)
 8011c94:	f00a fe7d 	bl	801c992 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c98:	f00a feae 	bl	801c9f8 <sys_arch_protect>
 8011c9c:	6178      	str	r0, [r7, #20]
 8011c9e:	6978      	ldr	r0, [r7, #20]
 8011ca0:	f00a feb8 	bl	801ca14 <sys_arch_unprotect>
    return;
 8011ca4:	e029      	b.n	8011cfa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011ca6:	69f8      	ldr	r0, [r7, #28]
 8011ca8:	f7ff ff72 	bl	8011b90 <mem_link_valid>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d110      	bne.n	8011cd4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011cb2:	4b13      	ldr	r3, [pc, #76]	; (8011d00 <mem_free+0xf8>)
 8011cb4:	f240 2295 	movw	r2, #661	; 0x295
 8011cb8:	4919      	ldr	r1, [pc, #100]	; (8011d20 <mem_free+0x118>)
 8011cba:	4813      	ldr	r0, [pc, #76]	; (8011d08 <mem_free+0x100>)
 8011cbc:	f00b f8c4 	bl	801ce48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011cc0:	4815      	ldr	r0, [pc, #84]	; (8011d18 <mem_free+0x110>)
 8011cc2:	f00a fe66 	bl	801c992 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011cc6:	f00a fe97 	bl	801c9f8 <sys_arch_protect>
 8011cca:	61b8      	str	r0, [r7, #24]
 8011ccc:	69b8      	ldr	r0, [r7, #24]
 8011cce:	f00a fea1 	bl	801ca14 <sys_arch_unprotect>
    return;
 8011cd2:	e012      	b.n	8011cfa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011cda:	4b12      	ldr	r3, [pc, #72]	; (8011d24 <mem_free+0x11c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	69fa      	ldr	r2, [r7, #28]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d202      	bcs.n	8011cea <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011ce4:	4a0f      	ldr	r2, [pc, #60]	; (8011d24 <mem_free+0x11c>)
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011cea:	69f8      	ldr	r0, [r7, #28]
 8011cec:	f7ff fe5c 	bl	80119a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011cf0:	4809      	ldr	r0, [pc, #36]	; (8011d18 <mem_free+0x110>)
 8011cf2:	f00a fe4e 	bl	801c992 <sys_mutex_unlock>
 8011cf6:	e000      	b.n	8011cfa <mem_free+0xf2>
    return;
 8011cf8:	bf00      	nop
}
 8011cfa:	3720      	adds	r7, #32
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	0801efa0 	.word	0x0801efa0
 8011d04:	0801f090 	.word	0x0801f090
 8011d08:	0801efe8 	.word	0x0801efe8
 8011d0c:	20006b9c 	.word	0x20006b9c
 8011d10:	20006ba0 	.word	0x20006ba0
 8011d14:	0801f0b4 	.word	0x0801f0b4
 8011d18:	20006ba4 	.word	0x20006ba4
 8011d1c:	0801f0d0 	.word	0x0801f0d0
 8011d20:	0801f0f8 	.word	0x0801f0f8
 8011d24:	20006ba8 	.word	0x20006ba8

08011d28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b088      	sub	sp, #32
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	460b      	mov	r3, r1
 8011d32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011d34:	887b      	ldrh	r3, [r7, #2]
 8011d36:	3303      	adds	r3, #3
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	f023 0303 	bic.w	r3, r3, #3
 8011d3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011d40:	8bfb      	ldrh	r3, [r7, #30]
 8011d42:	2b0b      	cmp	r3, #11
 8011d44:	d801      	bhi.n	8011d4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011d46:	230c      	movs	r3, #12
 8011d48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011d4a:	8bfb      	ldrh	r3, [r7, #30]
 8011d4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011d50:	d803      	bhi.n	8011d5a <mem_trim+0x32>
 8011d52:	8bfa      	ldrh	r2, [r7, #30]
 8011d54:	887b      	ldrh	r3, [r7, #2]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d201      	bcs.n	8011d5e <mem_trim+0x36>
    return NULL;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	e0d8      	b.n	8011f10 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011d5e:	4b6e      	ldr	r3, [pc, #440]	; (8011f18 <mem_trim+0x1f0>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d304      	bcc.n	8011d72 <mem_trim+0x4a>
 8011d68:	4b6c      	ldr	r3, [pc, #432]	; (8011f1c <mem_trim+0x1f4>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d306      	bcc.n	8011d80 <mem_trim+0x58>
 8011d72:	4b6b      	ldr	r3, [pc, #428]	; (8011f20 <mem_trim+0x1f8>)
 8011d74:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011d78:	496a      	ldr	r1, [pc, #424]	; (8011f24 <mem_trim+0x1fc>)
 8011d7a:	486b      	ldr	r0, [pc, #428]	; (8011f28 <mem_trim+0x200>)
 8011d7c:	f00b f864 	bl	801ce48 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011d80:	4b65      	ldr	r3, [pc, #404]	; (8011f18 <mem_trim+0x1f0>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d304      	bcc.n	8011d94 <mem_trim+0x6c>
 8011d8a:	4b64      	ldr	r3, [pc, #400]	; (8011f1c <mem_trim+0x1f4>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d307      	bcc.n	8011da4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011d94:	f00a fe30 	bl	801c9f8 <sys_arch_protect>
 8011d98:	60b8      	str	r0, [r7, #8]
 8011d9a:	68b8      	ldr	r0, [r7, #8]
 8011d9c:	f00a fe3a 	bl	801ca14 <sys_arch_unprotect>
    return rmem;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	e0b5      	b.n	8011f10 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	3b08      	subs	r3, #8
 8011da8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011daa:	69b8      	ldr	r0, [r7, #24]
 8011dac:	f7ff fdea 	bl	8011984 <mem_to_ptr>
 8011db0:	4603      	mov	r3, r0
 8011db2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011db4:	69bb      	ldr	r3, [r7, #24]
 8011db6:	881a      	ldrh	r2, [r3, #0]
 8011db8:	8afb      	ldrh	r3, [r7, #22]
 8011dba:	1ad3      	subs	r3, r2, r3
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	3b08      	subs	r3, #8
 8011dc0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011dc2:	8bfa      	ldrh	r2, [r7, #30]
 8011dc4:	8abb      	ldrh	r3, [r7, #20]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d906      	bls.n	8011dd8 <mem_trim+0xb0>
 8011dca:	4b55      	ldr	r3, [pc, #340]	; (8011f20 <mem_trim+0x1f8>)
 8011dcc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011dd0:	4956      	ldr	r1, [pc, #344]	; (8011f2c <mem_trim+0x204>)
 8011dd2:	4855      	ldr	r0, [pc, #340]	; (8011f28 <mem_trim+0x200>)
 8011dd4:	f00b f838 	bl	801ce48 <iprintf>
  if (newsize > size) {
 8011dd8:	8bfa      	ldrh	r2, [r7, #30]
 8011dda:	8abb      	ldrh	r3, [r7, #20]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d901      	bls.n	8011de4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011de0:	2300      	movs	r3, #0
 8011de2:	e095      	b.n	8011f10 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011de4:	8bfa      	ldrh	r2, [r7, #30]
 8011de6:	8abb      	ldrh	r3, [r7, #20]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d101      	bne.n	8011df0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	e08f      	b.n	8011f10 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011df0:	484f      	ldr	r0, [pc, #316]	; (8011f30 <mem_trim+0x208>)
 8011df2:	f00a fdbf 	bl	801c974 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	881b      	ldrh	r3, [r3, #0]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7ff fdb0 	bl	8011960 <ptr_to_mem>
 8011e00:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	791b      	ldrb	r3, [r3, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d13f      	bne.n	8011e8a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	881b      	ldrh	r3, [r3, #0]
 8011e0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011e12:	d106      	bne.n	8011e22 <mem_trim+0xfa>
 8011e14:	4b42      	ldr	r3, [pc, #264]	; (8011f20 <mem_trim+0x1f8>)
 8011e16:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011e1a:	4946      	ldr	r1, [pc, #280]	; (8011f34 <mem_trim+0x20c>)
 8011e1c:	4842      	ldr	r0, [pc, #264]	; (8011f28 <mem_trim+0x200>)
 8011e1e:	f00b f813 	bl	801ce48 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	881b      	ldrh	r3, [r3, #0]
 8011e26:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011e28:	8afa      	ldrh	r2, [r7, #22]
 8011e2a:	8bfb      	ldrh	r3, [r7, #30]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	3308      	adds	r3, #8
 8011e32:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011e34:	4b40      	ldr	r3, [pc, #256]	; (8011f38 <mem_trim+0x210>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	693a      	ldr	r2, [r7, #16]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d106      	bne.n	8011e4c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011e3e:	89fb      	ldrh	r3, [r7, #14]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7ff fd8d 	bl	8011960 <ptr_to_mem>
 8011e46:	4603      	mov	r3, r0
 8011e48:	4a3b      	ldr	r2, [pc, #236]	; (8011f38 <mem_trim+0x210>)
 8011e4a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011e4c:	89fb      	ldrh	r3, [r7, #14]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7ff fd86 	bl	8011960 <ptr_to_mem>
 8011e54:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	89ba      	ldrh	r2, [r7, #12]
 8011e60:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	8afa      	ldrh	r2, [r7, #22]
 8011e66:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	89fa      	ldrh	r2, [r7, #14]
 8011e6c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011e76:	d047      	beq.n	8011f08 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	881b      	ldrh	r3, [r3, #0]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff fd6f 	bl	8011960 <ptr_to_mem>
 8011e82:	4602      	mov	r2, r0
 8011e84:	89fb      	ldrh	r3, [r7, #14]
 8011e86:	8053      	strh	r3, [r2, #2]
 8011e88:	e03e      	b.n	8011f08 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011e8a:	8bfb      	ldrh	r3, [r7, #30]
 8011e8c:	f103 0214 	add.w	r2, r3, #20
 8011e90:	8abb      	ldrh	r3, [r7, #20]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d838      	bhi.n	8011f08 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011e96:	8afa      	ldrh	r2, [r7, #22]
 8011e98:	8bfb      	ldrh	r3, [r7, #30]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	3308      	adds	r3, #8
 8011ea0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011eaa:	d106      	bne.n	8011eba <mem_trim+0x192>
 8011eac:	4b1c      	ldr	r3, [pc, #112]	; (8011f20 <mem_trim+0x1f8>)
 8011eae:	f240 3216 	movw	r2, #790	; 0x316
 8011eb2:	4920      	ldr	r1, [pc, #128]	; (8011f34 <mem_trim+0x20c>)
 8011eb4:	481c      	ldr	r0, [pc, #112]	; (8011f28 <mem_trim+0x200>)
 8011eb6:	f00a ffc7 	bl	801ce48 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011eba:	89fb      	ldrh	r3, [r7, #14]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7ff fd4f 	bl	8011960 <ptr_to_mem>
 8011ec2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011ec4:	4b1c      	ldr	r3, [pc, #112]	; (8011f38 <mem_trim+0x210>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	693a      	ldr	r2, [r7, #16]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d202      	bcs.n	8011ed4 <mem_trim+0x1ac>
      lfree = mem2;
 8011ece:	4a1a      	ldr	r2, [pc, #104]	; (8011f38 <mem_trim+0x210>)
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011eda:	69bb      	ldr	r3, [r7, #24]
 8011edc:	881a      	ldrh	r2, [r3, #0]
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	8afa      	ldrh	r2, [r7, #22]
 8011ee6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011ee8:	69bb      	ldr	r3, [r7, #24]
 8011eea:	89fa      	ldrh	r2, [r7, #14]
 8011eec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	881b      	ldrh	r3, [r3, #0]
 8011ef2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ef6:	d007      	beq.n	8011f08 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7ff fd2f 	bl	8011960 <ptr_to_mem>
 8011f02:	4602      	mov	r2, r0
 8011f04:	89fb      	ldrh	r3, [r7, #14]
 8011f06:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011f08:	4809      	ldr	r0, [pc, #36]	; (8011f30 <mem_trim+0x208>)
 8011f0a:	f00a fd42 	bl	801c992 <sys_mutex_unlock>
  return rmem;
 8011f0e:	687b      	ldr	r3, [r7, #4]
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3720      	adds	r7, #32
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	20006b9c 	.word	0x20006b9c
 8011f1c:	20006ba0 	.word	0x20006ba0
 8011f20:	0801efa0 	.word	0x0801efa0
 8011f24:	0801f12c 	.word	0x0801f12c
 8011f28:	0801efe8 	.word	0x0801efe8
 8011f2c:	0801f144 	.word	0x0801f144
 8011f30:	20006ba4 	.word	0x20006ba4
 8011f34:	0801f164 	.word	0x0801f164
 8011f38:	20006ba8 	.word	0x20006ba8

08011f3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b088      	sub	sp, #32
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011f46:	88fb      	ldrh	r3, [r7, #6]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d101      	bne.n	8011f50 <mem_malloc+0x14>
    return NULL;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	e0e2      	b.n	8012116 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011f50:	88fb      	ldrh	r3, [r7, #6]
 8011f52:	3303      	adds	r3, #3
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	f023 0303 	bic.w	r3, r3, #3
 8011f5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011f5c:	8bbb      	ldrh	r3, [r7, #28]
 8011f5e:	2b0b      	cmp	r3, #11
 8011f60:	d801      	bhi.n	8011f66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011f62:	230c      	movs	r3, #12
 8011f64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011f66:	8bbb      	ldrh	r3, [r7, #28]
 8011f68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011f6c:	d803      	bhi.n	8011f76 <mem_malloc+0x3a>
 8011f6e:	8bba      	ldrh	r2, [r7, #28]
 8011f70:	88fb      	ldrh	r3, [r7, #6]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d201      	bcs.n	8011f7a <mem_malloc+0x3e>
    return NULL;
 8011f76:	2300      	movs	r3, #0
 8011f78:	e0cd      	b.n	8012116 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011f7a:	4869      	ldr	r0, [pc, #420]	; (8012120 <mem_malloc+0x1e4>)
 8011f7c:	f00a fcfa 	bl	801c974 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011f80:	4b68      	ldr	r3, [pc, #416]	; (8012124 <mem_malloc+0x1e8>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7ff fcfd 	bl	8011984 <mem_to_ptr>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	83fb      	strh	r3, [r7, #30]
 8011f8e:	e0b7      	b.n	8012100 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011f90:	8bfb      	ldrh	r3, [r7, #30]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7ff fce4 	bl	8011960 <ptr_to_mem>
 8011f98:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	791b      	ldrb	r3, [r3, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f040 80a7 	bne.w	80120f2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	881b      	ldrh	r3, [r3, #0]
 8011fa8:	461a      	mov	r2, r3
 8011faa:	8bfb      	ldrh	r3, [r7, #30]
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	f1a3 0208 	sub.w	r2, r3, #8
 8011fb2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	f0c0 809c 	bcc.w	80120f2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	8bfb      	ldrh	r3, [r7, #30]
 8011fc2:	1ad3      	subs	r3, r2, r3
 8011fc4:	f1a3 0208 	sub.w	r2, r3, #8
 8011fc8:	8bbb      	ldrh	r3, [r7, #28]
 8011fca:	3314      	adds	r3, #20
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d333      	bcc.n	8012038 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011fd0:	8bfa      	ldrh	r2, [r7, #30]
 8011fd2:	8bbb      	ldrh	r3, [r7, #28]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	3308      	adds	r3, #8
 8011fda:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011fdc:	8a7b      	ldrh	r3, [r7, #18]
 8011fde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011fe2:	d106      	bne.n	8011ff2 <mem_malloc+0xb6>
 8011fe4:	4b50      	ldr	r3, [pc, #320]	; (8012128 <mem_malloc+0x1ec>)
 8011fe6:	f240 3287 	movw	r2, #903	; 0x387
 8011fea:	4950      	ldr	r1, [pc, #320]	; (801212c <mem_malloc+0x1f0>)
 8011fec:	4850      	ldr	r0, [pc, #320]	; (8012130 <mem_malloc+0x1f4>)
 8011fee:	f00a ff2b 	bl	801ce48 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011ff2:	8a7b      	ldrh	r3, [r7, #18]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7ff fcb3 	bl	8011960 <ptr_to_mem>
 8011ffa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2200      	movs	r2, #0
 8012000:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	881a      	ldrh	r2, [r3, #0]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	8bfa      	ldrh	r2, [r7, #30]
 801200e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	8a7a      	ldrh	r2, [r7, #18]
 8012014:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	2201      	movs	r2, #1
 801201a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012024:	d00b      	beq.n	801203e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	4618      	mov	r0, r3
 801202c:	f7ff fc98 	bl	8011960 <ptr_to_mem>
 8012030:	4602      	mov	r2, r0
 8012032:	8a7b      	ldrh	r3, [r7, #18]
 8012034:	8053      	strh	r3, [r2, #2]
 8012036:	e002      	b.n	801203e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	2201      	movs	r2, #1
 801203c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801203e:	4b39      	ldr	r3, [pc, #228]	; (8012124 <mem_malloc+0x1e8>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	697a      	ldr	r2, [r7, #20]
 8012044:	429a      	cmp	r2, r3
 8012046:	d127      	bne.n	8012098 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012048:	4b36      	ldr	r3, [pc, #216]	; (8012124 <mem_malloc+0x1e8>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801204e:	e005      	b.n	801205c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	4618      	mov	r0, r3
 8012056:	f7ff fc83 	bl	8011960 <ptr_to_mem>
 801205a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	791b      	ldrb	r3, [r3, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d004      	beq.n	801206e <mem_malloc+0x132>
 8012064:	4b33      	ldr	r3, [pc, #204]	; (8012134 <mem_malloc+0x1f8>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	69ba      	ldr	r2, [r7, #24]
 801206a:	429a      	cmp	r2, r3
 801206c:	d1f0      	bne.n	8012050 <mem_malloc+0x114>
          }
          lfree = cur;
 801206e:	4a2d      	ldr	r2, [pc, #180]	; (8012124 <mem_malloc+0x1e8>)
 8012070:	69bb      	ldr	r3, [r7, #24]
 8012072:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012074:	4b2b      	ldr	r3, [pc, #172]	; (8012124 <mem_malloc+0x1e8>)
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	4b2e      	ldr	r3, [pc, #184]	; (8012134 <mem_malloc+0x1f8>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	429a      	cmp	r2, r3
 801207e:	d00b      	beq.n	8012098 <mem_malloc+0x15c>
 8012080:	4b28      	ldr	r3, [pc, #160]	; (8012124 <mem_malloc+0x1e8>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	791b      	ldrb	r3, [r3, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d006      	beq.n	8012098 <mem_malloc+0x15c>
 801208a:	4b27      	ldr	r3, [pc, #156]	; (8012128 <mem_malloc+0x1ec>)
 801208c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012090:	4929      	ldr	r1, [pc, #164]	; (8012138 <mem_malloc+0x1fc>)
 8012092:	4827      	ldr	r0, [pc, #156]	; (8012130 <mem_malloc+0x1f4>)
 8012094:	f00a fed8 	bl	801ce48 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012098:	4821      	ldr	r0, [pc, #132]	; (8012120 <mem_malloc+0x1e4>)
 801209a:	f00a fc7a 	bl	801c992 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801209e:	8bba      	ldrh	r2, [r7, #28]
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	4413      	add	r3, r2
 80120a4:	3308      	adds	r3, #8
 80120a6:	4a23      	ldr	r2, [pc, #140]	; (8012134 <mem_malloc+0x1f8>)
 80120a8:	6812      	ldr	r2, [r2, #0]
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d906      	bls.n	80120bc <mem_malloc+0x180>
 80120ae:	4b1e      	ldr	r3, [pc, #120]	; (8012128 <mem_malloc+0x1ec>)
 80120b0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80120b4:	4921      	ldr	r1, [pc, #132]	; (801213c <mem_malloc+0x200>)
 80120b6:	481e      	ldr	r0, [pc, #120]	; (8012130 <mem_malloc+0x1f4>)
 80120b8:	f00a fec6 	bl	801ce48 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	f003 0303 	and.w	r3, r3, #3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d006      	beq.n	80120d4 <mem_malloc+0x198>
 80120c6:	4b18      	ldr	r3, [pc, #96]	; (8012128 <mem_malloc+0x1ec>)
 80120c8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80120cc:	491c      	ldr	r1, [pc, #112]	; (8012140 <mem_malloc+0x204>)
 80120ce:	4818      	ldr	r0, [pc, #96]	; (8012130 <mem_malloc+0x1f4>)
 80120d0:	f00a feba 	bl	801ce48 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	f003 0303 	and.w	r3, r3, #3
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d006      	beq.n	80120ec <mem_malloc+0x1b0>
 80120de:	4b12      	ldr	r3, [pc, #72]	; (8012128 <mem_malloc+0x1ec>)
 80120e0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80120e4:	4917      	ldr	r1, [pc, #92]	; (8012144 <mem_malloc+0x208>)
 80120e6:	4812      	ldr	r0, [pc, #72]	; (8012130 <mem_malloc+0x1f4>)
 80120e8:	f00a feae 	bl	801ce48 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	3308      	adds	r3, #8
 80120f0:	e011      	b.n	8012116 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80120f2:	8bfb      	ldrh	r3, [r7, #30]
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7ff fc33 	bl	8011960 <ptr_to_mem>
 80120fa:	4603      	mov	r3, r0
 80120fc:	881b      	ldrh	r3, [r3, #0]
 80120fe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012100:	8bfa      	ldrh	r2, [r7, #30]
 8012102:	8bbb      	ldrh	r3, [r7, #28]
 8012104:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8012108:	429a      	cmp	r2, r3
 801210a:	f4ff af41 	bcc.w	8011f90 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801210e:	4804      	ldr	r0, [pc, #16]	; (8012120 <mem_malloc+0x1e4>)
 8012110:	f00a fc3f 	bl	801c992 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012114:	2300      	movs	r3, #0
}
 8012116:	4618      	mov	r0, r3
 8012118:	3720      	adds	r7, #32
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	20006ba4 	.word	0x20006ba4
 8012124:	20006ba8 	.word	0x20006ba8
 8012128:	0801efa0 	.word	0x0801efa0
 801212c:	0801f164 	.word	0x0801f164
 8012130:	0801efe8 	.word	0x0801efe8
 8012134:	20006ba0 	.word	0x20006ba0
 8012138:	0801f178 	.word	0x0801f178
 801213c:	0801f194 	.word	0x0801f194
 8012140:	0801f1c4 	.word	0x0801f1c4
 8012144:	0801f1f4 	.word	0x0801f1f4

08012148 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012148:	b480      	push	{r7}
 801214a:	b085      	sub	sp, #20
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	2200      	movs	r2, #0
 8012156:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	3303      	adds	r3, #3
 801215e:	f023 0303 	bic.w	r3, r3, #3
 8012162:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012164:	2300      	movs	r3, #0
 8012166:	60fb      	str	r3, [r7, #12]
 8012168:	e011      	b.n	801218e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	689b      	ldr	r3, [r3, #8]
 801216e:	681a      	ldr	r2, [r3, #0]
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	68ba      	ldr	r2, [r7, #8]
 801217a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	881b      	ldrh	r3, [r3, #0]
 8012180:	461a      	mov	r2, r3
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	4413      	add	r3, r2
 8012186:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	3301      	adds	r3, #1
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	885b      	ldrh	r3, [r3, #2]
 8012192:	461a      	mov	r2, r3
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	4293      	cmp	r3, r2
 8012198:	dbe7      	blt.n	801216a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801219a:	bf00      	nop
 801219c:	bf00      	nop
 801219e:	3714      	adds	r7, #20
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr

080121a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80121ae:	2300      	movs	r3, #0
 80121b0:	80fb      	strh	r3, [r7, #6]
 80121b2:	e009      	b.n	80121c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80121b4:	88fb      	ldrh	r3, [r7, #6]
 80121b6:	4a08      	ldr	r2, [pc, #32]	; (80121d8 <memp_init+0x30>)
 80121b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121bc:	4618      	mov	r0, r3
 80121be:	f7ff ffc3 	bl	8012148 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80121c2:	88fb      	ldrh	r3, [r7, #6]
 80121c4:	3301      	adds	r3, #1
 80121c6:	80fb      	strh	r3, [r7, #6]
 80121c8:	88fb      	ldrh	r3, [r7, #6]
 80121ca:	2b0c      	cmp	r3, #12
 80121cc:	d9f2      	bls.n	80121b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80121ce:	bf00      	nop
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	08021a08 	.word	0x08021a08

080121dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80121e4:	f00a fc08 	bl	801c9f8 <sys_arch_protect>
 80121e8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d015      	beq.n	8012224 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	68ba      	ldr	r2, [r7, #8]
 80121fe:	6812      	ldr	r2, [r2, #0]
 8012200:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	f003 0303 	and.w	r3, r3, #3
 8012208:	2b00      	cmp	r3, #0
 801220a:	d006      	beq.n	801221a <do_memp_malloc_pool+0x3e>
 801220c:	4b09      	ldr	r3, [pc, #36]	; (8012234 <do_memp_malloc_pool+0x58>)
 801220e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012212:	4909      	ldr	r1, [pc, #36]	; (8012238 <do_memp_malloc_pool+0x5c>)
 8012214:	4809      	ldr	r0, [pc, #36]	; (801223c <do_memp_malloc_pool+0x60>)
 8012216:	f00a fe17 	bl	801ce48 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f00a fbfa 	bl	801ca14 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	e003      	b.n	801222c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f00a fbf5 	bl	801ca14 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	0801f218 	.word	0x0801f218
 8012238:	0801f248 	.word	0x0801f248
 801223c:	0801f26c 	.word	0x0801f26c

08012240 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	4603      	mov	r3, r0
 8012248:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801224a:	79fb      	ldrb	r3, [r7, #7]
 801224c:	2b0c      	cmp	r3, #12
 801224e:	d908      	bls.n	8012262 <memp_malloc+0x22>
 8012250:	4b0a      	ldr	r3, [pc, #40]	; (801227c <memp_malloc+0x3c>)
 8012252:	f240 1257 	movw	r2, #343	; 0x157
 8012256:	490a      	ldr	r1, [pc, #40]	; (8012280 <memp_malloc+0x40>)
 8012258:	480a      	ldr	r0, [pc, #40]	; (8012284 <memp_malloc+0x44>)
 801225a:	f00a fdf5 	bl	801ce48 <iprintf>
 801225e:	2300      	movs	r3, #0
 8012260:	e008      	b.n	8012274 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012262:	79fb      	ldrb	r3, [r7, #7]
 8012264:	4a08      	ldr	r2, [pc, #32]	; (8012288 <memp_malloc+0x48>)
 8012266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801226a:	4618      	mov	r0, r3
 801226c:	f7ff ffb6 	bl	80121dc <do_memp_malloc_pool>
 8012270:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012272:	68fb      	ldr	r3, [r7, #12]
}
 8012274:	4618      	mov	r0, r3
 8012276:	3710      	adds	r7, #16
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	0801f218 	.word	0x0801f218
 8012280:	0801f2a8 	.word	0x0801f2a8
 8012284:	0801f26c 	.word	0x0801f26c
 8012288:	08021a08 	.word	0x08021a08

0801228c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	f003 0303 	and.w	r3, r3, #3
 801229c:	2b00      	cmp	r3, #0
 801229e:	d006      	beq.n	80122ae <do_memp_free_pool+0x22>
 80122a0:	4b0d      	ldr	r3, [pc, #52]	; (80122d8 <do_memp_free_pool+0x4c>)
 80122a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80122a6:	490d      	ldr	r1, [pc, #52]	; (80122dc <do_memp_free_pool+0x50>)
 80122a8:	480d      	ldr	r0, [pc, #52]	; (80122e0 <do_memp_free_pool+0x54>)
 80122aa:	f00a fdcd 	bl	801ce48 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80122b2:	f00a fba1 	bl	801c9f8 <sys_arch_protect>
 80122b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	689b      	ldr	r3, [r3, #8]
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	689b      	ldr	r3, [r3, #8]
 80122c6:	68fa      	ldr	r2, [r7, #12]
 80122c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80122ca:	68b8      	ldr	r0, [r7, #8]
 80122cc:	f00a fba2 	bl	801ca14 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80122d0:	bf00      	nop
 80122d2:	3710      	adds	r7, #16
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	0801f218 	.word	0x0801f218
 80122dc:	0801f2c8 	.word	0x0801f2c8
 80122e0:	0801f26c 	.word	0x0801f26c

080122e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4603      	mov	r3, r0
 80122ec:	6039      	str	r1, [r7, #0]
 80122ee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80122f0:	79fb      	ldrb	r3, [r7, #7]
 80122f2:	2b0c      	cmp	r3, #12
 80122f4:	d907      	bls.n	8012306 <memp_free+0x22>
 80122f6:	4b0c      	ldr	r3, [pc, #48]	; (8012328 <memp_free+0x44>)
 80122f8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80122fc:	490b      	ldr	r1, [pc, #44]	; (801232c <memp_free+0x48>)
 80122fe:	480c      	ldr	r0, [pc, #48]	; (8012330 <memp_free+0x4c>)
 8012300:	f00a fda2 	bl	801ce48 <iprintf>
 8012304:	e00c      	b.n	8012320 <memp_free+0x3c>

  if (mem == NULL) {
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d008      	beq.n	801231e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801230c:	79fb      	ldrb	r3, [r7, #7]
 801230e:	4a09      	ldr	r2, [pc, #36]	; (8012334 <memp_free+0x50>)
 8012310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012314:	6839      	ldr	r1, [r7, #0]
 8012316:	4618      	mov	r0, r3
 8012318:	f7ff ffb8 	bl	801228c <do_memp_free_pool>
 801231c:	e000      	b.n	8012320 <memp_free+0x3c>
    return;
 801231e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012320:	3708      	adds	r7, #8
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	0801f218 	.word	0x0801f218
 801232c:	0801f2e8 	.word	0x0801f2e8
 8012330:	0801f26c 	.word	0x0801f26c
 8012334:	08021a08 	.word	0x08021a08

08012338 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012338:	b480      	push	{r7}
 801233a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801233c:	bf00      	nop
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
	...

08012348 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b086      	sub	sp, #24
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d108      	bne.n	801236e <netif_add+0x26>
 801235c:	4b57      	ldr	r3, [pc, #348]	; (80124bc <netif_add+0x174>)
 801235e:	f240 1227 	movw	r2, #295	; 0x127
 8012362:	4957      	ldr	r1, [pc, #348]	; (80124c0 <netif_add+0x178>)
 8012364:	4857      	ldr	r0, [pc, #348]	; (80124c4 <netif_add+0x17c>)
 8012366:	f00a fd6f 	bl	801ce48 <iprintf>
 801236a:	2300      	movs	r3, #0
 801236c:	e0a2      	b.n	80124b4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	2b00      	cmp	r3, #0
 8012372:	d108      	bne.n	8012386 <netif_add+0x3e>
 8012374:	4b51      	ldr	r3, [pc, #324]	; (80124bc <netif_add+0x174>)
 8012376:	f44f 7294 	mov.w	r2, #296	; 0x128
 801237a:	4953      	ldr	r1, [pc, #332]	; (80124c8 <netif_add+0x180>)
 801237c:	4851      	ldr	r0, [pc, #324]	; (80124c4 <netif_add+0x17c>)
 801237e:	f00a fd63 	bl	801ce48 <iprintf>
 8012382:	2300      	movs	r3, #0
 8012384:	e096      	b.n	80124b4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d101      	bne.n	8012390 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801238c:	4b4f      	ldr	r3, [pc, #316]	; (80124cc <netif_add+0x184>)
 801238e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012396:	4b4d      	ldr	r3, [pc, #308]	; (80124cc <netif_add+0x184>)
 8012398:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d101      	bne.n	80123a4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80123a0:	4b4a      	ldr	r3, [pc, #296]	; (80124cc <netif_add+0x184>)
 80123a2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2200      	movs	r2, #0
 80123a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2200      	movs	r2, #0
 80123ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	2200      	movs	r2, #0
 80123b4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	4a45      	ldr	r2, [pc, #276]	; (80124d0 <netif_add+0x188>)
 80123ba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2200      	movs	r2, #0
 80123c0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2200      	movs	r2, #0
 80123c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2200      	movs	r2, #0
 80123ce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	6a3a      	ldr	r2, [r7, #32]
 80123d4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80123d6:	4b3f      	ldr	r3, [pc, #252]	; (80124d4 <netif_add+0x18c>)
 80123d8:	781a      	ldrb	r2, [r3, #0]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	68b9      	ldr	r1, [r7, #8]
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f000 f913 	bl	8012618 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	4798      	blx	r3
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d001      	beq.n	8012402 <netif_add+0xba>
    return NULL;
 80123fe:	2300      	movs	r3, #0
 8012400:	e058      	b.n	80124b4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012408:	2bff      	cmp	r3, #255	; 0xff
 801240a:	d103      	bne.n	8012414 <netif_add+0xcc>
        netif->num = 0;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	2200      	movs	r2, #0
 8012410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012418:	4b2f      	ldr	r3, [pc, #188]	; (80124d8 <netif_add+0x190>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	617b      	str	r3, [r7, #20]
 801241e:	e02b      	b.n	8012478 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012420:	697a      	ldr	r2, [r7, #20]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	429a      	cmp	r2, r3
 8012426:	d106      	bne.n	8012436 <netif_add+0xee>
 8012428:	4b24      	ldr	r3, [pc, #144]	; (80124bc <netif_add+0x174>)
 801242a:	f240 128b 	movw	r2, #395	; 0x18b
 801242e:	492b      	ldr	r1, [pc, #172]	; (80124dc <netif_add+0x194>)
 8012430:	4824      	ldr	r0, [pc, #144]	; (80124c4 <netif_add+0x17c>)
 8012432:	f00a fd09 	bl	801ce48 <iprintf>
        num_netifs++;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	3301      	adds	r3, #1
 801243a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	2bff      	cmp	r3, #255	; 0xff
 8012440:	dd06      	ble.n	8012450 <netif_add+0x108>
 8012442:	4b1e      	ldr	r3, [pc, #120]	; (80124bc <netif_add+0x174>)
 8012444:	f240 128d 	movw	r2, #397	; 0x18d
 8012448:	4925      	ldr	r1, [pc, #148]	; (80124e0 <netif_add+0x198>)
 801244a:	481e      	ldr	r0, [pc, #120]	; (80124c4 <netif_add+0x17c>)
 801244c:	f00a fcfc 	bl	801ce48 <iprintf>
        if (netif2->num == netif->num) {
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801245c:	429a      	cmp	r2, r3
 801245e:	d108      	bne.n	8012472 <netif_add+0x12a>
          netif->num++;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012466:	3301      	adds	r3, #1
 8012468:	b2da      	uxtb	r2, r3
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8012470:	e005      	b.n	801247e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	617b      	str	r3, [r7, #20]
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d1d0      	bne.n	8012420 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1be      	bne.n	8012402 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801248a:	2bfe      	cmp	r3, #254	; 0xfe
 801248c:	d103      	bne.n	8012496 <netif_add+0x14e>
    netif_num = 0;
 801248e:	4b11      	ldr	r3, [pc, #68]	; (80124d4 <netif_add+0x18c>)
 8012490:	2200      	movs	r2, #0
 8012492:	701a      	strb	r2, [r3, #0]
 8012494:	e006      	b.n	80124a4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801249c:	3301      	adds	r3, #1
 801249e:	b2da      	uxtb	r2, r3
 80124a0:	4b0c      	ldr	r3, [pc, #48]	; (80124d4 <netif_add+0x18c>)
 80124a2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80124a4:	4b0c      	ldr	r3, [pc, #48]	; (80124d8 <netif_add+0x190>)
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80124ac:	4a0a      	ldr	r2, [pc, #40]	; (80124d8 <netif_add+0x190>)
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80124b2:	68fb      	ldr	r3, [r7, #12]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3718      	adds	r7, #24
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	0801f304 	.word	0x0801f304
 80124c0:	0801f398 	.word	0x0801f398
 80124c4:	0801f354 	.word	0x0801f354
 80124c8:	0801f3b4 	.word	0x0801f3b4
 80124cc:	08021a7c 	.word	0x08021a7c
 80124d0:	0801282b 	.word	0x0801282b
 80124d4:	20006be0 	.word	0x20006be0
 80124d8:	2000df08 	.word	0x2000df08
 80124dc:	0801f3d8 	.word	0x0801f3d8
 80124e0:	0801f3ec 	.word	0x0801f3ec

080124e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80124ee:	6839      	ldr	r1, [r7, #0]
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f002 fd31 	bl	8014f58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80124f6:	6839      	ldr	r1, [r7, #0]
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f007 fdc9 	bl	801a090 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80124fe:	bf00      	nop
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
	...

08012508 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	60b9      	str	r1, [r7, #8]
 8012512:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <netif_do_set_ipaddr+0x20>
 801251a:	4b1d      	ldr	r3, [pc, #116]	; (8012590 <netif_do_set_ipaddr+0x88>)
 801251c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012520:	491c      	ldr	r1, [pc, #112]	; (8012594 <netif_do_set_ipaddr+0x8c>)
 8012522:	481d      	ldr	r0, [pc, #116]	; (8012598 <netif_do_set_ipaddr+0x90>)
 8012524:	f00a fc90 	bl	801ce48 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d106      	bne.n	801253c <netif_do_set_ipaddr+0x34>
 801252e:	4b18      	ldr	r3, [pc, #96]	; (8012590 <netif_do_set_ipaddr+0x88>)
 8012530:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012534:	4917      	ldr	r1, [pc, #92]	; (8012594 <netif_do_set_ipaddr+0x8c>)
 8012536:	4818      	ldr	r0, [pc, #96]	; (8012598 <netif_do_set_ipaddr+0x90>)
 8012538:	f00a fc86 	bl	801ce48 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	3304      	adds	r3, #4
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	429a      	cmp	r2, r3
 8012548:	d01c      	beq.n	8012584 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	3304      	adds	r3, #4
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801255a:	f107 0314 	add.w	r3, r7, #20
 801255e:	4619      	mov	r1, r3
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff ffbf 	bl	80124e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <netif_do_set_ipaddr+0x6a>
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	e000      	b.n	8012574 <netif_do_set_ipaddr+0x6c>
 8012572:	2300      	movs	r3, #0
 8012574:	68fa      	ldr	r2, [r7, #12]
 8012576:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012578:	2101      	movs	r1, #1
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f000 f8d2 	bl	8012724 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012580:	2301      	movs	r3, #1
 8012582:	e000      	b.n	8012586 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3718      	adds	r7, #24
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	0801f304 	.word	0x0801f304
 8012594:	0801f41c 	.word	0x0801f41c
 8012598:	0801f354 	.word	0x0801f354

0801259c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	3308      	adds	r3, #8
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d00a      	beq.n	80125cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d002      	beq.n	80125c2 <netif_do_set_netmask+0x26>
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	e000      	b.n	80125c4 <netif_do_set_netmask+0x28>
 80125c2:	2300      	movs	r3, #0
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80125c8:	2301      	movs	r3, #1
 80125ca:	e000      	b.n	80125ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80125cc:	2300      	movs	r3, #0
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3714      	adds	r7, #20
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr

080125da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80125da:	b480      	push	{r7}
 80125dc:	b085      	sub	sp, #20
 80125de:	af00      	add	r7, sp, #0
 80125e0:	60f8      	str	r0, [r7, #12]
 80125e2:	60b9      	str	r1, [r7, #8]
 80125e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	330c      	adds	r3, #12
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d00a      	beq.n	801260a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d002      	beq.n	8012600 <netif_do_set_gw+0x26>
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	e000      	b.n	8012602 <netif_do_set_gw+0x28>
 8012600:	2300      	movs	r3, #0
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012606:	2301      	movs	r3, #1
 8012608:	e000      	b.n	801260c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801260a:	2300      	movs	r3, #0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b088      	sub	sp, #32
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012626:	2300      	movs	r3, #0
 8012628:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801262a:	2300      	movs	r3, #0
 801262c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d101      	bne.n	8012638 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012634:	4b1c      	ldr	r3, [pc, #112]	; (80126a8 <netif_set_addr+0x90>)
 8012636:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801263e:	4b1a      	ldr	r3, [pc, #104]	; (80126a8 <netif_set_addr+0x90>)
 8012640:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012648:	4b17      	ldr	r3, [pc, #92]	; (80126a8 <netif_set_addr+0x90>)
 801264a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d003      	beq.n	801265a <netif_set_addr+0x42>
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <netif_set_addr+0x46>
 801265a:	2301      	movs	r3, #1
 801265c:	e000      	b.n	8012660 <netif_set_addr+0x48>
 801265e:	2300      	movs	r3, #0
 8012660:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d006      	beq.n	8012676 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012668:	f107 0310 	add.w	r3, r7, #16
 801266c:	461a      	mov	r2, r3
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f7ff ff49 	bl	8012508 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012676:	69fa      	ldr	r2, [r7, #28]
 8012678:	6879      	ldr	r1, [r7, #4]
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f7ff ff8e 	bl	801259c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012680:	69ba      	ldr	r2, [r7, #24]
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f7ff ffa8 	bl	80125da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d106      	bne.n	801269e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012690:	f107 0310 	add.w	r3, r7, #16
 8012694:	461a      	mov	r2, r3
 8012696:	68b9      	ldr	r1, [r7, #8]
 8012698:	68f8      	ldr	r0, [r7, #12]
 801269a:	f7ff ff35 	bl	8012508 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801269e:	bf00      	nop
 80126a0:	3720      	adds	r7, #32
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	08021a7c 	.word	0x08021a7c

080126ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b083      	sub	sp, #12
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80126b4:	4a04      	ldr	r2, [pc, #16]	; (80126c8 <netif_set_default+0x1c>)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80126ba:	bf00      	nop
 80126bc:	370c      	adds	r7, #12
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	2000df0c 	.word	0x2000df0c

080126cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d107      	bne.n	80126ea <netif_set_up+0x1e>
 80126da:	4b0f      	ldr	r3, [pc, #60]	; (8012718 <netif_set_up+0x4c>)
 80126dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80126e0:	490e      	ldr	r1, [pc, #56]	; (801271c <netif_set_up+0x50>)
 80126e2:	480f      	ldr	r0, [pc, #60]	; (8012720 <netif_set_up+0x54>)
 80126e4:	f00a fbb0 	bl	801ce48 <iprintf>
 80126e8:	e013      	b.n	8012712 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126f0:	f003 0301 	and.w	r3, r3, #1
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d10c      	bne.n	8012712 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126fe:	f043 0301 	orr.w	r3, r3, #1
 8012702:	b2da      	uxtb	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801270a:	2103      	movs	r1, #3
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 f809 	bl	8012724 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	0801f304 	.word	0x0801f304
 801271c:	0801f48c 	.word	0x0801f48c
 8012720:	0801f354 	.word	0x0801f354

08012724 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	460b      	mov	r3, r1
 801272e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d106      	bne.n	8012744 <netif_issue_reports+0x20>
 8012736:	4b18      	ldr	r3, [pc, #96]	; (8012798 <netif_issue_reports+0x74>)
 8012738:	f240 326d 	movw	r2, #877	; 0x36d
 801273c:	4917      	ldr	r1, [pc, #92]	; (801279c <netif_issue_reports+0x78>)
 801273e:	4818      	ldr	r0, [pc, #96]	; (80127a0 <netif_issue_reports+0x7c>)
 8012740:	f00a fb82 	bl	801ce48 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801274a:	f003 0304 	and.w	r3, r3, #4
 801274e:	2b00      	cmp	r3, #0
 8012750:	d01e      	beq.n	8012790 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012758:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801275c:	2b00      	cmp	r3, #0
 801275e:	d017      	beq.n	8012790 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012760:	78fb      	ldrb	r3, [r7, #3]
 8012762:	f003 0301 	and.w	r3, r3, #1
 8012766:	2b00      	cmp	r3, #0
 8012768:	d013      	beq.n	8012792 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	3304      	adds	r3, #4
 801276e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012770:	2b00      	cmp	r3, #0
 8012772:	d00e      	beq.n	8012792 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801277a:	f003 0308 	and.w	r3, r3, #8
 801277e:	2b00      	cmp	r3, #0
 8012780:	d007      	beq.n	8012792 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	3304      	adds	r3, #4
 8012786:	4619      	mov	r1, r3
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f008 fbeb 	bl	801af64 <etharp_request>
 801278e:	e000      	b.n	8012792 <netif_issue_reports+0x6e>
    return;
 8012790:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	0801f304 	.word	0x0801f304
 801279c:	0801f4a8 	.word	0x0801f4a8
 80127a0:	0801f354 	.word	0x0801f354

080127a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d107      	bne.n	80127c2 <netif_set_down+0x1e>
 80127b2:	4b12      	ldr	r3, [pc, #72]	; (80127fc <netif_set_down+0x58>)
 80127b4:	f240 329b 	movw	r2, #923	; 0x39b
 80127b8:	4911      	ldr	r1, [pc, #68]	; (8012800 <netif_set_down+0x5c>)
 80127ba:	4812      	ldr	r0, [pc, #72]	; (8012804 <netif_set_down+0x60>)
 80127bc:	f00a fb44 	bl	801ce48 <iprintf>
 80127c0:	e019      	b.n	80127f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127c8:	f003 0301 	and.w	r3, r3, #1
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d012      	beq.n	80127f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127d6:	f023 0301 	bic.w	r3, r3, #1
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127e8:	f003 0308 	and.w	r3, r3, #8
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f007 ff75 	bl	801a6e0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	0801f304 	.word	0x0801f304
 8012800:	0801f4cc 	.word	0x0801f4cc
 8012804:	0801f354 	.word	0x0801f354

08012808 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	683a      	ldr	r2, [r7, #0]
 801281c:	61da      	str	r2, [r3, #28]
  }
}
 801281e:	bf00      	nop
 8012820:	370c      	adds	r7, #12
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr

0801282a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801282a:	b480      	push	{r7}
 801282c:	b085      	sub	sp, #20
 801282e:	af00      	add	r7, sp, #0
 8012830:	60f8      	str	r0, [r7, #12]
 8012832:	60b9      	str	r1, [r7, #8]
 8012834:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012836:	f06f 030b 	mvn.w	r3, #11
}
 801283a:	4618      	mov	r0, r3
 801283c:	3714      	adds	r7, #20
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
	...

08012848 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012848:	b480      	push	{r7}
 801284a:	b085      	sub	sp, #20
 801284c:	af00      	add	r7, sp, #0
 801284e:	4603      	mov	r3, r0
 8012850:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012852:	79fb      	ldrb	r3, [r7, #7]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d013      	beq.n	8012880 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012858:	4b0d      	ldr	r3, [pc, #52]	; (8012890 <netif_get_by_index+0x48>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	60fb      	str	r3, [r7, #12]
 801285e:	e00c      	b.n	801287a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012866:	3301      	adds	r3, #1
 8012868:	b2db      	uxtb	r3, r3
 801286a:	79fa      	ldrb	r2, [r7, #7]
 801286c:	429a      	cmp	r2, r3
 801286e:	d101      	bne.n	8012874 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	e006      	b.n	8012882 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	60fb      	str	r3, [r7, #12]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1ef      	bne.n	8012860 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3714      	adds	r7, #20
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop
 8012890:	2000df08 	.word	0x2000df08

08012894 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801289a:	f00a f8ad 	bl	801c9f8 <sys_arch_protect>
 801289e:	6038      	str	r0, [r7, #0]
 80128a0:	4b0d      	ldr	r3, [pc, #52]	; (80128d8 <pbuf_free_ooseq+0x44>)
 80128a2:	2200      	movs	r2, #0
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	6838      	ldr	r0, [r7, #0]
 80128a8:	f00a f8b4 	bl	801ca14 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80128ac:	4b0b      	ldr	r3, [pc, #44]	; (80128dc <pbuf_free_ooseq+0x48>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	607b      	str	r3, [r7, #4]
 80128b2:	e00a      	b.n	80128ca <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d003      	beq.n	80128c4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f002 fb89 	bl	8014fd4 <tcp_free_ooseq>
      return;
 80128c2:	e005      	b.n	80128d0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	607b      	str	r3, [r7, #4]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1f1      	bne.n	80128b4 <pbuf_free_ooseq+0x20>
    }
  }
}
 80128d0:	3708      	adds	r7, #8
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	2000df10 	.word	0x2000df10
 80128dc:	2000df18 	.word	0x2000df18

080128e0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80128e8:	f7ff ffd4 	bl	8012894 <pbuf_free_ooseq>
}
 80128ec:	bf00      	nop
 80128ee:	3708      	adds	r7, #8
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80128fa:	f00a f87d 	bl	801c9f8 <sys_arch_protect>
 80128fe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012900:	4b0f      	ldr	r3, [pc, #60]	; (8012940 <pbuf_pool_is_empty+0x4c>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012906:	4b0e      	ldr	r3, [pc, #56]	; (8012940 <pbuf_pool_is_empty+0x4c>)
 8012908:	2201      	movs	r2, #1
 801290a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f00a f881 	bl	801ca14 <sys_arch_unprotect>

  if (!queued) {
 8012912:	78fb      	ldrb	r3, [r7, #3]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d10f      	bne.n	8012938 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012918:	2100      	movs	r1, #0
 801291a:	480a      	ldr	r0, [pc, #40]	; (8012944 <pbuf_pool_is_empty+0x50>)
 801291c:	f7fe ff3a 	bl	8011794 <tcpip_try_callback>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d008      	beq.n	8012938 <pbuf_pool_is_empty+0x44>
 8012926:	f00a f867 	bl	801c9f8 <sys_arch_protect>
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	4b04      	ldr	r3, [pc, #16]	; (8012940 <pbuf_pool_is_empty+0x4c>)
 801292e:	2200      	movs	r2, #0
 8012930:	701a      	strb	r2, [r3, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f00a f86e 	bl	801ca14 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012938:	bf00      	nop
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	2000df10 	.word	0x2000df10
 8012944:	080128e1 	.word	0x080128e1

08012948 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	4611      	mov	r1, r2
 8012954:	461a      	mov	r2, r3
 8012956:	460b      	mov	r3, r1
 8012958:	80fb      	strh	r3, [r7, #6]
 801295a:	4613      	mov	r3, r2
 801295c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2200      	movs	r2, #0
 8012962:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	68ba      	ldr	r2, [r7, #8]
 8012968:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	88fa      	ldrh	r2, [r7, #6]
 801296e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	88ba      	ldrh	r2, [r7, #4]
 8012974:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012976:	8b3b      	ldrh	r3, [r7, #24]
 8012978:	b2da      	uxtb	r2, r3
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	7f3a      	ldrb	r2, [r7, #28]
 8012982:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2201      	movs	r2, #1
 8012988:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2200      	movs	r2, #0
 801298e:	73da      	strb	r2, [r3, #15]
}
 8012990:	bf00      	nop
 8012992:	3714      	adds	r7, #20
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b08c      	sub	sp, #48	; 0x30
 80129a0:	af02      	add	r7, sp, #8
 80129a2:	4603      	mov	r3, r0
 80129a4:	71fb      	strb	r3, [r7, #7]
 80129a6:	460b      	mov	r3, r1
 80129a8:	80bb      	strh	r3, [r7, #4]
 80129aa:	4613      	mov	r3, r2
 80129ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80129ae:	79fb      	ldrb	r3, [r7, #7]
 80129b0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80129b2:	887b      	ldrh	r3, [r7, #2]
 80129b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80129b8:	d07f      	beq.n	8012aba <pbuf_alloc+0x11e>
 80129ba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80129be:	f300 80c8 	bgt.w	8012b52 <pbuf_alloc+0x1b6>
 80129c2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80129c6:	d010      	beq.n	80129ea <pbuf_alloc+0x4e>
 80129c8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80129cc:	f300 80c1 	bgt.w	8012b52 <pbuf_alloc+0x1b6>
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d002      	beq.n	80129da <pbuf_alloc+0x3e>
 80129d4:	2b41      	cmp	r3, #65	; 0x41
 80129d6:	f040 80bc 	bne.w	8012b52 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80129da:	887a      	ldrh	r2, [r7, #2]
 80129dc:	88bb      	ldrh	r3, [r7, #4]
 80129de:	4619      	mov	r1, r3
 80129e0:	2000      	movs	r0, #0
 80129e2:	f000 f8d1 	bl	8012b88 <pbuf_alloc_reference>
 80129e6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80129e8:	e0bd      	b.n	8012b66 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80129ea:	2300      	movs	r3, #0
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80129f2:	88bb      	ldrh	r3, [r7, #4]
 80129f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80129f6:	200c      	movs	r0, #12
 80129f8:	f7ff fc22 	bl	8012240 <memp_malloc>
 80129fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d109      	bne.n	8012a18 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012a04:	f7ff ff76 	bl	80128f4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d002      	beq.n	8012a14 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a10:	f000 faa8 	bl	8012f64 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012a14:	2300      	movs	r3, #0
 8012a16:	e0a7      	b.n	8012b68 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a1a:	3303      	adds	r3, #3
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	f023 0303 	bic.w	r3, r3, #3
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	8b7a      	ldrh	r2, [r7, #26]
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	bf28      	it	cs
 8012a30:	4613      	movcs	r3, r2
 8012a32:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012a34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a36:	3310      	adds	r3, #16
 8012a38:	693a      	ldr	r2, [r7, #16]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	3303      	adds	r3, #3
 8012a3e:	f023 0303 	bic.w	r3, r3, #3
 8012a42:	4618      	mov	r0, r3
 8012a44:	89f9      	ldrh	r1, [r7, #14]
 8012a46:	8b7a      	ldrh	r2, [r7, #26]
 8012a48:	2300      	movs	r3, #0
 8012a4a:	9301      	str	r3, [sp, #4]
 8012a4c:	887b      	ldrh	r3, [r7, #2]
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	460b      	mov	r3, r1
 8012a52:	4601      	mov	r1, r0
 8012a54:	6938      	ldr	r0, [r7, #16]
 8012a56:	f7ff ff77 	bl	8012948 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	f003 0303 	and.w	r3, r3, #3
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d006      	beq.n	8012a74 <pbuf_alloc+0xd8>
 8012a66:	4b42      	ldr	r3, [pc, #264]	; (8012b70 <pbuf_alloc+0x1d4>)
 8012a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a6c:	4941      	ldr	r1, [pc, #260]	; (8012b74 <pbuf_alloc+0x1d8>)
 8012a6e:	4842      	ldr	r0, [pc, #264]	; (8012b78 <pbuf_alloc+0x1dc>)
 8012a70:	f00a f9ea 	bl	801ce48 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a76:	3303      	adds	r3, #3
 8012a78:	f023 0303 	bic.w	r3, r3, #3
 8012a7c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012a80:	d106      	bne.n	8012a90 <pbuf_alloc+0xf4>
 8012a82:	4b3b      	ldr	r3, [pc, #236]	; (8012b70 <pbuf_alloc+0x1d4>)
 8012a84:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012a88:	493c      	ldr	r1, [pc, #240]	; (8012b7c <pbuf_alloc+0x1e0>)
 8012a8a:	483b      	ldr	r0, [pc, #236]	; (8012b78 <pbuf_alloc+0x1dc>)
 8012a8c:	f00a f9dc 	bl	801ce48 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d102      	bne.n	8012a9c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	627b      	str	r3, [r7, #36]	; 0x24
 8012a9a:	e002      	b.n	8012aa2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	693a      	ldr	r2, [r7, #16]
 8012aa0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012aa6:	8b7a      	ldrh	r2, [r7, #26]
 8012aa8:	89fb      	ldrh	r3, [r7, #14]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012ab2:	8b7b      	ldrh	r3, [r7, #26]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d19e      	bne.n	80129f6 <pbuf_alloc+0x5a>
      break;
 8012ab8:	e055      	b.n	8012b66 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012abc:	3303      	adds	r3, #3
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	f023 0303 	bic.w	r3, r3, #3
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	88bb      	ldrh	r3, [r7, #4]
 8012ac8:	3303      	adds	r3, #3
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	f023 0303 	bic.w	r3, r3, #3
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	4413      	add	r3, r2
 8012ad4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012ad6:	8b3b      	ldrh	r3, [r7, #24]
 8012ad8:	3310      	adds	r3, #16
 8012ada:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012adc:	8b3a      	ldrh	r2, [r7, #24]
 8012ade:	88bb      	ldrh	r3, [r7, #4]
 8012ae0:	3303      	adds	r3, #3
 8012ae2:	f023 0303 	bic.w	r3, r3, #3
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d306      	bcc.n	8012af8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012aea:	8afa      	ldrh	r2, [r7, #22]
 8012aec:	88bb      	ldrh	r3, [r7, #4]
 8012aee:	3303      	adds	r3, #3
 8012af0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d201      	bcs.n	8012afc <pbuf_alloc+0x160>
        return NULL;
 8012af8:	2300      	movs	r3, #0
 8012afa:	e035      	b.n	8012b68 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012afc:	8afb      	ldrh	r3, [r7, #22]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7ff fa1c 	bl	8011f3c <mem_malloc>
 8012b04:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d101      	bne.n	8012b10 <pbuf_alloc+0x174>
        return NULL;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e02b      	b.n	8012b68 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b12:	3310      	adds	r3, #16
 8012b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b16:	4413      	add	r3, r2
 8012b18:	3303      	adds	r3, #3
 8012b1a:	f023 0303 	bic.w	r3, r3, #3
 8012b1e:	4618      	mov	r0, r3
 8012b20:	88b9      	ldrh	r1, [r7, #4]
 8012b22:	88ba      	ldrh	r2, [r7, #4]
 8012b24:	2300      	movs	r3, #0
 8012b26:	9301      	str	r3, [sp, #4]
 8012b28:	887b      	ldrh	r3, [r7, #2]
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	4601      	mov	r1, r0
 8012b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b32:	f7ff ff09 	bl	8012948 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	f003 0303 	and.w	r3, r3, #3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d010      	beq.n	8012b64 <pbuf_alloc+0x1c8>
 8012b42:	4b0b      	ldr	r3, [pc, #44]	; (8012b70 <pbuf_alloc+0x1d4>)
 8012b44:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012b48:	490d      	ldr	r1, [pc, #52]	; (8012b80 <pbuf_alloc+0x1e4>)
 8012b4a:	480b      	ldr	r0, [pc, #44]	; (8012b78 <pbuf_alloc+0x1dc>)
 8012b4c:	f00a f97c 	bl	801ce48 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012b50:	e008      	b.n	8012b64 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012b52:	4b07      	ldr	r3, [pc, #28]	; (8012b70 <pbuf_alloc+0x1d4>)
 8012b54:	f240 1227 	movw	r2, #295	; 0x127
 8012b58:	490a      	ldr	r1, [pc, #40]	; (8012b84 <pbuf_alloc+0x1e8>)
 8012b5a:	4807      	ldr	r0, [pc, #28]	; (8012b78 <pbuf_alloc+0x1dc>)
 8012b5c:	f00a f974 	bl	801ce48 <iprintf>
      return NULL;
 8012b60:	2300      	movs	r3, #0
 8012b62:	e001      	b.n	8012b68 <pbuf_alloc+0x1cc>
      break;
 8012b64:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3728      	adds	r7, #40	; 0x28
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	0801f534 	.word	0x0801f534
 8012b74:	0801f564 	.word	0x0801f564
 8012b78:	0801f594 	.word	0x0801f594
 8012b7c:	0801f5bc 	.word	0x0801f5bc
 8012b80:	0801f5f0 	.word	0x0801f5f0
 8012b84:	0801f61c 	.word	0x0801f61c

08012b88 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b086      	sub	sp, #24
 8012b8c:	af02      	add	r7, sp, #8
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	460b      	mov	r3, r1
 8012b92:	807b      	strh	r3, [r7, #2]
 8012b94:	4613      	mov	r3, r2
 8012b96:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012b98:	883b      	ldrh	r3, [r7, #0]
 8012b9a:	2b41      	cmp	r3, #65	; 0x41
 8012b9c:	d009      	beq.n	8012bb2 <pbuf_alloc_reference+0x2a>
 8012b9e:	883b      	ldrh	r3, [r7, #0]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d006      	beq.n	8012bb2 <pbuf_alloc_reference+0x2a>
 8012ba4:	4b0f      	ldr	r3, [pc, #60]	; (8012be4 <pbuf_alloc_reference+0x5c>)
 8012ba6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012baa:	490f      	ldr	r1, [pc, #60]	; (8012be8 <pbuf_alloc_reference+0x60>)
 8012bac:	480f      	ldr	r0, [pc, #60]	; (8012bec <pbuf_alloc_reference+0x64>)
 8012bae:	f00a f94b 	bl	801ce48 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012bb2:	200b      	movs	r0, #11
 8012bb4:	f7ff fb44 	bl	8012240 <memp_malloc>
 8012bb8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	e00b      	b.n	8012bdc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012bc4:	8879      	ldrh	r1, [r7, #2]
 8012bc6:	887a      	ldrh	r2, [r7, #2]
 8012bc8:	2300      	movs	r3, #0
 8012bca:	9301      	str	r3, [sp, #4]
 8012bcc:	883b      	ldrh	r3, [r7, #0]
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	6879      	ldr	r1, [r7, #4]
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	f7ff feb7 	bl	8012948 <pbuf_init_alloced_pbuf>
  return p;
 8012bda:	68fb      	ldr	r3, [r7, #12]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	0801f534 	.word	0x0801f534
 8012be8:	0801f638 	.word	0x0801f638
 8012bec:	0801f594 	.word	0x0801f594

08012bf0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b088      	sub	sp, #32
 8012bf4:	af02      	add	r7, sp, #8
 8012bf6:	607b      	str	r3, [r7, #4]
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	73fb      	strb	r3, [r7, #15]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	81bb      	strh	r3, [r7, #12]
 8012c00:	4613      	mov	r3, r2
 8012c02:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012c04:	7bfb      	ldrb	r3, [r7, #15]
 8012c06:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012c08:	8a7b      	ldrh	r3, [r7, #18]
 8012c0a:	3303      	adds	r3, #3
 8012c0c:	f023 0203 	bic.w	r2, r3, #3
 8012c10:	89bb      	ldrh	r3, [r7, #12]
 8012c12:	441a      	add	r2, r3
 8012c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d901      	bls.n	8012c1e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	e018      	b.n	8012c50 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012c1e:	6a3b      	ldr	r3, [r7, #32]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d007      	beq.n	8012c34 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012c24:	8a7b      	ldrh	r3, [r7, #18]
 8012c26:	3303      	adds	r3, #3
 8012c28:	f023 0303 	bic.w	r3, r3, #3
 8012c2c:	6a3a      	ldr	r2, [r7, #32]
 8012c2e:	4413      	add	r3, r2
 8012c30:	617b      	str	r3, [r7, #20]
 8012c32:	e001      	b.n	8012c38 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012c34:	2300      	movs	r3, #0
 8012c36:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	89b9      	ldrh	r1, [r7, #12]
 8012c3c:	89ba      	ldrh	r2, [r7, #12]
 8012c3e:	2302      	movs	r3, #2
 8012c40:	9301      	str	r3, [sp, #4]
 8012c42:	897b      	ldrh	r3, [r7, #10]
 8012c44:	9300      	str	r3, [sp, #0]
 8012c46:	460b      	mov	r3, r1
 8012c48:	6979      	ldr	r1, [r7, #20]
 8012c4a:	f7ff fe7d 	bl	8012948 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012c4e:	687b      	ldr	r3, [r7, #4]
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3718      	adds	r7, #24
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	460b      	mov	r3, r1
 8012c62:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d106      	bne.n	8012c78 <pbuf_realloc+0x20>
 8012c6a:	4b3a      	ldr	r3, [pc, #232]	; (8012d54 <pbuf_realloc+0xfc>)
 8012c6c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012c70:	4939      	ldr	r1, [pc, #228]	; (8012d58 <pbuf_realloc+0x100>)
 8012c72:	483a      	ldr	r0, [pc, #232]	; (8012d5c <pbuf_realloc+0x104>)
 8012c74:	f00a f8e8 	bl	801ce48 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	891b      	ldrh	r3, [r3, #8]
 8012c7c:	887a      	ldrh	r2, [r7, #2]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d263      	bcs.n	8012d4a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	891a      	ldrh	r2, [r3, #8]
 8012c86:	887b      	ldrh	r3, [r7, #2]
 8012c88:	1ad3      	subs	r3, r2, r3
 8012c8a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012c8c:	887b      	ldrh	r3, [r7, #2]
 8012c8e:	817b      	strh	r3, [r7, #10]
  q = p;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012c94:	e018      	b.n	8012cc8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	895b      	ldrh	r3, [r3, #10]
 8012c9a:	897a      	ldrh	r2, [r7, #10]
 8012c9c:	1ad3      	subs	r3, r2, r3
 8012c9e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	891a      	ldrh	r2, [r3, #8]
 8012ca4:	893b      	ldrh	r3, [r7, #8]
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	b29a      	uxth	r2, r3
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d106      	bne.n	8012cc8 <pbuf_realloc+0x70>
 8012cba:	4b26      	ldr	r3, [pc, #152]	; (8012d54 <pbuf_realloc+0xfc>)
 8012cbc:	f240 12af 	movw	r2, #431	; 0x1af
 8012cc0:	4927      	ldr	r1, [pc, #156]	; (8012d60 <pbuf_realloc+0x108>)
 8012cc2:	4826      	ldr	r0, [pc, #152]	; (8012d5c <pbuf_realloc+0x104>)
 8012cc4:	f00a f8c0 	bl	801ce48 <iprintf>
  while (rem_len > q->len) {
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	895b      	ldrh	r3, [r3, #10]
 8012ccc:	897a      	ldrh	r2, [r7, #10]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d8e1      	bhi.n	8012c96 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	7b1b      	ldrb	r3, [r3, #12]
 8012cd6:	f003 030f 	and.w	r3, r3, #15
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d121      	bne.n	8012d22 <pbuf_realloc+0xca>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	895b      	ldrh	r3, [r3, #10]
 8012ce2:	897a      	ldrh	r2, [r7, #10]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d01c      	beq.n	8012d22 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	7b5b      	ldrb	r3, [r3, #13]
 8012cec:	f003 0302 	and.w	r3, r3, #2
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d116      	bne.n	8012d22 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	685a      	ldr	r2, [r3, #4]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	1ad3      	subs	r3, r2, r3
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	897b      	ldrh	r3, [r7, #10]
 8012d00:	4413      	add	r3, r2
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	4619      	mov	r1, r3
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f7ff f80e 	bl	8011d28 <mem_trim>
 8012d0c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d106      	bne.n	8012d22 <pbuf_realloc+0xca>
 8012d14:	4b0f      	ldr	r3, [pc, #60]	; (8012d54 <pbuf_realloc+0xfc>)
 8012d16:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012d1a:	4912      	ldr	r1, [pc, #72]	; (8012d64 <pbuf_realloc+0x10c>)
 8012d1c:	480f      	ldr	r0, [pc, #60]	; (8012d5c <pbuf_realloc+0x104>)
 8012d1e:	f00a f893 	bl	801ce48 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	897a      	ldrh	r2, [r7, #10]
 8012d26:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	895a      	ldrh	r2, [r3, #10]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d004      	beq.n	8012d42 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f000 f911 	bl	8012f64 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2200      	movs	r2, #0
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	e000      	b.n	8012d4c <pbuf_realloc+0xf4>
    return;
 8012d4a:	bf00      	nop

}
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	0801f534 	.word	0x0801f534
 8012d58:	0801f64c 	.word	0x0801f64c
 8012d5c:	0801f594 	.word	0x0801f594
 8012d60:	0801f664 	.word	0x0801f664
 8012d64:	0801f67c 	.word	0x0801f67c

08012d68 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b086      	sub	sp, #24
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	4613      	mov	r3, r2
 8012d74:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d106      	bne.n	8012d8a <pbuf_add_header_impl+0x22>
 8012d7c:	4b2b      	ldr	r3, [pc, #172]	; (8012e2c <pbuf_add_header_impl+0xc4>)
 8012d7e:	f240 12df 	movw	r2, #479	; 0x1df
 8012d82:	492b      	ldr	r1, [pc, #172]	; (8012e30 <pbuf_add_header_impl+0xc8>)
 8012d84:	482b      	ldr	r0, [pc, #172]	; (8012e34 <pbuf_add_header_impl+0xcc>)
 8012d86:	f00a f85f 	bl	801ce48 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d003      	beq.n	8012d98 <pbuf_add_header_impl+0x30>
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d96:	d301      	bcc.n	8012d9c <pbuf_add_header_impl+0x34>
    return 1;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	e043      	b.n	8012e24 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <pbuf_add_header_impl+0x3e>
    return 0;
 8012da2:	2300      	movs	r3, #0
 8012da4:	e03e      	b.n	8012e24 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	891a      	ldrh	r2, [r3, #8]
 8012dae:	8a7b      	ldrh	r3, [r7, #18]
 8012db0:	4413      	add	r3, r2
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	8a7a      	ldrh	r2, [r7, #18]
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d901      	bls.n	8012dbe <pbuf_add_header_impl+0x56>
    return 1;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e032      	b.n	8012e24 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	7b1b      	ldrb	r3, [r3, #12]
 8012dc2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012dc4:	8a3b      	ldrh	r3, [r7, #16]
 8012dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d00c      	beq.n	8012de8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	685a      	ldr	r2, [r3, #4]
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	425b      	negs	r3, r3
 8012dd6:	4413      	add	r3, r2
 8012dd8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	3310      	adds	r3, #16
 8012dde:	697a      	ldr	r2, [r7, #20]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d20d      	bcs.n	8012e00 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012de4:	2301      	movs	r3, #1
 8012de6:	e01d      	b.n	8012e24 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012de8:	79fb      	ldrb	r3, [r7, #7]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d006      	beq.n	8012dfc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	685a      	ldr	r2, [r3, #4]
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	425b      	negs	r3, r3
 8012df6:	4413      	add	r3, r2
 8012df8:	617b      	str	r3, [r7, #20]
 8012dfa:	e001      	b.n	8012e00 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e011      	b.n	8012e24 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	697a      	ldr	r2, [r7, #20]
 8012e04:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	895a      	ldrh	r2, [r3, #10]
 8012e0a:	8a7b      	ldrh	r3, [r7, #18]
 8012e0c:	4413      	add	r3, r2
 8012e0e:	b29a      	uxth	r2, r3
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	891a      	ldrh	r2, [r3, #8]
 8012e18:	8a7b      	ldrh	r3, [r7, #18]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	811a      	strh	r2, [r3, #8]


  return 0;
 8012e22:	2300      	movs	r3, #0
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3718      	adds	r7, #24
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}
 8012e2c:	0801f534 	.word	0x0801f534
 8012e30:	0801f698 	.word	0x0801f698
 8012e34:	0801f594 	.word	0x0801f594

08012e38 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012e42:	2200      	movs	r2, #0
 8012e44:	6839      	ldr	r1, [r7, #0]
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f7ff ff8e 	bl	8012d68 <pbuf_add_header_impl>
 8012e4c:	4603      	mov	r3, r0
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
	...

08012e58 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b084      	sub	sp, #16
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d106      	bne.n	8012e76 <pbuf_remove_header+0x1e>
 8012e68:	4b20      	ldr	r3, [pc, #128]	; (8012eec <pbuf_remove_header+0x94>)
 8012e6a:	f240 224b 	movw	r2, #587	; 0x24b
 8012e6e:	4920      	ldr	r1, [pc, #128]	; (8012ef0 <pbuf_remove_header+0x98>)
 8012e70:	4820      	ldr	r0, [pc, #128]	; (8012ef4 <pbuf_remove_header+0x9c>)
 8012e72:	f009 ffe9 	bl	801ce48 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d003      	beq.n	8012e84 <pbuf_remove_header+0x2c>
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e82:	d301      	bcc.n	8012e88 <pbuf_remove_header+0x30>
    return 1;
 8012e84:	2301      	movs	r3, #1
 8012e86:	e02c      	b.n	8012ee2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d101      	bne.n	8012e92 <pbuf_remove_header+0x3a>
    return 0;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e027      	b.n	8012ee2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	895b      	ldrh	r3, [r3, #10]
 8012e9a:	89fa      	ldrh	r2, [r7, #14]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d908      	bls.n	8012eb2 <pbuf_remove_header+0x5a>
 8012ea0:	4b12      	ldr	r3, [pc, #72]	; (8012eec <pbuf_remove_header+0x94>)
 8012ea2:	f240 2255 	movw	r2, #597	; 0x255
 8012ea6:	4914      	ldr	r1, [pc, #80]	; (8012ef8 <pbuf_remove_header+0xa0>)
 8012ea8:	4812      	ldr	r0, [pc, #72]	; (8012ef4 <pbuf_remove_header+0x9c>)
 8012eaa:	f009 ffcd 	bl	801ce48 <iprintf>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e017      	b.n	8012ee2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	685a      	ldr	r2, [r3, #4]
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	441a      	add	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	895a      	ldrh	r2, [r3, #10]
 8012ec8:	89fb      	ldrh	r3, [r7, #14]
 8012eca:	1ad3      	subs	r3, r2, r3
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	891a      	ldrh	r2, [r3, #8]
 8012ed6:	89fb      	ldrh	r3, [r7, #14]
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	0801f534 	.word	0x0801f534
 8012ef0:	0801f698 	.word	0x0801f698
 8012ef4:	0801f594 	.word	0x0801f594
 8012ef8:	0801f6a4 	.word	0x0801f6a4

08012efc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	460b      	mov	r3, r1
 8012f06:	807b      	strh	r3, [r7, #2]
 8012f08:	4613      	mov	r3, r2
 8012f0a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	da08      	bge.n	8012f26 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012f18:	425b      	negs	r3, r3
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7ff ff9b 	bl	8012e58 <pbuf_remove_header>
 8012f22:	4603      	mov	r3, r0
 8012f24:	e007      	b.n	8012f36 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012f26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012f2a:	787a      	ldrb	r2, [r7, #1]
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7ff ff1a 	bl	8012d68 <pbuf_add_header_impl>
 8012f34:	4603      	mov	r3, r0
  }
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b082      	sub	sp, #8
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	460b      	mov	r3, r1
 8012f48:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012f4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012f4e:	2201      	movs	r2, #1
 8012f50:	4619      	mov	r1, r3
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f7ff ffd2 	bl	8012efc <pbuf_header_impl>
 8012f58:	4603      	mov	r3, r0
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3708      	adds	r7, #8
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
	...

08012f64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b088      	sub	sp, #32
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d10b      	bne.n	8012f8a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d106      	bne.n	8012f86 <pbuf_free+0x22>
 8012f78:	4b3b      	ldr	r3, [pc, #236]	; (8013068 <pbuf_free+0x104>)
 8012f7a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012f7e:	493b      	ldr	r1, [pc, #236]	; (801306c <pbuf_free+0x108>)
 8012f80:	483b      	ldr	r0, [pc, #236]	; (8013070 <pbuf_free+0x10c>)
 8012f82:	f009 ff61 	bl	801ce48 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012f86:	2300      	movs	r3, #0
 8012f88:	e069      	b.n	801305e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012f8e:	e062      	b.n	8013056 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012f90:	f009 fd32 	bl	801c9f8 <sys_arch_protect>
 8012f94:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	7b9b      	ldrb	r3, [r3, #14]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d106      	bne.n	8012fac <pbuf_free+0x48>
 8012f9e:	4b32      	ldr	r3, [pc, #200]	; (8013068 <pbuf_free+0x104>)
 8012fa0:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012fa4:	4933      	ldr	r1, [pc, #204]	; (8013074 <pbuf_free+0x110>)
 8012fa6:	4832      	ldr	r0, [pc, #200]	; (8013070 <pbuf_free+0x10c>)
 8012fa8:	f009 ff4e 	bl	801ce48 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	7b9b      	ldrb	r3, [r3, #14]
 8012fb0:	3b01      	subs	r3, #1
 8012fb2:	b2da      	uxtb	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	739a      	strb	r2, [r3, #14]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	7b9b      	ldrb	r3, [r3, #14]
 8012fbc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012fbe:	69b8      	ldr	r0, [r7, #24]
 8012fc0:	f009 fd28 	bl	801ca14 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012fc4:	7dfb      	ldrb	r3, [r7, #23]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d143      	bne.n	8013052 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	7b1b      	ldrb	r3, [r3, #12]
 8012fd4:	f003 030f 	and.w	r3, r3, #15
 8012fd8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	7b5b      	ldrb	r3, [r3, #13]
 8012fde:	f003 0302 	and.w	r3, r3, #2
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d011      	beq.n	801300a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	691b      	ldr	r3, [r3, #16]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d106      	bne.n	8013000 <pbuf_free+0x9c>
 8012ff2:	4b1d      	ldr	r3, [pc, #116]	; (8013068 <pbuf_free+0x104>)
 8012ff4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012ff8:	491f      	ldr	r1, [pc, #124]	; (8013078 <pbuf_free+0x114>)
 8012ffa:	481d      	ldr	r0, [pc, #116]	; (8013070 <pbuf_free+0x10c>)
 8012ffc:	f009 ff24 	bl	801ce48 <iprintf>
        pc->custom_free_function(p);
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	4798      	blx	r3
 8013008:	e01d      	b.n	8013046 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801300a:	7bfb      	ldrb	r3, [r7, #15]
 801300c:	2b02      	cmp	r3, #2
 801300e:	d104      	bne.n	801301a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013010:	6879      	ldr	r1, [r7, #4]
 8013012:	200c      	movs	r0, #12
 8013014:	f7ff f966 	bl	80122e4 <memp_free>
 8013018:	e015      	b.n	8013046 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801301a:	7bfb      	ldrb	r3, [r7, #15]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d104      	bne.n	801302a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013020:	6879      	ldr	r1, [r7, #4]
 8013022:	200b      	movs	r0, #11
 8013024:	f7ff f95e 	bl	80122e4 <memp_free>
 8013028:	e00d      	b.n	8013046 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801302a:	7bfb      	ldrb	r3, [r7, #15]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d103      	bne.n	8013038 <pbuf_free+0xd4>
          mem_free(p);
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7fe fde9 	bl	8011c08 <mem_free>
 8013036:	e006      	b.n	8013046 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013038:	4b0b      	ldr	r3, [pc, #44]	; (8013068 <pbuf_free+0x104>)
 801303a:	f240 320f 	movw	r2, #783	; 0x30f
 801303e:	490f      	ldr	r1, [pc, #60]	; (801307c <pbuf_free+0x118>)
 8013040:	480b      	ldr	r0, [pc, #44]	; (8013070 <pbuf_free+0x10c>)
 8013042:	f009 ff01 	bl	801ce48 <iprintf>
        }
      }
      count++;
 8013046:	7ffb      	ldrb	r3, [r7, #31]
 8013048:	3301      	adds	r3, #1
 801304a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	607b      	str	r3, [r7, #4]
 8013050:	e001      	b.n	8013056 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013052:	2300      	movs	r3, #0
 8013054:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d199      	bne.n	8012f90 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801305c:	7ffb      	ldrb	r3, [r7, #31]
}
 801305e:	4618      	mov	r0, r3
 8013060:	3720      	adds	r7, #32
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	0801f534 	.word	0x0801f534
 801306c:	0801f698 	.word	0x0801f698
 8013070:	0801f594 	.word	0x0801f594
 8013074:	0801f6c4 	.word	0x0801f6c4
 8013078:	0801f6dc 	.word	0x0801f6dc
 801307c:	0801f700 	.word	0x0801f700

08013080 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013080:	b480      	push	{r7}
 8013082:	b085      	sub	sp, #20
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013088:	2300      	movs	r3, #0
 801308a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801308c:	e005      	b.n	801309a <pbuf_clen+0x1a>
    ++len;
 801308e:	89fb      	ldrh	r3, [r7, #14]
 8013090:	3301      	adds	r3, #1
 8013092:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d1f6      	bne.n	801308e <pbuf_clen+0xe>
  }
  return len;
 80130a0:	89fb      	ldrh	r3, [r7, #14]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3714      	adds	r7, #20
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr
	...

080130b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d016      	beq.n	80130ec <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80130be:	f009 fc9b 	bl	801c9f8 <sys_arch_protect>
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	7b9b      	ldrb	r3, [r3, #14]
 80130c8:	3301      	adds	r3, #1
 80130ca:	b2da      	uxtb	r2, r3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	739a      	strb	r2, [r3, #14]
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f009 fc9f 	bl	801ca14 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	7b9b      	ldrb	r3, [r3, #14]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d106      	bne.n	80130ec <pbuf_ref+0x3c>
 80130de:	4b05      	ldr	r3, [pc, #20]	; (80130f4 <pbuf_ref+0x44>)
 80130e0:	f240 3242 	movw	r2, #834	; 0x342
 80130e4:	4904      	ldr	r1, [pc, #16]	; (80130f8 <pbuf_ref+0x48>)
 80130e6:	4805      	ldr	r0, [pc, #20]	; (80130fc <pbuf_ref+0x4c>)
 80130e8:	f009 feae 	bl	801ce48 <iprintf>
  }
}
 80130ec:	bf00      	nop
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	0801f534 	.word	0x0801f534
 80130f8:	0801f714 	.word	0x0801f714
 80130fc:	0801f594 	.word	0x0801f594

08013100 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b084      	sub	sp, #16
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d002      	beq.n	8013116 <pbuf_cat+0x16>
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d107      	bne.n	8013126 <pbuf_cat+0x26>
 8013116:	4b20      	ldr	r3, [pc, #128]	; (8013198 <pbuf_cat+0x98>)
 8013118:	f240 3259 	movw	r2, #857	; 0x359
 801311c:	491f      	ldr	r1, [pc, #124]	; (801319c <pbuf_cat+0x9c>)
 801311e:	4820      	ldr	r0, [pc, #128]	; (80131a0 <pbuf_cat+0xa0>)
 8013120:	f009 fe92 	bl	801ce48 <iprintf>
 8013124:	e034      	b.n	8013190 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60fb      	str	r3, [r7, #12]
 801312a:	e00a      	b.n	8013142 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	891a      	ldrh	r2, [r3, #8]
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	891b      	ldrh	r3, [r3, #8]
 8013134:	4413      	add	r3, r2
 8013136:	b29a      	uxth	r2, r3
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	60fb      	str	r3, [r7, #12]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d1f0      	bne.n	801312c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	891a      	ldrh	r2, [r3, #8]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	895b      	ldrh	r3, [r3, #10]
 8013152:	429a      	cmp	r2, r3
 8013154:	d006      	beq.n	8013164 <pbuf_cat+0x64>
 8013156:	4b10      	ldr	r3, [pc, #64]	; (8013198 <pbuf_cat+0x98>)
 8013158:	f240 3262 	movw	r2, #866	; 0x362
 801315c:	4911      	ldr	r1, [pc, #68]	; (80131a4 <pbuf_cat+0xa4>)
 801315e:	4810      	ldr	r0, [pc, #64]	; (80131a0 <pbuf_cat+0xa0>)
 8013160:	f009 fe72 	bl	801ce48 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d006      	beq.n	801317a <pbuf_cat+0x7a>
 801316c:	4b0a      	ldr	r3, [pc, #40]	; (8013198 <pbuf_cat+0x98>)
 801316e:	f240 3263 	movw	r2, #867	; 0x363
 8013172:	490d      	ldr	r1, [pc, #52]	; (80131a8 <pbuf_cat+0xa8>)
 8013174:	480a      	ldr	r0, [pc, #40]	; (80131a0 <pbuf_cat+0xa0>)
 8013176:	f009 fe67 	bl	801ce48 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	891a      	ldrh	r2, [r3, #8]
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	891b      	ldrh	r3, [r3, #8]
 8013182:	4413      	add	r3, r2
 8013184:	b29a      	uxth	r2, r3
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	683a      	ldr	r2, [r7, #0]
 801318e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013190:	3710      	adds	r7, #16
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	0801f534 	.word	0x0801f534
 801319c:	0801f728 	.word	0x0801f728
 80131a0:	0801f594 	.word	0x0801f594
 80131a4:	0801f760 	.word	0x0801f760
 80131a8:	0801f790 	.word	0x0801f790

080131ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f7ff ffa1 	bl	8013100 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80131be:	6838      	ldr	r0, [r7, #0]
 80131c0:	f7ff ff76 	bl	80130b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80131c4:	bf00      	nop
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b086      	sub	sp, #24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80131d6:	2300      	movs	r3, #0
 80131d8:	617b      	str	r3, [r7, #20]
 80131da:	2300      	movs	r3, #0
 80131dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d008      	beq.n	80131f6 <pbuf_copy+0x2a>
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d005      	beq.n	80131f6 <pbuf_copy+0x2a>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	891a      	ldrh	r2, [r3, #8]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	891b      	ldrh	r3, [r3, #8]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d209      	bcs.n	801320a <pbuf_copy+0x3e>
 80131f6:	4b57      	ldr	r3, [pc, #348]	; (8013354 <pbuf_copy+0x188>)
 80131f8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80131fc:	4956      	ldr	r1, [pc, #344]	; (8013358 <pbuf_copy+0x18c>)
 80131fe:	4857      	ldr	r0, [pc, #348]	; (801335c <pbuf_copy+0x190>)
 8013200:	f009 fe22 	bl	801ce48 <iprintf>
 8013204:	f06f 030f 	mvn.w	r3, #15
 8013208:	e09f      	b.n	801334a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	895b      	ldrh	r3, [r3, #10]
 801320e:	461a      	mov	r2, r3
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	1ad2      	subs	r2, r2, r3
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	895b      	ldrh	r3, [r3, #10]
 8013218:	4619      	mov	r1, r3
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	1acb      	subs	r3, r1, r3
 801321e:	429a      	cmp	r2, r3
 8013220:	d306      	bcc.n	8013230 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	895b      	ldrh	r3, [r3, #10]
 8013226:	461a      	mov	r2, r3
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	1ad3      	subs	r3, r2, r3
 801322c:	60fb      	str	r3, [r7, #12]
 801322e:	e005      	b.n	801323c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	895b      	ldrh	r3, [r3, #10]
 8013234:	461a      	mov	r2, r3
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	1ad3      	subs	r3, r2, r3
 801323a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	685a      	ldr	r2, [r3, #4]
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	18d0      	adds	r0, r2, r3
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	685a      	ldr	r2, [r3, #4]
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	4413      	add	r3, r2
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	4619      	mov	r1, r3
 8013250:	f009 fd20 	bl	801cc94 <memcpy>
    offset_to += len;
 8013254:	697a      	ldr	r2, [r7, #20]
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4413      	add	r3, r2
 801325a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	895b      	ldrh	r3, [r3, #10]
 8013268:	461a      	mov	r2, r3
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	4293      	cmp	r3, r2
 801326e:	d906      	bls.n	801327e <pbuf_copy+0xb2>
 8013270:	4b38      	ldr	r3, [pc, #224]	; (8013354 <pbuf_copy+0x188>)
 8013272:	f240 32d9 	movw	r2, #985	; 0x3d9
 8013276:	493a      	ldr	r1, [pc, #232]	; (8013360 <pbuf_copy+0x194>)
 8013278:	4838      	ldr	r0, [pc, #224]	; (801335c <pbuf_copy+0x190>)
 801327a:	f009 fde5 	bl	801ce48 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	895b      	ldrh	r3, [r3, #10]
 8013282:	461a      	mov	r2, r3
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	4293      	cmp	r3, r2
 8013288:	d906      	bls.n	8013298 <pbuf_copy+0xcc>
 801328a:	4b32      	ldr	r3, [pc, #200]	; (8013354 <pbuf_copy+0x188>)
 801328c:	f240 32da 	movw	r2, #986	; 0x3da
 8013290:	4934      	ldr	r1, [pc, #208]	; (8013364 <pbuf_copy+0x198>)
 8013292:	4832      	ldr	r0, [pc, #200]	; (801335c <pbuf_copy+0x190>)
 8013294:	f009 fdd8 	bl	801ce48 <iprintf>
    if (offset_from >= p_from->len) {
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	895b      	ldrh	r3, [r3, #10]
 801329c:	461a      	mov	r2, r3
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d304      	bcc.n	80132ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	895b      	ldrh	r3, [r3, #10]
 80132b2:	461a      	mov	r2, r3
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d114      	bne.n	80132e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80132ba:	2300      	movs	r3, #0
 80132bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d10c      	bne.n	80132e4 <pbuf_copy+0x118>
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d009      	beq.n	80132e4 <pbuf_copy+0x118>
 80132d0:	4b20      	ldr	r3, [pc, #128]	; (8013354 <pbuf_copy+0x188>)
 80132d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80132d6:	4924      	ldr	r1, [pc, #144]	; (8013368 <pbuf_copy+0x19c>)
 80132d8:	4820      	ldr	r0, [pc, #128]	; (801335c <pbuf_copy+0x190>)
 80132da:	f009 fdb5 	bl	801ce48 <iprintf>
 80132de:	f06f 030f 	mvn.w	r3, #15
 80132e2:	e032      	b.n	801334a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d013      	beq.n	8013312 <pbuf_copy+0x146>
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	895a      	ldrh	r2, [r3, #10]
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	891b      	ldrh	r3, [r3, #8]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d10d      	bne.n	8013312 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d009      	beq.n	8013312 <pbuf_copy+0x146>
 80132fe:	4b15      	ldr	r3, [pc, #84]	; (8013354 <pbuf_copy+0x188>)
 8013300:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013304:	4919      	ldr	r1, [pc, #100]	; (801336c <pbuf_copy+0x1a0>)
 8013306:	4815      	ldr	r0, [pc, #84]	; (801335c <pbuf_copy+0x190>)
 8013308:	f009 fd9e 	bl	801ce48 <iprintf>
 801330c:	f06f 0305 	mvn.w	r3, #5
 8013310:	e01b      	b.n	801334a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d013      	beq.n	8013340 <pbuf_copy+0x174>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	895a      	ldrh	r2, [r3, #10]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	891b      	ldrh	r3, [r3, #8]
 8013320:	429a      	cmp	r2, r3
 8013322:	d10d      	bne.n	8013340 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d009      	beq.n	8013340 <pbuf_copy+0x174>
 801332c:	4b09      	ldr	r3, [pc, #36]	; (8013354 <pbuf_copy+0x188>)
 801332e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013332:	490e      	ldr	r1, [pc, #56]	; (801336c <pbuf_copy+0x1a0>)
 8013334:	4809      	ldr	r0, [pc, #36]	; (801335c <pbuf_copy+0x190>)
 8013336:	f009 fd87 	bl	801ce48 <iprintf>
 801333a:	f06f 0305 	mvn.w	r3, #5
 801333e:	e004      	b.n	801334a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	f47f af61 	bne.w	801320a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013348:	2300      	movs	r3, #0
}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	0801f534 	.word	0x0801f534
 8013358:	0801f7dc 	.word	0x0801f7dc
 801335c:	0801f594 	.word	0x0801f594
 8013360:	0801f80c 	.word	0x0801f80c
 8013364:	0801f824 	.word	0x0801f824
 8013368:	0801f840 	.word	0x0801f840
 801336c:	0801f850 	.word	0x0801f850

08013370 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b088      	sub	sp, #32
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	4611      	mov	r1, r2
 801337c:	461a      	mov	r2, r3
 801337e:	460b      	mov	r3, r1
 8013380:	80fb      	strh	r3, [r7, #6]
 8013382:	4613      	mov	r3, r2
 8013384:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8013386:	2300      	movs	r3, #0
 8013388:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801338a:	2300      	movs	r3, #0
 801338c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d108      	bne.n	80133a6 <pbuf_copy_partial+0x36>
 8013394:	4b2b      	ldr	r3, [pc, #172]	; (8013444 <pbuf_copy_partial+0xd4>)
 8013396:	f240 420a 	movw	r2, #1034	; 0x40a
 801339a:	492b      	ldr	r1, [pc, #172]	; (8013448 <pbuf_copy_partial+0xd8>)
 801339c:	482b      	ldr	r0, [pc, #172]	; (801344c <pbuf_copy_partial+0xdc>)
 801339e:	f009 fd53 	bl	801ce48 <iprintf>
 80133a2:	2300      	movs	r3, #0
 80133a4:	e04a      	b.n	801343c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d108      	bne.n	80133be <pbuf_copy_partial+0x4e>
 80133ac:	4b25      	ldr	r3, [pc, #148]	; (8013444 <pbuf_copy_partial+0xd4>)
 80133ae:	f240 420b 	movw	r2, #1035	; 0x40b
 80133b2:	4927      	ldr	r1, [pc, #156]	; (8013450 <pbuf_copy_partial+0xe0>)
 80133b4:	4825      	ldr	r0, [pc, #148]	; (801344c <pbuf_copy_partial+0xdc>)
 80133b6:	f009 fd47 	bl	801ce48 <iprintf>
 80133ba:	2300      	movs	r3, #0
 80133bc:	e03e      	b.n	801343c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	61fb      	str	r3, [r7, #28]
 80133c2:	e034      	b.n	801342e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80133c4:	88bb      	ldrh	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00a      	beq.n	80133e0 <pbuf_copy_partial+0x70>
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	895b      	ldrh	r3, [r3, #10]
 80133ce:	88ba      	ldrh	r2, [r7, #4]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d305      	bcc.n	80133e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	895b      	ldrh	r3, [r3, #10]
 80133d8:	88ba      	ldrh	r2, [r7, #4]
 80133da:	1ad3      	subs	r3, r2, r3
 80133dc:	80bb      	strh	r3, [r7, #4]
 80133de:	e023      	b.n	8013428 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	895a      	ldrh	r2, [r3, #10]
 80133e4:	88bb      	ldrh	r3, [r7, #4]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80133ea:	8b3a      	ldrh	r2, [r7, #24]
 80133ec:	88fb      	ldrh	r3, [r7, #6]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d901      	bls.n	80133f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80133f2:	88fb      	ldrh	r3, [r7, #6]
 80133f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80133f6:	8b7b      	ldrh	r3, [r7, #26]
 80133f8:	68ba      	ldr	r2, [r7, #8]
 80133fa:	18d0      	adds	r0, r2, r3
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	685a      	ldr	r2, [r3, #4]
 8013400:	88bb      	ldrh	r3, [r7, #4]
 8013402:	4413      	add	r3, r2
 8013404:	8b3a      	ldrh	r2, [r7, #24]
 8013406:	4619      	mov	r1, r3
 8013408:	f009 fc44 	bl	801cc94 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801340c:	8afa      	ldrh	r2, [r7, #22]
 801340e:	8b3b      	ldrh	r3, [r7, #24]
 8013410:	4413      	add	r3, r2
 8013412:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013414:	8b7a      	ldrh	r2, [r7, #26]
 8013416:	8b3b      	ldrh	r3, [r7, #24]
 8013418:	4413      	add	r3, r2
 801341a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801341c:	88fa      	ldrh	r2, [r7, #6]
 801341e:	8b3b      	ldrh	r3, [r7, #24]
 8013420:	1ad3      	subs	r3, r2, r3
 8013422:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	61fb      	str	r3, [r7, #28]
 801342e:	88fb      	ldrh	r3, [r7, #6]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <pbuf_copy_partial+0xca>
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1c4      	bne.n	80133c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801343a:	8afb      	ldrh	r3, [r7, #22]
}
 801343c:	4618      	mov	r0, r3
 801343e:	3720      	adds	r7, #32
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	0801f534 	.word	0x0801f534
 8013448:	0801f87c 	.word	0x0801f87c
 801344c:	0801f594 	.word	0x0801f594
 8013450:	0801f89c 	.word	0x0801f89c

08013454 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	4603      	mov	r3, r0
 801345c:	603a      	str	r2, [r7, #0]
 801345e:	71fb      	strb	r3, [r7, #7]
 8013460:	460b      	mov	r3, r1
 8013462:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	8919      	ldrh	r1, [r3, #8]
 8013468:	88ba      	ldrh	r2, [r7, #4]
 801346a:	79fb      	ldrb	r3, [r7, #7]
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff fa95 	bl	801299c <pbuf_alloc>
 8013472:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d101      	bne.n	801347e <pbuf_clone+0x2a>
    return NULL;
 801347a:	2300      	movs	r3, #0
 801347c:	e011      	b.n	80134a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801347e:	6839      	ldr	r1, [r7, #0]
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f7ff fea3 	bl	80131cc <pbuf_copy>
 8013486:	4603      	mov	r3, r0
 8013488:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801348a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d006      	beq.n	80134a0 <pbuf_clone+0x4c>
 8013492:	4b06      	ldr	r3, [pc, #24]	; (80134ac <pbuf_clone+0x58>)
 8013494:	f240 5224 	movw	r2, #1316	; 0x524
 8013498:	4905      	ldr	r1, [pc, #20]	; (80134b0 <pbuf_clone+0x5c>)
 801349a:	4806      	ldr	r0, [pc, #24]	; (80134b4 <pbuf_clone+0x60>)
 801349c:	f009 fcd4 	bl	801ce48 <iprintf>
  return q;
 80134a0:	68fb      	ldr	r3, [r7, #12]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	0801f534 	.word	0x0801f534
 80134b0:	0801f9a8 	.word	0x0801f9a8
 80134b4:	0801f594 	.word	0x0801f594

080134b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80134bc:	f009 fcdc 	bl	801ce78 <rand>
 80134c0:	4603      	mov	r3, r0
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	4b01      	ldr	r3, [pc, #4]	; (80134d8 <tcp_init+0x20>)
 80134d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80134d4:	bf00      	nop
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	200002ec 	.word	0x200002ec

080134dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	7d1b      	ldrb	r3, [r3, #20]
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	d105      	bne.n	80134f8 <tcp_free+0x1c>
 80134ec:	4b06      	ldr	r3, [pc, #24]	; (8013508 <tcp_free+0x2c>)
 80134ee:	22d4      	movs	r2, #212	; 0xd4
 80134f0:	4906      	ldr	r1, [pc, #24]	; (801350c <tcp_free+0x30>)
 80134f2:	4807      	ldr	r0, [pc, #28]	; (8013510 <tcp_free+0x34>)
 80134f4:	f009 fca8 	bl	801ce48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80134f8:	6879      	ldr	r1, [r7, #4]
 80134fa:	2001      	movs	r0, #1
 80134fc:	f7fe fef2 	bl	80122e4 <memp_free>
}
 8013500:	bf00      	nop
 8013502:	3708      	adds	r7, #8
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}
 8013508:	0801fa34 	.word	0x0801fa34
 801350c:	0801fa64 	.word	0x0801fa64
 8013510:	0801fa78 	.word	0x0801fa78

08013514 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	7d1b      	ldrb	r3, [r3, #20]
 8013520:	2b01      	cmp	r3, #1
 8013522:	d105      	bne.n	8013530 <tcp_free_listen+0x1c>
 8013524:	4b06      	ldr	r3, [pc, #24]	; (8013540 <tcp_free_listen+0x2c>)
 8013526:	22df      	movs	r2, #223	; 0xdf
 8013528:	4906      	ldr	r1, [pc, #24]	; (8013544 <tcp_free_listen+0x30>)
 801352a:	4807      	ldr	r0, [pc, #28]	; (8013548 <tcp_free_listen+0x34>)
 801352c:	f009 fc8c 	bl	801ce48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013530:	6879      	ldr	r1, [r7, #4]
 8013532:	2002      	movs	r0, #2
 8013534:	f7fe fed6 	bl	80122e4 <memp_free>
}
 8013538:	bf00      	nop
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	0801fa34 	.word	0x0801fa34
 8013544:	0801faa0 	.word	0x0801faa0
 8013548:	0801fa78 	.word	0x0801fa78

0801354c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013550:	f000 ffdc 	bl	801450c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013554:	4b07      	ldr	r3, [pc, #28]	; (8013574 <tcp_tmr+0x28>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	3301      	adds	r3, #1
 801355a:	b2da      	uxtb	r2, r3
 801355c:	4b05      	ldr	r3, [pc, #20]	; (8013574 <tcp_tmr+0x28>)
 801355e:	701a      	strb	r2, [r3, #0]
 8013560:	4b04      	ldr	r3, [pc, #16]	; (8013574 <tcp_tmr+0x28>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	f003 0301 	and.w	r3, r3, #1
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801356c:	f000 fc8e 	bl	8013e8c <tcp_slowtmr>
  }
}
 8013570:	bf00      	nop
 8013572:	bd80      	pop	{r7, pc}
 8013574:	20006be1 	.word	0x20006be1

08013578 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d105      	bne.n	8013594 <tcp_remove_listener+0x1c>
 8013588:	4b0d      	ldr	r3, [pc, #52]	; (80135c0 <tcp_remove_listener+0x48>)
 801358a:	22ff      	movs	r2, #255	; 0xff
 801358c:	490d      	ldr	r1, [pc, #52]	; (80135c4 <tcp_remove_listener+0x4c>)
 801358e:	480e      	ldr	r0, [pc, #56]	; (80135c8 <tcp_remove_listener+0x50>)
 8013590:	f009 fc5a 	bl	801ce48 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	60fb      	str	r3, [r7, #12]
 8013598:	e00a      	b.n	80135b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801359e:	683a      	ldr	r2, [r7, #0]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d102      	bne.n	80135aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2200      	movs	r2, #0
 80135a8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	60fb      	str	r3, [r7, #12]
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d1f1      	bne.n	801359a <tcp_remove_listener+0x22>
    }
  }
}
 80135b6:	bf00      	nop
 80135b8:	bf00      	nop
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	0801fa34 	.word	0x0801fa34
 80135c4:	0801fabc 	.word	0x0801fabc
 80135c8:	0801fa78 	.word	0x0801fa78

080135cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d106      	bne.n	80135e8 <tcp_listen_closed+0x1c>
 80135da:	4b14      	ldr	r3, [pc, #80]	; (801362c <tcp_listen_closed+0x60>)
 80135dc:	f240 1211 	movw	r2, #273	; 0x111
 80135e0:	4913      	ldr	r1, [pc, #76]	; (8013630 <tcp_listen_closed+0x64>)
 80135e2:	4814      	ldr	r0, [pc, #80]	; (8013634 <tcp_listen_closed+0x68>)
 80135e4:	f009 fc30 	bl	801ce48 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	7d1b      	ldrb	r3, [r3, #20]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d006      	beq.n	80135fe <tcp_listen_closed+0x32>
 80135f0:	4b0e      	ldr	r3, [pc, #56]	; (801362c <tcp_listen_closed+0x60>)
 80135f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80135f6:	4910      	ldr	r1, [pc, #64]	; (8013638 <tcp_listen_closed+0x6c>)
 80135f8:	480e      	ldr	r0, [pc, #56]	; (8013634 <tcp_listen_closed+0x68>)
 80135fa:	f009 fc25 	bl	801ce48 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80135fe:	2301      	movs	r3, #1
 8013600:	60fb      	str	r3, [r7, #12]
 8013602:	e00b      	b.n	801361c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013604:	4a0d      	ldr	r2, [pc, #52]	; (801363c <tcp_listen_closed+0x70>)
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	6879      	ldr	r1, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff ffb1 	bl	8013578 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	3301      	adds	r3, #1
 801361a:	60fb      	str	r3, [r7, #12]
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2b03      	cmp	r3, #3
 8013620:	d9f0      	bls.n	8013604 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013622:	bf00      	nop
 8013624:	bf00      	nop
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	0801fa34 	.word	0x0801fa34
 8013630:	0801fae4 	.word	0x0801fae4
 8013634:	0801fa78 	.word	0x0801fa78
 8013638:	0801faf0 	.word	0x0801faf0
 801363c:	08021a54 	.word	0x08021a54

08013640 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013640:	b5b0      	push	{r4, r5, r7, lr}
 8013642:	b088      	sub	sp, #32
 8013644:	af04      	add	r7, sp, #16
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	460b      	mov	r3, r1
 801364a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d106      	bne.n	8013660 <tcp_close_shutdown+0x20>
 8013652:	4b63      	ldr	r3, [pc, #396]	; (80137e0 <tcp_close_shutdown+0x1a0>)
 8013654:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013658:	4962      	ldr	r1, [pc, #392]	; (80137e4 <tcp_close_shutdown+0x1a4>)
 801365a:	4863      	ldr	r0, [pc, #396]	; (80137e8 <tcp_close_shutdown+0x1a8>)
 801365c:	f009 fbf4 	bl	801ce48 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013660:	78fb      	ldrb	r3, [r7, #3]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d066      	beq.n	8013734 <tcp_close_shutdown+0xf4>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	7d1b      	ldrb	r3, [r3, #20]
 801366a:	2b04      	cmp	r3, #4
 801366c:	d003      	beq.n	8013676 <tcp_close_shutdown+0x36>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7d1b      	ldrb	r3, [r3, #20]
 8013672:	2b07      	cmp	r3, #7
 8013674:	d15e      	bne.n	8013734 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801367a:	2b00      	cmp	r3, #0
 801367c:	d104      	bne.n	8013688 <tcp_close_shutdown+0x48>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013682:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013686:	d055      	beq.n	8013734 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	8b5b      	ldrh	r3, [r3, #26]
 801368c:	f003 0310 	and.w	r3, r3, #16
 8013690:	2b00      	cmp	r3, #0
 8013692:	d106      	bne.n	80136a2 <tcp_close_shutdown+0x62>
 8013694:	4b52      	ldr	r3, [pc, #328]	; (80137e0 <tcp_close_shutdown+0x1a0>)
 8013696:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801369a:	4954      	ldr	r1, [pc, #336]	; (80137ec <tcp_close_shutdown+0x1ac>)
 801369c:	4852      	ldr	r0, [pc, #328]	; (80137e8 <tcp_close_shutdown+0x1a8>)
 801369e:	f009 fbd3 	bl	801ce48 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80136aa:	687d      	ldr	r5, [r7, #4]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	3304      	adds	r3, #4
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	8ad2      	ldrh	r2, [r2, #22]
 80136b4:	6879      	ldr	r1, [r7, #4]
 80136b6:	8b09      	ldrh	r1, [r1, #24]
 80136b8:	9102      	str	r1, [sp, #8]
 80136ba:	9201      	str	r2, [sp, #4]
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	462b      	mov	r3, r5
 80136c0:	4622      	mov	r2, r4
 80136c2:	4601      	mov	r1, r0
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f005 fced 	bl	80190a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f001 face 	bl	8014c6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80136d0:	4b47      	ldr	r3, [pc, #284]	; (80137f0 <tcp_close_shutdown+0x1b0>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d105      	bne.n	80136e6 <tcp_close_shutdown+0xa6>
 80136da:	4b45      	ldr	r3, [pc, #276]	; (80137f0 <tcp_close_shutdown+0x1b0>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	4a43      	ldr	r2, [pc, #268]	; (80137f0 <tcp_close_shutdown+0x1b0>)
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	e013      	b.n	801370e <tcp_close_shutdown+0xce>
 80136e6:	4b42      	ldr	r3, [pc, #264]	; (80137f0 <tcp_close_shutdown+0x1b0>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	60fb      	str	r3, [r7, #12]
 80136ec:	e00c      	b.n	8013708 <tcp_close_shutdown+0xc8>
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	687a      	ldr	r2, [r7, #4]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d104      	bne.n	8013702 <tcp_close_shutdown+0xc2>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	68da      	ldr	r2, [r3, #12]
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	60da      	str	r2, [r3, #12]
 8013700:	e005      	b.n	801370e <tcp_close_shutdown+0xce>
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	60fb      	str	r3, [r7, #12]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1ef      	bne.n	80136ee <tcp_close_shutdown+0xae>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2200      	movs	r2, #0
 8013712:	60da      	str	r2, [r3, #12]
 8013714:	4b37      	ldr	r3, [pc, #220]	; (80137f4 <tcp_close_shutdown+0x1b4>)
 8013716:	2201      	movs	r2, #1
 8013718:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801371a:	4b37      	ldr	r3, [pc, #220]	; (80137f8 <tcp_close_shutdown+0x1b8>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	429a      	cmp	r2, r3
 8013722:	d102      	bne.n	801372a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013724:	f003 ff62 	bl	80175ec <tcp_trigger_input_pcb_close>
 8013728:	e002      	b.n	8013730 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7ff fed6 	bl	80134dc <tcp_free>
      }
      return ERR_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	e050      	b.n	80137d6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	7d1b      	ldrb	r3, [r3, #20]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d03b      	beq.n	80137b4 <tcp_close_shutdown+0x174>
 801373c:	2b02      	cmp	r3, #2
 801373e:	dc44      	bgt.n	80137ca <tcp_close_shutdown+0x18a>
 8013740:	2b00      	cmp	r3, #0
 8013742:	d002      	beq.n	801374a <tcp_close_shutdown+0x10a>
 8013744:	2b01      	cmp	r3, #1
 8013746:	d02a      	beq.n	801379e <tcp_close_shutdown+0x15e>
 8013748:	e03f      	b.n	80137ca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	8adb      	ldrh	r3, [r3, #22]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d021      	beq.n	8013796 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013752:	4b2a      	ldr	r3, [pc, #168]	; (80137fc <tcp_close_shutdown+0x1bc>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	429a      	cmp	r2, r3
 801375a:	d105      	bne.n	8013768 <tcp_close_shutdown+0x128>
 801375c:	4b27      	ldr	r3, [pc, #156]	; (80137fc <tcp_close_shutdown+0x1bc>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	4a26      	ldr	r2, [pc, #152]	; (80137fc <tcp_close_shutdown+0x1bc>)
 8013764:	6013      	str	r3, [r2, #0]
 8013766:	e013      	b.n	8013790 <tcp_close_shutdown+0x150>
 8013768:	4b24      	ldr	r3, [pc, #144]	; (80137fc <tcp_close_shutdown+0x1bc>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	60bb      	str	r3, [r7, #8]
 801376e:	e00c      	b.n	801378a <tcp_close_shutdown+0x14a>
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	429a      	cmp	r2, r3
 8013778:	d104      	bne.n	8013784 <tcp_close_shutdown+0x144>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	68da      	ldr	r2, [r3, #12]
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	60da      	str	r2, [r3, #12]
 8013782:	e005      	b.n	8013790 <tcp_close_shutdown+0x150>
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	60bb      	str	r3, [r7, #8]
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d1ef      	bne.n	8013770 <tcp_close_shutdown+0x130>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2200      	movs	r2, #0
 8013794:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7ff fea0 	bl	80134dc <tcp_free>
      break;
 801379c:	e01a      	b.n	80137d4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff ff14 	bl	80135cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80137a4:	6879      	ldr	r1, [r7, #4]
 80137a6:	4816      	ldr	r0, [pc, #88]	; (8013800 <tcp_close_shutdown+0x1c0>)
 80137a8:	f001 fab0 	bl	8014d0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff feb1 	bl	8013514 <tcp_free_listen>
      break;
 80137b2:	e00f      	b.n	80137d4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80137b4:	6879      	ldr	r1, [r7, #4]
 80137b6:	480e      	ldr	r0, [pc, #56]	; (80137f0 <tcp_close_shutdown+0x1b0>)
 80137b8:	f001 faa8 	bl	8014d0c <tcp_pcb_remove>
 80137bc:	4b0d      	ldr	r3, [pc, #52]	; (80137f4 <tcp_close_shutdown+0x1b4>)
 80137be:	2201      	movs	r2, #1
 80137c0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7ff fe8a 	bl	80134dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80137c8:	e004      	b.n	80137d4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 f81a 	bl	8013804 <tcp_close_shutdown_fin>
 80137d0:	4603      	mov	r3, r0
 80137d2:	e000      	b.n	80137d6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bdb0      	pop	{r4, r5, r7, pc}
 80137de:	bf00      	nop
 80137e0:	0801fa34 	.word	0x0801fa34
 80137e4:	0801fb08 	.word	0x0801fb08
 80137e8:	0801fa78 	.word	0x0801fa78
 80137ec:	0801fb28 	.word	0x0801fb28
 80137f0:	2000df18 	.word	0x2000df18
 80137f4:	2000df14 	.word	0x2000df14
 80137f8:	2000df2c 	.word	0x2000df2c
 80137fc:	2000df24 	.word	0x2000df24
 8013800:	2000df20 	.word	0x2000df20

08013804 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_close_shutdown_fin+0x1c>
 8013812:	4b2e      	ldr	r3, [pc, #184]	; (80138cc <tcp_close_shutdown_fin+0xc8>)
 8013814:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013818:	492d      	ldr	r1, [pc, #180]	; (80138d0 <tcp_close_shutdown_fin+0xcc>)
 801381a:	482e      	ldr	r0, [pc, #184]	; (80138d4 <tcp_close_shutdown_fin+0xd0>)
 801381c:	f009 fb14 	bl	801ce48 <iprintf>

  switch (pcb->state) {
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	7d1b      	ldrb	r3, [r3, #20]
 8013824:	2b07      	cmp	r3, #7
 8013826:	d020      	beq.n	801386a <tcp_close_shutdown_fin+0x66>
 8013828:	2b07      	cmp	r3, #7
 801382a:	dc2b      	bgt.n	8013884 <tcp_close_shutdown_fin+0x80>
 801382c:	2b03      	cmp	r3, #3
 801382e:	d002      	beq.n	8013836 <tcp_close_shutdown_fin+0x32>
 8013830:	2b04      	cmp	r3, #4
 8013832:	d00d      	beq.n	8013850 <tcp_close_shutdown_fin+0x4c>
 8013834:	e026      	b.n	8013884 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f004 fd42 	bl	80182c0 <tcp_send_fin>
 801383c:	4603      	mov	r3, r0
 801383e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d11f      	bne.n	8013888 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2205      	movs	r2, #5
 801384c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801384e:	e01b      	b.n	8013888 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f004 fd35 	bl	80182c0 <tcp_send_fin>
 8013856:	4603      	mov	r3, r0
 8013858:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d114      	bne.n	801388c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2205      	movs	r2, #5
 8013866:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013868:	e010      	b.n	801388c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f004 fd28 	bl	80182c0 <tcp_send_fin>
 8013870:	4603      	mov	r3, r0
 8013872:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d109      	bne.n	8013890 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2209      	movs	r2, #9
 8013880:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013882:	e005      	b.n	8013890 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	e01c      	b.n	80138c2 <tcp_close_shutdown_fin+0xbe>
      break;
 8013888:	bf00      	nop
 801388a:	e002      	b.n	8013892 <tcp_close_shutdown_fin+0x8e>
      break;
 801388c:	bf00      	nop
 801388e:	e000      	b.n	8013892 <tcp_close_shutdown_fin+0x8e>
      break;
 8013890:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d103      	bne.n	80138a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f004 fe4e 	bl	801853c <tcp_output>
 80138a0:	e00d      	b.n	80138be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80138a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138aa:	d108      	bne.n	80138be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	8b5b      	ldrh	r3, [r3, #26]
 80138b0:	f043 0308 	orr.w	r3, r3, #8
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e001      	b.n	80138c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80138be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3710      	adds	r7, #16
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}
 80138ca:	bf00      	nop
 80138cc:	0801fa34 	.word	0x0801fa34
 80138d0:	0801fae4 	.word	0x0801fae4
 80138d4:	0801fa78 	.word	0x0801fa78

080138d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d109      	bne.n	80138fa <tcp_close+0x22>
 80138e6:	4b0f      	ldr	r3, [pc, #60]	; (8013924 <tcp_close+0x4c>)
 80138e8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80138ec:	490e      	ldr	r1, [pc, #56]	; (8013928 <tcp_close+0x50>)
 80138ee:	480f      	ldr	r0, [pc, #60]	; (801392c <tcp_close+0x54>)
 80138f0:	f009 faaa 	bl	801ce48 <iprintf>
 80138f4:	f06f 030f 	mvn.w	r3, #15
 80138f8:	e00f      	b.n	801391a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	7d1b      	ldrb	r3, [r3, #20]
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d006      	beq.n	8013910 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	8b5b      	ldrh	r3, [r3, #26]
 8013906:	f043 0310 	orr.w	r3, r3, #16
 801390a:	b29a      	uxth	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013910:	2101      	movs	r1, #1
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f7ff fe94 	bl	8013640 <tcp_close_shutdown>
 8013918:	4603      	mov	r3, r0
}
 801391a:	4618      	mov	r0, r3
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	0801fa34 	.word	0x0801fa34
 8013928:	0801fb44 	.word	0x0801fb44
 801392c:	0801fa78 	.word	0x0801fa78

08013930 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d109      	bne.n	8013956 <tcp_shutdown+0x26>
 8013942:	4b26      	ldr	r3, [pc, #152]	; (80139dc <tcp_shutdown+0xac>)
 8013944:	f240 2207 	movw	r2, #519	; 0x207
 8013948:	4925      	ldr	r1, [pc, #148]	; (80139e0 <tcp_shutdown+0xb0>)
 801394a:	4826      	ldr	r0, [pc, #152]	; (80139e4 <tcp_shutdown+0xb4>)
 801394c:	f009 fa7c 	bl	801ce48 <iprintf>
 8013950:	f06f 030f 	mvn.w	r3, #15
 8013954:	e03d      	b.n	80139d2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	7d1b      	ldrb	r3, [r3, #20]
 801395a:	2b01      	cmp	r3, #1
 801395c:	d102      	bne.n	8013964 <tcp_shutdown+0x34>
    return ERR_CONN;
 801395e:	f06f 030a 	mvn.w	r3, #10
 8013962:	e036      	b.n	80139d2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d01b      	beq.n	80139a2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	8b5b      	ldrh	r3, [r3, #26]
 801396e:	f043 0310 	orr.w	r3, r3, #16
 8013972:	b29a      	uxth	r2, r3
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d005      	beq.n	801398a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801397e:	2101      	movs	r1, #1
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f7ff fe5d 	bl	8013640 <tcp_close_shutdown>
 8013986:	4603      	mov	r3, r0
 8013988:	e023      	b.n	80139d2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801398e:	2b00      	cmp	r3, #0
 8013990:	d007      	beq.n	80139a2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013996:	4618      	mov	r0, r3
 8013998:	f7ff fae4 	bl	8012f64 <pbuf_free>
      pcb->refused_data = NULL;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2200      	movs	r2, #0
 80139a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d013      	beq.n	80139d0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	7d1b      	ldrb	r3, [r3, #20]
 80139ac:	2b04      	cmp	r3, #4
 80139ae:	dc02      	bgt.n	80139b6 <tcp_shutdown+0x86>
 80139b0:	2b03      	cmp	r3, #3
 80139b2:	da02      	bge.n	80139ba <tcp_shutdown+0x8a>
 80139b4:	e009      	b.n	80139ca <tcp_shutdown+0x9a>
 80139b6:	2b07      	cmp	r3, #7
 80139b8:	d107      	bne.n	80139ca <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	4619      	mov	r1, r3
 80139c0:	68f8      	ldr	r0, [r7, #12]
 80139c2:	f7ff fe3d 	bl	8013640 <tcp_close_shutdown>
 80139c6:	4603      	mov	r3, r0
 80139c8:	e003      	b.n	80139d2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80139ca:	f06f 030a 	mvn.w	r3, #10
 80139ce:	e000      	b.n	80139d2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	0801fa34 	.word	0x0801fa34
 80139e0:	0801fb5c 	.word	0x0801fb5c
 80139e4:	0801fa78 	.word	0x0801fa78

080139e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b08e      	sub	sp, #56	; 0x38
 80139ec:	af04      	add	r7, sp, #16
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d107      	bne.n	8013a08 <tcp_abandon+0x20>
 80139f8:	4b52      	ldr	r3, [pc, #328]	; (8013b44 <tcp_abandon+0x15c>)
 80139fa:	f240 223d 	movw	r2, #573	; 0x23d
 80139fe:	4952      	ldr	r1, [pc, #328]	; (8013b48 <tcp_abandon+0x160>)
 8013a00:	4852      	ldr	r0, [pc, #328]	; (8013b4c <tcp_abandon+0x164>)
 8013a02:	f009 fa21 	bl	801ce48 <iprintf>
 8013a06:	e099      	b.n	8013b3c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	7d1b      	ldrb	r3, [r3, #20]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d106      	bne.n	8013a1e <tcp_abandon+0x36>
 8013a10:	4b4c      	ldr	r3, [pc, #304]	; (8013b44 <tcp_abandon+0x15c>)
 8013a12:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013a16:	494e      	ldr	r1, [pc, #312]	; (8013b50 <tcp_abandon+0x168>)
 8013a18:	484c      	ldr	r0, [pc, #304]	; (8013b4c <tcp_abandon+0x164>)
 8013a1a:	f009 fa15 	bl	801ce48 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	7d1b      	ldrb	r3, [r3, #20]
 8013a22:	2b0a      	cmp	r3, #10
 8013a24:	d107      	bne.n	8013a36 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013a26:	6879      	ldr	r1, [r7, #4]
 8013a28:	484a      	ldr	r0, [pc, #296]	; (8013b54 <tcp_abandon+0x16c>)
 8013a2a:	f001 f96f 	bl	8014d0c <tcp_pcb_remove>
    tcp_free(pcb);
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7ff fd54 	bl	80134dc <tcp_free>
 8013a34:	e082      	b.n	8013b3c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a42:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a48:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a50:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	691b      	ldr	r3, [r3, #16]
 8013a56:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	7d1b      	ldrb	r3, [r3, #20]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d126      	bne.n	8013aae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	8adb      	ldrh	r3, [r3, #22]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d02e      	beq.n	8013ac6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013a68:	4b3b      	ldr	r3, [pc, #236]	; (8013b58 <tcp_abandon+0x170>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	d105      	bne.n	8013a7e <tcp_abandon+0x96>
 8013a72:	4b39      	ldr	r3, [pc, #228]	; (8013b58 <tcp_abandon+0x170>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	4a37      	ldr	r2, [pc, #220]	; (8013b58 <tcp_abandon+0x170>)
 8013a7a:	6013      	str	r3, [r2, #0]
 8013a7c:	e013      	b.n	8013aa6 <tcp_abandon+0xbe>
 8013a7e:	4b36      	ldr	r3, [pc, #216]	; (8013b58 <tcp_abandon+0x170>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	61fb      	str	r3, [r7, #28]
 8013a84:	e00c      	b.n	8013aa0 <tcp_abandon+0xb8>
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d104      	bne.n	8013a9a <tcp_abandon+0xb2>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	68da      	ldr	r2, [r3, #12]
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	60da      	str	r2, [r3, #12]
 8013a98:	e005      	b.n	8013aa6 <tcp_abandon+0xbe>
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	61fb      	str	r3, [r7, #28]
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1ef      	bne.n	8013a86 <tcp_abandon+0x9e>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	60da      	str	r2, [r3, #12]
 8013aac:	e00b      	b.n	8013ac6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	8adb      	ldrh	r3, [r3, #22]
 8013ab6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013ab8:	6879      	ldr	r1, [r7, #4]
 8013aba:	4828      	ldr	r0, [pc, #160]	; (8013b5c <tcp_abandon+0x174>)
 8013abc:	f001 f926 	bl	8014d0c <tcp_pcb_remove>
 8013ac0:	4b27      	ldr	r3, [pc, #156]	; (8013b60 <tcp_abandon+0x178>)
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d004      	beq.n	8013ad8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f000 fdfa 	bl	80146cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d004      	beq.n	8013aea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f000 fdf1 	bl	80146cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d004      	beq.n	8013afc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013af6:	4618      	mov	r0, r3
 8013af8:	f000 fde8 	bl	80146cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00e      	beq.n	8013b20 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013b02:	6879      	ldr	r1, [r7, #4]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	3304      	adds	r3, #4
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	8b12      	ldrh	r2, [r2, #24]
 8013b0c:	9202      	str	r2, [sp, #8]
 8013b0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b10:	9201      	str	r2, [sp, #4]
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	460b      	mov	r3, r1
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	69b9      	ldr	r1, [r7, #24]
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f005 fac2 	bl	80190a4 <tcp_rst>
    }
    last_state = pcb->state;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	7d1b      	ldrb	r3, [r3, #20]
 8013b24:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff fcd8 	bl	80134dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d004      	beq.n	8013b3c <tcp_abandon+0x154>
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	f06f 010c 	mvn.w	r1, #12
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	4798      	blx	r3
  }
}
 8013b3c:	3728      	adds	r7, #40	; 0x28
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	0801fa34 	.word	0x0801fa34
 8013b48:	0801fb78 	.word	0x0801fb78
 8013b4c:	0801fa78 	.word	0x0801fa78
 8013b50:	0801fb94 	.word	0x0801fb94
 8013b54:	2000df28 	.word	0x2000df28
 8013b58:	2000df24 	.word	0x2000df24
 8013b5c:	2000df18 	.word	0x2000df18
 8013b60:	2000df14 	.word	0x2000df14

08013b64 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013b6c:	2101      	movs	r1, #1
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7ff ff3a 	bl	80139e8 <tcp_abandon>
}
 8013b74:	bf00      	nop
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b088      	sub	sp, #32
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	4613      	mov	r3, r2
 8013b88:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013b8a:	2304      	movs	r3, #4
 8013b8c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d101      	bne.n	8013b98 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013b94:	4b3e      	ldr	r3, [pc, #248]	; (8013c90 <tcp_bind+0x114>)
 8013b96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d109      	bne.n	8013bb2 <tcp_bind+0x36>
 8013b9e:	4b3d      	ldr	r3, [pc, #244]	; (8013c94 <tcp_bind+0x118>)
 8013ba0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013ba4:	493c      	ldr	r1, [pc, #240]	; (8013c98 <tcp_bind+0x11c>)
 8013ba6:	483d      	ldr	r0, [pc, #244]	; (8013c9c <tcp_bind+0x120>)
 8013ba8:	f009 f94e 	bl	801ce48 <iprintf>
 8013bac:	f06f 030f 	mvn.w	r3, #15
 8013bb0:	e06a      	b.n	8013c88 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	7d1b      	ldrb	r3, [r3, #20]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d009      	beq.n	8013bce <tcp_bind+0x52>
 8013bba:	4b36      	ldr	r3, [pc, #216]	; (8013c94 <tcp_bind+0x118>)
 8013bbc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013bc0:	4937      	ldr	r1, [pc, #220]	; (8013ca0 <tcp_bind+0x124>)
 8013bc2:	4836      	ldr	r0, [pc, #216]	; (8013c9c <tcp_bind+0x120>)
 8013bc4:	f009 f940 	bl	801ce48 <iprintf>
 8013bc8:	f06f 0305 	mvn.w	r3, #5
 8013bcc:	e05c      	b.n	8013c88 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013bce:	88fb      	ldrh	r3, [r7, #6]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d109      	bne.n	8013be8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013bd4:	f000 f914 	bl	8013e00 <tcp_new_port>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013bdc:	88fb      	ldrh	r3, [r7, #6]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d135      	bne.n	8013c4e <tcp_bind+0xd2>
      return ERR_BUF;
 8013be2:	f06f 0301 	mvn.w	r3, #1
 8013be6:	e04f      	b.n	8013c88 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013be8:	2300      	movs	r3, #0
 8013bea:	61fb      	str	r3, [r7, #28]
 8013bec:	e02b      	b.n	8013c46 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013bee:	4a2d      	ldr	r2, [pc, #180]	; (8013ca4 <tcp_bind+0x128>)
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	61bb      	str	r3, [r7, #24]
 8013bfa:	e01e      	b.n	8013c3a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013bfc:	69bb      	ldr	r3, [r7, #24]
 8013bfe:	8adb      	ldrh	r3, [r3, #22]
 8013c00:	88fa      	ldrh	r2, [r7, #6]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d116      	bne.n	8013c34 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013c06:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d010      	beq.n	8013c2e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00c      	beq.n	8013c2e <tcp_bind+0xb2>
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d009      	beq.n	8013c2e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d005      	beq.n	8013c2e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d102      	bne.n	8013c34 <tcp_bind+0xb8>
              return ERR_USE;
 8013c2e:	f06f 0307 	mvn.w	r3, #7
 8013c32:	e029      	b.n	8013c88 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	61bb      	str	r3, [r7, #24]
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1dd      	bne.n	8013bfc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	3301      	adds	r3, #1
 8013c44:	61fb      	str	r3, [r7, #28]
 8013c46:	69fa      	ldr	r2, [r7, #28]
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	dbcf      	blt.n	8013bee <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00c      	beq.n	8013c6e <tcp_bind+0xf2>
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d008      	beq.n	8013c6e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d002      	beq.n	8013c68 <tcp_bind+0xec>
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	e000      	b.n	8013c6a <tcp_bind+0xee>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	88fa      	ldrh	r2, [r7, #6]
 8013c72:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013c74:	4b0c      	ldr	r3, [pc, #48]	; (8013ca8 <tcp_bind+0x12c>)
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	60da      	str	r2, [r3, #12]
 8013c7c:	4a0a      	ldr	r2, [pc, #40]	; (8013ca8 <tcp_bind+0x12c>)
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	6013      	str	r3, [r2, #0]
 8013c82:	f005 fbd1 	bl	8019428 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3720      	adds	r7, #32
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	08021a7c 	.word	0x08021a7c
 8013c94:	0801fa34 	.word	0x0801fa34
 8013c98:	0801fbc8 	.word	0x0801fbc8
 8013c9c:	0801fa78 	.word	0x0801fa78
 8013ca0:	0801fbe0 	.word	0x0801fbe0
 8013ca4:	08021a54 	.word	0x08021a54
 8013ca8:	2000df24 	.word	0x2000df24

08013cac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d106      	bne.n	8013cc8 <tcp_update_rcv_ann_wnd+0x1c>
 8013cba:	4b25      	ldr	r3, [pc, #148]	; (8013d50 <tcp_update_rcv_ann_wnd+0xa4>)
 8013cbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013cc0:	4924      	ldr	r1, [pc, #144]	; (8013d54 <tcp_update_rcv_ann_wnd+0xa8>)
 8013cc2:	4825      	ldr	r0, [pc, #148]	; (8013d58 <tcp_update_rcv_ann_wnd+0xac>)
 8013cc4:	f009 f8c0 	bl	801ce48 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ccc:	687a      	ldr	r2, [r7, #4]
 8013cce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013cd0:	4413      	add	r3, r2
 8013cd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013cdc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013ce0:	bf28      	it	cs
 8013ce2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013ce6:	b292      	uxth	r2, r2
 8013ce8:	4413      	add	r3, r2
 8013cea:	68fa      	ldr	r2, [r7, #12]
 8013cec:	1ad3      	subs	r3, r2, r3
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	db08      	blt.n	8013d04 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cfe:	68fa      	ldr	r2, [r7, #12]
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	e020      	b.n	8013d46 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0c:	1ad3      	subs	r3, r2, r3
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	dd03      	ble.n	8013d1a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013d18:	e014      	b.n	8013d44 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d22:	1ad3      	subs	r3, r2, r3
 8013d24:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d2c:	d306      	bcc.n	8013d3c <tcp_update_rcv_ann_wnd+0x90>
 8013d2e:	4b08      	ldr	r3, [pc, #32]	; (8013d50 <tcp_update_rcv_ann_wnd+0xa4>)
 8013d30:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013d34:	4909      	ldr	r1, [pc, #36]	; (8013d5c <tcp_update_rcv_ann_wnd+0xb0>)
 8013d36:	4808      	ldr	r0, [pc, #32]	; (8013d58 <tcp_update_rcv_ann_wnd+0xac>)
 8013d38:	f009 f886 	bl	801ce48 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013d44:	2300      	movs	r3, #0
  }
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	0801fa34 	.word	0x0801fa34
 8013d54:	0801fc90 	.word	0x0801fc90
 8013d58:	0801fa78 	.word	0x0801fa78
 8013d5c:	0801fcb4 	.word	0x0801fcb4

08013d60 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	460b      	mov	r3, r1
 8013d6a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d107      	bne.n	8013d82 <tcp_recved+0x22>
 8013d72:	4b1f      	ldr	r3, [pc, #124]	; (8013df0 <tcp_recved+0x90>)
 8013d74:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013d78:	491e      	ldr	r1, [pc, #120]	; (8013df4 <tcp_recved+0x94>)
 8013d7a:	481f      	ldr	r0, [pc, #124]	; (8013df8 <tcp_recved+0x98>)
 8013d7c:	f009 f864 	bl	801ce48 <iprintf>
 8013d80:	e032      	b.n	8013de8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	7d1b      	ldrb	r3, [r3, #20]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d106      	bne.n	8013d98 <tcp_recved+0x38>
 8013d8a:	4b19      	ldr	r3, [pc, #100]	; (8013df0 <tcp_recved+0x90>)
 8013d8c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013d90:	491a      	ldr	r1, [pc, #104]	; (8013dfc <tcp_recved+0x9c>)
 8013d92:	4819      	ldr	r0, [pc, #100]	; (8013df8 <tcp_recved+0x98>)
 8013d94:	f009 f858 	bl	801ce48 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d9c:	887b      	ldrh	r3, [r7, #2]
 8013d9e:	4413      	add	r3, r2
 8013da0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013da2:	89fb      	ldrh	r3, [r7, #14]
 8013da4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013da8:	d804      	bhi.n	8013db4 <tcp_recved+0x54>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dae:	89fa      	ldrh	r2, [r7, #14]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d204      	bcs.n	8013dbe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013dba:	851a      	strh	r2, [r3, #40]	; 0x28
 8013dbc:	e002      	b.n	8013dc4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	89fa      	ldrh	r2, [r7, #14]
 8013dc2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7ff ff71 	bl	8013cac <tcp_update_rcv_ann_wnd>
 8013dca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013dd2:	d309      	bcc.n	8013de8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	8b5b      	ldrh	r3, [r3, #26]
 8013dd8:	f043 0302 	orr.w	r3, r3, #2
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f004 fbaa 	bl	801853c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	0801fa34 	.word	0x0801fa34
 8013df4:	0801fcd0 	.word	0x0801fcd0
 8013df8:	0801fa78 	.word	0x0801fa78
 8013dfc:	0801fce8 	.word	0x0801fce8

08013e00 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013e0a:	4b1e      	ldr	r3, [pc, #120]	; (8013e84 <tcp_new_port+0x84>)
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	4b1c      	ldr	r3, [pc, #112]	; (8013e84 <tcp_new_port+0x84>)
 8013e14:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013e16:	4b1b      	ldr	r3, [pc, #108]	; (8013e84 <tcp_new_port+0x84>)
 8013e18:	881b      	ldrh	r3, [r3, #0]
 8013e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	d103      	bne.n	8013e2a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013e22:	4b18      	ldr	r3, [pc, #96]	; (8013e84 <tcp_new_port+0x84>)
 8013e24:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013e28:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	71fb      	strb	r3, [r7, #7]
 8013e2e:	e01e      	b.n	8013e6e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e30:	79fb      	ldrb	r3, [r7, #7]
 8013e32:	4a15      	ldr	r2, [pc, #84]	; (8013e88 <tcp_new_port+0x88>)
 8013e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	603b      	str	r3, [r7, #0]
 8013e3c:	e011      	b.n	8013e62 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	8ada      	ldrh	r2, [r3, #22]
 8013e42:	4b10      	ldr	r3, [pc, #64]	; (8013e84 <tcp_new_port+0x84>)
 8013e44:	881b      	ldrh	r3, [r3, #0]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d108      	bne.n	8013e5c <tcp_new_port+0x5c>
        n++;
 8013e4a:	88bb      	ldrh	r3, [r7, #4]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013e50:	88bb      	ldrh	r3, [r7, #4]
 8013e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013e56:	d3d8      	bcc.n	8013e0a <tcp_new_port+0xa>
          return 0;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	e00d      	b.n	8013e78 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	603b      	str	r3, [r7, #0]
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1ea      	bne.n	8013e3e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e68:	79fb      	ldrb	r3, [r7, #7]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	71fb      	strb	r3, [r7, #7]
 8013e6e:	79fb      	ldrb	r3, [r7, #7]
 8013e70:	2b03      	cmp	r3, #3
 8013e72:	d9dd      	bls.n	8013e30 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013e74:	4b03      	ldr	r3, [pc, #12]	; (8013e84 <tcp_new_port+0x84>)
 8013e76:	881b      	ldrh	r3, [r3, #0]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr
 8013e84:	200002ec 	.word	0x200002ec
 8013e88:	08021a54 	.word	0x08021a54

08013e8c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013e8c:	b5b0      	push	{r4, r5, r7, lr}
 8013e8e:	b090      	sub	sp, #64	; 0x40
 8013e90:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013e92:	2300      	movs	r3, #0
 8013e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013e98:	4b94      	ldr	r3, [pc, #592]	; (80140ec <tcp_slowtmr+0x260>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	4a93      	ldr	r2, [pc, #588]	; (80140ec <tcp_slowtmr+0x260>)
 8013ea0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013ea2:	4b93      	ldr	r3, [pc, #588]	; (80140f0 <tcp_slowtmr+0x264>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	b2da      	uxtb	r2, r3
 8013eaa:	4b91      	ldr	r3, [pc, #580]	; (80140f0 <tcp_slowtmr+0x264>)
 8013eac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013eb2:	4b90      	ldr	r3, [pc, #576]	; (80140f4 <tcp_slowtmr+0x268>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013eb8:	e29f      	b.n	80143fa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebc:	7d1b      	ldrb	r3, [r3, #20]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d106      	bne.n	8013ed0 <tcp_slowtmr+0x44>
 8013ec2:	4b8d      	ldr	r3, [pc, #564]	; (80140f8 <tcp_slowtmr+0x26c>)
 8013ec4:	f240 42be 	movw	r2, #1214	; 0x4be
 8013ec8:	498c      	ldr	r1, [pc, #560]	; (80140fc <tcp_slowtmr+0x270>)
 8013eca:	488d      	ldr	r0, [pc, #564]	; (8014100 <tcp_slowtmr+0x274>)
 8013ecc:	f008 ffbc 	bl	801ce48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed2:	7d1b      	ldrb	r3, [r3, #20]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d106      	bne.n	8013ee6 <tcp_slowtmr+0x5a>
 8013ed8:	4b87      	ldr	r3, [pc, #540]	; (80140f8 <tcp_slowtmr+0x26c>)
 8013eda:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013ede:	4989      	ldr	r1, [pc, #548]	; (8014104 <tcp_slowtmr+0x278>)
 8013ee0:	4887      	ldr	r0, [pc, #540]	; (8014100 <tcp_slowtmr+0x274>)
 8013ee2:	f008 ffb1 	bl	801ce48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee8:	7d1b      	ldrb	r3, [r3, #20]
 8013eea:	2b0a      	cmp	r3, #10
 8013eec:	d106      	bne.n	8013efc <tcp_slowtmr+0x70>
 8013eee:	4b82      	ldr	r3, [pc, #520]	; (80140f8 <tcp_slowtmr+0x26c>)
 8013ef0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013ef4:	4984      	ldr	r1, [pc, #528]	; (8014108 <tcp_slowtmr+0x27c>)
 8013ef6:	4882      	ldr	r0, [pc, #520]	; (8014100 <tcp_slowtmr+0x274>)
 8013ef8:	f008 ffa6 	bl	801ce48 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efe:	7f9a      	ldrb	r2, [r3, #30]
 8013f00:	4b7b      	ldr	r3, [pc, #492]	; (80140f0 <tcp_slowtmr+0x264>)
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d105      	bne.n	8013f14 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013f12:	e272      	b.n	80143fa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013f14:	4b76      	ldr	r3, [pc, #472]	; (80140f0 <tcp_slowtmr+0x264>)
 8013f16:	781a      	ldrb	r2, [r3, #0]
 8013f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013f22:	2300      	movs	r3, #0
 8013f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2a:	7d1b      	ldrb	r3, [r3, #20]
 8013f2c:	2b02      	cmp	r3, #2
 8013f2e:	d10a      	bne.n	8013f46 <tcp_slowtmr+0xba>
 8013f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f36:	2b05      	cmp	r3, #5
 8013f38:	d905      	bls.n	8013f46 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f3e:	3301      	adds	r3, #1
 8013f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f44:	e11e      	b.n	8014184 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f4c:	2b0b      	cmp	r3, #11
 8013f4e:	d905      	bls.n	8013f5c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f54:	3301      	adds	r3, #1
 8013f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f5a:	e113      	b.n	8014184 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d075      	beq.n	8014052 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d006      	beq.n	8013f7c <tcp_slowtmr+0xf0>
 8013f6e:	4b62      	ldr	r3, [pc, #392]	; (80140f8 <tcp_slowtmr+0x26c>)
 8013f70:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013f74:	4965      	ldr	r1, [pc, #404]	; (801410c <tcp_slowtmr+0x280>)
 8013f76:	4862      	ldr	r0, [pc, #392]	; (8014100 <tcp_slowtmr+0x274>)
 8013f78:	f008 ff66 	bl	801ce48 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d106      	bne.n	8013f92 <tcp_slowtmr+0x106>
 8013f84:	4b5c      	ldr	r3, [pc, #368]	; (80140f8 <tcp_slowtmr+0x26c>)
 8013f86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013f8a:	4961      	ldr	r1, [pc, #388]	; (8014110 <tcp_slowtmr+0x284>)
 8013f8c:	485c      	ldr	r0, [pc, #368]	; (8014100 <tcp_slowtmr+0x274>)
 8013f8e:	f008 ff5b 	bl	801ce48 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013f98:	2b0b      	cmp	r3, #11
 8013f9a:	d905      	bls.n	8013fa8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fa6:	e0ed      	b.n	8014184 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013faa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013fae:	3b01      	subs	r3, #1
 8013fb0:	4a58      	ldr	r2, [pc, #352]	; (8014114 <tcp_slowtmr+0x288>)
 8013fb2:	5cd3      	ldrb	r3, [r2, r3]
 8013fb4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fbc:	7c7a      	ldrb	r2, [r7, #17]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d907      	bls.n	8013fd2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fc8:	3301      	adds	r3, #1
 8013fca:	b2da      	uxtb	r2, r3
 8013fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fd8:	7c7a      	ldrb	r2, [r7, #17]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	f200 80d2 	bhi.w	8014184 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d108      	bne.n	8014000 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ff0:	f005 f94c 	bl	801928c <tcp_zero_window_probe>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d014      	beq.n	8014024 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	623b      	str	r3, [r7, #32]
 8013ffe:	e011      	b.n	8014024 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014006:	4619      	mov	r1, r3
 8014008:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801400a:	f004 f811 	bl	8018030 <tcp_split_unsent_seg>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d107      	bne.n	8014024 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014016:	f004 fa91 	bl	801853c <tcp_output>
 801401a:	4603      	mov	r3, r0
 801401c:	2b00      	cmp	r3, #0
 801401e:	d101      	bne.n	8014024 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014020:	2300      	movs	r3, #0
 8014022:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	2b00      	cmp	r3, #0
 8014028:	f000 80ac 	beq.w	8014184 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801402e:	2200      	movs	r2, #0
 8014030:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014036:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801403a:	2b06      	cmp	r3, #6
 801403c:	f200 80a2 	bhi.w	8014184 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014046:	3301      	adds	r3, #1
 8014048:	b2da      	uxtb	r2, r3
 801404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801404c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014050:	e098      	b.n	8014184 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014054:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014058:	2b00      	cmp	r3, #0
 801405a:	db0f      	blt.n	801407c <tcp_slowtmr+0x1f0>
 801405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014062:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014066:	4293      	cmp	r3, r2
 8014068:	d008      	beq.n	801407c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014070:	b29b      	uxth	r3, r3
 8014072:	3301      	adds	r3, #1
 8014074:	b29b      	uxth	r3, r3
 8014076:	b21a      	sxth	r2, r3
 8014078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014084:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014088:	429a      	cmp	r2, r3
 801408a:	db7b      	blt.n	8014184 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801408c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801408e:	f004 fd47 	bl	8018b20 <tcp_rexmit_rto_prepare>
 8014092:	4603      	mov	r3, r0
 8014094:	2b00      	cmp	r3, #0
 8014096:	d007      	beq.n	80140a8 <tcp_slowtmr+0x21c>
 8014098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801409c:	2b00      	cmp	r3, #0
 801409e:	d171      	bne.n	8014184 <tcp_slowtmr+0x2f8>
 80140a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d06d      	beq.n	8014184 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140aa:	7d1b      	ldrb	r3, [r3, #20]
 80140ac:	2b02      	cmp	r3, #2
 80140ae:	d03a      	beq.n	8014126 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80140b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140b6:	2b0c      	cmp	r3, #12
 80140b8:	bf28      	it	cs
 80140ba:	230c      	movcs	r3, #12
 80140bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80140be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140c4:	10db      	asrs	r3, r3, #3
 80140c6:	b21b      	sxth	r3, r3
 80140c8:	461a      	mov	r2, r3
 80140ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140d0:	4413      	add	r3, r2
 80140d2:	7efa      	ldrb	r2, [r7, #27]
 80140d4:	4910      	ldr	r1, [pc, #64]	; (8014118 <tcp_slowtmr+0x28c>)
 80140d6:	5c8a      	ldrb	r2, [r1, r2]
 80140d8:	4093      	lsls	r3, r2
 80140da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80140e2:	4293      	cmp	r3, r2
 80140e4:	dc1a      	bgt.n	801411c <tcp_slowtmr+0x290>
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	b21a      	sxth	r2, r3
 80140ea:	e019      	b.n	8014120 <tcp_slowtmr+0x294>
 80140ec:	2000df1c 	.word	0x2000df1c
 80140f0:	20006be2 	.word	0x20006be2
 80140f4:	2000df18 	.word	0x2000df18
 80140f8:	0801fa34 	.word	0x0801fa34
 80140fc:	0801fd78 	.word	0x0801fd78
 8014100:	0801fa78 	.word	0x0801fa78
 8014104:	0801fda4 	.word	0x0801fda4
 8014108:	0801fdd0 	.word	0x0801fdd0
 801410c:	0801fe00 	.word	0x0801fe00
 8014110:	0801fe34 	.word	0x0801fe34
 8014114:	08021a4c 	.word	0x08021a4c
 8014118:	08021a3c 	.word	0x08021a3c
 801411c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8014126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014128:	2200      	movs	r2, #0
 801412a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014138:	4293      	cmp	r3, r2
 801413a:	bf28      	it	cs
 801413c:	4613      	movcs	r3, r2
 801413e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014140:	8a7b      	ldrh	r3, [r7, #18]
 8014142:	085b      	lsrs	r3, r3, #1
 8014144:	b29a      	uxth	r2, r3
 8014146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014148:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	b29b      	uxth	r3, r3
 801415a:	429a      	cmp	r2, r3
 801415c:	d206      	bcs.n	801416c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014162:	005b      	lsls	r3, r3, #1
 8014164:	b29a      	uxth	r2, r3
 8014166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014168:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8014176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014178:	2200      	movs	r2, #0
 801417a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801417e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014180:	f004 fd3e 	bl	8018c00 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014186:	7d1b      	ldrb	r3, [r3, #20]
 8014188:	2b06      	cmp	r3, #6
 801418a:	d111      	bne.n	80141b0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418e:	8b5b      	ldrh	r3, [r3, #26]
 8014190:	f003 0310 	and.w	r3, r3, #16
 8014194:	2b00      	cmp	r3, #0
 8014196:	d00b      	beq.n	80141b0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014198:	4b9d      	ldr	r3, [pc, #628]	; (8014410 <tcp_slowtmr+0x584>)
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419e:	6a1b      	ldr	r3, [r3, #32]
 80141a0:	1ad3      	subs	r3, r2, r3
 80141a2:	2b28      	cmp	r3, #40	; 0x28
 80141a4:	d904      	bls.n	80141b0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80141a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141aa:	3301      	adds	r3, #1
 80141ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80141b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b2:	7a5b      	ldrb	r3, [r3, #9]
 80141b4:	f003 0308 	and.w	r3, r3, #8
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d04c      	beq.n	8014256 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80141c0:	2b04      	cmp	r3, #4
 80141c2:	d003      	beq.n	80141cc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80141c8:	2b07      	cmp	r3, #7
 80141ca:	d144      	bne.n	8014256 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141cc:	4b90      	ldr	r3, [pc, #576]	; (8014410 <tcp_slowtmr+0x584>)
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d2:	6a1b      	ldr	r3, [r3, #32]
 80141d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80141d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80141dc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80141e0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80141e4:	498b      	ldr	r1, [pc, #556]	; (8014414 <tcp_slowtmr+0x588>)
 80141e6:	fba1 1303 	umull	r1, r3, r1, r3
 80141ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d90a      	bls.n	8014206 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80141f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f4:	3301      	adds	r3, #1
 80141f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80141fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141fe:	3301      	adds	r3, #1
 8014200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014204:	e027      	b.n	8014256 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014206:	4b82      	ldr	r3, [pc, #520]	; (8014410 <tcp_slowtmr+0x584>)
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420c:	6a1b      	ldr	r3, [r3, #32]
 801420e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014212:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014218:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801421c:	4618      	mov	r0, r3
 801421e:	4b7e      	ldr	r3, [pc, #504]	; (8014418 <tcp_slowtmr+0x58c>)
 8014220:	fb03 f300 	mul.w	r3, r3, r0
 8014224:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014226:	497b      	ldr	r1, [pc, #492]	; (8014414 <tcp_slowtmr+0x588>)
 8014228:	fba1 1303 	umull	r1, r3, r1, r3
 801422c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801422e:	429a      	cmp	r2, r3
 8014230:	d911      	bls.n	8014256 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014234:	f004 ffea 	bl	801920c <tcp_keepalive>
 8014238:	4603      	mov	r3, r0
 801423a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801423e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014242:	2b00      	cmp	r3, #0
 8014244:	d107      	bne.n	8014256 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014248:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801424c:	3301      	adds	r3, #1
 801424e:	b2da      	uxtb	r2, r3
 8014250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014252:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8014256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801425a:	2b00      	cmp	r3, #0
 801425c:	d011      	beq.n	8014282 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801425e:	4b6c      	ldr	r3, [pc, #432]	; (8014410 <tcp_slowtmr+0x584>)
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014264:	6a1b      	ldr	r3, [r3, #32]
 8014266:	1ad2      	subs	r2, r2, r3
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801426e:	4619      	mov	r1, r3
 8014270:	460b      	mov	r3, r1
 8014272:	005b      	lsls	r3, r3, #1
 8014274:	440b      	add	r3, r1
 8014276:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014278:	429a      	cmp	r2, r3
 801427a:	d302      	bcc.n	8014282 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801427c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801427e:	f000 fea9 	bl	8014fd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014284:	7d1b      	ldrb	r3, [r3, #20]
 8014286:	2b03      	cmp	r3, #3
 8014288:	d10b      	bne.n	80142a2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801428a:	4b61      	ldr	r3, [pc, #388]	; (8014410 <tcp_slowtmr+0x584>)
 801428c:	681a      	ldr	r2, [r3, #0]
 801428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014290:	6a1b      	ldr	r3, [r3, #32]
 8014292:	1ad3      	subs	r3, r2, r3
 8014294:	2b28      	cmp	r3, #40	; 0x28
 8014296:	d904      	bls.n	80142a2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801429c:	3301      	adds	r3, #1
 801429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80142a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a4:	7d1b      	ldrb	r3, [r3, #20]
 80142a6:	2b09      	cmp	r3, #9
 80142a8:	d10b      	bne.n	80142c2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80142aa:	4b59      	ldr	r3, [pc, #356]	; (8014410 <tcp_slowtmr+0x584>)
 80142ac:	681a      	ldr	r2, [r3, #0]
 80142ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b0:	6a1b      	ldr	r3, [r3, #32]
 80142b2:	1ad3      	subs	r3, r2, r3
 80142b4:	2bf0      	cmp	r3, #240	; 0xf0
 80142b6:	d904      	bls.n	80142c2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80142b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142bc:	3301      	adds	r3, #1
 80142be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80142c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d060      	beq.n	801438c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80142ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142d0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80142d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142d4:	f000 fcca 	bl	8014c6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80142d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d010      	beq.n	8014300 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80142de:	4b4f      	ldr	r3, [pc, #316]	; (801441c <tcp_slowtmr+0x590>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d106      	bne.n	80142f6 <tcp_slowtmr+0x46a>
 80142e8:	4b4d      	ldr	r3, [pc, #308]	; (8014420 <tcp_slowtmr+0x594>)
 80142ea:	f240 526d 	movw	r2, #1389	; 0x56d
 80142ee:	494d      	ldr	r1, [pc, #308]	; (8014424 <tcp_slowtmr+0x598>)
 80142f0:	484d      	ldr	r0, [pc, #308]	; (8014428 <tcp_slowtmr+0x59c>)
 80142f2:	f008 fda9 	bl	801ce48 <iprintf>
        prev->next = pcb->next;
 80142f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f8:	68da      	ldr	r2, [r3, #12]
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	60da      	str	r2, [r3, #12]
 80142fe:	e00f      	b.n	8014320 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014300:	4b46      	ldr	r3, [pc, #280]	; (801441c <tcp_slowtmr+0x590>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014306:	429a      	cmp	r2, r3
 8014308:	d006      	beq.n	8014318 <tcp_slowtmr+0x48c>
 801430a:	4b45      	ldr	r3, [pc, #276]	; (8014420 <tcp_slowtmr+0x594>)
 801430c:	f240 5271 	movw	r2, #1393	; 0x571
 8014310:	4946      	ldr	r1, [pc, #280]	; (801442c <tcp_slowtmr+0x5a0>)
 8014312:	4845      	ldr	r0, [pc, #276]	; (8014428 <tcp_slowtmr+0x59c>)
 8014314:	f008 fd98 	bl	801ce48 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	4a3f      	ldr	r2, [pc, #252]	; (801441c <tcp_slowtmr+0x590>)
 801431e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014324:	2b00      	cmp	r3, #0
 8014326:	d013      	beq.n	8014350 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014330:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014334:	3304      	adds	r3, #4
 8014336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014338:	8ad2      	ldrh	r2, [r2, #22]
 801433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801433c:	8b09      	ldrh	r1, [r1, #24]
 801433e:	9102      	str	r1, [sp, #8]
 8014340:	9201      	str	r2, [sp, #4]
 8014342:	9300      	str	r3, [sp, #0]
 8014344:	462b      	mov	r3, r5
 8014346:	4622      	mov	r2, r4
 8014348:	4601      	mov	r1, r0
 801434a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801434c:	f004 feaa 	bl	80190a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014352:	691b      	ldr	r3, [r3, #16]
 8014354:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014358:	7d1b      	ldrb	r3, [r3, #20]
 801435a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014366:	6838      	ldr	r0, [r7, #0]
 8014368:	f7ff f8b8 	bl	80134dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 801436c:	4b30      	ldr	r3, [pc, #192]	; (8014430 <tcp_slowtmr+0x5a4>)
 801436e:	2200      	movs	r2, #0
 8014370:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d004      	beq.n	8014382 <tcp_slowtmr+0x4f6>
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	f06f 010c 	mvn.w	r1, #12
 801437e:	68b8      	ldr	r0, [r7, #8]
 8014380:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014382:	4b2b      	ldr	r3, [pc, #172]	; (8014430 <tcp_slowtmr+0x5a4>)
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d037      	beq.n	80143fa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801438a:	e590      	b.n	8013eae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014398:	7f1b      	ldrb	r3, [r3, #28]
 801439a:	3301      	adds	r3, #1
 801439c:	b2da      	uxtb	r2, r3
 801439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80143a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a4:	7f1a      	ldrb	r2, [r3, #28]
 80143a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a8:	7f5b      	ldrb	r3, [r3, #29]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d325      	bcc.n	80143fa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80143ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b0:	2200      	movs	r2, #0
 80143b2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80143b4:	4b1e      	ldr	r3, [pc, #120]	; (8014430 <tcp_slowtmr+0x5a4>)
 80143b6:	2200      	movs	r2, #0
 80143b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80143ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d00b      	beq.n	80143dc <tcp_slowtmr+0x550>
 80143c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143cc:	6912      	ldr	r2, [r2, #16]
 80143ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143d0:	4610      	mov	r0, r2
 80143d2:	4798      	blx	r3
 80143d4:	4603      	mov	r3, r0
 80143d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80143da:	e002      	b.n	80143e2 <tcp_slowtmr+0x556>
 80143dc:	2300      	movs	r3, #0
 80143de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80143e2:	4b13      	ldr	r3, [pc, #76]	; (8014430 <tcp_slowtmr+0x5a4>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d000      	beq.n	80143ec <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80143ea:	e560      	b.n	8013eae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80143ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d102      	bne.n	80143fa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80143f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143f6:	f004 f8a1 	bl	801853c <tcp_output>
  while (pcb != NULL) {
 80143fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f47f ad5c 	bne.w	8013eba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014402:	2300      	movs	r3, #0
 8014404:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014406:	4b0b      	ldr	r3, [pc, #44]	; (8014434 <tcp_slowtmr+0x5a8>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801440c:	e067      	b.n	80144de <tcp_slowtmr+0x652>
 801440e:	bf00      	nop
 8014410:	2000df1c 	.word	0x2000df1c
 8014414:	10624dd3 	.word	0x10624dd3
 8014418:	000124f8 	.word	0x000124f8
 801441c:	2000df18 	.word	0x2000df18
 8014420:	0801fa34 	.word	0x0801fa34
 8014424:	0801fe6c 	.word	0x0801fe6c
 8014428:	0801fa78 	.word	0x0801fa78
 801442c:	0801fe98 	.word	0x0801fe98
 8014430:	2000df14 	.word	0x2000df14
 8014434:	2000df28 	.word	0x2000df28
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443a:	7d1b      	ldrb	r3, [r3, #20]
 801443c:	2b0a      	cmp	r3, #10
 801443e:	d006      	beq.n	801444e <tcp_slowtmr+0x5c2>
 8014440:	4b2b      	ldr	r3, [pc, #172]	; (80144f0 <tcp_slowtmr+0x664>)
 8014442:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014446:	492b      	ldr	r1, [pc, #172]	; (80144f4 <tcp_slowtmr+0x668>)
 8014448:	482b      	ldr	r0, [pc, #172]	; (80144f8 <tcp_slowtmr+0x66c>)
 801444a:	f008 fcfd 	bl	801ce48 <iprintf>
    pcb_remove = 0;
 801444e:	2300      	movs	r3, #0
 8014450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014454:	4b29      	ldr	r3, [pc, #164]	; (80144fc <tcp_slowtmr+0x670>)
 8014456:	681a      	ldr	r2, [r3, #0]
 8014458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801445a:	6a1b      	ldr	r3, [r3, #32]
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	2bf0      	cmp	r3, #240	; 0xf0
 8014460:	d904      	bls.n	801446c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014466:	3301      	adds	r3, #1
 8014468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801446c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014470:	2b00      	cmp	r3, #0
 8014472:	d02f      	beq.n	80144d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014476:	f000 fbf9 	bl	8014c6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447c:	2b00      	cmp	r3, #0
 801447e:	d010      	beq.n	80144a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014480:	4b1f      	ldr	r3, [pc, #124]	; (8014500 <tcp_slowtmr+0x674>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014486:	429a      	cmp	r2, r3
 8014488:	d106      	bne.n	8014498 <tcp_slowtmr+0x60c>
 801448a:	4b19      	ldr	r3, [pc, #100]	; (80144f0 <tcp_slowtmr+0x664>)
 801448c:	f240 52af 	movw	r2, #1455	; 0x5af
 8014490:	491c      	ldr	r1, [pc, #112]	; (8014504 <tcp_slowtmr+0x678>)
 8014492:	4819      	ldr	r0, [pc, #100]	; (80144f8 <tcp_slowtmr+0x66c>)
 8014494:	f008 fcd8 	bl	801ce48 <iprintf>
        prev->next = pcb->next;
 8014498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449a:	68da      	ldr	r2, [r3, #12]
 801449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449e:	60da      	str	r2, [r3, #12]
 80144a0:	e00f      	b.n	80144c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80144a2:	4b17      	ldr	r3, [pc, #92]	; (8014500 <tcp_slowtmr+0x674>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d006      	beq.n	80144ba <tcp_slowtmr+0x62e>
 80144ac:	4b10      	ldr	r3, [pc, #64]	; (80144f0 <tcp_slowtmr+0x664>)
 80144ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80144b2:	4915      	ldr	r1, [pc, #84]	; (8014508 <tcp_slowtmr+0x67c>)
 80144b4:	4810      	ldr	r0, [pc, #64]	; (80144f8 <tcp_slowtmr+0x66c>)
 80144b6:	f008 fcc7 	bl	801ce48 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80144ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144bc:	68db      	ldr	r3, [r3, #12]
 80144be:	4a10      	ldr	r2, [pc, #64]	; (8014500 <tcp_slowtmr+0x674>)
 80144c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80144c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80144c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c8:	68db      	ldr	r3, [r3, #12]
 80144ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80144cc:	69f8      	ldr	r0, [r7, #28]
 80144ce:	f7ff f805 	bl	80134dc <tcp_free>
 80144d2:	e004      	b.n	80144de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80144d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80144d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80144de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d1a9      	bne.n	8014438 <tcp_slowtmr+0x5ac>
    }
  }
}
 80144e4:	bf00      	nop
 80144e6:	bf00      	nop
 80144e8:	3730      	adds	r7, #48	; 0x30
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bdb0      	pop	{r4, r5, r7, pc}
 80144ee:	bf00      	nop
 80144f0:	0801fa34 	.word	0x0801fa34
 80144f4:	0801fec4 	.word	0x0801fec4
 80144f8:	0801fa78 	.word	0x0801fa78
 80144fc:	2000df1c 	.word	0x2000df1c
 8014500:	2000df28 	.word	0x2000df28
 8014504:	0801fef4 	.word	0x0801fef4
 8014508:	0801ff1c 	.word	0x0801ff1c

0801450c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014512:	4b2d      	ldr	r3, [pc, #180]	; (80145c8 <tcp_fasttmr+0xbc>)
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	3301      	adds	r3, #1
 8014518:	b2da      	uxtb	r2, r3
 801451a:	4b2b      	ldr	r3, [pc, #172]	; (80145c8 <tcp_fasttmr+0xbc>)
 801451c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801451e:	4b2b      	ldr	r3, [pc, #172]	; (80145cc <tcp_fasttmr+0xc0>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014524:	e048      	b.n	80145b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	7f9a      	ldrb	r2, [r3, #30]
 801452a:	4b27      	ldr	r3, [pc, #156]	; (80145c8 <tcp_fasttmr+0xbc>)
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	429a      	cmp	r2, r3
 8014530:	d03f      	beq.n	80145b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014532:	4b25      	ldr	r3, [pc, #148]	; (80145c8 <tcp_fasttmr+0xbc>)
 8014534:	781a      	ldrb	r2, [r3, #0]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	8b5b      	ldrh	r3, [r3, #26]
 801453e:	f003 0301 	and.w	r3, r3, #1
 8014542:	2b00      	cmp	r3, #0
 8014544:	d010      	beq.n	8014568 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	8b5b      	ldrh	r3, [r3, #26]
 801454a:	f043 0302 	orr.w	r3, r3, #2
 801454e:	b29a      	uxth	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f003 fff1 	bl	801853c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	8b5b      	ldrh	r3, [r3, #26]
 801455e:	f023 0303 	bic.w	r3, r3, #3
 8014562:	b29a      	uxth	r2, r3
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	8b5b      	ldrh	r3, [r3, #26]
 801456c:	f003 0308 	and.w	r3, r3, #8
 8014570:	2b00      	cmp	r3, #0
 8014572:	d009      	beq.n	8014588 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	8b5b      	ldrh	r3, [r3, #26]
 8014578:	f023 0308 	bic.w	r3, r3, #8
 801457c:	b29a      	uxth	r2, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f7ff f93e 	bl	8013804 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00a      	beq.n	80145ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014596:	4b0e      	ldr	r3, [pc, #56]	; (80145d0 <tcp_fasttmr+0xc4>)
 8014598:	2200      	movs	r2, #0
 801459a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f000 f819 	bl	80145d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80145a2:	4b0b      	ldr	r3, [pc, #44]	; (80145d0 <tcp_fasttmr+0xc4>)
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d000      	beq.n	80145ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80145aa:	e7b8      	b.n	801451e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	607b      	str	r3, [r7, #4]
 80145b0:	e002      	b.n	80145b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	68db      	ldr	r3, [r3, #12]
 80145b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d1b3      	bne.n	8014526 <tcp_fasttmr+0x1a>
    }
  }
}
 80145be:	bf00      	nop
 80145c0:	bf00      	nop
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	20006be2 	.word	0x20006be2
 80145cc:	2000df18 	.word	0x2000df18
 80145d0:	2000df14 	.word	0x2000df14

080145d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80145d4:	b590      	push	{r4, r7, lr}
 80145d6:	b085      	sub	sp, #20
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d109      	bne.n	80145f6 <tcp_process_refused_data+0x22>
 80145e2:	4b37      	ldr	r3, [pc, #220]	; (80146c0 <tcp_process_refused_data+0xec>)
 80145e4:	f240 6209 	movw	r2, #1545	; 0x609
 80145e8:	4936      	ldr	r1, [pc, #216]	; (80146c4 <tcp_process_refused_data+0xf0>)
 80145ea:	4837      	ldr	r0, [pc, #220]	; (80146c8 <tcp_process_refused_data+0xf4>)
 80145ec:	f008 fc2c 	bl	801ce48 <iprintf>
 80145f0:	f06f 030f 	mvn.w	r3, #15
 80145f4:	e060      	b.n	80146b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145fa:	7b5b      	ldrb	r3, [r3, #13]
 80145fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014602:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2200      	movs	r2, #0
 8014608:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014610:	2b00      	cmp	r3, #0
 8014612:	d00b      	beq.n	801462c <tcp_process_refused_data+0x58>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	6918      	ldr	r0, [r3, #16]
 801461e:	2300      	movs	r3, #0
 8014620:	68ba      	ldr	r2, [r7, #8]
 8014622:	6879      	ldr	r1, [r7, #4]
 8014624:	47a0      	blx	r4
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]
 801462a:	e007      	b.n	801463c <tcp_process_refused_data+0x68>
 801462c:	2300      	movs	r3, #0
 801462e:	68ba      	ldr	r2, [r7, #8]
 8014630:	6879      	ldr	r1, [r7, #4]
 8014632:	2000      	movs	r0, #0
 8014634:	f000 f8a4 	bl	8014780 <tcp_recv_null>
 8014638:	4603      	mov	r3, r0
 801463a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801463c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d12a      	bne.n	801469a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014644:	7bbb      	ldrb	r3, [r7, #14]
 8014646:	f003 0320 	and.w	r3, r3, #32
 801464a:	2b00      	cmp	r3, #0
 801464c:	d033      	beq.n	80146b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014652:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014656:	d005      	beq.n	8014664 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801465c:	3301      	adds	r3, #1
 801465e:	b29a      	uxth	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00b      	beq.n	8014686 <tcp_process_refused_data+0xb2>
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6918      	ldr	r0, [r3, #16]
 8014678:	2300      	movs	r3, #0
 801467a:	2200      	movs	r2, #0
 801467c:	6879      	ldr	r1, [r7, #4]
 801467e:	47a0      	blx	r4
 8014680:	4603      	mov	r3, r0
 8014682:	73fb      	strb	r3, [r7, #15]
 8014684:	e001      	b.n	801468a <tcp_process_refused_data+0xb6>
 8014686:	2300      	movs	r3, #0
 8014688:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801468e:	f113 0f0d 	cmn.w	r3, #13
 8014692:	d110      	bne.n	80146b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014694:	f06f 030c 	mvn.w	r3, #12
 8014698:	e00e      	b.n	80146b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801469a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801469e:	f113 0f0d 	cmn.w	r3, #13
 80146a2:	d102      	bne.n	80146aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80146a4:	f06f 030c 	mvn.w	r3, #12
 80146a8:	e006      	b.n	80146b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	68ba      	ldr	r2, [r7, #8]
 80146ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80146b0:	f06f 0304 	mvn.w	r3, #4
 80146b4:	e000      	b.n	80146b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80146b6:	2300      	movs	r3, #0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3714      	adds	r7, #20
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd90      	pop	{r4, r7, pc}
 80146c0:	0801fa34 	.word	0x0801fa34
 80146c4:	0801ff44 	.word	0x0801ff44
 80146c8:	0801fa78 	.word	0x0801fa78

080146cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80146d4:	e007      	b.n	80146e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f000 f80a 	bl	80146f6 <tcp_seg_free>
    seg = next;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d1f4      	bne.n	80146d6 <tcp_segs_free+0xa>
  }
}
 80146ec:	bf00      	nop
 80146ee:	bf00      	nop
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b082      	sub	sp, #8
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00c      	beq.n	801471e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	685b      	ldr	r3, [r3, #4]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d004      	beq.n	8014716 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	f7fe fc27 	bl	8012f64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014716:	6879      	ldr	r1, [r7, #4]
 8014718:	2003      	movs	r0, #3
 801471a:	f7fd fde3 	bl	80122e4 <memp_free>
  }
}
 801471e:	bf00      	nop
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
	...

08014728 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d106      	bne.n	8014744 <tcp_seg_copy+0x1c>
 8014736:	4b0f      	ldr	r3, [pc, #60]	; (8014774 <tcp_seg_copy+0x4c>)
 8014738:	f240 6282 	movw	r2, #1666	; 0x682
 801473c:	490e      	ldr	r1, [pc, #56]	; (8014778 <tcp_seg_copy+0x50>)
 801473e:	480f      	ldr	r0, [pc, #60]	; (801477c <tcp_seg_copy+0x54>)
 8014740:	f008 fb82 	bl	801ce48 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014744:	2003      	movs	r0, #3
 8014746:	f7fd fd7b 	bl	8012240 <memp_malloc>
 801474a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <tcp_seg_copy+0x2e>
    return NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	e00a      	b.n	801476c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014756:	2210      	movs	r2, #16
 8014758:	6879      	ldr	r1, [r7, #4]
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f008 fa9a 	bl	801cc94 <memcpy>
  pbuf_ref(cseg->p);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	4618      	mov	r0, r3
 8014766:	f7fe fca3 	bl	80130b0 <pbuf_ref>
  return cseg;
 801476a:	68fb      	ldr	r3, [r7, #12]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	0801fa34 	.word	0x0801fa34
 8014778:	0801ff88 	.word	0x0801ff88
 801477c:	0801fa78 	.word	0x0801fa78

08014780 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d109      	bne.n	80147a8 <tcp_recv_null+0x28>
 8014794:	4b12      	ldr	r3, [pc, #72]	; (80147e0 <tcp_recv_null+0x60>)
 8014796:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801479a:	4912      	ldr	r1, [pc, #72]	; (80147e4 <tcp_recv_null+0x64>)
 801479c:	4812      	ldr	r0, [pc, #72]	; (80147e8 <tcp_recv_null+0x68>)
 801479e:	f008 fb53 	bl	801ce48 <iprintf>
 80147a2:	f06f 030f 	mvn.w	r3, #15
 80147a6:	e016      	b.n	80147d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d009      	beq.n	80147c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	891b      	ldrh	r3, [r3, #8]
 80147b2:	4619      	mov	r1, r3
 80147b4:	68b8      	ldr	r0, [r7, #8]
 80147b6:	f7ff fad3 	bl	8013d60 <tcp_recved>
    pbuf_free(p);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f7fe fbd2 	bl	8012f64 <pbuf_free>
 80147c0:	e008      	b.n	80147d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80147c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d104      	bne.n	80147d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80147ca:	68b8      	ldr	r0, [r7, #8]
 80147cc:	f7ff f884 	bl	80138d8 <tcp_close>
 80147d0:	4603      	mov	r3, r0
 80147d2:	e000      	b.n	80147d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80147d4:	2300      	movs	r3, #0
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	0801fa34 	.word	0x0801fa34
 80147e4:	0801ffa4 	.word	0x0801ffa4
 80147e8:	0801fa78 	.word	0x0801fa78

080147ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b086      	sub	sp, #24
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	4603      	mov	r3, r0
 80147f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80147f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	db01      	blt.n	8014802 <tcp_kill_prio+0x16>
 80147fe:	79fb      	ldrb	r3, [r7, #7]
 8014800:	e000      	b.n	8014804 <tcp_kill_prio+0x18>
 8014802:	237f      	movs	r3, #127	; 0x7f
 8014804:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014806:	7afb      	ldrb	r3, [r7, #11]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d034      	beq.n	8014876 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801480c:	7afb      	ldrb	r3, [r7, #11]
 801480e:	3b01      	subs	r3, #1
 8014810:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014812:	2300      	movs	r3, #0
 8014814:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014816:	2300      	movs	r3, #0
 8014818:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801481a:	4b19      	ldr	r3, [pc, #100]	; (8014880 <tcp_kill_prio+0x94>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	617b      	str	r3, [r7, #20]
 8014820:	e01f      	b.n	8014862 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	7d5b      	ldrb	r3, [r3, #21]
 8014826:	7afa      	ldrb	r2, [r7, #11]
 8014828:	429a      	cmp	r2, r3
 801482a:	d80c      	bhi.n	8014846 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014830:	7afa      	ldrb	r2, [r7, #11]
 8014832:	429a      	cmp	r2, r3
 8014834:	d112      	bne.n	801485c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014836:	4b13      	ldr	r3, [pc, #76]	; (8014884 <tcp_kill_prio+0x98>)
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	6a1b      	ldr	r3, [r3, #32]
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	429a      	cmp	r2, r3
 8014844:	d80a      	bhi.n	801485c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014846:	4b0f      	ldr	r3, [pc, #60]	; (8014884 <tcp_kill_prio+0x98>)
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	6a1b      	ldr	r3, [r3, #32]
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	7d5b      	ldrb	r3, [r3, #21]
 801485a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d1dc      	bne.n	8014822 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d004      	beq.n	8014878 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801486e:	6938      	ldr	r0, [r7, #16]
 8014870:	f7ff f978 	bl	8013b64 <tcp_abort>
 8014874:	e000      	b.n	8014878 <tcp_kill_prio+0x8c>
    return;
 8014876:	bf00      	nop
  }
}
 8014878:	3718      	adds	r7, #24
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	2000df18 	.word	0x2000df18
 8014884:	2000df1c 	.word	0x2000df1c

08014888 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	4603      	mov	r3, r0
 8014890:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014892:	79fb      	ldrb	r3, [r7, #7]
 8014894:	2b08      	cmp	r3, #8
 8014896:	d009      	beq.n	80148ac <tcp_kill_state+0x24>
 8014898:	79fb      	ldrb	r3, [r7, #7]
 801489a:	2b09      	cmp	r3, #9
 801489c:	d006      	beq.n	80148ac <tcp_kill_state+0x24>
 801489e:	4b1a      	ldr	r3, [pc, #104]	; (8014908 <tcp_kill_state+0x80>)
 80148a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80148a4:	4919      	ldr	r1, [pc, #100]	; (801490c <tcp_kill_state+0x84>)
 80148a6:	481a      	ldr	r0, [pc, #104]	; (8014910 <tcp_kill_state+0x88>)
 80148a8:	f008 face 	bl	801ce48 <iprintf>

  inactivity = 0;
 80148ac:	2300      	movs	r3, #0
 80148ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80148b0:	2300      	movs	r3, #0
 80148b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80148b4:	4b17      	ldr	r3, [pc, #92]	; (8014914 <tcp_kill_state+0x8c>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	617b      	str	r3, [r7, #20]
 80148ba:	e017      	b.n	80148ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80148bc:	697b      	ldr	r3, [r7, #20]
 80148be:	7d1b      	ldrb	r3, [r3, #20]
 80148c0:	79fa      	ldrb	r2, [r7, #7]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d10f      	bne.n	80148e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80148c6:	4b14      	ldr	r3, [pc, #80]	; (8014918 <tcp_kill_state+0x90>)
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	6a1b      	ldr	r3, [r3, #32]
 80148ce:	1ad3      	subs	r3, r2, r3
 80148d0:	68fa      	ldr	r2, [r7, #12]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d807      	bhi.n	80148e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80148d6:	4b10      	ldr	r3, [pc, #64]	; (8014918 <tcp_kill_state+0x90>)
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	6a1b      	ldr	r3, [r3, #32]
 80148de:	1ad3      	subs	r3, r2, r3
 80148e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	617b      	str	r3, [r7, #20]
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d1e4      	bne.n	80148bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d003      	beq.n	8014900 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80148f8:	2100      	movs	r1, #0
 80148fa:	6938      	ldr	r0, [r7, #16]
 80148fc:	f7ff f874 	bl	80139e8 <tcp_abandon>
  }
}
 8014900:	bf00      	nop
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	0801fa34 	.word	0x0801fa34
 801490c:	0801ffc0 	.word	0x0801ffc0
 8014910:	0801fa78 	.word	0x0801fa78
 8014914:	2000df18 	.word	0x2000df18
 8014918:	2000df1c 	.word	0x2000df1c

0801491c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014922:	2300      	movs	r3, #0
 8014924:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014926:	2300      	movs	r3, #0
 8014928:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801492a:	4b12      	ldr	r3, [pc, #72]	; (8014974 <tcp_kill_timewait+0x58>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	60fb      	str	r3, [r7, #12]
 8014930:	e012      	b.n	8014958 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014932:	4b11      	ldr	r3, [pc, #68]	; (8014978 <tcp_kill_timewait+0x5c>)
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6a1b      	ldr	r3, [r3, #32]
 801493a:	1ad3      	subs	r3, r2, r3
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	429a      	cmp	r2, r3
 8014940:	d807      	bhi.n	8014952 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014942:	4b0d      	ldr	r3, [pc, #52]	; (8014978 <tcp_kill_timewait+0x5c>)
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	6a1b      	ldr	r3, [r3, #32]
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	60fb      	str	r3, [r7, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d1e9      	bne.n	8014932 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014964:	68b8      	ldr	r0, [r7, #8]
 8014966:	f7ff f8fd 	bl	8013b64 <tcp_abort>
  }
}
 801496a:	bf00      	nop
 801496c:	3710      	adds	r7, #16
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}
 8014972:	bf00      	nop
 8014974:	2000df28 	.word	0x2000df28
 8014978:	2000df1c 	.word	0x2000df1c

0801497c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014982:	4b10      	ldr	r3, [pc, #64]	; (80149c4 <tcp_handle_closepend+0x48>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014988:	e014      	b.n	80149b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	68db      	ldr	r3, [r3, #12]
 801498e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	8b5b      	ldrh	r3, [r3, #26]
 8014994:	f003 0308 	and.w	r3, r3, #8
 8014998:	2b00      	cmp	r3, #0
 801499a:	d009      	beq.n	80149b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	8b5b      	ldrh	r3, [r3, #26]
 80149a0:	f023 0308 	bic.w	r3, r3, #8
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7fe ff2a 	bl	8013804 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d1e7      	bne.n	801498a <tcp_handle_closepend+0xe>
  }
}
 80149ba:	bf00      	nop
 80149bc:	bf00      	nop
 80149be:	3708      	adds	r7, #8
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	2000df18 	.word	0x2000df18

080149c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	4603      	mov	r3, r0
 80149d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149d2:	2001      	movs	r0, #1
 80149d4:	f7fd fc34 	bl	8012240 <memp_malloc>
 80149d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d126      	bne.n	8014a2e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80149e0:	f7ff ffcc 	bl	801497c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80149e4:	f7ff ff9a 	bl	801491c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149e8:	2001      	movs	r0, #1
 80149ea:	f7fd fc29 	bl	8012240 <memp_malloc>
 80149ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d11b      	bne.n	8014a2e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80149f6:	2009      	movs	r0, #9
 80149f8:	f7ff ff46 	bl	8014888 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149fc:	2001      	movs	r0, #1
 80149fe:	f7fd fc1f 	bl	8012240 <memp_malloc>
 8014a02:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d111      	bne.n	8014a2e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014a0a:	2008      	movs	r0, #8
 8014a0c:	f7ff ff3c 	bl	8014888 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a10:	2001      	movs	r0, #1
 8014a12:	f7fd fc15 	bl	8012240 <memp_malloc>
 8014a16:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d107      	bne.n	8014a2e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014a1e:	79fb      	ldrb	r3, [r7, #7]
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7ff fee3 	bl	80147ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a26:	2001      	movs	r0, #1
 8014a28:	f7fd fc0a 	bl	8012240 <memp_malloc>
 8014a2c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d03f      	beq.n	8014ab4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014a34:	229c      	movs	r2, #156	; 0x9c
 8014a36:	2100      	movs	r1, #0
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	f008 f953 	bl	801cce4 <memset>
    pcb->prio = prio;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	79fa      	ldrb	r2, [r7, #7]
 8014a42:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014a4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	22ff      	movs	r2, #255	; 0xff
 8014a62:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014a6a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2206      	movs	r2, #6
 8014a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2206      	movs	r2, #6
 8014a78:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a80:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2201      	movs	r2, #1
 8014a86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014a8a:	4b0d      	ldr	r3, [pc, #52]	; (8014ac0 <tcp_alloc+0xf8>)
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014a92:	4b0c      	ldr	r3, [pc, #48]	; (8014ac4 <tcp_alloc+0xfc>)
 8014a94:	781a      	ldrb	r2, [r3, #0]
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014aa0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	4a08      	ldr	r2, [pc, #32]	; (8014ac8 <tcp_alloc+0x100>)
 8014aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	4a07      	ldr	r2, [pc, #28]	; (8014acc <tcp_alloc+0x104>)
 8014ab0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	2000df1c 	.word	0x2000df1c
 8014ac4:	20006be2 	.word	0x20006be2
 8014ac8:	08014781 	.word	0x08014781
 8014acc:	006ddd00 	.word	0x006ddd00

08014ad0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014ada:	2040      	movs	r0, #64	; 0x40
 8014adc:	f7ff ff74 	bl	80149c8 <tcp_alloc>
 8014ae0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3710      	adds	r7, #16
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d002      	beq.n	8014b02 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	683a      	ldr	r2, [r7, #0]
 8014b00:	611a      	str	r2, [r3, #16]
  }
}
 8014b02:	bf00      	nop
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr
	...

08014b10 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d00e      	beq.n	8014b3e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	7d1b      	ldrb	r3, [r3, #20]
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d106      	bne.n	8014b36 <tcp_recv+0x26>
 8014b28:	4b07      	ldr	r3, [pc, #28]	; (8014b48 <tcp_recv+0x38>)
 8014b2a:	f240 72df 	movw	r2, #2015	; 0x7df
 8014b2e:	4907      	ldr	r1, [pc, #28]	; (8014b4c <tcp_recv+0x3c>)
 8014b30:	4807      	ldr	r0, [pc, #28]	; (8014b50 <tcp_recv+0x40>)
 8014b32:	f008 f989 	bl	801ce48 <iprintf>
    pcb->recv = recv;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	683a      	ldr	r2, [r7, #0]
 8014b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014b3e:	bf00      	nop
 8014b40:	3708      	adds	r7, #8
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	0801fa34 	.word	0x0801fa34
 8014b4c:	0801ffd0 	.word	0x0801ffd0
 8014b50:	0801fa78 	.word	0x0801fa78

08014b54 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d00e      	beq.n	8014b82 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	7d1b      	ldrb	r3, [r3, #20]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d106      	bne.n	8014b7a <tcp_sent+0x26>
 8014b6c:	4b07      	ldr	r3, [pc, #28]	; (8014b8c <tcp_sent+0x38>)
 8014b6e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014b72:	4907      	ldr	r1, [pc, #28]	; (8014b90 <tcp_sent+0x3c>)
 8014b74:	4807      	ldr	r0, [pc, #28]	; (8014b94 <tcp_sent+0x40>)
 8014b76:	f008 f967 	bl	801ce48 <iprintf>
    pcb->sent = sent;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	683a      	ldr	r2, [r7, #0]
 8014b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014b82:	bf00      	nop
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	0801fa34 	.word	0x0801fa34
 8014b90:	0801fff8 	.word	0x0801fff8
 8014b94:	0801fa78 	.word	0x0801fa78

08014b98 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d00e      	beq.n	8014bc6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d106      	bne.n	8014bbe <tcp_err+0x26>
 8014bb0:	4b07      	ldr	r3, [pc, #28]	; (8014bd0 <tcp_err+0x38>)
 8014bb2:	f640 020d 	movw	r2, #2061	; 0x80d
 8014bb6:	4907      	ldr	r1, [pc, #28]	; (8014bd4 <tcp_err+0x3c>)
 8014bb8:	4807      	ldr	r0, [pc, #28]	; (8014bd8 <tcp_err+0x40>)
 8014bba:	f008 f945 	bl	801ce48 <iprintf>
    pcb->errf = err;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	683a      	ldr	r2, [r7, #0]
 8014bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014bc6:	bf00      	nop
 8014bc8:	3708      	adds	r7, #8
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	0801fa34 	.word	0x0801fa34
 8014bd4:	08020020 	.word	0x08020020
 8014bd8:	0801fa78 	.word	0x0801fa78

08014bdc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b085      	sub	sp, #20
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d008      	beq.n	8014bfe <tcp_accept+0x22>
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	7d1b      	ldrb	r3, [r3, #20]
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d104      	bne.n	8014bfe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	683a      	ldr	r2, [r7, #0]
 8014bfc:	619a      	str	r2, [r3, #24]
  }
}
 8014bfe:	bf00      	nop
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
	...

08014c0c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	4613      	mov	r3, r2
 8014c18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d107      	bne.n	8014c30 <tcp_poll+0x24>
 8014c20:	4b0e      	ldr	r3, [pc, #56]	; (8014c5c <tcp_poll+0x50>)
 8014c22:	f640 023d 	movw	r2, #2109	; 0x83d
 8014c26:	490e      	ldr	r1, [pc, #56]	; (8014c60 <tcp_poll+0x54>)
 8014c28:	480e      	ldr	r0, [pc, #56]	; (8014c64 <tcp_poll+0x58>)
 8014c2a:	f008 f90d 	bl	801ce48 <iprintf>
 8014c2e:	e011      	b.n	8014c54 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	7d1b      	ldrb	r3, [r3, #20]
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d106      	bne.n	8014c46 <tcp_poll+0x3a>
 8014c38:	4b08      	ldr	r3, [pc, #32]	; (8014c5c <tcp_poll+0x50>)
 8014c3a:	f640 023e 	movw	r2, #2110	; 0x83e
 8014c3e:	490a      	ldr	r1, [pc, #40]	; (8014c68 <tcp_poll+0x5c>)
 8014c40:	4808      	ldr	r0, [pc, #32]	; (8014c64 <tcp_poll+0x58>)
 8014c42:	f008 f901 	bl	801ce48 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	68ba      	ldr	r2, [r7, #8]
 8014c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	79fa      	ldrb	r2, [r7, #7]
 8014c52:	775a      	strb	r2, [r3, #29]
}
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	0801fa34 	.word	0x0801fa34
 8014c60:	08020048 	.word	0x08020048
 8014c64:	0801fa78 	.word	0x0801fa78
 8014c68:	08020060 	.word	0x08020060

08014c6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d107      	bne.n	8014c8a <tcp_pcb_purge+0x1e>
 8014c7a:	4b21      	ldr	r3, [pc, #132]	; (8014d00 <tcp_pcb_purge+0x94>)
 8014c7c:	f640 0251 	movw	r2, #2129	; 0x851
 8014c80:	4920      	ldr	r1, [pc, #128]	; (8014d04 <tcp_pcb_purge+0x98>)
 8014c82:	4821      	ldr	r0, [pc, #132]	; (8014d08 <tcp_pcb_purge+0x9c>)
 8014c84:	f008 f8e0 	bl	801ce48 <iprintf>
 8014c88:	e037      	b.n	8014cfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	7d1b      	ldrb	r3, [r3, #20]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d033      	beq.n	8014cfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014c96:	2b0a      	cmp	r3, #10
 8014c98:	d02f      	beq.n	8014cfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014c9e:	2b01      	cmp	r3, #1
 8014ca0:	d02b      	beq.n	8014cfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d007      	beq.n	8014cba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fe f958 	bl	8012f64 <pbuf_free>
      pcb->refused_data = NULL;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d002      	beq.n	8014cc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f000 f986 	bl	8014fd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7ff fcf9 	bl	80146cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7ff fcf4 	bl	80146cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	66da      	str	r2, [r3, #108]	; 0x6c
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	0801fa34 	.word	0x0801fa34
 8014d04:	08020080 	.word	0x08020080
 8014d08:	0801fa78 	.word	0x0801fa78

08014d0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d106      	bne.n	8014d2a <tcp_pcb_remove+0x1e>
 8014d1c:	4b3e      	ldr	r3, [pc, #248]	; (8014e18 <tcp_pcb_remove+0x10c>)
 8014d1e:	f640 0283 	movw	r2, #2179	; 0x883
 8014d22:	493e      	ldr	r1, [pc, #248]	; (8014e1c <tcp_pcb_remove+0x110>)
 8014d24:	483e      	ldr	r0, [pc, #248]	; (8014e20 <tcp_pcb_remove+0x114>)
 8014d26:	f008 f88f 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d106      	bne.n	8014d3e <tcp_pcb_remove+0x32>
 8014d30:	4b39      	ldr	r3, [pc, #228]	; (8014e18 <tcp_pcb_remove+0x10c>)
 8014d32:	f640 0284 	movw	r2, #2180	; 0x884
 8014d36:	493b      	ldr	r1, [pc, #236]	; (8014e24 <tcp_pcb_remove+0x118>)
 8014d38:	4839      	ldr	r0, [pc, #228]	; (8014e20 <tcp_pcb_remove+0x114>)
 8014d3a:	f008 f885 	bl	801ce48 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	683a      	ldr	r2, [r7, #0]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d105      	bne.n	8014d54 <tcp_pcb_remove+0x48>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	68da      	ldr	r2, [r3, #12]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	601a      	str	r2, [r3, #0]
 8014d52:	e013      	b.n	8014d7c <tcp_pcb_remove+0x70>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	60fb      	str	r3, [r7, #12]
 8014d5a:	e00c      	b.n	8014d76 <tcp_pcb_remove+0x6a>
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	683a      	ldr	r2, [r7, #0]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d104      	bne.n	8014d70 <tcp_pcb_remove+0x64>
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	68da      	ldr	r2, [r3, #12]
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	60da      	str	r2, [r3, #12]
 8014d6e:	e005      	b.n	8014d7c <tcp_pcb_remove+0x70>
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	60fb      	str	r3, [r7, #12]
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d1ef      	bne.n	8014d5c <tcp_pcb_remove+0x50>
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014d82:	6838      	ldr	r0, [r7, #0]
 8014d84:	f7ff ff72 	bl	8014c6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	7d1b      	ldrb	r3, [r3, #20]
 8014d8c:	2b0a      	cmp	r3, #10
 8014d8e:	d013      	beq.n	8014db8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d00f      	beq.n	8014db8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	8b5b      	ldrh	r3, [r3, #26]
 8014d9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d009      	beq.n	8014db8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	8b5b      	ldrh	r3, [r3, #26]
 8014da8:	f043 0302 	orr.w	r3, r3, #2
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014db2:	6838      	ldr	r0, [r7, #0]
 8014db4:	f003 fbc2 	bl	801853c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	7d1b      	ldrb	r3, [r3, #20]
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d020      	beq.n	8014e02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d006      	beq.n	8014dd6 <tcp_pcb_remove+0xca>
 8014dc8:	4b13      	ldr	r3, [pc, #76]	; (8014e18 <tcp_pcb_remove+0x10c>)
 8014dca:	f640 0293 	movw	r2, #2195	; 0x893
 8014dce:	4916      	ldr	r1, [pc, #88]	; (8014e28 <tcp_pcb_remove+0x11c>)
 8014dd0:	4813      	ldr	r0, [pc, #76]	; (8014e20 <tcp_pcb_remove+0x114>)
 8014dd2:	f008 f839 	bl	801ce48 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d006      	beq.n	8014dec <tcp_pcb_remove+0xe0>
 8014dde:	4b0e      	ldr	r3, [pc, #56]	; (8014e18 <tcp_pcb_remove+0x10c>)
 8014de0:	f640 0294 	movw	r2, #2196	; 0x894
 8014de4:	4911      	ldr	r1, [pc, #68]	; (8014e2c <tcp_pcb_remove+0x120>)
 8014de6:	480e      	ldr	r0, [pc, #56]	; (8014e20 <tcp_pcb_remove+0x114>)
 8014de8:	f008 f82e 	bl	801ce48 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d006      	beq.n	8014e02 <tcp_pcb_remove+0xf6>
 8014df4:	4b08      	ldr	r3, [pc, #32]	; (8014e18 <tcp_pcb_remove+0x10c>)
 8014df6:	f640 0296 	movw	r2, #2198	; 0x896
 8014dfa:	490d      	ldr	r1, [pc, #52]	; (8014e30 <tcp_pcb_remove+0x124>)
 8014dfc:	4808      	ldr	r0, [pc, #32]	; (8014e20 <tcp_pcb_remove+0x114>)
 8014dfe:	f008 f823 	bl	801ce48 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	2200      	movs	r2, #0
 8014e06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014e0e:	bf00      	nop
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	0801fa34 	.word	0x0801fa34
 8014e1c:	0802009c 	.word	0x0802009c
 8014e20:	0801fa78 	.word	0x0801fa78
 8014e24:	080200b8 	.word	0x080200b8
 8014e28:	080200d8 	.word	0x080200d8
 8014e2c:	080200f0 	.word	0x080200f0
 8014e30:	0802010c 	.word	0x0802010c

08014e34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d106      	bne.n	8014e50 <tcp_next_iss+0x1c>
 8014e42:	4b0a      	ldr	r3, [pc, #40]	; (8014e6c <tcp_next_iss+0x38>)
 8014e44:	f640 02af 	movw	r2, #2223	; 0x8af
 8014e48:	4909      	ldr	r1, [pc, #36]	; (8014e70 <tcp_next_iss+0x3c>)
 8014e4a:	480a      	ldr	r0, [pc, #40]	; (8014e74 <tcp_next_iss+0x40>)
 8014e4c:	f007 fffc 	bl	801ce48 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014e50:	4b09      	ldr	r3, [pc, #36]	; (8014e78 <tcp_next_iss+0x44>)
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	4b09      	ldr	r3, [pc, #36]	; (8014e7c <tcp_next_iss+0x48>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	4413      	add	r3, r2
 8014e5a:	4a07      	ldr	r2, [pc, #28]	; (8014e78 <tcp_next_iss+0x44>)
 8014e5c:	6013      	str	r3, [r2, #0]
  return iss;
 8014e5e:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <tcp_next_iss+0x44>)
 8014e60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3708      	adds	r7, #8
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	0801fa34 	.word	0x0801fa34
 8014e70:	08020124 	.word	0x08020124
 8014e74:	0801fa78 	.word	0x0801fa78
 8014e78:	200002f0 	.word	0x200002f0
 8014e7c:	2000df1c 	.word	0x2000df1c

08014e80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b086      	sub	sp, #24
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	4603      	mov	r3, r0
 8014e88:	60b9      	str	r1, [r7, #8]
 8014e8a:	607a      	str	r2, [r7, #4]
 8014e8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d106      	bne.n	8014ea2 <tcp_eff_send_mss_netif+0x22>
 8014e94:	4b14      	ldr	r3, [pc, #80]	; (8014ee8 <tcp_eff_send_mss_netif+0x68>)
 8014e96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014e9a:	4914      	ldr	r1, [pc, #80]	; (8014eec <tcp_eff_send_mss_netif+0x6c>)
 8014e9c:	4814      	ldr	r0, [pc, #80]	; (8014ef0 <tcp_eff_send_mss_netif+0x70>)
 8014e9e:	f007 ffd3 	bl	801ce48 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014ea8:	89fb      	ldrh	r3, [r7, #14]
 8014eaa:	e019      	b.n	8014ee0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014eb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014eb2:	8afb      	ldrh	r3, [r7, #22]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d012      	beq.n	8014ede <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014eb8:	2328      	movs	r3, #40	; 0x28
 8014eba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014ebc:	8afa      	ldrh	r2, [r7, #22]
 8014ebe:	8abb      	ldrh	r3, [r7, #20]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d904      	bls.n	8014ece <tcp_eff_send_mss_netif+0x4e>
 8014ec4:	8afa      	ldrh	r2, [r7, #22]
 8014ec6:	8abb      	ldrh	r3, [r7, #20]
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	e000      	b.n	8014ed0 <tcp_eff_send_mss_netif+0x50>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014ed2:	8a7a      	ldrh	r2, [r7, #18]
 8014ed4:	89fb      	ldrh	r3, [r7, #14]
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	bf28      	it	cs
 8014eda:	4613      	movcs	r3, r2
 8014edc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014ede:	89fb      	ldrh	r3, [r7, #14]
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3718      	adds	r7, #24
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	0801fa34 	.word	0x0801fa34
 8014eec:	08020140 	.word	0x08020140
 8014ef0:	0801fa78 	.word	0x0801fa78

08014ef4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d119      	bne.n	8014f3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014f08:	4b10      	ldr	r3, [pc, #64]	; (8014f4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014f0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014f0e:	4910      	ldr	r1, [pc, #64]	; (8014f50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014f10:	4810      	ldr	r0, [pc, #64]	; (8014f54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014f12:	f007 ff99 	bl	801ce48 <iprintf>

  while (pcb != NULL) {
 8014f16:	e011      	b.n	8014f3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d108      	bne.n	8014f36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014f2a:	68f8      	ldr	r0, [r7, #12]
 8014f2c:	f7fe fe1a 	bl	8013b64 <tcp_abort>
      pcb = next;
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	60fb      	str	r3, [r7, #12]
 8014f34:	e002      	b.n	8014f3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1ea      	bne.n	8014f18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014f42:	bf00      	nop
 8014f44:	bf00      	nop
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	0801fa34 	.word	0x0801fa34
 8014f50:	08020168 	.word	0x08020168
 8014f54:	0801fa78 	.word	0x0801fa78

08014f58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b084      	sub	sp, #16
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d02a      	beq.n	8014fbe <tcp_netif_ip_addr_changed+0x66>
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d026      	beq.n	8014fbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014f70:	4b15      	ldr	r3, [pc, #84]	; (8014fc8 <tcp_netif_ip_addr_changed+0x70>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	4619      	mov	r1, r3
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f7ff ffbc 	bl	8014ef4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014f7c:	4b13      	ldr	r3, [pc, #76]	; (8014fcc <tcp_netif_ip_addr_changed+0x74>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4619      	mov	r1, r3
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f7ff ffb6 	bl	8014ef4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d017      	beq.n	8014fbe <tcp_netif_ip_addr_changed+0x66>
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d013      	beq.n	8014fbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f96:	4b0e      	ldr	r3, [pc, #56]	; (8014fd0 <tcp_netif_ip_addr_changed+0x78>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	60fb      	str	r3, [r7, #12]
 8014f9c:	e00c      	b.n	8014fb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681a      	ldr	r2, [r3, #0]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d103      	bne.n	8014fb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	681a      	ldr	r2, [r3, #0]
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	60fb      	str	r3, [r7, #12]
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1ef      	bne.n	8014f9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014fbe:	bf00      	nop
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	2000df18 	.word	0x2000df18
 8014fcc:	2000df24 	.word	0x2000df24
 8014fd0:	2000df20 	.word	0x2000df20

08014fd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d007      	beq.n	8014ff4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7ff fb6f 	bl	80146cc <tcp_segs_free>
    pcb->ooseq = NULL;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014ff4:	bf00      	nop
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014ffc:	b590      	push	{r4, r7, lr}
 8014ffe:	b08d      	sub	sp, #52	; 0x34
 8015000:	af04      	add	r7, sp, #16
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d105      	bne.n	8015018 <tcp_input+0x1c>
 801500c:	4b9b      	ldr	r3, [pc, #620]	; (801527c <tcp_input+0x280>)
 801500e:	2283      	movs	r2, #131	; 0x83
 8015010:	499b      	ldr	r1, [pc, #620]	; (8015280 <tcp_input+0x284>)
 8015012:	489c      	ldr	r0, [pc, #624]	; (8015284 <tcp_input+0x288>)
 8015014:	f007 ff18 	bl	801ce48 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	4a9a      	ldr	r2, [pc, #616]	; (8015288 <tcp_input+0x28c>)
 801501e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	895b      	ldrh	r3, [r3, #10]
 8015024:	2b13      	cmp	r3, #19
 8015026:	f240 83c4 	bls.w	80157b2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801502a:	4b98      	ldr	r3, [pc, #608]	; (801528c <tcp_input+0x290>)
 801502c:	695b      	ldr	r3, [r3, #20]
 801502e:	4a97      	ldr	r2, [pc, #604]	; (801528c <tcp_input+0x290>)
 8015030:	6812      	ldr	r2, [r2, #0]
 8015032:	4611      	mov	r1, r2
 8015034:	4618      	mov	r0, r3
 8015036:	f006 fbcb 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801503a:	4603      	mov	r3, r0
 801503c:	2b00      	cmp	r3, #0
 801503e:	f040 83ba 	bne.w	80157b6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015042:	4b92      	ldr	r3, [pc, #584]	; (801528c <tcp_input+0x290>)
 8015044:	695b      	ldr	r3, [r3, #20]
 8015046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801504a:	2be0      	cmp	r3, #224	; 0xe0
 801504c:	f000 83b3 	beq.w	80157b6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015050:	4b8d      	ldr	r3, [pc, #564]	; (8015288 <tcp_input+0x28c>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	899b      	ldrh	r3, [r3, #12]
 8015056:	b29b      	uxth	r3, r3
 8015058:	4618      	mov	r0, r3
 801505a:	f7fc fc3b 	bl	80118d4 <lwip_htons>
 801505e:	4603      	mov	r3, r0
 8015060:	0b1b      	lsrs	r3, r3, #12
 8015062:	b29b      	uxth	r3, r3
 8015064:	b2db      	uxtb	r3, r3
 8015066:	009b      	lsls	r3, r3, #2
 8015068:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801506a:	7cbb      	ldrb	r3, [r7, #18]
 801506c:	2b13      	cmp	r3, #19
 801506e:	f240 83a4 	bls.w	80157ba <tcp_input+0x7be>
 8015072:	7cbb      	ldrb	r3, [r7, #18]
 8015074:	b29a      	uxth	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	891b      	ldrh	r3, [r3, #8]
 801507a:	429a      	cmp	r2, r3
 801507c:	f200 839d 	bhi.w	80157ba <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015080:	7cbb      	ldrb	r3, [r7, #18]
 8015082:	b29b      	uxth	r3, r3
 8015084:	3b14      	subs	r3, #20
 8015086:	b29a      	uxth	r2, r3
 8015088:	4b81      	ldr	r3, [pc, #516]	; (8015290 <tcp_input+0x294>)
 801508a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801508c:	4b81      	ldr	r3, [pc, #516]	; (8015294 <tcp_input+0x298>)
 801508e:	2200      	movs	r2, #0
 8015090:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	895a      	ldrh	r2, [r3, #10]
 8015096:	7cbb      	ldrb	r3, [r7, #18]
 8015098:	b29b      	uxth	r3, r3
 801509a:	429a      	cmp	r2, r3
 801509c:	d309      	bcc.n	80150b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801509e:	4b7c      	ldr	r3, [pc, #496]	; (8015290 <tcp_input+0x294>)
 80150a0:	881a      	ldrh	r2, [r3, #0]
 80150a2:	4b7d      	ldr	r3, [pc, #500]	; (8015298 <tcp_input+0x29c>)
 80150a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80150a6:	7cbb      	ldrb	r3, [r7, #18]
 80150a8:	4619      	mov	r1, r3
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7fd fed4 	bl	8012e58 <pbuf_remove_header>
 80150b0:	e04e      	b.n	8015150 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d105      	bne.n	80150c6 <tcp_input+0xca>
 80150ba:	4b70      	ldr	r3, [pc, #448]	; (801527c <tcp_input+0x280>)
 80150bc:	22c2      	movs	r2, #194	; 0xc2
 80150be:	4977      	ldr	r1, [pc, #476]	; (801529c <tcp_input+0x2a0>)
 80150c0:	4870      	ldr	r0, [pc, #448]	; (8015284 <tcp_input+0x288>)
 80150c2:	f007 fec1 	bl	801ce48 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80150c6:	2114      	movs	r1, #20
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f7fd fec5 	bl	8012e58 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	895a      	ldrh	r2, [r3, #10]
 80150d2:	4b71      	ldr	r3, [pc, #452]	; (8015298 <tcp_input+0x29c>)
 80150d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80150d6:	4b6e      	ldr	r3, [pc, #440]	; (8015290 <tcp_input+0x294>)
 80150d8:	881a      	ldrh	r2, [r3, #0]
 80150da:	4b6f      	ldr	r3, [pc, #444]	; (8015298 <tcp_input+0x29c>)
 80150dc:	881b      	ldrh	r3, [r3, #0]
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80150e2:	4b6d      	ldr	r3, [pc, #436]	; (8015298 <tcp_input+0x29c>)
 80150e4:	881b      	ldrh	r3, [r3, #0]
 80150e6:	4619      	mov	r1, r3
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f7fd feb5 	bl	8012e58 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	895b      	ldrh	r3, [r3, #10]
 80150f4:	8a3a      	ldrh	r2, [r7, #16]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	f200 8361 	bhi.w	80157be <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	685b      	ldr	r3, [r3, #4]
 8015102:	4a64      	ldr	r2, [pc, #400]	; (8015294 <tcp_input+0x298>)
 8015104:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	8a3a      	ldrh	r2, [r7, #16]
 801510c:	4611      	mov	r1, r2
 801510e:	4618      	mov	r0, r3
 8015110:	f7fd fea2 	bl	8012e58 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	891a      	ldrh	r2, [r3, #8]
 8015118:	8a3b      	ldrh	r3, [r7, #16]
 801511a:	1ad3      	subs	r3, r2, r3
 801511c:	b29a      	uxth	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	895b      	ldrh	r3, [r3, #10]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d005      	beq.n	8015136 <tcp_input+0x13a>
 801512a:	4b54      	ldr	r3, [pc, #336]	; (801527c <tcp_input+0x280>)
 801512c:	22df      	movs	r2, #223	; 0xdf
 801512e:	495c      	ldr	r1, [pc, #368]	; (80152a0 <tcp_input+0x2a4>)
 8015130:	4854      	ldr	r0, [pc, #336]	; (8015284 <tcp_input+0x288>)
 8015132:	f007 fe89 	bl	801ce48 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	891a      	ldrh	r2, [r3, #8]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	891b      	ldrh	r3, [r3, #8]
 8015140:	429a      	cmp	r2, r3
 8015142:	d005      	beq.n	8015150 <tcp_input+0x154>
 8015144:	4b4d      	ldr	r3, [pc, #308]	; (801527c <tcp_input+0x280>)
 8015146:	22e0      	movs	r2, #224	; 0xe0
 8015148:	4956      	ldr	r1, [pc, #344]	; (80152a4 <tcp_input+0x2a8>)
 801514a:	484e      	ldr	r0, [pc, #312]	; (8015284 <tcp_input+0x288>)
 801514c:	f007 fe7c 	bl	801ce48 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015150:	4b4d      	ldr	r3, [pc, #308]	; (8015288 <tcp_input+0x28c>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	881b      	ldrh	r3, [r3, #0]
 8015156:	b29b      	uxth	r3, r3
 8015158:	4a4b      	ldr	r2, [pc, #300]	; (8015288 <tcp_input+0x28c>)
 801515a:	6814      	ldr	r4, [r2, #0]
 801515c:	4618      	mov	r0, r3
 801515e:	f7fc fbb9 	bl	80118d4 <lwip_htons>
 8015162:	4603      	mov	r3, r0
 8015164:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015166:	4b48      	ldr	r3, [pc, #288]	; (8015288 <tcp_input+0x28c>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	885b      	ldrh	r3, [r3, #2]
 801516c:	b29b      	uxth	r3, r3
 801516e:	4a46      	ldr	r2, [pc, #280]	; (8015288 <tcp_input+0x28c>)
 8015170:	6814      	ldr	r4, [r2, #0]
 8015172:	4618      	mov	r0, r3
 8015174:	f7fc fbae 	bl	80118d4 <lwip_htons>
 8015178:	4603      	mov	r3, r0
 801517a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801517c:	4b42      	ldr	r3, [pc, #264]	; (8015288 <tcp_input+0x28c>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	4a41      	ldr	r2, [pc, #260]	; (8015288 <tcp_input+0x28c>)
 8015184:	6814      	ldr	r4, [r2, #0]
 8015186:	4618      	mov	r0, r3
 8015188:	f7fc fbb9 	bl	80118fe <lwip_htonl>
 801518c:	4603      	mov	r3, r0
 801518e:	6063      	str	r3, [r4, #4]
 8015190:	6863      	ldr	r3, [r4, #4]
 8015192:	4a45      	ldr	r2, [pc, #276]	; (80152a8 <tcp_input+0x2ac>)
 8015194:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015196:	4b3c      	ldr	r3, [pc, #240]	; (8015288 <tcp_input+0x28c>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	689b      	ldr	r3, [r3, #8]
 801519c:	4a3a      	ldr	r2, [pc, #232]	; (8015288 <tcp_input+0x28c>)
 801519e:	6814      	ldr	r4, [r2, #0]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7fc fbac 	bl	80118fe <lwip_htonl>
 80151a6:	4603      	mov	r3, r0
 80151a8:	60a3      	str	r3, [r4, #8]
 80151aa:	68a3      	ldr	r3, [r4, #8]
 80151ac:	4a3f      	ldr	r2, [pc, #252]	; (80152ac <tcp_input+0x2b0>)
 80151ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80151b0:	4b35      	ldr	r3, [pc, #212]	; (8015288 <tcp_input+0x28c>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	89db      	ldrh	r3, [r3, #14]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	4a33      	ldr	r2, [pc, #204]	; (8015288 <tcp_input+0x28c>)
 80151ba:	6814      	ldr	r4, [r2, #0]
 80151bc:	4618      	mov	r0, r3
 80151be:	f7fc fb89 	bl	80118d4 <lwip_htons>
 80151c2:	4603      	mov	r3, r0
 80151c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80151c6:	4b30      	ldr	r3, [pc, #192]	; (8015288 <tcp_input+0x28c>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	899b      	ldrh	r3, [r3, #12]
 80151cc:	b29b      	uxth	r3, r3
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7fc fb80 	bl	80118d4 <lwip_htons>
 80151d4:	4603      	mov	r3, r0
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80151dc:	b2da      	uxtb	r2, r3
 80151de:	4b34      	ldr	r3, [pc, #208]	; (80152b0 <tcp_input+0x2b4>)
 80151e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	891a      	ldrh	r2, [r3, #8]
 80151e6:	4b33      	ldr	r3, [pc, #204]	; (80152b4 <tcp_input+0x2b8>)
 80151e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80151ea:	4b31      	ldr	r3, [pc, #196]	; (80152b0 <tcp_input+0x2b4>)
 80151ec:	781b      	ldrb	r3, [r3, #0]
 80151ee:	f003 0303 	and.w	r3, r3, #3
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d00c      	beq.n	8015210 <tcp_input+0x214>
    tcplen++;
 80151f6:	4b2f      	ldr	r3, [pc, #188]	; (80152b4 <tcp_input+0x2b8>)
 80151f8:	881b      	ldrh	r3, [r3, #0]
 80151fa:	3301      	adds	r3, #1
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	4b2d      	ldr	r3, [pc, #180]	; (80152b4 <tcp_input+0x2b8>)
 8015200:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	891a      	ldrh	r2, [r3, #8]
 8015206:	4b2b      	ldr	r3, [pc, #172]	; (80152b4 <tcp_input+0x2b8>)
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	429a      	cmp	r2, r3
 801520c:	f200 82d9 	bhi.w	80157c2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015210:	2300      	movs	r3, #0
 8015212:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015214:	4b28      	ldr	r3, [pc, #160]	; (80152b8 <tcp_input+0x2bc>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	61fb      	str	r3, [r7, #28]
 801521a:	e09d      	b.n	8015358 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	7d1b      	ldrb	r3, [r3, #20]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d105      	bne.n	8015230 <tcp_input+0x234>
 8015224:	4b15      	ldr	r3, [pc, #84]	; (801527c <tcp_input+0x280>)
 8015226:	22fb      	movs	r2, #251	; 0xfb
 8015228:	4924      	ldr	r1, [pc, #144]	; (80152bc <tcp_input+0x2c0>)
 801522a:	4816      	ldr	r0, [pc, #88]	; (8015284 <tcp_input+0x288>)
 801522c:	f007 fe0c 	bl	801ce48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	7d1b      	ldrb	r3, [r3, #20]
 8015234:	2b0a      	cmp	r3, #10
 8015236:	d105      	bne.n	8015244 <tcp_input+0x248>
 8015238:	4b10      	ldr	r3, [pc, #64]	; (801527c <tcp_input+0x280>)
 801523a:	22fc      	movs	r2, #252	; 0xfc
 801523c:	4920      	ldr	r1, [pc, #128]	; (80152c0 <tcp_input+0x2c4>)
 801523e:	4811      	ldr	r0, [pc, #68]	; (8015284 <tcp_input+0x288>)
 8015240:	f007 fe02 	bl	801ce48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	7d1b      	ldrb	r3, [r3, #20]
 8015248:	2b01      	cmp	r3, #1
 801524a:	d105      	bne.n	8015258 <tcp_input+0x25c>
 801524c:	4b0b      	ldr	r3, [pc, #44]	; (801527c <tcp_input+0x280>)
 801524e:	22fd      	movs	r2, #253	; 0xfd
 8015250:	491c      	ldr	r1, [pc, #112]	; (80152c4 <tcp_input+0x2c8>)
 8015252:	480c      	ldr	r0, [pc, #48]	; (8015284 <tcp_input+0x288>)
 8015254:	f007 fdf8 	bl	801ce48 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015258:	69fb      	ldr	r3, [r7, #28]
 801525a:	7a1b      	ldrb	r3, [r3, #8]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d033      	beq.n	80152c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	7a1a      	ldrb	r2, [r3, #8]
 8015264:	4b09      	ldr	r3, [pc, #36]	; (801528c <tcp_input+0x290>)
 8015266:	685b      	ldr	r3, [r3, #4]
 8015268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801526c:	3301      	adds	r3, #1
 801526e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015270:	429a      	cmp	r2, r3
 8015272:	d029      	beq.n	80152c8 <tcp_input+0x2cc>
      prev = pcb;
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	61bb      	str	r3, [r7, #24]
      continue;
 8015278:	e06b      	b.n	8015352 <tcp_input+0x356>
 801527a:	bf00      	nop
 801527c:	0802019c 	.word	0x0802019c
 8015280:	080201d0 	.word	0x080201d0
 8015284:	080201e8 	.word	0x080201e8
 8015288:	20006bf4 	.word	0x20006bf4
 801528c:	2000a804 	.word	0x2000a804
 8015290:	20006bf8 	.word	0x20006bf8
 8015294:	20006bfc 	.word	0x20006bfc
 8015298:	20006bfa 	.word	0x20006bfa
 801529c:	08020210 	.word	0x08020210
 80152a0:	08020220 	.word	0x08020220
 80152a4:	0802022c 	.word	0x0802022c
 80152a8:	20006c04 	.word	0x20006c04
 80152ac:	20006c08 	.word	0x20006c08
 80152b0:	20006c10 	.word	0x20006c10
 80152b4:	20006c0e 	.word	0x20006c0e
 80152b8:	2000df18 	.word	0x2000df18
 80152bc:	0802024c 	.word	0x0802024c
 80152c0:	08020274 	.word	0x08020274
 80152c4:	080202a0 	.word	0x080202a0
    }

    if (pcb->remote_port == tcphdr->src &&
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	8b1a      	ldrh	r2, [r3, #24]
 80152cc:	4b94      	ldr	r3, [pc, #592]	; (8015520 <tcp_input+0x524>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	881b      	ldrh	r3, [r3, #0]
 80152d2:	b29b      	uxth	r3, r3
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d13a      	bne.n	801534e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	8ada      	ldrh	r2, [r3, #22]
 80152dc:	4b90      	ldr	r3, [pc, #576]	; (8015520 <tcp_input+0x524>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	885b      	ldrh	r3, [r3, #2]
 80152e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d132      	bne.n	801534e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152e8:	69fb      	ldr	r3, [r7, #28]
 80152ea:	685a      	ldr	r2, [r3, #4]
 80152ec:	4b8d      	ldr	r3, [pc, #564]	; (8015524 <tcp_input+0x528>)
 80152ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d12c      	bne.n	801534e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	4b8a      	ldr	r3, [pc, #552]	; (8015524 <tcp_input+0x528>)
 80152fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d126      	bne.n	801534e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	69fa      	ldr	r2, [r7, #28]
 8015306:	429a      	cmp	r2, r3
 8015308:	d106      	bne.n	8015318 <tcp_input+0x31c>
 801530a:	4b87      	ldr	r3, [pc, #540]	; (8015528 <tcp_input+0x52c>)
 801530c:	f240 120d 	movw	r2, #269	; 0x10d
 8015310:	4986      	ldr	r1, [pc, #536]	; (801552c <tcp_input+0x530>)
 8015312:	4887      	ldr	r0, [pc, #540]	; (8015530 <tcp_input+0x534>)
 8015314:	f007 fd98 	bl	801ce48 <iprintf>
      if (prev != NULL) {
 8015318:	69bb      	ldr	r3, [r7, #24]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d00a      	beq.n	8015334 <tcp_input+0x338>
        prev->next = pcb->next;
 801531e:	69fb      	ldr	r3, [r7, #28]
 8015320:	68da      	ldr	r2, [r3, #12]
 8015322:	69bb      	ldr	r3, [r7, #24]
 8015324:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015326:	4b83      	ldr	r3, [pc, #524]	; (8015534 <tcp_input+0x538>)
 8015328:	681a      	ldr	r2, [r3, #0]
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801532e:	4a81      	ldr	r2, [pc, #516]	; (8015534 <tcp_input+0x538>)
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	69fa      	ldr	r2, [r7, #28]
 801533a:	429a      	cmp	r2, r3
 801533c:	d111      	bne.n	8015362 <tcp_input+0x366>
 801533e:	4b7a      	ldr	r3, [pc, #488]	; (8015528 <tcp_input+0x52c>)
 8015340:	f240 1215 	movw	r2, #277	; 0x115
 8015344:	497c      	ldr	r1, [pc, #496]	; (8015538 <tcp_input+0x53c>)
 8015346:	487a      	ldr	r0, [pc, #488]	; (8015530 <tcp_input+0x534>)
 8015348:	f007 fd7e 	bl	801ce48 <iprintf>
      break;
 801534c:	e009      	b.n	8015362 <tcp_input+0x366>
    }
    prev = pcb;
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	68db      	ldr	r3, [r3, #12]
 8015356:	61fb      	str	r3, [r7, #28]
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	2b00      	cmp	r3, #0
 801535c:	f47f af5e 	bne.w	801521c <tcp_input+0x220>
 8015360:	e000      	b.n	8015364 <tcp_input+0x368>
      break;
 8015362:	bf00      	nop
  }

  if (pcb == NULL) {
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	2b00      	cmp	r3, #0
 8015368:	f040 8095 	bne.w	8015496 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801536c:	4b73      	ldr	r3, [pc, #460]	; (801553c <tcp_input+0x540>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	61fb      	str	r3, [r7, #28]
 8015372:	e03f      	b.n	80153f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	7d1b      	ldrb	r3, [r3, #20]
 8015378:	2b0a      	cmp	r3, #10
 801537a:	d006      	beq.n	801538a <tcp_input+0x38e>
 801537c:	4b6a      	ldr	r3, [pc, #424]	; (8015528 <tcp_input+0x52c>)
 801537e:	f240 121f 	movw	r2, #287	; 0x11f
 8015382:	496f      	ldr	r1, [pc, #444]	; (8015540 <tcp_input+0x544>)
 8015384:	486a      	ldr	r0, [pc, #424]	; (8015530 <tcp_input+0x534>)
 8015386:	f007 fd5f 	bl	801ce48 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	7a1b      	ldrb	r3, [r3, #8]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d009      	beq.n	80153a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	7a1a      	ldrb	r2, [r3, #8]
 8015396:	4b63      	ldr	r3, [pc, #396]	; (8015524 <tcp_input+0x528>)
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801539e:	3301      	adds	r3, #1
 80153a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d122      	bne.n	80153ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	8b1a      	ldrh	r2, [r3, #24]
 80153aa:	4b5d      	ldr	r3, [pc, #372]	; (8015520 <tcp_input+0x524>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	881b      	ldrh	r3, [r3, #0]
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d11b      	bne.n	80153ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	8ada      	ldrh	r2, [r3, #22]
 80153ba:	4b59      	ldr	r3, [pc, #356]	; (8015520 <tcp_input+0x524>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	885b      	ldrh	r3, [r3, #2]
 80153c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d113      	bne.n	80153ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153c6:	69fb      	ldr	r3, [r7, #28]
 80153c8:	685a      	ldr	r2, [r3, #4]
 80153ca:	4b56      	ldr	r3, [pc, #344]	; (8015524 <tcp_input+0x528>)
 80153cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d10d      	bne.n	80153ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	681a      	ldr	r2, [r3, #0]
 80153d6:	4b53      	ldr	r3, [pc, #332]	; (8015524 <tcp_input+0x528>)
 80153d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153da:	429a      	cmp	r2, r3
 80153dc:	d107      	bne.n	80153ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80153de:	69f8      	ldr	r0, [r7, #28]
 80153e0:	f000 fb54 	bl	8015a8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f7fd fdbd 	bl	8012f64 <pbuf_free>
        return;
 80153ea:	e1f0      	b.n	80157ce <tcp_input+0x7d2>
        continue;
 80153ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80153ee:	69fb      	ldr	r3, [r7, #28]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	61fb      	str	r3, [r7, #28]
 80153f4:	69fb      	ldr	r3, [r7, #28]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d1bc      	bne.n	8015374 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80153fa:	2300      	movs	r3, #0
 80153fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80153fe:	4b51      	ldr	r3, [pc, #324]	; (8015544 <tcp_input+0x548>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	617b      	str	r3, [r7, #20]
 8015404:	e02a      	b.n	801545c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	7a1b      	ldrb	r3, [r3, #8]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00c      	beq.n	8015428 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	7a1a      	ldrb	r2, [r3, #8]
 8015412:	4b44      	ldr	r3, [pc, #272]	; (8015524 <tcp_input+0x528>)
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801541a:	3301      	adds	r3, #1
 801541c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801541e:	429a      	cmp	r2, r3
 8015420:	d002      	beq.n	8015428 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015422:	697b      	ldr	r3, [r7, #20]
 8015424:	61bb      	str	r3, [r7, #24]
        continue;
 8015426:	e016      	b.n	8015456 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	8ada      	ldrh	r2, [r3, #22]
 801542c:	4b3c      	ldr	r3, [pc, #240]	; (8015520 <tcp_input+0x524>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	885b      	ldrh	r3, [r3, #2]
 8015432:	b29b      	uxth	r3, r3
 8015434:	429a      	cmp	r2, r3
 8015436:	d10c      	bne.n	8015452 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015438:	697b      	ldr	r3, [r7, #20]
 801543a:	681a      	ldr	r2, [r3, #0]
 801543c:	4b39      	ldr	r3, [pc, #228]	; (8015524 <tcp_input+0x528>)
 801543e:	695b      	ldr	r3, [r3, #20]
 8015440:	429a      	cmp	r2, r3
 8015442:	d00f      	beq.n	8015464 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d00d      	beq.n	8015466 <tcp_input+0x46a>
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d009      	beq.n	8015466 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	68db      	ldr	r3, [r3, #12]
 801545a:	617b      	str	r3, [r7, #20]
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d1d1      	bne.n	8015406 <tcp_input+0x40a>
 8015462:	e000      	b.n	8015466 <tcp_input+0x46a>
            break;
 8015464:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d014      	beq.n	8015496 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d00a      	beq.n	8015488 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	68da      	ldr	r2, [r3, #12]
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801547a:	4b32      	ldr	r3, [pc, #200]	; (8015544 <tcp_input+0x548>)
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015482:	4a30      	ldr	r2, [pc, #192]	; (8015544 <tcp_input+0x548>)
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015488:	6978      	ldr	r0, [r7, #20]
 801548a:	f000 fa01 	bl	8015890 <tcp_listen_input>
      }
      pbuf_free(p);
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f7fd fd68 	bl	8012f64 <pbuf_free>
      return;
 8015494:	e19b      	b.n	80157ce <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	2b00      	cmp	r3, #0
 801549a:	f000 8160 	beq.w	801575e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801549e:	4b2a      	ldr	r3, [pc, #168]	; (8015548 <tcp_input+0x54c>)
 80154a0:	2200      	movs	r2, #0
 80154a2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	891a      	ldrh	r2, [r3, #8]
 80154a8:	4b27      	ldr	r3, [pc, #156]	; (8015548 <tcp_input+0x54c>)
 80154aa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80154ac:	4a26      	ldr	r2, [pc, #152]	; (8015548 <tcp_input+0x54c>)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80154b2:	4b1b      	ldr	r3, [pc, #108]	; (8015520 <tcp_input+0x524>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	4a24      	ldr	r2, [pc, #144]	; (8015548 <tcp_input+0x54c>)
 80154b8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80154ba:	4b24      	ldr	r3, [pc, #144]	; (801554c <tcp_input+0x550>)
 80154bc:	2200      	movs	r2, #0
 80154be:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80154c0:	4b23      	ldr	r3, [pc, #140]	; (8015550 <tcp_input+0x554>)
 80154c2:	2200      	movs	r2, #0
 80154c4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80154c6:	4b23      	ldr	r3, [pc, #140]	; (8015554 <tcp_input+0x558>)
 80154c8:	2200      	movs	r2, #0
 80154ca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80154cc:	4b22      	ldr	r3, [pc, #136]	; (8015558 <tcp_input+0x55c>)
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	f003 0308 	and.w	r3, r3, #8
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d006      	beq.n	80154e6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	7b5b      	ldrb	r3, [r3, #13]
 80154dc:	f043 0301 	orr.w	r3, r3, #1
 80154e0:	b2da      	uxtb	r2, r3
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d038      	beq.n	8015560 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80154ee:	69f8      	ldr	r0, [r7, #28]
 80154f0:	f7ff f870 	bl	80145d4 <tcp_process_refused_data>
 80154f4:	4603      	mov	r3, r0
 80154f6:	f113 0f0d 	cmn.w	r3, #13
 80154fa:	d007      	beq.n	801550c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015500:	2b00      	cmp	r3, #0
 8015502:	d02d      	beq.n	8015560 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015504:	4b15      	ldr	r3, [pc, #84]	; (801555c <tcp_input+0x560>)
 8015506:	881b      	ldrh	r3, [r3, #0]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d029      	beq.n	8015560 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015510:	2b00      	cmp	r3, #0
 8015512:	f040 8104 	bne.w	801571e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015516:	69f8      	ldr	r0, [r7, #28]
 8015518:	f003 fe16 	bl	8019148 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801551c:	e0ff      	b.n	801571e <tcp_input+0x722>
 801551e:	bf00      	nop
 8015520:	20006bf4 	.word	0x20006bf4
 8015524:	2000a804 	.word	0x2000a804
 8015528:	0802019c 	.word	0x0802019c
 801552c:	080202c8 	.word	0x080202c8
 8015530:	080201e8 	.word	0x080201e8
 8015534:	2000df18 	.word	0x2000df18
 8015538:	080202f4 	.word	0x080202f4
 801553c:	2000df28 	.word	0x2000df28
 8015540:	08020320 	.word	0x08020320
 8015544:	2000df20 	.word	0x2000df20
 8015548:	20006be4 	.word	0x20006be4
 801554c:	20006c14 	.word	0x20006c14
 8015550:	20006c11 	.word	0x20006c11
 8015554:	20006c0c 	.word	0x20006c0c
 8015558:	20006c10 	.word	0x20006c10
 801555c:	20006c0e 	.word	0x20006c0e
      }
    }
    tcp_input_pcb = pcb;
 8015560:	4a9c      	ldr	r2, [pc, #624]	; (80157d4 <tcp_input+0x7d8>)
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015566:	69f8      	ldr	r0, [r7, #28]
 8015568:	f000 fb0a 	bl	8015b80 <tcp_process>
 801556c:	4603      	mov	r3, r0
 801556e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015574:	f113 0f0d 	cmn.w	r3, #13
 8015578:	f000 80d3 	beq.w	8015722 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801557c:	4b96      	ldr	r3, [pc, #600]	; (80157d8 <tcp_input+0x7dc>)
 801557e:	781b      	ldrb	r3, [r3, #0]
 8015580:	f003 0308 	and.w	r3, r3, #8
 8015584:	2b00      	cmp	r3, #0
 8015586:	d015      	beq.n	80155b4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801558e:	2b00      	cmp	r3, #0
 8015590:	d008      	beq.n	80155a4 <tcp_input+0x5a8>
 8015592:	69fb      	ldr	r3, [r7, #28]
 8015594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015598:	69fa      	ldr	r2, [r7, #28]
 801559a:	6912      	ldr	r2, [r2, #16]
 801559c:	f06f 010d 	mvn.w	r1, #13
 80155a0:	4610      	mov	r0, r2
 80155a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80155a4:	69f9      	ldr	r1, [r7, #28]
 80155a6:	488d      	ldr	r0, [pc, #564]	; (80157dc <tcp_input+0x7e0>)
 80155a8:	f7ff fbb0 	bl	8014d0c <tcp_pcb_remove>
        tcp_free(pcb);
 80155ac:	69f8      	ldr	r0, [r7, #28]
 80155ae:	f7fd ff95 	bl	80134dc <tcp_free>
 80155b2:	e0c1      	b.n	8015738 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80155b4:	2300      	movs	r3, #0
 80155b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80155b8:	4b89      	ldr	r3, [pc, #548]	; (80157e0 <tcp_input+0x7e4>)
 80155ba:	881b      	ldrh	r3, [r3, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d01d      	beq.n	80155fc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80155c0:	4b87      	ldr	r3, [pc, #540]	; (80157e0 <tcp_input+0x7e4>)
 80155c2:	881b      	ldrh	r3, [r3, #0]
 80155c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00a      	beq.n	80155e6 <tcp_input+0x5ea>
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155d6:	69fa      	ldr	r2, [r7, #28]
 80155d8:	6910      	ldr	r0, [r2, #16]
 80155da:	89fa      	ldrh	r2, [r7, #14]
 80155dc:	69f9      	ldr	r1, [r7, #28]
 80155de:	4798      	blx	r3
 80155e0:	4603      	mov	r3, r0
 80155e2:	74fb      	strb	r3, [r7, #19]
 80155e4:	e001      	b.n	80155ea <tcp_input+0x5ee>
 80155e6:	2300      	movs	r3, #0
 80155e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80155ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155ee:	f113 0f0d 	cmn.w	r3, #13
 80155f2:	f000 8098 	beq.w	8015726 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80155f6:	4b7a      	ldr	r3, [pc, #488]	; (80157e0 <tcp_input+0x7e4>)
 80155f8:	2200      	movs	r2, #0
 80155fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80155fc:	69f8      	ldr	r0, [r7, #28]
 80155fe:	f000 f907 	bl	8015810 <tcp_input_delayed_close>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	f040 8090 	bne.w	801572a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801560a:	4b76      	ldr	r3, [pc, #472]	; (80157e4 <tcp_input+0x7e8>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d041      	beq.n	8015696 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015616:	2b00      	cmp	r3, #0
 8015618:	d006      	beq.n	8015628 <tcp_input+0x62c>
 801561a:	4b73      	ldr	r3, [pc, #460]	; (80157e8 <tcp_input+0x7ec>)
 801561c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015620:	4972      	ldr	r1, [pc, #456]	; (80157ec <tcp_input+0x7f0>)
 8015622:	4873      	ldr	r0, [pc, #460]	; (80157f0 <tcp_input+0x7f4>)
 8015624:	f007 fc10 	bl	801ce48 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015628:	69fb      	ldr	r3, [r7, #28]
 801562a:	8b5b      	ldrh	r3, [r3, #26]
 801562c:	f003 0310 	and.w	r3, r3, #16
 8015630:	2b00      	cmp	r3, #0
 8015632:	d008      	beq.n	8015646 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015634:	4b6b      	ldr	r3, [pc, #428]	; (80157e4 <tcp_input+0x7e8>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	4618      	mov	r0, r3
 801563a:	f7fd fc93 	bl	8012f64 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801563e:	69f8      	ldr	r0, [r7, #28]
 8015640:	f7fe fa90 	bl	8013b64 <tcp_abort>
            goto aborted;
 8015644:	e078      	b.n	8015738 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801564c:	2b00      	cmp	r3, #0
 801564e:	d00c      	beq.n	801566a <tcp_input+0x66e>
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	6918      	ldr	r0, [r3, #16]
 801565a:	4b62      	ldr	r3, [pc, #392]	; (80157e4 <tcp_input+0x7e8>)
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	2300      	movs	r3, #0
 8015660:	69f9      	ldr	r1, [r7, #28]
 8015662:	47a0      	blx	r4
 8015664:	4603      	mov	r3, r0
 8015666:	74fb      	strb	r3, [r7, #19]
 8015668:	e008      	b.n	801567c <tcp_input+0x680>
 801566a:	4b5e      	ldr	r3, [pc, #376]	; (80157e4 <tcp_input+0x7e8>)
 801566c:	681a      	ldr	r2, [r3, #0]
 801566e:	2300      	movs	r3, #0
 8015670:	69f9      	ldr	r1, [r7, #28]
 8015672:	2000      	movs	r0, #0
 8015674:	f7ff f884 	bl	8014780 <tcp_recv_null>
 8015678:	4603      	mov	r3, r0
 801567a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801567c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015680:	f113 0f0d 	cmn.w	r3, #13
 8015684:	d053      	beq.n	801572e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d003      	beq.n	8015696 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801568e:	4b55      	ldr	r3, [pc, #340]	; (80157e4 <tcp_input+0x7e8>)
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015696:	4b50      	ldr	r3, [pc, #320]	; (80157d8 <tcp_input+0x7dc>)
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	f003 0320 	and.w	r3, r3, #32
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d030      	beq.n	8015704 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d009      	beq.n	80156be <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156ae:	7b5a      	ldrb	r2, [r3, #13]
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156b4:	f042 0220 	orr.w	r2, r2, #32
 80156b8:	b2d2      	uxtb	r2, r2
 80156ba:	735a      	strb	r2, [r3, #13]
 80156bc:	e022      	b.n	8015704 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80156c6:	d005      	beq.n	80156d4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156cc:	3301      	adds	r3, #1
 80156ce:	b29a      	uxth	r2, r3
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00b      	beq.n	80156f6 <tcp_input+0x6fa>
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	6918      	ldr	r0, [r3, #16]
 80156e8:	2300      	movs	r3, #0
 80156ea:	2200      	movs	r2, #0
 80156ec:	69f9      	ldr	r1, [r7, #28]
 80156ee:	47a0      	blx	r4
 80156f0:	4603      	mov	r3, r0
 80156f2:	74fb      	strb	r3, [r7, #19]
 80156f4:	e001      	b.n	80156fa <tcp_input+0x6fe>
 80156f6:	2300      	movs	r3, #0
 80156f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80156fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156fe:	f113 0f0d 	cmn.w	r3, #13
 8015702:	d016      	beq.n	8015732 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015704:	4b33      	ldr	r3, [pc, #204]	; (80157d4 <tcp_input+0x7d8>)
 8015706:	2200      	movs	r2, #0
 8015708:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801570a:	69f8      	ldr	r0, [r7, #28]
 801570c:	f000 f880 	bl	8015810 <tcp_input_delayed_close>
 8015710:	4603      	mov	r3, r0
 8015712:	2b00      	cmp	r3, #0
 8015714:	d10f      	bne.n	8015736 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015716:	69f8      	ldr	r0, [r7, #28]
 8015718:	f002 ff10 	bl	801853c <tcp_output>
 801571c:	e00c      	b.n	8015738 <tcp_input+0x73c>
        goto aborted;
 801571e:	bf00      	nop
 8015720:	e00a      	b.n	8015738 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015722:	bf00      	nop
 8015724:	e008      	b.n	8015738 <tcp_input+0x73c>
              goto aborted;
 8015726:	bf00      	nop
 8015728:	e006      	b.n	8015738 <tcp_input+0x73c>
          goto aborted;
 801572a:	bf00      	nop
 801572c:	e004      	b.n	8015738 <tcp_input+0x73c>
            goto aborted;
 801572e:	bf00      	nop
 8015730:	e002      	b.n	8015738 <tcp_input+0x73c>
              goto aborted;
 8015732:	bf00      	nop
 8015734:	e000      	b.n	8015738 <tcp_input+0x73c>
          goto aborted;
 8015736:	bf00      	nop
    tcp_input_pcb = NULL;
 8015738:	4b26      	ldr	r3, [pc, #152]	; (80157d4 <tcp_input+0x7d8>)
 801573a:	2200      	movs	r2, #0
 801573c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801573e:	4b29      	ldr	r3, [pc, #164]	; (80157e4 <tcp_input+0x7e8>)
 8015740:	2200      	movs	r2, #0
 8015742:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015744:	4b2b      	ldr	r3, [pc, #172]	; (80157f4 <tcp_input+0x7f8>)
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d03f      	beq.n	80157cc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801574c:	4b29      	ldr	r3, [pc, #164]	; (80157f4 <tcp_input+0x7f8>)
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f7fd fc07 	bl	8012f64 <pbuf_free>
      inseg.p = NULL;
 8015756:	4b27      	ldr	r3, [pc, #156]	; (80157f4 <tcp_input+0x7f8>)
 8015758:	2200      	movs	r2, #0
 801575a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801575c:	e036      	b.n	80157cc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801575e:	4b26      	ldr	r3, [pc, #152]	; (80157f8 <tcp_input+0x7fc>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	899b      	ldrh	r3, [r3, #12]
 8015764:	b29b      	uxth	r3, r3
 8015766:	4618      	mov	r0, r3
 8015768:	f7fc f8b4 	bl	80118d4 <lwip_htons>
 801576c:	4603      	mov	r3, r0
 801576e:	b2db      	uxtb	r3, r3
 8015770:	f003 0304 	and.w	r3, r3, #4
 8015774:	2b00      	cmp	r3, #0
 8015776:	d118      	bne.n	80157aa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015778:	4b20      	ldr	r3, [pc, #128]	; (80157fc <tcp_input+0x800>)
 801577a:	6819      	ldr	r1, [r3, #0]
 801577c:	4b20      	ldr	r3, [pc, #128]	; (8015800 <tcp_input+0x804>)
 801577e:	881b      	ldrh	r3, [r3, #0]
 8015780:	461a      	mov	r2, r3
 8015782:	4b20      	ldr	r3, [pc, #128]	; (8015804 <tcp_input+0x808>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015788:	4b1b      	ldr	r3, [pc, #108]	; (80157f8 <tcp_input+0x7fc>)
 801578a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801578c:	885b      	ldrh	r3, [r3, #2]
 801578e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015790:	4a19      	ldr	r2, [pc, #100]	; (80157f8 <tcp_input+0x7fc>)
 8015792:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015794:	8812      	ldrh	r2, [r2, #0]
 8015796:	b292      	uxth	r2, r2
 8015798:	9202      	str	r2, [sp, #8]
 801579a:	9301      	str	r3, [sp, #4]
 801579c:	4b1a      	ldr	r3, [pc, #104]	; (8015808 <tcp_input+0x80c>)
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	4b1a      	ldr	r3, [pc, #104]	; (801580c <tcp_input+0x810>)
 80157a2:	4602      	mov	r2, r0
 80157a4:	2000      	movs	r0, #0
 80157a6:	f003 fc7d 	bl	80190a4 <tcp_rst>
    pbuf_free(p);
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f7fd fbda 	bl	8012f64 <pbuf_free>
  return;
 80157b0:	e00c      	b.n	80157cc <tcp_input+0x7d0>
    goto dropped;
 80157b2:	bf00      	nop
 80157b4:	e006      	b.n	80157c4 <tcp_input+0x7c8>
    goto dropped;
 80157b6:	bf00      	nop
 80157b8:	e004      	b.n	80157c4 <tcp_input+0x7c8>
    goto dropped;
 80157ba:	bf00      	nop
 80157bc:	e002      	b.n	80157c4 <tcp_input+0x7c8>
      goto dropped;
 80157be:	bf00      	nop
 80157c0:	e000      	b.n	80157c4 <tcp_input+0x7c8>
      goto dropped;
 80157c2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f7fd fbcd 	bl	8012f64 <pbuf_free>
 80157ca:	e000      	b.n	80157ce <tcp_input+0x7d2>
  return;
 80157cc:	bf00      	nop
}
 80157ce:	3724      	adds	r7, #36	; 0x24
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd90      	pop	{r4, r7, pc}
 80157d4:	2000df2c 	.word	0x2000df2c
 80157d8:	20006c11 	.word	0x20006c11
 80157dc:	2000df18 	.word	0x2000df18
 80157e0:	20006c0c 	.word	0x20006c0c
 80157e4:	20006c14 	.word	0x20006c14
 80157e8:	0802019c 	.word	0x0802019c
 80157ec:	08020350 	.word	0x08020350
 80157f0:	080201e8 	.word	0x080201e8
 80157f4:	20006be4 	.word	0x20006be4
 80157f8:	20006bf4 	.word	0x20006bf4
 80157fc:	20006c08 	.word	0x20006c08
 8015800:	20006c0e 	.word	0x20006c0e
 8015804:	20006c04 	.word	0x20006c04
 8015808:	2000a814 	.word	0x2000a814
 801580c:	2000a818 	.word	0x2000a818

08015810 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d106      	bne.n	801582c <tcp_input_delayed_close+0x1c>
 801581e:	4b17      	ldr	r3, [pc, #92]	; (801587c <tcp_input_delayed_close+0x6c>)
 8015820:	f240 225a 	movw	r2, #602	; 0x25a
 8015824:	4916      	ldr	r1, [pc, #88]	; (8015880 <tcp_input_delayed_close+0x70>)
 8015826:	4817      	ldr	r0, [pc, #92]	; (8015884 <tcp_input_delayed_close+0x74>)
 8015828:	f007 fb0e 	bl	801ce48 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801582c:	4b16      	ldr	r3, [pc, #88]	; (8015888 <tcp_input_delayed_close+0x78>)
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	f003 0310 	and.w	r3, r3, #16
 8015834:	2b00      	cmp	r3, #0
 8015836:	d01c      	beq.n	8015872 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	8b5b      	ldrh	r3, [r3, #26]
 801583c:	f003 0310 	and.w	r3, r3, #16
 8015840:	2b00      	cmp	r3, #0
 8015842:	d10d      	bne.n	8015860 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801584a:	2b00      	cmp	r3, #0
 801584c:	d008      	beq.n	8015860 <tcp_input_delayed_close+0x50>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	6912      	ldr	r2, [r2, #16]
 8015858:	f06f 010e 	mvn.w	r1, #14
 801585c:	4610      	mov	r0, r2
 801585e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015860:	6879      	ldr	r1, [r7, #4]
 8015862:	480a      	ldr	r0, [pc, #40]	; (801588c <tcp_input_delayed_close+0x7c>)
 8015864:	f7ff fa52 	bl	8014d0c <tcp_pcb_remove>
    tcp_free(pcb);
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7fd fe37 	bl	80134dc <tcp_free>
    return 1;
 801586e:	2301      	movs	r3, #1
 8015870:	e000      	b.n	8015874 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015872:	2300      	movs	r3, #0
}
 8015874:	4618      	mov	r0, r3
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	0802019c 	.word	0x0802019c
 8015880:	0802036c 	.word	0x0802036c
 8015884:	080201e8 	.word	0x080201e8
 8015888:	20006c11 	.word	0x20006c11
 801588c:	2000df18 	.word	0x2000df18

08015890 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015890:	b590      	push	{r4, r7, lr}
 8015892:	b08b      	sub	sp, #44	; 0x2c
 8015894:	af04      	add	r7, sp, #16
 8015896:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015898:	4b6f      	ldr	r3, [pc, #444]	; (8015a58 <tcp_listen_input+0x1c8>)
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	f003 0304 	and.w	r3, r3, #4
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	f040 80d2 	bne.w	8015a4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d106      	bne.n	80158ba <tcp_listen_input+0x2a>
 80158ac:	4b6b      	ldr	r3, [pc, #428]	; (8015a5c <tcp_listen_input+0x1cc>)
 80158ae:	f240 2281 	movw	r2, #641	; 0x281
 80158b2:	496b      	ldr	r1, [pc, #428]	; (8015a60 <tcp_listen_input+0x1d0>)
 80158b4:	486b      	ldr	r0, [pc, #428]	; (8015a64 <tcp_listen_input+0x1d4>)
 80158b6:	f007 fac7 	bl	801ce48 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80158ba:	4b67      	ldr	r3, [pc, #412]	; (8015a58 <tcp_listen_input+0x1c8>)
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	f003 0310 	and.w	r3, r3, #16
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d019      	beq.n	80158fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158c6:	4b68      	ldr	r3, [pc, #416]	; (8015a68 <tcp_listen_input+0x1d8>)
 80158c8:	6819      	ldr	r1, [r3, #0]
 80158ca:	4b68      	ldr	r3, [pc, #416]	; (8015a6c <tcp_listen_input+0x1dc>)
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	461a      	mov	r2, r3
 80158d0:	4b67      	ldr	r3, [pc, #412]	; (8015a70 <tcp_listen_input+0x1e0>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158d6:	4b67      	ldr	r3, [pc, #412]	; (8015a74 <tcp_listen_input+0x1e4>)
 80158d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158da:	885b      	ldrh	r3, [r3, #2]
 80158dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158de:	4a65      	ldr	r2, [pc, #404]	; (8015a74 <tcp_listen_input+0x1e4>)
 80158e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158e2:	8812      	ldrh	r2, [r2, #0]
 80158e4:	b292      	uxth	r2, r2
 80158e6:	9202      	str	r2, [sp, #8]
 80158e8:	9301      	str	r3, [sp, #4]
 80158ea:	4b63      	ldr	r3, [pc, #396]	; (8015a78 <tcp_listen_input+0x1e8>)
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	4b63      	ldr	r3, [pc, #396]	; (8015a7c <tcp_listen_input+0x1ec>)
 80158f0:	4602      	mov	r2, r0
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f003 fbd6 	bl	80190a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80158f8:	e0a9      	b.n	8015a4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80158fa:	4b57      	ldr	r3, [pc, #348]	; (8015a58 <tcp_listen_input+0x1c8>)
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	f003 0302 	and.w	r3, r3, #2
 8015902:	2b00      	cmp	r3, #0
 8015904:	f000 80a3 	beq.w	8015a4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	7d5b      	ldrb	r3, [r3, #21]
 801590c:	4618      	mov	r0, r3
 801590e:	f7ff f85b 	bl	80149c8 <tcp_alloc>
 8015912:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d111      	bne.n	801593e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	699b      	ldr	r3, [r3, #24]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d00a      	beq.n	8015938 <tcp_listen_input+0xa8>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	699b      	ldr	r3, [r3, #24]
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	6910      	ldr	r0, [r2, #16]
 801592a:	f04f 32ff 	mov.w	r2, #4294967295
 801592e:	2100      	movs	r1, #0
 8015930:	4798      	blx	r3
 8015932:	4603      	mov	r3, r0
 8015934:	73bb      	strb	r3, [r7, #14]
      return;
 8015936:	e08b      	b.n	8015a50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015938:	23f0      	movs	r3, #240	; 0xf0
 801593a:	73bb      	strb	r3, [r7, #14]
      return;
 801593c:	e088      	b.n	8015a50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801593e:	4b50      	ldr	r3, [pc, #320]	; (8015a80 <tcp_listen_input+0x1f0>)
 8015940:	695a      	ldr	r2, [r3, #20]
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015946:	4b4e      	ldr	r3, [pc, #312]	; (8015a80 <tcp_listen_input+0x1f0>)
 8015948:	691a      	ldr	r2, [r3, #16]
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	8ada      	ldrh	r2, [r3, #22]
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015956:	4b47      	ldr	r3, [pc, #284]	; (8015a74 <tcp_listen_input+0x1e4>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	881b      	ldrh	r3, [r3, #0]
 801595c:	b29a      	uxth	r2, r3
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	2203      	movs	r2, #3
 8015966:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015968:	4b41      	ldr	r3, [pc, #260]	; (8015a70 <tcp_listen_input+0x1e0>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	1c5a      	adds	r2, r3, #1
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801597a:	6978      	ldr	r0, [r7, #20]
 801597c:	f7ff fa5a 	bl	8014e34 <tcp_next_iss>
 8015980:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	693a      	ldr	r2, [r7, #16]
 801598c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	693a      	ldr	r2, [r7, #16]
 8015992:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	693a      	ldr	r2, [r7, #16]
 8015998:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801599a:	4b35      	ldr	r3, [pc, #212]	; (8015a70 <tcp_listen_input+0x1e0>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	1e5a      	subs	r2, r3, #1
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	691a      	ldr	r2, [r3, #16]
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	7a5b      	ldrb	r3, [r3, #9]
 80159b6:	f003 030c 	and.w	r3, r3, #12
 80159ba:	b2da      	uxtb	r2, r3
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	7a1a      	ldrb	r2, [r3, #8]
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80159c8:	4b2e      	ldr	r3, [pc, #184]	; (8015a84 <tcp_listen_input+0x1f4>)
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	60da      	str	r2, [r3, #12]
 80159d0:	4a2c      	ldr	r2, [pc, #176]	; (8015a84 <tcp_listen_input+0x1f4>)
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	6013      	str	r3, [r2, #0]
 80159d6:	f003 fd27 	bl	8019428 <tcp_timer_needed>
 80159da:	4b2b      	ldr	r3, [pc, #172]	; (8015a88 <tcp_listen_input+0x1f8>)
 80159dc:	2201      	movs	r2, #1
 80159de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80159e0:	6978      	ldr	r0, [r7, #20]
 80159e2:	f001 fd8d 	bl	8017500 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80159e6:	4b23      	ldr	r3, [pc, #140]	; (8015a74 <tcp_listen_input+0x1e4>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	89db      	ldrh	r3, [r3, #14]
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	3304      	adds	r3, #4
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f005 fc4b 	bl	801b2a4 <ip4_route>
 8015a0e:	4601      	mov	r1, r0
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	3304      	adds	r3, #4
 8015a14:	461a      	mov	r2, r3
 8015a16:	4620      	mov	r0, r4
 8015a18:	f7ff fa32 	bl	8014e80 <tcp_eff_send_mss_netif>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	461a      	mov	r2, r3
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015a24:	2112      	movs	r1, #18
 8015a26:	6978      	ldr	r0, [r7, #20]
 8015a28:	f002 fc9a 	bl	8018360 <tcp_enqueue_flags>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d004      	beq.n	8015a42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015a38:	2100      	movs	r1, #0
 8015a3a:	6978      	ldr	r0, [r7, #20]
 8015a3c:	f7fd ffd4 	bl	80139e8 <tcp_abandon>
      return;
 8015a40:	e006      	b.n	8015a50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015a42:	6978      	ldr	r0, [r7, #20]
 8015a44:	f002 fd7a 	bl	801853c <tcp_output>
  return;
 8015a48:	e001      	b.n	8015a4e <tcp_listen_input+0x1be>
    return;
 8015a4a:	bf00      	nop
 8015a4c:	e000      	b.n	8015a50 <tcp_listen_input+0x1c0>
  return;
 8015a4e:	bf00      	nop
}
 8015a50:	371c      	adds	r7, #28
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd90      	pop	{r4, r7, pc}
 8015a56:	bf00      	nop
 8015a58:	20006c10 	.word	0x20006c10
 8015a5c:	0802019c 	.word	0x0802019c
 8015a60:	08020394 	.word	0x08020394
 8015a64:	080201e8 	.word	0x080201e8
 8015a68:	20006c08 	.word	0x20006c08
 8015a6c:	20006c0e 	.word	0x20006c0e
 8015a70:	20006c04 	.word	0x20006c04
 8015a74:	20006bf4 	.word	0x20006bf4
 8015a78:	2000a814 	.word	0x2000a814
 8015a7c:	2000a818 	.word	0x2000a818
 8015a80:	2000a804 	.word	0x2000a804
 8015a84:	2000df18 	.word	0x2000df18
 8015a88:	2000df14 	.word	0x2000df14

08015a8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af04      	add	r7, sp, #16
 8015a92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015a94:	4b2f      	ldr	r3, [pc, #188]	; (8015b54 <tcp_timewait_input+0xc8>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	f003 0304 	and.w	r3, r3, #4
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d153      	bne.n	8015b48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d106      	bne.n	8015ab4 <tcp_timewait_input+0x28>
 8015aa6:	4b2c      	ldr	r3, [pc, #176]	; (8015b58 <tcp_timewait_input+0xcc>)
 8015aa8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015aac:	492b      	ldr	r1, [pc, #172]	; (8015b5c <tcp_timewait_input+0xd0>)
 8015aae:	482c      	ldr	r0, [pc, #176]	; (8015b60 <tcp_timewait_input+0xd4>)
 8015ab0:	f007 f9ca 	bl	801ce48 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015ab4:	4b27      	ldr	r3, [pc, #156]	; (8015b54 <tcp_timewait_input+0xc8>)
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	f003 0302 	and.w	r3, r3, #2
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d02a      	beq.n	8015b16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015ac0:	4b28      	ldr	r3, [pc, #160]	; (8015b64 <tcp_timewait_input+0xd8>)
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac8:	1ad3      	subs	r3, r2, r3
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	db2d      	blt.n	8015b2a <tcp_timewait_input+0x9e>
 8015ace:	4b25      	ldr	r3, [pc, #148]	; (8015b64 <tcp_timewait_input+0xd8>)
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ad6:	6879      	ldr	r1, [r7, #4]
 8015ad8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ada:	440b      	add	r3, r1
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	dc23      	bgt.n	8015b2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ae2:	4b21      	ldr	r3, [pc, #132]	; (8015b68 <tcp_timewait_input+0xdc>)
 8015ae4:	6819      	ldr	r1, [r3, #0]
 8015ae6:	4b21      	ldr	r3, [pc, #132]	; (8015b6c <tcp_timewait_input+0xe0>)
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	461a      	mov	r2, r3
 8015aec:	4b1d      	ldr	r3, [pc, #116]	; (8015b64 <tcp_timewait_input+0xd8>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015af2:	4b1f      	ldr	r3, [pc, #124]	; (8015b70 <tcp_timewait_input+0xe4>)
 8015af4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015af6:	885b      	ldrh	r3, [r3, #2]
 8015af8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015afa:	4a1d      	ldr	r2, [pc, #116]	; (8015b70 <tcp_timewait_input+0xe4>)
 8015afc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015afe:	8812      	ldrh	r2, [r2, #0]
 8015b00:	b292      	uxth	r2, r2
 8015b02:	9202      	str	r2, [sp, #8]
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	4b1b      	ldr	r3, [pc, #108]	; (8015b74 <tcp_timewait_input+0xe8>)
 8015b08:	9300      	str	r3, [sp, #0]
 8015b0a:	4b1b      	ldr	r3, [pc, #108]	; (8015b78 <tcp_timewait_input+0xec>)
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f003 fac8 	bl	80190a4 <tcp_rst>
      return;
 8015b14:	e01b      	b.n	8015b4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015b16:	4b0f      	ldr	r3, [pc, #60]	; (8015b54 <tcp_timewait_input+0xc8>)
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	f003 0301 	and.w	r3, r3, #1
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d003      	beq.n	8015b2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015b22:	4b16      	ldr	r3, [pc, #88]	; (8015b7c <tcp_timewait_input+0xf0>)
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015b2a:	4b10      	ldr	r3, [pc, #64]	; (8015b6c <tcp_timewait_input+0xe0>)
 8015b2c:	881b      	ldrh	r3, [r3, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d00c      	beq.n	8015b4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	8b5b      	ldrh	r3, [r3, #26]
 8015b36:	f043 0302 	orr.w	r3, r3, #2
 8015b3a:	b29a      	uxth	r2, r3
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f002 fcfb 	bl	801853c <tcp_output>
  }
  return;
 8015b46:	e001      	b.n	8015b4c <tcp_timewait_input+0xc0>
    return;
 8015b48:	bf00      	nop
 8015b4a:	e000      	b.n	8015b4e <tcp_timewait_input+0xc2>
  return;
 8015b4c:	bf00      	nop
}
 8015b4e:	3708      	adds	r7, #8
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	20006c10 	.word	0x20006c10
 8015b58:	0802019c 	.word	0x0802019c
 8015b5c:	080203b4 	.word	0x080203b4
 8015b60:	080201e8 	.word	0x080201e8
 8015b64:	20006c04 	.word	0x20006c04
 8015b68:	20006c08 	.word	0x20006c08
 8015b6c:	20006c0e 	.word	0x20006c0e
 8015b70:	20006bf4 	.word	0x20006bf4
 8015b74:	2000a814 	.word	0x2000a814
 8015b78:	2000a818 	.word	0x2000a818
 8015b7c:	2000df1c 	.word	0x2000df1c

08015b80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015b80:	b590      	push	{r4, r7, lr}
 8015b82:	b08d      	sub	sp, #52	; 0x34
 8015b84:	af04      	add	r7, sp, #16
 8015b86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d106      	bne.n	8015ba4 <tcp_process+0x24>
 8015b96:	4ba5      	ldr	r3, [pc, #660]	; (8015e2c <tcp_process+0x2ac>)
 8015b98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015b9c:	49a4      	ldr	r1, [pc, #656]	; (8015e30 <tcp_process+0x2b0>)
 8015b9e:	48a5      	ldr	r0, [pc, #660]	; (8015e34 <tcp_process+0x2b4>)
 8015ba0:	f007 f952 	bl	801ce48 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015ba4:	4ba4      	ldr	r3, [pc, #656]	; (8015e38 <tcp_process+0x2b8>)
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	f003 0304 	and.w	r3, r3, #4
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d04e      	beq.n	8015c4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	7d1b      	ldrb	r3, [r3, #20]
 8015bb4:	2b02      	cmp	r3, #2
 8015bb6:	d108      	bne.n	8015bca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015bbc:	4b9f      	ldr	r3, [pc, #636]	; (8015e3c <tcp_process+0x2bc>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d123      	bne.n	8015c0c <tcp_process+0x8c>
        acceptable = 1;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	76fb      	strb	r3, [r7, #27]
 8015bc8:	e020      	b.n	8015c0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bce:	4b9c      	ldr	r3, [pc, #624]	; (8015e40 <tcp_process+0x2c0>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d102      	bne.n	8015bdc <tcp_process+0x5c>
        acceptable = 1;
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	76fb      	strb	r3, [r7, #27]
 8015bda:	e017      	b.n	8015c0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015bdc:	4b98      	ldr	r3, [pc, #608]	; (8015e40 <tcp_process+0x2c0>)
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be4:	1ad3      	subs	r3, r2, r3
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	db10      	blt.n	8015c0c <tcp_process+0x8c>
 8015bea:	4b95      	ldr	r3, [pc, #596]	; (8015e40 <tcp_process+0x2c0>)
 8015bec:	681a      	ldr	r2, [r3, #0]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf2:	6879      	ldr	r1, [r7, #4]
 8015bf4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015bf6:	440b      	add	r3, r1
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	dc06      	bgt.n	8015c0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	8b5b      	ldrh	r3, [r3, #26]
 8015c02:	f043 0302 	orr.w	r3, r3, #2
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015c0c:	7efb      	ldrb	r3, [r7, #27]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d01b      	beq.n	8015c4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	7d1b      	ldrb	r3, [r3, #20]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d106      	bne.n	8015c28 <tcp_process+0xa8>
 8015c1a:	4b84      	ldr	r3, [pc, #528]	; (8015e2c <tcp_process+0x2ac>)
 8015c1c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015c20:	4988      	ldr	r1, [pc, #544]	; (8015e44 <tcp_process+0x2c4>)
 8015c22:	4884      	ldr	r0, [pc, #528]	; (8015e34 <tcp_process+0x2b4>)
 8015c24:	f007 f910 	bl	801ce48 <iprintf>
      recv_flags |= TF_RESET;
 8015c28:	4b87      	ldr	r3, [pc, #540]	; (8015e48 <tcp_process+0x2c8>)
 8015c2a:	781b      	ldrb	r3, [r3, #0]
 8015c2c:	f043 0308 	orr.w	r3, r3, #8
 8015c30:	b2da      	uxtb	r2, r3
 8015c32:	4b85      	ldr	r3, [pc, #532]	; (8015e48 <tcp_process+0x2c8>)
 8015c34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	8b5b      	ldrh	r3, [r3, #26]
 8015c3a:	f023 0301 	bic.w	r3, r3, #1
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015c44:	f06f 030d 	mvn.w	r3, #13
 8015c48:	e37a      	b.n	8016340 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	e378      	b.n	8016340 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015c4e:	4b7a      	ldr	r3, [pc, #488]	; (8015e38 <tcp_process+0x2b8>)
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	f003 0302 	and.w	r3, r3, #2
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d010      	beq.n	8015c7c <tcp_process+0xfc>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	7d1b      	ldrb	r3, [r3, #20]
 8015c5e:	2b02      	cmp	r3, #2
 8015c60:	d00c      	beq.n	8015c7c <tcp_process+0xfc>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	7d1b      	ldrb	r3, [r3, #20]
 8015c66:	2b03      	cmp	r3, #3
 8015c68:	d008      	beq.n	8015c7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	8b5b      	ldrh	r3, [r3, #26]
 8015c6e:	f043 0302 	orr.w	r3, r3, #2
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	e361      	b.n	8016340 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	8b5b      	ldrh	r3, [r3, #26]
 8015c80:	f003 0310 	and.w	r3, r3, #16
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d103      	bne.n	8015c90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015c88:	4b70      	ldr	r3, [pc, #448]	; (8015e4c <tcp_process+0x2cc>)
 8015c8a:	681a      	ldr	r2, [r3, #0]
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f001 fc2d 	bl	8017500 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	7d1b      	ldrb	r3, [r3, #20]
 8015caa:	3b02      	subs	r3, #2
 8015cac:	2b07      	cmp	r3, #7
 8015cae:	f200 8337 	bhi.w	8016320 <tcp_process+0x7a0>
 8015cb2:	a201      	add	r2, pc, #4	; (adr r2, 8015cb8 <tcp_process+0x138>)
 8015cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cb8:	08015cd9 	.word	0x08015cd9
 8015cbc:	08015f09 	.word	0x08015f09
 8015cc0:	08016081 	.word	0x08016081
 8015cc4:	080160ab 	.word	0x080160ab
 8015cc8:	080161cf 	.word	0x080161cf
 8015ccc:	08016081 	.word	0x08016081
 8015cd0:	0801625b 	.word	0x0801625b
 8015cd4:	080162eb 	.word	0x080162eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015cd8:	4b57      	ldr	r3, [pc, #348]	; (8015e38 <tcp_process+0x2b8>)
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	f003 0310 	and.w	r3, r3, #16
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	f000 80e4 	beq.w	8015eae <tcp_process+0x32e>
 8015ce6:	4b54      	ldr	r3, [pc, #336]	; (8015e38 <tcp_process+0x2b8>)
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	f003 0302 	and.w	r3, r3, #2
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f000 80dd 	beq.w	8015eae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cf8:	1c5a      	adds	r2, r3, #1
 8015cfa:	4b50      	ldr	r3, [pc, #320]	; (8015e3c <tcp_process+0x2bc>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	f040 80d5 	bne.w	8015eae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015d04:	4b4e      	ldr	r3, [pc, #312]	; (8015e40 <tcp_process+0x2c0>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	1c5a      	adds	r2, r3, #1
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015d16:	4b49      	ldr	r3, [pc, #292]	; (8015e3c <tcp_process+0x2bc>)
 8015d18:	681a      	ldr	r2, [r3, #0]
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015d1e:	4b4c      	ldr	r3, [pc, #304]	; (8015e50 <tcp_process+0x2d0>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	89db      	ldrh	r3, [r3, #14]
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015d38:	4b41      	ldr	r3, [pc, #260]	; (8015e40 <tcp_process+0x2c0>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	1e5a      	subs	r2, r3, #1
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2204      	movs	r2, #4
 8015d46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	3304      	adds	r3, #4
 8015d50:	4618      	mov	r0, r3
 8015d52:	f005 faa7 	bl	801b2a4 <ip4_route>
 8015d56:	4601      	mov	r1, r0
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f7ff f88e 	bl	8014e80 <tcp_eff_send_mss_netif>
 8015d64:	4603      	mov	r3, r0
 8015d66:	461a      	mov	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d70:	009a      	lsls	r2, r3, #2
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d76:	005b      	lsls	r3, r3, #1
 8015d78:	f241 111c 	movw	r1, #4380	; 0x111c
 8015d7c:	428b      	cmp	r3, r1
 8015d7e:	bf38      	it	cc
 8015d80:	460b      	movcc	r3, r1
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d204      	bcs.n	8015d90 <tcp_process+0x210>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	e00d      	b.n	8015dac <tcp_process+0x22c>
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d94:	005b      	lsls	r3, r3, #1
 8015d96:	f241 121c 	movw	r2, #4380	; 0x111c
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	d904      	bls.n	8015da8 <tcp_process+0x228>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	e001      	b.n	8015dac <tcp_process+0x22c>
 8015da8:	f241 131c 	movw	r3, #4380	; 0x111c
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d106      	bne.n	8015dca <tcp_process+0x24a>
 8015dbc:	4b1b      	ldr	r3, [pc, #108]	; (8015e2c <tcp_process+0x2ac>)
 8015dbe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015dc2:	4924      	ldr	r1, [pc, #144]	; (8015e54 <tcp_process+0x2d4>)
 8015dc4:	481b      	ldr	r0, [pc, #108]	; (8015e34 <tcp_process+0x2b4>)
 8015dc6:	f007 f83f 	bl	801ce48 <iprintf>
        --pcb->snd_queuelen;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015dd0:	3b01      	subs	r3, #1
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015de0:	69fb      	ldr	r3, [r7, #28]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d111      	bne.n	8015e0a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d106      	bne.n	8015e00 <tcp_process+0x280>
 8015df2:	4b0e      	ldr	r3, [pc, #56]	; (8015e2c <tcp_process+0x2ac>)
 8015df4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015df8:	4917      	ldr	r1, [pc, #92]	; (8015e58 <tcp_process+0x2d8>)
 8015dfa:	480e      	ldr	r0, [pc, #56]	; (8015e34 <tcp_process+0x2b4>)
 8015dfc:	f007 f824 	bl	801ce48 <iprintf>
          pcb->unsent = rseg->next;
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	681a      	ldr	r2, [r3, #0]
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	66da      	str	r2, [r3, #108]	; 0x6c
 8015e08:	e003      	b.n	8015e12 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8015e0a:	69fb      	ldr	r3, [r7, #28]
 8015e0c:	681a      	ldr	r2, [r3, #0]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015e12:	69f8      	ldr	r0, [r7, #28]
 8015e14:	f7fe fc6f 	bl	80146f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d11d      	bne.n	8015e5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e26:	861a      	strh	r2, [r3, #48]	; 0x30
 8015e28:	e01f      	b.n	8015e6a <tcp_process+0x2ea>
 8015e2a:	bf00      	nop
 8015e2c:	0802019c 	.word	0x0802019c
 8015e30:	080203d4 	.word	0x080203d4
 8015e34:	080201e8 	.word	0x080201e8
 8015e38:	20006c10 	.word	0x20006c10
 8015e3c:	20006c08 	.word	0x20006c08
 8015e40:	20006c04 	.word	0x20006c04
 8015e44:	080203f0 	.word	0x080203f0
 8015e48:	20006c11 	.word	0x20006c11
 8015e4c:	2000df1c 	.word	0x2000df1c
 8015e50:	20006bf4 	.word	0x20006bf4
 8015e54:	08020410 	.word	0x08020410
 8015e58:	08020428 	.word	0x08020428
        } else {
          pcb->rtime = 0;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2200      	movs	r2, #0
 8015e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d00a      	beq.n	8015e8a <tcp_process+0x30a>
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	6910      	ldr	r0, [r2, #16]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	6879      	ldr	r1, [r7, #4]
 8015e82:	4798      	blx	r3
 8015e84:	4603      	mov	r3, r0
 8015e86:	76bb      	strb	r3, [r7, #26]
 8015e88:	e001      	b.n	8015e8e <tcp_process+0x30e>
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015e8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e92:	f113 0f0d 	cmn.w	r3, #13
 8015e96:	d102      	bne.n	8015e9e <tcp_process+0x31e>
          return ERR_ABRT;
 8015e98:	f06f 030c 	mvn.w	r3, #12
 8015e9c:	e250      	b.n	8016340 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	8b5b      	ldrh	r3, [r3, #26]
 8015ea2:	f043 0302 	orr.w	r3, r3, #2
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015eac:	e23a      	b.n	8016324 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015eae:	4b9d      	ldr	r3, [pc, #628]	; (8016124 <tcp_process+0x5a4>)
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	f003 0310 	and.w	r3, r3, #16
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f000 8234 	beq.w	8016324 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ebc:	4b9a      	ldr	r3, [pc, #616]	; (8016128 <tcp_process+0x5a8>)
 8015ebe:	6819      	ldr	r1, [r3, #0]
 8015ec0:	4b9a      	ldr	r3, [pc, #616]	; (801612c <tcp_process+0x5ac>)
 8015ec2:	881b      	ldrh	r3, [r3, #0]
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	4b9a      	ldr	r3, [pc, #616]	; (8016130 <tcp_process+0x5b0>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ecc:	4b99      	ldr	r3, [pc, #612]	; (8016134 <tcp_process+0x5b4>)
 8015ece:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ed0:	885b      	ldrh	r3, [r3, #2]
 8015ed2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ed4:	4a97      	ldr	r2, [pc, #604]	; (8016134 <tcp_process+0x5b4>)
 8015ed6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ed8:	8812      	ldrh	r2, [r2, #0]
 8015eda:	b292      	uxth	r2, r2
 8015edc:	9202      	str	r2, [sp, #8]
 8015ede:	9301      	str	r3, [sp, #4]
 8015ee0:	4b95      	ldr	r3, [pc, #596]	; (8016138 <tcp_process+0x5b8>)
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	4b95      	ldr	r3, [pc, #596]	; (801613c <tcp_process+0x5bc>)
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f003 f8db 	bl	80190a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ef4:	2b05      	cmp	r3, #5
 8015ef6:	f200 8215 	bhi.w	8016324 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f002 fea5 	bl	8018c50 <tcp_rexmit_rto>
      break;
 8015f06:	e20d      	b.n	8016324 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015f08:	4b86      	ldr	r3, [pc, #536]	; (8016124 <tcp_process+0x5a4>)
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	f003 0310 	and.w	r3, r3, #16
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	f000 80a1 	beq.w	8016058 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f16:	4b84      	ldr	r3, [pc, #528]	; (8016128 <tcp_process+0x5a8>)
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	3b01      	subs	r3, #1
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	db7e      	blt.n	8016024 <tcp_process+0x4a4>
 8015f26:	4b80      	ldr	r3, [pc, #512]	; (8016128 <tcp_process+0x5a8>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	dc77      	bgt.n	8016024 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2204      	movs	r2, #4
 8015f38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d102      	bne.n	8015f48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015f42:	23fa      	movs	r3, #250	; 0xfa
 8015f44:	76bb      	strb	r3, [r7, #26]
 8015f46:	e01d      	b.n	8015f84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f4c:	699b      	ldr	r3, [r3, #24]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d106      	bne.n	8015f60 <tcp_process+0x3e0>
 8015f52:	4b7b      	ldr	r3, [pc, #492]	; (8016140 <tcp_process+0x5c0>)
 8015f54:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015f58:	497a      	ldr	r1, [pc, #488]	; (8016144 <tcp_process+0x5c4>)
 8015f5a:	487b      	ldr	r0, [pc, #492]	; (8016148 <tcp_process+0x5c8>)
 8015f5c:	f006 ff74 	bl	801ce48 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f64:	699b      	ldr	r3, [r3, #24]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00a      	beq.n	8015f80 <tcp_process+0x400>
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f6e:	699b      	ldr	r3, [r3, #24]
 8015f70:	687a      	ldr	r2, [r7, #4]
 8015f72:	6910      	ldr	r0, [r2, #16]
 8015f74:	2200      	movs	r2, #0
 8015f76:	6879      	ldr	r1, [r7, #4]
 8015f78:	4798      	blx	r3
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	76bb      	strb	r3, [r7, #26]
 8015f7e:	e001      	b.n	8015f84 <tcp_process+0x404>
 8015f80:	23f0      	movs	r3, #240	; 0xf0
 8015f82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015f84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d00a      	beq.n	8015fa2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015f8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f90:	f113 0f0d 	cmn.w	r3, #13
 8015f94:	d002      	beq.n	8015f9c <tcp_process+0x41c>
              tcp_abort(pcb);
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f7fd fde4 	bl	8013b64 <tcp_abort>
            }
            return ERR_ABRT;
 8015f9c:	f06f 030c 	mvn.w	r3, #12
 8015fa0:	e1ce      	b.n	8016340 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f000 fae0 	bl	8016568 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015fa8:	4b68      	ldr	r3, [pc, #416]	; (801614c <tcp_process+0x5cc>)
 8015faa:	881b      	ldrh	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d005      	beq.n	8015fbc <tcp_process+0x43c>
            recv_acked--;
 8015fb0:	4b66      	ldr	r3, [pc, #408]	; (801614c <tcp_process+0x5cc>)
 8015fb2:	881b      	ldrh	r3, [r3, #0]
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	b29a      	uxth	r2, r3
 8015fb8:	4b64      	ldr	r3, [pc, #400]	; (801614c <tcp_process+0x5cc>)
 8015fba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fc0:	009a      	lsls	r2, r3, #2
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fc6:	005b      	lsls	r3, r3, #1
 8015fc8:	f241 111c 	movw	r1, #4380	; 0x111c
 8015fcc:	428b      	cmp	r3, r1
 8015fce:	bf38      	it	cc
 8015fd0:	460b      	movcc	r3, r1
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d204      	bcs.n	8015fe0 <tcp_process+0x460>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	e00d      	b.n	8015ffc <tcp_process+0x47c>
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fe4:	005b      	lsls	r3, r3, #1
 8015fe6:	f241 121c 	movw	r2, #4380	; 0x111c
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d904      	bls.n	8015ff8 <tcp_process+0x478>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ff2:	005b      	lsls	r3, r3, #1
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	e001      	b.n	8015ffc <tcp_process+0x47c>
 8015ff8:	f241 131c 	movw	r3, #4380	; 0x111c
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016002:	4b53      	ldr	r3, [pc, #332]	; (8016150 <tcp_process+0x5d0>)
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	f003 0320 	and.w	r3, r3, #32
 801600a:	2b00      	cmp	r3, #0
 801600c:	d037      	beq.n	801607e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	8b5b      	ldrh	r3, [r3, #26]
 8016012:	f043 0302 	orr.w	r3, r3, #2
 8016016:	b29a      	uxth	r2, r3
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2207      	movs	r2, #7
 8016020:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016022:	e02c      	b.n	801607e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016024:	4b40      	ldr	r3, [pc, #256]	; (8016128 <tcp_process+0x5a8>)
 8016026:	6819      	ldr	r1, [r3, #0]
 8016028:	4b40      	ldr	r3, [pc, #256]	; (801612c <tcp_process+0x5ac>)
 801602a:	881b      	ldrh	r3, [r3, #0]
 801602c:	461a      	mov	r2, r3
 801602e:	4b40      	ldr	r3, [pc, #256]	; (8016130 <tcp_process+0x5b0>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016034:	4b3f      	ldr	r3, [pc, #252]	; (8016134 <tcp_process+0x5b4>)
 8016036:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016038:	885b      	ldrh	r3, [r3, #2]
 801603a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801603c:	4a3d      	ldr	r2, [pc, #244]	; (8016134 <tcp_process+0x5b4>)
 801603e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016040:	8812      	ldrh	r2, [r2, #0]
 8016042:	b292      	uxth	r2, r2
 8016044:	9202      	str	r2, [sp, #8]
 8016046:	9301      	str	r3, [sp, #4]
 8016048:	4b3b      	ldr	r3, [pc, #236]	; (8016138 <tcp_process+0x5b8>)
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	4b3b      	ldr	r3, [pc, #236]	; (801613c <tcp_process+0x5bc>)
 801604e:	4602      	mov	r2, r0
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f003 f827 	bl	80190a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016056:	e167      	b.n	8016328 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016058:	4b32      	ldr	r3, [pc, #200]	; (8016124 <tcp_process+0x5a4>)
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	f003 0302 	and.w	r3, r3, #2
 8016060:	2b00      	cmp	r3, #0
 8016062:	f000 8161 	beq.w	8016328 <tcp_process+0x7a8>
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801606a:	1e5a      	subs	r2, r3, #1
 801606c:	4b30      	ldr	r3, [pc, #192]	; (8016130 <tcp_process+0x5b0>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	429a      	cmp	r2, r3
 8016072:	f040 8159 	bne.w	8016328 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f002 fe0c 	bl	8018c94 <tcp_rexmit>
      break;
 801607c:	e154      	b.n	8016328 <tcp_process+0x7a8>
 801607e:	e153      	b.n	8016328 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 fa71 	bl	8016568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016086:	4b32      	ldr	r3, [pc, #200]	; (8016150 <tcp_process+0x5d0>)
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	f003 0320 	and.w	r3, r3, #32
 801608e:	2b00      	cmp	r3, #0
 8016090:	f000 814c 	beq.w	801632c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	8b5b      	ldrh	r3, [r3, #26]
 8016098:	f043 0302 	orr.w	r3, r3, #2
 801609c:	b29a      	uxth	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2207      	movs	r2, #7
 80160a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80160a8:	e140      	b.n	801632c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f000 fa5c 	bl	8016568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80160b0:	4b27      	ldr	r3, [pc, #156]	; (8016150 <tcp_process+0x5d0>)
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	f003 0320 	and.w	r3, r3, #32
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d071      	beq.n	80161a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160bc:	4b19      	ldr	r3, [pc, #100]	; (8016124 <tcp_process+0x5a4>)
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	f003 0310 	and.w	r3, r3, #16
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d060      	beq.n	801618a <tcp_process+0x60a>
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160cc:	4b16      	ldr	r3, [pc, #88]	; (8016128 <tcp_process+0x5a8>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d15a      	bne.n	801618a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d156      	bne.n	801618a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	8b5b      	ldrh	r3, [r3, #26]
 80160e0:	f043 0302 	orr.w	r3, r3, #2
 80160e4:	b29a      	uxth	r2, r3
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7fe fdbe 	bl	8014c6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80160f0:	4b18      	ldr	r3, [pc, #96]	; (8016154 <tcp_process+0x5d4>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d105      	bne.n	8016106 <tcp_process+0x586>
 80160fa:	4b16      	ldr	r3, [pc, #88]	; (8016154 <tcp_process+0x5d4>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	68db      	ldr	r3, [r3, #12]
 8016100:	4a14      	ldr	r2, [pc, #80]	; (8016154 <tcp_process+0x5d4>)
 8016102:	6013      	str	r3, [r2, #0]
 8016104:	e02e      	b.n	8016164 <tcp_process+0x5e4>
 8016106:	4b13      	ldr	r3, [pc, #76]	; (8016154 <tcp_process+0x5d4>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	617b      	str	r3, [r7, #20]
 801610c:	e027      	b.n	801615e <tcp_process+0x5de>
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	68db      	ldr	r3, [r3, #12]
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	429a      	cmp	r2, r3
 8016116:	d11f      	bne.n	8016158 <tcp_process+0x5d8>
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	68da      	ldr	r2, [r3, #12]
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	60da      	str	r2, [r3, #12]
 8016120:	e020      	b.n	8016164 <tcp_process+0x5e4>
 8016122:	bf00      	nop
 8016124:	20006c10 	.word	0x20006c10
 8016128:	20006c08 	.word	0x20006c08
 801612c:	20006c0e 	.word	0x20006c0e
 8016130:	20006c04 	.word	0x20006c04
 8016134:	20006bf4 	.word	0x20006bf4
 8016138:	2000a814 	.word	0x2000a814
 801613c:	2000a818 	.word	0x2000a818
 8016140:	0802019c 	.word	0x0802019c
 8016144:	0802043c 	.word	0x0802043c
 8016148:	080201e8 	.word	0x080201e8
 801614c:	20006c0c 	.word	0x20006c0c
 8016150:	20006c11 	.word	0x20006c11
 8016154:	2000df18 	.word	0x2000df18
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	617b      	str	r3, [r7, #20]
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d1d4      	bne.n	801610e <tcp_process+0x58e>
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2200      	movs	r2, #0
 8016168:	60da      	str	r2, [r3, #12]
 801616a:	4b77      	ldr	r3, [pc, #476]	; (8016348 <tcp_process+0x7c8>)
 801616c:	2201      	movs	r2, #1
 801616e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	220a      	movs	r2, #10
 8016174:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016176:	4b75      	ldr	r3, [pc, #468]	; (801634c <tcp_process+0x7cc>)
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	60da      	str	r2, [r3, #12]
 801617e:	4a73      	ldr	r2, [pc, #460]	; (801634c <tcp_process+0x7cc>)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	6013      	str	r3, [r2, #0]
 8016184:	f003 f950 	bl	8019428 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016188:	e0d2      	b.n	8016330 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	8b5b      	ldrh	r3, [r3, #26]
 801618e:	f043 0302 	orr.w	r3, r3, #2
 8016192:	b29a      	uxth	r2, r3
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2208      	movs	r2, #8
 801619c:	751a      	strb	r2, [r3, #20]
      break;
 801619e:	e0c7      	b.n	8016330 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161a0:	4b6b      	ldr	r3, [pc, #428]	; (8016350 <tcp_process+0x7d0>)
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	f003 0310 	and.w	r3, r3, #16
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	f000 80c1 	beq.w	8016330 <tcp_process+0x7b0>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161b2:	4b68      	ldr	r3, [pc, #416]	; (8016354 <tcp_process+0x7d4>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	f040 80ba 	bne.w	8016330 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f040 80b5 	bne.w	8016330 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2206      	movs	r2, #6
 80161ca:	751a      	strb	r2, [r3, #20]
      break;
 80161cc:	e0b0      	b.n	8016330 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 f9ca 	bl	8016568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80161d4:	4b60      	ldr	r3, [pc, #384]	; (8016358 <tcp_process+0x7d8>)
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	f003 0320 	and.w	r3, r3, #32
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f000 80a9 	beq.w	8016334 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	8b5b      	ldrh	r3, [r3, #26]
 80161e6:	f043 0302 	orr.w	r3, r3, #2
 80161ea:	b29a      	uxth	r2, r3
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7fe fd3b 	bl	8014c6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80161f6:	4b59      	ldr	r3, [pc, #356]	; (801635c <tcp_process+0x7dc>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	687a      	ldr	r2, [r7, #4]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d105      	bne.n	801620c <tcp_process+0x68c>
 8016200:	4b56      	ldr	r3, [pc, #344]	; (801635c <tcp_process+0x7dc>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	68db      	ldr	r3, [r3, #12]
 8016206:	4a55      	ldr	r2, [pc, #340]	; (801635c <tcp_process+0x7dc>)
 8016208:	6013      	str	r3, [r2, #0]
 801620a:	e013      	b.n	8016234 <tcp_process+0x6b4>
 801620c:	4b53      	ldr	r3, [pc, #332]	; (801635c <tcp_process+0x7dc>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	613b      	str	r3, [r7, #16]
 8016212:	e00c      	b.n	801622e <tcp_process+0x6ae>
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	68db      	ldr	r3, [r3, #12]
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	429a      	cmp	r2, r3
 801621c:	d104      	bne.n	8016228 <tcp_process+0x6a8>
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	68da      	ldr	r2, [r3, #12]
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	60da      	str	r2, [r3, #12]
 8016226:	e005      	b.n	8016234 <tcp_process+0x6b4>
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	68db      	ldr	r3, [r3, #12]
 801622c:	613b      	str	r3, [r7, #16]
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1ef      	bne.n	8016214 <tcp_process+0x694>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2200      	movs	r2, #0
 8016238:	60da      	str	r2, [r3, #12]
 801623a:	4b43      	ldr	r3, [pc, #268]	; (8016348 <tcp_process+0x7c8>)
 801623c:	2201      	movs	r2, #1
 801623e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	220a      	movs	r2, #10
 8016244:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016246:	4b41      	ldr	r3, [pc, #260]	; (801634c <tcp_process+0x7cc>)
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	60da      	str	r2, [r3, #12]
 801624e:	4a3f      	ldr	r2, [pc, #252]	; (801634c <tcp_process+0x7cc>)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6013      	str	r3, [r2, #0]
 8016254:	f003 f8e8 	bl	8019428 <tcp_timer_needed>
      }
      break;
 8016258:	e06c      	b.n	8016334 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f984 	bl	8016568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016260:	4b3b      	ldr	r3, [pc, #236]	; (8016350 <tcp_process+0x7d0>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	f003 0310 	and.w	r3, r3, #16
 8016268:	2b00      	cmp	r3, #0
 801626a:	d065      	beq.n	8016338 <tcp_process+0x7b8>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016270:	4b38      	ldr	r3, [pc, #224]	; (8016354 <tcp_process+0x7d4>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	429a      	cmp	r2, r3
 8016276:	d15f      	bne.n	8016338 <tcp_process+0x7b8>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801627c:	2b00      	cmp	r3, #0
 801627e:	d15b      	bne.n	8016338 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7fe fcf3 	bl	8014c6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016286:	4b35      	ldr	r3, [pc, #212]	; (801635c <tcp_process+0x7dc>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	687a      	ldr	r2, [r7, #4]
 801628c:	429a      	cmp	r2, r3
 801628e:	d105      	bne.n	801629c <tcp_process+0x71c>
 8016290:	4b32      	ldr	r3, [pc, #200]	; (801635c <tcp_process+0x7dc>)
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	4a31      	ldr	r2, [pc, #196]	; (801635c <tcp_process+0x7dc>)
 8016298:	6013      	str	r3, [r2, #0]
 801629a:	e013      	b.n	80162c4 <tcp_process+0x744>
 801629c:	4b2f      	ldr	r3, [pc, #188]	; (801635c <tcp_process+0x7dc>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	60fb      	str	r3, [r7, #12]
 80162a2:	e00c      	b.n	80162be <tcp_process+0x73e>
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	68db      	ldr	r3, [r3, #12]
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d104      	bne.n	80162b8 <tcp_process+0x738>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	68da      	ldr	r2, [r3, #12]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	60da      	str	r2, [r3, #12]
 80162b6:	e005      	b.n	80162c4 <tcp_process+0x744>
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	60fb      	str	r3, [r7, #12]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d1ef      	bne.n	80162a4 <tcp_process+0x724>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	60da      	str	r2, [r3, #12]
 80162ca:	4b1f      	ldr	r3, [pc, #124]	; (8016348 <tcp_process+0x7c8>)
 80162cc:	2201      	movs	r2, #1
 80162ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	220a      	movs	r2, #10
 80162d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80162d6:	4b1d      	ldr	r3, [pc, #116]	; (801634c <tcp_process+0x7cc>)
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	60da      	str	r2, [r3, #12]
 80162de:	4a1b      	ldr	r2, [pc, #108]	; (801634c <tcp_process+0x7cc>)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6013      	str	r3, [r2, #0]
 80162e4:	f003 f8a0 	bl	8019428 <tcp_timer_needed>
      }
      break;
 80162e8:	e026      	b.n	8016338 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 f93c 	bl	8016568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80162f0:	4b17      	ldr	r3, [pc, #92]	; (8016350 <tcp_process+0x7d0>)
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	f003 0310 	and.w	r3, r3, #16
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d01f      	beq.n	801633c <tcp_process+0x7bc>
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016300:	4b14      	ldr	r3, [pc, #80]	; (8016354 <tcp_process+0x7d4>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	429a      	cmp	r2, r3
 8016306:	d119      	bne.n	801633c <tcp_process+0x7bc>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801630c:	2b00      	cmp	r3, #0
 801630e:	d115      	bne.n	801633c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016310:	4b11      	ldr	r3, [pc, #68]	; (8016358 <tcp_process+0x7d8>)
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	f043 0310 	orr.w	r3, r3, #16
 8016318:	b2da      	uxtb	r2, r3
 801631a:	4b0f      	ldr	r3, [pc, #60]	; (8016358 <tcp_process+0x7d8>)
 801631c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801631e:	e00d      	b.n	801633c <tcp_process+0x7bc>
    default:
      break;
 8016320:	bf00      	nop
 8016322:	e00c      	b.n	801633e <tcp_process+0x7be>
      break;
 8016324:	bf00      	nop
 8016326:	e00a      	b.n	801633e <tcp_process+0x7be>
      break;
 8016328:	bf00      	nop
 801632a:	e008      	b.n	801633e <tcp_process+0x7be>
      break;
 801632c:	bf00      	nop
 801632e:	e006      	b.n	801633e <tcp_process+0x7be>
      break;
 8016330:	bf00      	nop
 8016332:	e004      	b.n	801633e <tcp_process+0x7be>
      break;
 8016334:	bf00      	nop
 8016336:	e002      	b.n	801633e <tcp_process+0x7be>
      break;
 8016338:	bf00      	nop
 801633a:	e000      	b.n	801633e <tcp_process+0x7be>
      break;
 801633c:	bf00      	nop
  }
  return ERR_OK;
 801633e:	2300      	movs	r3, #0
}
 8016340:	4618      	mov	r0, r3
 8016342:	3724      	adds	r7, #36	; 0x24
 8016344:	46bd      	mov	sp, r7
 8016346:	bd90      	pop	{r4, r7, pc}
 8016348:	2000df14 	.word	0x2000df14
 801634c:	2000df28 	.word	0x2000df28
 8016350:	20006c10 	.word	0x20006c10
 8016354:	20006c08 	.word	0x20006c08
 8016358:	20006c11 	.word	0x20006c11
 801635c:	2000df18 	.word	0x2000df18

08016360 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016360:	b590      	push	{r4, r7, lr}
 8016362:	b085      	sub	sp, #20
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d106      	bne.n	801637e <tcp_oos_insert_segment+0x1e>
 8016370:	4b3b      	ldr	r3, [pc, #236]	; (8016460 <tcp_oos_insert_segment+0x100>)
 8016372:	f240 421f 	movw	r2, #1055	; 0x41f
 8016376:	493b      	ldr	r1, [pc, #236]	; (8016464 <tcp_oos_insert_segment+0x104>)
 8016378:	483b      	ldr	r0, [pc, #236]	; (8016468 <tcp_oos_insert_segment+0x108>)
 801637a:	f006 fd65 	bl	801ce48 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	68db      	ldr	r3, [r3, #12]
 8016382:	899b      	ldrh	r3, [r3, #12]
 8016384:	b29b      	uxth	r3, r3
 8016386:	4618      	mov	r0, r3
 8016388:	f7fb faa4 	bl	80118d4 <lwip_htons>
 801638c:	4603      	mov	r3, r0
 801638e:	b2db      	uxtb	r3, r3
 8016390:	f003 0301 	and.w	r3, r3, #1
 8016394:	2b00      	cmp	r3, #0
 8016396:	d028      	beq.n	80163ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016398:	6838      	ldr	r0, [r7, #0]
 801639a:	f7fe f997 	bl	80146cc <tcp_segs_free>
    next = NULL;
 801639e:	2300      	movs	r3, #0
 80163a0:	603b      	str	r3, [r7, #0]
 80163a2:	e056      	b.n	8016452 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	68db      	ldr	r3, [r3, #12]
 80163a8:	899b      	ldrh	r3, [r3, #12]
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7fb fa91 	bl	80118d4 <lwip_htons>
 80163b2:	4603      	mov	r3, r0
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	f003 0301 	and.w	r3, r3, #1
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00d      	beq.n	80163da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	899b      	ldrh	r3, [r3, #12]
 80163c4:	b29c      	uxth	r4, r3
 80163c6:	2001      	movs	r0, #1
 80163c8:	f7fb fa84 	bl	80118d4 <lwip_htons>
 80163cc:	4603      	mov	r3, r0
 80163ce:	461a      	mov	r2, r3
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	4322      	orrs	r2, r4
 80163d6:	b292      	uxth	r2, r2
 80163d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f7fe f986 	bl	80146f6 <tcp_seg_free>
    while (next &&
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d00e      	beq.n	801640e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	891b      	ldrh	r3, [r3, #8]
 80163f4:	461a      	mov	r2, r3
 80163f6:	4b1d      	ldr	r3, [pc, #116]	; (801646c <tcp_oos_insert_segment+0x10c>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	441a      	add	r2, r3
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	6839      	ldr	r1, [r7, #0]
 8016404:	8909      	ldrh	r1, [r1, #8]
 8016406:	440b      	add	r3, r1
 8016408:	1ad3      	subs	r3, r2, r3
    while (next &&
 801640a:	2b00      	cmp	r3, #0
 801640c:	daca      	bge.n	80163a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d01e      	beq.n	8016452 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	891b      	ldrh	r3, [r3, #8]
 8016418:	461a      	mov	r2, r3
 801641a:	4b14      	ldr	r3, [pc, #80]	; (801646c <tcp_oos_insert_segment+0x10c>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	441a      	add	r2, r3
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	68db      	ldr	r3, [r3, #12]
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016428:	2b00      	cmp	r3, #0
 801642a:	dd12      	ble.n	8016452 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	b29a      	uxth	r2, r3
 8016434:	4b0d      	ldr	r3, [pc, #52]	; (801646c <tcp_oos_insert_segment+0x10c>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	b29b      	uxth	r3, r3
 801643a:	1ad3      	subs	r3, r2, r3
 801643c:	b29a      	uxth	r2, r3
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	685a      	ldr	r2, [r3, #4]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	891b      	ldrh	r3, [r3, #8]
 801644a:	4619      	mov	r1, r3
 801644c:	4610      	mov	r0, r2
 801644e:	f7fc fc03 	bl	8012c58 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	683a      	ldr	r2, [r7, #0]
 8016456:	601a      	str	r2, [r3, #0]
}
 8016458:	bf00      	nop
 801645a:	3714      	adds	r7, #20
 801645c:	46bd      	mov	sp, r7
 801645e:	bd90      	pop	{r4, r7, pc}
 8016460:	0802019c 	.word	0x0802019c
 8016464:	0802045c 	.word	0x0802045c
 8016468:	080201e8 	.word	0x080201e8
 801646c:	20006c04 	.word	0x20006c04

08016470 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016470:	b5b0      	push	{r4, r5, r7, lr}
 8016472:	b086      	sub	sp, #24
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801647e:	e03e      	b.n	80164fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	4618      	mov	r0, r3
 8016490:	f7fc fdf6 	bl	8013080 <pbuf_clen>
 8016494:	4603      	mov	r3, r0
 8016496:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801649e:	8a7a      	ldrh	r2, [r7, #18]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d906      	bls.n	80164b2 <tcp_free_acked_segments+0x42>
 80164a4:	4b2a      	ldr	r3, [pc, #168]	; (8016550 <tcp_free_acked_segments+0xe0>)
 80164a6:	f240 4257 	movw	r2, #1111	; 0x457
 80164aa:	492a      	ldr	r1, [pc, #168]	; (8016554 <tcp_free_acked_segments+0xe4>)
 80164ac:	482a      	ldr	r0, [pc, #168]	; (8016558 <tcp_free_acked_segments+0xe8>)
 80164ae:	f006 fccb 	bl	801ce48 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80164b8:	8a7b      	ldrh	r3, [r7, #18]
 80164ba:	1ad3      	subs	r3, r2, r3
 80164bc:	b29a      	uxth	r2, r3
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	891a      	ldrh	r2, [r3, #8]
 80164c8:	4b24      	ldr	r3, [pc, #144]	; (801655c <tcp_free_acked_segments+0xec>)
 80164ca:	881b      	ldrh	r3, [r3, #0]
 80164cc:	4413      	add	r3, r2
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	4b22      	ldr	r3, [pc, #136]	; (801655c <tcp_free_acked_segments+0xec>)
 80164d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80164d4:	6978      	ldr	r0, [r7, #20]
 80164d6:	f7fe f90e 	bl	80146f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d00c      	beq.n	80164fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d109      	bne.n	80164fe <tcp_free_acked_segments+0x8e>
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d106      	bne.n	80164fe <tcp_free_acked_segments+0x8e>
 80164f0:	4b17      	ldr	r3, [pc, #92]	; (8016550 <tcp_free_acked_segments+0xe0>)
 80164f2:	f240 4261 	movw	r2, #1121	; 0x461
 80164f6:	491a      	ldr	r1, [pc, #104]	; (8016560 <tcp_free_acked_segments+0xf0>)
 80164f8:	4817      	ldr	r0, [pc, #92]	; (8016558 <tcp_free_acked_segments+0xe8>)
 80164fa:	f006 fca5 	bl	801ce48 <iprintf>
  while (seg_list != NULL &&
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d020      	beq.n	8016546 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	4618      	mov	r0, r3
 801650c:	f7fb f9f7 	bl	80118fe <lwip_htonl>
 8016510:	4604      	mov	r4, r0
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	891b      	ldrh	r3, [r3, #8]
 8016516:	461d      	mov	r5, r3
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	899b      	ldrh	r3, [r3, #12]
 801651e:	b29b      	uxth	r3, r3
 8016520:	4618      	mov	r0, r3
 8016522:	f7fb f9d7 	bl	80118d4 <lwip_htons>
 8016526:	4603      	mov	r3, r0
 8016528:	b2db      	uxtb	r3, r3
 801652a:	f003 0303 	and.w	r3, r3, #3
 801652e:	2b00      	cmp	r3, #0
 8016530:	d001      	beq.n	8016536 <tcp_free_acked_segments+0xc6>
 8016532:	2301      	movs	r3, #1
 8016534:	e000      	b.n	8016538 <tcp_free_acked_segments+0xc8>
 8016536:	2300      	movs	r3, #0
 8016538:	442b      	add	r3, r5
 801653a:	18e2      	adds	r2, r4, r3
 801653c:	4b09      	ldr	r3, [pc, #36]	; (8016564 <tcp_free_acked_segments+0xf4>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016542:	2b00      	cmp	r3, #0
 8016544:	dd9c      	ble.n	8016480 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016546:	68bb      	ldr	r3, [r7, #8]
}
 8016548:	4618      	mov	r0, r3
 801654a:	3718      	adds	r7, #24
 801654c:	46bd      	mov	sp, r7
 801654e:	bdb0      	pop	{r4, r5, r7, pc}
 8016550:	0802019c 	.word	0x0802019c
 8016554:	08020484 	.word	0x08020484
 8016558:	080201e8 	.word	0x080201e8
 801655c:	20006c0c 	.word	0x20006c0c
 8016560:	080204ac 	.word	0x080204ac
 8016564:	20006c08 	.word	0x20006c08

08016568 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016568:	b5b0      	push	{r4, r5, r7, lr}
 801656a:	b094      	sub	sp, #80	; 0x50
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016570:	2300      	movs	r3, #0
 8016572:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d106      	bne.n	8016588 <tcp_receive+0x20>
 801657a:	4ba6      	ldr	r3, [pc, #664]	; (8016814 <tcp_receive+0x2ac>)
 801657c:	f240 427b 	movw	r2, #1147	; 0x47b
 8016580:	49a5      	ldr	r1, [pc, #660]	; (8016818 <tcp_receive+0x2b0>)
 8016582:	48a6      	ldr	r0, [pc, #664]	; (801681c <tcp_receive+0x2b4>)
 8016584:	f006 fc60 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	7d1b      	ldrb	r3, [r3, #20]
 801658c:	2b03      	cmp	r3, #3
 801658e:	d806      	bhi.n	801659e <tcp_receive+0x36>
 8016590:	4ba0      	ldr	r3, [pc, #640]	; (8016814 <tcp_receive+0x2ac>)
 8016592:	f240 427c 	movw	r2, #1148	; 0x47c
 8016596:	49a2      	ldr	r1, [pc, #648]	; (8016820 <tcp_receive+0x2b8>)
 8016598:	48a0      	ldr	r0, [pc, #640]	; (801681c <tcp_receive+0x2b4>)
 801659a:	f006 fc55 	bl	801ce48 <iprintf>

  if (flags & TCP_ACK) {
 801659e:	4ba1      	ldr	r3, [pc, #644]	; (8016824 <tcp_receive+0x2bc>)
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	f003 0310 	and.w	r3, r3, #16
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 8263 	beq.w	8016a72 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80165b2:	461a      	mov	r2, r3
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165b8:	4413      	add	r3, r2
 80165ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165c0:	4b99      	ldr	r3, [pc, #612]	; (8016828 <tcp_receive+0x2c0>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	1ad3      	subs	r3, r2, r3
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	db1b      	blt.n	8016602 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165ce:	4b96      	ldr	r3, [pc, #600]	; (8016828 <tcp_receive+0x2c0>)
 80165d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d106      	bne.n	80165e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165da:	4b94      	ldr	r3, [pc, #592]	; (801682c <tcp_receive+0x2c4>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	db0e      	blt.n	8016602 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165e8:	4b90      	ldr	r3, [pc, #576]	; (801682c <tcp_receive+0x2c4>)
 80165ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d125      	bne.n	801663c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80165f0:	4b8f      	ldr	r3, [pc, #572]	; (8016830 <tcp_receive+0x2c8>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	89db      	ldrh	r3, [r3, #14]
 80165f6:	b29a      	uxth	r2, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80165fe:	429a      	cmp	r2, r3
 8016600:	d91c      	bls.n	801663c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016602:	4b8b      	ldr	r3, [pc, #556]	; (8016830 <tcp_receive+0x2c8>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	89db      	ldrh	r3, [r3, #14]
 8016608:	b29a      	uxth	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801661c:	429a      	cmp	r2, r3
 801661e:	d205      	bcs.n	801662c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801662c:	4b7e      	ldr	r3, [pc, #504]	; (8016828 <tcp_receive+0x2c0>)
 801662e:	681a      	ldr	r2, [r3, #0]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016634:	4b7d      	ldr	r3, [pc, #500]	; (801682c <tcp_receive+0x2c4>)
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801663c:	4b7b      	ldr	r3, [pc, #492]	; (801682c <tcp_receive+0x2c4>)
 801663e:	681a      	ldr	r2, [r3, #0]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016644:	1ad3      	subs	r3, r2, r3
 8016646:	2b00      	cmp	r3, #0
 8016648:	dc58      	bgt.n	80166fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801664a:	4b7a      	ldr	r3, [pc, #488]	; (8016834 <tcp_receive+0x2cc>)
 801664c:	881b      	ldrh	r3, [r3, #0]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d14b      	bne.n	80166ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801665c:	4413      	add	r3, r2
 801665e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016660:	429a      	cmp	r2, r3
 8016662:	d142      	bne.n	80166ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801666a:	2b00      	cmp	r3, #0
 801666c:	db3d      	blt.n	80166ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016672:	4b6e      	ldr	r3, [pc, #440]	; (801682c <tcp_receive+0x2c4>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	429a      	cmp	r2, r3
 8016678:	d137      	bne.n	80166ea <tcp_receive+0x182>
              found_dupack = 1;
 801667a:	2301      	movs	r3, #1
 801667c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016684:	2bff      	cmp	r3, #255	; 0xff
 8016686:	d007      	beq.n	8016698 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801668e:	3301      	adds	r3, #1
 8016690:	b2da      	uxtb	r2, r3
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801669e:	2b03      	cmp	r3, #3
 80166a0:	d91b      	bls.n	80166da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166ac:	4413      	add	r3, r2
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d30a      	bcc.n	80166d0 <tcp_receive+0x168>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166c4:	4413      	add	r3, r2
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80166ce:	e004      	b.n	80166da <tcp_receive+0x172>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80166e0:	2b02      	cmp	r3, #2
 80166e2:	d902      	bls.n	80166ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f002 fb41 	bl	8018d6c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80166ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f040 8160 	bne.w	80169b2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80166fa:	e15a      	b.n	80169b2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80166fc:	4b4b      	ldr	r3, [pc, #300]	; (801682c <tcp_receive+0x2c4>)
 80166fe:	681a      	ldr	r2, [r3, #0]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016704:	1ad3      	subs	r3, r2, r3
 8016706:	3b01      	subs	r3, #1
 8016708:	2b00      	cmp	r3, #0
 801670a:	f2c0 814d 	blt.w	80169a8 <tcp_receive+0x440>
 801670e:	4b47      	ldr	r3, [pc, #284]	; (801682c <tcp_receive+0x2c4>)
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016716:	1ad3      	subs	r3, r2, r3
 8016718:	2b00      	cmp	r3, #0
 801671a:	f300 8145 	bgt.w	80169a8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	8b5b      	ldrh	r3, [r3, #26]
 8016722:	f003 0304 	and.w	r3, r3, #4
 8016726:	2b00      	cmp	r3, #0
 8016728:	d010      	beq.n	801674c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	8b5b      	ldrh	r3, [r3, #26]
 801672e:	f023 0304 	bic.w	r3, r3, #4
 8016732:	b29a      	uxth	r2, r3
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2200      	movs	r2, #0
 8016748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801675a:	10db      	asrs	r3, r3, #3
 801675c:	b21b      	sxth	r3, r3
 801675e:	b29a      	uxth	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016766:	b29b      	uxth	r3, r3
 8016768:	4413      	add	r3, r2
 801676a:	b29b      	uxth	r3, r3
 801676c:	b21a      	sxth	r2, r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016774:	4b2d      	ldr	r3, [pc, #180]	; (801682c <tcp_receive+0x2c4>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	b29a      	uxth	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801677e:	b29b      	uxth	r3, r3
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801678c:	4b27      	ldr	r3, [pc, #156]	; (801682c <tcp_receive+0x2c4>)
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	7d1b      	ldrb	r3, [r3, #20]
 8016798:	2b03      	cmp	r3, #3
 801679a:	f240 8096 	bls.w	80168ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d244      	bcs.n	8016838 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	8b5b      	ldrh	r3, [r3, #26]
 80167b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d001      	beq.n	80167be <tcp_receive+0x256>
 80167ba:	2301      	movs	r3, #1
 80167bc:	e000      	b.n	80167c0 <tcp_receive+0x258>
 80167be:	2302      	movs	r3, #2
 80167c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80167c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167ce:	fb12 f303 	smulbb	r3, r2, r3
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80167d6:	4293      	cmp	r3, r2
 80167d8:	bf28      	it	cs
 80167da:	4613      	movcs	r3, r2
 80167dc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167e6:	4413      	add	r3, r2
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d309      	bcc.n	8016808 <tcp_receive+0x2a0>
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167fc:	4413      	add	r3, r2
 80167fe:	b29a      	uxth	r2, r3
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016806:	e060      	b.n	80168ca <tcp_receive+0x362>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801680e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016812:	e05a      	b.n	80168ca <tcp_receive+0x362>
 8016814:	0802019c 	.word	0x0802019c
 8016818:	080204cc 	.word	0x080204cc
 801681c:	080201e8 	.word	0x080201e8
 8016820:	080204e8 	.word	0x080204e8
 8016824:	20006c10 	.word	0x20006c10
 8016828:	20006c04 	.word	0x20006c04
 801682c:	20006c08 	.word	0x20006c08
 8016830:	20006bf4 	.word	0x20006bf4
 8016834:	20006c0e 	.word	0x20006c0e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801683e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016840:	4413      	add	r3, r2
 8016842:	b29a      	uxth	r2, r3
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801684a:	429a      	cmp	r2, r3
 801684c:	d309      	bcc.n	8016862 <tcp_receive+0x2fa>
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016854:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016856:	4413      	add	r3, r2
 8016858:	b29a      	uxth	r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016860:	e004      	b.n	801686c <tcp_receive+0x304>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016878:	429a      	cmp	r2, r3
 801687a:	d326      	bcc.n	80168ca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016888:	1ad3      	subs	r3, r2, r3
 801688a:	b29a      	uxth	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801689c:	4413      	add	r3, r2
 801689e:	b29a      	uxth	r2, r3
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d30a      	bcc.n	80168c0 <tcp_receive+0x358>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168b4:	4413      	add	r3, r2
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80168be:	e004      	b.n	80168ca <tcp_receive+0x362>
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168d2:	4a98      	ldr	r2, [pc, #608]	; (8016b34 <tcp_receive+0x5cc>)
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f7ff fdcb 	bl	8016470 <tcp_free_acked_segments>
 80168da:	4602      	mov	r2, r0
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168e8:	4a93      	ldr	r2, [pc, #588]	; (8016b38 <tcp_receive+0x5d0>)
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7ff fdc0 	bl	8016470 <tcp_free_acked_segments>
 80168f0:	4602      	mov	r2, r0
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d104      	bne.n	8016908 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016904:	861a      	strh	r2, [r3, #48]	; 0x30
 8016906:	e002      	b.n	801690e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2200      	movs	r2, #0
 801690c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2200      	movs	r2, #0
 8016912:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016918:	2b00      	cmp	r3, #0
 801691a:	d103      	bne.n	8016924 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2200      	movs	r2, #0
 8016920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801692a:	4b84      	ldr	r3, [pc, #528]	; (8016b3c <tcp_receive+0x5d4>)
 801692c:	881b      	ldrh	r3, [r3, #0]
 801692e:	4413      	add	r3, r2
 8016930:	b29a      	uxth	r2, r3
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	8b5b      	ldrh	r3, [r3, #26]
 801693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016940:	2b00      	cmp	r3, #0
 8016942:	d035      	beq.n	80169b0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016948:	2b00      	cmp	r3, #0
 801694a:	d118      	bne.n	801697e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016950:	2b00      	cmp	r3, #0
 8016952:	d00c      	beq.n	801696e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801695c:	68db      	ldr	r3, [r3, #12]
 801695e:	685b      	ldr	r3, [r3, #4]
 8016960:	4618      	mov	r0, r3
 8016962:	f7fa ffcc 	bl	80118fe <lwip_htonl>
 8016966:	4603      	mov	r3, r0
 8016968:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801696a:	2b00      	cmp	r3, #0
 801696c:	dc20      	bgt.n	80169b0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	8b5b      	ldrh	r3, [r3, #26]
 8016972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016976:	b29a      	uxth	r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801697c:	e018      	b.n	80169b0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016986:	68db      	ldr	r3, [r3, #12]
 8016988:	685b      	ldr	r3, [r3, #4]
 801698a:	4618      	mov	r0, r3
 801698c:	f7fa ffb7 	bl	80118fe <lwip_htonl>
 8016990:	4603      	mov	r3, r0
 8016992:	1ae3      	subs	r3, r4, r3
 8016994:	2b00      	cmp	r3, #0
 8016996:	dc0b      	bgt.n	80169b0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	8b5b      	ldrh	r3, [r3, #26]
 801699c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80169a0:	b29a      	uxth	r2, r3
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169a6:	e003      	b.n	80169b0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f002 fbcd 	bl	8019148 <tcp_send_empty_ack>
 80169ae:	e000      	b.n	80169b2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169b0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d05b      	beq.n	8016a72 <tcp_receive+0x50a>
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169be:	4b60      	ldr	r3, [pc, #384]	; (8016b40 <tcp_receive+0x5d8>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	1ad3      	subs	r3, r2, r3
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	da54      	bge.n	8016a72 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80169c8:	4b5e      	ldr	r3, [pc, #376]	; (8016b44 <tcp_receive+0x5dc>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	b29a      	uxth	r2, r3
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	1ad3      	subs	r3, r2, r3
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80169dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80169e6:	10db      	asrs	r3, r3, #3
 80169e8:	b21b      	sxth	r3, r3
 80169ea:	b29b      	uxth	r3, r3
 80169ec:	1ad3      	subs	r3, r2, r3
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80169fa:	b29a      	uxth	r2, r3
 80169fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a00:	4413      	add	r3, r2
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	b21a      	sxth	r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016a0a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	da05      	bge.n	8016a1e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8016a12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a16:	425b      	negs	r3, r3
 8016a18:	b29b      	uxth	r3, r3
 8016a1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016a1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a28:	109b      	asrs	r3, r3, #2
 8016a2a:	b21b      	sxth	r3, r3
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	1ad3      	subs	r3, r2, r3
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a3c:	b29a      	uxth	r2, r3
 8016a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a42:	4413      	add	r3, r2
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	b21a      	sxth	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a52:	10db      	asrs	r3, r3, #3
 8016a54:	b21b      	sxth	r3, r3
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	4413      	add	r3, r2
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	b21a      	sxth	r2, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016a72:	4b35      	ldr	r3, [pc, #212]	; (8016b48 <tcp_receive+0x5e0>)
 8016a74:	881b      	ldrh	r3, [r3, #0]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	f000 84e1 	beq.w	801743e <tcp_receive+0xed6>
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	7d1b      	ldrb	r3, [r3, #20]
 8016a80:	2b06      	cmp	r3, #6
 8016a82:	f200 84dc 	bhi.w	801743e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a8a:	4b30      	ldr	r3, [pc, #192]	; (8016b4c <tcp_receive+0x5e4>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	1ad3      	subs	r3, r2, r3
 8016a90:	3b01      	subs	r3, #1
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f2c0 808e 	blt.w	8016bb4 <tcp_receive+0x64c>
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a9c:	4b2a      	ldr	r3, [pc, #168]	; (8016b48 <tcp_receive+0x5e0>)
 8016a9e:	881b      	ldrh	r3, [r3, #0]
 8016aa0:	4619      	mov	r1, r3
 8016aa2:	4b2a      	ldr	r3, [pc, #168]	; (8016b4c <tcp_receive+0x5e4>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	440b      	add	r3, r1
 8016aa8:	1ad3      	subs	r3, r2, r3
 8016aaa:	3301      	adds	r3, #1
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	f300 8081 	bgt.w	8016bb4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016ab2:	4b27      	ldr	r3, [pc, #156]	; (8016b50 <tcp_receive+0x5e8>)
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016abc:	4b23      	ldr	r3, [pc, #140]	; (8016b4c <tcp_receive+0x5e4>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016ac4:	4b22      	ldr	r3, [pc, #136]	; (8016b50 <tcp_receive+0x5e8>)
 8016ac6:	685b      	ldr	r3, [r3, #4]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d106      	bne.n	8016ada <tcp_receive+0x572>
 8016acc:	4b21      	ldr	r3, [pc, #132]	; (8016b54 <tcp_receive+0x5ec>)
 8016ace:	f240 5294 	movw	r2, #1428	; 0x594
 8016ad2:	4921      	ldr	r1, [pc, #132]	; (8016b58 <tcp_receive+0x5f0>)
 8016ad4:	4821      	ldr	r0, [pc, #132]	; (8016b5c <tcp_receive+0x5f4>)
 8016ad6:	f006 f9b7 	bl	801ce48 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	d906      	bls.n	8016af2 <tcp_receive+0x58a>
 8016ae4:	4b1b      	ldr	r3, [pc, #108]	; (8016b54 <tcp_receive+0x5ec>)
 8016ae6:	f240 5295 	movw	r2, #1429	; 0x595
 8016aea:	491d      	ldr	r1, [pc, #116]	; (8016b60 <tcp_receive+0x5f8>)
 8016aec:	481b      	ldr	r0, [pc, #108]	; (8016b5c <tcp_receive+0x5f4>)
 8016aee:	f006 f9ab 	bl	801ce48 <iprintf>
      off = (u16_t)off32;
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016af8:	4b15      	ldr	r3, [pc, #84]	; (8016b50 <tcp_receive+0x5e8>)
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	891b      	ldrh	r3, [r3, #8]
 8016afe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d906      	bls.n	8016b14 <tcp_receive+0x5ac>
 8016b06:	4b13      	ldr	r3, [pc, #76]	; (8016b54 <tcp_receive+0x5ec>)
 8016b08:	f240 5297 	movw	r2, #1431	; 0x597
 8016b0c:	4915      	ldr	r1, [pc, #84]	; (8016b64 <tcp_receive+0x5fc>)
 8016b0e:	4813      	ldr	r0, [pc, #76]	; (8016b5c <tcp_receive+0x5f4>)
 8016b10:	f006 f99a 	bl	801ce48 <iprintf>
      inseg.len -= off;
 8016b14:	4b0e      	ldr	r3, [pc, #56]	; (8016b50 <tcp_receive+0x5e8>)
 8016b16:	891a      	ldrh	r2, [r3, #8]
 8016b18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b1c:	1ad3      	subs	r3, r2, r3
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	4b0b      	ldr	r3, [pc, #44]	; (8016b50 <tcp_receive+0x5e8>)
 8016b22:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016b24:	4b0a      	ldr	r3, [pc, #40]	; (8016b50 <tcp_receive+0x5e8>)
 8016b26:	685b      	ldr	r3, [r3, #4]
 8016b28:	891a      	ldrh	r2, [r3, #8]
 8016b2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016b32:	e029      	b.n	8016b88 <tcp_receive+0x620>
 8016b34:	08020504 	.word	0x08020504
 8016b38:	0802050c 	.word	0x0802050c
 8016b3c:	20006c0c 	.word	0x20006c0c
 8016b40:	20006c08 	.word	0x20006c08
 8016b44:	2000df1c 	.word	0x2000df1c
 8016b48:	20006c0e 	.word	0x20006c0e
 8016b4c:	20006c04 	.word	0x20006c04
 8016b50:	20006be4 	.word	0x20006be4
 8016b54:	0802019c 	.word	0x0802019c
 8016b58:	08020514 	.word	0x08020514
 8016b5c:	080201e8 	.word	0x080201e8
 8016b60:	08020524 	.word	0x08020524
 8016b64:	08020534 	.word	0x08020534
        off -= p->len;
 8016b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b6a:	895b      	ldrh	r3, [r3, #10]
 8016b6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016b7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b7e:	2200      	movs	r2, #0
 8016b80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b8a:	895b      	ldrh	r3, [r3, #10]
 8016b8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d8e9      	bhi.n	8016b68 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016b94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b98:	4619      	mov	r1, r3
 8016b9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016b9c:	f7fc f95c 	bl	8012e58 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba4:	4a91      	ldr	r2, [pc, #580]	; (8016dec <tcp_receive+0x884>)
 8016ba6:	6013      	str	r3, [r2, #0]
 8016ba8:	4b91      	ldr	r3, [pc, #580]	; (8016df0 <tcp_receive+0x888>)
 8016baa:	68db      	ldr	r3, [r3, #12]
 8016bac:	4a8f      	ldr	r2, [pc, #572]	; (8016dec <tcp_receive+0x884>)
 8016bae:	6812      	ldr	r2, [r2, #0]
 8016bb0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016bb2:	e00d      	b.n	8016bd0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016bb4:	4b8d      	ldr	r3, [pc, #564]	; (8016dec <tcp_receive+0x884>)
 8016bb6:	681a      	ldr	r2, [r3, #0]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bbc:	1ad3      	subs	r3, r2, r3
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	da06      	bge.n	8016bd0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	8b5b      	ldrh	r3, [r3, #26]
 8016bc6:	f043 0302 	orr.w	r3, r3, #2
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016bd0:	4b86      	ldr	r3, [pc, #536]	; (8016dec <tcp_receive+0x884>)
 8016bd2:	681a      	ldr	r2, [r3, #0]
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bd8:	1ad3      	subs	r3, r2, r3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	f2c0 842a 	blt.w	8017434 <tcp_receive+0xecc>
 8016be0:	4b82      	ldr	r3, [pc, #520]	; (8016dec <tcp_receive+0x884>)
 8016be2:	681a      	ldr	r2, [r3, #0]
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016be8:	6879      	ldr	r1, [r7, #4]
 8016bea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016bec:	440b      	add	r3, r1
 8016bee:	1ad3      	subs	r3, r2, r3
 8016bf0:	3301      	adds	r3, #1
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f300 841e 	bgt.w	8017434 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016bfc:	4b7b      	ldr	r3, [pc, #492]	; (8016dec <tcp_receive+0x884>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	f040 829a 	bne.w	801713a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016c06:	4b7a      	ldr	r3, [pc, #488]	; (8016df0 <tcp_receive+0x888>)
 8016c08:	891c      	ldrh	r4, [r3, #8]
 8016c0a:	4b79      	ldr	r3, [pc, #484]	; (8016df0 <tcp_receive+0x888>)
 8016c0c:	68db      	ldr	r3, [r3, #12]
 8016c0e:	899b      	ldrh	r3, [r3, #12]
 8016c10:	b29b      	uxth	r3, r3
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7fa fe5e 	bl	80118d4 <lwip_htons>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	b2db      	uxtb	r3, r3
 8016c1c:	f003 0303 	and.w	r3, r3, #3
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d001      	beq.n	8016c28 <tcp_receive+0x6c0>
 8016c24:	2301      	movs	r3, #1
 8016c26:	e000      	b.n	8016c2a <tcp_receive+0x6c2>
 8016c28:	2300      	movs	r3, #0
 8016c2a:	4423      	add	r3, r4
 8016c2c:	b29a      	uxth	r2, r3
 8016c2e:	4b71      	ldr	r3, [pc, #452]	; (8016df4 <tcp_receive+0x88c>)
 8016c30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c36:	4b6f      	ldr	r3, [pc, #444]	; (8016df4 <tcp_receive+0x88c>)
 8016c38:	881b      	ldrh	r3, [r3, #0]
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d275      	bcs.n	8016d2a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016c3e:	4b6c      	ldr	r3, [pc, #432]	; (8016df0 <tcp_receive+0x888>)
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	899b      	ldrh	r3, [r3, #12]
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fa fe44 	bl	80118d4 <lwip_htons>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	f003 0301 	and.w	r3, r3, #1
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d01f      	beq.n	8016c98 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016c58:	4b65      	ldr	r3, [pc, #404]	; (8016df0 <tcp_receive+0x888>)
 8016c5a:	68db      	ldr	r3, [r3, #12]
 8016c5c:	899b      	ldrh	r3, [r3, #12]
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	b21b      	sxth	r3, r3
 8016c62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016c66:	b21c      	sxth	r4, r3
 8016c68:	4b61      	ldr	r3, [pc, #388]	; (8016df0 <tcp_receive+0x888>)
 8016c6a:	68db      	ldr	r3, [r3, #12]
 8016c6c:	899b      	ldrh	r3, [r3, #12]
 8016c6e:	b29b      	uxth	r3, r3
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7fa fe2f 	bl	80118d4 <lwip_htons>
 8016c76:	4603      	mov	r3, r0
 8016c78:	b2db      	uxtb	r3, r3
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016c80:	b29b      	uxth	r3, r3
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7fa fe26 	bl	80118d4 <lwip_htons>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	b21b      	sxth	r3, r3
 8016c8c:	4323      	orrs	r3, r4
 8016c8e:	b21a      	sxth	r2, r3
 8016c90:	4b57      	ldr	r3, [pc, #348]	; (8016df0 <tcp_receive+0x888>)
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	b292      	uxth	r2, r2
 8016c96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c9c:	4b54      	ldr	r3, [pc, #336]	; (8016df0 <tcp_receive+0x888>)
 8016c9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016ca0:	4b53      	ldr	r3, [pc, #332]	; (8016df0 <tcp_receive+0x888>)
 8016ca2:	68db      	ldr	r3, [r3, #12]
 8016ca4:	899b      	ldrh	r3, [r3, #12]
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7fa fe13 	bl	80118d4 <lwip_htons>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	f003 0302 	and.w	r3, r3, #2
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d005      	beq.n	8016cc6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8016cba:	4b4d      	ldr	r3, [pc, #308]	; (8016df0 <tcp_receive+0x888>)
 8016cbc:	891b      	ldrh	r3, [r3, #8]
 8016cbe:	3b01      	subs	r3, #1
 8016cc0:	b29a      	uxth	r2, r3
 8016cc2:	4b4b      	ldr	r3, [pc, #300]	; (8016df0 <tcp_receive+0x888>)
 8016cc4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016cc6:	4b4a      	ldr	r3, [pc, #296]	; (8016df0 <tcp_receive+0x888>)
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	4a49      	ldr	r2, [pc, #292]	; (8016df0 <tcp_receive+0x888>)
 8016ccc:	8912      	ldrh	r2, [r2, #8]
 8016cce:	4611      	mov	r1, r2
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7fb ffc1 	bl	8012c58 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016cd6:	4b46      	ldr	r3, [pc, #280]	; (8016df0 <tcp_receive+0x888>)
 8016cd8:	891c      	ldrh	r4, [r3, #8]
 8016cda:	4b45      	ldr	r3, [pc, #276]	; (8016df0 <tcp_receive+0x888>)
 8016cdc:	68db      	ldr	r3, [r3, #12]
 8016cde:	899b      	ldrh	r3, [r3, #12]
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7fa fdf6 	bl	80118d4 <lwip_htons>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	f003 0303 	and.w	r3, r3, #3
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d001      	beq.n	8016cf8 <tcp_receive+0x790>
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	e000      	b.n	8016cfa <tcp_receive+0x792>
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	4423      	add	r3, r4
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	4b3d      	ldr	r3, [pc, #244]	; (8016df4 <tcp_receive+0x88c>)
 8016d00:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d02:	4b3c      	ldr	r3, [pc, #240]	; (8016df4 <tcp_receive+0x88c>)
 8016d04:	881b      	ldrh	r3, [r3, #0]
 8016d06:	461a      	mov	r2, r3
 8016d08:	4b38      	ldr	r3, [pc, #224]	; (8016dec <tcp_receive+0x884>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	441a      	add	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d12:	6879      	ldr	r1, [r7, #4]
 8016d14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016d16:	440b      	add	r3, r1
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d006      	beq.n	8016d2a <tcp_receive+0x7c2>
 8016d1c:	4b36      	ldr	r3, [pc, #216]	; (8016df8 <tcp_receive+0x890>)
 8016d1e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016d22:	4936      	ldr	r1, [pc, #216]	; (8016dfc <tcp_receive+0x894>)
 8016d24:	4836      	ldr	r0, [pc, #216]	; (8016e00 <tcp_receive+0x898>)
 8016d26:	f006 f88f 	bl	801ce48 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	f000 80e7 	beq.w	8016f02 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d34:	4b2e      	ldr	r3, [pc, #184]	; (8016df0 <tcp_receive+0x888>)
 8016d36:	68db      	ldr	r3, [r3, #12]
 8016d38:	899b      	ldrh	r3, [r3, #12]
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7fa fdc9 	bl	80118d4 <lwip_htons>
 8016d42:	4603      	mov	r3, r0
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	f003 0301 	and.w	r3, r3, #1
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d010      	beq.n	8016d70 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016d4e:	e00a      	b.n	8016d66 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d54:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d5a:	681a      	ldr	r2, [r3, #0]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016d60:	68f8      	ldr	r0, [r7, #12]
 8016d62:	f7fd fcc8 	bl	80146f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1f0      	bne.n	8016d50 <tcp_receive+0x7e8>
 8016d6e:	e0c8      	b.n	8016f02 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d74:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016d76:	e052      	b.n	8016e1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	899b      	ldrh	r3, [r3, #12]
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7fa fda7 	bl	80118d4 <lwip_htons>
 8016d86:	4603      	mov	r3, r0
 8016d88:	b2db      	uxtb	r3, r3
 8016d8a:	f003 0301 	and.w	r3, r3, #1
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d03d      	beq.n	8016e0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016d92:	4b17      	ldr	r3, [pc, #92]	; (8016df0 <tcp_receive+0x888>)
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	899b      	ldrh	r3, [r3, #12]
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7fa fd9a 	bl	80118d4 <lwip_htons>
 8016da0:	4603      	mov	r3, r0
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d130      	bne.n	8016e0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016dac:	4b10      	ldr	r3, [pc, #64]	; (8016df0 <tcp_receive+0x888>)
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	899b      	ldrh	r3, [r3, #12]
 8016db2:	b29c      	uxth	r4, r3
 8016db4:	2001      	movs	r0, #1
 8016db6:	f7fa fd8d 	bl	80118d4 <lwip_htons>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	4b0c      	ldr	r3, [pc, #48]	; (8016df0 <tcp_receive+0x888>)
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	4322      	orrs	r2, r4
 8016dc4:	b292      	uxth	r2, r2
 8016dc6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016dc8:	4b09      	ldr	r3, [pc, #36]	; (8016df0 <tcp_receive+0x888>)
 8016dca:	891c      	ldrh	r4, [r3, #8]
 8016dcc:	4b08      	ldr	r3, [pc, #32]	; (8016df0 <tcp_receive+0x888>)
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	899b      	ldrh	r3, [r3, #12]
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fa fd7d 	bl	80118d4 <lwip_htons>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	f003 0303 	and.w	r3, r3, #3
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d00e      	beq.n	8016e04 <tcp_receive+0x89c>
 8016de6:	2301      	movs	r3, #1
 8016de8:	e00d      	b.n	8016e06 <tcp_receive+0x89e>
 8016dea:	bf00      	nop
 8016dec:	20006c04 	.word	0x20006c04
 8016df0:	20006be4 	.word	0x20006be4
 8016df4:	20006c0e 	.word	0x20006c0e
 8016df8:	0802019c 	.word	0x0802019c
 8016dfc:	08020544 	.word	0x08020544
 8016e00:	080201e8 	.word	0x080201e8
 8016e04:	2300      	movs	r3, #0
 8016e06:	4423      	add	r3, r4
 8016e08:	b29a      	uxth	r2, r3
 8016e0a:	4b98      	ldr	r3, [pc, #608]	; (801706c <tcp_receive+0xb04>)
 8016e0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016e18:	6938      	ldr	r0, [r7, #16]
 8016e1a:	f7fd fc6c 	bl	80146f6 <tcp_seg_free>
            while (next &&
 8016e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d00e      	beq.n	8016e42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016e24:	4b91      	ldr	r3, [pc, #580]	; (801706c <tcp_receive+0xb04>)
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	461a      	mov	r2, r3
 8016e2a:	4b91      	ldr	r3, [pc, #580]	; (8017070 <tcp_receive+0xb08>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	441a      	add	r2, r3
 8016e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	685b      	ldr	r3, [r3, #4]
 8016e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e38:	8909      	ldrh	r1, [r1, #8]
 8016e3a:	440b      	add	r3, r1
 8016e3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	da9a      	bge.n	8016d78 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d059      	beq.n	8016efc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016e48:	4b88      	ldr	r3, [pc, #544]	; (801706c <tcp_receive+0xb04>)
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	4b88      	ldr	r3, [pc, #544]	; (8017070 <tcp_receive+0xb08>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	441a      	add	r2, r3
 8016e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dd4d      	ble.n	8016efc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e62:	68db      	ldr	r3, [r3, #12]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	b29a      	uxth	r2, r3
 8016e68:	4b81      	ldr	r3, [pc, #516]	; (8017070 <tcp_receive+0xb08>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	b29a      	uxth	r2, r3
 8016e72:	4b80      	ldr	r3, [pc, #512]	; (8017074 <tcp_receive+0xb0c>)
 8016e74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e76:	4b7f      	ldr	r3, [pc, #508]	; (8017074 <tcp_receive+0xb0c>)
 8016e78:	68db      	ldr	r3, [r3, #12]
 8016e7a:	899b      	ldrh	r3, [r3, #12]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f7fa fd28 	bl	80118d4 <lwip_htons>
 8016e84:	4603      	mov	r3, r0
 8016e86:	b2db      	uxtb	r3, r3
 8016e88:	f003 0302 	and.w	r3, r3, #2
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d005      	beq.n	8016e9c <tcp_receive+0x934>
                inseg.len -= 1;
 8016e90:	4b78      	ldr	r3, [pc, #480]	; (8017074 <tcp_receive+0xb0c>)
 8016e92:	891b      	ldrh	r3, [r3, #8]
 8016e94:	3b01      	subs	r3, #1
 8016e96:	b29a      	uxth	r2, r3
 8016e98:	4b76      	ldr	r3, [pc, #472]	; (8017074 <tcp_receive+0xb0c>)
 8016e9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016e9c:	4b75      	ldr	r3, [pc, #468]	; (8017074 <tcp_receive+0xb0c>)
 8016e9e:	685b      	ldr	r3, [r3, #4]
 8016ea0:	4a74      	ldr	r2, [pc, #464]	; (8017074 <tcp_receive+0xb0c>)
 8016ea2:	8912      	ldrh	r2, [r2, #8]
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7fb fed6 	bl	8012c58 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016eac:	4b71      	ldr	r3, [pc, #452]	; (8017074 <tcp_receive+0xb0c>)
 8016eae:	891c      	ldrh	r4, [r3, #8]
 8016eb0:	4b70      	ldr	r3, [pc, #448]	; (8017074 <tcp_receive+0xb0c>)
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	899b      	ldrh	r3, [r3, #12]
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fa fd0b 	bl	80118d4 <lwip_htons>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	f003 0303 	and.w	r3, r3, #3
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d001      	beq.n	8016ece <tcp_receive+0x966>
 8016eca:	2301      	movs	r3, #1
 8016ecc:	e000      	b.n	8016ed0 <tcp_receive+0x968>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	4423      	add	r3, r4
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	4b65      	ldr	r3, [pc, #404]	; (801706c <tcp_receive+0xb04>)
 8016ed6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016ed8:	4b64      	ldr	r3, [pc, #400]	; (801706c <tcp_receive+0xb04>)
 8016eda:	881b      	ldrh	r3, [r3, #0]
 8016edc:	461a      	mov	r2, r3
 8016ede:	4b64      	ldr	r3, [pc, #400]	; (8017070 <tcp_receive+0xb08>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	441a      	add	r2, r3
 8016ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d006      	beq.n	8016efc <tcp_receive+0x994>
 8016eee:	4b62      	ldr	r3, [pc, #392]	; (8017078 <tcp_receive+0xb10>)
 8016ef0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016ef4:	4961      	ldr	r1, [pc, #388]	; (801707c <tcp_receive+0xb14>)
 8016ef6:	4862      	ldr	r0, [pc, #392]	; (8017080 <tcp_receive+0xb18>)
 8016ef8:	f005 ffa6 	bl	801ce48 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016f02:	4b5a      	ldr	r3, [pc, #360]	; (801706c <tcp_receive+0xb04>)
 8016f04:	881b      	ldrh	r3, [r3, #0]
 8016f06:	461a      	mov	r2, r3
 8016f08:	4b59      	ldr	r3, [pc, #356]	; (8017070 <tcp_receive+0xb08>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	441a      	add	r2, r3
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f16:	4b55      	ldr	r3, [pc, #340]	; (801706c <tcp_receive+0xb04>)
 8016f18:	881b      	ldrh	r3, [r3, #0]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d206      	bcs.n	8016f2c <tcp_receive+0x9c4>
 8016f1e:	4b56      	ldr	r3, [pc, #344]	; (8017078 <tcp_receive+0xb10>)
 8016f20:	f240 6207 	movw	r2, #1543	; 0x607
 8016f24:	4957      	ldr	r1, [pc, #348]	; (8017084 <tcp_receive+0xb1c>)
 8016f26:	4856      	ldr	r0, [pc, #344]	; (8017080 <tcp_receive+0xb18>)
 8016f28:	f005 ff8e 	bl	801ce48 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f30:	4b4e      	ldr	r3, [pc, #312]	; (801706c <tcp_receive+0xb04>)
 8016f32:	881b      	ldrh	r3, [r3, #0]
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	b29a      	uxth	r2, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7fc feb5 	bl	8013cac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016f42:	4b4c      	ldr	r3, [pc, #304]	; (8017074 <tcp_receive+0xb0c>)
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	891b      	ldrh	r3, [r3, #8]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d006      	beq.n	8016f5a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016f4c:	4b49      	ldr	r3, [pc, #292]	; (8017074 <tcp_receive+0xb0c>)
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	4a4d      	ldr	r2, [pc, #308]	; (8017088 <tcp_receive+0xb20>)
 8016f52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016f54:	4b47      	ldr	r3, [pc, #284]	; (8017074 <tcp_receive+0xb0c>)
 8016f56:	2200      	movs	r2, #0
 8016f58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f5a:	4b46      	ldr	r3, [pc, #280]	; (8017074 <tcp_receive+0xb0c>)
 8016f5c:	68db      	ldr	r3, [r3, #12]
 8016f5e:	899b      	ldrh	r3, [r3, #12]
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7fa fcb6 	bl	80118d4 <lwip_htons>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	f003 0301 	and.w	r3, r3, #1
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	f000 80b8 	beq.w	80170e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016f76:	4b45      	ldr	r3, [pc, #276]	; (801708c <tcp_receive+0xb24>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	f043 0320 	orr.w	r3, r3, #32
 8016f7e:	b2da      	uxtb	r2, r3
 8016f80:	4b42      	ldr	r3, [pc, #264]	; (801708c <tcp_receive+0xb24>)
 8016f82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016f84:	e0af      	b.n	80170e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	4a36      	ldr	r2, [pc, #216]	; (8017070 <tcp_receive+0xb08>)
 8016f96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	891b      	ldrh	r3, [r3, #8]
 8016f9c:	461c      	mov	r4, r3
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	899b      	ldrh	r3, [r3, #12]
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7fa fc94 	bl	80118d4 <lwip_htons>
 8016fac:	4603      	mov	r3, r0
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	f003 0303 	and.w	r3, r3, #3
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d001      	beq.n	8016fbc <tcp_receive+0xa54>
 8016fb8:	2301      	movs	r3, #1
 8016fba:	e000      	b.n	8016fbe <tcp_receive+0xa56>
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	191a      	adds	r2, r3, r4
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fc4:	441a      	add	r2, r3
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fce:	461c      	mov	r4, r3
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	891b      	ldrh	r3, [r3, #8]
 8016fd4:	461d      	mov	r5, r3
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa fc78 	bl	80118d4 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 0303 	and.w	r3, r3, #3
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <tcp_receive+0xa8c>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	e000      	b.n	8016ff6 <tcp_receive+0xa8e>
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	442b      	add	r3, r5
 8016ff8:	429c      	cmp	r4, r3
 8016ffa:	d206      	bcs.n	801700a <tcp_receive+0xaa2>
 8016ffc:	4b1e      	ldr	r3, [pc, #120]	; (8017078 <tcp_receive+0xb10>)
 8016ffe:	f240 622b 	movw	r2, #1579	; 0x62b
 8017002:	4923      	ldr	r1, [pc, #140]	; (8017090 <tcp_receive+0xb28>)
 8017004:	481e      	ldr	r0, [pc, #120]	; (8017080 <tcp_receive+0xb18>)
 8017006:	f005 ff1f 	bl	801ce48 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	891b      	ldrh	r3, [r3, #8]
 801700e:	461c      	mov	r4, r3
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	899b      	ldrh	r3, [r3, #12]
 8017016:	b29b      	uxth	r3, r3
 8017018:	4618      	mov	r0, r3
 801701a:	f7fa fc5b 	bl	80118d4 <lwip_htons>
 801701e:	4603      	mov	r3, r0
 8017020:	b2db      	uxtb	r3, r3
 8017022:	f003 0303 	and.w	r3, r3, #3
 8017026:	2b00      	cmp	r3, #0
 8017028:	d001      	beq.n	801702e <tcp_receive+0xac6>
 801702a:	2301      	movs	r3, #1
 801702c:	e000      	b.n	8017030 <tcp_receive+0xac8>
 801702e:	2300      	movs	r3, #0
 8017030:	1919      	adds	r1, r3, r4
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017036:	b28b      	uxth	r3, r1
 8017038:	1ad3      	subs	r3, r2, r3
 801703a:	b29a      	uxth	r2, r3
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7fc fe33 	bl	8013cac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	891b      	ldrh	r3, [r3, #8]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d028      	beq.n	80170a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017050:	4b0d      	ldr	r3, [pc, #52]	; (8017088 <tcp_receive+0xb20>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d01d      	beq.n	8017094 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017058:	4b0b      	ldr	r3, [pc, #44]	; (8017088 <tcp_receive+0xb20>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	4619      	mov	r1, r3
 8017062:	4610      	mov	r0, r2
 8017064:	f7fc f84c 	bl	8013100 <pbuf_cat>
 8017068:	e018      	b.n	801709c <tcp_receive+0xb34>
 801706a:	bf00      	nop
 801706c:	20006c0e 	.word	0x20006c0e
 8017070:	20006c04 	.word	0x20006c04
 8017074:	20006be4 	.word	0x20006be4
 8017078:	0802019c 	.word	0x0802019c
 801707c:	0802057c 	.word	0x0802057c
 8017080:	080201e8 	.word	0x080201e8
 8017084:	080205b8 	.word	0x080205b8
 8017088:	20006c14 	.word	0x20006c14
 801708c:	20006c11 	.word	0x20006c11
 8017090:	080205d8 	.word	0x080205d8
            } else {
              recv_data = cseg->p;
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	685b      	ldr	r3, [r3, #4]
 8017098:	4a70      	ldr	r2, [pc, #448]	; (801725c <tcp_receive+0xcf4>)
 801709a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	2200      	movs	r2, #0
 80170a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	899b      	ldrh	r3, [r3, #12]
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fa fc12 	bl	80118d4 <lwip_htons>
 80170b0:	4603      	mov	r3, r0
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	f003 0301 	and.w	r3, r3, #1
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d00d      	beq.n	80170d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80170bc:	4b68      	ldr	r3, [pc, #416]	; (8017260 <tcp_receive+0xcf8>)
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	f043 0320 	orr.w	r3, r3, #32
 80170c4:	b2da      	uxtb	r2, r3
 80170c6:	4b66      	ldr	r3, [pc, #408]	; (8017260 <tcp_receive+0xcf8>)
 80170c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	7d1b      	ldrb	r3, [r3, #20]
 80170ce:	2b04      	cmp	r3, #4
 80170d0:	d102      	bne.n	80170d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2207      	movs	r2, #7
 80170d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80170e0:	68b8      	ldr	r0, [r7, #8]
 80170e2:	f7fd fb08 	bl	80146f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d008      	beq.n	8017100 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	685a      	ldr	r2, [r3, #4]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80170fa:	429a      	cmp	r2, r3
 80170fc:	f43f af43 	beq.w	8016f86 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	8b5b      	ldrh	r3, [r3, #26]
 8017104:	f003 0301 	and.w	r3, r3, #1
 8017108:	2b00      	cmp	r3, #0
 801710a:	d00e      	beq.n	801712a <tcp_receive+0xbc2>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	8b5b      	ldrh	r3, [r3, #26]
 8017110:	f023 0301 	bic.w	r3, r3, #1
 8017114:	b29a      	uxth	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	835a      	strh	r2, [r3, #26]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	8b5b      	ldrh	r3, [r3, #26]
 801711e:	f043 0302 	orr.w	r3, r3, #2
 8017122:	b29a      	uxth	r2, r3
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017128:	e188      	b.n	801743c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	8b5b      	ldrh	r3, [r3, #26]
 801712e:	f043 0301 	orr.w	r3, r3, #1
 8017132:	b29a      	uxth	r2, r3
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017138:	e180      	b.n	801743c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017142:	4848      	ldr	r0, [pc, #288]	; (8017264 <tcp_receive+0xcfc>)
 8017144:	f7fd faf0 	bl	8014728 <tcp_seg_copy>
 8017148:	4602      	mov	r2, r0
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	675a      	str	r2, [r3, #116]	; 0x74
 801714e:	e16d      	b.n	801742c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017150:	2300      	movs	r3, #0
 8017152:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017158:	63bb      	str	r3, [r7, #56]	; 0x38
 801715a:	e157      	b.n	801740c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801715e:	68db      	ldr	r3, [r3, #12]
 8017160:	685a      	ldr	r2, [r3, #4]
 8017162:	4b41      	ldr	r3, [pc, #260]	; (8017268 <tcp_receive+0xd00>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	429a      	cmp	r2, r3
 8017168:	d11d      	bne.n	80171a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801716a:	4b3e      	ldr	r3, [pc, #248]	; (8017264 <tcp_receive+0xcfc>)
 801716c:	891a      	ldrh	r2, [r3, #8]
 801716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017170:	891b      	ldrh	r3, [r3, #8]
 8017172:	429a      	cmp	r2, r3
 8017174:	f240 814f 	bls.w	8017416 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017178:	483a      	ldr	r0, [pc, #232]	; (8017264 <tcp_receive+0xcfc>)
 801717a:	f7fd fad5 	bl	8014728 <tcp_seg_copy>
 801717e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	2b00      	cmp	r3, #0
 8017184:	f000 8149 	beq.w	801741a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8017188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801718a:	2b00      	cmp	r3, #0
 801718c:	d003      	beq.n	8017196 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801718e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017190:	697a      	ldr	r2, [r7, #20]
 8017192:	601a      	str	r2, [r3, #0]
 8017194:	e002      	b.n	801719c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	697a      	ldr	r2, [r7, #20]
 801719a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801719c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801719e:	6978      	ldr	r0, [r7, #20]
 80171a0:	f7ff f8de 	bl	8016360 <tcp_oos_insert_segment>
                }
                break;
 80171a4:	e139      	b.n	801741a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80171a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d117      	bne.n	80171dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80171ac:	4b2e      	ldr	r3, [pc, #184]	; (8017268 <tcp_receive+0xd00>)
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	1ad3      	subs	r3, r2, r3
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	da57      	bge.n	801726c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171bc:	4829      	ldr	r0, [pc, #164]	; (8017264 <tcp_receive+0xcfc>)
 80171be:	f7fd fab3 	bl	8014728 <tcp_seg_copy>
 80171c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f000 8129 	beq.w	801741e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	69ba      	ldr	r2, [r7, #24]
 80171d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80171d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80171d4:	69b8      	ldr	r0, [r7, #24]
 80171d6:	f7ff f8c3 	bl	8016360 <tcp_oos_insert_segment>
                  }
                  break;
 80171da:	e120      	b.n	801741e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80171dc:	4b22      	ldr	r3, [pc, #136]	; (8017268 <tcp_receive+0xd00>)
 80171de:	681a      	ldr	r2, [r3, #0]
 80171e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	1ad3      	subs	r3, r2, r3
 80171e8:	3b01      	subs	r3, #1
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	db3e      	blt.n	801726c <tcp_receive+0xd04>
 80171ee:	4b1e      	ldr	r3, [pc, #120]	; (8017268 <tcp_receive+0xd00>)
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	1ad3      	subs	r3, r2, r3
 80171fa:	3301      	adds	r3, #1
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	dc35      	bgt.n	801726c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017200:	4818      	ldr	r0, [pc, #96]	; (8017264 <tcp_receive+0xcfc>)
 8017202:	f7fd fa91 	bl	8014728 <tcp_seg_copy>
 8017206:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	2b00      	cmp	r3, #0
 801720c:	f000 8109 	beq.w	8017422 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	685b      	ldr	r3, [r3, #4]
 8017216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017218:	8912      	ldrh	r2, [r2, #8]
 801721a:	441a      	add	r2, r3
 801721c:	4b12      	ldr	r3, [pc, #72]	; (8017268 <tcp_receive+0xd00>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	1ad3      	subs	r3, r2, r3
 8017222:	2b00      	cmp	r3, #0
 8017224:	dd12      	ble.n	801724c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017226:	4b10      	ldr	r3, [pc, #64]	; (8017268 <tcp_receive+0xd00>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	b29a      	uxth	r2, r3
 801722c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801722e:	68db      	ldr	r3, [r3, #12]
 8017230:	685b      	ldr	r3, [r3, #4]
 8017232:	b29b      	uxth	r3, r3
 8017234:	1ad3      	subs	r3, r2, r3
 8017236:	b29a      	uxth	r2, r3
 8017238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801723a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801723e:	685a      	ldr	r2, [r3, #4]
 8017240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017242:	891b      	ldrh	r3, [r3, #8]
 8017244:	4619      	mov	r1, r3
 8017246:	4610      	mov	r0, r2
 8017248:	f7fb fd06 	bl	8012c58 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801724e:	69fa      	ldr	r2, [r7, #28]
 8017250:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017254:	69f8      	ldr	r0, [r7, #28]
 8017256:	f7ff f883 	bl	8016360 <tcp_oos_insert_segment>
                  }
                  break;
 801725a:	e0e2      	b.n	8017422 <tcp_receive+0xeba>
 801725c:	20006c14 	.word	0x20006c14
 8017260:	20006c11 	.word	0x20006c11
 8017264:	20006be4 	.word	0x20006be4
 8017268:	20006c04 	.word	0x20006c04
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801726e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	f040 80c6 	bne.w	8017406 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801727a:	4b80      	ldr	r3, [pc, #512]	; (801747c <tcp_receive+0xf14>)
 801727c:	681a      	ldr	r2, [r3, #0]
 801727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017280:	68db      	ldr	r3, [r3, #12]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017286:	2b00      	cmp	r3, #0
 8017288:	f340 80bd 	ble.w	8017406 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801728e:	68db      	ldr	r3, [r3, #12]
 8017290:	899b      	ldrh	r3, [r3, #12]
 8017292:	b29b      	uxth	r3, r3
 8017294:	4618      	mov	r0, r3
 8017296:	f7fa fb1d 	bl	80118d4 <lwip_htons>
 801729a:	4603      	mov	r3, r0
 801729c:	b2db      	uxtb	r3, r3
 801729e:	f003 0301 	and.w	r3, r3, #1
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	f040 80bf 	bne.w	8017426 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80172a8:	4875      	ldr	r0, [pc, #468]	; (8017480 <tcp_receive+0xf18>)
 80172aa:	f7fd fa3d 	bl	8014728 <tcp_seg_copy>
 80172ae:	4602      	mov	r2, r0
 80172b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80172b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	f000 80b6 	beq.w	801742a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80172be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80172c6:	8912      	ldrh	r2, [r2, #8]
 80172c8:	441a      	add	r2, r3
 80172ca:	4b6c      	ldr	r3, [pc, #432]	; (801747c <tcp_receive+0xf14>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	1ad3      	subs	r3, r2, r3
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dd12      	ble.n	80172fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80172d4:	4b69      	ldr	r3, [pc, #420]	; (801747c <tcp_receive+0xf14>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	b29a      	uxth	r2, r3
 80172da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172dc:	68db      	ldr	r3, [r3, #12]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	b29b      	uxth	r3, r3
 80172e2:	1ad3      	subs	r3, r2, r3
 80172e4:	b29a      	uxth	r2, r3
 80172e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80172ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ec:	685a      	ldr	r2, [r3, #4]
 80172ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f0:	891b      	ldrh	r3, [r3, #8]
 80172f2:	4619      	mov	r1, r3
 80172f4:	4610      	mov	r0, r2
 80172f6:	f7fb fcaf 	bl	8012c58 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80172fa:	4b62      	ldr	r3, [pc, #392]	; (8017484 <tcp_receive+0xf1c>)
 80172fc:	881b      	ldrh	r3, [r3, #0]
 80172fe:	461a      	mov	r2, r3
 8017300:	4b5e      	ldr	r3, [pc, #376]	; (801747c <tcp_receive+0xf14>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	441a      	add	r2, r3
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801730a:	6879      	ldr	r1, [r7, #4]
 801730c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801730e:	440b      	add	r3, r1
 8017310:	1ad3      	subs	r3, r2, r3
 8017312:	2b00      	cmp	r3, #0
 8017314:	f340 8089 	ble.w	801742a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	899b      	ldrh	r3, [r3, #12]
 8017320:	b29b      	uxth	r3, r3
 8017322:	4618      	mov	r0, r3
 8017324:	f7fa fad6 	bl	80118d4 <lwip_htons>
 8017328:	4603      	mov	r3, r0
 801732a:	b2db      	uxtb	r3, r3
 801732c:	f003 0301 	and.w	r3, r3, #1
 8017330:	2b00      	cmp	r3, #0
 8017332:	d022      	beq.n	801737a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	899b      	ldrh	r3, [r3, #12]
 801733c:	b29b      	uxth	r3, r3
 801733e:	b21b      	sxth	r3, r3
 8017340:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017344:	b21c      	sxth	r4, r3
 8017346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	68db      	ldr	r3, [r3, #12]
 801734c:	899b      	ldrh	r3, [r3, #12]
 801734e:	b29b      	uxth	r3, r3
 8017350:	4618      	mov	r0, r3
 8017352:	f7fa fabf 	bl	80118d4 <lwip_htons>
 8017356:	4603      	mov	r3, r0
 8017358:	b2db      	uxtb	r3, r3
 801735a:	b29b      	uxth	r3, r3
 801735c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017360:	b29b      	uxth	r3, r3
 8017362:	4618      	mov	r0, r3
 8017364:	f7fa fab6 	bl	80118d4 <lwip_htons>
 8017368:	4603      	mov	r3, r0
 801736a:	b21b      	sxth	r3, r3
 801736c:	4323      	orrs	r3, r4
 801736e:	b21a      	sxth	r2, r3
 8017370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	68db      	ldr	r3, [r3, #12]
 8017376:	b292      	uxth	r2, r2
 8017378:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801737e:	b29a      	uxth	r2, r3
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017384:	4413      	add	r3, r2
 8017386:	b299      	uxth	r1, r3
 8017388:	4b3c      	ldr	r3, [pc, #240]	; (801747c <tcp_receive+0xf14>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	b29a      	uxth	r2, r3
 801738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	1a8a      	subs	r2, r1, r2
 8017394:	b292      	uxth	r2, r2
 8017396:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	685a      	ldr	r2, [r3, #4]
 801739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	891b      	ldrh	r3, [r3, #8]
 80173a4:	4619      	mov	r1, r3
 80173a6:	4610      	mov	r0, r2
 80173a8:	f7fb fc56 	bl	8012c58 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80173ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	891c      	ldrh	r4, [r3, #8]
 80173b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	68db      	ldr	r3, [r3, #12]
 80173b8:	899b      	ldrh	r3, [r3, #12]
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	4618      	mov	r0, r3
 80173be:	f7fa fa89 	bl	80118d4 <lwip_htons>
 80173c2:	4603      	mov	r3, r0
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	f003 0303 	and.w	r3, r3, #3
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <tcp_receive+0xe6a>
 80173ce:	2301      	movs	r3, #1
 80173d0:	e000      	b.n	80173d4 <tcp_receive+0xe6c>
 80173d2:	2300      	movs	r3, #0
 80173d4:	4423      	add	r3, r4
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	4b2a      	ldr	r3, [pc, #168]	; (8017484 <tcp_receive+0xf1c>)
 80173da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80173dc:	4b29      	ldr	r3, [pc, #164]	; (8017484 <tcp_receive+0xf1c>)
 80173de:	881b      	ldrh	r3, [r3, #0]
 80173e0:	461a      	mov	r2, r3
 80173e2:	4b26      	ldr	r3, [pc, #152]	; (801747c <tcp_receive+0xf14>)
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	441a      	add	r2, r3
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173ec:	6879      	ldr	r1, [r7, #4]
 80173ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80173f0:	440b      	add	r3, r1
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d019      	beq.n	801742a <tcp_receive+0xec2>
 80173f6:	4b24      	ldr	r3, [pc, #144]	; (8017488 <tcp_receive+0xf20>)
 80173f8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80173fc:	4923      	ldr	r1, [pc, #140]	; (801748c <tcp_receive+0xf24>)
 80173fe:	4824      	ldr	r0, [pc, #144]	; (8017490 <tcp_receive+0xf28>)
 8017400:	f005 fd22 	bl	801ce48 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017404:	e011      	b.n	801742a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	63bb      	str	r3, [r7, #56]	; 0x38
 801740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801740e:	2b00      	cmp	r3, #0
 8017410:	f47f aea4 	bne.w	801715c <tcp_receive+0xbf4>
 8017414:	e00a      	b.n	801742c <tcp_receive+0xec4>
                break;
 8017416:	bf00      	nop
 8017418:	e008      	b.n	801742c <tcp_receive+0xec4>
                break;
 801741a:	bf00      	nop
 801741c:	e006      	b.n	801742c <tcp_receive+0xec4>
                  break;
 801741e:	bf00      	nop
 8017420:	e004      	b.n	801742c <tcp_receive+0xec4>
                  break;
 8017422:	bf00      	nop
 8017424:	e002      	b.n	801742c <tcp_receive+0xec4>
                  break;
 8017426:	bf00      	nop
 8017428:	e000      	b.n	801742c <tcp_receive+0xec4>
                break;
 801742a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	f001 fe8b 	bl	8019148 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017432:	e003      	b.n	801743c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f001 fe87 	bl	8019148 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801743a:	e01a      	b.n	8017472 <tcp_receive+0xf0a>
 801743c:	e019      	b.n	8017472 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801743e:	4b0f      	ldr	r3, [pc, #60]	; (801747c <tcp_receive+0xf14>)
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017446:	1ad3      	subs	r3, r2, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	db0a      	blt.n	8017462 <tcp_receive+0xefa>
 801744c:	4b0b      	ldr	r3, [pc, #44]	; (801747c <tcp_receive+0xf14>)
 801744e:	681a      	ldr	r2, [r3, #0]
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017454:	6879      	ldr	r1, [r7, #4]
 8017456:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017458:	440b      	add	r3, r1
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	3301      	adds	r3, #1
 801745e:	2b00      	cmp	r3, #0
 8017460:	dd07      	ble.n	8017472 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	8b5b      	ldrh	r3, [r3, #26]
 8017466:	f043 0302 	orr.w	r3, r3, #2
 801746a:	b29a      	uxth	r2, r3
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017470:	e7ff      	b.n	8017472 <tcp_receive+0xf0a>
 8017472:	bf00      	nop
 8017474:	3750      	adds	r7, #80	; 0x50
 8017476:	46bd      	mov	sp, r7
 8017478:	bdb0      	pop	{r4, r5, r7, pc}
 801747a:	bf00      	nop
 801747c:	20006c04 	.word	0x20006c04
 8017480:	20006be4 	.word	0x20006be4
 8017484:	20006c0e 	.word	0x20006c0e
 8017488:	0802019c 	.word	0x0802019c
 801748c:	08020544 	.word	0x08020544
 8017490:	080201e8 	.word	0x080201e8

08017494 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017494:	b480      	push	{r7}
 8017496:	b083      	sub	sp, #12
 8017498:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801749a:	4b15      	ldr	r3, [pc, #84]	; (80174f0 <tcp_get_next_optbyte+0x5c>)
 801749c:	881b      	ldrh	r3, [r3, #0]
 801749e:	1c5a      	adds	r2, r3, #1
 80174a0:	b291      	uxth	r1, r2
 80174a2:	4a13      	ldr	r2, [pc, #76]	; (80174f0 <tcp_get_next_optbyte+0x5c>)
 80174a4:	8011      	strh	r1, [r2, #0]
 80174a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80174a8:	4b12      	ldr	r3, [pc, #72]	; (80174f4 <tcp_get_next_optbyte+0x60>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d004      	beq.n	80174ba <tcp_get_next_optbyte+0x26>
 80174b0:	4b11      	ldr	r3, [pc, #68]	; (80174f8 <tcp_get_next_optbyte+0x64>)
 80174b2:	881b      	ldrh	r3, [r3, #0]
 80174b4:	88fa      	ldrh	r2, [r7, #6]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	d208      	bcs.n	80174cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80174ba:	4b10      	ldr	r3, [pc, #64]	; (80174fc <tcp_get_next_optbyte+0x68>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	3314      	adds	r3, #20
 80174c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80174c2:	88fb      	ldrh	r3, [r7, #6]
 80174c4:	683a      	ldr	r2, [r7, #0]
 80174c6:	4413      	add	r3, r2
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	e00b      	b.n	80174e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80174cc:	88fb      	ldrh	r3, [r7, #6]
 80174ce:	b2da      	uxtb	r2, r3
 80174d0:	4b09      	ldr	r3, [pc, #36]	; (80174f8 <tcp_get_next_optbyte+0x64>)
 80174d2:	881b      	ldrh	r3, [r3, #0]
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	1ad3      	subs	r3, r2, r3
 80174d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80174da:	4b06      	ldr	r3, [pc, #24]	; (80174f4 <tcp_get_next_optbyte+0x60>)
 80174dc:	681a      	ldr	r2, [r3, #0]
 80174de:	797b      	ldrb	r3, [r7, #5]
 80174e0:	4413      	add	r3, r2
 80174e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	370c      	adds	r7, #12
 80174e8:	46bd      	mov	sp, r7
 80174ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ee:	4770      	bx	lr
 80174f0:	20006c00 	.word	0x20006c00
 80174f4:	20006bfc 	.word	0x20006bfc
 80174f8:	20006bfa 	.word	0x20006bfa
 80174fc:	20006bf4 	.word	0x20006bf4

08017500 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b084      	sub	sp, #16
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d106      	bne.n	801751c <tcp_parseopt+0x1c>
 801750e:	4b32      	ldr	r3, [pc, #200]	; (80175d8 <tcp_parseopt+0xd8>)
 8017510:	f240 727d 	movw	r2, #1917	; 0x77d
 8017514:	4931      	ldr	r1, [pc, #196]	; (80175dc <tcp_parseopt+0xdc>)
 8017516:	4832      	ldr	r0, [pc, #200]	; (80175e0 <tcp_parseopt+0xe0>)
 8017518:	f005 fc96 	bl	801ce48 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801751c:	4b31      	ldr	r3, [pc, #196]	; (80175e4 <tcp_parseopt+0xe4>)
 801751e:	881b      	ldrh	r3, [r3, #0]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d055      	beq.n	80175d0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017524:	4b30      	ldr	r3, [pc, #192]	; (80175e8 <tcp_parseopt+0xe8>)
 8017526:	2200      	movs	r2, #0
 8017528:	801a      	strh	r2, [r3, #0]
 801752a:	e045      	b.n	80175b8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801752c:	f7ff ffb2 	bl	8017494 <tcp_get_next_optbyte>
 8017530:	4603      	mov	r3, r0
 8017532:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017534:	7bfb      	ldrb	r3, [r7, #15]
 8017536:	2b02      	cmp	r3, #2
 8017538:	d006      	beq.n	8017548 <tcp_parseopt+0x48>
 801753a:	2b02      	cmp	r3, #2
 801753c:	dc2b      	bgt.n	8017596 <tcp_parseopt+0x96>
 801753e:	2b00      	cmp	r3, #0
 8017540:	d041      	beq.n	80175c6 <tcp_parseopt+0xc6>
 8017542:	2b01      	cmp	r3, #1
 8017544:	d127      	bne.n	8017596 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017546:	e037      	b.n	80175b8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017548:	f7ff ffa4 	bl	8017494 <tcp_get_next_optbyte>
 801754c:	4603      	mov	r3, r0
 801754e:	2b04      	cmp	r3, #4
 8017550:	d13b      	bne.n	80175ca <tcp_parseopt+0xca>
 8017552:	4b25      	ldr	r3, [pc, #148]	; (80175e8 <tcp_parseopt+0xe8>)
 8017554:	881b      	ldrh	r3, [r3, #0]
 8017556:	3301      	adds	r3, #1
 8017558:	4a22      	ldr	r2, [pc, #136]	; (80175e4 <tcp_parseopt+0xe4>)
 801755a:	8812      	ldrh	r2, [r2, #0]
 801755c:	4293      	cmp	r3, r2
 801755e:	da34      	bge.n	80175ca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017560:	f7ff ff98 	bl	8017494 <tcp_get_next_optbyte>
 8017564:	4603      	mov	r3, r0
 8017566:	b29b      	uxth	r3, r3
 8017568:	021b      	lsls	r3, r3, #8
 801756a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801756c:	f7ff ff92 	bl	8017494 <tcp_get_next_optbyte>
 8017570:	4603      	mov	r3, r0
 8017572:	b29a      	uxth	r2, r3
 8017574:	89bb      	ldrh	r3, [r7, #12]
 8017576:	4313      	orrs	r3, r2
 8017578:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801757a:	89bb      	ldrh	r3, [r7, #12]
 801757c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017580:	d804      	bhi.n	801758c <tcp_parseopt+0x8c>
 8017582:	89bb      	ldrh	r3, [r7, #12]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d001      	beq.n	801758c <tcp_parseopt+0x8c>
 8017588:	89ba      	ldrh	r2, [r7, #12]
 801758a:	e001      	b.n	8017590 <tcp_parseopt+0x90>
 801758c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017594:	e010      	b.n	80175b8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017596:	f7ff ff7d 	bl	8017494 <tcp_get_next_optbyte>
 801759a:	4603      	mov	r3, r0
 801759c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801759e:	7afb      	ldrb	r3, [r7, #11]
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d914      	bls.n	80175ce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80175a4:	7afb      	ldrb	r3, [r7, #11]
 80175a6:	b29a      	uxth	r2, r3
 80175a8:	4b0f      	ldr	r3, [pc, #60]	; (80175e8 <tcp_parseopt+0xe8>)
 80175aa:	881b      	ldrh	r3, [r3, #0]
 80175ac:	4413      	add	r3, r2
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	3b02      	subs	r3, #2
 80175b2:	b29a      	uxth	r2, r3
 80175b4:	4b0c      	ldr	r3, [pc, #48]	; (80175e8 <tcp_parseopt+0xe8>)
 80175b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80175b8:	4b0b      	ldr	r3, [pc, #44]	; (80175e8 <tcp_parseopt+0xe8>)
 80175ba:	881a      	ldrh	r2, [r3, #0]
 80175bc:	4b09      	ldr	r3, [pc, #36]	; (80175e4 <tcp_parseopt+0xe4>)
 80175be:	881b      	ldrh	r3, [r3, #0]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d3b3      	bcc.n	801752c <tcp_parseopt+0x2c>
 80175c4:	e004      	b.n	80175d0 <tcp_parseopt+0xd0>
          return;
 80175c6:	bf00      	nop
 80175c8:	e002      	b.n	80175d0 <tcp_parseopt+0xd0>
            return;
 80175ca:	bf00      	nop
 80175cc:	e000      	b.n	80175d0 <tcp_parseopt+0xd0>
            return;
 80175ce:	bf00      	nop
      }
    }
  }
}
 80175d0:	3710      	adds	r7, #16
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}
 80175d6:	bf00      	nop
 80175d8:	0802019c 	.word	0x0802019c
 80175dc:	08020600 	.word	0x08020600
 80175e0:	080201e8 	.word	0x080201e8
 80175e4:	20006bf8 	.word	0x20006bf8
 80175e8:	20006c00 	.word	0x20006c00

080175ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80175ec:	b480      	push	{r7}
 80175ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80175f0:	4b05      	ldr	r3, [pc, #20]	; (8017608 <tcp_trigger_input_pcb_close+0x1c>)
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	f043 0310 	orr.w	r3, r3, #16
 80175f8:	b2da      	uxtb	r2, r3
 80175fa:	4b03      	ldr	r3, [pc, #12]	; (8017608 <tcp_trigger_input_pcb_close+0x1c>)
 80175fc:	701a      	strb	r2, [r3, #0]
}
 80175fe:	bf00      	nop
 8017600:	46bd      	mov	sp, r7
 8017602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017606:	4770      	bx	lr
 8017608:	20006c11 	.word	0x20006c11

0801760c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b084      	sub	sp, #16
 8017610:	af00      	add	r7, sp, #0
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d00a      	beq.n	8017634 <tcp_route+0x28>
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	7a1b      	ldrb	r3, [r3, #8]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d006      	beq.n	8017634 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	7a1b      	ldrb	r3, [r3, #8]
 801762a:	4618      	mov	r0, r3
 801762c:	f7fb f90c 	bl	8012848 <netif_get_by_index>
 8017630:	4603      	mov	r3, r0
 8017632:	e003      	b.n	801763c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f003 fe35 	bl	801b2a4 <ip4_route>
 801763a:	4603      	mov	r3, r0
  }
}
 801763c:	4618      	mov	r0, r3
 801763e:	3710      	adds	r7, #16
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017644:	b590      	push	{r4, r7, lr}
 8017646:	b087      	sub	sp, #28
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	603b      	str	r3, [r7, #0]
 8017650:	4613      	mov	r3, r2
 8017652:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d105      	bne.n	8017666 <tcp_create_segment+0x22>
 801765a:	4b44      	ldr	r3, [pc, #272]	; (801776c <tcp_create_segment+0x128>)
 801765c:	22a3      	movs	r2, #163	; 0xa3
 801765e:	4944      	ldr	r1, [pc, #272]	; (8017770 <tcp_create_segment+0x12c>)
 8017660:	4844      	ldr	r0, [pc, #272]	; (8017774 <tcp_create_segment+0x130>)
 8017662:	f005 fbf1 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d105      	bne.n	8017678 <tcp_create_segment+0x34>
 801766c:	4b3f      	ldr	r3, [pc, #252]	; (801776c <tcp_create_segment+0x128>)
 801766e:	22a4      	movs	r2, #164	; 0xa4
 8017670:	4941      	ldr	r1, [pc, #260]	; (8017778 <tcp_create_segment+0x134>)
 8017672:	4840      	ldr	r0, [pc, #256]	; (8017774 <tcp_create_segment+0x130>)
 8017674:	f005 fbe8 	bl	801ce48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801767c:	009b      	lsls	r3, r3, #2
 801767e:	b2db      	uxtb	r3, r3
 8017680:	f003 0304 	and.w	r3, r3, #4
 8017684:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017686:	2003      	movs	r0, #3
 8017688:	f7fa fdda 	bl	8012240 <memp_malloc>
 801768c:	6138      	str	r0, [r7, #16]
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d104      	bne.n	801769e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017694:	68b8      	ldr	r0, [r7, #8]
 8017696:	f7fb fc65 	bl	8012f64 <pbuf_free>
    return NULL;
 801769a:	2300      	movs	r3, #0
 801769c:	e061      	b.n	8017762 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80176a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80176a6:	693b      	ldr	r3, [r7, #16]
 80176a8:	2200      	movs	r2, #0
 80176aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80176ac:	693b      	ldr	r3, [r7, #16]
 80176ae:	68ba      	ldr	r2, [r7, #8]
 80176b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	891a      	ldrh	r2, [r3, #8]
 80176b6:	7dfb      	ldrb	r3, [r7, #23]
 80176b8:	b29b      	uxth	r3, r3
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d205      	bcs.n	80176ca <tcp_create_segment+0x86>
 80176be:	4b2b      	ldr	r3, [pc, #172]	; (801776c <tcp_create_segment+0x128>)
 80176c0:	22b0      	movs	r2, #176	; 0xb0
 80176c2:	492e      	ldr	r1, [pc, #184]	; (801777c <tcp_create_segment+0x138>)
 80176c4:	482b      	ldr	r0, [pc, #172]	; (8017774 <tcp_create_segment+0x130>)
 80176c6:	f005 fbbf 	bl	801ce48 <iprintf>
  seg->len = p->tot_len - optlen;
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	891a      	ldrh	r2, [r3, #8]
 80176ce:	7dfb      	ldrb	r3, [r7, #23]
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	1ad3      	subs	r3, r2, r3
 80176d4:	b29a      	uxth	r2, r3
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80176da:	2114      	movs	r1, #20
 80176dc:	68b8      	ldr	r0, [r7, #8]
 80176de:	f7fb fbab 	bl	8012e38 <pbuf_add_header>
 80176e2:	4603      	mov	r3, r0
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d004      	beq.n	80176f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80176e8:	6938      	ldr	r0, [r7, #16]
 80176ea:	f7fd f804 	bl	80146f6 <tcp_seg_free>
    return NULL;
 80176ee:	2300      	movs	r3, #0
 80176f0:	e037      	b.n	8017762 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80176f2:	693b      	ldr	r3, [r7, #16]
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	693b      	ldr	r3, [r7, #16]
 80176fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	8ada      	ldrh	r2, [r3, #22]
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	68dc      	ldr	r4, [r3, #12]
 8017704:	4610      	mov	r0, r2
 8017706:	f7fa f8e5 	bl	80118d4 <lwip_htons>
 801770a:	4603      	mov	r3, r0
 801770c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	8b1a      	ldrh	r2, [r3, #24]
 8017712:	693b      	ldr	r3, [r7, #16]
 8017714:	68dc      	ldr	r4, [r3, #12]
 8017716:	4610      	mov	r0, r2
 8017718:	f7fa f8dc 	bl	80118d4 <lwip_htons>
 801771c:	4603      	mov	r3, r0
 801771e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017720:	693b      	ldr	r3, [r7, #16]
 8017722:	68dc      	ldr	r4, [r3, #12]
 8017724:	6838      	ldr	r0, [r7, #0]
 8017726:	f7fa f8ea 	bl	80118fe <lwip_htonl>
 801772a:	4603      	mov	r3, r0
 801772c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801772e:	7dfb      	ldrb	r3, [r7, #23]
 8017730:	089b      	lsrs	r3, r3, #2
 8017732:	b2db      	uxtb	r3, r3
 8017734:	b29b      	uxth	r3, r3
 8017736:	3305      	adds	r3, #5
 8017738:	b29b      	uxth	r3, r3
 801773a:	031b      	lsls	r3, r3, #12
 801773c:	b29a      	uxth	r2, r3
 801773e:	79fb      	ldrb	r3, [r7, #7]
 8017740:	b29b      	uxth	r3, r3
 8017742:	4313      	orrs	r3, r2
 8017744:	b29a      	uxth	r2, r3
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	68dc      	ldr	r4, [r3, #12]
 801774a:	4610      	mov	r0, r2
 801774c:	f7fa f8c2 	bl	80118d4 <lwip_htons>
 8017750:	4603      	mov	r3, r0
 8017752:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	68db      	ldr	r3, [r3, #12]
 8017758:	2200      	movs	r2, #0
 801775a:	749a      	strb	r2, [r3, #18]
 801775c:	2200      	movs	r2, #0
 801775e:	74da      	strb	r2, [r3, #19]
  return seg;
 8017760:	693b      	ldr	r3, [r7, #16]
}
 8017762:	4618      	mov	r0, r3
 8017764:	371c      	adds	r7, #28
 8017766:	46bd      	mov	sp, r7
 8017768:	bd90      	pop	{r4, r7, pc}
 801776a:	bf00      	nop
 801776c:	0802061c 	.word	0x0802061c
 8017770:	08020650 	.word	0x08020650
 8017774:	08020670 	.word	0x08020670
 8017778:	08020698 	.word	0x08020698
 801777c:	080206bc 	.word	0x080206bc

08017780 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b086      	sub	sp, #24
 8017784:	af00      	add	r7, sp, #0
 8017786:	607b      	str	r3, [r7, #4]
 8017788:	4603      	mov	r3, r0
 801778a:	73fb      	strb	r3, [r7, #15]
 801778c:	460b      	mov	r3, r1
 801778e:	81bb      	strh	r3, [r7, #12]
 8017790:	4613      	mov	r3, r2
 8017792:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017794:	89bb      	ldrh	r3, [r7, #12]
 8017796:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d105      	bne.n	80177aa <tcp_pbuf_prealloc+0x2a>
 801779e:	4b30      	ldr	r3, [pc, #192]	; (8017860 <tcp_pbuf_prealloc+0xe0>)
 80177a0:	22e8      	movs	r2, #232	; 0xe8
 80177a2:	4930      	ldr	r1, [pc, #192]	; (8017864 <tcp_pbuf_prealloc+0xe4>)
 80177a4:	4830      	ldr	r0, [pc, #192]	; (8017868 <tcp_pbuf_prealloc+0xe8>)
 80177a6:	f005 fb4f 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80177aa:	6a3b      	ldr	r3, [r7, #32]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d105      	bne.n	80177bc <tcp_pbuf_prealloc+0x3c>
 80177b0:	4b2b      	ldr	r3, [pc, #172]	; (8017860 <tcp_pbuf_prealloc+0xe0>)
 80177b2:	22e9      	movs	r2, #233	; 0xe9
 80177b4:	492d      	ldr	r1, [pc, #180]	; (801786c <tcp_pbuf_prealloc+0xec>)
 80177b6:	482c      	ldr	r0, [pc, #176]	; (8017868 <tcp_pbuf_prealloc+0xe8>)
 80177b8:	f005 fb46 	bl	801ce48 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80177bc:	89ba      	ldrh	r2, [r7, #12]
 80177be:	897b      	ldrh	r3, [r7, #10]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d221      	bcs.n	8017808 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80177c8:	f003 0302 	and.w	r3, r3, #2
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d111      	bne.n	80177f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80177d0:	6a3b      	ldr	r3, [r7, #32]
 80177d2:	8b5b      	ldrh	r3, [r3, #26]
 80177d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d115      	bne.n	8017808 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80177dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d007      	beq.n	80177f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80177e4:	6a3b      	ldr	r3, [r7, #32]
 80177e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d103      	bne.n	80177f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80177ec:	6a3b      	ldr	r3, [r7, #32]
 80177ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d009      	beq.n	8017808 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80177f4:	89bb      	ldrh	r3, [r7, #12]
 80177f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80177fa:	f023 0203 	bic.w	r2, r3, #3
 80177fe:	897b      	ldrh	r3, [r7, #10]
 8017800:	4293      	cmp	r3, r2
 8017802:	bf28      	it	cs
 8017804:	4613      	movcs	r3, r2
 8017806:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017808:	8af9      	ldrh	r1, [r7, #22]
 801780a:	7bfb      	ldrb	r3, [r7, #15]
 801780c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017810:	4618      	mov	r0, r3
 8017812:	f7fb f8c3 	bl	801299c <pbuf_alloc>
 8017816:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d101      	bne.n	8017822 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801781e:	2300      	movs	r3, #0
 8017820:	e019      	b.n	8017856 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d006      	beq.n	8017838 <tcp_pbuf_prealloc+0xb8>
 801782a:	4b0d      	ldr	r3, [pc, #52]	; (8017860 <tcp_pbuf_prealloc+0xe0>)
 801782c:	f240 120b 	movw	r2, #267	; 0x10b
 8017830:	490f      	ldr	r1, [pc, #60]	; (8017870 <tcp_pbuf_prealloc+0xf0>)
 8017832:	480d      	ldr	r0, [pc, #52]	; (8017868 <tcp_pbuf_prealloc+0xe8>)
 8017834:	f005 fb08 	bl	801ce48 <iprintf>
  *oversize = p->len - length;
 8017838:	693b      	ldr	r3, [r7, #16]
 801783a:	895a      	ldrh	r2, [r3, #10]
 801783c:	89bb      	ldrh	r3, [r7, #12]
 801783e:	1ad3      	subs	r3, r2, r3
 8017840:	b29a      	uxth	r2, r3
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	89ba      	ldrh	r2, [r7, #12]
 801784a:	811a      	strh	r2, [r3, #8]
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	891a      	ldrh	r2, [r3, #8]
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	815a      	strh	r2, [r3, #10]
  return p;
 8017854:	693b      	ldr	r3, [r7, #16]
}
 8017856:	4618      	mov	r0, r3
 8017858:	3718      	adds	r7, #24
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
 801785e:	bf00      	nop
 8017860:	0802061c 	.word	0x0802061c
 8017864:	080206d4 	.word	0x080206d4
 8017868:	08020670 	.word	0x08020670
 801786c:	080206f8 	.word	0x080206f8
 8017870:	08020718 	.word	0x08020718

08017874 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	460b      	mov	r3, r1
 801787e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d106      	bne.n	8017894 <tcp_write_checks+0x20>
 8017886:	4b33      	ldr	r3, [pc, #204]	; (8017954 <tcp_write_checks+0xe0>)
 8017888:	f240 1233 	movw	r2, #307	; 0x133
 801788c:	4932      	ldr	r1, [pc, #200]	; (8017958 <tcp_write_checks+0xe4>)
 801788e:	4833      	ldr	r0, [pc, #204]	; (801795c <tcp_write_checks+0xe8>)
 8017890:	f005 fada 	bl	801ce48 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	7d1b      	ldrb	r3, [r3, #20]
 8017898:	2b04      	cmp	r3, #4
 801789a:	d00e      	beq.n	80178ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80178a0:	2b07      	cmp	r3, #7
 80178a2:	d00a      	beq.n	80178ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80178a8:	2b02      	cmp	r3, #2
 80178aa:	d006      	beq.n	80178ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80178b0:	2b03      	cmp	r3, #3
 80178b2:	d002      	beq.n	80178ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80178b4:	f06f 030a 	mvn.w	r3, #10
 80178b8:	e048      	b.n	801794c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80178ba:	887b      	ldrh	r3, [r7, #2]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d101      	bne.n	80178c4 <tcp_write_checks+0x50>
    return ERR_OK;
 80178c0:	2300      	movs	r3, #0
 80178c2:	e043      	b.n	801794c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80178ca:	887a      	ldrh	r2, [r7, #2]
 80178cc:	429a      	cmp	r2, r3
 80178ce:	d909      	bls.n	80178e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	8b5b      	ldrh	r3, [r3, #26]
 80178d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178d8:	b29a      	uxth	r2, r3
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80178de:	f04f 33ff 	mov.w	r3, #4294967295
 80178e2:	e033      	b.n	801794c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178ea:	2b08      	cmp	r3, #8
 80178ec:	d909      	bls.n	8017902 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	8b5b      	ldrh	r3, [r3, #26]
 80178f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178f6:	b29a      	uxth	r2, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80178fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017900:	e024      	b.n	801794c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017908:	2b00      	cmp	r3, #0
 801790a:	d00f      	beq.n	801792c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017910:	2b00      	cmp	r3, #0
 8017912:	d11a      	bne.n	801794a <tcp_write_checks+0xd6>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017918:	2b00      	cmp	r3, #0
 801791a:	d116      	bne.n	801794a <tcp_write_checks+0xd6>
 801791c:	4b0d      	ldr	r3, [pc, #52]	; (8017954 <tcp_write_checks+0xe0>)
 801791e:	f240 1255 	movw	r2, #341	; 0x155
 8017922:	490f      	ldr	r1, [pc, #60]	; (8017960 <tcp_write_checks+0xec>)
 8017924:	480d      	ldr	r0, [pc, #52]	; (801795c <tcp_write_checks+0xe8>)
 8017926:	f005 fa8f 	bl	801ce48 <iprintf>
 801792a:	e00e      	b.n	801794a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017930:	2b00      	cmp	r3, #0
 8017932:	d103      	bne.n	801793c <tcp_write_checks+0xc8>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017938:	2b00      	cmp	r3, #0
 801793a:	d006      	beq.n	801794a <tcp_write_checks+0xd6>
 801793c:	4b05      	ldr	r3, [pc, #20]	; (8017954 <tcp_write_checks+0xe0>)
 801793e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017942:	4908      	ldr	r1, [pc, #32]	; (8017964 <tcp_write_checks+0xf0>)
 8017944:	4805      	ldr	r0, [pc, #20]	; (801795c <tcp_write_checks+0xe8>)
 8017946:	f005 fa7f 	bl	801ce48 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801794a:	2300      	movs	r3, #0
}
 801794c:	4618      	mov	r0, r3
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}
 8017954:	0802061c 	.word	0x0802061c
 8017958:	0802072c 	.word	0x0802072c
 801795c:	08020670 	.word	0x08020670
 8017960:	0802074c 	.word	0x0802074c
 8017964:	08020788 	.word	0x08020788

08017968 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017968:	b590      	push	{r4, r7, lr}
 801796a:	b09b      	sub	sp, #108	; 0x6c
 801796c:	af04      	add	r7, sp, #16
 801796e:	60f8      	str	r0, [r7, #12]
 8017970:	60b9      	str	r1, [r7, #8]
 8017972:	4611      	mov	r1, r2
 8017974:	461a      	mov	r2, r3
 8017976:	460b      	mov	r3, r1
 8017978:	80fb      	strh	r3, [r7, #6]
 801797a:	4613      	mov	r3, r2
 801797c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801797e:	2300      	movs	r3, #0
 8017980:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017982:	2300      	movs	r3, #0
 8017984:	653b      	str	r3, [r7, #80]	; 0x50
 8017986:	2300      	movs	r3, #0
 8017988:	64fb      	str	r3, [r7, #76]	; 0x4c
 801798a:	2300      	movs	r3, #0
 801798c:	64bb      	str	r3, [r7, #72]	; 0x48
 801798e:	2300      	movs	r3, #0
 8017990:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017992:	2300      	movs	r3, #0
 8017994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017998:	2300      	movs	r3, #0
 801799a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801799e:	2300      	movs	r3, #0
 80179a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80179a2:	2300      	movs	r3, #0
 80179a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80179a6:	2300      	movs	r3, #0
 80179a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d109      	bne.n	80179c4 <tcp_write+0x5c>
 80179b0:	4ba4      	ldr	r3, [pc, #656]	; (8017c44 <tcp_write+0x2dc>)
 80179b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80179b6:	49a4      	ldr	r1, [pc, #656]	; (8017c48 <tcp_write+0x2e0>)
 80179b8:	48a4      	ldr	r0, [pc, #656]	; (8017c4c <tcp_write+0x2e4>)
 80179ba:	f005 fa45 	bl	801ce48 <iprintf>
 80179be:	f06f 030f 	mvn.w	r3, #15
 80179c2:	e32a      	b.n	801801a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80179ca:	085b      	lsrs	r3, r3, #1
 80179cc:	b29a      	uxth	r2, r3
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80179d2:	4293      	cmp	r3, r2
 80179d4:	bf28      	it	cs
 80179d6:	4613      	movcs	r3, r2
 80179d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80179da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d102      	bne.n	80179e6 <tcp_write+0x7e>
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80179e4:	e000      	b.n	80179e8 <tcp_write+0x80>
 80179e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d109      	bne.n	8017a04 <tcp_write+0x9c>
 80179f0:	4b94      	ldr	r3, [pc, #592]	; (8017c44 <tcp_write+0x2dc>)
 80179f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80179f6:	4996      	ldr	r1, [pc, #600]	; (8017c50 <tcp_write+0x2e8>)
 80179f8:	4894      	ldr	r0, [pc, #592]	; (8017c4c <tcp_write+0x2e4>)
 80179fa:	f005 fa25 	bl	801ce48 <iprintf>
 80179fe:	f06f 030f 	mvn.w	r3, #15
 8017a02:	e30a      	b.n	801801a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017a04:	88fb      	ldrh	r3, [r7, #6]
 8017a06:	4619      	mov	r1, r3
 8017a08:	68f8      	ldr	r0, [r7, #12]
 8017a0a:	f7ff ff33 	bl	8017874 <tcp_write_checks>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017a14:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d002      	beq.n	8017a22 <tcp_write+0xba>
    return err;
 8017a1c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017a20:	e2fb      	b.n	801801a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	f000 80f6 	beq.w	8017c28 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a40:	653b      	str	r3, [r7, #80]	; 0x50
 8017a42:	e002      	b.n	8017a4a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d1f8      	bne.n	8017a44 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a54:	7a9b      	ldrb	r3, [r3, #10]
 8017a56:	009b      	lsls	r3, r3, #2
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	f003 0304 	and.w	r3, r3, #4
 8017a5e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017a60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a64:	891b      	ldrh	r3, [r3, #8]
 8017a66:	4619      	mov	r1, r3
 8017a68:	8c3b      	ldrh	r3, [r7, #32]
 8017a6a:	440b      	add	r3, r1
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	da06      	bge.n	8017a7e <tcp_write+0x116>
 8017a70:	4b74      	ldr	r3, [pc, #464]	; (8017c44 <tcp_write+0x2dc>)
 8017a72:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017a76:	4977      	ldr	r1, [pc, #476]	; (8017c54 <tcp_write+0x2ec>)
 8017a78:	4874      	ldr	r0, [pc, #464]	; (8017c4c <tcp_write+0x2e4>)
 8017a7a:	f005 f9e5 	bl	801ce48 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a80:	891a      	ldrh	r2, [r3, #8]
 8017a82:	8c3b      	ldrh	r3, [r7, #32]
 8017a84:	4413      	add	r3, r2
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017a94:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017a96:	8a7b      	ldrh	r3, [r7, #18]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d026      	beq.n	8017aea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017a9c:	8a7b      	ldrh	r3, [r7, #18]
 8017a9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	d206      	bcs.n	8017ab2 <tcp_write+0x14a>
 8017aa4:	4b67      	ldr	r3, [pc, #412]	; (8017c44 <tcp_write+0x2dc>)
 8017aa6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017aaa:	496b      	ldr	r1, [pc, #428]	; (8017c58 <tcp_write+0x2f0>)
 8017aac:	4867      	ldr	r0, [pc, #412]	; (8017c4c <tcp_write+0x2e4>)
 8017aae:	f005 f9cb 	bl	801ce48 <iprintf>
      seg = last_unsent;
 8017ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017ab6:	8a7b      	ldrh	r3, [r7, #18]
 8017ab8:	88fa      	ldrh	r2, [r7, #6]
 8017aba:	4293      	cmp	r3, r2
 8017abc:	bf28      	it	cs
 8017abe:	4613      	movcs	r3, r2
 8017ac0:	b29b      	uxth	r3, r3
 8017ac2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ac4:	4293      	cmp	r3, r2
 8017ac6:	bf28      	it	cs
 8017ac8:	4613      	movcs	r3, r2
 8017aca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ad0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ad2:	4413      	add	r3, r2
 8017ad4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017ad8:	8a7a      	ldrh	r2, [r7, #18]
 8017ada:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017adc:	1ad3      	subs	r3, r2, r3
 8017ade:	b29b      	uxth	r3, r3
 8017ae0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017ae2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ae4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ae6:	1ad3      	subs	r3, r2, r3
 8017ae8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017aea:	8a7b      	ldrh	r3, [r7, #18]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d00b      	beq.n	8017b08 <tcp_write+0x1a0>
 8017af0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017af4:	88fb      	ldrh	r3, [r7, #6]
 8017af6:	429a      	cmp	r2, r3
 8017af8:	d006      	beq.n	8017b08 <tcp_write+0x1a0>
 8017afa:	4b52      	ldr	r3, [pc, #328]	; (8017c44 <tcp_write+0x2dc>)
 8017afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b00:	4956      	ldr	r1, [pc, #344]	; (8017c5c <tcp_write+0x2f4>)
 8017b02:	4852      	ldr	r0, [pc, #328]	; (8017c4c <tcp_write+0x2e4>)
 8017b04:	f005 f9a0 	bl	801ce48 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017b08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b0c:	88fb      	ldrh	r3, [r7, #6]
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	f080 8167 	bcs.w	8017de2 <tcp_write+0x47a>
 8017b14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	f000 8163 	beq.w	8017de2 <tcp_write+0x47a>
 8017b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b1e:	891b      	ldrh	r3, [r3, #8]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 815e 	beq.w	8017de2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017b26:	88fa      	ldrh	r2, [r7, #6]
 8017b28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b2c:	1ad2      	subs	r2, r2, r3
 8017b2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b30:	4293      	cmp	r3, r2
 8017b32:	bfa8      	it	ge
 8017b34:	4613      	movge	r3, r2
 8017b36:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b3a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017b3c:	797b      	ldrb	r3, [r7, #5]
 8017b3e:	f003 0301 	and.w	r3, r3, #1
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d027      	beq.n	8017b96 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017b46:	f107 0012 	add.w	r0, r7, #18
 8017b4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017b4c:	8bf9      	ldrh	r1, [r7, #30]
 8017b4e:	2301      	movs	r3, #1
 8017b50:	9302      	str	r3, [sp, #8]
 8017b52:	797b      	ldrb	r3, [r7, #5]
 8017b54:	9301      	str	r3, [sp, #4]
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	9300      	str	r3, [sp, #0]
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	f7ff fe0f 	bl	8017780 <tcp_pbuf_prealloc>
 8017b62:	6578      	str	r0, [r7, #84]	; 0x54
 8017b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	f000 8225 	beq.w	8017fb6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b6e:	6858      	ldr	r0, [r3, #4]
 8017b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b74:	68ba      	ldr	r2, [r7, #8]
 8017b76:	4413      	add	r3, r2
 8017b78:	8bfa      	ldrh	r2, [r7, #30]
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	f005 f88a 	bl	801cc94 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017b80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017b82:	f7fb fa7d 	bl	8013080 <pbuf_clen>
 8017b86:	4603      	mov	r3, r0
 8017b88:	461a      	mov	r2, r3
 8017b8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b8e:	4413      	add	r3, r2
 8017b90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017b94:	e041      	b.n	8017c1a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8017b9c:	e002      	b.n	8017ba4 <tcp_write+0x23c>
 8017b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8017ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d1f8      	bne.n	8017b9e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bae:	7b1b      	ldrb	r3, [r3, #12]
 8017bb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d115      	bne.n	8017be4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bba:	685b      	ldr	r3, [r3, #4]
 8017bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bbe:	8952      	ldrh	r2, [r2, #10]
 8017bc0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017bc2:	68ba      	ldr	r2, [r7, #8]
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	d10d      	bne.n	8017be4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017bc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d006      	beq.n	8017bde <tcp_write+0x276>
 8017bd0:	4b1c      	ldr	r3, [pc, #112]	; (8017c44 <tcp_write+0x2dc>)
 8017bd2:	f240 2231 	movw	r2, #561	; 0x231
 8017bd6:	4922      	ldr	r1, [pc, #136]	; (8017c60 <tcp_write+0x2f8>)
 8017bd8:	481c      	ldr	r0, [pc, #112]	; (8017c4c <tcp_write+0x2e4>)
 8017bda:	f005 f935 	bl	801ce48 <iprintf>
          extendlen = seglen;
 8017bde:	8bfb      	ldrh	r3, [r7, #30]
 8017be0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017be2:	e01a      	b.n	8017c1a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017be4:	8bfb      	ldrh	r3, [r7, #30]
 8017be6:	2201      	movs	r2, #1
 8017be8:	4619      	mov	r1, r3
 8017bea:	2000      	movs	r0, #0
 8017bec:	f7fa fed6 	bl	801299c <pbuf_alloc>
 8017bf0:	6578      	str	r0, [r7, #84]	; 0x54
 8017bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	f000 81e0 	beq.w	8017fba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017bfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bfe:	68ba      	ldr	r2, [r7, #8]
 8017c00:	441a      	add	r2, r3
 8017c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c04:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017c06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017c08:	f7fb fa3a 	bl	8013080 <pbuf_clen>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	461a      	mov	r2, r3
 8017c10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017c14:	4413      	add	r3, r2
 8017c16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017c1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c1e:	8bfb      	ldrh	r3, [r7, #30]
 8017c20:	4413      	add	r3, r2
 8017c22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017c26:	e0dc      	b.n	8017de2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	f000 80d7 	beq.w	8017de2 <tcp_write+0x47a>
 8017c34:	4b03      	ldr	r3, [pc, #12]	; (8017c44 <tcp_write+0x2dc>)
 8017c36:	f240 224a 	movw	r2, #586	; 0x24a
 8017c3a:	490a      	ldr	r1, [pc, #40]	; (8017c64 <tcp_write+0x2fc>)
 8017c3c:	4803      	ldr	r0, [pc, #12]	; (8017c4c <tcp_write+0x2e4>)
 8017c3e:	f005 f903 	bl	801ce48 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017c42:	e0ce      	b.n	8017de2 <tcp_write+0x47a>
 8017c44:	0802061c 	.word	0x0802061c
 8017c48:	080207bc 	.word	0x080207bc
 8017c4c:	08020670 	.word	0x08020670
 8017c50:	080207d4 	.word	0x080207d4
 8017c54:	08020808 	.word	0x08020808
 8017c58:	08020820 	.word	0x08020820
 8017c5c:	08020840 	.word	0x08020840
 8017c60:	08020860 	.word	0x08020860
 8017c64:	0802088c 	.word	0x0802088c
    struct pbuf *p;
    u16_t left = len - pos;
 8017c68:	88fa      	ldrh	r2, [r7, #6]
 8017c6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c6e:	1ad3      	subs	r3, r2, r3
 8017c70:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017c72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017c7e:	8b7a      	ldrh	r2, [r7, #26]
 8017c80:	8bbb      	ldrh	r3, [r7, #28]
 8017c82:	4293      	cmp	r3, r2
 8017c84:	bf28      	it	cs
 8017c86:	4613      	movcs	r3, r2
 8017c88:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017c8a:	797b      	ldrb	r3, [r7, #5]
 8017c8c:	f003 0301 	and.w	r3, r3, #1
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d036      	beq.n	8017d02 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017c94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c98:	b29a      	uxth	r2, r3
 8017c9a:	8b3b      	ldrh	r3, [r7, #24]
 8017c9c:	4413      	add	r3, r2
 8017c9e:	b299      	uxth	r1, r3
 8017ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	bf0c      	ite	eq
 8017ca6:	2301      	moveq	r3, #1
 8017ca8:	2300      	movne	r3, #0
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	f107 0012 	add.w	r0, r7, #18
 8017cb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017cb2:	9302      	str	r3, [sp, #8]
 8017cb4:	797b      	ldrb	r3, [r7, #5]
 8017cb6:	9301      	str	r3, [sp, #4]
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	9300      	str	r3, [sp, #0]
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	2036      	movs	r0, #54	; 0x36
 8017cc0:	f7ff fd5e 	bl	8017780 <tcp_pbuf_prealloc>
 8017cc4:	6338      	str	r0, [r7, #48]	; 0x30
 8017cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	f000 8178 	beq.w	8017fbe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd0:	895b      	ldrh	r3, [r3, #10]
 8017cd2:	8b3a      	ldrh	r2, [r7, #24]
 8017cd4:	429a      	cmp	r2, r3
 8017cd6:	d906      	bls.n	8017ce6 <tcp_write+0x37e>
 8017cd8:	4b8c      	ldr	r3, [pc, #560]	; (8017f0c <tcp_write+0x5a4>)
 8017cda:	f240 2266 	movw	r2, #614	; 0x266
 8017cde:	498c      	ldr	r1, [pc, #560]	; (8017f10 <tcp_write+0x5a8>)
 8017ce0:	488c      	ldr	r0, [pc, #560]	; (8017f14 <tcp_write+0x5ac>)
 8017ce2:	f005 f8b1 	bl	801ce48 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce8:	685a      	ldr	r2, [r3, #4]
 8017cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017cee:	18d0      	adds	r0, r2, r3
 8017cf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017cf4:	68ba      	ldr	r2, [r7, #8]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	8b3a      	ldrh	r2, [r7, #24]
 8017cfa:	4619      	mov	r1, r3
 8017cfc:	f004 ffca 	bl	801cc94 <memcpy>
 8017d00:	e02f      	b.n	8017d62 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017d02:	8a7b      	ldrh	r3, [r7, #18]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d006      	beq.n	8017d16 <tcp_write+0x3ae>
 8017d08:	4b80      	ldr	r3, [pc, #512]	; (8017f0c <tcp_write+0x5a4>)
 8017d0a:	f240 2271 	movw	r2, #625	; 0x271
 8017d0e:	4982      	ldr	r1, [pc, #520]	; (8017f18 <tcp_write+0x5b0>)
 8017d10:	4880      	ldr	r0, [pc, #512]	; (8017f14 <tcp_write+0x5ac>)
 8017d12:	f005 f899 	bl	801ce48 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017d16:	8b3b      	ldrh	r3, [r7, #24]
 8017d18:	2201      	movs	r2, #1
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	2036      	movs	r0, #54	; 0x36
 8017d1e:	f7fa fe3d 	bl	801299c <pbuf_alloc>
 8017d22:	6178      	str	r0, [r7, #20]
 8017d24:	697b      	ldr	r3, [r7, #20]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	f000 814b 	beq.w	8017fc2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017d2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d30:	68ba      	ldr	r2, [r7, #8]
 8017d32:	441a      	add	r2, r3
 8017d34:	697b      	ldr	r3, [r7, #20]
 8017d36:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d3c:	b29b      	uxth	r3, r3
 8017d3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d42:	4619      	mov	r1, r3
 8017d44:	2036      	movs	r0, #54	; 0x36
 8017d46:	f7fa fe29 	bl	801299c <pbuf_alloc>
 8017d4a:	6338      	str	r0, [r7, #48]	; 0x30
 8017d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d103      	bne.n	8017d5a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017d52:	6978      	ldr	r0, [r7, #20]
 8017d54:	f7fb f906 	bl	8012f64 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017d58:	e136      	b.n	8017fc8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017d5a:	6979      	ldr	r1, [r7, #20]
 8017d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d5e:	f7fb f9cf 	bl	8013100 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d64:	f7fb f98c 	bl	8013080 <pbuf_clen>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d70:	4413      	add	r3, r2
 8017d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017d76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d7a:	2b09      	cmp	r3, #9
 8017d7c:	d903      	bls.n	8017d86 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d80:	f7fb f8f0 	bl	8012f64 <pbuf_free>
      goto memerr;
 8017d84:	e120      	b.n	8017fc8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017d8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d8e:	441a      	add	r2, r3
 8017d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d94:	9300      	str	r3, [sp, #0]
 8017d96:	4613      	mov	r3, r2
 8017d98:	2200      	movs	r2, #0
 8017d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017d9c:	68f8      	ldr	r0, [r7, #12]
 8017d9e:	f7ff fc51 	bl	8017644 <tcp_create_segment>
 8017da2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	f000 810d 	beq.w	8017fc6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d102      	bne.n	8017db8 <tcp_write+0x450>
      queue = seg;
 8017db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017db4:	647b      	str	r3, [r7, #68]	; 0x44
 8017db6:	e00c      	b.n	8017dd2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d106      	bne.n	8017dcc <tcp_write+0x464>
 8017dbe:	4b53      	ldr	r3, [pc, #332]	; (8017f0c <tcp_write+0x5a4>)
 8017dc0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017dc4:	4955      	ldr	r1, [pc, #340]	; (8017f1c <tcp_write+0x5b4>)
 8017dc6:	4853      	ldr	r0, [pc, #332]	; (8017f14 <tcp_write+0x5ac>)
 8017dc8:	f005 f83e 	bl	801ce48 <iprintf>
      prev_seg->next = seg;
 8017dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017dd0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017dd4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017dd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017dda:	8b3b      	ldrh	r3, [r7, #24]
 8017ddc:	4413      	add	r3, r2
 8017dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017de2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017de6:	88fb      	ldrh	r3, [r7, #6]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	f4ff af3d 	bcc.w	8017c68 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017dee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d02c      	beq.n	8017e4e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017df6:	685b      	ldr	r3, [r3, #4]
 8017df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017dfa:	e01e      	b.n	8017e3a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dfe:	891a      	ldrh	r2, [r3, #8]
 8017e00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e02:	4413      	add	r3, r2
 8017e04:	b29a      	uxth	r2, r3
 8017e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e08:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d110      	bne.n	8017e34 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e18:	8952      	ldrh	r2, [r2, #10]
 8017e1a:	4413      	add	r3, r2
 8017e1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017e1e:	68b9      	ldr	r1, [r7, #8]
 8017e20:	4618      	mov	r0, r3
 8017e22:	f004 ff37 	bl	801cc94 <memcpy>
        p->len += oversize_used;
 8017e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e28:	895a      	ldrh	r2, [r3, #10]
 8017e2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e2c:	4413      	add	r3, r2
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e32:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d1dd      	bne.n	8017dfc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e42:	891a      	ldrh	r2, [r3, #8]
 8017e44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e46:	4413      	add	r3, r2
 8017e48:	b29a      	uxth	r2, r3
 8017e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e4c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017e4e:	8a7a      	ldrh	r2, [r7, #18]
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d018      	beq.n	8017e8e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d106      	bne.n	8017e70 <tcp_write+0x508>
 8017e62:	4b2a      	ldr	r3, [pc, #168]	; (8017f0c <tcp_write+0x5a4>)
 8017e64:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017e68:	492d      	ldr	r1, [pc, #180]	; (8017f20 <tcp_write+0x5b8>)
 8017e6a:	482a      	ldr	r0, [pc, #168]	; (8017f14 <tcp_write+0x5ac>)
 8017e6c:	f004 ffec 	bl	801ce48 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e72:	685b      	ldr	r3, [r3, #4]
 8017e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7fb f942 	bl	8013100 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e7e:	891a      	ldrh	r2, [r3, #8]
 8017e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e82:	891b      	ldrh	r3, [r3, #8]
 8017e84:	4413      	add	r3, r2
 8017e86:	b29a      	uxth	r2, r3
 8017e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e8a:	811a      	strh	r2, [r3, #8]
 8017e8c:	e037      	b.n	8017efe <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017e8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d034      	beq.n	8017efe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d003      	beq.n	8017ea2 <tcp_write+0x53a>
 8017e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e9c:	685b      	ldr	r3, [r3, #4]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d106      	bne.n	8017eb0 <tcp_write+0x548>
 8017ea2:	4b1a      	ldr	r3, [pc, #104]	; (8017f0c <tcp_write+0x5a4>)
 8017ea4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017ea8:	491e      	ldr	r1, [pc, #120]	; (8017f24 <tcp_write+0x5bc>)
 8017eaa:	481a      	ldr	r0, [pc, #104]	; (8017f14 <tcp_write+0x5ac>)
 8017eac:	f004 ffcc 	bl	801ce48 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017eb6:	e009      	b.n	8017ecc <tcp_write+0x564>
      p->tot_len += extendlen;
 8017eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eba:	891a      	ldrh	r2, [r3, #8]
 8017ebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ebe:	4413      	add	r3, r2
 8017ec0:	b29a      	uxth	r2, r3
 8017ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d1f1      	bne.n	8017eb8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed6:	891a      	ldrh	r2, [r3, #8]
 8017ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017eda:	4413      	add	r3, r2
 8017edc:	b29a      	uxth	r2, r3
 8017ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	895a      	ldrh	r2, [r3, #10]
 8017ee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ee8:	4413      	add	r3, r2
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ef2:	891a      	ldrh	r2, [r3, #8]
 8017ef4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ef6:	4413      	add	r3, r2
 8017ef8:	b29a      	uxth	r2, r3
 8017efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017efc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d111      	bne.n	8017f28 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f08:	66da      	str	r2, [r3, #108]	; 0x6c
 8017f0a:	e010      	b.n	8017f2e <tcp_write+0x5c6>
 8017f0c:	0802061c 	.word	0x0802061c
 8017f10:	080208bc 	.word	0x080208bc
 8017f14:	08020670 	.word	0x08020670
 8017f18:	080208fc 	.word	0x080208fc
 8017f1c:	0802090c 	.word	0x0802090c
 8017f20:	08020920 	.word	0x08020920
 8017f24:	08020958 	.word	0x08020958
  } else {
    last_unsent->next = queue;
 8017f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f2c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017f32:	88fb      	ldrh	r3, [r7, #6]
 8017f34:	441a      	add	r2, r3
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017f40:	88fb      	ldrh	r3, [r7, #6]
 8017f42:	1ad3      	subs	r3, r2, r3
 8017f44:	b29a      	uxth	r2, r3
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017f52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d00e      	beq.n	8017f7e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d10a      	bne.n	8017f7e <tcp_write+0x616>
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d106      	bne.n	8017f7e <tcp_write+0x616>
 8017f70:	4b2c      	ldr	r3, [pc, #176]	; (8018024 <tcp_write+0x6bc>)
 8017f72:	f240 3212 	movw	r2, #786	; 0x312
 8017f76:	492c      	ldr	r1, [pc, #176]	; (8018028 <tcp_write+0x6c0>)
 8017f78:	482c      	ldr	r0, [pc, #176]	; (801802c <tcp_write+0x6c4>)
 8017f7a:	f004 ff65 	bl	801ce48 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d016      	beq.n	8017fb2 <tcp_write+0x64a>
 8017f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f86:	68db      	ldr	r3, [r3, #12]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d012      	beq.n	8017fb2 <tcp_write+0x64a>
 8017f8c:	797b      	ldrb	r3, [r7, #5]
 8017f8e:	f003 0302 	and.w	r3, r3, #2
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d10d      	bne.n	8017fb2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f98:	68db      	ldr	r3, [r3, #12]
 8017f9a:	899b      	ldrh	r3, [r3, #12]
 8017f9c:	b29c      	uxth	r4, r3
 8017f9e:	2008      	movs	r0, #8
 8017fa0:	f7f9 fc98 	bl	80118d4 <lwip_htons>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017faa:	68db      	ldr	r3, [r3, #12]
 8017fac:	4322      	orrs	r2, r4
 8017fae:	b292      	uxth	r2, r2
 8017fb0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e031      	b.n	801801a <tcp_write+0x6b2>
          goto memerr;
 8017fb6:	bf00      	nop
 8017fb8:	e006      	b.n	8017fc8 <tcp_write+0x660>
            goto memerr;
 8017fba:	bf00      	nop
 8017fbc:	e004      	b.n	8017fc8 <tcp_write+0x660>
        goto memerr;
 8017fbe:	bf00      	nop
 8017fc0:	e002      	b.n	8017fc8 <tcp_write+0x660>
        goto memerr;
 8017fc2:	bf00      	nop
 8017fc4:	e000      	b.n	8017fc8 <tcp_write+0x660>
      goto memerr;
 8017fc6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	8b5b      	ldrh	r3, [r3, #26]
 8017fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fd0:	b29a      	uxth	r2, r3
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d002      	beq.n	8017fe2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017fdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017fde:	f7fa ffc1 	bl	8012f64 <pbuf_free>
  }
  if (queue != NULL) {
 8017fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d002      	beq.n	8017fee <tcp_write+0x686>
    tcp_segs_free(queue);
 8017fe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017fea:	f7fc fb6f 	bl	80146cc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d00e      	beq.n	8018016 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d10a      	bne.n	8018016 <tcp_write+0x6ae>
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018004:	2b00      	cmp	r3, #0
 8018006:	d106      	bne.n	8018016 <tcp_write+0x6ae>
 8018008:	4b06      	ldr	r3, [pc, #24]	; (8018024 <tcp_write+0x6bc>)
 801800a:	f240 3227 	movw	r2, #807	; 0x327
 801800e:	4906      	ldr	r1, [pc, #24]	; (8018028 <tcp_write+0x6c0>)
 8018010:	4806      	ldr	r0, [pc, #24]	; (801802c <tcp_write+0x6c4>)
 8018012:	f004 ff19 	bl	801ce48 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018016:	f04f 33ff 	mov.w	r3, #4294967295
}
 801801a:	4618      	mov	r0, r3
 801801c:	375c      	adds	r7, #92	; 0x5c
 801801e:	46bd      	mov	sp, r7
 8018020:	bd90      	pop	{r4, r7, pc}
 8018022:	bf00      	nop
 8018024:	0802061c 	.word	0x0802061c
 8018028:	08020990 	.word	0x08020990
 801802c:	08020670 	.word	0x08020670

08018030 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018030:	b590      	push	{r4, r7, lr}
 8018032:	b08b      	sub	sp, #44	; 0x2c
 8018034:	af02      	add	r7, sp, #8
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	460b      	mov	r3, r1
 801803a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801803c:	2300      	movs	r3, #0
 801803e:	61fb      	str	r3, [r7, #28]
 8018040:	2300      	movs	r3, #0
 8018042:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018044:	2300      	movs	r3, #0
 8018046:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d106      	bne.n	801805c <tcp_split_unsent_seg+0x2c>
 801804e:	4b95      	ldr	r3, [pc, #596]	; (80182a4 <tcp_split_unsent_seg+0x274>)
 8018050:	f240 324b 	movw	r2, #843	; 0x34b
 8018054:	4994      	ldr	r1, [pc, #592]	; (80182a8 <tcp_split_unsent_seg+0x278>)
 8018056:	4895      	ldr	r0, [pc, #596]	; (80182ac <tcp_split_unsent_seg+0x27c>)
 8018058:	f004 fef6 	bl	801ce48 <iprintf>

  useg = pcb->unsent;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018060:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018062:	697b      	ldr	r3, [r7, #20]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d102      	bne.n	801806e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018068:	f04f 33ff 	mov.w	r3, #4294967295
 801806c:	e116      	b.n	801829c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801806e:	887b      	ldrh	r3, [r7, #2]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d109      	bne.n	8018088 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018074:	4b8b      	ldr	r3, [pc, #556]	; (80182a4 <tcp_split_unsent_seg+0x274>)
 8018076:	f240 3253 	movw	r2, #851	; 0x353
 801807a:	498d      	ldr	r1, [pc, #564]	; (80182b0 <tcp_split_unsent_seg+0x280>)
 801807c:	488b      	ldr	r0, [pc, #556]	; (80182ac <tcp_split_unsent_seg+0x27c>)
 801807e:	f004 fee3 	bl	801ce48 <iprintf>
    return ERR_VAL;
 8018082:	f06f 0305 	mvn.w	r3, #5
 8018086:	e109      	b.n	801829c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	891b      	ldrh	r3, [r3, #8]
 801808c:	887a      	ldrh	r2, [r7, #2]
 801808e:	429a      	cmp	r2, r3
 8018090:	d301      	bcc.n	8018096 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018092:	2300      	movs	r3, #0
 8018094:	e102      	b.n	801829c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801809a:	887a      	ldrh	r2, [r7, #2]
 801809c:	429a      	cmp	r2, r3
 801809e:	d906      	bls.n	80180ae <tcp_split_unsent_seg+0x7e>
 80180a0:	4b80      	ldr	r3, [pc, #512]	; (80182a4 <tcp_split_unsent_seg+0x274>)
 80180a2:	f240 325b 	movw	r2, #859	; 0x35b
 80180a6:	4983      	ldr	r1, [pc, #524]	; (80182b4 <tcp_split_unsent_seg+0x284>)
 80180a8:	4880      	ldr	r0, [pc, #512]	; (80182ac <tcp_split_unsent_seg+0x27c>)
 80180aa:	f004 fecd 	bl	801ce48 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	891b      	ldrh	r3, [r3, #8]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d106      	bne.n	80180c4 <tcp_split_unsent_seg+0x94>
 80180b6:	4b7b      	ldr	r3, [pc, #492]	; (80182a4 <tcp_split_unsent_seg+0x274>)
 80180b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80180bc:	497e      	ldr	r1, [pc, #504]	; (80182b8 <tcp_split_unsent_seg+0x288>)
 80180be:	487b      	ldr	r0, [pc, #492]	; (80182ac <tcp_split_unsent_seg+0x27c>)
 80180c0:	f004 fec2 	bl	801ce48 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	7a9b      	ldrb	r3, [r3, #10]
 80180c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80180ca:	7bfb      	ldrb	r3, [r7, #15]
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	b2db      	uxtb	r3, r3
 80180d0:	f003 0304 	and.w	r3, r3, #4
 80180d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80180d6:	697b      	ldr	r3, [r7, #20]
 80180d8:	891a      	ldrh	r2, [r3, #8]
 80180da:	887b      	ldrh	r3, [r7, #2]
 80180dc:	1ad3      	subs	r3, r2, r3
 80180de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80180e0:	7bbb      	ldrb	r3, [r7, #14]
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	89bb      	ldrh	r3, [r7, #12]
 80180e6:	4413      	add	r3, r2
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180ee:	4619      	mov	r1, r3
 80180f0:	2036      	movs	r0, #54	; 0x36
 80180f2:	f7fa fc53 	bl	801299c <pbuf_alloc>
 80180f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	f000 80b7 	beq.w	801826e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	891a      	ldrh	r2, [r3, #8]
 8018106:	697b      	ldr	r3, [r7, #20]
 8018108:	891b      	ldrh	r3, [r3, #8]
 801810a:	1ad3      	subs	r3, r2, r3
 801810c:	b29a      	uxth	r2, r3
 801810e:	887b      	ldrh	r3, [r7, #2]
 8018110:	4413      	add	r3, r2
 8018112:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	6858      	ldr	r0, [r3, #4]
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	685a      	ldr	r2, [r3, #4]
 801811c:	7bbb      	ldrb	r3, [r7, #14]
 801811e:	18d1      	adds	r1, r2, r3
 8018120:	897b      	ldrh	r3, [r7, #10]
 8018122:	89ba      	ldrh	r2, [r7, #12]
 8018124:	f7fb f924 	bl	8013370 <pbuf_copy_partial>
 8018128:	4603      	mov	r3, r0
 801812a:	461a      	mov	r2, r3
 801812c:	89bb      	ldrh	r3, [r7, #12]
 801812e:	4293      	cmp	r3, r2
 8018130:	f040 809f 	bne.w	8018272 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	68db      	ldr	r3, [r3, #12]
 8018138:	899b      	ldrh	r3, [r3, #12]
 801813a:	b29b      	uxth	r3, r3
 801813c:	4618      	mov	r0, r3
 801813e:	f7f9 fbc9 	bl	80118d4 <lwip_htons>
 8018142:	4603      	mov	r3, r0
 8018144:	b2db      	uxtb	r3, r3
 8018146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801814a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801814c:	2300      	movs	r3, #0
 801814e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018150:	7efb      	ldrb	r3, [r7, #27]
 8018152:	f003 0308 	and.w	r3, r3, #8
 8018156:	2b00      	cmp	r3, #0
 8018158:	d007      	beq.n	801816a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801815a:	7efb      	ldrb	r3, [r7, #27]
 801815c:	f023 0308 	bic.w	r3, r3, #8
 8018160:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018162:	7ebb      	ldrb	r3, [r7, #26]
 8018164:	f043 0308 	orr.w	r3, r3, #8
 8018168:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801816a:	7efb      	ldrb	r3, [r7, #27]
 801816c:	f003 0301 	and.w	r3, r3, #1
 8018170:	2b00      	cmp	r3, #0
 8018172:	d007      	beq.n	8018184 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018174:	7efb      	ldrb	r3, [r7, #27]
 8018176:	f023 0301 	bic.w	r3, r3, #1
 801817a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801817c:	7ebb      	ldrb	r3, [r7, #26]
 801817e:	f043 0301 	orr.w	r3, r3, #1
 8018182:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	68db      	ldr	r3, [r3, #12]
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	4618      	mov	r0, r3
 801818c:	f7f9 fbb7 	bl	80118fe <lwip_htonl>
 8018190:	4602      	mov	r2, r0
 8018192:	887b      	ldrh	r3, [r7, #2]
 8018194:	18d1      	adds	r1, r2, r3
 8018196:	7eba      	ldrb	r2, [r7, #26]
 8018198:	7bfb      	ldrb	r3, [r7, #15]
 801819a:	9300      	str	r3, [sp, #0]
 801819c:	460b      	mov	r3, r1
 801819e:	6939      	ldr	r1, [r7, #16]
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f7ff fa4f 	bl	8017644 <tcp_create_segment>
 80181a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80181a8:	69fb      	ldr	r3, [r7, #28]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d063      	beq.n	8018276 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80181ae:	697b      	ldr	r3, [r7, #20]
 80181b0:	685b      	ldr	r3, [r3, #4]
 80181b2:	4618      	mov	r0, r3
 80181b4:	f7fa ff64 	bl	8013080 <pbuf_clen>
 80181b8:	4603      	mov	r3, r0
 80181ba:	461a      	mov	r2, r3
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80181c2:	1a9b      	subs	r3, r3, r2
 80181c4:	b29a      	uxth	r2, r3
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	6858      	ldr	r0, [r3, #4]
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	685b      	ldr	r3, [r3, #4]
 80181d4:	891a      	ldrh	r2, [r3, #8]
 80181d6:	89bb      	ldrh	r3, [r7, #12]
 80181d8:	1ad3      	subs	r3, r2, r3
 80181da:	b29b      	uxth	r3, r3
 80181dc:	4619      	mov	r1, r3
 80181de:	f7fa fd3b 	bl	8012c58 <pbuf_realloc>
  useg->len -= remainder;
 80181e2:	697b      	ldr	r3, [r7, #20]
 80181e4:	891a      	ldrh	r2, [r3, #8]
 80181e6:	89bb      	ldrh	r3, [r7, #12]
 80181e8:	1ad3      	subs	r3, r2, r3
 80181ea:	b29a      	uxth	r2, r3
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	68db      	ldr	r3, [r3, #12]
 80181f4:	899b      	ldrh	r3, [r3, #12]
 80181f6:	b29c      	uxth	r4, r3
 80181f8:	7efb      	ldrb	r3, [r7, #27]
 80181fa:	b29b      	uxth	r3, r3
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7f9 fb69 	bl	80118d4 <lwip_htons>
 8018202:	4603      	mov	r3, r0
 8018204:	461a      	mov	r2, r3
 8018206:	697b      	ldr	r3, [r7, #20]
 8018208:	68db      	ldr	r3, [r3, #12]
 801820a:	4322      	orrs	r2, r4
 801820c:	b292      	uxth	r2, r2
 801820e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018210:	697b      	ldr	r3, [r7, #20]
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	4618      	mov	r0, r3
 8018216:	f7fa ff33 	bl	8013080 <pbuf_clen>
 801821a:	4603      	mov	r3, r0
 801821c:	461a      	mov	r2, r3
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018224:	4413      	add	r3, r2
 8018226:	b29a      	uxth	r2, r3
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801822e:	69fb      	ldr	r3, [r7, #28]
 8018230:	685b      	ldr	r3, [r3, #4]
 8018232:	4618      	mov	r0, r3
 8018234:	f7fa ff24 	bl	8013080 <pbuf_clen>
 8018238:	4603      	mov	r3, r0
 801823a:	461a      	mov	r2, r3
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018242:	4413      	add	r3, r2
 8018244:	b29a      	uxth	r2, r3
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	681a      	ldr	r2, [r3, #0]
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	69fa      	ldr	r2, [r7, #28]
 8018258:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801825a:	69fb      	ldr	r3, [r7, #28]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d103      	bne.n	801826a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2200      	movs	r2, #0
 8018266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801826a:	2300      	movs	r3, #0
 801826c:	e016      	b.n	801829c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801826e:	bf00      	nop
 8018270:	e002      	b.n	8018278 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018272:	bf00      	nop
 8018274:	e000      	b.n	8018278 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018276:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018278:	69fb      	ldr	r3, [r7, #28]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d006      	beq.n	801828c <tcp_split_unsent_seg+0x25c>
 801827e:	4b09      	ldr	r3, [pc, #36]	; (80182a4 <tcp_split_unsent_seg+0x274>)
 8018280:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018284:	490d      	ldr	r1, [pc, #52]	; (80182bc <tcp_split_unsent_seg+0x28c>)
 8018286:	4809      	ldr	r0, [pc, #36]	; (80182ac <tcp_split_unsent_seg+0x27c>)
 8018288:	f004 fdde 	bl	801ce48 <iprintf>
  if (p != NULL) {
 801828c:	693b      	ldr	r3, [r7, #16]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d002      	beq.n	8018298 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018292:	6938      	ldr	r0, [r7, #16]
 8018294:	f7fa fe66 	bl	8012f64 <pbuf_free>
  }

  return ERR_MEM;
 8018298:	f04f 33ff 	mov.w	r3, #4294967295
}
 801829c:	4618      	mov	r0, r3
 801829e:	3724      	adds	r7, #36	; 0x24
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd90      	pop	{r4, r7, pc}
 80182a4:	0802061c 	.word	0x0802061c
 80182a8:	080209b0 	.word	0x080209b0
 80182ac:	08020670 	.word	0x08020670
 80182b0:	080209d4 	.word	0x080209d4
 80182b4:	080209f8 	.word	0x080209f8
 80182b8:	08020a08 	.word	0x08020a08
 80182bc:	08020a18 	.word	0x08020a18

080182c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80182c0:	b590      	push	{r4, r7, lr}
 80182c2:	b085      	sub	sp, #20
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d106      	bne.n	80182dc <tcp_send_fin+0x1c>
 80182ce:	4b21      	ldr	r3, [pc, #132]	; (8018354 <tcp_send_fin+0x94>)
 80182d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80182d4:	4920      	ldr	r1, [pc, #128]	; (8018358 <tcp_send_fin+0x98>)
 80182d6:	4821      	ldr	r0, [pc, #132]	; (801835c <tcp_send_fin+0x9c>)
 80182d8:	f004 fdb6 	bl	801ce48 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d02e      	beq.n	8018342 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182e8:	60fb      	str	r3, [r7, #12]
 80182ea:	e002      	b.n	80182f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d1f8      	bne.n	80182ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	68db      	ldr	r3, [r3, #12]
 80182fe:	899b      	ldrh	r3, [r3, #12]
 8018300:	b29b      	uxth	r3, r3
 8018302:	4618      	mov	r0, r3
 8018304:	f7f9 fae6 	bl	80118d4 <lwip_htons>
 8018308:	4603      	mov	r3, r0
 801830a:	b2db      	uxtb	r3, r3
 801830c:	f003 0307 	and.w	r3, r3, #7
 8018310:	2b00      	cmp	r3, #0
 8018312:	d116      	bne.n	8018342 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	68db      	ldr	r3, [r3, #12]
 8018318:	899b      	ldrh	r3, [r3, #12]
 801831a:	b29c      	uxth	r4, r3
 801831c:	2001      	movs	r0, #1
 801831e:	f7f9 fad9 	bl	80118d4 <lwip_htons>
 8018322:	4603      	mov	r3, r0
 8018324:	461a      	mov	r2, r3
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	68db      	ldr	r3, [r3, #12]
 801832a:	4322      	orrs	r2, r4
 801832c:	b292      	uxth	r2, r2
 801832e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	8b5b      	ldrh	r3, [r3, #26]
 8018334:	f043 0320 	orr.w	r3, r3, #32
 8018338:	b29a      	uxth	r2, r3
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801833e:	2300      	movs	r3, #0
 8018340:	e004      	b.n	801834c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018342:	2101      	movs	r1, #1
 8018344:	6878      	ldr	r0, [r7, #4]
 8018346:	f000 f80b 	bl	8018360 <tcp_enqueue_flags>
 801834a:	4603      	mov	r3, r0
}
 801834c:	4618      	mov	r0, r3
 801834e:	3714      	adds	r7, #20
 8018350:	46bd      	mov	sp, r7
 8018352:	bd90      	pop	{r4, r7, pc}
 8018354:	0802061c 	.word	0x0802061c
 8018358:	08020a24 	.word	0x08020a24
 801835c:	08020670 	.word	0x08020670

08018360 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b08a      	sub	sp, #40	; 0x28
 8018364:	af02      	add	r7, sp, #8
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	460b      	mov	r3, r1
 801836a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801836c:	2300      	movs	r3, #0
 801836e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018370:	2300      	movs	r3, #0
 8018372:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018374:	78fb      	ldrb	r3, [r7, #3]
 8018376:	f003 0303 	and.w	r3, r3, #3
 801837a:	2b00      	cmp	r3, #0
 801837c:	d106      	bne.n	801838c <tcp_enqueue_flags+0x2c>
 801837e:	4b67      	ldr	r3, [pc, #412]	; (801851c <tcp_enqueue_flags+0x1bc>)
 8018380:	f240 4211 	movw	r2, #1041	; 0x411
 8018384:	4966      	ldr	r1, [pc, #408]	; (8018520 <tcp_enqueue_flags+0x1c0>)
 8018386:	4867      	ldr	r0, [pc, #412]	; (8018524 <tcp_enqueue_flags+0x1c4>)
 8018388:	f004 fd5e 	bl	801ce48 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d106      	bne.n	80183a0 <tcp_enqueue_flags+0x40>
 8018392:	4b62      	ldr	r3, [pc, #392]	; (801851c <tcp_enqueue_flags+0x1bc>)
 8018394:	f240 4213 	movw	r2, #1043	; 0x413
 8018398:	4963      	ldr	r1, [pc, #396]	; (8018528 <tcp_enqueue_flags+0x1c8>)
 801839a:	4862      	ldr	r0, [pc, #392]	; (8018524 <tcp_enqueue_flags+0x1c4>)
 801839c:	f004 fd54 	bl	801ce48 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80183a0:	78fb      	ldrb	r3, [r7, #3]
 80183a2:	f003 0302 	and.w	r3, r3, #2
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d001      	beq.n	80183ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80183aa:	2301      	movs	r3, #1
 80183ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80183ae:	7ffb      	ldrb	r3, [r7, #31]
 80183b0:	009b      	lsls	r3, r3, #2
 80183b2:	b2db      	uxtb	r3, r3
 80183b4:	f003 0304 	and.w	r3, r3, #4
 80183b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80183ba:	7dfb      	ldrb	r3, [r7, #23]
 80183bc:	b29b      	uxth	r3, r3
 80183be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183c2:	4619      	mov	r1, r3
 80183c4:	2036      	movs	r0, #54	; 0x36
 80183c6:	f7fa fae9 	bl	801299c <pbuf_alloc>
 80183ca:	6138      	str	r0, [r7, #16]
 80183cc:	693b      	ldr	r3, [r7, #16]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d109      	bne.n	80183e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	8b5b      	ldrh	r3, [r3, #26]
 80183d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183da:	b29a      	uxth	r2, r3
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80183e0:	f04f 33ff 	mov.w	r3, #4294967295
 80183e4:	e095      	b.n	8018512 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80183e6:	693b      	ldr	r3, [r7, #16]
 80183e8:	895a      	ldrh	r2, [r3, #10]
 80183ea:	7dfb      	ldrb	r3, [r7, #23]
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d206      	bcs.n	8018400 <tcp_enqueue_flags+0xa0>
 80183f2:	4b4a      	ldr	r3, [pc, #296]	; (801851c <tcp_enqueue_flags+0x1bc>)
 80183f4:	f240 4239 	movw	r2, #1081	; 0x439
 80183f8:	494c      	ldr	r1, [pc, #304]	; (801852c <tcp_enqueue_flags+0x1cc>)
 80183fa:	484a      	ldr	r0, [pc, #296]	; (8018524 <tcp_enqueue_flags+0x1c4>)
 80183fc:	f004 fd24 	bl	801ce48 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018404:	78fa      	ldrb	r2, [r7, #3]
 8018406:	7ffb      	ldrb	r3, [r7, #31]
 8018408:	9300      	str	r3, [sp, #0]
 801840a:	460b      	mov	r3, r1
 801840c:	6939      	ldr	r1, [r7, #16]
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f7ff f918 	bl	8017644 <tcp_create_segment>
 8018414:	60f8      	str	r0, [r7, #12]
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d109      	bne.n	8018430 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	8b5b      	ldrh	r3, [r3, #26]
 8018420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018424:	b29a      	uxth	r2, r3
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801842a:	f04f 33ff 	mov.w	r3, #4294967295
 801842e:	e070      	b.n	8018512 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	68db      	ldr	r3, [r3, #12]
 8018434:	f003 0303 	and.w	r3, r3, #3
 8018438:	2b00      	cmp	r3, #0
 801843a:	d006      	beq.n	801844a <tcp_enqueue_flags+0xea>
 801843c:	4b37      	ldr	r3, [pc, #220]	; (801851c <tcp_enqueue_flags+0x1bc>)
 801843e:	f240 4242 	movw	r2, #1090	; 0x442
 8018442:	493b      	ldr	r1, [pc, #236]	; (8018530 <tcp_enqueue_flags+0x1d0>)
 8018444:	4837      	ldr	r0, [pc, #220]	; (8018524 <tcp_enqueue_flags+0x1c4>)
 8018446:	f004 fcff 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	891b      	ldrh	r3, [r3, #8]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d006      	beq.n	8018460 <tcp_enqueue_flags+0x100>
 8018452:	4b32      	ldr	r3, [pc, #200]	; (801851c <tcp_enqueue_flags+0x1bc>)
 8018454:	f240 4243 	movw	r2, #1091	; 0x443
 8018458:	4936      	ldr	r1, [pc, #216]	; (8018534 <tcp_enqueue_flags+0x1d4>)
 801845a:	4832      	ldr	r0, [pc, #200]	; (8018524 <tcp_enqueue_flags+0x1c4>)
 801845c:	f004 fcf4 	bl	801ce48 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018464:	2b00      	cmp	r3, #0
 8018466:	d103      	bne.n	8018470 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	68fa      	ldr	r2, [r7, #12]
 801846c:	66da      	str	r2, [r3, #108]	; 0x6c
 801846e:	e00d      	b.n	801848c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018474:	61bb      	str	r3, [r7, #24]
 8018476:	e002      	b.n	801847e <tcp_enqueue_flags+0x11e>
 8018478:	69bb      	ldr	r3, [r7, #24]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	61bb      	str	r3, [r7, #24]
 801847e:	69bb      	ldr	r3, [r7, #24]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d1f8      	bne.n	8018478 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018486:	69bb      	ldr	r3, [r7, #24]
 8018488:	68fa      	ldr	r2, [r7, #12]
 801848a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2200      	movs	r2, #0
 8018490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018494:	78fb      	ldrb	r3, [r7, #3]
 8018496:	f003 0302 	and.w	r3, r3, #2
 801849a:	2b00      	cmp	r3, #0
 801849c:	d104      	bne.n	80184a8 <tcp_enqueue_flags+0x148>
 801849e:	78fb      	ldrb	r3, [r7, #3]
 80184a0:	f003 0301 	and.w	r3, r3, #1
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d004      	beq.n	80184b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184ac:	1c5a      	adds	r2, r3, #1
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80184b2:	78fb      	ldrb	r3, [r7, #3]
 80184b4:	f003 0301 	and.w	r3, r3, #1
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d006      	beq.n	80184ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	8b5b      	ldrh	r3, [r3, #26]
 80184c0:	f043 0320 	orr.w	r3, r3, #32
 80184c4:	b29a      	uxth	r2, r3
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7fa fdd6 	bl	8013080 <pbuf_clen>
 80184d4:	4603      	mov	r3, r0
 80184d6:	461a      	mov	r2, r3
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80184de:	4413      	add	r3, r2
 80184e0:	b29a      	uxth	r2, r3
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d00e      	beq.n	8018510 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d10a      	bne.n	8018510 <tcp_enqueue_flags+0x1b0>
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d106      	bne.n	8018510 <tcp_enqueue_flags+0x1b0>
 8018502:	4b06      	ldr	r3, [pc, #24]	; (801851c <tcp_enqueue_flags+0x1bc>)
 8018504:	f240 4265 	movw	r2, #1125	; 0x465
 8018508:	490b      	ldr	r1, [pc, #44]	; (8018538 <tcp_enqueue_flags+0x1d8>)
 801850a:	4806      	ldr	r0, [pc, #24]	; (8018524 <tcp_enqueue_flags+0x1c4>)
 801850c:	f004 fc9c 	bl	801ce48 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018510:	2300      	movs	r3, #0
}
 8018512:	4618      	mov	r0, r3
 8018514:	3720      	adds	r7, #32
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	0802061c 	.word	0x0802061c
 8018520:	08020a40 	.word	0x08020a40
 8018524:	08020670 	.word	0x08020670
 8018528:	08020a98 	.word	0x08020a98
 801852c:	08020ab8 	.word	0x08020ab8
 8018530:	08020af4 	.word	0x08020af4
 8018534:	08020b0c 	.word	0x08020b0c
 8018538:	08020b38 	.word	0x08020b38

0801853c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801853c:	b5b0      	push	{r4, r5, r7, lr}
 801853e:	b08a      	sub	sp, #40	; 0x28
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d106      	bne.n	8018558 <tcp_output+0x1c>
 801854a:	4b9e      	ldr	r3, [pc, #632]	; (80187c4 <tcp_output+0x288>)
 801854c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018550:	499d      	ldr	r1, [pc, #628]	; (80187c8 <tcp_output+0x28c>)
 8018552:	489e      	ldr	r0, [pc, #632]	; (80187cc <tcp_output+0x290>)
 8018554:	f004 fc78 	bl	801ce48 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	7d1b      	ldrb	r3, [r3, #20]
 801855c:	2b01      	cmp	r3, #1
 801855e:	d106      	bne.n	801856e <tcp_output+0x32>
 8018560:	4b98      	ldr	r3, [pc, #608]	; (80187c4 <tcp_output+0x288>)
 8018562:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8018566:	499a      	ldr	r1, [pc, #616]	; (80187d0 <tcp_output+0x294>)
 8018568:	4898      	ldr	r0, [pc, #608]	; (80187cc <tcp_output+0x290>)
 801856a:	f004 fc6d 	bl	801ce48 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801856e:	4b99      	ldr	r3, [pc, #612]	; (80187d4 <tcp_output+0x298>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	429a      	cmp	r2, r3
 8018576:	d101      	bne.n	801857c <tcp_output+0x40>
    return ERR_OK;
 8018578:	2300      	movs	r3, #0
 801857a:	e1ce      	b.n	801891a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018588:	4293      	cmp	r3, r2
 801858a:	bf28      	it	cs
 801858c:	4613      	movcs	r3, r2
 801858e:	b29b      	uxth	r3, r3
 8018590:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018596:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859a:	2b00      	cmp	r3, #0
 801859c:	d10b      	bne.n	80185b6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	8b5b      	ldrh	r3, [r3, #26]
 80185a2:	f003 0302 	and.w	r3, r3, #2
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	f000 81aa 	beq.w	8018900 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f000 fdcb 	bl	8019148 <tcp_send_empty_ack>
 80185b2:	4603      	mov	r3, r0
 80185b4:	e1b1      	b.n	801891a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80185b6:	6879      	ldr	r1, [r7, #4]
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	3304      	adds	r3, #4
 80185bc:	461a      	mov	r2, r3
 80185be:	6878      	ldr	r0, [r7, #4]
 80185c0:	f7ff f824 	bl	801760c <tcp_route>
 80185c4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d102      	bne.n	80185d2 <tcp_output+0x96>
    return ERR_RTE;
 80185cc:	f06f 0303 	mvn.w	r3, #3
 80185d0:	e1a3      	b.n	801891a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d003      	beq.n	80185e0 <tcp_output+0xa4>
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d111      	bne.n	8018604 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80185e0:	697b      	ldr	r3, [r7, #20]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d002      	beq.n	80185ec <tcp_output+0xb0>
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	3304      	adds	r3, #4
 80185ea:	e000      	b.n	80185ee <tcp_output+0xb2>
 80185ec:	2300      	movs	r3, #0
 80185ee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80185f0:	693b      	ldr	r3, [r7, #16]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d102      	bne.n	80185fc <tcp_output+0xc0>
      return ERR_RTE;
 80185f6:	f06f 0303 	mvn.w	r3, #3
 80185fa:	e18e      	b.n	801891a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80185fc:	693b      	ldr	r3, [r7, #16]
 80185fe:	681a      	ldr	r2, [r3, #0]
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018606:	68db      	ldr	r3, [r3, #12]
 8018608:	685b      	ldr	r3, [r3, #4]
 801860a:	4618      	mov	r0, r3
 801860c:	f7f9 f977 	bl	80118fe <lwip_htonl>
 8018610:	4602      	mov	r2, r0
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018616:	1ad3      	subs	r3, r2, r3
 8018618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801861a:	8912      	ldrh	r2, [r2, #8]
 801861c:	4413      	add	r3, r2
 801861e:	69ba      	ldr	r2, [r7, #24]
 8018620:	429a      	cmp	r2, r3
 8018622:	d227      	bcs.n	8018674 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801862a:	461a      	mov	r2, r3
 801862c:	69bb      	ldr	r3, [r7, #24]
 801862e:	4293      	cmp	r3, r2
 8018630:	d114      	bne.n	801865c <tcp_output+0x120>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018636:	2b00      	cmp	r3, #0
 8018638:	d110      	bne.n	801865c <tcp_output+0x120>
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018640:	2b00      	cmp	r3, #0
 8018642:	d10b      	bne.n	801865c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2200      	movs	r2, #0
 8018648:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2201      	movs	r2, #1
 8018650:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	2200      	movs	r2, #0
 8018658:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	8b5b      	ldrh	r3, [r3, #26]
 8018660:	f003 0302 	and.w	r3, r3, #2
 8018664:	2b00      	cmp	r3, #0
 8018666:	f000 814d 	beq.w	8018904 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801866a:	6878      	ldr	r0, [r7, #4]
 801866c:	f000 fd6c 	bl	8019148 <tcp_send_empty_ack>
 8018670:	4603      	mov	r3, r0
 8018672:	e152      	b.n	801891a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	2200      	movs	r2, #0
 8018678:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018680:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018682:	6a3b      	ldr	r3, [r7, #32]
 8018684:	2b00      	cmp	r3, #0
 8018686:	f000 811c 	beq.w	80188c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801868a:	e002      	b.n	8018692 <tcp_output+0x156>
 801868c:	6a3b      	ldr	r3, [r7, #32]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	623b      	str	r3, [r7, #32]
 8018692:	6a3b      	ldr	r3, [r7, #32]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d1f8      	bne.n	801868c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801869a:	e112      	b.n	80188c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	899b      	ldrh	r3, [r3, #12]
 80186a2:	b29b      	uxth	r3, r3
 80186a4:	4618      	mov	r0, r3
 80186a6:	f7f9 f915 	bl	80118d4 <lwip_htons>
 80186aa:	4603      	mov	r3, r0
 80186ac:	b2db      	uxtb	r3, r3
 80186ae:	f003 0304 	and.w	r3, r3, #4
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d006      	beq.n	80186c4 <tcp_output+0x188>
 80186b6:	4b43      	ldr	r3, [pc, #268]	; (80187c4 <tcp_output+0x288>)
 80186b8:	f240 5236 	movw	r2, #1334	; 0x536
 80186bc:	4946      	ldr	r1, [pc, #280]	; (80187d8 <tcp_output+0x29c>)
 80186be:	4843      	ldr	r0, [pc, #268]	; (80187cc <tcp_output+0x290>)
 80186c0:	f004 fbc2 	bl	801ce48 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d01f      	beq.n	801870c <tcp_output+0x1d0>
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	8b5b      	ldrh	r3, [r3, #26]
 80186d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d119      	bne.n	801870c <tcp_output+0x1d0>
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d00b      	beq.n	80186f8 <tcp_output+0x1bc>
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d110      	bne.n	801870c <tcp_output+0x1d0>
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186ee:	891a      	ldrh	r2, [r3, #8]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d209      	bcs.n	801870c <tcp_output+0x1d0>
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d004      	beq.n	801870c <tcp_output+0x1d0>
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018708:	2b08      	cmp	r3, #8
 801870a:	d901      	bls.n	8018710 <tcp_output+0x1d4>
 801870c:	2301      	movs	r3, #1
 801870e:	e000      	b.n	8018712 <tcp_output+0x1d6>
 8018710:	2300      	movs	r3, #0
 8018712:	2b00      	cmp	r3, #0
 8018714:	d106      	bne.n	8018724 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	8b5b      	ldrh	r3, [r3, #26]
 801871a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801871e:	2b00      	cmp	r3, #0
 8018720:	f000 80e4 	beq.w	80188ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	7d1b      	ldrb	r3, [r3, #20]
 8018728:	2b02      	cmp	r3, #2
 801872a:	d00d      	beq.n	8018748 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872e:	68db      	ldr	r3, [r3, #12]
 8018730:	899b      	ldrh	r3, [r3, #12]
 8018732:	b29c      	uxth	r4, r3
 8018734:	2010      	movs	r0, #16
 8018736:	f7f9 f8cd 	bl	80118d4 <lwip_htons>
 801873a:	4603      	mov	r3, r0
 801873c:	461a      	mov	r2, r3
 801873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018740:	68db      	ldr	r3, [r3, #12]
 8018742:	4322      	orrs	r2, r4
 8018744:	b292      	uxth	r2, r2
 8018746:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018748:	697a      	ldr	r2, [r7, #20]
 801874a:	6879      	ldr	r1, [r7, #4]
 801874c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801874e:	f000 f909 	bl	8018964 <tcp_output_segment>
 8018752:	4603      	mov	r3, r0
 8018754:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d009      	beq.n	8018772 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	8b5b      	ldrh	r3, [r3, #26]
 8018762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018766:	b29a      	uxth	r2, r3
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	835a      	strh	r2, [r3, #26]
      return err;
 801876c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018770:	e0d3      	b.n	801891a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018774:	681a      	ldr	r2, [r3, #0]
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	7d1b      	ldrb	r3, [r3, #20]
 801877e:	2b02      	cmp	r3, #2
 8018780:	d006      	beq.n	8018790 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	8b5b      	ldrh	r3, [r3, #26]
 8018786:	f023 0303 	bic.w	r3, r3, #3
 801878a:	b29a      	uxth	r2, r3
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018792:	68db      	ldr	r3, [r3, #12]
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	4618      	mov	r0, r3
 8018798:	f7f9 f8b1 	bl	80118fe <lwip_htonl>
 801879c:	4604      	mov	r4, r0
 801879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a0:	891b      	ldrh	r3, [r3, #8]
 80187a2:	461d      	mov	r5, r3
 80187a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a6:	68db      	ldr	r3, [r3, #12]
 80187a8:	899b      	ldrh	r3, [r3, #12]
 80187aa:	b29b      	uxth	r3, r3
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7f9 f891 	bl	80118d4 <lwip_htons>
 80187b2:	4603      	mov	r3, r0
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	f003 0303 	and.w	r3, r3, #3
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d00e      	beq.n	80187dc <tcp_output+0x2a0>
 80187be:	2301      	movs	r3, #1
 80187c0:	e00d      	b.n	80187de <tcp_output+0x2a2>
 80187c2:	bf00      	nop
 80187c4:	0802061c 	.word	0x0802061c
 80187c8:	08020b60 	.word	0x08020b60
 80187cc:	08020670 	.word	0x08020670
 80187d0:	08020b78 	.word	0x08020b78
 80187d4:	2000df2c 	.word	0x2000df2c
 80187d8:	08020ba0 	.word	0x08020ba0
 80187dc:	2300      	movs	r3, #0
 80187de:	442b      	add	r3, r5
 80187e0:	4423      	add	r3, r4
 80187e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80187e8:	68bb      	ldr	r3, [r7, #8]
 80187ea:	1ad3      	subs	r3, r2, r3
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	da02      	bge.n	80187f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	68ba      	ldr	r2, [r7, #8]
 80187f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80187f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f8:	891b      	ldrh	r3, [r3, #8]
 80187fa:	461c      	mov	r4, r3
 80187fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187fe:	68db      	ldr	r3, [r3, #12]
 8018800:	899b      	ldrh	r3, [r3, #12]
 8018802:	b29b      	uxth	r3, r3
 8018804:	4618      	mov	r0, r3
 8018806:	f7f9 f865 	bl	80118d4 <lwip_htons>
 801880a:	4603      	mov	r3, r0
 801880c:	b2db      	uxtb	r3, r3
 801880e:	f003 0303 	and.w	r3, r3, #3
 8018812:	2b00      	cmp	r3, #0
 8018814:	d001      	beq.n	801881a <tcp_output+0x2de>
 8018816:	2301      	movs	r3, #1
 8018818:	e000      	b.n	801881c <tcp_output+0x2e0>
 801881a:	2300      	movs	r3, #0
 801881c:	4423      	add	r3, r4
 801881e:	2b00      	cmp	r3, #0
 8018820:	d049      	beq.n	80188b6 <tcp_output+0x37a>
      seg->next = NULL;
 8018822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018824:	2200      	movs	r2, #0
 8018826:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801882c:	2b00      	cmp	r3, #0
 801882e:	d105      	bne.n	801883c <tcp_output+0x300>
        pcb->unacked = seg;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018834:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018838:	623b      	str	r3, [r7, #32]
 801883a:	e03f      	b.n	80188bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883e:	68db      	ldr	r3, [r3, #12]
 8018840:	685b      	ldr	r3, [r3, #4]
 8018842:	4618      	mov	r0, r3
 8018844:	f7f9 f85b 	bl	80118fe <lwip_htonl>
 8018848:	4604      	mov	r4, r0
 801884a:	6a3b      	ldr	r3, [r7, #32]
 801884c:	68db      	ldr	r3, [r3, #12]
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	4618      	mov	r0, r3
 8018852:	f7f9 f854 	bl	80118fe <lwip_htonl>
 8018856:	4603      	mov	r3, r0
 8018858:	1ae3      	subs	r3, r4, r3
 801885a:	2b00      	cmp	r3, #0
 801885c:	da24      	bge.n	80188a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	3370      	adds	r3, #112	; 0x70
 8018862:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018864:	e002      	b.n	801886c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801886c:	69fb      	ldr	r3, [r7, #28]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d011      	beq.n	8018898 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018874:	69fb      	ldr	r3, [r7, #28]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	68db      	ldr	r3, [r3, #12]
 801887a:	685b      	ldr	r3, [r3, #4]
 801887c:	4618      	mov	r0, r3
 801887e:	f7f9 f83e 	bl	80118fe <lwip_htonl>
 8018882:	4604      	mov	r4, r0
 8018884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018886:	68db      	ldr	r3, [r3, #12]
 8018888:	685b      	ldr	r3, [r3, #4]
 801888a:	4618      	mov	r0, r3
 801888c:	f7f9 f837 	bl	80118fe <lwip_htonl>
 8018890:	4603      	mov	r3, r0
 8018892:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018894:	2b00      	cmp	r3, #0
 8018896:	dbe6      	blt.n	8018866 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801889e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188a4:	601a      	str	r2, [r3, #0]
 80188a6:	e009      	b.n	80188bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80188a8:	6a3b      	ldr	r3, [r7, #32]
 80188aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80188ae:	6a3b      	ldr	r3, [r7, #32]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	623b      	str	r3, [r7, #32]
 80188b4:	e002      	b.n	80188bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80188b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188b8:	f7fb ff1d 	bl	80146f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80188c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d012      	beq.n	80188ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80188c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ca:	68db      	ldr	r3, [r3, #12]
 80188cc:	685b      	ldr	r3, [r3, #4]
 80188ce:	4618      	mov	r0, r3
 80188d0:	f7f9 f815 	bl	80118fe <lwip_htonl>
 80188d4:	4602      	mov	r2, r0
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188da:	1ad3      	subs	r3, r2, r3
 80188dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188de:	8912      	ldrh	r2, [r2, #8]
 80188e0:	4413      	add	r3, r2
  while (seg != NULL &&
 80188e2:	69ba      	ldr	r2, [r7, #24]
 80188e4:	429a      	cmp	r2, r3
 80188e6:	f4bf aed9 	bcs.w	801869c <tcp_output+0x160>
 80188ea:	e000      	b.n	80188ee <tcp_output+0x3b2>
      break;
 80188ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d108      	bne.n	8018908 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2200      	movs	r2, #0
 80188fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80188fe:	e004      	b.n	801890a <tcp_output+0x3ce>
    goto output_done;
 8018900:	bf00      	nop
 8018902:	e002      	b.n	801890a <tcp_output+0x3ce>
    goto output_done;
 8018904:	bf00      	nop
 8018906:	e000      	b.n	801890a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018908:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	8b5b      	ldrh	r3, [r3, #26]
 801890e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018912:	b29a      	uxth	r2, r3
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018918:	2300      	movs	r3, #0
}
 801891a:	4618      	mov	r0, r3
 801891c:	3728      	adds	r7, #40	; 0x28
 801891e:	46bd      	mov	sp, r7
 8018920:	bdb0      	pop	{r4, r5, r7, pc}
 8018922:	bf00      	nop

08018924 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d106      	bne.n	8018940 <tcp_output_segment_busy+0x1c>
 8018932:	4b09      	ldr	r3, [pc, #36]	; (8018958 <tcp_output_segment_busy+0x34>)
 8018934:	f240 529a 	movw	r2, #1434	; 0x59a
 8018938:	4908      	ldr	r1, [pc, #32]	; (801895c <tcp_output_segment_busy+0x38>)
 801893a:	4809      	ldr	r0, [pc, #36]	; (8018960 <tcp_output_segment_busy+0x3c>)
 801893c:	f004 fa84 	bl	801ce48 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	685b      	ldr	r3, [r3, #4]
 8018944:	7b9b      	ldrb	r3, [r3, #14]
 8018946:	2b01      	cmp	r3, #1
 8018948:	d001      	beq.n	801894e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801894a:	2301      	movs	r3, #1
 801894c:	e000      	b.n	8018950 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801894e:	2300      	movs	r3, #0
}
 8018950:	4618      	mov	r0, r3
 8018952:	3708      	adds	r7, #8
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}
 8018958:	0802061c 	.word	0x0802061c
 801895c:	08020bb8 	.word	0x08020bb8
 8018960:	08020670 	.word	0x08020670

08018964 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018964:	b5b0      	push	{r4, r5, r7, lr}
 8018966:	b08c      	sub	sp, #48	; 0x30
 8018968:	af04      	add	r7, sp, #16
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d106      	bne.n	8018984 <tcp_output_segment+0x20>
 8018976:	4b63      	ldr	r3, [pc, #396]	; (8018b04 <tcp_output_segment+0x1a0>)
 8018978:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801897c:	4962      	ldr	r1, [pc, #392]	; (8018b08 <tcp_output_segment+0x1a4>)
 801897e:	4863      	ldr	r0, [pc, #396]	; (8018b0c <tcp_output_segment+0x1a8>)
 8018980:	f004 fa62 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018984:	68bb      	ldr	r3, [r7, #8]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d106      	bne.n	8018998 <tcp_output_segment+0x34>
 801898a:	4b5e      	ldr	r3, [pc, #376]	; (8018b04 <tcp_output_segment+0x1a0>)
 801898c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018990:	495f      	ldr	r1, [pc, #380]	; (8018b10 <tcp_output_segment+0x1ac>)
 8018992:	485e      	ldr	r0, [pc, #376]	; (8018b0c <tcp_output_segment+0x1a8>)
 8018994:	f004 fa58 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d106      	bne.n	80189ac <tcp_output_segment+0x48>
 801899e:	4b59      	ldr	r3, [pc, #356]	; (8018b04 <tcp_output_segment+0x1a0>)
 80189a0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80189a4:	495b      	ldr	r1, [pc, #364]	; (8018b14 <tcp_output_segment+0x1b0>)
 80189a6:	4859      	ldr	r0, [pc, #356]	; (8018b0c <tcp_output_segment+0x1a8>)
 80189a8:	f004 fa4e 	bl	801ce48 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80189ac:	68f8      	ldr	r0, [r7, #12]
 80189ae:	f7ff ffb9 	bl	8018924 <tcp_output_segment_busy>
 80189b2:	4603      	mov	r3, r0
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d001      	beq.n	80189bc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80189b8:	2300      	movs	r3, #0
 80189ba:	e09f      	b.n	8018afc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	68dc      	ldr	r4, [r3, #12]
 80189c4:	4610      	mov	r0, r2
 80189c6:	f7f8 ff9a 	bl	80118fe <lwip_htonl>
 80189ca:	4603      	mov	r3, r0
 80189cc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80189ce:	68bb      	ldr	r3, [r7, #8]
 80189d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	68dc      	ldr	r4, [r3, #12]
 80189d6:	4610      	mov	r0, r2
 80189d8:	f7f8 ff7c 	bl	80118d4 <lwip_htons>
 80189dc:	4603      	mov	r3, r0
 80189de:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e4:	68ba      	ldr	r2, [r7, #8]
 80189e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80189e8:	441a      	add	r2, r3
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	3314      	adds	r3, #20
 80189f4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	7a9b      	ldrb	r3, [r3, #10]
 80189fa:	f003 0301 	and.w	r3, r3, #1
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d015      	beq.n	8018a2e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	3304      	adds	r3, #4
 8018a06:	461a      	mov	r2, r3
 8018a08:	6879      	ldr	r1, [r7, #4]
 8018a0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018a0e:	f7fc fa37 	bl	8014e80 <tcp_eff_send_mss_netif>
 8018a12:	4603      	mov	r3, r0
 8018a14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018a16:	8b7b      	ldrh	r3, [r7, #26]
 8018a18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7f8 ff6e 	bl	80118fe <lwip_htonl>
 8018a22:	4602      	mov	r2, r0
 8018a24:	69fb      	ldr	r3, [r7, #28]
 8018a26:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018a28:	69fb      	ldr	r3, [r7, #28]
 8018a2a:	3304      	adds	r3, #4
 8018a2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018a2e:	68bb      	ldr	r3, [r7, #8]
 8018a30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	da02      	bge.n	8018a3e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018a3e:	68bb      	ldr	r3, [r7, #8]
 8018a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d10c      	bne.n	8018a60 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018a46:	4b34      	ldr	r3, [pc, #208]	; (8018b18 <tcp_output_segment+0x1b4>)
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	68bb      	ldr	r3, [r7, #8]
 8018a4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	68db      	ldr	r3, [r3, #12]
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7f8 ff52 	bl	80118fe <lwip_htonl>
 8018a5a:	4602      	mov	r2, r0
 8018a5c:	68bb      	ldr	r3, [r7, #8]
 8018a5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	68da      	ldr	r2, [r3, #12]
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	685b      	ldr	r3, [r3, #4]
 8018a68:	685b      	ldr	r3, [r3, #4]
 8018a6a:	1ad3      	subs	r3, r2, r3
 8018a6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	685b      	ldr	r3, [r3, #4]
 8018a72:	8959      	ldrh	r1, [r3, #10]
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	685b      	ldr	r3, [r3, #4]
 8018a78:	8b3a      	ldrh	r2, [r7, #24]
 8018a7a:	1a8a      	subs	r2, r1, r2
 8018a7c:	b292      	uxth	r2, r2
 8018a7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	685b      	ldr	r3, [r3, #4]
 8018a84:	8919      	ldrh	r1, [r3, #8]
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	8b3a      	ldrh	r2, [r7, #24]
 8018a8c:	1a8a      	subs	r2, r1, r2
 8018a8e:	b292      	uxth	r2, r2
 8018a90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	685b      	ldr	r3, [r3, #4]
 8018a96:	68fa      	ldr	r2, [r7, #12]
 8018a98:	68d2      	ldr	r2, [r2, #12]
 8018a9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	68db      	ldr	r3, [r3, #12]
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	741a      	strb	r2, [r3, #16]
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	f103 0214 	add.w	r2, r3, #20
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	7a9b      	ldrb	r3, [r3, #10]
 8018ab4:	009b      	lsls	r3, r3, #2
 8018ab6:	f003 0304 	and.w	r3, r3, #4
 8018aba:	4413      	add	r3, r2
 8018abc:	69fa      	ldr	r2, [r7, #28]
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d006      	beq.n	8018ad0 <tcp_output_segment+0x16c>
 8018ac2:	4b10      	ldr	r3, [pc, #64]	; (8018b04 <tcp_output_segment+0x1a0>)
 8018ac4:	f240 621c 	movw	r2, #1564	; 0x61c
 8018ac8:	4914      	ldr	r1, [pc, #80]	; (8018b1c <tcp_output_segment+0x1b8>)
 8018aca:	4810      	ldr	r0, [pc, #64]	; (8018b0c <tcp_output_segment+0x1a8>)
 8018acc:	f004 f9bc 	bl	801ce48 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	6858      	ldr	r0, [r3, #4]
 8018ad4:	68b9      	ldr	r1, [r7, #8]
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	1d1c      	adds	r4, r3, #4
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	7add      	ldrb	r5, [r3, #11]
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	7a9b      	ldrb	r3, [r3, #10]
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	9202      	str	r2, [sp, #8]
 8018ae6:	2206      	movs	r2, #6
 8018ae8:	9201      	str	r2, [sp, #4]
 8018aea:	9300      	str	r3, [sp, #0]
 8018aec:	462b      	mov	r3, r5
 8018aee:	4622      	mov	r2, r4
 8018af0:	f002 fd96 	bl	801b620 <ip4_output_if>
 8018af4:	4603      	mov	r3, r0
 8018af6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	3720      	adds	r7, #32
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bdb0      	pop	{r4, r5, r7, pc}
 8018b04:	0802061c 	.word	0x0802061c
 8018b08:	08020be0 	.word	0x08020be0
 8018b0c:	08020670 	.word	0x08020670
 8018b10:	08020c00 	.word	0x08020c00
 8018b14:	08020c20 	.word	0x08020c20
 8018b18:	2000df1c 	.word	0x2000df1c
 8018b1c:	08020c44 	.word	0x08020c44

08018b20 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018b20:	b5b0      	push	{r4, r5, r7, lr}
 8018b22:	b084      	sub	sp, #16
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d106      	bne.n	8018b3c <tcp_rexmit_rto_prepare+0x1c>
 8018b2e:	4b31      	ldr	r3, [pc, #196]	; (8018bf4 <tcp_rexmit_rto_prepare+0xd4>)
 8018b30:	f240 6263 	movw	r2, #1635	; 0x663
 8018b34:	4930      	ldr	r1, [pc, #192]	; (8018bf8 <tcp_rexmit_rto_prepare+0xd8>)
 8018b36:	4831      	ldr	r0, [pc, #196]	; (8018bfc <tcp_rexmit_rto_prepare+0xdc>)
 8018b38:	f004 f986 	bl	801ce48 <iprintf>

  if (pcb->unacked == NULL) {
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d102      	bne.n	8018b4a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018b44:	f06f 0305 	mvn.w	r3, #5
 8018b48:	e050      	b.n	8018bec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b4e:	60fb      	str	r3, [r7, #12]
 8018b50:	e00b      	b.n	8018b6a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018b52:	68f8      	ldr	r0, [r7, #12]
 8018b54:	f7ff fee6 	bl	8018924 <tcp_output_segment_busy>
 8018b58:	4603      	mov	r3, r0
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d002      	beq.n	8018b64 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018b5e:	f06f 0305 	mvn.w	r3, #5
 8018b62:	e043      	b.n	8018bec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	60fb      	str	r3, [r7, #12]
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d1ef      	bne.n	8018b52 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018b72:	68f8      	ldr	r0, [r7, #12]
 8018b74:	f7ff fed6 	bl	8018924 <tcp_output_segment_busy>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d002      	beq.n	8018b84 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018b7e:	f06f 0305 	mvn.w	r3, #5
 8018b82:	e033      	b.n	8018bec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2200      	movs	r2, #0
 8018b98:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	8b5b      	ldrh	r3, [r3, #26]
 8018b9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018ba2:	b29a      	uxth	r2, r3
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	68db      	ldr	r3, [r3, #12]
 8018bac:	685b      	ldr	r3, [r3, #4]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7f8 fea5 	bl	80118fe <lwip_htonl>
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	891b      	ldrh	r3, [r3, #8]
 8018bba:	461d      	mov	r5, r3
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	68db      	ldr	r3, [r3, #12]
 8018bc0:	899b      	ldrh	r3, [r3, #12]
 8018bc2:	b29b      	uxth	r3, r3
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f7f8 fe85 	bl	80118d4 <lwip_htons>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	f003 0303 	and.w	r3, r3, #3
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d001      	beq.n	8018bda <tcp_rexmit_rto_prepare+0xba>
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	e000      	b.n	8018bdc <tcp_rexmit_rto_prepare+0xbc>
 8018bda:	2300      	movs	r3, #0
 8018bdc:	442b      	add	r3, r5
 8018bde:	18e2      	adds	r2, r4, r3
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	2200      	movs	r2, #0
 8018be8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018bea:	2300      	movs	r3, #0
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	3710      	adds	r7, #16
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8018bf4:	0802061c 	.word	0x0802061c
 8018bf8:	08020c58 	.word	0x08020c58
 8018bfc:	08020670 	.word	0x08020670

08018c00 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b082      	sub	sp, #8
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d106      	bne.n	8018c1c <tcp_rexmit_rto_commit+0x1c>
 8018c0e:	4b0d      	ldr	r3, [pc, #52]	; (8018c44 <tcp_rexmit_rto_commit+0x44>)
 8018c10:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018c14:	490c      	ldr	r1, [pc, #48]	; (8018c48 <tcp_rexmit_rto_commit+0x48>)
 8018c16:	480d      	ldr	r0, [pc, #52]	; (8018c4c <tcp_rexmit_rto_commit+0x4c>)
 8018c18:	f004 f916 	bl	801ce48 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c22:	2bff      	cmp	r3, #255	; 0xff
 8018c24:	d007      	beq.n	8018c36 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c2c:	3301      	adds	r3, #1
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	f7ff fc80 	bl	801853c <tcp_output>
}
 8018c3c:	bf00      	nop
 8018c3e:	3708      	adds	r7, #8
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}
 8018c44:	0802061c 	.word	0x0802061c
 8018c48:	08020c7c 	.word	0x08020c7c
 8018c4c:	08020670 	.word	0x08020670

08018c50 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b082      	sub	sp, #8
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d106      	bne.n	8018c6c <tcp_rexmit_rto+0x1c>
 8018c5e:	4b0a      	ldr	r3, [pc, #40]	; (8018c88 <tcp_rexmit_rto+0x38>)
 8018c60:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018c64:	4909      	ldr	r1, [pc, #36]	; (8018c8c <tcp_rexmit_rto+0x3c>)
 8018c66:	480a      	ldr	r0, [pc, #40]	; (8018c90 <tcp_rexmit_rto+0x40>)
 8018c68:	f004 f8ee 	bl	801ce48 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f7ff ff57 	bl	8018b20 <tcp_rexmit_rto_prepare>
 8018c72:	4603      	mov	r3, r0
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d102      	bne.n	8018c7e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018c78:	6878      	ldr	r0, [r7, #4]
 8018c7a:	f7ff ffc1 	bl	8018c00 <tcp_rexmit_rto_commit>
  }
}
 8018c7e:	bf00      	nop
 8018c80:	3708      	adds	r7, #8
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}
 8018c86:	bf00      	nop
 8018c88:	0802061c 	.word	0x0802061c
 8018c8c:	08020ca0 	.word	0x08020ca0
 8018c90:	08020670 	.word	0x08020670

08018c94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018c94:	b590      	push	{r4, r7, lr}
 8018c96:	b085      	sub	sp, #20
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d106      	bne.n	8018cb0 <tcp_rexmit+0x1c>
 8018ca2:	4b2f      	ldr	r3, [pc, #188]	; (8018d60 <tcp_rexmit+0xcc>)
 8018ca4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018ca8:	492e      	ldr	r1, [pc, #184]	; (8018d64 <tcp_rexmit+0xd0>)
 8018caa:	482f      	ldr	r0, [pc, #188]	; (8018d68 <tcp_rexmit+0xd4>)
 8018cac:	f004 f8cc 	bl	801ce48 <iprintf>

  if (pcb->unacked == NULL) {
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d102      	bne.n	8018cbe <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018cb8:	f06f 0305 	mvn.w	r3, #5
 8018cbc:	e04c      	b.n	8018d58 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cc2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018cc4:	68b8      	ldr	r0, [r7, #8]
 8018cc6:	f7ff fe2d 	bl	8018924 <tcp_output_segment_busy>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d002      	beq.n	8018cd6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018cd0:	f06f 0305 	mvn.w	r3, #5
 8018cd4:	e040      	b.n	8018d58 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	681a      	ldr	r2, [r3, #0]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	336c      	adds	r3, #108	; 0x6c
 8018ce2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ce4:	e002      	b.n	8018cec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d011      	beq.n	8018d18 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	685b      	ldr	r3, [r3, #4]
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	f7f8 fdfe 	bl	80118fe <lwip_htonl>
 8018d02:	4604      	mov	r4, r0
 8018d04:	68bb      	ldr	r3, [r7, #8]
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7f8 fdf7 	bl	80118fe <lwip_htonl>
 8018d10:	4603      	mov	r3, r0
 8018d12:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	dbe6      	blt.n	8018ce6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	681a      	ldr	r2, [r3, #0]
 8018d1c:	68bb      	ldr	r3, [r7, #8]
 8018d1e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	68ba      	ldr	r2, [r7, #8]
 8018d24:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018d26:	68bb      	ldr	r3, [r7, #8]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d103      	bne.n	8018d36 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	2200      	movs	r2, #0
 8018d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018d3c:	2bff      	cmp	r3, #255	; 0xff
 8018d3e:	d007      	beq.n	8018d50 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018d46:	3301      	adds	r3, #1
 8018d48:	b2da      	uxtb	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	2200      	movs	r2, #0
 8018d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018d56:	2300      	movs	r3, #0
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3714      	adds	r7, #20
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd90      	pop	{r4, r7, pc}
 8018d60:	0802061c 	.word	0x0802061c
 8018d64:	08020cbc 	.word	0x08020cbc
 8018d68:	08020670 	.word	0x08020670

08018d6c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b082      	sub	sp, #8
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d106      	bne.n	8018d88 <tcp_rexmit_fast+0x1c>
 8018d7a:	4b2a      	ldr	r3, [pc, #168]	; (8018e24 <tcp_rexmit_fast+0xb8>)
 8018d7c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018d80:	4929      	ldr	r1, [pc, #164]	; (8018e28 <tcp_rexmit_fast+0xbc>)
 8018d82:	482a      	ldr	r0, [pc, #168]	; (8018e2c <tcp_rexmit_fast+0xc0>)
 8018d84:	f004 f860 	bl	801ce48 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d044      	beq.n	8018e1a <tcp_rexmit_fast+0xae>
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	8b5b      	ldrh	r3, [r3, #26]
 8018d94:	f003 0304 	and.w	r3, r3, #4
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d13e      	bne.n	8018e1a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f7ff ff79 	bl	8018c94 <tcp_rexmit>
 8018da2:	4603      	mov	r3, r0
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d138      	bne.n	8018e1a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018db4:	4293      	cmp	r3, r2
 8018db6:	bf28      	it	cs
 8018db8:	4613      	movcs	r3, r2
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	0fda      	lsrs	r2, r3, #31
 8018dbe:	4413      	add	r3, r2
 8018dc0:	105b      	asrs	r3, r3, #1
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018dd0:	461a      	mov	r2, r3
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dd6:	005b      	lsls	r3, r3, #1
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d206      	bcs.n	8018dea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	b29a      	uxth	r2, r3
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018df4:	4619      	mov	r1, r3
 8018df6:	0049      	lsls	r1, r1, #1
 8018df8:	440b      	add	r3, r1
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	4413      	add	r3, r2
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	8b5b      	ldrh	r3, [r3, #26]
 8018e0a:	f043 0304 	orr.w	r3, r3, #4
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2200      	movs	r2, #0
 8018e18:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018e1a:	bf00      	nop
 8018e1c:	3708      	adds	r7, #8
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
 8018e22:	bf00      	nop
 8018e24:	0802061c 	.word	0x0802061c
 8018e28:	08020cd4 	.word	0x08020cd4
 8018e2c:	08020670 	.word	0x08020670

08018e30 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	60f8      	str	r0, [r7, #12]
 8018e38:	607b      	str	r3, [r7, #4]
 8018e3a:	460b      	mov	r3, r1
 8018e3c:	817b      	strh	r3, [r7, #10]
 8018e3e:	4613      	mov	r3, r2
 8018e40:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018e42:	897a      	ldrh	r2, [r7, #10]
 8018e44:	893b      	ldrh	r3, [r7, #8]
 8018e46:	4413      	add	r3, r2
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	3314      	adds	r3, #20
 8018e4c:	b29b      	uxth	r3, r3
 8018e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e52:	4619      	mov	r1, r3
 8018e54:	2022      	movs	r0, #34	; 0x22
 8018e56:	f7f9 fda1 	bl	801299c <pbuf_alloc>
 8018e5a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d04d      	beq.n	8018efe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018e62:	897b      	ldrh	r3, [r7, #10]
 8018e64:	3313      	adds	r3, #19
 8018e66:	697a      	ldr	r2, [r7, #20]
 8018e68:	8952      	ldrh	r2, [r2, #10]
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	db06      	blt.n	8018e7c <tcp_output_alloc_header_common+0x4c>
 8018e6e:	4b26      	ldr	r3, [pc, #152]	; (8018f08 <tcp_output_alloc_header_common+0xd8>)
 8018e70:	f240 7223 	movw	r2, #1827	; 0x723
 8018e74:	4925      	ldr	r1, [pc, #148]	; (8018f0c <tcp_output_alloc_header_common+0xdc>)
 8018e76:	4826      	ldr	r0, [pc, #152]	; (8018f10 <tcp_output_alloc_header_common+0xe0>)
 8018e78:	f003 ffe6 	bl	801ce48 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018e82:	8c3b      	ldrh	r3, [r7, #32]
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7f8 fd25 	bl	80118d4 <lwip_htons>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	461a      	mov	r2, r3
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e94:	4618      	mov	r0, r3
 8018e96:	f7f8 fd1d 	bl	80118d4 <lwip_htons>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	461a      	mov	r2, r3
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018ea2:	693b      	ldr	r3, [r7, #16]
 8018ea4:	687a      	ldr	r2, [r7, #4]
 8018ea6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018ea8:	68f8      	ldr	r0, [r7, #12]
 8018eaa:	f7f8 fd28 	bl	80118fe <lwip_htonl>
 8018eae:	4602      	mov	r2, r0
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018eb4:	897b      	ldrh	r3, [r7, #10]
 8018eb6:	089b      	lsrs	r3, r3, #2
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	3305      	adds	r3, #5
 8018ebc:	b29b      	uxth	r3, r3
 8018ebe:	031b      	lsls	r3, r3, #12
 8018ec0:	b29a      	uxth	r2, r3
 8018ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	4313      	orrs	r3, r2
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7f8 fd01 	bl	80118d4 <lwip_htons>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018eda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7f8 fcf9 	bl	80118d4 <lwip_htons>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	461a      	mov	r2, r3
 8018ee6:	693b      	ldr	r3, [r7, #16]
 8018ee8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018eea:	693b      	ldr	r3, [r7, #16]
 8018eec:	2200      	movs	r2, #0
 8018eee:	741a      	strb	r2, [r3, #16]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	749a      	strb	r2, [r3, #18]
 8018efa:	2200      	movs	r2, #0
 8018efc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018efe:	697b      	ldr	r3, [r7, #20]
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	3718      	adds	r7, #24
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	0802061c 	.word	0x0802061c
 8018f0c:	08020cf4 	.word	0x08020cf4
 8018f10:	08020670 	.word	0x08020670

08018f14 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018f14:	b5b0      	push	{r4, r5, r7, lr}
 8018f16:	b08a      	sub	sp, #40	; 0x28
 8018f18:	af04      	add	r7, sp, #16
 8018f1a:	60f8      	str	r0, [r7, #12]
 8018f1c:	607b      	str	r3, [r7, #4]
 8018f1e:	460b      	mov	r3, r1
 8018f20:	817b      	strh	r3, [r7, #10]
 8018f22:	4613      	mov	r3, r2
 8018f24:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d106      	bne.n	8018f3a <tcp_output_alloc_header+0x26>
 8018f2c:	4b15      	ldr	r3, [pc, #84]	; (8018f84 <tcp_output_alloc_header+0x70>)
 8018f2e:	f240 7242 	movw	r2, #1858	; 0x742
 8018f32:	4915      	ldr	r1, [pc, #84]	; (8018f88 <tcp_output_alloc_header+0x74>)
 8018f34:	4815      	ldr	r0, [pc, #84]	; (8018f8c <tcp_output_alloc_header+0x78>)
 8018f36:	f003 ff87 	bl	801ce48 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	8adb      	ldrh	r3, [r3, #22]
 8018f42:	68fa      	ldr	r2, [r7, #12]
 8018f44:	8b12      	ldrh	r2, [r2, #24]
 8018f46:	68f9      	ldr	r1, [r7, #12]
 8018f48:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018f4a:	893d      	ldrh	r5, [r7, #8]
 8018f4c:	897c      	ldrh	r4, [r7, #10]
 8018f4e:	9103      	str	r1, [sp, #12]
 8018f50:	2110      	movs	r1, #16
 8018f52:	9102      	str	r1, [sp, #8]
 8018f54:	9201      	str	r2, [sp, #4]
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	462a      	mov	r2, r5
 8018f5c:	4621      	mov	r1, r4
 8018f5e:	f7ff ff67 	bl	8018e30 <tcp_output_alloc_header_common>
 8018f62:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018f64:	697b      	ldr	r3, [r7, #20]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d006      	beq.n	8018f78 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f6e:	68fa      	ldr	r2, [r7, #12]
 8018f70:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018f72:	441a      	add	r2, r3
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018f78:	697b      	ldr	r3, [r7, #20]
}
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	3718      	adds	r7, #24
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bdb0      	pop	{r4, r5, r7, pc}
 8018f82:	bf00      	nop
 8018f84:	0802061c 	.word	0x0802061c
 8018f88:	08020d24 	.word	0x08020d24
 8018f8c:	08020670 	.word	0x08020670

08018f90 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b088      	sub	sp, #32
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	60f8      	str	r0, [r7, #12]
 8018f98:	60b9      	str	r1, [r7, #8]
 8018f9a:	4611      	mov	r1, r2
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	460b      	mov	r3, r1
 8018fa0:	71fb      	strb	r3, [r7, #7]
 8018fa2:	4613      	mov	r3, r2
 8018fa4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d106      	bne.n	8018fbe <tcp_output_fill_options+0x2e>
 8018fb0:	4b13      	ldr	r3, [pc, #76]	; (8019000 <tcp_output_fill_options+0x70>)
 8018fb2:	f240 7256 	movw	r2, #1878	; 0x756
 8018fb6:	4913      	ldr	r1, [pc, #76]	; (8019004 <tcp_output_fill_options+0x74>)
 8018fb8:	4813      	ldr	r0, [pc, #76]	; (8019008 <tcp_output_fill_options+0x78>)
 8018fba:	f003 ff45 	bl	801ce48 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018fc4:	69bb      	ldr	r3, [r7, #24]
 8018fc6:	3314      	adds	r3, #20
 8018fc8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018fca:	69bb      	ldr	r3, [r7, #24]
 8018fcc:	f103 0214 	add.w	r2, r3, #20
 8018fd0:	8bfb      	ldrh	r3, [r7, #30]
 8018fd2:	009b      	lsls	r3, r3, #2
 8018fd4:	4619      	mov	r1, r3
 8018fd6:	79fb      	ldrb	r3, [r7, #7]
 8018fd8:	009b      	lsls	r3, r3, #2
 8018fda:	f003 0304 	and.w	r3, r3, #4
 8018fde:	440b      	add	r3, r1
 8018fe0:	4413      	add	r3, r2
 8018fe2:	697a      	ldr	r2, [r7, #20]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d006      	beq.n	8018ff6 <tcp_output_fill_options+0x66>
 8018fe8:	4b05      	ldr	r3, [pc, #20]	; (8019000 <tcp_output_fill_options+0x70>)
 8018fea:	f240 7275 	movw	r2, #1909	; 0x775
 8018fee:	4907      	ldr	r1, [pc, #28]	; (801900c <tcp_output_fill_options+0x7c>)
 8018ff0:	4805      	ldr	r0, [pc, #20]	; (8019008 <tcp_output_fill_options+0x78>)
 8018ff2:	f003 ff29 	bl	801ce48 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018ff6:	bf00      	nop
 8018ff8:	3720      	adds	r7, #32
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}
 8018ffe:	bf00      	nop
 8019000:	0802061c 	.word	0x0802061c
 8019004:	08020d4c 	.word	0x08020d4c
 8019008:	08020670 	.word	0x08020670
 801900c:	08020c44 	.word	0x08020c44

08019010 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b08a      	sub	sp, #40	; 0x28
 8019014:	af04      	add	r7, sp, #16
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
 801901c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d106      	bne.n	8019032 <tcp_output_control_segment+0x22>
 8019024:	4b1c      	ldr	r3, [pc, #112]	; (8019098 <tcp_output_control_segment+0x88>)
 8019026:	f240 7287 	movw	r2, #1927	; 0x787
 801902a:	491c      	ldr	r1, [pc, #112]	; (801909c <tcp_output_control_segment+0x8c>)
 801902c:	481c      	ldr	r0, [pc, #112]	; (80190a0 <tcp_output_control_segment+0x90>)
 801902e:	f003 ff0b 	bl	801ce48 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019032:	683a      	ldr	r2, [r7, #0]
 8019034:	6879      	ldr	r1, [r7, #4]
 8019036:	68f8      	ldr	r0, [r7, #12]
 8019038:	f7fe fae8 	bl	801760c <tcp_route>
 801903c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801903e:	693b      	ldr	r3, [r7, #16]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d102      	bne.n	801904a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019044:	23fc      	movs	r3, #252	; 0xfc
 8019046:	75fb      	strb	r3, [r7, #23]
 8019048:	e01c      	b.n	8019084 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d006      	beq.n	801905e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	7adb      	ldrb	r3, [r3, #11]
 8019054:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	7a9b      	ldrb	r3, [r3, #10]
 801905a:	757b      	strb	r3, [r7, #21]
 801905c:	e003      	b.n	8019066 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801905e:	23ff      	movs	r3, #255	; 0xff
 8019060:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019062:	2300      	movs	r3, #0
 8019064:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019066:	7dba      	ldrb	r2, [r7, #22]
 8019068:	693b      	ldr	r3, [r7, #16]
 801906a:	9302      	str	r3, [sp, #8]
 801906c:	2306      	movs	r3, #6
 801906e:	9301      	str	r3, [sp, #4]
 8019070:	7d7b      	ldrb	r3, [r7, #21]
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	4613      	mov	r3, r2
 8019076:	683a      	ldr	r2, [r7, #0]
 8019078:	6879      	ldr	r1, [r7, #4]
 801907a:	68b8      	ldr	r0, [r7, #8]
 801907c:	f002 fad0 	bl	801b620 <ip4_output_if>
 8019080:	4603      	mov	r3, r0
 8019082:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019084:	68b8      	ldr	r0, [r7, #8]
 8019086:	f7f9 ff6d 	bl	8012f64 <pbuf_free>
  return err;
 801908a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801908e:	4618      	mov	r0, r3
 8019090:	3718      	adds	r7, #24
 8019092:	46bd      	mov	sp, r7
 8019094:	bd80      	pop	{r7, pc}
 8019096:	bf00      	nop
 8019098:	0802061c 	.word	0x0802061c
 801909c:	08020d74 	.word	0x08020d74
 80190a0:	08020670 	.word	0x08020670

080190a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80190a4:	b590      	push	{r4, r7, lr}
 80190a6:	b08b      	sub	sp, #44	; 0x2c
 80190a8:	af04      	add	r7, sp, #16
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	60b9      	str	r1, [r7, #8]
 80190ae:	607a      	str	r2, [r7, #4]
 80190b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d106      	bne.n	80190c6 <tcp_rst+0x22>
 80190b8:	4b1f      	ldr	r3, [pc, #124]	; (8019138 <tcp_rst+0x94>)
 80190ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80190be:	491f      	ldr	r1, [pc, #124]	; (801913c <tcp_rst+0x98>)
 80190c0:	481f      	ldr	r0, [pc, #124]	; (8019140 <tcp_rst+0x9c>)
 80190c2:	f003 fec1 	bl	801ce48 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80190c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d106      	bne.n	80190da <tcp_rst+0x36>
 80190cc:	4b1a      	ldr	r3, [pc, #104]	; (8019138 <tcp_rst+0x94>)
 80190ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80190d2:	491c      	ldr	r1, [pc, #112]	; (8019144 <tcp_rst+0xa0>)
 80190d4:	481a      	ldr	r0, [pc, #104]	; (8019140 <tcp_rst+0x9c>)
 80190d6:	f003 feb7 	bl	801ce48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190da:	2300      	movs	r3, #0
 80190dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80190de:	f246 0308 	movw	r3, #24584	; 0x6008
 80190e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80190e4:	7dfb      	ldrb	r3, [r7, #23]
 80190e6:	b29c      	uxth	r4, r3
 80190e8:	68b8      	ldr	r0, [r7, #8]
 80190ea:	f7f8 fc08 	bl	80118fe <lwip_htonl>
 80190ee:	4602      	mov	r2, r0
 80190f0:	8abb      	ldrh	r3, [r7, #20]
 80190f2:	9303      	str	r3, [sp, #12]
 80190f4:	2314      	movs	r3, #20
 80190f6:	9302      	str	r3, [sp, #8]
 80190f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80190fa:	9301      	str	r3, [sp, #4]
 80190fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80190fe:	9300      	str	r3, [sp, #0]
 8019100:	4613      	mov	r3, r2
 8019102:	2200      	movs	r2, #0
 8019104:	4621      	mov	r1, r4
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f7ff fe92 	bl	8018e30 <tcp_output_alloc_header_common>
 801910c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801910e:	693b      	ldr	r3, [r7, #16]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d00c      	beq.n	801912e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019114:	7dfb      	ldrb	r3, [r7, #23]
 8019116:	2200      	movs	r2, #0
 8019118:	6939      	ldr	r1, [r7, #16]
 801911a:	68f8      	ldr	r0, [r7, #12]
 801911c:	f7ff ff38 	bl	8018f90 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019122:	683a      	ldr	r2, [r7, #0]
 8019124:	6939      	ldr	r1, [r7, #16]
 8019126:	68f8      	ldr	r0, [r7, #12]
 8019128:	f7ff ff72 	bl	8019010 <tcp_output_control_segment>
 801912c:	e000      	b.n	8019130 <tcp_rst+0x8c>
    return;
 801912e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019130:	371c      	adds	r7, #28
 8019132:	46bd      	mov	sp, r7
 8019134:	bd90      	pop	{r4, r7, pc}
 8019136:	bf00      	nop
 8019138:	0802061c 	.word	0x0802061c
 801913c:	08020da0 	.word	0x08020da0
 8019140:	08020670 	.word	0x08020670
 8019144:	08020dbc 	.word	0x08020dbc

08019148 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019148:	b590      	push	{r4, r7, lr}
 801914a:	b087      	sub	sp, #28
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019150:	2300      	movs	r3, #0
 8019152:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019154:	2300      	movs	r3, #0
 8019156:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d106      	bne.n	801916c <tcp_send_empty_ack+0x24>
 801915e:	4b28      	ldr	r3, [pc, #160]	; (8019200 <tcp_send_empty_ack+0xb8>)
 8019160:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019164:	4927      	ldr	r1, [pc, #156]	; (8019204 <tcp_send_empty_ack+0xbc>)
 8019166:	4828      	ldr	r0, [pc, #160]	; (8019208 <tcp_send_empty_ack+0xc0>)
 8019168:	f003 fe6e 	bl	801ce48 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801916c:	7dfb      	ldrb	r3, [r7, #23]
 801916e:	009b      	lsls	r3, r3, #2
 8019170:	b2db      	uxtb	r3, r3
 8019172:	f003 0304 	and.w	r3, r3, #4
 8019176:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019178:	7d7b      	ldrb	r3, [r7, #21]
 801917a:	b29c      	uxth	r4, r3
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019180:	4618      	mov	r0, r3
 8019182:	f7f8 fbbc 	bl	80118fe <lwip_htonl>
 8019186:	4603      	mov	r3, r0
 8019188:	2200      	movs	r2, #0
 801918a:	4621      	mov	r1, r4
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	f7ff fec1 	bl	8018f14 <tcp_output_alloc_header>
 8019192:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d109      	bne.n	80191ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	8b5b      	ldrh	r3, [r3, #26]
 801919e:	f043 0303 	orr.w	r3, r3, #3
 80191a2:	b29a      	uxth	r2, r3
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80191a8:	f06f 0301 	mvn.w	r3, #1
 80191ac:	e023      	b.n	80191f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80191ae:	7dbb      	ldrb	r3, [r7, #22]
 80191b0:	7dfa      	ldrb	r2, [r7, #23]
 80191b2:	6939      	ldr	r1, [r7, #16]
 80191b4:	6878      	ldr	r0, [r7, #4]
 80191b6:	f7ff feeb 	bl	8018f90 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80191ba:	687a      	ldr	r2, [r7, #4]
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	3304      	adds	r3, #4
 80191c0:	6939      	ldr	r1, [r7, #16]
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f7ff ff24 	bl	8019010 <tcp_output_control_segment>
 80191c8:	4603      	mov	r3, r0
 80191ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80191cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d007      	beq.n	80191e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	8b5b      	ldrh	r3, [r3, #26]
 80191d8:	f043 0303 	orr.w	r3, r3, #3
 80191dc:	b29a      	uxth	r2, r3
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	835a      	strh	r2, [r3, #26]
 80191e2:	e006      	b.n	80191f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	8b5b      	ldrh	r3, [r3, #26]
 80191e8:	f023 0303 	bic.w	r3, r3, #3
 80191ec:	b29a      	uxth	r2, r3
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80191f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	371c      	adds	r7, #28
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd90      	pop	{r4, r7, pc}
 80191fe:	bf00      	nop
 8019200:	0802061c 	.word	0x0802061c
 8019204:	08020dd8 	.word	0x08020dd8
 8019208:	08020670 	.word	0x08020670

0801920c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801920c:	b590      	push	{r4, r7, lr}
 801920e:	b087      	sub	sp, #28
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019214:	2300      	movs	r3, #0
 8019216:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d106      	bne.n	801922c <tcp_keepalive+0x20>
 801921e:	4b18      	ldr	r3, [pc, #96]	; (8019280 <tcp_keepalive+0x74>)
 8019220:	f640 0224 	movw	r2, #2084	; 0x824
 8019224:	4917      	ldr	r1, [pc, #92]	; (8019284 <tcp_keepalive+0x78>)
 8019226:	4818      	ldr	r0, [pc, #96]	; (8019288 <tcp_keepalive+0x7c>)
 8019228:	f003 fe0e 	bl	801ce48 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801922c:	7dfb      	ldrb	r3, [r7, #23]
 801922e:	b29c      	uxth	r4, r3
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019234:	3b01      	subs	r3, #1
 8019236:	4618      	mov	r0, r3
 8019238:	f7f8 fb61 	bl	80118fe <lwip_htonl>
 801923c:	4603      	mov	r3, r0
 801923e:	2200      	movs	r2, #0
 8019240:	4621      	mov	r1, r4
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	f7ff fe66 	bl	8018f14 <tcp_output_alloc_header>
 8019248:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d102      	bne.n	8019256 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019250:	f04f 33ff 	mov.w	r3, #4294967295
 8019254:	e010      	b.n	8019278 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019256:	7dfb      	ldrb	r3, [r7, #23]
 8019258:	2200      	movs	r2, #0
 801925a:	6939      	ldr	r1, [r7, #16]
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	f7ff fe97 	bl	8018f90 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019262:	687a      	ldr	r2, [r7, #4]
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	3304      	adds	r3, #4
 8019268:	6939      	ldr	r1, [r7, #16]
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	f7ff fed0 	bl	8019010 <tcp_output_control_segment>
 8019270:	4603      	mov	r3, r0
 8019272:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019278:	4618      	mov	r0, r3
 801927a:	371c      	adds	r7, #28
 801927c:	46bd      	mov	sp, r7
 801927e:	bd90      	pop	{r4, r7, pc}
 8019280:	0802061c 	.word	0x0802061c
 8019284:	08020df8 	.word	0x08020df8
 8019288:	08020670 	.word	0x08020670

0801928c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801928c:	b590      	push	{r4, r7, lr}
 801928e:	b08b      	sub	sp, #44	; 0x2c
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019294:	2300      	movs	r3, #0
 8019296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d106      	bne.n	80192ae <tcp_zero_window_probe+0x22>
 80192a0:	4b4c      	ldr	r3, [pc, #304]	; (80193d4 <tcp_zero_window_probe+0x148>)
 80192a2:	f640 024f 	movw	r2, #2127	; 0x84f
 80192a6:	494c      	ldr	r1, [pc, #304]	; (80193d8 <tcp_zero_window_probe+0x14c>)
 80192a8:	484c      	ldr	r0, [pc, #304]	; (80193dc <tcp_zero_window_probe+0x150>)
 80192aa:	f003 fdcd 	bl	801ce48 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80192b4:	6a3b      	ldr	r3, [r7, #32]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d101      	bne.n	80192be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80192ba:	2300      	movs	r3, #0
 80192bc:	e086      	b.n	80193cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80192c4:	2bff      	cmp	r3, #255	; 0xff
 80192c6:	d007      	beq.n	80192d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80192ce:	3301      	adds	r3, #1
 80192d0:	b2da      	uxtb	r2, r3
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80192d8:	6a3b      	ldr	r3, [r7, #32]
 80192da:	68db      	ldr	r3, [r3, #12]
 80192dc:	899b      	ldrh	r3, [r3, #12]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	4618      	mov	r0, r3
 80192e2:	f7f8 faf7 	bl	80118d4 <lwip_htons>
 80192e6:	4603      	mov	r3, r0
 80192e8:	b2db      	uxtb	r3, r3
 80192ea:	f003 0301 	and.w	r3, r3, #1
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d005      	beq.n	80192fe <tcp_zero_window_probe+0x72>
 80192f2:	6a3b      	ldr	r3, [r7, #32]
 80192f4:	891b      	ldrh	r3, [r3, #8]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d101      	bne.n	80192fe <tcp_zero_window_probe+0x72>
 80192fa:	2301      	movs	r3, #1
 80192fc:	e000      	b.n	8019300 <tcp_zero_window_probe+0x74>
 80192fe:	2300      	movs	r3, #0
 8019300:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019302:	7ffb      	ldrb	r3, [r7, #31]
 8019304:	2b00      	cmp	r3, #0
 8019306:	bf0c      	ite	eq
 8019308:	2301      	moveq	r3, #1
 801930a:	2300      	movne	r3, #0
 801930c:	b2db      	uxtb	r3, r3
 801930e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019314:	b299      	uxth	r1, r3
 8019316:	6a3b      	ldr	r3, [r7, #32]
 8019318:	68db      	ldr	r3, [r3, #12]
 801931a:	685b      	ldr	r3, [r3, #4]
 801931c:	8bba      	ldrh	r2, [r7, #28]
 801931e:	6878      	ldr	r0, [r7, #4]
 8019320:	f7ff fdf8 	bl	8018f14 <tcp_output_alloc_header>
 8019324:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019326:	69bb      	ldr	r3, [r7, #24]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d102      	bne.n	8019332 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801932c:	f04f 33ff 	mov.w	r3, #4294967295
 8019330:	e04c      	b.n	80193cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019332:	69bb      	ldr	r3, [r7, #24]
 8019334:	685b      	ldr	r3, [r3, #4]
 8019336:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019338:	7ffb      	ldrb	r3, [r7, #31]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d011      	beq.n	8019362 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801933e:	697b      	ldr	r3, [r7, #20]
 8019340:	899b      	ldrh	r3, [r3, #12]
 8019342:	b29b      	uxth	r3, r3
 8019344:	b21b      	sxth	r3, r3
 8019346:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801934a:	b21c      	sxth	r4, r3
 801934c:	2011      	movs	r0, #17
 801934e:	f7f8 fac1 	bl	80118d4 <lwip_htons>
 8019352:	4603      	mov	r3, r0
 8019354:	b21b      	sxth	r3, r3
 8019356:	4323      	orrs	r3, r4
 8019358:	b21b      	sxth	r3, r3
 801935a:	b29a      	uxth	r2, r3
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	819a      	strh	r2, [r3, #12]
 8019360:	e010      	b.n	8019384 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019362:	69bb      	ldr	r3, [r7, #24]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	3314      	adds	r3, #20
 8019368:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801936a:	6a3b      	ldr	r3, [r7, #32]
 801936c:	6858      	ldr	r0, [r3, #4]
 801936e:	6a3b      	ldr	r3, [r7, #32]
 8019370:	685b      	ldr	r3, [r3, #4]
 8019372:	891a      	ldrh	r2, [r3, #8]
 8019374:	6a3b      	ldr	r3, [r7, #32]
 8019376:	891b      	ldrh	r3, [r3, #8]
 8019378:	1ad3      	subs	r3, r2, r3
 801937a:	b29b      	uxth	r3, r3
 801937c:	2201      	movs	r2, #1
 801937e:	6939      	ldr	r1, [r7, #16]
 8019380:	f7f9 fff6 	bl	8013370 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019384:	6a3b      	ldr	r3, [r7, #32]
 8019386:	68db      	ldr	r3, [r3, #12]
 8019388:	685b      	ldr	r3, [r3, #4]
 801938a:	4618      	mov	r0, r3
 801938c:	f7f8 fab7 	bl	80118fe <lwip_htonl>
 8019390:	4603      	mov	r3, r0
 8019392:	3301      	adds	r3, #1
 8019394:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	1ad3      	subs	r3, r2, r3
 801939e:	2b00      	cmp	r3, #0
 80193a0:	da02      	bge.n	80193a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	68fa      	ldr	r2, [r7, #12]
 80193a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80193a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193ac:	2200      	movs	r2, #0
 80193ae:	69b9      	ldr	r1, [r7, #24]
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f7ff fded 	bl	8018f90 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80193b6:	687a      	ldr	r2, [r7, #4]
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	3304      	adds	r3, #4
 80193bc:	69b9      	ldr	r1, [r7, #24]
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f7ff fe26 	bl	8019010 <tcp_output_control_segment>
 80193c4:	4603      	mov	r3, r0
 80193c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80193c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80193cc:	4618      	mov	r0, r3
 80193ce:	372c      	adds	r7, #44	; 0x2c
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd90      	pop	{r4, r7, pc}
 80193d4:	0802061c 	.word	0x0802061c
 80193d8:	08020e14 	.word	0x08020e14
 80193dc:	08020670 	.word	0x08020670

080193e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b082      	sub	sp, #8
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80193e8:	f7fa f8b0 	bl	801354c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80193ec:	4b0a      	ldr	r3, [pc, #40]	; (8019418 <tcpip_tcp_timer+0x38>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d103      	bne.n	80193fc <tcpip_tcp_timer+0x1c>
 80193f4:	4b09      	ldr	r3, [pc, #36]	; (801941c <tcpip_tcp_timer+0x3c>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d005      	beq.n	8019408 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80193fc:	2200      	movs	r2, #0
 80193fe:	4908      	ldr	r1, [pc, #32]	; (8019420 <tcpip_tcp_timer+0x40>)
 8019400:	20fa      	movs	r0, #250	; 0xfa
 8019402:	f000 f8f3 	bl	80195ec <sys_timeout>
 8019406:	e003      	b.n	8019410 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019408:	4b06      	ldr	r3, [pc, #24]	; (8019424 <tcpip_tcp_timer+0x44>)
 801940a:	2200      	movs	r2, #0
 801940c:	601a      	str	r2, [r3, #0]
  }
}
 801940e:	bf00      	nop
 8019410:	bf00      	nop
 8019412:	3708      	adds	r7, #8
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}
 8019418:	2000df18 	.word	0x2000df18
 801941c:	2000df28 	.word	0x2000df28
 8019420:	080193e1 	.word	0x080193e1
 8019424:	20006c20 	.word	0x20006c20

08019428 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801942c:	4b0a      	ldr	r3, [pc, #40]	; (8019458 <tcp_timer_needed+0x30>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d10f      	bne.n	8019454 <tcp_timer_needed+0x2c>
 8019434:	4b09      	ldr	r3, [pc, #36]	; (801945c <tcp_timer_needed+0x34>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d103      	bne.n	8019444 <tcp_timer_needed+0x1c>
 801943c:	4b08      	ldr	r3, [pc, #32]	; (8019460 <tcp_timer_needed+0x38>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d007      	beq.n	8019454 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019444:	4b04      	ldr	r3, [pc, #16]	; (8019458 <tcp_timer_needed+0x30>)
 8019446:	2201      	movs	r2, #1
 8019448:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801944a:	2200      	movs	r2, #0
 801944c:	4905      	ldr	r1, [pc, #20]	; (8019464 <tcp_timer_needed+0x3c>)
 801944e:	20fa      	movs	r0, #250	; 0xfa
 8019450:	f000 f8cc 	bl	80195ec <sys_timeout>
  }
}
 8019454:	bf00      	nop
 8019456:	bd80      	pop	{r7, pc}
 8019458:	20006c20 	.word	0x20006c20
 801945c:	2000df18 	.word	0x2000df18
 8019460:	2000df28 	.word	0x2000df28
 8019464:	080193e1 	.word	0x080193e1

08019468 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b086      	sub	sp, #24
 801946c:	af00      	add	r7, sp, #0
 801946e:	60f8      	str	r0, [r7, #12]
 8019470:	60b9      	str	r1, [r7, #8]
 8019472:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019474:	200a      	movs	r0, #10
 8019476:	f7f8 fee3 	bl	8012240 <memp_malloc>
 801947a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801947c:	693b      	ldr	r3, [r7, #16]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d109      	bne.n	8019496 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d151      	bne.n	801952c <sys_timeout_abs+0xc4>
 8019488:	4b2a      	ldr	r3, [pc, #168]	; (8019534 <sys_timeout_abs+0xcc>)
 801948a:	22be      	movs	r2, #190	; 0xbe
 801948c:	492a      	ldr	r1, [pc, #168]	; (8019538 <sys_timeout_abs+0xd0>)
 801948e:	482b      	ldr	r0, [pc, #172]	; (801953c <sys_timeout_abs+0xd4>)
 8019490:	f003 fcda 	bl	801ce48 <iprintf>
    return;
 8019494:	e04a      	b.n	801952c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019496:	693b      	ldr	r3, [r7, #16]
 8019498:	2200      	movs	r2, #0
 801949a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	68ba      	ldr	r2, [r7, #8]
 80194a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	687a      	ldr	r2, [r7, #4]
 80194a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	68fa      	ldr	r2, [r7, #12]
 80194ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80194ae:	4b24      	ldr	r3, [pc, #144]	; (8019540 <sys_timeout_abs+0xd8>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d103      	bne.n	80194be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80194b6:	4a22      	ldr	r2, [pc, #136]	; (8019540 <sys_timeout_abs+0xd8>)
 80194b8:	693b      	ldr	r3, [r7, #16]
 80194ba:	6013      	str	r3, [r2, #0]
    return;
 80194bc:	e037      	b.n	801952e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80194be:	693b      	ldr	r3, [r7, #16]
 80194c0:	685a      	ldr	r2, [r3, #4]
 80194c2:	4b1f      	ldr	r3, [pc, #124]	; (8019540 <sys_timeout_abs+0xd8>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	685b      	ldr	r3, [r3, #4]
 80194c8:	1ad3      	subs	r3, r2, r3
 80194ca:	0fdb      	lsrs	r3, r3, #31
 80194cc:	f003 0301 	and.w	r3, r3, #1
 80194d0:	b2db      	uxtb	r3, r3
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d007      	beq.n	80194e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80194d6:	4b1a      	ldr	r3, [pc, #104]	; (8019540 <sys_timeout_abs+0xd8>)
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80194de:	4a18      	ldr	r2, [pc, #96]	; (8019540 <sys_timeout_abs+0xd8>)
 80194e0:	693b      	ldr	r3, [r7, #16]
 80194e2:	6013      	str	r3, [r2, #0]
 80194e4:	e023      	b.n	801952e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80194e6:	4b16      	ldr	r3, [pc, #88]	; (8019540 <sys_timeout_abs+0xd8>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	617b      	str	r3, [r7, #20]
 80194ec:	e01a      	b.n	8019524 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d00b      	beq.n	801950e <sys_timeout_abs+0xa6>
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	685a      	ldr	r2, [r3, #4]
 80194fa:	697b      	ldr	r3, [r7, #20]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	685b      	ldr	r3, [r3, #4]
 8019500:	1ad3      	subs	r3, r2, r3
 8019502:	0fdb      	lsrs	r3, r3, #31
 8019504:	f003 0301 	and.w	r3, r3, #1
 8019508:	b2db      	uxtb	r3, r3
 801950a:	2b00      	cmp	r3, #0
 801950c:	d007      	beq.n	801951e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	681a      	ldr	r2, [r3, #0]
 8019512:	693b      	ldr	r3, [r7, #16]
 8019514:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019516:	697b      	ldr	r3, [r7, #20]
 8019518:	693a      	ldr	r2, [r7, #16]
 801951a:	601a      	str	r2, [r3, #0]
        break;
 801951c:	e007      	b.n	801952e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	617b      	str	r3, [r7, #20]
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d1e1      	bne.n	80194ee <sys_timeout_abs+0x86>
 801952a:	e000      	b.n	801952e <sys_timeout_abs+0xc6>
    return;
 801952c:	bf00      	nop
      }
    }
  }
}
 801952e:	3718      	adds	r7, #24
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}
 8019534:	08020e38 	.word	0x08020e38
 8019538:	08020e6c 	.word	0x08020e6c
 801953c:	08020eac 	.word	0x08020eac
 8019540:	20006c18 	.word	0x20006c18

08019544 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b086      	sub	sp, #24
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	685b      	ldr	r3, [r3, #4]
 8019554:	4798      	blx	r3

  now = sys_now();
 8019556:	f7f2 fe97 	bl	800c288 <sys_now>
 801955a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	681a      	ldr	r2, [r3, #0]
 8019560:	4b0f      	ldr	r3, [pc, #60]	; (80195a0 <lwip_cyclic_timer+0x5c>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4413      	add	r3, r2
 8019566:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019568:	68fa      	ldr	r2, [r7, #12]
 801956a:	693b      	ldr	r3, [r7, #16]
 801956c:	1ad3      	subs	r3, r2, r3
 801956e:	0fdb      	lsrs	r3, r3, #31
 8019570:	f003 0301 	and.w	r3, r3, #1
 8019574:	b2db      	uxtb	r3, r3
 8019576:	2b00      	cmp	r3, #0
 8019578:	d009      	beq.n	801958e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801957a:	697b      	ldr	r3, [r7, #20]
 801957c:	681a      	ldr	r2, [r3, #0]
 801957e:	693b      	ldr	r3, [r7, #16]
 8019580:	4413      	add	r3, r2
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	4907      	ldr	r1, [pc, #28]	; (80195a4 <lwip_cyclic_timer+0x60>)
 8019586:	4618      	mov	r0, r3
 8019588:	f7ff ff6e 	bl	8019468 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801958c:	e004      	b.n	8019598 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	4904      	ldr	r1, [pc, #16]	; (80195a4 <lwip_cyclic_timer+0x60>)
 8019592:	68f8      	ldr	r0, [r7, #12]
 8019594:	f7ff ff68 	bl	8019468 <sys_timeout_abs>
}
 8019598:	bf00      	nop
 801959a:	3718      	adds	r7, #24
 801959c:	46bd      	mov	sp, r7
 801959e:	bd80      	pop	{r7, pc}
 80195a0:	20006c1c 	.word	0x20006c1c
 80195a4:	08019545 	.word	0x08019545

080195a8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b082      	sub	sp, #8
 80195ac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80195ae:	2301      	movs	r3, #1
 80195b0:	607b      	str	r3, [r7, #4]
 80195b2:	e00e      	b.n	80195d2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80195b4:	4a0b      	ldr	r2, [pc, #44]	; (80195e4 <sys_timeouts_init+0x3c>)
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	00db      	lsls	r3, r3, #3
 80195c0:	4a08      	ldr	r2, [pc, #32]	; (80195e4 <sys_timeouts_init+0x3c>)
 80195c2:	4413      	add	r3, r2
 80195c4:	461a      	mov	r2, r3
 80195c6:	4908      	ldr	r1, [pc, #32]	; (80195e8 <sys_timeouts_init+0x40>)
 80195c8:	f000 f810 	bl	80195ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	3301      	adds	r3, #1
 80195d0:	607b      	str	r3, [r7, #4]
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2b02      	cmp	r3, #2
 80195d6:	d9ed      	bls.n	80195b4 <sys_timeouts_init+0xc>
  }
}
 80195d8:	bf00      	nop
 80195da:	bf00      	nop
 80195dc:	3708      	adds	r7, #8
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}
 80195e2:	bf00      	nop
 80195e4:	08021a64 	.word	0x08021a64
 80195e8:	08019545 	.word	0x08019545

080195ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b086      	sub	sp, #24
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	60f8      	str	r0, [r7, #12]
 80195f4:	60b9      	str	r1, [r7, #8]
 80195f6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80195fe:	d306      	bcc.n	801960e <sys_timeout+0x22>
 8019600:	4b0a      	ldr	r3, [pc, #40]	; (801962c <sys_timeout+0x40>)
 8019602:	f240 1229 	movw	r2, #297	; 0x129
 8019606:	490a      	ldr	r1, [pc, #40]	; (8019630 <sys_timeout+0x44>)
 8019608:	480a      	ldr	r0, [pc, #40]	; (8019634 <sys_timeout+0x48>)
 801960a:	f003 fc1d 	bl	801ce48 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801960e:	f7f2 fe3b 	bl	800c288 <sys_now>
 8019612:	4602      	mov	r2, r0
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	4413      	add	r3, r2
 8019618:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801961a:	687a      	ldr	r2, [r7, #4]
 801961c:	68b9      	ldr	r1, [r7, #8]
 801961e:	6978      	ldr	r0, [r7, #20]
 8019620:	f7ff ff22 	bl	8019468 <sys_timeout_abs>
#endif
}
 8019624:	bf00      	nop
 8019626:	3718      	adds	r7, #24
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	08020e38 	.word	0x08020e38
 8019630:	08020ed4 	.word	0x08020ed4
 8019634:	08020eac 	.word	0x08020eac

08019638 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b084      	sub	sp, #16
 801963c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801963e:	f7f2 fe23 	bl	800c288 <sys_now>
 8019642:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019644:	4b17      	ldr	r3, [pc, #92]	; (80196a4 <sys_check_timeouts+0x6c>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d022      	beq.n	8019696 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	685b      	ldr	r3, [r3, #4]
 8019654:	68fa      	ldr	r2, [r7, #12]
 8019656:	1ad3      	subs	r3, r2, r3
 8019658:	0fdb      	lsrs	r3, r3, #31
 801965a:	f003 0301 	and.w	r3, r3, #1
 801965e:	b2db      	uxtb	r3, r3
 8019660:	2b00      	cmp	r3, #0
 8019662:	d11a      	bne.n	801969a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	4a0e      	ldr	r2, [pc, #56]	; (80196a4 <sys_check_timeouts+0x6c>)
 801966a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	689b      	ldr	r3, [r3, #8]
 8019670:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	68db      	ldr	r3, [r3, #12]
 8019676:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019678:	68bb      	ldr	r3, [r7, #8]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	4a0a      	ldr	r2, [pc, #40]	; (80196a8 <sys_check_timeouts+0x70>)
 801967e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019680:	68b9      	ldr	r1, [r7, #8]
 8019682:	200a      	movs	r0, #10
 8019684:	f7f8 fe2e 	bl	80122e4 <memp_free>
    if (handler != NULL) {
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d0da      	beq.n	8019644 <sys_check_timeouts+0xc>
      handler(arg);
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	6838      	ldr	r0, [r7, #0]
 8019692:	4798      	blx	r3
  do {
 8019694:	e7d6      	b.n	8019644 <sys_check_timeouts+0xc>
      return;
 8019696:	bf00      	nop
 8019698:	e000      	b.n	801969c <sys_check_timeouts+0x64>
      return;
 801969a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801969c:	3710      	adds	r7, #16
 801969e:	46bd      	mov	sp, r7
 80196a0:	bd80      	pop	{r7, pc}
 80196a2:	bf00      	nop
 80196a4:	20006c18 	.word	0x20006c18
 80196a8:	20006c1c 	.word	0x20006c1c

080196ac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b082      	sub	sp, #8
 80196b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80196b2:	4b16      	ldr	r3, [pc, #88]	; (801970c <sys_timeouts_sleeptime+0x60>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d102      	bne.n	80196c0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80196ba:	f04f 33ff 	mov.w	r3, #4294967295
 80196be:	e020      	b.n	8019702 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80196c0:	f7f2 fde2 	bl	800c288 <sys_now>
 80196c4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80196c6:	4b11      	ldr	r3, [pc, #68]	; (801970c <sys_timeouts_sleeptime+0x60>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	685a      	ldr	r2, [r3, #4]
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	1ad3      	subs	r3, r2, r3
 80196d0:	0fdb      	lsrs	r3, r3, #31
 80196d2:	f003 0301 	and.w	r3, r3, #1
 80196d6:	b2db      	uxtb	r3, r3
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d001      	beq.n	80196e0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80196dc:	2300      	movs	r3, #0
 80196de:	e010      	b.n	8019702 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80196e0:	4b0a      	ldr	r3, [pc, #40]	; (801970c <sys_timeouts_sleeptime+0x60>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	685a      	ldr	r2, [r3, #4]
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	1ad3      	subs	r3, r2, r3
 80196ea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	da06      	bge.n	8019700 <sys_timeouts_sleeptime+0x54>
 80196f2:	4b07      	ldr	r3, [pc, #28]	; (8019710 <sys_timeouts_sleeptime+0x64>)
 80196f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80196f8:	4906      	ldr	r1, [pc, #24]	; (8019714 <sys_timeouts_sleeptime+0x68>)
 80196fa:	4807      	ldr	r0, [pc, #28]	; (8019718 <sys_timeouts_sleeptime+0x6c>)
 80196fc:	f003 fba4 	bl	801ce48 <iprintf>
    return ret;
 8019700:	683b      	ldr	r3, [r7, #0]
  }
}
 8019702:	4618      	mov	r0, r3
 8019704:	3708      	adds	r7, #8
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
 801970a:	bf00      	nop
 801970c:	20006c18 	.word	0x20006c18
 8019710:	08020e38 	.word	0x08020e38
 8019714:	08020f0c 	.word	0x08020f0c
 8019718:	08020eac 	.word	0x08020eac

0801971c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019720:	f003 fbaa 	bl	801ce78 <rand>
 8019724:	4603      	mov	r3, r0
 8019726:	b29b      	uxth	r3, r3
 8019728:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801972c:	b29b      	uxth	r3, r3
 801972e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019732:	b29a      	uxth	r2, r3
 8019734:	4b01      	ldr	r3, [pc, #4]	; (801973c <udp_init+0x20>)
 8019736:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019738:	bf00      	nop
 801973a:	bd80      	pop	{r7, pc}
 801973c:	200002f4 	.word	0x200002f4

08019740 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019740:	b480      	push	{r7}
 8019742:	b083      	sub	sp, #12
 8019744:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019746:	2300      	movs	r3, #0
 8019748:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801974a:	4b17      	ldr	r3, [pc, #92]	; (80197a8 <udp_new_port+0x68>)
 801974c:	881b      	ldrh	r3, [r3, #0]
 801974e:	1c5a      	adds	r2, r3, #1
 8019750:	b291      	uxth	r1, r2
 8019752:	4a15      	ldr	r2, [pc, #84]	; (80197a8 <udp_new_port+0x68>)
 8019754:	8011      	strh	r1, [r2, #0]
 8019756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801975a:	4293      	cmp	r3, r2
 801975c:	d103      	bne.n	8019766 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801975e:	4b12      	ldr	r3, [pc, #72]	; (80197a8 <udp_new_port+0x68>)
 8019760:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019764:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019766:	4b11      	ldr	r3, [pc, #68]	; (80197ac <udp_new_port+0x6c>)
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	603b      	str	r3, [r7, #0]
 801976c:	e011      	b.n	8019792 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	8a5a      	ldrh	r2, [r3, #18]
 8019772:	4b0d      	ldr	r3, [pc, #52]	; (80197a8 <udp_new_port+0x68>)
 8019774:	881b      	ldrh	r3, [r3, #0]
 8019776:	429a      	cmp	r2, r3
 8019778:	d108      	bne.n	801978c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801977a:	88fb      	ldrh	r3, [r7, #6]
 801977c:	3301      	adds	r3, #1
 801977e:	80fb      	strh	r3, [r7, #6]
 8019780:	88fb      	ldrh	r3, [r7, #6]
 8019782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019786:	d3e0      	bcc.n	801974a <udp_new_port+0xa>
        return 0;
 8019788:	2300      	movs	r3, #0
 801978a:	e007      	b.n	801979c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	68db      	ldr	r3, [r3, #12]
 8019790:	603b      	str	r3, [r7, #0]
 8019792:	683b      	ldr	r3, [r7, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d1ea      	bne.n	801976e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019798:	4b03      	ldr	r3, [pc, #12]	; (80197a8 <udp_new_port+0x68>)
 801979a:	881b      	ldrh	r3, [r3, #0]
}
 801979c:	4618      	mov	r0, r3
 801979e:	370c      	adds	r7, #12
 80197a0:	46bd      	mov	sp, r7
 80197a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a6:	4770      	bx	lr
 80197a8:	200002f4 	.word	0x200002f4
 80197ac:	2000df30 	.word	0x2000df30

080197b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b084      	sub	sp, #16
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	60f8      	str	r0, [r7, #12]
 80197b8:	60b9      	str	r1, [r7, #8]
 80197ba:	4613      	mov	r3, r2
 80197bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d105      	bne.n	80197d0 <udp_input_local_match+0x20>
 80197c4:	4b27      	ldr	r3, [pc, #156]	; (8019864 <udp_input_local_match+0xb4>)
 80197c6:	2287      	movs	r2, #135	; 0x87
 80197c8:	4927      	ldr	r1, [pc, #156]	; (8019868 <udp_input_local_match+0xb8>)
 80197ca:	4828      	ldr	r0, [pc, #160]	; (801986c <udp_input_local_match+0xbc>)
 80197cc:	f003 fb3c 	bl	801ce48 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d105      	bne.n	80197e2 <udp_input_local_match+0x32>
 80197d6:	4b23      	ldr	r3, [pc, #140]	; (8019864 <udp_input_local_match+0xb4>)
 80197d8:	2288      	movs	r2, #136	; 0x88
 80197da:	4925      	ldr	r1, [pc, #148]	; (8019870 <udp_input_local_match+0xc0>)
 80197dc:	4823      	ldr	r0, [pc, #140]	; (801986c <udp_input_local_match+0xbc>)
 80197de:	f003 fb33 	bl	801ce48 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	7a1b      	ldrb	r3, [r3, #8]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d00b      	beq.n	8019802 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	7a1a      	ldrb	r2, [r3, #8]
 80197ee:	4b21      	ldr	r3, [pc, #132]	; (8019874 <udp_input_local_match+0xc4>)
 80197f0:	685b      	ldr	r3, [r3, #4]
 80197f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80197f6:	3301      	adds	r3, #1
 80197f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d001      	beq.n	8019802 <udp_input_local_match+0x52>
    return 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	e02b      	b.n	801985a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019802:	79fb      	ldrb	r3, [r7, #7]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d018      	beq.n	801983a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d013      	beq.n	8019836 <udp_input_local_match+0x86>
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d00f      	beq.n	8019836 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019816:	4b17      	ldr	r3, [pc, #92]	; (8019874 <udp_input_local_match+0xc4>)
 8019818:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801981e:	d00a      	beq.n	8019836 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	681a      	ldr	r2, [r3, #0]
 8019824:	4b13      	ldr	r3, [pc, #76]	; (8019874 <udp_input_local_match+0xc4>)
 8019826:	695b      	ldr	r3, [r3, #20]
 8019828:	405a      	eors	r2, r3
 801982a:	68bb      	ldr	r3, [r7, #8]
 801982c:	3308      	adds	r3, #8
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019832:	2b00      	cmp	r3, #0
 8019834:	d110      	bne.n	8019858 <udp_input_local_match+0xa8>
          return 1;
 8019836:	2301      	movs	r3, #1
 8019838:	e00f      	b.n	801985a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d009      	beq.n	8019854 <udp_input_local_match+0xa4>
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d005      	beq.n	8019854 <udp_input_local_match+0xa4>
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	681a      	ldr	r2, [r3, #0]
 801984c:	4b09      	ldr	r3, [pc, #36]	; (8019874 <udp_input_local_match+0xc4>)
 801984e:	695b      	ldr	r3, [r3, #20]
 8019850:	429a      	cmp	r2, r3
 8019852:	d101      	bne.n	8019858 <udp_input_local_match+0xa8>
        return 1;
 8019854:	2301      	movs	r3, #1
 8019856:	e000      	b.n	801985a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019858:	2300      	movs	r3, #0
}
 801985a:	4618      	mov	r0, r3
 801985c:	3710      	adds	r7, #16
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}
 8019862:	bf00      	nop
 8019864:	08020f20 	.word	0x08020f20
 8019868:	08020f50 	.word	0x08020f50
 801986c:	08020f74 	.word	0x08020f74
 8019870:	08020f9c 	.word	0x08020f9c
 8019874:	2000a804 	.word	0x2000a804

08019878 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019878:	b590      	push	{r4, r7, lr}
 801987a:	b08d      	sub	sp, #52	; 0x34
 801987c:	af02      	add	r7, sp, #8
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019882:	2300      	movs	r3, #0
 8019884:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d105      	bne.n	8019898 <udp_input+0x20>
 801988c:	4b7c      	ldr	r3, [pc, #496]	; (8019a80 <udp_input+0x208>)
 801988e:	22cf      	movs	r2, #207	; 0xcf
 8019890:	497c      	ldr	r1, [pc, #496]	; (8019a84 <udp_input+0x20c>)
 8019892:	487d      	ldr	r0, [pc, #500]	; (8019a88 <udp_input+0x210>)
 8019894:	f003 fad8 	bl	801ce48 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d105      	bne.n	80198aa <udp_input+0x32>
 801989e:	4b78      	ldr	r3, [pc, #480]	; (8019a80 <udp_input+0x208>)
 80198a0:	22d0      	movs	r2, #208	; 0xd0
 80198a2:	497a      	ldr	r1, [pc, #488]	; (8019a8c <udp_input+0x214>)
 80198a4:	4878      	ldr	r0, [pc, #480]	; (8019a88 <udp_input+0x210>)
 80198a6:	f003 facf 	bl	801ce48 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	895b      	ldrh	r3, [r3, #10]
 80198ae:	2b07      	cmp	r3, #7
 80198b0:	d803      	bhi.n	80198ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80198b2:	6878      	ldr	r0, [r7, #4]
 80198b4:	f7f9 fb56 	bl	8012f64 <pbuf_free>
    goto end;
 80198b8:	e0de      	b.n	8019a78 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80198c0:	4b73      	ldr	r3, [pc, #460]	; (8019a90 <udp_input+0x218>)
 80198c2:	695b      	ldr	r3, [r3, #20]
 80198c4:	4a72      	ldr	r2, [pc, #456]	; (8019a90 <udp_input+0x218>)
 80198c6:	6812      	ldr	r2, [r2, #0]
 80198c8:	4611      	mov	r1, r2
 80198ca:	4618      	mov	r0, r3
 80198cc:	f001 ff80 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 80198d0:	4603      	mov	r3, r0
 80198d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80198d4:	697b      	ldr	r3, [r7, #20]
 80198d6:	881b      	ldrh	r3, [r3, #0]
 80198d8:	b29b      	uxth	r3, r3
 80198da:	4618      	mov	r0, r3
 80198dc:	f7f7 fffa 	bl	80118d4 <lwip_htons>
 80198e0:	4603      	mov	r3, r0
 80198e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	885b      	ldrh	r3, [r3, #2]
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7f7 fff2 	bl	80118d4 <lwip_htons>
 80198f0:	4603      	mov	r3, r0
 80198f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80198f4:	2300      	movs	r3, #0
 80198f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80198f8:	2300      	movs	r3, #0
 80198fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80198fc:	2300      	movs	r3, #0
 80198fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019900:	4b64      	ldr	r3, [pc, #400]	; (8019a94 <udp_input+0x21c>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	627b      	str	r3, [r7, #36]	; 0x24
 8019906:	e054      	b.n	80199b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990a:	8a5b      	ldrh	r3, [r3, #18]
 801990c:	89fa      	ldrh	r2, [r7, #14]
 801990e:	429a      	cmp	r2, r3
 8019910:	d14a      	bne.n	80199a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019912:	7cfb      	ldrb	r3, [r7, #19]
 8019914:	461a      	mov	r2, r3
 8019916:	6839      	ldr	r1, [r7, #0]
 8019918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801991a:	f7ff ff49 	bl	80197b0 <udp_input_local_match>
 801991e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019920:	2b00      	cmp	r3, #0
 8019922:	d041      	beq.n	80199a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019926:	7c1b      	ldrb	r3, [r3, #16]
 8019928:	f003 0304 	and.w	r3, r3, #4
 801992c:	2b00      	cmp	r3, #0
 801992e:	d11d      	bne.n	801996c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d102      	bne.n	801993c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019938:	61fb      	str	r3, [r7, #28]
 801993a:	e017      	b.n	801996c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801993c:	7cfb      	ldrb	r3, [r7, #19]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d014      	beq.n	801996c <udp_input+0xf4>
 8019942:	4b53      	ldr	r3, [pc, #332]	; (8019a90 <udp_input+0x218>)
 8019944:	695b      	ldr	r3, [r3, #20]
 8019946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801994a:	d10f      	bne.n	801996c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801994c:	69fb      	ldr	r3, [r7, #28]
 801994e:	681a      	ldr	r2, [r3, #0]
 8019950:	683b      	ldr	r3, [r7, #0]
 8019952:	3304      	adds	r3, #4
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	429a      	cmp	r2, r3
 8019958:	d008      	beq.n	801996c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995c:	681a      	ldr	r2, [r3, #0]
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	3304      	adds	r3, #4
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	429a      	cmp	r2, r3
 8019966:	d101      	bne.n	801996c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996e:	8a9b      	ldrh	r3, [r3, #20]
 8019970:	8a3a      	ldrh	r2, [r7, #16]
 8019972:	429a      	cmp	r2, r3
 8019974:	d118      	bne.n	80199a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019978:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801997a:	2b00      	cmp	r3, #0
 801997c:	d005      	beq.n	801998a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019980:	685a      	ldr	r2, [r3, #4]
 8019982:	4b43      	ldr	r3, [pc, #268]	; (8019a90 <udp_input+0x218>)
 8019984:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019986:	429a      	cmp	r2, r3
 8019988:	d10e      	bne.n	80199a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801998a:	6a3b      	ldr	r3, [r7, #32]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d014      	beq.n	80199ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019992:	68da      	ldr	r2, [r3, #12]
 8019994:	6a3b      	ldr	r3, [r7, #32]
 8019996:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019998:	4b3e      	ldr	r3, [pc, #248]	; (8019a94 <udp_input+0x21c>)
 801999a:	681a      	ldr	r2, [r3, #0]
 801999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80199a0:	4a3c      	ldr	r2, [pc, #240]	; (8019a94 <udp_input+0x21c>)
 80199a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80199a6:	e008      	b.n	80199ba <udp_input+0x142>
      }
    }

    prev = pcb;
 80199a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80199ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ae:	68db      	ldr	r3, [r3, #12]
 80199b0:	627b      	str	r3, [r7, #36]	; 0x24
 80199b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d1a7      	bne.n	8019908 <udp_input+0x90>
 80199b8:	e000      	b.n	80199bc <udp_input+0x144>
        break;
 80199ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80199bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d101      	bne.n	80199c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80199c2:	69fb      	ldr	r3, [r7, #28]
 80199c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80199c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d002      	beq.n	80199d2 <udp_input+0x15a>
    for_us = 1;
 80199cc:	2301      	movs	r3, #1
 80199ce:	76fb      	strb	r3, [r7, #27]
 80199d0:	e00a      	b.n	80199e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80199d2:	683b      	ldr	r3, [r7, #0]
 80199d4:	3304      	adds	r3, #4
 80199d6:	681a      	ldr	r2, [r3, #0]
 80199d8:	4b2d      	ldr	r3, [pc, #180]	; (8019a90 <udp_input+0x218>)
 80199da:	695b      	ldr	r3, [r3, #20]
 80199dc:	429a      	cmp	r2, r3
 80199de:	bf0c      	ite	eq
 80199e0:	2301      	moveq	r3, #1
 80199e2:	2300      	movne	r3, #0
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80199e8:	7efb      	ldrb	r3, [r7, #27]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d041      	beq.n	8019a72 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80199ee:	2108      	movs	r1, #8
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f7f9 fa31 	bl	8012e58 <pbuf_remove_header>
 80199f6:	4603      	mov	r3, r0
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d00a      	beq.n	8019a12 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80199fc:	4b20      	ldr	r3, [pc, #128]	; (8019a80 <udp_input+0x208>)
 80199fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019a02:	4925      	ldr	r1, [pc, #148]	; (8019a98 <udp_input+0x220>)
 8019a04:	4820      	ldr	r0, [pc, #128]	; (8019a88 <udp_input+0x210>)
 8019a06:	f003 fa1f 	bl	801ce48 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019a0a:	6878      	ldr	r0, [r7, #4]
 8019a0c:	f7f9 faaa 	bl	8012f64 <pbuf_free>
      goto end;
 8019a10:	e032      	b.n	8019a78 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d012      	beq.n	8019a3e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a1a:	699b      	ldr	r3, [r3, #24]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d00a      	beq.n	8019a36 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a22:	699c      	ldr	r4, [r3, #24]
 8019a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a26:	69d8      	ldr	r0, [r3, #28]
 8019a28:	8a3b      	ldrh	r3, [r7, #16]
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	4b1b      	ldr	r3, [pc, #108]	; (8019a9c <udp_input+0x224>)
 8019a2e:	687a      	ldr	r2, [r7, #4]
 8019a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a32:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019a34:	e021      	b.n	8019a7a <udp_input+0x202>
        pbuf_free(p);
 8019a36:	6878      	ldr	r0, [r7, #4]
 8019a38:	f7f9 fa94 	bl	8012f64 <pbuf_free>
        goto end;
 8019a3c:	e01c      	b.n	8019a78 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019a3e:	7cfb      	ldrb	r3, [r7, #19]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d112      	bne.n	8019a6a <udp_input+0x1f2>
 8019a44:	4b12      	ldr	r3, [pc, #72]	; (8019a90 <udp_input+0x218>)
 8019a46:	695b      	ldr	r3, [r3, #20]
 8019a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a4c:	2be0      	cmp	r3, #224	; 0xe0
 8019a4e:	d00c      	beq.n	8019a6a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019a50:	4b0f      	ldr	r3, [pc, #60]	; (8019a90 <udp_input+0x218>)
 8019a52:	899b      	ldrh	r3, [r3, #12]
 8019a54:	3308      	adds	r3, #8
 8019a56:	b29b      	uxth	r3, r3
 8019a58:	b21b      	sxth	r3, r3
 8019a5a:	4619      	mov	r1, r3
 8019a5c:	6878      	ldr	r0, [r7, #4]
 8019a5e:	f7f9 fa6e 	bl	8012f3e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019a62:	2103      	movs	r1, #3
 8019a64:	6878      	ldr	r0, [r7, #4]
 8019a66:	f001 fb93 	bl	801b190 <icmp_dest_unreach>
      pbuf_free(p);
 8019a6a:	6878      	ldr	r0, [r7, #4]
 8019a6c:	f7f9 fa7a 	bl	8012f64 <pbuf_free>
  return;
 8019a70:	e003      	b.n	8019a7a <udp_input+0x202>
    pbuf_free(p);
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f7f9 fa76 	bl	8012f64 <pbuf_free>
  return;
 8019a78:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019a7a:	372c      	adds	r7, #44	; 0x2c
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd90      	pop	{r4, r7, pc}
 8019a80:	08020f20 	.word	0x08020f20
 8019a84:	08020fc4 	.word	0x08020fc4
 8019a88:	08020f74 	.word	0x08020f74
 8019a8c:	08020fdc 	.word	0x08020fdc
 8019a90:	2000a804 	.word	0x2000a804
 8019a94:	2000df30 	.word	0x2000df30
 8019a98:	08020ff8 	.word	0x08020ff8
 8019a9c:	2000a814 	.word	0x2000a814

08019aa0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b082      	sub	sp, #8
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d109      	bne.n	8019ac4 <udp_send+0x24>
 8019ab0:	4b11      	ldr	r3, [pc, #68]	; (8019af8 <udp_send+0x58>)
 8019ab2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019ab6:	4911      	ldr	r1, [pc, #68]	; (8019afc <udp_send+0x5c>)
 8019ab8:	4811      	ldr	r0, [pc, #68]	; (8019b00 <udp_send+0x60>)
 8019aba:	f003 f9c5 	bl	801ce48 <iprintf>
 8019abe:	f06f 030f 	mvn.w	r3, #15
 8019ac2:	e015      	b.n	8019af0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d109      	bne.n	8019ade <udp_send+0x3e>
 8019aca:	4b0b      	ldr	r3, [pc, #44]	; (8019af8 <udp_send+0x58>)
 8019acc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019ad0:	490c      	ldr	r1, [pc, #48]	; (8019b04 <udp_send+0x64>)
 8019ad2:	480b      	ldr	r0, [pc, #44]	; (8019b00 <udp_send+0x60>)
 8019ad4:	f003 f9b8 	bl	801ce48 <iprintf>
 8019ad8:	f06f 030f 	mvn.w	r3, #15
 8019adc:	e008      	b.n	8019af0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	1d1a      	adds	r2, r3, #4
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	8a9b      	ldrh	r3, [r3, #20]
 8019ae6:	6839      	ldr	r1, [r7, #0]
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	f000 f80d 	bl	8019b08 <udp_sendto>
 8019aee:	4603      	mov	r3, r0
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	3708      	adds	r7, #8
 8019af4:	46bd      	mov	sp, r7
 8019af6:	bd80      	pop	{r7, pc}
 8019af8:	08020f20 	.word	0x08020f20
 8019afc:	08021014 	.word	0x08021014
 8019b00:	08020f74 	.word	0x08020f74
 8019b04:	0802102c 	.word	0x0802102c

08019b08 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b088      	sub	sp, #32
 8019b0c:	af02      	add	r7, sp, #8
 8019b0e:	60f8      	str	r0, [r7, #12]
 8019b10:	60b9      	str	r1, [r7, #8]
 8019b12:	607a      	str	r2, [r7, #4]
 8019b14:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d109      	bne.n	8019b30 <udp_sendto+0x28>
 8019b1c:	4b23      	ldr	r3, [pc, #140]	; (8019bac <udp_sendto+0xa4>)
 8019b1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b22:	4923      	ldr	r1, [pc, #140]	; (8019bb0 <udp_sendto+0xa8>)
 8019b24:	4823      	ldr	r0, [pc, #140]	; (8019bb4 <udp_sendto+0xac>)
 8019b26:	f003 f98f 	bl	801ce48 <iprintf>
 8019b2a:	f06f 030f 	mvn.w	r3, #15
 8019b2e:	e038      	b.n	8019ba2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d109      	bne.n	8019b4a <udp_sendto+0x42>
 8019b36:	4b1d      	ldr	r3, [pc, #116]	; (8019bac <udp_sendto+0xa4>)
 8019b38:	f240 2219 	movw	r2, #537	; 0x219
 8019b3c:	491e      	ldr	r1, [pc, #120]	; (8019bb8 <udp_sendto+0xb0>)
 8019b3e:	481d      	ldr	r0, [pc, #116]	; (8019bb4 <udp_sendto+0xac>)
 8019b40:	f003 f982 	bl	801ce48 <iprintf>
 8019b44:	f06f 030f 	mvn.w	r3, #15
 8019b48:	e02b      	b.n	8019ba2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d109      	bne.n	8019b64 <udp_sendto+0x5c>
 8019b50:	4b16      	ldr	r3, [pc, #88]	; (8019bac <udp_sendto+0xa4>)
 8019b52:	f240 221a 	movw	r2, #538	; 0x21a
 8019b56:	4919      	ldr	r1, [pc, #100]	; (8019bbc <udp_sendto+0xb4>)
 8019b58:	4816      	ldr	r0, [pc, #88]	; (8019bb4 <udp_sendto+0xac>)
 8019b5a:	f003 f975 	bl	801ce48 <iprintf>
 8019b5e:	f06f 030f 	mvn.w	r3, #15
 8019b62:	e01e      	b.n	8019ba2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	7a1b      	ldrb	r3, [r3, #8]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d006      	beq.n	8019b7a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	7a1b      	ldrb	r3, [r3, #8]
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7f8 fe69 	bl	8012848 <netif_get_by_index>
 8019b76:	6178      	str	r0, [r7, #20]
 8019b78:	e003      	b.n	8019b82 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019b7a:	6878      	ldr	r0, [r7, #4]
 8019b7c:	f001 fb92 	bl	801b2a4 <ip4_route>
 8019b80:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d102      	bne.n	8019b8e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019b88:	f06f 0303 	mvn.w	r3, #3
 8019b8c:	e009      	b.n	8019ba2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019b8e:	887a      	ldrh	r2, [r7, #2]
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	9300      	str	r3, [sp, #0]
 8019b94:	4613      	mov	r3, r2
 8019b96:	687a      	ldr	r2, [r7, #4]
 8019b98:	68b9      	ldr	r1, [r7, #8]
 8019b9a:	68f8      	ldr	r0, [r7, #12]
 8019b9c:	f000 f810 	bl	8019bc0 <udp_sendto_if>
 8019ba0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	3718      	adds	r7, #24
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
 8019baa:	bf00      	nop
 8019bac:	08020f20 	.word	0x08020f20
 8019bb0:	08021044 	.word	0x08021044
 8019bb4:	08020f74 	.word	0x08020f74
 8019bb8:	0802105c 	.word	0x0802105c
 8019bbc:	08021078 	.word	0x08021078

08019bc0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b088      	sub	sp, #32
 8019bc4:	af02      	add	r7, sp, #8
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	607a      	str	r2, [r7, #4]
 8019bcc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d109      	bne.n	8019be8 <udp_sendto_if+0x28>
 8019bd4:	4b2e      	ldr	r3, [pc, #184]	; (8019c90 <udp_sendto_if+0xd0>)
 8019bd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019bda:	492e      	ldr	r1, [pc, #184]	; (8019c94 <udp_sendto_if+0xd4>)
 8019bdc:	482e      	ldr	r0, [pc, #184]	; (8019c98 <udp_sendto_if+0xd8>)
 8019bde:	f003 f933 	bl	801ce48 <iprintf>
 8019be2:	f06f 030f 	mvn.w	r3, #15
 8019be6:	e04f      	b.n	8019c88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d109      	bne.n	8019c02 <udp_sendto_if+0x42>
 8019bee:	4b28      	ldr	r3, [pc, #160]	; (8019c90 <udp_sendto_if+0xd0>)
 8019bf0:	f240 2281 	movw	r2, #641	; 0x281
 8019bf4:	4929      	ldr	r1, [pc, #164]	; (8019c9c <udp_sendto_if+0xdc>)
 8019bf6:	4828      	ldr	r0, [pc, #160]	; (8019c98 <udp_sendto_if+0xd8>)
 8019bf8:	f003 f926 	bl	801ce48 <iprintf>
 8019bfc:	f06f 030f 	mvn.w	r3, #15
 8019c00:	e042      	b.n	8019c88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d109      	bne.n	8019c1c <udp_sendto_if+0x5c>
 8019c08:	4b21      	ldr	r3, [pc, #132]	; (8019c90 <udp_sendto_if+0xd0>)
 8019c0a:	f240 2282 	movw	r2, #642	; 0x282
 8019c0e:	4924      	ldr	r1, [pc, #144]	; (8019ca0 <udp_sendto_if+0xe0>)
 8019c10:	4821      	ldr	r0, [pc, #132]	; (8019c98 <udp_sendto_if+0xd8>)
 8019c12:	f003 f919 	bl	801ce48 <iprintf>
 8019c16:	f06f 030f 	mvn.w	r3, #15
 8019c1a:	e035      	b.n	8019c88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019c1c:	6a3b      	ldr	r3, [r7, #32]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d109      	bne.n	8019c36 <udp_sendto_if+0x76>
 8019c22:	4b1b      	ldr	r3, [pc, #108]	; (8019c90 <udp_sendto_if+0xd0>)
 8019c24:	f240 2283 	movw	r2, #643	; 0x283
 8019c28:	491e      	ldr	r1, [pc, #120]	; (8019ca4 <udp_sendto_if+0xe4>)
 8019c2a:	481b      	ldr	r0, [pc, #108]	; (8019c98 <udp_sendto_if+0xd8>)
 8019c2c:	f003 f90c 	bl	801ce48 <iprintf>
 8019c30:	f06f 030f 	mvn.w	r3, #15
 8019c34:	e028      	b.n	8019c88 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d009      	beq.n	8019c50 <udp_sendto_if+0x90>
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d005      	beq.n	8019c50 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c4c:	2be0      	cmp	r3, #224	; 0xe0
 8019c4e:	d103      	bne.n	8019c58 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019c50:	6a3b      	ldr	r3, [r7, #32]
 8019c52:	3304      	adds	r3, #4
 8019c54:	617b      	str	r3, [r7, #20]
 8019c56:	e00b      	b.n	8019c70 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	681a      	ldr	r2, [r3, #0]
 8019c5c:	6a3b      	ldr	r3, [r7, #32]
 8019c5e:	3304      	adds	r3, #4
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d002      	beq.n	8019c6c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019c66:	f06f 0303 	mvn.w	r3, #3
 8019c6a:	e00d      	b.n	8019c88 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019c70:	887a      	ldrh	r2, [r7, #2]
 8019c72:	697b      	ldr	r3, [r7, #20]
 8019c74:	9301      	str	r3, [sp, #4]
 8019c76:	6a3b      	ldr	r3, [r7, #32]
 8019c78:	9300      	str	r3, [sp, #0]
 8019c7a:	4613      	mov	r3, r2
 8019c7c:	687a      	ldr	r2, [r7, #4]
 8019c7e:	68b9      	ldr	r1, [r7, #8]
 8019c80:	68f8      	ldr	r0, [r7, #12]
 8019c82:	f000 f811 	bl	8019ca8 <udp_sendto_if_src>
 8019c86:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019c88:	4618      	mov	r0, r3
 8019c8a:	3718      	adds	r7, #24
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	bd80      	pop	{r7, pc}
 8019c90:	08020f20 	.word	0x08020f20
 8019c94:	08021094 	.word	0x08021094
 8019c98:	08020f74 	.word	0x08020f74
 8019c9c:	080210b0 	.word	0x080210b0
 8019ca0:	080210cc 	.word	0x080210cc
 8019ca4:	080210ec 	.word	0x080210ec

08019ca8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b08c      	sub	sp, #48	; 0x30
 8019cac:	af04      	add	r7, sp, #16
 8019cae:	60f8      	str	r0, [r7, #12]
 8019cb0:	60b9      	str	r1, [r7, #8]
 8019cb2:	607a      	str	r2, [r7, #4]
 8019cb4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d109      	bne.n	8019cd0 <udp_sendto_if_src+0x28>
 8019cbc:	4b65      	ldr	r3, [pc, #404]	; (8019e54 <udp_sendto_if_src+0x1ac>)
 8019cbe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019cc2:	4965      	ldr	r1, [pc, #404]	; (8019e58 <udp_sendto_if_src+0x1b0>)
 8019cc4:	4865      	ldr	r0, [pc, #404]	; (8019e5c <udp_sendto_if_src+0x1b4>)
 8019cc6:	f003 f8bf 	bl	801ce48 <iprintf>
 8019cca:	f06f 030f 	mvn.w	r3, #15
 8019cce:	e0bc      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d109      	bne.n	8019cea <udp_sendto_if_src+0x42>
 8019cd6:	4b5f      	ldr	r3, [pc, #380]	; (8019e54 <udp_sendto_if_src+0x1ac>)
 8019cd8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019cdc:	4960      	ldr	r1, [pc, #384]	; (8019e60 <udp_sendto_if_src+0x1b8>)
 8019cde:	485f      	ldr	r0, [pc, #380]	; (8019e5c <udp_sendto_if_src+0x1b4>)
 8019ce0:	f003 f8b2 	bl	801ce48 <iprintf>
 8019ce4:	f06f 030f 	mvn.w	r3, #15
 8019ce8:	e0af      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d109      	bne.n	8019d04 <udp_sendto_if_src+0x5c>
 8019cf0:	4b58      	ldr	r3, [pc, #352]	; (8019e54 <udp_sendto_if_src+0x1ac>)
 8019cf2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019cf6:	495b      	ldr	r1, [pc, #364]	; (8019e64 <udp_sendto_if_src+0x1bc>)
 8019cf8:	4858      	ldr	r0, [pc, #352]	; (8019e5c <udp_sendto_if_src+0x1b4>)
 8019cfa:	f003 f8a5 	bl	801ce48 <iprintf>
 8019cfe:	f06f 030f 	mvn.w	r3, #15
 8019d02:	e0a2      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d109      	bne.n	8019d1e <udp_sendto_if_src+0x76>
 8019d0a:	4b52      	ldr	r3, [pc, #328]	; (8019e54 <udp_sendto_if_src+0x1ac>)
 8019d0c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019d10:	4955      	ldr	r1, [pc, #340]	; (8019e68 <udp_sendto_if_src+0x1c0>)
 8019d12:	4852      	ldr	r0, [pc, #328]	; (8019e5c <udp_sendto_if_src+0x1b4>)
 8019d14:	f003 f898 	bl	801ce48 <iprintf>
 8019d18:	f06f 030f 	mvn.w	r3, #15
 8019d1c:	e095      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d109      	bne.n	8019d38 <udp_sendto_if_src+0x90>
 8019d24:	4b4b      	ldr	r3, [pc, #300]	; (8019e54 <udp_sendto_if_src+0x1ac>)
 8019d26:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019d2a:	4950      	ldr	r1, [pc, #320]	; (8019e6c <udp_sendto_if_src+0x1c4>)
 8019d2c:	484b      	ldr	r0, [pc, #300]	; (8019e5c <udp_sendto_if_src+0x1b4>)
 8019d2e:	f003 f88b 	bl	801ce48 <iprintf>
 8019d32:	f06f 030f 	mvn.w	r3, #15
 8019d36:	e088      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	8a5b      	ldrh	r3, [r3, #18]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d10f      	bne.n	8019d60 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019d40:	68f9      	ldr	r1, [r7, #12]
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	8a5b      	ldrh	r3, [r3, #18]
 8019d46:	461a      	mov	r2, r3
 8019d48:	68f8      	ldr	r0, [r7, #12]
 8019d4a:	f000 f893 	bl	8019e74 <udp_bind>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019d52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d002      	beq.n	8019d60 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019d5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d5e:	e074      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	891b      	ldrh	r3, [r3, #8]
 8019d64:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019d68:	4293      	cmp	r3, r2
 8019d6a:	d902      	bls.n	8019d72 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d70:	e06b      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019d72:	2108      	movs	r1, #8
 8019d74:	68b8      	ldr	r0, [r7, #8]
 8019d76:	f7f9 f85f 	bl	8012e38 <pbuf_add_header>
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d015      	beq.n	8019dac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019d80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d84:	2108      	movs	r1, #8
 8019d86:	2022      	movs	r0, #34	; 0x22
 8019d88:	f7f8 fe08 	bl	801299c <pbuf_alloc>
 8019d8c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d102      	bne.n	8019d9a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019d94:	f04f 33ff 	mov.w	r3, #4294967295
 8019d98:	e057      	b.n	8019e4a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019d9a:	68bb      	ldr	r3, [r7, #8]
 8019d9c:	891b      	ldrh	r3, [r3, #8]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d006      	beq.n	8019db0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019da2:	68b9      	ldr	r1, [r7, #8]
 8019da4:	69f8      	ldr	r0, [r7, #28]
 8019da6:	f7f9 fa01 	bl	80131ac <pbuf_chain>
 8019daa:	e001      	b.n	8019db0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019dac:	68bb      	ldr	r3, [r7, #8]
 8019dae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019db0:	69fb      	ldr	r3, [r7, #28]
 8019db2:	895b      	ldrh	r3, [r3, #10]
 8019db4:	2b07      	cmp	r3, #7
 8019db6:	d806      	bhi.n	8019dc6 <udp_sendto_if_src+0x11e>
 8019db8:	4b26      	ldr	r3, [pc, #152]	; (8019e54 <udp_sendto_if_src+0x1ac>)
 8019dba:	f240 320d 	movw	r2, #781	; 0x30d
 8019dbe:	492c      	ldr	r1, [pc, #176]	; (8019e70 <udp_sendto_if_src+0x1c8>)
 8019dc0:	4826      	ldr	r0, [pc, #152]	; (8019e5c <udp_sendto_if_src+0x1b4>)
 8019dc2:	f003 f841 	bl	801ce48 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019dc6:	69fb      	ldr	r3, [r7, #28]
 8019dc8:	685b      	ldr	r3, [r3, #4]
 8019dca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	8a5b      	ldrh	r3, [r3, #18]
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7f7 fd7f 	bl	80118d4 <lwip_htons>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	461a      	mov	r2, r3
 8019dda:	697b      	ldr	r3, [r7, #20]
 8019ddc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019dde:	887b      	ldrh	r3, [r7, #2]
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7f7 fd77 	bl	80118d4 <lwip_htons>
 8019de6:	4603      	mov	r3, r0
 8019de8:	461a      	mov	r2, r3
 8019dea:	697b      	ldr	r3, [r7, #20]
 8019dec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	2200      	movs	r2, #0
 8019df2:	719a      	strb	r2, [r3, #6]
 8019df4:	2200      	movs	r2, #0
 8019df6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019df8:	69fb      	ldr	r3, [r7, #28]
 8019dfa:	891b      	ldrh	r3, [r3, #8]
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7f7 fd69 	bl	80118d4 <lwip_htons>
 8019e02:	4603      	mov	r3, r0
 8019e04:	461a      	mov	r2, r3
 8019e06:	697b      	ldr	r3, [r7, #20]
 8019e08:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019e0a:	2311      	movs	r3, #17
 8019e0c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	7adb      	ldrb	r3, [r3, #11]
 8019e12:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	7a9b      	ldrb	r3, [r3, #10]
 8019e18:	7cb9      	ldrb	r1, [r7, #18]
 8019e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e1c:	9202      	str	r2, [sp, #8]
 8019e1e:	7cfa      	ldrb	r2, [r7, #19]
 8019e20:	9201      	str	r2, [sp, #4]
 8019e22:	9300      	str	r3, [sp, #0]
 8019e24:	460b      	mov	r3, r1
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019e2a:	69f8      	ldr	r0, [r7, #28]
 8019e2c:	f001 fc22 	bl	801b674 <ip4_output_if_src>
 8019e30:	4603      	mov	r3, r0
 8019e32:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019e34:	69fa      	ldr	r2, [r7, #28]
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d004      	beq.n	8019e46 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019e3c:	69f8      	ldr	r0, [r7, #28]
 8019e3e:	f7f9 f891 	bl	8012f64 <pbuf_free>
    q = NULL;
 8019e42:	2300      	movs	r3, #0
 8019e44:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019e46:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	3720      	adds	r7, #32
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
 8019e52:	bf00      	nop
 8019e54:	08020f20 	.word	0x08020f20
 8019e58:	0802110c 	.word	0x0802110c
 8019e5c:	08020f74 	.word	0x08020f74
 8019e60:	0802112c 	.word	0x0802112c
 8019e64:	0802114c 	.word	0x0802114c
 8019e68:	08021170 	.word	0x08021170
 8019e6c:	08021194 	.word	0x08021194
 8019e70:	080211b8 	.word	0x080211b8

08019e74 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019e74:	b580      	push	{r7, lr}
 8019e76:	b086      	sub	sp, #24
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	60f8      	str	r0, [r7, #12]
 8019e7c:	60b9      	str	r1, [r7, #8]
 8019e7e:	4613      	mov	r3, r2
 8019e80:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019e82:	68bb      	ldr	r3, [r7, #8]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d101      	bne.n	8019e8c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019e88:	4b39      	ldr	r3, [pc, #228]	; (8019f70 <udp_bind+0xfc>)
 8019e8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d109      	bne.n	8019ea6 <udp_bind+0x32>
 8019e92:	4b38      	ldr	r3, [pc, #224]	; (8019f74 <udp_bind+0x100>)
 8019e94:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019e98:	4937      	ldr	r1, [pc, #220]	; (8019f78 <udp_bind+0x104>)
 8019e9a:	4838      	ldr	r0, [pc, #224]	; (8019f7c <udp_bind+0x108>)
 8019e9c:	f002 ffd4 	bl	801ce48 <iprintf>
 8019ea0:	f06f 030f 	mvn.w	r3, #15
 8019ea4:	e060      	b.n	8019f68 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019eaa:	4b35      	ldr	r3, [pc, #212]	; (8019f80 <udp_bind+0x10c>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	617b      	str	r3, [r7, #20]
 8019eb0:	e009      	b.n	8019ec6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019eb2:	68fa      	ldr	r2, [r7, #12]
 8019eb4:	697b      	ldr	r3, [r7, #20]
 8019eb6:	429a      	cmp	r2, r3
 8019eb8:	d102      	bne.n	8019ec0 <udp_bind+0x4c>
      rebind = 1;
 8019eba:	2301      	movs	r3, #1
 8019ebc:	74fb      	strb	r3, [r7, #19]
      break;
 8019ebe:	e005      	b.n	8019ecc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	68db      	ldr	r3, [r3, #12]
 8019ec4:	617b      	str	r3, [r7, #20]
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d1f2      	bne.n	8019eb2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019ecc:	88fb      	ldrh	r3, [r7, #6]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d109      	bne.n	8019ee6 <udp_bind+0x72>
    port = udp_new_port();
 8019ed2:	f7ff fc35 	bl	8019740 <udp_new_port>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019eda:	88fb      	ldrh	r3, [r7, #6]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d12c      	bne.n	8019f3a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019ee0:	f06f 0307 	mvn.w	r3, #7
 8019ee4:	e040      	b.n	8019f68 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ee6:	4b26      	ldr	r3, [pc, #152]	; (8019f80 <udp_bind+0x10c>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	617b      	str	r3, [r7, #20]
 8019eec:	e022      	b.n	8019f34 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019eee:	68fa      	ldr	r2, [r7, #12]
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	429a      	cmp	r2, r3
 8019ef4:	d01b      	beq.n	8019f2e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	8a5b      	ldrh	r3, [r3, #18]
 8019efa:	88fa      	ldrh	r2, [r7, #6]
 8019efc:	429a      	cmp	r2, r3
 8019efe:	d116      	bne.n	8019f2e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f00:	697b      	ldr	r3, [r7, #20]
 8019f02:	681a      	ldr	r2, [r3, #0]
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	d00d      	beq.n	8019f28 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d00a      	beq.n	8019f28 <udp_bind+0xb4>
 8019f12:	68bb      	ldr	r3, [r7, #8]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d006      	beq.n	8019f28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f1a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d003      	beq.n	8019f28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f20:	697b      	ldr	r3, [r7, #20]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d102      	bne.n	8019f2e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019f28:	f06f 0307 	mvn.w	r3, #7
 8019f2c:	e01c      	b.n	8019f68 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f2e:	697b      	ldr	r3, [r7, #20]
 8019f30:	68db      	ldr	r3, [r3, #12]
 8019f32:	617b      	str	r3, [r7, #20]
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d1d9      	bne.n	8019eee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019f3a:	68bb      	ldr	r3, [r7, #8]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d002      	beq.n	8019f46 <udp_bind+0xd2>
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	e000      	b.n	8019f48 <udp_bind+0xd4>
 8019f46:	2300      	movs	r3, #0
 8019f48:	68fa      	ldr	r2, [r7, #12]
 8019f4a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	88fa      	ldrh	r2, [r7, #6]
 8019f50:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019f52:	7cfb      	ldrb	r3, [r7, #19]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d106      	bne.n	8019f66 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019f58:	4b09      	ldr	r3, [pc, #36]	; (8019f80 <udp_bind+0x10c>)
 8019f5a:	681a      	ldr	r2, [r3, #0]
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019f60:	4a07      	ldr	r2, [pc, #28]	; (8019f80 <udp_bind+0x10c>)
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019f66:	2300      	movs	r3, #0
}
 8019f68:	4618      	mov	r0, r3
 8019f6a:	3718      	adds	r7, #24
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bd80      	pop	{r7, pc}
 8019f70:	08021a7c 	.word	0x08021a7c
 8019f74:	08020f20 	.word	0x08020f20
 8019f78:	080211e8 	.word	0x080211e8
 8019f7c:	08020f74 	.word	0x08020f74
 8019f80:	2000df30 	.word	0x2000df30

08019f84 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b084      	sub	sp, #16
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	60f8      	str	r0, [r7, #12]
 8019f8c:	60b9      	str	r1, [r7, #8]
 8019f8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d107      	bne.n	8019fa6 <udp_recv+0x22>
 8019f96:	4b08      	ldr	r3, [pc, #32]	; (8019fb8 <udp_recv+0x34>)
 8019f98:	f240 428a 	movw	r2, #1162	; 0x48a
 8019f9c:	4907      	ldr	r1, [pc, #28]	; (8019fbc <udp_recv+0x38>)
 8019f9e:	4808      	ldr	r0, [pc, #32]	; (8019fc0 <udp_recv+0x3c>)
 8019fa0:	f002 ff52 	bl	801ce48 <iprintf>
 8019fa4:	e005      	b.n	8019fb2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	68ba      	ldr	r2, [r7, #8]
 8019faa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	687a      	ldr	r2, [r7, #4]
 8019fb0:	61da      	str	r2, [r3, #28]
}
 8019fb2:	3710      	adds	r7, #16
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	bd80      	pop	{r7, pc}
 8019fb8:	08020f20 	.word	0x08020f20
 8019fbc:	08021254 	.word	0x08021254
 8019fc0:	08020f74 	.word	0x08020f74

08019fc4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b084      	sub	sp, #16
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d107      	bne.n	8019fe2 <udp_remove+0x1e>
 8019fd2:	4b19      	ldr	r3, [pc, #100]	; (801a038 <udp_remove+0x74>)
 8019fd4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019fd8:	4918      	ldr	r1, [pc, #96]	; (801a03c <udp_remove+0x78>)
 8019fda:	4819      	ldr	r0, [pc, #100]	; (801a040 <udp_remove+0x7c>)
 8019fdc:	f002 ff34 	bl	801ce48 <iprintf>
 8019fe0:	e026      	b.n	801a030 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019fe2:	4b18      	ldr	r3, [pc, #96]	; (801a044 <udp_remove+0x80>)
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	687a      	ldr	r2, [r7, #4]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d105      	bne.n	8019ff8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019fec:	4b15      	ldr	r3, [pc, #84]	; (801a044 <udp_remove+0x80>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	68db      	ldr	r3, [r3, #12]
 8019ff2:	4a14      	ldr	r2, [pc, #80]	; (801a044 <udp_remove+0x80>)
 8019ff4:	6013      	str	r3, [r2, #0]
 8019ff6:	e017      	b.n	801a028 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019ff8:	4b12      	ldr	r3, [pc, #72]	; (801a044 <udp_remove+0x80>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	60fb      	str	r3, [r7, #12]
 8019ffe:	e010      	b.n	801a022 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	68db      	ldr	r3, [r3, #12]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d009      	beq.n	801a01c <udp_remove+0x58>
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	687a      	ldr	r2, [r7, #4]
 801a00e:	429a      	cmp	r2, r3
 801a010:	d104      	bne.n	801a01c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	68da      	ldr	r2, [r3, #12]
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	60da      	str	r2, [r3, #12]
        break;
 801a01a:	e005      	b.n	801a028 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	68db      	ldr	r3, [r3, #12]
 801a020:	60fb      	str	r3, [r7, #12]
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d1eb      	bne.n	801a000 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a028:	6879      	ldr	r1, [r7, #4]
 801a02a:	2000      	movs	r0, #0
 801a02c:	f7f8 f95a 	bl	80122e4 <memp_free>
}
 801a030:	3710      	adds	r7, #16
 801a032:	46bd      	mov	sp, r7
 801a034:	bd80      	pop	{r7, pc}
 801a036:	bf00      	nop
 801a038:	08020f20 	.word	0x08020f20
 801a03c:	0802126c 	.word	0x0802126c
 801a040:	08020f74 	.word	0x08020f74
 801a044:	2000df30 	.word	0x2000df30

0801a048 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a04e:	2000      	movs	r0, #0
 801a050:	f7f8 f8f6 	bl	8012240 <memp_malloc>
 801a054:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d007      	beq.n	801a06c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a05c:	2220      	movs	r2, #32
 801a05e:	2100      	movs	r1, #0
 801a060:	6878      	ldr	r0, [r7, #4]
 801a062:	f002 fe3f 	bl	801cce4 <memset>
    pcb->ttl = UDP_TTL;
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	22ff      	movs	r2, #255	; 0xff
 801a06a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a06c:	687b      	ldr	r3, [r7, #4]
}
 801a06e:	4618      	mov	r0, r3
 801a070:	3708      	adds	r7, #8
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}

0801a076 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a076:	b580      	push	{r7, lr}
 801a078:	b084      	sub	sp, #16
 801a07a:	af00      	add	r7, sp, #0
 801a07c:	4603      	mov	r3, r0
 801a07e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a080:	f7ff ffe2 	bl	801a048 <udp_new>
 801a084:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a086:	68fb      	ldr	r3, [r7, #12]
}
 801a088:	4618      	mov	r0, r3
 801a08a:	3710      	adds	r7, #16
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a090:	b480      	push	{r7}
 801a092:	b085      	sub	sp, #20
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d01e      	beq.n	801a0de <udp_netif_ip_addr_changed+0x4e>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d01a      	beq.n	801a0de <udp_netif_ip_addr_changed+0x4e>
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d017      	beq.n	801a0de <udp_netif_ip_addr_changed+0x4e>
 801a0ae:	683b      	ldr	r3, [r7, #0]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d013      	beq.n	801a0de <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a0b6:	4b0d      	ldr	r3, [pc, #52]	; (801a0ec <udp_netif_ip_addr_changed+0x5c>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	60fb      	str	r3, [r7, #12]
 801a0bc:	e00c      	b.n	801a0d8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	681a      	ldr	r2, [r3, #0]
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	429a      	cmp	r2, r3
 801a0c8:	d103      	bne.n	801a0d2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a0ca:	683b      	ldr	r3, [r7, #0]
 801a0cc:	681a      	ldr	r2, [r3, #0]
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	68db      	ldr	r3, [r3, #12]
 801a0d6:	60fb      	str	r3, [r7, #12]
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d1ef      	bne.n	801a0be <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a0de:	bf00      	nop
 801a0e0:	3714      	adds	r7, #20
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e8:	4770      	bx	lr
 801a0ea:	bf00      	nop
 801a0ec:	2000df30 	.word	0x2000df30

0801a0f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b082      	sub	sp, #8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a0f8:	4915      	ldr	r1, [pc, #84]	; (801a150 <etharp_free_entry+0x60>)
 801a0fa:	687a      	ldr	r2, [r7, #4]
 801a0fc:	4613      	mov	r3, r2
 801a0fe:	005b      	lsls	r3, r3, #1
 801a100:	4413      	add	r3, r2
 801a102:	00db      	lsls	r3, r3, #3
 801a104:	440b      	add	r3, r1
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d013      	beq.n	801a134 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a10c:	4910      	ldr	r1, [pc, #64]	; (801a150 <etharp_free_entry+0x60>)
 801a10e:	687a      	ldr	r2, [r7, #4]
 801a110:	4613      	mov	r3, r2
 801a112:	005b      	lsls	r3, r3, #1
 801a114:	4413      	add	r3, r2
 801a116:	00db      	lsls	r3, r3, #3
 801a118:	440b      	add	r3, r1
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7f8 ff21 	bl	8012f64 <pbuf_free>
    arp_table[i].q = NULL;
 801a122:	490b      	ldr	r1, [pc, #44]	; (801a150 <etharp_free_entry+0x60>)
 801a124:	687a      	ldr	r2, [r7, #4]
 801a126:	4613      	mov	r3, r2
 801a128:	005b      	lsls	r3, r3, #1
 801a12a:	4413      	add	r3, r2
 801a12c:	00db      	lsls	r3, r3, #3
 801a12e:	440b      	add	r3, r1
 801a130:	2200      	movs	r2, #0
 801a132:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a134:	4906      	ldr	r1, [pc, #24]	; (801a150 <etharp_free_entry+0x60>)
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	4613      	mov	r3, r2
 801a13a:	005b      	lsls	r3, r3, #1
 801a13c:	4413      	add	r3, r2
 801a13e:	00db      	lsls	r3, r3, #3
 801a140:	440b      	add	r3, r1
 801a142:	3314      	adds	r3, #20
 801a144:	2200      	movs	r2, #0
 801a146:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a148:	bf00      	nop
 801a14a:	3708      	adds	r7, #8
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}
 801a150:	20006c24 	.word	0x20006c24

0801a154 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b082      	sub	sp, #8
 801a158:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a15a:	2300      	movs	r3, #0
 801a15c:	607b      	str	r3, [r7, #4]
 801a15e:	e096      	b.n	801a28e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a160:	494f      	ldr	r1, [pc, #316]	; (801a2a0 <etharp_tmr+0x14c>)
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	4613      	mov	r3, r2
 801a166:	005b      	lsls	r3, r3, #1
 801a168:	4413      	add	r3, r2
 801a16a:	00db      	lsls	r3, r3, #3
 801a16c:	440b      	add	r3, r1
 801a16e:	3314      	adds	r3, #20
 801a170:	781b      	ldrb	r3, [r3, #0]
 801a172:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a174:	78fb      	ldrb	r3, [r7, #3]
 801a176:	2b00      	cmp	r3, #0
 801a178:	f000 8086 	beq.w	801a288 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a17c:	4948      	ldr	r1, [pc, #288]	; (801a2a0 <etharp_tmr+0x14c>)
 801a17e:	687a      	ldr	r2, [r7, #4]
 801a180:	4613      	mov	r3, r2
 801a182:	005b      	lsls	r3, r3, #1
 801a184:	4413      	add	r3, r2
 801a186:	00db      	lsls	r3, r3, #3
 801a188:	440b      	add	r3, r1
 801a18a:	3312      	adds	r3, #18
 801a18c:	881b      	ldrh	r3, [r3, #0]
 801a18e:	3301      	adds	r3, #1
 801a190:	b298      	uxth	r0, r3
 801a192:	4943      	ldr	r1, [pc, #268]	; (801a2a0 <etharp_tmr+0x14c>)
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	4613      	mov	r3, r2
 801a198:	005b      	lsls	r3, r3, #1
 801a19a:	4413      	add	r3, r2
 801a19c:	00db      	lsls	r3, r3, #3
 801a19e:	440b      	add	r3, r1
 801a1a0:	3312      	adds	r3, #18
 801a1a2:	4602      	mov	r2, r0
 801a1a4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a1a6:	493e      	ldr	r1, [pc, #248]	; (801a2a0 <etharp_tmr+0x14c>)
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	005b      	lsls	r3, r3, #1
 801a1ae:	4413      	add	r3, r2
 801a1b0:	00db      	lsls	r3, r3, #3
 801a1b2:	440b      	add	r3, r1
 801a1b4:	3312      	adds	r3, #18
 801a1b6:	881b      	ldrh	r3, [r3, #0]
 801a1b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801a1bc:	d215      	bcs.n	801a1ea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a1be:	4938      	ldr	r1, [pc, #224]	; (801a2a0 <etharp_tmr+0x14c>)
 801a1c0:	687a      	ldr	r2, [r7, #4]
 801a1c2:	4613      	mov	r3, r2
 801a1c4:	005b      	lsls	r3, r3, #1
 801a1c6:	4413      	add	r3, r2
 801a1c8:	00db      	lsls	r3, r3, #3
 801a1ca:	440b      	add	r3, r1
 801a1cc:	3314      	adds	r3, #20
 801a1ce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a1d0:	2b01      	cmp	r3, #1
 801a1d2:	d10e      	bne.n	801a1f2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a1d4:	4932      	ldr	r1, [pc, #200]	; (801a2a0 <etharp_tmr+0x14c>)
 801a1d6:	687a      	ldr	r2, [r7, #4]
 801a1d8:	4613      	mov	r3, r2
 801a1da:	005b      	lsls	r3, r3, #1
 801a1dc:	4413      	add	r3, r2
 801a1de:	00db      	lsls	r3, r3, #3
 801a1e0:	440b      	add	r3, r1
 801a1e2:	3312      	adds	r3, #18
 801a1e4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a1e6:	2b04      	cmp	r3, #4
 801a1e8:	d903      	bls.n	801a1f2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a1ea:	6878      	ldr	r0, [r7, #4]
 801a1ec:	f7ff ff80 	bl	801a0f0 <etharp_free_entry>
 801a1f0:	e04a      	b.n	801a288 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a1f2:	492b      	ldr	r1, [pc, #172]	; (801a2a0 <etharp_tmr+0x14c>)
 801a1f4:	687a      	ldr	r2, [r7, #4]
 801a1f6:	4613      	mov	r3, r2
 801a1f8:	005b      	lsls	r3, r3, #1
 801a1fa:	4413      	add	r3, r2
 801a1fc:	00db      	lsls	r3, r3, #3
 801a1fe:	440b      	add	r3, r1
 801a200:	3314      	adds	r3, #20
 801a202:	781b      	ldrb	r3, [r3, #0]
 801a204:	2b03      	cmp	r3, #3
 801a206:	d10a      	bne.n	801a21e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a208:	4925      	ldr	r1, [pc, #148]	; (801a2a0 <etharp_tmr+0x14c>)
 801a20a:	687a      	ldr	r2, [r7, #4]
 801a20c:	4613      	mov	r3, r2
 801a20e:	005b      	lsls	r3, r3, #1
 801a210:	4413      	add	r3, r2
 801a212:	00db      	lsls	r3, r3, #3
 801a214:	440b      	add	r3, r1
 801a216:	3314      	adds	r3, #20
 801a218:	2204      	movs	r2, #4
 801a21a:	701a      	strb	r2, [r3, #0]
 801a21c:	e034      	b.n	801a288 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a21e:	4920      	ldr	r1, [pc, #128]	; (801a2a0 <etharp_tmr+0x14c>)
 801a220:	687a      	ldr	r2, [r7, #4]
 801a222:	4613      	mov	r3, r2
 801a224:	005b      	lsls	r3, r3, #1
 801a226:	4413      	add	r3, r2
 801a228:	00db      	lsls	r3, r3, #3
 801a22a:	440b      	add	r3, r1
 801a22c:	3314      	adds	r3, #20
 801a22e:	781b      	ldrb	r3, [r3, #0]
 801a230:	2b04      	cmp	r3, #4
 801a232:	d10a      	bne.n	801a24a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a234:	491a      	ldr	r1, [pc, #104]	; (801a2a0 <etharp_tmr+0x14c>)
 801a236:	687a      	ldr	r2, [r7, #4]
 801a238:	4613      	mov	r3, r2
 801a23a:	005b      	lsls	r3, r3, #1
 801a23c:	4413      	add	r3, r2
 801a23e:	00db      	lsls	r3, r3, #3
 801a240:	440b      	add	r3, r1
 801a242:	3314      	adds	r3, #20
 801a244:	2202      	movs	r2, #2
 801a246:	701a      	strb	r2, [r3, #0]
 801a248:	e01e      	b.n	801a288 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a24a:	4915      	ldr	r1, [pc, #84]	; (801a2a0 <etharp_tmr+0x14c>)
 801a24c:	687a      	ldr	r2, [r7, #4]
 801a24e:	4613      	mov	r3, r2
 801a250:	005b      	lsls	r3, r3, #1
 801a252:	4413      	add	r3, r2
 801a254:	00db      	lsls	r3, r3, #3
 801a256:	440b      	add	r3, r1
 801a258:	3314      	adds	r3, #20
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	2b01      	cmp	r3, #1
 801a25e:	d113      	bne.n	801a288 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a260:	490f      	ldr	r1, [pc, #60]	; (801a2a0 <etharp_tmr+0x14c>)
 801a262:	687a      	ldr	r2, [r7, #4]
 801a264:	4613      	mov	r3, r2
 801a266:	005b      	lsls	r3, r3, #1
 801a268:	4413      	add	r3, r2
 801a26a:	00db      	lsls	r3, r3, #3
 801a26c:	440b      	add	r3, r1
 801a26e:	3308      	adds	r3, #8
 801a270:	6818      	ldr	r0, [r3, #0]
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	4613      	mov	r3, r2
 801a276:	005b      	lsls	r3, r3, #1
 801a278:	4413      	add	r3, r2
 801a27a:	00db      	lsls	r3, r3, #3
 801a27c:	4a08      	ldr	r2, [pc, #32]	; (801a2a0 <etharp_tmr+0x14c>)
 801a27e:	4413      	add	r3, r2
 801a280:	3304      	adds	r3, #4
 801a282:	4619      	mov	r1, r3
 801a284:	f000 fe6e 	bl	801af64 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	3301      	adds	r3, #1
 801a28c:	607b      	str	r3, [r7, #4]
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2b09      	cmp	r3, #9
 801a292:	f77f af65 	ble.w	801a160 <etharp_tmr+0xc>
      }
    }
  }
}
 801a296:	bf00      	nop
 801a298:	bf00      	nop
 801a29a:	3708      	adds	r7, #8
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}
 801a2a0:	20006c24 	.word	0x20006c24

0801a2a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b08a      	sub	sp, #40	; 0x28
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	60f8      	str	r0, [r7, #12]
 801a2ac:	460b      	mov	r3, r1
 801a2ae:	607a      	str	r2, [r7, #4]
 801a2b0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a2b2:	230a      	movs	r3, #10
 801a2b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 801a2b6:	230a      	movs	r3, #10
 801a2b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a2ba:	230a      	movs	r3, #10
 801a2bc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801a2be:	2300      	movs	r3, #0
 801a2c0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a2c2:	230a      	movs	r3, #10
 801a2c4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	83bb      	strh	r3, [r7, #28]
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	837b      	strh	r3, [r7, #26]
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	843b      	strh	r3, [r7, #32]
 801a2d6:	e0ae      	b.n	801a436 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a2d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2dc:	49a6      	ldr	r1, [pc, #664]	; (801a578 <etharp_find_entry+0x2d4>)
 801a2de:	4613      	mov	r3, r2
 801a2e0:	005b      	lsls	r3, r3, #1
 801a2e2:	4413      	add	r3, r2
 801a2e4:	00db      	lsls	r3, r3, #3
 801a2e6:	440b      	add	r3, r1
 801a2e8:	3314      	adds	r3, #20
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a2ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a2f2:	2b0a      	cmp	r3, #10
 801a2f4:	d105      	bne.n	801a302 <etharp_find_entry+0x5e>
 801a2f6:	7dfb      	ldrb	r3, [r7, #23]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d102      	bne.n	801a302 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a2fc:	8c3b      	ldrh	r3, [r7, #32]
 801a2fe:	847b      	strh	r3, [r7, #34]	; 0x22
 801a300:	e095      	b.n	801a42e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a302:	7dfb      	ldrb	r3, [r7, #23]
 801a304:	2b00      	cmp	r3, #0
 801a306:	f000 8092 	beq.w	801a42e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a30a:	7dfb      	ldrb	r3, [r7, #23]
 801a30c:	2b01      	cmp	r3, #1
 801a30e:	d009      	beq.n	801a324 <etharp_find_entry+0x80>
 801a310:	7dfb      	ldrb	r3, [r7, #23]
 801a312:	2b01      	cmp	r3, #1
 801a314:	d806      	bhi.n	801a324 <etharp_find_entry+0x80>
 801a316:	4b99      	ldr	r3, [pc, #612]	; (801a57c <etharp_find_entry+0x2d8>)
 801a318:	f240 1223 	movw	r2, #291	; 0x123
 801a31c:	4998      	ldr	r1, [pc, #608]	; (801a580 <etharp_find_entry+0x2dc>)
 801a31e:	4899      	ldr	r0, [pc, #612]	; (801a584 <etharp_find_entry+0x2e0>)
 801a320:	f002 fd92 	bl	801ce48 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d020      	beq.n	801a36c <etharp_find_entry+0xc8>
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	6819      	ldr	r1, [r3, #0]
 801a32e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a332:	4891      	ldr	r0, [pc, #580]	; (801a578 <etharp_find_entry+0x2d4>)
 801a334:	4613      	mov	r3, r2
 801a336:	005b      	lsls	r3, r3, #1
 801a338:	4413      	add	r3, r2
 801a33a:	00db      	lsls	r3, r3, #3
 801a33c:	4403      	add	r3, r0
 801a33e:	3304      	adds	r3, #4
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	4299      	cmp	r1, r3
 801a344:	d112      	bne.n	801a36c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d00c      	beq.n	801a366 <etharp_find_entry+0xc2>
 801a34c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a350:	4989      	ldr	r1, [pc, #548]	; (801a578 <etharp_find_entry+0x2d4>)
 801a352:	4613      	mov	r3, r2
 801a354:	005b      	lsls	r3, r3, #1
 801a356:	4413      	add	r3, r2
 801a358:	00db      	lsls	r3, r3, #3
 801a35a:	440b      	add	r3, r1
 801a35c:	3308      	adds	r3, #8
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	687a      	ldr	r2, [r7, #4]
 801a362:	429a      	cmp	r2, r3
 801a364:	d102      	bne.n	801a36c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a366:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a36a:	e100      	b.n	801a56e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a36c:	7dfb      	ldrb	r3, [r7, #23]
 801a36e:	2b01      	cmp	r3, #1
 801a370:	d140      	bne.n	801a3f4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a372:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a376:	4980      	ldr	r1, [pc, #512]	; (801a578 <etharp_find_entry+0x2d4>)
 801a378:	4613      	mov	r3, r2
 801a37a:	005b      	lsls	r3, r3, #1
 801a37c:	4413      	add	r3, r2
 801a37e:	00db      	lsls	r3, r3, #3
 801a380:	440b      	add	r3, r1
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d01a      	beq.n	801a3be <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a388:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a38c:	497a      	ldr	r1, [pc, #488]	; (801a578 <etharp_find_entry+0x2d4>)
 801a38e:	4613      	mov	r3, r2
 801a390:	005b      	lsls	r3, r3, #1
 801a392:	4413      	add	r3, r2
 801a394:	00db      	lsls	r3, r3, #3
 801a396:	440b      	add	r3, r1
 801a398:	3312      	adds	r3, #18
 801a39a:	881b      	ldrh	r3, [r3, #0]
 801a39c:	8bba      	ldrh	r2, [r7, #28]
 801a39e:	429a      	cmp	r2, r3
 801a3a0:	d845      	bhi.n	801a42e <etharp_find_entry+0x18a>
            old_queue = i;
 801a3a2:	8c3b      	ldrh	r3, [r7, #32]
 801a3a4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a3a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3aa:	4973      	ldr	r1, [pc, #460]	; (801a578 <etharp_find_entry+0x2d4>)
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	005b      	lsls	r3, r3, #1
 801a3b0:	4413      	add	r3, r2
 801a3b2:	00db      	lsls	r3, r3, #3
 801a3b4:	440b      	add	r3, r1
 801a3b6:	3312      	adds	r3, #18
 801a3b8:	881b      	ldrh	r3, [r3, #0]
 801a3ba:	83bb      	strh	r3, [r7, #28]
 801a3bc:	e037      	b.n	801a42e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a3be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3c2:	496d      	ldr	r1, [pc, #436]	; (801a578 <etharp_find_entry+0x2d4>)
 801a3c4:	4613      	mov	r3, r2
 801a3c6:	005b      	lsls	r3, r3, #1
 801a3c8:	4413      	add	r3, r2
 801a3ca:	00db      	lsls	r3, r3, #3
 801a3cc:	440b      	add	r3, r1
 801a3ce:	3312      	adds	r3, #18
 801a3d0:	881b      	ldrh	r3, [r3, #0]
 801a3d2:	8b7a      	ldrh	r2, [r7, #26]
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	d82a      	bhi.n	801a42e <etharp_find_entry+0x18a>
            old_pending = i;
 801a3d8:	8c3b      	ldrh	r3, [r7, #32]
 801a3da:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a3dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3e0:	4965      	ldr	r1, [pc, #404]	; (801a578 <etharp_find_entry+0x2d4>)
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	005b      	lsls	r3, r3, #1
 801a3e6:	4413      	add	r3, r2
 801a3e8:	00db      	lsls	r3, r3, #3
 801a3ea:	440b      	add	r3, r1
 801a3ec:	3312      	adds	r3, #18
 801a3ee:	881b      	ldrh	r3, [r3, #0]
 801a3f0:	837b      	strh	r3, [r7, #26]
 801a3f2:	e01c      	b.n	801a42e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a3f4:	7dfb      	ldrb	r3, [r7, #23]
 801a3f6:	2b01      	cmp	r3, #1
 801a3f8:	d919      	bls.n	801a42e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a3fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3fe:	495e      	ldr	r1, [pc, #376]	; (801a578 <etharp_find_entry+0x2d4>)
 801a400:	4613      	mov	r3, r2
 801a402:	005b      	lsls	r3, r3, #1
 801a404:	4413      	add	r3, r2
 801a406:	00db      	lsls	r3, r3, #3
 801a408:	440b      	add	r3, r1
 801a40a:	3312      	adds	r3, #18
 801a40c:	881b      	ldrh	r3, [r3, #0]
 801a40e:	8b3a      	ldrh	r2, [r7, #24]
 801a410:	429a      	cmp	r2, r3
 801a412:	d80c      	bhi.n	801a42e <etharp_find_entry+0x18a>
            old_stable = i;
 801a414:	8c3b      	ldrh	r3, [r7, #32]
 801a416:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a41c:	4956      	ldr	r1, [pc, #344]	; (801a578 <etharp_find_entry+0x2d4>)
 801a41e:	4613      	mov	r3, r2
 801a420:	005b      	lsls	r3, r3, #1
 801a422:	4413      	add	r3, r2
 801a424:	00db      	lsls	r3, r3, #3
 801a426:	440b      	add	r3, r1
 801a428:	3312      	adds	r3, #18
 801a42a:	881b      	ldrh	r3, [r3, #0]
 801a42c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a42e:	8c3b      	ldrh	r3, [r7, #32]
 801a430:	3301      	adds	r3, #1
 801a432:	b29b      	uxth	r3, r3
 801a434:	843b      	strh	r3, [r7, #32]
 801a436:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a43a:	2b09      	cmp	r3, #9
 801a43c:	f77f af4c 	ble.w	801a2d8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a440:	7afb      	ldrb	r3, [r7, #11]
 801a442:	f003 0302 	and.w	r3, r3, #2
 801a446:	2b00      	cmp	r3, #0
 801a448:	d108      	bne.n	801a45c <etharp_find_entry+0x1b8>
 801a44a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a44e:	2b0a      	cmp	r3, #10
 801a450:	d107      	bne.n	801a462 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a452:	7afb      	ldrb	r3, [r7, #11]
 801a454:	f003 0301 	and.w	r3, r3, #1
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d102      	bne.n	801a462 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a45c:	f04f 33ff 	mov.w	r3, #4294967295
 801a460:	e085      	b.n	801a56e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a462:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a466:	2b09      	cmp	r3, #9
 801a468:	dc02      	bgt.n	801a470 <etharp_find_entry+0x1cc>
    i = empty;
 801a46a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a46c:	843b      	strh	r3, [r7, #32]
 801a46e:	e039      	b.n	801a4e4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a470:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a474:	2b09      	cmp	r3, #9
 801a476:	dc14      	bgt.n	801a4a2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a47a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a47c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a480:	493d      	ldr	r1, [pc, #244]	; (801a578 <etharp_find_entry+0x2d4>)
 801a482:	4613      	mov	r3, r2
 801a484:	005b      	lsls	r3, r3, #1
 801a486:	4413      	add	r3, r2
 801a488:	00db      	lsls	r3, r3, #3
 801a48a:	440b      	add	r3, r1
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d018      	beq.n	801a4c4 <etharp_find_entry+0x220>
 801a492:	4b3a      	ldr	r3, [pc, #232]	; (801a57c <etharp_find_entry+0x2d8>)
 801a494:	f240 126d 	movw	r2, #365	; 0x16d
 801a498:	493b      	ldr	r1, [pc, #236]	; (801a588 <etharp_find_entry+0x2e4>)
 801a49a:	483a      	ldr	r0, [pc, #232]	; (801a584 <etharp_find_entry+0x2e0>)
 801a49c:	f002 fcd4 	bl	801ce48 <iprintf>
 801a4a0:	e010      	b.n	801a4c4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a4a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a4a6:	2b09      	cmp	r3, #9
 801a4a8:	dc02      	bgt.n	801a4b0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a4aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a4ac:	843b      	strh	r3, [r7, #32]
 801a4ae:	e009      	b.n	801a4c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a4b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a4b4:	2b09      	cmp	r3, #9
 801a4b6:	dc02      	bgt.n	801a4be <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a4b8:	8bfb      	ldrh	r3, [r7, #30]
 801a4ba:	843b      	strh	r3, [r7, #32]
 801a4bc:	e002      	b.n	801a4c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a4be:	f04f 33ff 	mov.w	r3, #4294967295
 801a4c2:	e054      	b.n	801a56e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a4c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4c8:	2b09      	cmp	r3, #9
 801a4ca:	dd06      	ble.n	801a4da <etharp_find_entry+0x236>
 801a4cc:	4b2b      	ldr	r3, [pc, #172]	; (801a57c <etharp_find_entry+0x2d8>)
 801a4ce:	f240 127f 	movw	r2, #383	; 0x17f
 801a4d2:	492e      	ldr	r1, [pc, #184]	; (801a58c <etharp_find_entry+0x2e8>)
 801a4d4:	482b      	ldr	r0, [pc, #172]	; (801a584 <etharp_find_entry+0x2e0>)
 801a4d6:	f002 fcb7 	bl	801ce48 <iprintf>
    etharp_free_entry(i);
 801a4da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f7ff fe06 	bl	801a0f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a4e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4e8:	2b09      	cmp	r3, #9
 801a4ea:	dd06      	ble.n	801a4fa <etharp_find_entry+0x256>
 801a4ec:	4b23      	ldr	r3, [pc, #140]	; (801a57c <etharp_find_entry+0x2d8>)
 801a4ee:	f240 1283 	movw	r2, #387	; 0x183
 801a4f2:	4926      	ldr	r1, [pc, #152]	; (801a58c <etharp_find_entry+0x2e8>)
 801a4f4:	4823      	ldr	r0, [pc, #140]	; (801a584 <etharp_find_entry+0x2e0>)
 801a4f6:	f002 fca7 	bl	801ce48 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4fe:	491e      	ldr	r1, [pc, #120]	; (801a578 <etharp_find_entry+0x2d4>)
 801a500:	4613      	mov	r3, r2
 801a502:	005b      	lsls	r3, r3, #1
 801a504:	4413      	add	r3, r2
 801a506:	00db      	lsls	r3, r3, #3
 801a508:	440b      	add	r3, r1
 801a50a:	3314      	adds	r3, #20
 801a50c:	781b      	ldrb	r3, [r3, #0]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d006      	beq.n	801a520 <etharp_find_entry+0x27c>
 801a512:	4b1a      	ldr	r3, [pc, #104]	; (801a57c <etharp_find_entry+0x2d8>)
 801a514:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a518:	491d      	ldr	r1, [pc, #116]	; (801a590 <etharp_find_entry+0x2ec>)
 801a51a:	481a      	ldr	r0, [pc, #104]	; (801a584 <etharp_find_entry+0x2e0>)
 801a51c:	f002 fc94 	bl	801ce48 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d00b      	beq.n	801a53e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a526:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	6819      	ldr	r1, [r3, #0]
 801a52e:	4812      	ldr	r0, [pc, #72]	; (801a578 <etharp_find_entry+0x2d4>)
 801a530:	4613      	mov	r3, r2
 801a532:	005b      	lsls	r3, r3, #1
 801a534:	4413      	add	r3, r2
 801a536:	00db      	lsls	r3, r3, #3
 801a538:	4403      	add	r3, r0
 801a53a:	3304      	adds	r3, #4
 801a53c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a53e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a542:	490d      	ldr	r1, [pc, #52]	; (801a578 <etharp_find_entry+0x2d4>)
 801a544:	4613      	mov	r3, r2
 801a546:	005b      	lsls	r3, r3, #1
 801a548:	4413      	add	r3, r2
 801a54a:	00db      	lsls	r3, r3, #3
 801a54c:	440b      	add	r3, r1
 801a54e:	3312      	adds	r3, #18
 801a550:	2200      	movs	r2, #0
 801a552:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a558:	4907      	ldr	r1, [pc, #28]	; (801a578 <etharp_find_entry+0x2d4>)
 801a55a:	4613      	mov	r3, r2
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	4413      	add	r3, r2
 801a560:	00db      	lsls	r3, r3, #3
 801a562:	440b      	add	r3, r1
 801a564:	3308      	adds	r3, #8
 801a566:	687a      	ldr	r2, [r7, #4]
 801a568:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a56a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3728      	adds	r7, #40	; 0x28
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}
 801a576:	bf00      	nop
 801a578:	20006c24 	.word	0x20006c24
 801a57c:	08021284 	.word	0x08021284
 801a580:	080212bc 	.word	0x080212bc
 801a584:	080212fc 	.word	0x080212fc
 801a588:	08021324 	.word	0x08021324
 801a58c:	0802133c 	.word	0x0802133c
 801a590:	08021350 	.word	0x08021350

0801a594 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b088      	sub	sp, #32
 801a598:	af02      	add	r7, sp, #8
 801a59a:	60f8      	str	r0, [r7, #12]
 801a59c:	60b9      	str	r1, [r7, #8]
 801a59e:	607a      	str	r2, [r7, #4]
 801a5a0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a5a8:	2b06      	cmp	r3, #6
 801a5aa:	d006      	beq.n	801a5ba <etharp_update_arp_entry+0x26>
 801a5ac:	4b48      	ldr	r3, [pc, #288]	; (801a6d0 <etharp_update_arp_entry+0x13c>)
 801a5ae:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a5b2:	4948      	ldr	r1, [pc, #288]	; (801a6d4 <etharp_update_arp_entry+0x140>)
 801a5b4:	4848      	ldr	r0, [pc, #288]	; (801a6d8 <etharp_update_arp_entry+0x144>)
 801a5b6:	f002 fc47 	bl	801ce48 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a5ba:	68bb      	ldr	r3, [r7, #8]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d012      	beq.n	801a5e6 <etharp_update_arp_entry+0x52>
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d00e      	beq.n	801a5e6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	68f9      	ldr	r1, [r7, #12]
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f001 f8fe 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801a5d4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d105      	bne.n	801a5e6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a5da:	68bb      	ldr	r3, [r7, #8]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a5e2:	2be0      	cmp	r3, #224	; 0xe0
 801a5e4:	d102      	bne.n	801a5ec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a5e6:	f06f 030f 	mvn.w	r3, #15
 801a5ea:	e06c      	b.n	801a6c6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a5ec:	78fb      	ldrb	r3, [r7, #3]
 801a5ee:	68fa      	ldr	r2, [r7, #12]
 801a5f0:	4619      	mov	r1, r3
 801a5f2:	68b8      	ldr	r0, [r7, #8]
 801a5f4:	f7ff fe56 	bl	801a2a4 <etharp_find_entry>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a5fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a600:	2b00      	cmp	r3, #0
 801a602:	da02      	bge.n	801a60a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a604:	8afb      	ldrh	r3, [r7, #22]
 801a606:	b25b      	sxtb	r3, r3
 801a608:	e05d      	b.n	801a6c6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a60a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a60e:	4933      	ldr	r1, [pc, #204]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a610:	4613      	mov	r3, r2
 801a612:	005b      	lsls	r3, r3, #1
 801a614:	4413      	add	r3, r2
 801a616:	00db      	lsls	r3, r3, #3
 801a618:	440b      	add	r3, r1
 801a61a:	3314      	adds	r3, #20
 801a61c:	2202      	movs	r2, #2
 801a61e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a620:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a624:	492d      	ldr	r1, [pc, #180]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a626:	4613      	mov	r3, r2
 801a628:	005b      	lsls	r3, r3, #1
 801a62a:	4413      	add	r3, r2
 801a62c:	00db      	lsls	r3, r3, #3
 801a62e:	440b      	add	r3, r1
 801a630:	3308      	adds	r3, #8
 801a632:	68fa      	ldr	r2, [r7, #12]
 801a634:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a636:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a63a:	4613      	mov	r3, r2
 801a63c:	005b      	lsls	r3, r3, #1
 801a63e:	4413      	add	r3, r2
 801a640:	00db      	lsls	r3, r3, #3
 801a642:	3308      	adds	r3, #8
 801a644:	4a25      	ldr	r2, [pc, #148]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a646:	4413      	add	r3, r2
 801a648:	3304      	adds	r3, #4
 801a64a:	2206      	movs	r2, #6
 801a64c:	6879      	ldr	r1, [r7, #4]
 801a64e:	4618      	mov	r0, r3
 801a650:	f002 fb20 	bl	801cc94 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a658:	4920      	ldr	r1, [pc, #128]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a65a:	4613      	mov	r3, r2
 801a65c:	005b      	lsls	r3, r3, #1
 801a65e:	4413      	add	r3, r2
 801a660:	00db      	lsls	r3, r3, #3
 801a662:	440b      	add	r3, r1
 801a664:	3312      	adds	r3, #18
 801a666:	2200      	movs	r2, #0
 801a668:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a66a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a66e:	491b      	ldr	r1, [pc, #108]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a670:	4613      	mov	r3, r2
 801a672:	005b      	lsls	r3, r3, #1
 801a674:	4413      	add	r3, r2
 801a676:	00db      	lsls	r3, r3, #3
 801a678:	440b      	add	r3, r1
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d021      	beq.n	801a6c4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a680:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a684:	4915      	ldr	r1, [pc, #84]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a686:	4613      	mov	r3, r2
 801a688:	005b      	lsls	r3, r3, #1
 801a68a:	4413      	add	r3, r2
 801a68c:	00db      	lsls	r3, r3, #3
 801a68e:	440b      	add	r3, r1
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a694:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a698:	4910      	ldr	r1, [pc, #64]	; (801a6dc <etharp_update_arp_entry+0x148>)
 801a69a:	4613      	mov	r3, r2
 801a69c:	005b      	lsls	r3, r3, #1
 801a69e:	4413      	add	r3, r2
 801a6a0:	00db      	lsls	r3, r3, #3
 801a6a2:	440b      	add	r3, r1
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a6ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a6b2:	9300      	str	r3, [sp, #0]
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	6939      	ldr	r1, [r7, #16]
 801a6b8:	68f8      	ldr	r0, [r7, #12]
 801a6ba:	f001 ff91 	bl	801c5e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a6be:	6938      	ldr	r0, [r7, #16]
 801a6c0:	f7f8 fc50 	bl	8012f64 <pbuf_free>
  }
  return ERR_OK;
 801a6c4:	2300      	movs	r3, #0
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	3718      	adds	r7, #24
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	08021284 	.word	0x08021284
 801a6d4:	0802137c 	.word	0x0802137c
 801a6d8:	080212fc 	.word	0x080212fc
 801a6dc:	20006c24 	.word	0x20006c24

0801a6e0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b084      	sub	sp, #16
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	60fb      	str	r3, [r7, #12]
 801a6ec:	e01e      	b.n	801a72c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a6ee:	4913      	ldr	r1, [pc, #76]	; (801a73c <etharp_cleanup_netif+0x5c>)
 801a6f0:	68fa      	ldr	r2, [r7, #12]
 801a6f2:	4613      	mov	r3, r2
 801a6f4:	005b      	lsls	r3, r3, #1
 801a6f6:	4413      	add	r3, r2
 801a6f8:	00db      	lsls	r3, r3, #3
 801a6fa:	440b      	add	r3, r1
 801a6fc:	3314      	adds	r3, #20
 801a6fe:	781b      	ldrb	r3, [r3, #0]
 801a700:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a702:	7afb      	ldrb	r3, [r7, #11]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d00e      	beq.n	801a726 <etharp_cleanup_netif+0x46>
 801a708:	490c      	ldr	r1, [pc, #48]	; (801a73c <etharp_cleanup_netif+0x5c>)
 801a70a:	68fa      	ldr	r2, [r7, #12]
 801a70c:	4613      	mov	r3, r2
 801a70e:	005b      	lsls	r3, r3, #1
 801a710:	4413      	add	r3, r2
 801a712:	00db      	lsls	r3, r3, #3
 801a714:	440b      	add	r3, r1
 801a716:	3308      	adds	r3, #8
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	687a      	ldr	r2, [r7, #4]
 801a71c:	429a      	cmp	r2, r3
 801a71e:	d102      	bne.n	801a726 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a720:	68f8      	ldr	r0, [r7, #12]
 801a722:	f7ff fce5 	bl	801a0f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	3301      	adds	r3, #1
 801a72a:	60fb      	str	r3, [r7, #12]
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	2b09      	cmp	r3, #9
 801a730:	dddd      	ble.n	801a6ee <etharp_cleanup_netif+0xe>
    }
  }
}
 801a732:	bf00      	nop
 801a734:	bf00      	nop
 801a736:	3710      	adds	r7, #16
 801a738:	46bd      	mov	sp, r7
 801a73a:	bd80      	pop	{r7, pc}
 801a73c:	20006c24 	.word	0x20006c24

0801a740 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a740:	b5b0      	push	{r4, r5, r7, lr}
 801a742:	b08a      	sub	sp, #40	; 0x28
 801a744:	af04      	add	r7, sp, #16
 801a746:	6078      	str	r0, [r7, #4]
 801a748:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a74a:	683b      	ldr	r3, [r7, #0]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d107      	bne.n	801a760 <etharp_input+0x20>
 801a750:	4b3d      	ldr	r3, [pc, #244]	; (801a848 <etharp_input+0x108>)
 801a752:	f240 228a 	movw	r2, #650	; 0x28a
 801a756:	493d      	ldr	r1, [pc, #244]	; (801a84c <etharp_input+0x10c>)
 801a758:	483d      	ldr	r0, [pc, #244]	; (801a850 <etharp_input+0x110>)
 801a75a:	f002 fb75 	bl	801ce48 <iprintf>
 801a75e:	e06f      	b.n	801a840 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	685b      	ldr	r3, [r3, #4]
 801a764:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a766:	693b      	ldr	r3, [r7, #16]
 801a768:	881b      	ldrh	r3, [r3, #0]
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a770:	d10c      	bne.n	801a78c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a776:	2b06      	cmp	r3, #6
 801a778:	d108      	bne.n	801a78c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a77e:	2b04      	cmp	r3, #4
 801a780:	d104      	bne.n	801a78c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a782:	693b      	ldr	r3, [r7, #16]
 801a784:	885b      	ldrh	r3, [r3, #2]
 801a786:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a788:	2b08      	cmp	r3, #8
 801a78a:	d003      	beq.n	801a794 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a78c:	6878      	ldr	r0, [r7, #4]
 801a78e:	f7f8 fbe9 	bl	8012f64 <pbuf_free>
    return;
 801a792:	e055      	b.n	801a840 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	330e      	adds	r3, #14
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a79c:	693b      	ldr	r3, [r7, #16]
 801a79e:	3318      	adds	r3, #24
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	3304      	adds	r3, #4
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d102      	bne.n	801a7b4 <etharp_input+0x74>
    for_us = 0;
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	75fb      	strb	r3, [r7, #23]
 801a7b2:	e009      	b.n	801a7c8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a7b4:	68ba      	ldr	r2, [r7, #8]
 801a7b6:	683b      	ldr	r3, [r7, #0]
 801a7b8:	3304      	adds	r3, #4
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	bf0c      	ite	eq
 801a7c0:	2301      	moveq	r3, #1
 801a7c2:	2300      	movne	r3, #0
 801a7c4:	b2db      	uxtb	r3, r3
 801a7c6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	f103 0208 	add.w	r2, r3, #8
 801a7ce:	7dfb      	ldrb	r3, [r7, #23]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d001      	beq.n	801a7d8 <etharp_input+0x98>
 801a7d4:	2301      	movs	r3, #1
 801a7d6:	e000      	b.n	801a7da <etharp_input+0x9a>
 801a7d8:	2302      	movs	r3, #2
 801a7da:	f107 010c 	add.w	r1, r7, #12
 801a7de:	6838      	ldr	r0, [r7, #0]
 801a7e0:	f7ff fed8 	bl	801a594 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a7e4:	693b      	ldr	r3, [r7, #16]
 801a7e6:	88db      	ldrh	r3, [r3, #6]
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a7ee:	d003      	beq.n	801a7f8 <etharp_input+0xb8>
 801a7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a7f4:	d01e      	beq.n	801a834 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a7f6:	e020      	b.n	801a83a <etharp_input+0xfa>
      if (for_us) {
 801a7f8:	7dfb      	ldrb	r3, [r7, #23]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d01c      	beq.n	801a838 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a7fe:	683b      	ldr	r3, [r7, #0]
 801a800:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a810:	683b      	ldr	r3, [r7, #0]
 801a812:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a814:	693a      	ldr	r2, [r7, #16]
 801a816:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a818:	2102      	movs	r1, #2
 801a81a:	9103      	str	r1, [sp, #12]
 801a81c:	f107 010c 	add.w	r1, r7, #12
 801a820:	9102      	str	r1, [sp, #8]
 801a822:	9201      	str	r2, [sp, #4]
 801a824:	9300      	str	r3, [sp, #0]
 801a826:	462b      	mov	r3, r5
 801a828:	4622      	mov	r2, r4
 801a82a:	4601      	mov	r1, r0
 801a82c:	6838      	ldr	r0, [r7, #0]
 801a82e:	f000 faeb 	bl	801ae08 <etharp_raw>
      break;
 801a832:	e001      	b.n	801a838 <etharp_input+0xf8>
      break;
 801a834:	bf00      	nop
 801a836:	e000      	b.n	801a83a <etharp_input+0xfa>
      break;
 801a838:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f7f8 fb92 	bl	8012f64 <pbuf_free>
}
 801a840:	3718      	adds	r7, #24
 801a842:	46bd      	mov	sp, r7
 801a844:	bdb0      	pop	{r4, r5, r7, pc}
 801a846:	bf00      	nop
 801a848:	08021284 	.word	0x08021284
 801a84c:	080213d4 	.word	0x080213d4
 801a850:	080212fc 	.word	0x080212fc

0801a854 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b086      	sub	sp, #24
 801a858:	af02      	add	r7, sp, #8
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	4613      	mov	r3, r2
 801a860:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a862:	79fa      	ldrb	r2, [r7, #7]
 801a864:	4944      	ldr	r1, [pc, #272]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a866:	4613      	mov	r3, r2
 801a868:	005b      	lsls	r3, r3, #1
 801a86a:	4413      	add	r3, r2
 801a86c:	00db      	lsls	r3, r3, #3
 801a86e:	440b      	add	r3, r1
 801a870:	3314      	adds	r3, #20
 801a872:	781b      	ldrb	r3, [r3, #0]
 801a874:	2b01      	cmp	r3, #1
 801a876:	d806      	bhi.n	801a886 <etharp_output_to_arp_index+0x32>
 801a878:	4b40      	ldr	r3, [pc, #256]	; (801a97c <etharp_output_to_arp_index+0x128>)
 801a87a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a87e:	4940      	ldr	r1, [pc, #256]	; (801a980 <etharp_output_to_arp_index+0x12c>)
 801a880:	4840      	ldr	r0, [pc, #256]	; (801a984 <etharp_output_to_arp_index+0x130>)
 801a882:	f002 fae1 	bl	801ce48 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a886:	79fa      	ldrb	r2, [r7, #7]
 801a888:	493b      	ldr	r1, [pc, #236]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a88a:	4613      	mov	r3, r2
 801a88c:	005b      	lsls	r3, r3, #1
 801a88e:	4413      	add	r3, r2
 801a890:	00db      	lsls	r3, r3, #3
 801a892:	440b      	add	r3, r1
 801a894:	3314      	adds	r3, #20
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	2b02      	cmp	r3, #2
 801a89a:	d153      	bne.n	801a944 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a89c:	79fa      	ldrb	r2, [r7, #7]
 801a89e:	4936      	ldr	r1, [pc, #216]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a8a0:	4613      	mov	r3, r2
 801a8a2:	005b      	lsls	r3, r3, #1
 801a8a4:	4413      	add	r3, r2
 801a8a6:	00db      	lsls	r3, r3, #3
 801a8a8:	440b      	add	r3, r1
 801a8aa:	3312      	adds	r3, #18
 801a8ac:	881b      	ldrh	r3, [r3, #0]
 801a8ae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a8b2:	d919      	bls.n	801a8e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a8b4:	79fa      	ldrb	r2, [r7, #7]
 801a8b6:	4613      	mov	r3, r2
 801a8b8:	005b      	lsls	r3, r3, #1
 801a8ba:	4413      	add	r3, r2
 801a8bc:	00db      	lsls	r3, r3, #3
 801a8be:	4a2e      	ldr	r2, [pc, #184]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a8c0:	4413      	add	r3, r2
 801a8c2:	3304      	adds	r3, #4
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	68f8      	ldr	r0, [r7, #12]
 801a8c8:	f000 fb4c 	bl	801af64 <etharp_request>
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d138      	bne.n	801a944 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a8d2:	79fa      	ldrb	r2, [r7, #7]
 801a8d4:	4928      	ldr	r1, [pc, #160]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	005b      	lsls	r3, r3, #1
 801a8da:	4413      	add	r3, r2
 801a8dc:	00db      	lsls	r3, r3, #3
 801a8de:	440b      	add	r3, r1
 801a8e0:	3314      	adds	r3, #20
 801a8e2:	2203      	movs	r2, #3
 801a8e4:	701a      	strb	r2, [r3, #0]
 801a8e6:	e02d      	b.n	801a944 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a8e8:	79fa      	ldrb	r2, [r7, #7]
 801a8ea:	4923      	ldr	r1, [pc, #140]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a8ec:	4613      	mov	r3, r2
 801a8ee:	005b      	lsls	r3, r3, #1
 801a8f0:	4413      	add	r3, r2
 801a8f2:	00db      	lsls	r3, r3, #3
 801a8f4:	440b      	add	r3, r1
 801a8f6:	3312      	adds	r3, #18
 801a8f8:	881b      	ldrh	r3, [r3, #0]
 801a8fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a8fe:	d321      	bcc.n	801a944 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a900:	79fa      	ldrb	r2, [r7, #7]
 801a902:	4613      	mov	r3, r2
 801a904:	005b      	lsls	r3, r3, #1
 801a906:	4413      	add	r3, r2
 801a908:	00db      	lsls	r3, r3, #3
 801a90a:	4a1b      	ldr	r2, [pc, #108]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a90c:	4413      	add	r3, r2
 801a90e:	1d19      	adds	r1, r3, #4
 801a910:	79fa      	ldrb	r2, [r7, #7]
 801a912:	4613      	mov	r3, r2
 801a914:	005b      	lsls	r3, r3, #1
 801a916:	4413      	add	r3, r2
 801a918:	00db      	lsls	r3, r3, #3
 801a91a:	3308      	adds	r3, #8
 801a91c:	4a16      	ldr	r2, [pc, #88]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a91e:	4413      	add	r3, r2
 801a920:	3304      	adds	r3, #4
 801a922:	461a      	mov	r2, r3
 801a924:	68f8      	ldr	r0, [r7, #12]
 801a926:	f000 fafb 	bl	801af20 <etharp_request_dst>
 801a92a:	4603      	mov	r3, r0
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d109      	bne.n	801a944 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a930:	79fa      	ldrb	r2, [r7, #7]
 801a932:	4911      	ldr	r1, [pc, #68]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a934:	4613      	mov	r3, r2
 801a936:	005b      	lsls	r3, r3, #1
 801a938:	4413      	add	r3, r2
 801a93a:	00db      	lsls	r3, r3, #3
 801a93c:	440b      	add	r3, r1
 801a93e:	3314      	adds	r3, #20
 801a940:	2203      	movs	r2, #3
 801a942:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a94a:	79fa      	ldrb	r2, [r7, #7]
 801a94c:	4613      	mov	r3, r2
 801a94e:	005b      	lsls	r3, r3, #1
 801a950:	4413      	add	r3, r2
 801a952:	00db      	lsls	r3, r3, #3
 801a954:	3308      	adds	r3, #8
 801a956:	4a08      	ldr	r2, [pc, #32]	; (801a978 <etharp_output_to_arp_index+0x124>)
 801a958:	4413      	add	r3, r2
 801a95a:	3304      	adds	r3, #4
 801a95c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a960:	9200      	str	r2, [sp, #0]
 801a962:	460a      	mov	r2, r1
 801a964:	68b9      	ldr	r1, [r7, #8]
 801a966:	68f8      	ldr	r0, [r7, #12]
 801a968:	f001 fe3a 	bl	801c5e0 <ethernet_output>
 801a96c:	4603      	mov	r3, r0
}
 801a96e:	4618      	mov	r0, r3
 801a970:	3710      	adds	r7, #16
 801a972:	46bd      	mov	sp, r7
 801a974:	bd80      	pop	{r7, pc}
 801a976:	bf00      	nop
 801a978:	20006c24 	.word	0x20006c24
 801a97c:	08021284 	.word	0x08021284
 801a980:	080213f4 	.word	0x080213f4
 801a984:	080212fc 	.word	0x080212fc

0801a988 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b08a      	sub	sp, #40	; 0x28
 801a98c:	af02      	add	r7, sp, #8
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	60b9      	str	r1, [r7, #8]
 801a992:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d106      	bne.n	801a9ac <etharp_output+0x24>
 801a99e:	4b73      	ldr	r3, [pc, #460]	; (801ab6c <etharp_output+0x1e4>)
 801a9a0:	f240 321e 	movw	r2, #798	; 0x31e
 801a9a4:	4972      	ldr	r1, [pc, #456]	; (801ab70 <etharp_output+0x1e8>)
 801a9a6:	4873      	ldr	r0, [pc, #460]	; (801ab74 <etharp_output+0x1ec>)
 801a9a8:	f002 fa4e 	bl	801ce48 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a9ac:	68bb      	ldr	r3, [r7, #8]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d106      	bne.n	801a9c0 <etharp_output+0x38>
 801a9b2:	4b6e      	ldr	r3, [pc, #440]	; (801ab6c <etharp_output+0x1e4>)
 801a9b4:	f240 321f 	movw	r2, #799	; 0x31f
 801a9b8:	496f      	ldr	r1, [pc, #444]	; (801ab78 <etharp_output+0x1f0>)
 801a9ba:	486e      	ldr	r0, [pc, #440]	; (801ab74 <etharp_output+0x1ec>)
 801a9bc:	f002 fa44 	bl	801ce48 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d106      	bne.n	801a9d4 <etharp_output+0x4c>
 801a9c6:	4b69      	ldr	r3, [pc, #420]	; (801ab6c <etharp_output+0x1e4>)
 801a9c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a9cc:	496b      	ldr	r1, [pc, #428]	; (801ab7c <etharp_output+0x1f4>)
 801a9ce:	4869      	ldr	r0, [pc, #420]	; (801ab74 <etharp_output+0x1ec>)
 801a9d0:	f002 fa3a 	bl	801ce48 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	68f9      	ldr	r1, [r7, #12]
 801a9da:	4618      	mov	r0, r3
 801a9dc:	f000 fef8 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d002      	beq.n	801a9ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a9e6:	4b66      	ldr	r3, [pc, #408]	; (801ab80 <etharp_output+0x1f8>)
 801a9e8:	61fb      	str	r3, [r7, #28]
 801a9ea:	e0af      	b.n	801ab4c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a9f4:	2be0      	cmp	r3, #224	; 0xe0
 801a9f6:	d118      	bne.n	801aa2a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aa00:	235e      	movs	r3, #94	; 0x5e
 801aa02:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	3301      	adds	r3, #1
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	3302      	adds	r3, #2
 801aa16:	781b      	ldrb	r3, [r3, #0]
 801aa18:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	3303      	adds	r3, #3
 801aa1e:	781b      	ldrb	r3, [r3, #0]
 801aa20:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aa22:	f107 0310 	add.w	r3, r7, #16
 801aa26:	61fb      	str	r3, [r7, #28]
 801aa28:	e090      	b.n	801ab4c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681a      	ldr	r2, [r3, #0]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	3304      	adds	r3, #4
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	405a      	eors	r2, r3
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	3308      	adds	r3, #8
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	4013      	ands	r3, r2
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d012      	beq.n	801aa68 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa48:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d00b      	beq.n	801aa68 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	330c      	adds	r3, #12
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d003      	beq.n	801aa62 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	330c      	adds	r3, #12
 801aa5e:	61bb      	str	r3, [r7, #24]
 801aa60:	e002      	b.n	801aa68 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aa62:	f06f 0303 	mvn.w	r3, #3
 801aa66:	e07d      	b.n	801ab64 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa68:	4b46      	ldr	r3, [pc, #280]	; (801ab84 <etharp_output+0x1fc>)
 801aa6a:	781b      	ldrb	r3, [r3, #0]
 801aa6c:	4619      	mov	r1, r3
 801aa6e:	4a46      	ldr	r2, [pc, #280]	; (801ab88 <etharp_output+0x200>)
 801aa70:	460b      	mov	r3, r1
 801aa72:	005b      	lsls	r3, r3, #1
 801aa74:	440b      	add	r3, r1
 801aa76:	00db      	lsls	r3, r3, #3
 801aa78:	4413      	add	r3, r2
 801aa7a:	3314      	adds	r3, #20
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	2b01      	cmp	r3, #1
 801aa80:	d925      	bls.n	801aace <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aa82:	4b40      	ldr	r3, [pc, #256]	; (801ab84 <etharp_output+0x1fc>)
 801aa84:	781b      	ldrb	r3, [r3, #0]
 801aa86:	4619      	mov	r1, r3
 801aa88:	4a3f      	ldr	r2, [pc, #252]	; (801ab88 <etharp_output+0x200>)
 801aa8a:	460b      	mov	r3, r1
 801aa8c:	005b      	lsls	r3, r3, #1
 801aa8e:	440b      	add	r3, r1
 801aa90:	00db      	lsls	r3, r3, #3
 801aa92:	4413      	add	r3, r2
 801aa94:	3308      	adds	r3, #8
 801aa96:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa98:	68fa      	ldr	r2, [r7, #12]
 801aa9a:	429a      	cmp	r2, r3
 801aa9c:	d117      	bne.n	801aace <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801aa9e:	69bb      	ldr	r3, [r7, #24]
 801aaa0:	681a      	ldr	r2, [r3, #0]
 801aaa2:	4b38      	ldr	r3, [pc, #224]	; (801ab84 <etharp_output+0x1fc>)
 801aaa4:	781b      	ldrb	r3, [r3, #0]
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	4937      	ldr	r1, [pc, #220]	; (801ab88 <etharp_output+0x200>)
 801aaaa:	4603      	mov	r3, r0
 801aaac:	005b      	lsls	r3, r3, #1
 801aaae:	4403      	add	r3, r0
 801aab0:	00db      	lsls	r3, r3, #3
 801aab2:	440b      	add	r3, r1
 801aab4:	3304      	adds	r3, #4
 801aab6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d108      	bne.n	801aace <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801aabc:	4b31      	ldr	r3, [pc, #196]	; (801ab84 <etharp_output+0x1fc>)
 801aabe:	781b      	ldrb	r3, [r3, #0]
 801aac0:	461a      	mov	r2, r3
 801aac2:	68b9      	ldr	r1, [r7, #8]
 801aac4:	68f8      	ldr	r0, [r7, #12]
 801aac6:	f7ff fec5 	bl	801a854 <etharp_output_to_arp_index>
 801aaca:	4603      	mov	r3, r0
 801aacc:	e04a      	b.n	801ab64 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aace:	2300      	movs	r3, #0
 801aad0:	75fb      	strb	r3, [r7, #23]
 801aad2:	e031      	b.n	801ab38 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aad4:	7dfa      	ldrb	r2, [r7, #23]
 801aad6:	492c      	ldr	r1, [pc, #176]	; (801ab88 <etharp_output+0x200>)
 801aad8:	4613      	mov	r3, r2
 801aada:	005b      	lsls	r3, r3, #1
 801aadc:	4413      	add	r3, r2
 801aade:	00db      	lsls	r3, r3, #3
 801aae0:	440b      	add	r3, r1
 801aae2:	3314      	adds	r3, #20
 801aae4:	781b      	ldrb	r3, [r3, #0]
 801aae6:	2b01      	cmp	r3, #1
 801aae8:	d923      	bls.n	801ab32 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801aaea:	7dfa      	ldrb	r2, [r7, #23]
 801aaec:	4926      	ldr	r1, [pc, #152]	; (801ab88 <etharp_output+0x200>)
 801aaee:	4613      	mov	r3, r2
 801aaf0:	005b      	lsls	r3, r3, #1
 801aaf2:	4413      	add	r3, r2
 801aaf4:	00db      	lsls	r3, r3, #3
 801aaf6:	440b      	add	r3, r1
 801aaf8:	3308      	adds	r3, #8
 801aafa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aafc:	68fa      	ldr	r2, [r7, #12]
 801aafe:	429a      	cmp	r2, r3
 801ab00:	d117      	bne.n	801ab32 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ab02:	69bb      	ldr	r3, [r7, #24]
 801ab04:	6819      	ldr	r1, [r3, #0]
 801ab06:	7dfa      	ldrb	r2, [r7, #23]
 801ab08:	481f      	ldr	r0, [pc, #124]	; (801ab88 <etharp_output+0x200>)
 801ab0a:	4613      	mov	r3, r2
 801ab0c:	005b      	lsls	r3, r3, #1
 801ab0e:	4413      	add	r3, r2
 801ab10:	00db      	lsls	r3, r3, #3
 801ab12:	4403      	add	r3, r0
 801ab14:	3304      	adds	r3, #4
 801ab16:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ab18:	4299      	cmp	r1, r3
 801ab1a:	d10a      	bne.n	801ab32 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ab1c:	4a19      	ldr	r2, [pc, #100]	; (801ab84 <etharp_output+0x1fc>)
 801ab1e:	7dfb      	ldrb	r3, [r7, #23]
 801ab20:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ab22:	7dfb      	ldrb	r3, [r7, #23]
 801ab24:	461a      	mov	r2, r3
 801ab26:	68b9      	ldr	r1, [r7, #8]
 801ab28:	68f8      	ldr	r0, [r7, #12]
 801ab2a:	f7ff fe93 	bl	801a854 <etharp_output_to_arp_index>
 801ab2e:	4603      	mov	r3, r0
 801ab30:	e018      	b.n	801ab64 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab32:	7dfb      	ldrb	r3, [r7, #23]
 801ab34:	3301      	adds	r3, #1
 801ab36:	75fb      	strb	r3, [r7, #23]
 801ab38:	7dfb      	ldrb	r3, [r7, #23]
 801ab3a:	2b09      	cmp	r3, #9
 801ab3c:	d9ca      	bls.n	801aad4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ab3e:	68ba      	ldr	r2, [r7, #8]
 801ab40:	69b9      	ldr	r1, [r7, #24]
 801ab42:	68f8      	ldr	r0, [r7, #12]
 801ab44:	f000 f822 	bl	801ab8c <etharp_query>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	e00b      	b.n	801ab64 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ab52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ab56:	9300      	str	r3, [sp, #0]
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	68b9      	ldr	r1, [r7, #8]
 801ab5c:	68f8      	ldr	r0, [r7, #12]
 801ab5e:	f001 fd3f 	bl	801c5e0 <ethernet_output>
 801ab62:	4603      	mov	r3, r0
}
 801ab64:	4618      	mov	r0, r3
 801ab66:	3720      	adds	r7, #32
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	08021284 	.word	0x08021284
 801ab70:	080213d4 	.word	0x080213d4
 801ab74:	080212fc 	.word	0x080212fc
 801ab78:	08021424 	.word	0x08021424
 801ab7c:	080213c4 	.word	0x080213c4
 801ab80:	08021a80 	.word	0x08021a80
 801ab84:	20006d14 	.word	0x20006d14
 801ab88:	20006c24 	.word	0x20006c24

0801ab8c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b08c      	sub	sp, #48	; 0x30
 801ab90:	af02      	add	r7, sp, #8
 801ab92:	60f8      	str	r0, [r7, #12]
 801ab94:	60b9      	str	r1, [r7, #8]
 801ab96:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	3326      	adds	r3, #38	; 0x26
 801ab9c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ab9e:	23ff      	movs	r3, #255	; 0xff
 801aba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801aba4:	2300      	movs	r3, #0
 801aba6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	68f9      	ldr	r1, [r7, #12]
 801abae:	4618      	mov	r0, r3
 801abb0:	f000 fe0e 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801abb4:	4603      	mov	r3, r0
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d10c      	bne.n	801abd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abc2:	2be0      	cmp	r3, #224	; 0xe0
 801abc4:	d006      	beq.n	801abd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abc6:	68bb      	ldr	r3, [r7, #8]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d003      	beq.n	801abd4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801abcc:	68bb      	ldr	r3, [r7, #8]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d102      	bne.n	801abda <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801abd4:	f06f 030f 	mvn.w	r3, #15
 801abd8:	e101      	b.n	801adde <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801abda:	68fa      	ldr	r2, [r7, #12]
 801abdc:	2101      	movs	r1, #1
 801abde:	68b8      	ldr	r0, [r7, #8]
 801abe0:	f7ff fb60 	bl	801a2a4 <etharp_find_entry>
 801abe4:	4603      	mov	r3, r0
 801abe6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801abe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801abec:	2b00      	cmp	r3, #0
 801abee:	da02      	bge.n	801abf6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801abf0:	8a7b      	ldrh	r3, [r7, #18]
 801abf2:	b25b      	sxtb	r3, r3
 801abf4:	e0f3      	b.n	801adde <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801abf6:	8a7b      	ldrh	r3, [r7, #18]
 801abf8:	2b7e      	cmp	r3, #126	; 0x7e
 801abfa:	d906      	bls.n	801ac0a <etharp_query+0x7e>
 801abfc:	4b7a      	ldr	r3, [pc, #488]	; (801ade8 <etharp_query+0x25c>)
 801abfe:	f240 32c1 	movw	r2, #961	; 0x3c1
 801ac02:	497a      	ldr	r1, [pc, #488]	; (801adec <etharp_query+0x260>)
 801ac04:	487a      	ldr	r0, [pc, #488]	; (801adf0 <etharp_query+0x264>)
 801ac06:	f002 f91f 	bl	801ce48 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ac0a:	8a7b      	ldrh	r3, [r7, #18]
 801ac0c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ac0e:	7c7a      	ldrb	r2, [r7, #17]
 801ac10:	4978      	ldr	r1, [pc, #480]	; (801adf4 <etharp_query+0x268>)
 801ac12:	4613      	mov	r3, r2
 801ac14:	005b      	lsls	r3, r3, #1
 801ac16:	4413      	add	r3, r2
 801ac18:	00db      	lsls	r3, r3, #3
 801ac1a:	440b      	add	r3, r1
 801ac1c:	3314      	adds	r3, #20
 801ac1e:	781b      	ldrb	r3, [r3, #0]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d115      	bne.n	801ac50 <etharp_query+0xc4>
    is_new_entry = 1;
 801ac24:	2301      	movs	r3, #1
 801ac26:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ac28:	7c7a      	ldrb	r2, [r7, #17]
 801ac2a:	4972      	ldr	r1, [pc, #456]	; (801adf4 <etharp_query+0x268>)
 801ac2c:	4613      	mov	r3, r2
 801ac2e:	005b      	lsls	r3, r3, #1
 801ac30:	4413      	add	r3, r2
 801ac32:	00db      	lsls	r3, r3, #3
 801ac34:	440b      	add	r3, r1
 801ac36:	3314      	adds	r3, #20
 801ac38:	2201      	movs	r2, #1
 801ac3a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ac3c:	7c7a      	ldrb	r2, [r7, #17]
 801ac3e:	496d      	ldr	r1, [pc, #436]	; (801adf4 <etharp_query+0x268>)
 801ac40:	4613      	mov	r3, r2
 801ac42:	005b      	lsls	r3, r3, #1
 801ac44:	4413      	add	r3, r2
 801ac46:	00db      	lsls	r3, r3, #3
 801ac48:	440b      	add	r3, r1
 801ac4a:	3308      	adds	r3, #8
 801ac4c:	68fa      	ldr	r2, [r7, #12]
 801ac4e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ac50:	7c7a      	ldrb	r2, [r7, #17]
 801ac52:	4968      	ldr	r1, [pc, #416]	; (801adf4 <etharp_query+0x268>)
 801ac54:	4613      	mov	r3, r2
 801ac56:	005b      	lsls	r3, r3, #1
 801ac58:	4413      	add	r3, r2
 801ac5a:	00db      	lsls	r3, r3, #3
 801ac5c:	440b      	add	r3, r1
 801ac5e:	3314      	adds	r3, #20
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	2b01      	cmp	r3, #1
 801ac64:	d011      	beq.n	801ac8a <etharp_query+0xfe>
 801ac66:	7c7a      	ldrb	r2, [r7, #17]
 801ac68:	4962      	ldr	r1, [pc, #392]	; (801adf4 <etharp_query+0x268>)
 801ac6a:	4613      	mov	r3, r2
 801ac6c:	005b      	lsls	r3, r3, #1
 801ac6e:	4413      	add	r3, r2
 801ac70:	00db      	lsls	r3, r3, #3
 801ac72:	440b      	add	r3, r1
 801ac74:	3314      	adds	r3, #20
 801ac76:	781b      	ldrb	r3, [r3, #0]
 801ac78:	2b01      	cmp	r3, #1
 801ac7a:	d806      	bhi.n	801ac8a <etharp_query+0xfe>
 801ac7c:	4b5a      	ldr	r3, [pc, #360]	; (801ade8 <etharp_query+0x25c>)
 801ac7e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ac82:	495d      	ldr	r1, [pc, #372]	; (801adf8 <etharp_query+0x26c>)
 801ac84:	485a      	ldr	r0, [pc, #360]	; (801adf0 <etharp_query+0x264>)
 801ac86:	f002 f8df 	bl	801ce48 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ac8a:	6a3b      	ldr	r3, [r7, #32]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d102      	bne.n	801ac96 <etharp_query+0x10a>
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d10c      	bne.n	801acb0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ac96:	68b9      	ldr	r1, [r7, #8]
 801ac98:	68f8      	ldr	r0, [r7, #12]
 801ac9a:	f000 f963 	bl	801af64 <etharp_request>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d102      	bne.n	801acb0 <etharp_query+0x124>
      return result;
 801acaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801acae:	e096      	b.n	801adde <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d106      	bne.n	801acc4 <etharp_query+0x138>
 801acb6:	4b4c      	ldr	r3, [pc, #304]	; (801ade8 <etharp_query+0x25c>)
 801acb8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801acbc:	494f      	ldr	r1, [pc, #316]	; (801adfc <etharp_query+0x270>)
 801acbe:	484c      	ldr	r0, [pc, #304]	; (801adf0 <etharp_query+0x264>)
 801acc0:	f002 f8c2 	bl	801ce48 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801acc4:	7c7a      	ldrb	r2, [r7, #17]
 801acc6:	494b      	ldr	r1, [pc, #300]	; (801adf4 <etharp_query+0x268>)
 801acc8:	4613      	mov	r3, r2
 801acca:	005b      	lsls	r3, r3, #1
 801accc:	4413      	add	r3, r2
 801acce:	00db      	lsls	r3, r3, #3
 801acd0:	440b      	add	r3, r1
 801acd2:	3314      	adds	r3, #20
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	2b01      	cmp	r3, #1
 801acd8:	d917      	bls.n	801ad0a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801acda:	4a49      	ldr	r2, [pc, #292]	; (801ae00 <etharp_query+0x274>)
 801acdc:	7c7b      	ldrb	r3, [r7, #17]
 801acde:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ace0:	7c7a      	ldrb	r2, [r7, #17]
 801ace2:	4613      	mov	r3, r2
 801ace4:	005b      	lsls	r3, r3, #1
 801ace6:	4413      	add	r3, r2
 801ace8:	00db      	lsls	r3, r3, #3
 801acea:	3308      	adds	r3, #8
 801acec:	4a41      	ldr	r2, [pc, #260]	; (801adf4 <etharp_query+0x268>)
 801acee:	4413      	add	r3, r2
 801acf0:	3304      	adds	r3, #4
 801acf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801acf6:	9200      	str	r2, [sp, #0]
 801acf8:	697a      	ldr	r2, [r7, #20]
 801acfa:	6879      	ldr	r1, [r7, #4]
 801acfc:	68f8      	ldr	r0, [r7, #12]
 801acfe:	f001 fc6f 	bl	801c5e0 <ethernet_output>
 801ad02:	4603      	mov	r3, r0
 801ad04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ad08:	e067      	b.n	801adda <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad0a:	7c7a      	ldrb	r2, [r7, #17]
 801ad0c:	4939      	ldr	r1, [pc, #228]	; (801adf4 <etharp_query+0x268>)
 801ad0e:	4613      	mov	r3, r2
 801ad10:	005b      	lsls	r3, r3, #1
 801ad12:	4413      	add	r3, r2
 801ad14:	00db      	lsls	r3, r3, #3
 801ad16:	440b      	add	r3, r1
 801ad18:	3314      	adds	r3, #20
 801ad1a:	781b      	ldrb	r3, [r3, #0]
 801ad1c:	2b01      	cmp	r3, #1
 801ad1e:	d15c      	bne.n	801adda <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ad20:	2300      	movs	r3, #0
 801ad22:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad28:	e01c      	b.n	801ad64 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ad2a:	69fb      	ldr	r3, [r7, #28]
 801ad2c:	895a      	ldrh	r2, [r3, #10]
 801ad2e:	69fb      	ldr	r3, [r7, #28]
 801ad30:	891b      	ldrh	r3, [r3, #8]
 801ad32:	429a      	cmp	r2, r3
 801ad34:	d10a      	bne.n	801ad4c <etharp_query+0x1c0>
 801ad36:	69fb      	ldr	r3, [r7, #28]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d006      	beq.n	801ad4c <etharp_query+0x1c0>
 801ad3e:	4b2a      	ldr	r3, [pc, #168]	; (801ade8 <etharp_query+0x25c>)
 801ad40:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ad44:	492f      	ldr	r1, [pc, #188]	; (801ae04 <etharp_query+0x278>)
 801ad46:	482a      	ldr	r0, [pc, #168]	; (801adf0 <etharp_query+0x264>)
 801ad48:	f002 f87e 	bl	801ce48 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ad4c:	69fb      	ldr	r3, [r7, #28]
 801ad4e:	7b1b      	ldrb	r3, [r3, #12]
 801ad50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d002      	beq.n	801ad5e <etharp_query+0x1d2>
        copy_needed = 1;
 801ad58:	2301      	movs	r3, #1
 801ad5a:	61bb      	str	r3, [r7, #24]
        break;
 801ad5c:	e005      	b.n	801ad6a <etharp_query+0x1de>
      }
      p = p->next;
 801ad5e:	69fb      	ldr	r3, [r7, #28]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad64:	69fb      	ldr	r3, [r7, #28]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d1df      	bne.n	801ad2a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ad6a:	69bb      	ldr	r3, [r7, #24]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d007      	beq.n	801ad80 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ad70:	687a      	ldr	r2, [r7, #4]
 801ad72:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ad76:	200e      	movs	r0, #14
 801ad78:	f7f8 fb6c 	bl	8013454 <pbuf_clone>
 801ad7c:	61f8      	str	r0, [r7, #28]
 801ad7e:	e004      	b.n	801ad8a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ad84:	69f8      	ldr	r0, [r7, #28]
 801ad86:	f7f8 f993 	bl	80130b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ad8a:	69fb      	ldr	r3, [r7, #28]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d021      	beq.n	801add4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ad90:	7c7a      	ldrb	r2, [r7, #17]
 801ad92:	4918      	ldr	r1, [pc, #96]	; (801adf4 <etharp_query+0x268>)
 801ad94:	4613      	mov	r3, r2
 801ad96:	005b      	lsls	r3, r3, #1
 801ad98:	4413      	add	r3, r2
 801ad9a:	00db      	lsls	r3, r3, #3
 801ad9c:	440b      	add	r3, r1
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d00a      	beq.n	801adba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ada4:	7c7a      	ldrb	r2, [r7, #17]
 801ada6:	4913      	ldr	r1, [pc, #76]	; (801adf4 <etharp_query+0x268>)
 801ada8:	4613      	mov	r3, r2
 801adaa:	005b      	lsls	r3, r3, #1
 801adac:	4413      	add	r3, r2
 801adae:	00db      	lsls	r3, r3, #3
 801adb0:	440b      	add	r3, r1
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	4618      	mov	r0, r3
 801adb6:	f7f8 f8d5 	bl	8012f64 <pbuf_free>
      }
      arp_table[i].q = p;
 801adba:	7c7a      	ldrb	r2, [r7, #17]
 801adbc:	490d      	ldr	r1, [pc, #52]	; (801adf4 <etharp_query+0x268>)
 801adbe:	4613      	mov	r3, r2
 801adc0:	005b      	lsls	r3, r3, #1
 801adc2:	4413      	add	r3, r2
 801adc4:	00db      	lsls	r3, r3, #3
 801adc6:	440b      	add	r3, r1
 801adc8:	69fa      	ldr	r2, [r7, #28]
 801adca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801adcc:	2300      	movs	r3, #0
 801adce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801add2:	e002      	b.n	801adda <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801add4:	23ff      	movs	r3, #255	; 0xff
 801add6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801adda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801adde:	4618      	mov	r0, r3
 801ade0:	3728      	adds	r7, #40	; 0x28
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}
 801ade6:	bf00      	nop
 801ade8:	08021284 	.word	0x08021284
 801adec:	08021430 	.word	0x08021430
 801adf0:	080212fc 	.word	0x080212fc
 801adf4:	20006c24 	.word	0x20006c24
 801adf8:	08021440 	.word	0x08021440
 801adfc:	08021424 	.word	0x08021424
 801ae00:	20006d14 	.word	0x20006d14
 801ae04:	08021468 	.word	0x08021468

0801ae08 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b08a      	sub	sp, #40	; 0x28
 801ae0c:	af02      	add	r7, sp, #8
 801ae0e:	60f8      	str	r0, [r7, #12]
 801ae10:	60b9      	str	r1, [r7, #8]
 801ae12:	607a      	str	r2, [r7, #4]
 801ae14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ae16:	2300      	movs	r3, #0
 801ae18:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d106      	bne.n	801ae2e <etharp_raw+0x26>
 801ae20:	4b3a      	ldr	r3, [pc, #232]	; (801af0c <etharp_raw+0x104>)
 801ae22:	f240 4257 	movw	r2, #1111	; 0x457
 801ae26:	493a      	ldr	r1, [pc, #232]	; (801af10 <etharp_raw+0x108>)
 801ae28:	483a      	ldr	r0, [pc, #232]	; (801af14 <etharp_raw+0x10c>)
 801ae2a:	f002 f80d 	bl	801ce48 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ae2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ae32:	211c      	movs	r1, #28
 801ae34:	200e      	movs	r0, #14
 801ae36:	f7f7 fdb1 	bl	801299c <pbuf_alloc>
 801ae3a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ae3c:	69bb      	ldr	r3, [r7, #24]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d102      	bne.n	801ae48 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ae42:	f04f 33ff 	mov.w	r3, #4294967295
 801ae46:	e05d      	b.n	801af04 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	895b      	ldrh	r3, [r3, #10]
 801ae4c:	2b1b      	cmp	r3, #27
 801ae4e:	d806      	bhi.n	801ae5e <etharp_raw+0x56>
 801ae50:	4b2e      	ldr	r3, [pc, #184]	; (801af0c <etharp_raw+0x104>)
 801ae52:	f240 4262 	movw	r2, #1122	; 0x462
 801ae56:	4930      	ldr	r1, [pc, #192]	; (801af18 <etharp_raw+0x110>)
 801ae58:	482e      	ldr	r0, [pc, #184]	; (801af14 <etharp_raw+0x10c>)
 801ae5a:	f001 fff5 	bl	801ce48 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ae5e:	69bb      	ldr	r3, [r7, #24]
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ae64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7f6 fd34 	bl	80118d4 <lwip_htons>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	461a      	mov	r2, r3
 801ae70:	697b      	ldr	r3, [r7, #20]
 801ae72:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ae7a:	2b06      	cmp	r3, #6
 801ae7c:	d006      	beq.n	801ae8c <etharp_raw+0x84>
 801ae7e:	4b23      	ldr	r3, [pc, #140]	; (801af0c <etharp_raw+0x104>)
 801ae80:	f240 4269 	movw	r2, #1129	; 0x469
 801ae84:	4925      	ldr	r1, [pc, #148]	; (801af1c <etharp_raw+0x114>)
 801ae86:	4823      	ldr	r0, [pc, #140]	; (801af14 <etharp_raw+0x10c>)
 801ae88:	f001 ffde 	bl	801ce48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ae8c:	697b      	ldr	r3, [r7, #20]
 801ae8e:	3308      	adds	r3, #8
 801ae90:	2206      	movs	r2, #6
 801ae92:	6839      	ldr	r1, [r7, #0]
 801ae94:	4618      	mov	r0, r3
 801ae96:	f001 fefd 	bl	801cc94 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ae9a:	697b      	ldr	r3, [r7, #20]
 801ae9c:	3312      	adds	r3, #18
 801ae9e:	2206      	movs	r2, #6
 801aea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aea2:	4618      	mov	r0, r3
 801aea4:	f001 fef6 	bl	801cc94 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	330e      	adds	r3, #14
 801aeac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aeae:	6812      	ldr	r2, [r2, #0]
 801aeb0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aeb2:	697b      	ldr	r3, [r7, #20]
 801aeb4:	3318      	adds	r3, #24
 801aeb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aeb8:	6812      	ldr	r2, [r2, #0]
 801aeba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801aebc:	697b      	ldr	r3, [r7, #20]
 801aebe:	2200      	movs	r2, #0
 801aec0:	701a      	strb	r2, [r3, #0]
 801aec2:	2200      	movs	r2, #0
 801aec4:	f042 0201 	orr.w	r2, r2, #1
 801aec8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	2200      	movs	r2, #0
 801aece:	f042 0208 	orr.w	r2, r2, #8
 801aed2:	709a      	strb	r2, [r3, #2]
 801aed4:	2200      	movs	r2, #0
 801aed6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801aed8:	697b      	ldr	r3, [r7, #20]
 801aeda:	2206      	movs	r2, #6
 801aedc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	2204      	movs	r2, #4
 801aee2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801aee4:	f640 0306 	movw	r3, #2054	; 0x806
 801aee8:	9300      	str	r3, [sp, #0]
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	68ba      	ldr	r2, [r7, #8]
 801aeee:	69b9      	ldr	r1, [r7, #24]
 801aef0:	68f8      	ldr	r0, [r7, #12]
 801aef2:	f001 fb75 	bl	801c5e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801aef6:	69b8      	ldr	r0, [r7, #24]
 801aef8:	f7f8 f834 	bl	8012f64 <pbuf_free>
  p = NULL;
 801aefc:	2300      	movs	r3, #0
 801aefe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801af00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af04:	4618      	mov	r0, r3
 801af06:	3720      	adds	r7, #32
 801af08:	46bd      	mov	sp, r7
 801af0a:	bd80      	pop	{r7, pc}
 801af0c:	08021284 	.word	0x08021284
 801af10:	080213d4 	.word	0x080213d4
 801af14:	080212fc 	.word	0x080212fc
 801af18:	08021484 	.word	0x08021484
 801af1c:	080214b8 	.word	0x080214b8

0801af20 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b088      	sub	sp, #32
 801af24:	af04      	add	r7, sp, #16
 801af26:	60f8      	str	r0, [r7, #12]
 801af28:	60b9      	str	r1, [r7, #8]
 801af2a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af3c:	2201      	movs	r2, #1
 801af3e:	9203      	str	r2, [sp, #12]
 801af40:	68ba      	ldr	r2, [r7, #8]
 801af42:	9202      	str	r2, [sp, #8]
 801af44:	4a06      	ldr	r2, [pc, #24]	; (801af60 <etharp_request_dst+0x40>)
 801af46:	9201      	str	r2, [sp, #4]
 801af48:	9300      	str	r3, [sp, #0]
 801af4a:	4603      	mov	r3, r0
 801af4c:	687a      	ldr	r2, [r7, #4]
 801af4e:	68f8      	ldr	r0, [r7, #12]
 801af50:	f7ff ff5a 	bl	801ae08 <etharp_raw>
 801af54:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801af56:	4618      	mov	r0, r3
 801af58:	3710      	adds	r7, #16
 801af5a:	46bd      	mov	sp, r7
 801af5c:	bd80      	pop	{r7, pc}
 801af5e:	bf00      	nop
 801af60:	08021a88 	.word	0x08021a88

0801af64 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b082      	sub	sp, #8
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
 801af6c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801af6e:	4a05      	ldr	r2, [pc, #20]	; (801af84 <etharp_request+0x20>)
 801af70:	6839      	ldr	r1, [r7, #0]
 801af72:	6878      	ldr	r0, [r7, #4]
 801af74:	f7ff ffd4 	bl	801af20 <etharp_request_dst>
 801af78:	4603      	mov	r3, r0
}
 801af7a:	4618      	mov	r0, r3
 801af7c:	3708      	adds	r7, #8
 801af7e:	46bd      	mov	sp, r7
 801af80:	bd80      	pop	{r7, pc}
 801af82:	bf00      	nop
 801af84:	08021a80 	.word	0x08021a80

0801af88 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b08e      	sub	sp, #56	; 0x38
 801af8c:	af04      	add	r7, sp, #16
 801af8e:	6078      	str	r0, [r7, #4]
 801af90:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801af92:	4b79      	ldr	r3, [pc, #484]	; (801b178 <icmp_input+0x1f0>)
 801af94:	689b      	ldr	r3, [r3, #8]
 801af96:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af9a:	781b      	ldrb	r3, [r3, #0]
 801af9c:	f003 030f 	and.w	r3, r3, #15
 801afa0:	b2db      	uxtb	r3, r3
 801afa2:	009b      	lsls	r3, r3, #2
 801afa4:	b2db      	uxtb	r3, r3
 801afa6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801afa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801afaa:	2b13      	cmp	r3, #19
 801afac:	f240 80cd 	bls.w	801b14a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	895b      	ldrh	r3, [r3, #10]
 801afb4:	2b03      	cmp	r3, #3
 801afb6:	f240 80ca 	bls.w	801b14e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	685b      	ldr	r3, [r3, #4]
 801afbe:	781b      	ldrb	r3, [r3, #0]
 801afc0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801afc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801afc8:	2b00      	cmp	r3, #0
 801afca:	f000 80b7 	beq.w	801b13c <icmp_input+0x1b4>
 801afce:	2b08      	cmp	r3, #8
 801afd0:	f040 80b7 	bne.w	801b142 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801afd4:	4b69      	ldr	r3, [pc, #420]	; (801b17c <icmp_input+0x1f4>)
 801afd6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801afd8:	4b67      	ldr	r3, [pc, #412]	; (801b178 <icmp_input+0x1f0>)
 801afda:	695b      	ldr	r3, [r3, #20]
 801afdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801afe0:	2be0      	cmp	r3, #224	; 0xe0
 801afe2:	f000 80bb 	beq.w	801b15c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801afe6:	4b64      	ldr	r3, [pc, #400]	; (801b178 <icmp_input+0x1f0>)
 801afe8:	695b      	ldr	r3, [r3, #20]
 801afea:	4a63      	ldr	r2, [pc, #396]	; (801b178 <icmp_input+0x1f0>)
 801afec:	6812      	ldr	r2, [r2, #0]
 801afee:	4611      	mov	r1, r2
 801aff0:	4618      	mov	r0, r3
 801aff2:	f000 fbed 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801aff6:	4603      	mov	r3, r0
 801aff8:	2b00      	cmp	r3, #0
 801affa:	f040 80b1 	bne.w	801b160 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	891b      	ldrh	r3, [r3, #8]
 801b002:	2b07      	cmp	r3, #7
 801b004:	f240 80a5 	bls.w	801b152 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b00a:	330e      	adds	r3, #14
 801b00c:	4619      	mov	r1, r3
 801b00e:	6878      	ldr	r0, [r7, #4]
 801b010:	f7f7 ff12 	bl	8012e38 <pbuf_add_header>
 801b014:	4603      	mov	r3, r0
 801b016:	2b00      	cmp	r3, #0
 801b018:	d04b      	beq.n	801b0b2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	891a      	ldrh	r2, [r3, #8]
 801b01e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b020:	4413      	add	r3, r2
 801b022:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	891b      	ldrh	r3, [r3, #8]
 801b028:	8b7a      	ldrh	r2, [r7, #26]
 801b02a:	429a      	cmp	r2, r3
 801b02c:	f0c0 809a 	bcc.w	801b164 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b030:	8b7b      	ldrh	r3, [r7, #26]
 801b032:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b036:	4619      	mov	r1, r3
 801b038:	200e      	movs	r0, #14
 801b03a:	f7f7 fcaf 	bl	801299c <pbuf_alloc>
 801b03e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b040:	697b      	ldr	r3, [r7, #20]
 801b042:	2b00      	cmp	r3, #0
 801b044:	f000 8090 	beq.w	801b168 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b048:	697b      	ldr	r3, [r7, #20]
 801b04a:	895b      	ldrh	r3, [r3, #10]
 801b04c:	461a      	mov	r2, r3
 801b04e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b050:	3308      	adds	r3, #8
 801b052:	429a      	cmp	r2, r3
 801b054:	d203      	bcs.n	801b05e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b056:	6978      	ldr	r0, [r7, #20]
 801b058:	f7f7 ff84 	bl	8012f64 <pbuf_free>
          goto icmperr;
 801b05c:	e085      	b.n	801b16a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b05e:	697b      	ldr	r3, [r7, #20]
 801b060:	685b      	ldr	r3, [r3, #4]
 801b062:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b066:	4618      	mov	r0, r3
 801b068:	f001 fe14 	bl	801cc94 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b06c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b06e:	4619      	mov	r1, r3
 801b070:	6978      	ldr	r0, [r7, #20]
 801b072:	f7f7 fef1 	bl	8012e58 <pbuf_remove_header>
 801b076:	4603      	mov	r3, r0
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d009      	beq.n	801b090 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b07c:	4b40      	ldr	r3, [pc, #256]	; (801b180 <icmp_input+0x1f8>)
 801b07e:	22b6      	movs	r2, #182	; 0xb6
 801b080:	4940      	ldr	r1, [pc, #256]	; (801b184 <icmp_input+0x1fc>)
 801b082:	4841      	ldr	r0, [pc, #260]	; (801b188 <icmp_input+0x200>)
 801b084:	f001 fee0 	bl	801ce48 <iprintf>
          pbuf_free(r);
 801b088:	6978      	ldr	r0, [r7, #20]
 801b08a:	f7f7 ff6b 	bl	8012f64 <pbuf_free>
          goto icmperr;
 801b08e:	e06c      	b.n	801b16a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b090:	6879      	ldr	r1, [r7, #4]
 801b092:	6978      	ldr	r0, [r7, #20]
 801b094:	f7f8 f89a 	bl	80131cc <pbuf_copy>
 801b098:	4603      	mov	r3, r0
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d003      	beq.n	801b0a6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b09e:	6978      	ldr	r0, [r7, #20]
 801b0a0:	f7f7 ff60 	bl	8012f64 <pbuf_free>
          goto icmperr;
 801b0a4:	e061      	b.n	801b16a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b0a6:	6878      	ldr	r0, [r7, #4]
 801b0a8:	f7f7 ff5c 	bl	8012f64 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b0ac:	697b      	ldr	r3, [r7, #20]
 801b0ae:	607b      	str	r3, [r7, #4]
 801b0b0:	e00f      	b.n	801b0d2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b0b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0b4:	330e      	adds	r3, #14
 801b0b6:	4619      	mov	r1, r3
 801b0b8:	6878      	ldr	r0, [r7, #4]
 801b0ba:	f7f7 fecd 	bl	8012e58 <pbuf_remove_header>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d006      	beq.n	801b0d2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b0c4:	4b2e      	ldr	r3, [pc, #184]	; (801b180 <icmp_input+0x1f8>)
 801b0c6:	22c7      	movs	r2, #199	; 0xc7
 801b0c8:	4930      	ldr	r1, [pc, #192]	; (801b18c <icmp_input+0x204>)
 801b0ca:	482f      	ldr	r0, [pc, #188]	; (801b188 <icmp_input+0x200>)
 801b0cc:	f001 febc 	bl	801ce48 <iprintf>
          goto icmperr;
 801b0d0:	e04b      	b.n	801b16a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	685b      	ldr	r3, [r3, #4]
 801b0d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b0d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0da:	4619      	mov	r1, r3
 801b0dc:	6878      	ldr	r0, [r7, #4]
 801b0de:	f7f7 feab 	bl	8012e38 <pbuf_add_header>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d12b      	bne.n	801b140 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	685b      	ldr	r3, [r3, #4]
 801b0ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b0ee:	69fb      	ldr	r3, [r7, #28]
 801b0f0:	681a      	ldr	r2, [r3, #0]
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b0f6:	4b20      	ldr	r3, [pc, #128]	; (801b178 <icmp_input+0x1f0>)
 801b0f8:	691a      	ldr	r2, [r3, #16]
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b0fe:	693b      	ldr	r3, [r7, #16]
 801b100:	2200      	movs	r2, #0
 801b102:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b104:	693b      	ldr	r3, [r7, #16]
 801b106:	2200      	movs	r2, #0
 801b108:	709a      	strb	r2, [r3, #2]
 801b10a:	2200      	movs	r2, #0
 801b10c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	22ff      	movs	r2, #255	; 0xff
 801b112:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	2200      	movs	r2, #0
 801b118:	729a      	strb	r2, [r3, #10]
 801b11a:	2200      	movs	r2, #0
 801b11c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b11e:	683b      	ldr	r3, [r7, #0]
 801b120:	9302      	str	r3, [sp, #8]
 801b122:	2301      	movs	r3, #1
 801b124:	9301      	str	r3, [sp, #4]
 801b126:	2300      	movs	r3, #0
 801b128:	9300      	str	r3, [sp, #0]
 801b12a:	23ff      	movs	r3, #255	; 0xff
 801b12c:	2200      	movs	r2, #0
 801b12e:	69f9      	ldr	r1, [r7, #28]
 801b130:	6878      	ldr	r0, [r7, #4]
 801b132:	f000 fa75 	bl	801b620 <ip4_output_if>
 801b136:	4603      	mov	r3, r0
 801b138:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b13a:	e001      	b.n	801b140 <icmp_input+0x1b8>
      break;
 801b13c:	bf00      	nop
 801b13e:	e000      	b.n	801b142 <icmp_input+0x1ba>
      break;
 801b140:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b142:	6878      	ldr	r0, [r7, #4]
 801b144:	f7f7 ff0e 	bl	8012f64 <pbuf_free>
  return;
 801b148:	e013      	b.n	801b172 <icmp_input+0x1ea>
    goto lenerr;
 801b14a:	bf00      	nop
 801b14c:	e002      	b.n	801b154 <icmp_input+0x1cc>
    goto lenerr;
 801b14e:	bf00      	nop
 801b150:	e000      	b.n	801b154 <icmp_input+0x1cc>
        goto lenerr;
 801b152:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b154:	6878      	ldr	r0, [r7, #4]
 801b156:	f7f7 ff05 	bl	8012f64 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b15a:	e00a      	b.n	801b172 <icmp_input+0x1ea>
        goto icmperr;
 801b15c:	bf00      	nop
 801b15e:	e004      	b.n	801b16a <icmp_input+0x1e2>
        goto icmperr;
 801b160:	bf00      	nop
 801b162:	e002      	b.n	801b16a <icmp_input+0x1e2>
          goto icmperr;
 801b164:	bf00      	nop
 801b166:	e000      	b.n	801b16a <icmp_input+0x1e2>
          goto icmperr;
 801b168:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b16a:	6878      	ldr	r0, [r7, #4]
 801b16c:	f7f7 fefa 	bl	8012f64 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b170:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b172:	3728      	adds	r7, #40	; 0x28
 801b174:	46bd      	mov	sp, r7
 801b176:	bd80      	pop	{r7, pc}
 801b178:	2000a804 	.word	0x2000a804
 801b17c:	2000a818 	.word	0x2000a818
 801b180:	080214fc 	.word	0x080214fc
 801b184:	08021534 	.word	0x08021534
 801b188:	0802156c 	.word	0x0802156c
 801b18c:	08021594 	.word	0x08021594

0801b190 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
 801b198:	460b      	mov	r3, r1
 801b19a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b19c:	78fb      	ldrb	r3, [r7, #3]
 801b19e:	461a      	mov	r2, r3
 801b1a0:	2103      	movs	r1, #3
 801b1a2:	6878      	ldr	r0, [r7, #4]
 801b1a4:	f000 f814 	bl	801b1d0 <icmp_send_response>
}
 801b1a8:	bf00      	nop
 801b1aa:	3708      	adds	r7, #8
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}

0801b1b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b082      	sub	sp, #8
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	6078      	str	r0, [r7, #4]
 801b1b8:	460b      	mov	r3, r1
 801b1ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b1bc:	78fb      	ldrb	r3, [r7, #3]
 801b1be:	461a      	mov	r2, r3
 801b1c0:	210b      	movs	r1, #11
 801b1c2:	6878      	ldr	r0, [r7, #4]
 801b1c4:	f000 f804 	bl	801b1d0 <icmp_send_response>
}
 801b1c8:	bf00      	nop
 801b1ca:	3708      	adds	r7, #8
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bd80      	pop	{r7, pc}

0801b1d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b08c      	sub	sp, #48	; 0x30
 801b1d4:	af04      	add	r7, sp, #16
 801b1d6:	6078      	str	r0, [r7, #4]
 801b1d8:	460b      	mov	r3, r1
 801b1da:	70fb      	strb	r3, [r7, #3]
 801b1dc:	4613      	mov	r3, r2
 801b1de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b1e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b1e4:	2124      	movs	r1, #36	; 0x24
 801b1e6:	2022      	movs	r0, #34	; 0x22
 801b1e8:	f7f7 fbd8 	bl	801299c <pbuf_alloc>
 801b1ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b1ee:	69fb      	ldr	r3, [r7, #28]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d04c      	beq.n	801b28e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b1f4:	69fb      	ldr	r3, [r7, #28]
 801b1f6:	895b      	ldrh	r3, [r3, #10]
 801b1f8:	2b23      	cmp	r3, #35	; 0x23
 801b1fa:	d806      	bhi.n	801b20a <icmp_send_response+0x3a>
 801b1fc:	4b26      	ldr	r3, [pc, #152]	; (801b298 <icmp_send_response+0xc8>)
 801b1fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801b202:	4926      	ldr	r1, [pc, #152]	; (801b29c <icmp_send_response+0xcc>)
 801b204:	4826      	ldr	r0, [pc, #152]	; (801b2a0 <icmp_send_response+0xd0>)
 801b206:	f001 fe1f 	bl	801ce48 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	685b      	ldr	r3, [r3, #4]
 801b20e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b210:	69fb      	ldr	r3, [r7, #28]
 801b212:	685b      	ldr	r3, [r3, #4]
 801b214:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b216:	697b      	ldr	r3, [r7, #20]
 801b218:	78fa      	ldrb	r2, [r7, #3]
 801b21a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b21c:	697b      	ldr	r3, [r7, #20]
 801b21e:	78ba      	ldrb	r2, [r7, #2]
 801b220:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b222:	697b      	ldr	r3, [r7, #20]
 801b224:	2200      	movs	r2, #0
 801b226:	711a      	strb	r2, [r3, #4]
 801b228:	2200      	movs	r2, #0
 801b22a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b22c:	697b      	ldr	r3, [r7, #20]
 801b22e:	2200      	movs	r2, #0
 801b230:	719a      	strb	r2, [r3, #6]
 801b232:	2200      	movs	r2, #0
 801b234:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b236:	69fb      	ldr	r3, [r7, #28]
 801b238:	685b      	ldr	r3, [r3, #4]
 801b23a:	f103 0008 	add.w	r0, r3, #8
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	685b      	ldr	r3, [r3, #4]
 801b242:	221c      	movs	r2, #28
 801b244:	4619      	mov	r1, r3
 801b246:	f001 fd25 	bl	801cc94 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b24a:	69bb      	ldr	r3, [r7, #24]
 801b24c:	68db      	ldr	r3, [r3, #12]
 801b24e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b250:	f107 030c 	add.w	r3, r7, #12
 801b254:	4618      	mov	r0, r3
 801b256:	f000 f825 	bl	801b2a4 <ip4_route>
 801b25a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b25c:	693b      	ldr	r3, [r7, #16]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d011      	beq.n	801b286 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b262:	697b      	ldr	r3, [r7, #20]
 801b264:	2200      	movs	r2, #0
 801b266:	709a      	strb	r2, [r3, #2]
 801b268:	2200      	movs	r2, #0
 801b26a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b26c:	f107 020c 	add.w	r2, r7, #12
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	9302      	str	r3, [sp, #8]
 801b274:	2301      	movs	r3, #1
 801b276:	9301      	str	r3, [sp, #4]
 801b278:	2300      	movs	r3, #0
 801b27a:	9300      	str	r3, [sp, #0]
 801b27c:	23ff      	movs	r3, #255	; 0xff
 801b27e:	2100      	movs	r1, #0
 801b280:	69f8      	ldr	r0, [r7, #28]
 801b282:	f000 f9cd 	bl	801b620 <ip4_output_if>
  }
  pbuf_free(q);
 801b286:	69f8      	ldr	r0, [r7, #28]
 801b288:	f7f7 fe6c 	bl	8012f64 <pbuf_free>
 801b28c:	e000      	b.n	801b290 <icmp_send_response+0xc0>
    return;
 801b28e:	bf00      	nop
}
 801b290:	3720      	adds	r7, #32
 801b292:	46bd      	mov	sp, r7
 801b294:	bd80      	pop	{r7, pc}
 801b296:	bf00      	nop
 801b298:	080214fc 	.word	0x080214fc
 801b29c:	080215c8 	.word	0x080215c8
 801b2a0:	0802156c 	.word	0x0802156c

0801b2a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b2a4:	b480      	push	{r7}
 801b2a6:	b085      	sub	sp, #20
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b2ac:	4b33      	ldr	r3, [pc, #204]	; (801b37c <ip4_route+0xd8>)
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	60fb      	str	r3, [r7, #12]
 801b2b2:	e036      	b.n	801b322 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b2ba:	f003 0301 	and.w	r3, r3, #1
 801b2be:	b2db      	uxtb	r3, r3
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d02b      	beq.n	801b31c <ip4_route+0x78>
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b2ca:	089b      	lsrs	r3, r3, #2
 801b2cc:	f003 0301 	and.w	r3, r3, #1
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d022      	beq.n	801b31c <ip4_route+0x78>
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	3304      	adds	r3, #4
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d01d      	beq.n	801b31c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681a      	ldr	r2, [r3, #0]
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	3304      	adds	r3, #4
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	405a      	eors	r2, r3
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	3308      	adds	r3, #8
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	4013      	ands	r3, r2
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d101      	bne.n	801b2fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	e038      	b.n	801b36e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b302:	f003 0302 	and.w	r3, r3, #2
 801b306:	2b00      	cmp	r3, #0
 801b308:	d108      	bne.n	801b31c <ip4_route+0x78>
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681a      	ldr	r2, [r3, #0]
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	330c      	adds	r3, #12
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	429a      	cmp	r2, r3
 801b316:	d101      	bne.n	801b31c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	e028      	b.n	801b36e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	60fb      	str	r3, [r7, #12]
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d1c5      	bne.n	801b2b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b328:	4b15      	ldr	r3, [pc, #84]	; (801b380 <ip4_route+0xdc>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d01a      	beq.n	801b366 <ip4_route+0xc2>
 801b330:	4b13      	ldr	r3, [pc, #76]	; (801b380 <ip4_route+0xdc>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b338:	f003 0301 	and.w	r3, r3, #1
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d012      	beq.n	801b366 <ip4_route+0xc2>
 801b340:	4b0f      	ldr	r3, [pc, #60]	; (801b380 <ip4_route+0xdc>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b348:	f003 0304 	and.w	r3, r3, #4
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d00a      	beq.n	801b366 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b350:	4b0b      	ldr	r3, [pc, #44]	; (801b380 <ip4_route+0xdc>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	3304      	adds	r3, #4
 801b356:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d004      	beq.n	801b366 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	b2db      	uxtb	r3, r3
 801b362:	2b7f      	cmp	r3, #127	; 0x7f
 801b364:	d101      	bne.n	801b36a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b366:	2300      	movs	r3, #0
 801b368:	e001      	b.n	801b36e <ip4_route+0xca>
  }

  return netif_default;
 801b36a:	4b05      	ldr	r3, [pc, #20]	; (801b380 <ip4_route+0xdc>)
 801b36c:	681b      	ldr	r3, [r3, #0]
}
 801b36e:	4618      	mov	r0, r3
 801b370:	3714      	adds	r7, #20
 801b372:	46bd      	mov	sp, r7
 801b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b378:	4770      	bx	lr
 801b37a:	bf00      	nop
 801b37c:	2000df08 	.word	0x2000df08
 801b380:	2000df0c 	.word	0x2000df0c

0801b384 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b082      	sub	sp, #8
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b392:	f003 0301 	and.w	r3, r3, #1
 801b396:	b2db      	uxtb	r3, r3
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d016      	beq.n	801b3ca <ip4_input_accept+0x46>
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	3304      	adds	r3, #4
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d011      	beq.n	801b3ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3a6:	4b0b      	ldr	r3, [pc, #44]	; (801b3d4 <ip4_input_accept+0x50>)
 801b3a8:	695a      	ldr	r2, [r3, #20]
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	3304      	adds	r3, #4
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	429a      	cmp	r2, r3
 801b3b2:	d008      	beq.n	801b3c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b3b4:	4b07      	ldr	r3, [pc, #28]	; (801b3d4 <ip4_input_accept+0x50>)
 801b3b6:	695b      	ldr	r3, [r3, #20]
 801b3b8:	6879      	ldr	r1, [r7, #4]
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f000 fa08 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801b3c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d001      	beq.n	801b3ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b3c6:	2301      	movs	r3, #1
 801b3c8:	e000      	b.n	801b3cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b3ca:	2300      	movs	r3, #0
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3708      	adds	r7, #8
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	2000a804 	.word	0x2000a804

0801b3d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b086      	sub	sp, #24
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
 801b3e0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	685b      	ldr	r3, [r3, #4]
 801b3e6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b3e8:	697b      	ldr	r3, [r7, #20]
 801b3ea:	781b      	ldrb	r3, [r3, #0]
 801b3ec:	091b      	lsrs	r3, r3, #4
 801b3ee:	b2db      	uxtb	r3, r3
 801b3f0:	2b04      	cmp	r3, #4
 801b3f2:	d004      	beq.n	801b3fe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b3f4:	6878      	ldr	r0, [r7, #4]
 801b3f6:	f7f7 fdb5 	bl	8012f64 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	e107      	b.n	801b60e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b3fe:	697b      	ldr	r3, [r7, #20]
 801b400:	781b      	ldrb	r3, [r3, #0]
 801b402:	f003 030f 	and.w	r3, r3, #15
 801b406:	b2db      	uxtb	r3, r3
 801b408:	009b      	lsls	r3, r3, #2
 801b40a:	b2db      	uxtb	r3, r3
 801b40c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b40e:	697b      	ldr	r3, [r7, #20]
 801b410:	885b      	ldrh	r3, [r3, #2]
 801b412:	b29b      	uxth	r3, r3
 801b414:	4618      	mov	r0, r3
 801b416:	f7f6 fa5d 	bl	80118d4 <lwip_htons>
 801b41a:	4603      	mov	r3, r0
 801b41c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	891b      	ldrh	r3, [r3, #8]
 801b422:	89ba      	ldrh	r2, [r7, #12]
 801b424:	429a      	cmp	r2, r3
 801b426:	d204      	bcs.n	801b432 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b428:	89bb      	ldrh	r3, [r7, #12]
 801b42a:	4619      	mov	r1, r3
 801b42c:	6878      	ldr	r0, [r7, #4]
 801b42e:	f7f7 fc13 	bl	8012c58 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	895b      	ldrh	r3, [r3, #10]
 801b436:	89fa      	ldrh	r2, [r7, #14]
 801b438:	429a      	cmp	r2, r3
 801b43a:	d807      	bhi.n	801b44c <ip4_input+0x74>
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	891b      	ldrh	r3, [r3, #8]
 801b440:	89ba      	ldrh	r2, [r7, #12]
 801b442:	429a      	cmp	r2, r3
 801b444:	d802      	bhi.n	801b44c <ip4_input+0x74>
 801b446:	89fb      	ldrh	r3, [r7, #14]
 801b448:	2b13      	cmp	r3, #19
 801b44a:	d804      	bhi.n	801b456 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b44c:	6878      	ldr	r0, [r7, #4]
 801b44e:	f7f7 fd89 	bl	8012f64 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b452:	2300      	movs	r3, #0
 801b454:	e0db      	b.n	801b60e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	691b      	ldr	r3, [r3, #16]
 801b45a:	4a6f      	ldr	r2, [pc, #444]	; (801b618 <ip4_input+0x240>)
 801b45c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b45e:	697b      	ldr	r3, [r7, #20]
 801b460:	68db      	ldr	r3, [r3, #12]
 801b462:	4a6d      	ldr	r2, [pc, #436]	; (801b618 <ip4_input+0x240>)
 801b464:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b466:	4b6c      	ldr	r3, [pc, #432]	; (801b618 <ip4_input+0x240>)
 801b468:	695b      	ldr	r3, [r3, #20]
 801b46a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b46e:	2be0      	cmp	r3, #224	; 0xe0
 801b470:	d112      	bne.n	801b498 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b472:	683b      	ldr	r3, [r7, #0]
 801b474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b478:	f003 0301 	and.w	r3, r3, #1
 801b47c:	b2db      	uxtb	r3, r3
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d007      	beq.n	801b492 <ip4_input+0xba>
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	3304      	adds	r3, #4
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d002      	beq.n	801b492 <ip4_input+0xba>
      netif = inp;
 801b48c:	683b      	ldr	r3, [r7, #0]
 801b48e:	613b      	str	r3, [r7, #16]
 801b490:	e02a      	b.n	801b4e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b492:	2300      	movs	r3, #0
 801b494:	613b      	str	r3, [r7, #16]
 801b496:	e027      	b.n	801b4e8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b498:	6838      	ldr	r0, [r7, #0]
 801b49a:	f7ff ff73 	bl	801b384 <ip4_input_accept>
 801b49e:	4603      	mov	r3, r0
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d002      	beq.n	801b4aa <ip4_input+0xd2>
      netif = inp;
 801b4a4:	683b      	ldr	r3, [r7, #0]
 801b4a6:	613b      	str	r3, [r7, #16]
 801b4a8:	e01e      	b.n	801b4e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b4ae:	4b5a      	ldr	r3, [pc, #360]	; (801b618 <ip4_input+0x240>)
 801b4b0:	695b      	ldr	r3, [r3, #20]
 801b4b2:	b2db      	uxtb	r3, r3
 801b4b4:	2b7f      	cmp	r3, #127	; 0x7f
 801b4b6:	d017      	beq.n	801b4e8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b4b8:	4b58      	ldr	r3, [pc, #352]	; (801b61c <ip4_input+0x244>)
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	613b      	str	r3, [r7, #16]
 801b4be:	e00e      	b.n	801b4de <ip4_input+0x106>
          if (netif == inp) {
 801b4c0:	693a      	ldr	r2, [r7, #16]
 801b4c2:	683b      	ldr	r3, [r7, #0]
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	d006      	beq.n	801b4d6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b4c8:	6938      	ldr	r0, [r7, #16]
 801b4ca:	f7ff ff5b 	bl	801b384 <ip4_input_accept>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d108      	bne.n	801b4e6 <ip4_input+0x10e>
 801b4d4:	e000      	b.n	801b4d8 <ip4_input+0x100>
            continue;
 801b4d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b4d8:	693b      	ldr	r3, [r7, #16]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	613b      	str	r3, [r7, #16]
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d1ed      	bne.n	801b4c0 <ip4_input+0xe8>
 801b4e4:	e000      	b.n	801b4e8 <ip4_input+0x110>
            break;
 801b4e6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b4e8:	4b4b      	ldr	r3, [pc, #300]	; (801b618 <ip4_input+0x240>)
 801b4ea:	691b      	ldr	r3, [r3, #16]
 801b4ec:	6839      	ldr	r1, [r7, #0]
 801b4ee:	4618      	mov	r0, r3
 801b4f0:	f000 f96e 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d105      	bne.n	801b506 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b4fa:	4b47      	ldr	r3, [pc, #284]	; (801b618 <ip4_input+0x240>)
 801b4fc:	691b      	ldr	r3, [r3, #16]
 801b4fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b502:	2be0      	cmp	r3, #224	; 0xe0
 801b504:	d104      	bne.n	801b510 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b506:	6878      	ldr	r0, [r7, #4]
 801b508:	f7f7 fd2c 	bl	8012f64 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b50c:	2300      	movs	r3, #0
 801b50e:	e07e      	b.n	801b60e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b510:	693b      	ldr	r3, [r7, #16]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d104      	bne.n	801b520 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b516:	6878      	ldr	r0, [r7, #4]
 801b518:	f7f7 fd24 	bl	8012f64 <pbuf_free>
    return ERR_OK;
 801b51c:	2300      	movs	r3, #0
 801b51e:	e076      	b.n	801b60e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b520:	697b      	ldr	r3, [r7, #20]
 801b522:	88db      	ldrh	r3, [r3, #6]
 801b524:	b29b      	uxth	r3, r3
 801b526:	461a      	mov	r2, r3
 801b528:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b52c:	4013      	ands	r3, r2
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d00b      	beq.n	801b54a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b532:	6878      	ldr	r0, [r7, #4]
 801b534:	f000 fc92 	bl	801be5c <ip4_reass>
 801b538:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d101      	bne.n	801b544 <ip4_input+0x16c>
      return ERR_OK;
 801b540:	2300      	movs	r3, #0
 801b542:	e064      	b.n	801b60e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	685b      	ldr	r3, [r3, #4]
 801b548:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b54a:	4a33      	ldr	r2, [pc, #204]	; (801b618 <ip4_input+0x240>)
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b550:	4a31      	ldr	r2, [pc, #196]	; (801b618 <ip4_input+0x240>)
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b556:	4a30      	ldr	r2, [pc, #192]	; (801b618 <ip4_input+0x240>)
 801b558:	697b      	ldr	r3, [r7, #20]
 801b55a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	781b      	ldrb	r3, [r3, #0]
 801b560:	f003 030f 	and.w	r3, r3, #15
 801b564:	b2db      	uxtb	r3, r3
 801b566:	009b      	lsls	r3, r3, #2
 801b568:	b2db      	uxtb	r3, r3
 801b56a:	b29a      	uxth	r2, r3
 801b56c:	4b2a      	ldr	r3, [pc, #168]	; (801b618 <ip4_input+0x240>)
 801b56e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b570:	89fb      	ldrh	r3, [r7, #14]
 801b572:	4619      	mov	r1, r3
 801b574:	6878      	ldr	r0, [r7, #4]
 801b576:	f7f7 fc6f 	bl	8012e58 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	7a5b      	ldrb	r3, [r3, #9]
 801b57e:	2b11      	cmp	r3, #17
 801b580:	d006      	beq.n	801b590 <ip4_input+0x1b8>
 801b582:	2b11      	cmp	r3, #17
 801b584:	dc13      	bgt.n	801b5ae <ip4_input+0x1d6>
 801b586:	2b01      	cmp	r3, #1
 801b588:	d00c      	beq.n	801b5a4 <ip4_input+0x1cc>
 801b58a:	2b06      	cmp	r3, #6
 801b58c:	d005      	beq.n	801b59a <ip4_input+0x1c2>
 801b58e:	e00e      	b.n	801b5ae <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b590:	6839      	ldr	r1, [r7, #0]
 801b592:	6878      	ldr	r0, [r7, #4]
 801b594:	f7fe f970 	bl	8019878 <udp_input>
        break;
 801b598:	e026      	b.n	801b5e8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b59a:	6839      	ldr	r1, [r7, #0]
 801b59c:	6878      	ldr	r0, [r7, #4]
 801b59e:	f7f9 fd2d 	bl	8014ffc <tcp_input>
        break;
 801b5a2:	e021      	b.n	801b5e8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b5a4:	6839      	ldr	r1, [r7, #0]
 801b5a6:	6878      	ldr	r0, [r7, #4]
 801b5a8:	f7ff fcee 	bl	801af88 <icmp_input>
        break;
 801b5ac:	e01c      	b.n	801b5e8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5ae:	4b1a      	ldr	r3, [pc, #104]	; (801b618 <ip4_input+0x240>)
 801b5b0:	695b      	ldr	r3, [r3, #20]
 801b5b2:	6939      	ldr	r1, [r7, #16]
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	f000 f90b 	bl	801b7d0 <ip4_addr_isbroadcast_u32>
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d10f      	bne.n	801b5e0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5c0:	4b15      	ldr	r3, [pc, #84]	; (801b618 <ip4_input+0x240>)
 801b5c2:	695b      	ldr	r3, [r3, #20]
 801b5c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5c8:	2be0      	cmp	r3, #224	; 0xe0
 801b5ca:	d009      	beq.n	801b5e0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b5cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b5d0:	4619      	mov	r1, r3
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	f7f7 fcb3 	bl	8012f3e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b5d8:	2102      	movs	r1, #2
 801b5da:	6878      	ldr	r0, [r7, #4]
 801b5dc:	f7ff fdd8 	bl	801b190 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b5e0:	6878      	ldr	r0, [r7, #4]
 801b5e2:	f7f7 fcbf 	bl	8012f64 <pbuf_free>
        break;
 801b5e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b5e8:	4b0b      	ldr	r3, [pc, #44]	; (801b618 <ip4_input+0x240>)
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b5ee:	4b0a      	ldr	r3, [pc, #40]	; (801b618 <ip4_input+0x240>)
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b5f4:	4b08      	ldr	r3, [pc, #32]	; (801b618 <ip4_input+0x240>)
 801b5f6:	2200      	movs	r2, #0
 801b5f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b5fa:	4b07      	ldr	r3, [pc, #28]	; (801b618 <ip4_input+0x240>)
 801b5fc:	2200      	movs	r2, #0
 801b5fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b600:	4b05      	ldr	r3, [pc, #20]	; (801b618 <ip4_input+0x240>)
 801b602:	2200      	movs	r2, #0
 801b604:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b606:	4b04      	ldr	r3, [pc, #16]	; (801b618 <ip4_input+0x240>)
 801b608:	2200      	movs	r2, #0
 801b60a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b60c:	2300      	movs	r3, #0
}
 801b60e:	4618      	mov	r0, r3
 801b610:	3718      	adds	r7, #24
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}
 801b616:	bf00      	nop
 801b618:	2000a804 	.word	0x2000a804
 801b61c:	2000df08 	.word	0x2000df08

0801b620 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b08a      	sub	sp, #40	; 0x28
 801b624:	af04      	add	r7, sp, #16
 801b626:	60f8      	str	r0, [r7, #12]
 801b628:	60b9      	str	r1, [r7, #8]
 801b62a:	607a      	str	r2, [r7, #4]
 801b62c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d009      	beq.n	801b64c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d003      	beq.n	801b646 <ip4_output_if+0x26>
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d102      	bne.n	801b64c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b648:	3304      	adds	r3, #4
 801b64a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b64c:	78fa      	ldrb	r2, [r7, #3]
 801b64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b650:	9302      	str	r3, [sp, #8]
 801b652:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b656:	9301      	str	r3, [sp, #4]
 801b658:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b65c:	9300      	str	r3, [sp, #0]
 801b65e:	4613      	mov	r3, r2
 801b660:	687a      	ldr	r2, [r7, #4]
 801b662:	6979      	ldr	r1, [r7, #20]
 801b664:	68f8      	ldr	r0, [r7, #12]
 801b666:	f000 f805 	bl	801b674 <ip4_output_if_src>
 801b66a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b66c:	4618      	mov	r0, r3
 801b66e:	3718      	adds	r7, #24
 801b670:	46bd      	mov	sp, r7
 801b672:	bd80      	pop	{r7, pc}

0801b674 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b088      	sub	sp, #32
 801b678:	af00      	add	r7, sp, #0
 801b67a:	60f8      	str	r0, [r7, #12]
 801b67c:	60b9      	str	r1, [r7, #8]
 801b67e:	607a      	str	r2, [r7, #4]
 801b680:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	7b9b      	ldrb	r3, [r3, #14]
 801b686:	2b01      	cmp	r3, #1
 801b688:	d006      	beq.n	801b698 <ip4_output_if_src+0x24>
 801b68a:	4b4b      	ldr	r3, [pc, #300]	; (801b7b8 <ip4_output_if_src+0x144>)
 801b68c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b690:	494a      	ldr	r1, [pc, #296]	; (801b7bc <ip4_output_if_src+0x148>)
 801b692:	484b      	ldr	r0, [pc, #300]	; (801b7c0 <ip4_output_if_src+0x14c>)
 801b694:	f001 fbd8 	bl	801ce48 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d060      	beq.n	801b760 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b69e:	2314      	movs	r3, #20
 801b6a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b6a2:	2114      	movs	r1, #20
 801b6a4:	68f8      	ldr	r0, [r7, #12]
 801b6a6:	f7f7 fbc7 	bl	8012e38 <pbuf_add_header>
 801b6aa:	4603      	mov	r3, r0
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d002      	beq.n	801b6b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b6b0:	f06f 0301 	mvn.w	r3, #1
 801b6b4:	e07c      	b.n	801b7b0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	685b      	ldr	r3, [r3, #4]
 801b6ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b6bc:	68fb      	ldr	r3, [r7, #12]
 801b6be:	895b      	ldrh	r3, [r3, #10]
 801b6c0:	2b13      	cmp	r3, #19
 801b6c2:	d806      	bhi.n	801b6d2 <ip4_output_if_src+0x5e>
 801b6c4:	4b3c      	ldr	r3, [pc, #240]	; (801b7b8 <ip4_output_if_src+0x144>)
 801b6c6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b6ca:	493e      	ldr	r1, [pc, #248]	; (801b7c4 <ip4_output_if_src+0x150>)
 801b6cc:	483c      	ldr	r0, [pc, #240]	; (801b7c0 <ip4_output_if_src+0x14c>)
 801b6ce:	f001 fbbb 	bl	801ce48 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b6d2:	69fb      	ldr	r3, [r7, #28]
 801b6d4:	78fa      	ldrb	r2, [r7, #3]
 801b6d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b6d8:	69fb      	ldr	r3, [r7, #28]
 801b6da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b6de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681a      	ldr	r2, [r3, #0]
 801b6e4:	69fb      	ldr	r3, [r7, #28]
 801b6e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b6e8:	8b7b      	ldrh	r3, [r7, #26]
 801b6ea:	089b      	lsrs	r3, r3, #2
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b6f4:	b2da      	uxtb	r2, r3
 801b6f6:	69fb      	ldr	r3, [r7, #28]
 801b6f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b6fa:	69fb      	ldr	r3, [r7, #28]
 801b6fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b700:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	891b      	ldrh	r3, [r3, #8]
 801b706:	4618      	mov	r0, r3
 801b708:	f7f6 f8e4 	bl	80118d4 <lwip_htons>
 801b70c:	4603      	mov	r3, r0
 801b70e:	461a      	mov	r2, r3
 801b710:	69fb      	ldr	r3, [r7, #28]
 801b712:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b714:	69fb      	ldr	r3, [r7, #28]
 801b716:	2200      	movs	r2, #0
 801b718:	719a      	strb	r2, [r3, #6]
 801b71a:	2200      	movs	r2, #0
 801b71c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b71e:	4b2a      	ldr	r3, [pc, #168]	; (801b7c8 <ip4_output_if_src+0x154>)
 801b720:	881b      	ldrh	r3, [r3, #0]
 801b722:	4618      	mov	r0, r3
 801b724:	f7f6 f8d6 	bl	80118d4 <lwip_htons>
 801b728:	4603      	mov	r3, r0
 801b72a:	461a      	mov	r2, r3
 801b72c:	69fb      	ldr	r3, [r7, #28]
 801b72e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b730:	4b25      	ldr	r3, [pc, #148]	; (801b7c8 <ip4_output_if_src+0x154>)
 801b732:	881b      	ldrh	r3, [r3, #0]
 801b734:	3301      	adds	r3, #1
 801b736:	b29a      	uxth	r2, r3
 801b738:	4b23      	ldr	r3, [pc, #140]	; (801b7c8 <ip4_output_if_src+0x154>)
 801b73a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b73c:	68bb      	ldr	r3, [r7, #8]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d104      	bne.n	801b74c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b742:	4b22      	ldr	r3, [pc, #136]	; (801b7cc <ip4_output_if_src+0x158>)
 801b744:	681a      	ldr	r2, [r3, #0]
 801b746:	69fb      	ldr	r3, [r7, #28]
 801b748:	60da      	str	r2, [r3, #12]
 801b74a:	e003      	b.n	801b754 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b74c:	68bb      	ldr	r3, [r7, #8]
 801b74e:	681a      	ldr	r2, [r3, #0]
 801b750:	69fb      	ldr	r3, [r7, #28]
 801b752:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b754:	69fb      	ldr	r3, [r7, #28]
 801b756:	2200      	movs	r2, #0
 801b758:	729a      	strb	r2, [r3, #10]
 801b75a:	2200      	movs	r2, #0
 801b75c:	72da      	strb	r2, [r3, #11]
 801b75e:	e00f      	b.n	801b780 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	895b      	ldrh	r3, [r3, #10]
 801b764:	2b13      	cmp	r3, #19
 801b766:	d802      	bhi.n	801b76e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b768:	f06f 0301 	mvn.w	r3, #1
 801b76c:	e020      	b.n	801b7b0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	685b      	ldr	r3, [r3, #4]
 801b772:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b774:	69fb      	ldr	r3, [r7, #28]
 801b776:	691b      	ldr	r3, [r3, #16]
 801b778:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b77a:	f107 0314 	add.w	r3, r7, #20
 801b77e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b784:	2b00      	cmp	r3, #0
 801b786:	d00c      	beq.n	801b7a2 <ip4_output_if_src+0x12e>
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	891a      	ldrh	r2, [r3, #8]
 801b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b78e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b790:	429a      	cmp	r2, r3
 801b792:	d906      	bls.n	801b7a2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b794:	687a      	ldr	r2, [r7, #4]
 801b796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b798:	68f8      	ldr	r0, [r7, #12]
 801b79a:	f000 fd4d 	bl	801c238 <ip4_frag>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	e006      	b.n	801b7b0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a4:	695b      	ldr	r3, [r3, #20]
 801b7a6:	687a      	ldr	r2, [r7, #4]
 801b7a8:	68f9      	ldr	r1, [r7, #12]
 801b7aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b7ac:	4798      	blx	r3
 801b7ae:	4603      	mov	r3, r0
}
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	3720      	adds	r7, #32
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	080215f4 	.word	0x080215f4
 801b7bc:	08021628 	.word	0x08021628
 801b7c0:	08021634 	.word	0x08021634
 801b7c4:	0802165c 	.word	0x0802165c
 801b7c8:	20006d16 	.word	0x20006d16
 801b7cc:	08021a7c 	.word	0x08021a7c

0801b7d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b7d0:	b480      	push	{r7}
 801b7d2:	b085      	sub	sp, #20
 801b7d4:	af00      	add	r7, sp, #0
 801b7d6:	6078      	str	r0, [r7, #4]
 801b7d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7e4:	d002      	beq.n	801b7ec <ip4_addr_isbroadcast_u32+0x1c>
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d101      	bne.n	801b7f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b7ec:	2301      	movs	r3, #1
 801b7ee:	e02a      	b.n	801b846 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b7f6:	f003 0302 	and.w	r3, r3, #2
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d101      	bne.n	801b802 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b7fe:	2300      	movs	r3, #0
 801b800:	e021      	b.n	801b846 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	3304      	adds	r3, #4
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	687a      	ldr	r2, [r7, #4]
 801b80a:	429a      	cmp	r2, r3
 801b80c:	d101      	bne.n	801b812 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b80e:	2300      	movs	r3, #0
 801b810:	e019      	b.n	801b846 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b812:	68fa      	ldr	r2, [r7, #12]
 801b814:	683b      	ldr	r3, [r7, #0]
 801b816:	3304      	adds	r3, #4
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	405a      	eors	r2, r3
 801b81c:	683b      	ldr	r3, [r7, #0]
 801b81e:	3308      	adds	r3, #8
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	4013      	ands	r3, r2
 801b824:	2b00      	cmp	r3, #0
 801b826:	d10d      	bne.n	801b844 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b828:	683b      	ldr	r3, [r7, #0]
 801b82a:	3308      	adds	r3, #8
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	43da      	mvns	r2, r3
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b834:	683b      	ldr	r3, [r7, #0]
 801b836:	3308      	adds	r3, #8
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b83c:	429a      	cmp	r2, r3
 801b83e:	d101      	bne.n	801b844 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b840:	2301      	movs	r3, #1
 801b842:	e000      	b.n	801b846 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b844:	2300      	movs	r3, #0
  }
}
 801b846:	4618      	mov	r0, r3
 801b848:	3714      	adds	r7, #20
 801b84a:	46bd      	mov	sp, r7
 801b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b850:	4770      	bx	lr
	...

0801b854 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b084      	sub	sp, #16
 801b858:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b85a:	2300      	movs	r3, #0
 801b85c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b85e:	4b12      	ldr	r3, [pc, #72]	; (801b8a8 <ip_reass_tmr+0x54>)
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b864:	e018      	b.n	801b898 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	7fdb      	ldrb	r3, [r3, #31]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d00b      	beq.n	801b886 <ip_reass_tmr+0x32>
      r->timer--;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	7fdb      	ldrb	r3, [r3, #31]
 801b872:	3b01      	subs	r3, #1
 801b874:	b2da      	uxtb	r2, r3
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	60fb      	str	r3, [r7, #12]
 801b884:	e008      	b.n	801b898 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b890:	68b9      	ldr	r1, [r7, #8]
 801b892:	6878      	ldr	r0, [r7, #4]
 801b894:	f000 f80a 	bl	801b8ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d1e3      	bne.n	801b866 <ip_reass_tmr+0x12>
    }
  }
}
 801b89e:	bf00      	nop
 801b8a0:	bf00      	nop
 801b8a2:	3710      	adds	r7, #16
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd80      	pop	{r7, pc}
 801b8a8:	20006d18 	.word	0x20006d18

0801b8ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b088      	sub	sp, #32
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
 801b8b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b8ba:	683a      	ldr	r2, [r7, #0]
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d105      	bne.n	801b8ce <ip_reass_free_complete_datagram+0x22>
 801b8c2:	4b45      	ldr	r3, [pc, #276]	; (801b9d8 <ip_reass_free_complete_datagram+0x12c>)
 801b8c4:	22ab      	movs	r2, #171	; 0xab
 801b8c6:	4945      	ldr	r1, [pc, #276]	; (801b9dc <ip_reass_free_complete_datagram+0x130>)
 801b8c8:	4845      	ldr	r0, [pc, #276]	; (801b9e0 <ip_reass_free_complete_datagram+0x134>)
 801b8ca:	f001 fabd 	bl	801ce48 <iprintf>
  if (prev != NULL) {
 801b8ce:	683b      	ldr	r3, [r7, #0]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d00a      	beq.n	801b8ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b8d4:	683b      	ldr	r3, [r7, #0]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	687a      	ldr	r2, [r7, #4]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	d005      	beq.n	801b8ea <ip_reass_free_complete_datagram+0x3e>
 801b8de:	4b3e      	ldr	r3, [pc, #248]	; (801b9d8 <ip_reass_free_complete_datagram+0x12c>)
 801b8e0:	22ad      	movs	r2, #173	; 0xad
 801b8e2:	4940      	ldr	r1, [pc, #256]	; (801b9e4 <ip_reass_free_complete_datagram+0x138>)
 801b8e4:	483e      	ldr	r0, [pc, #248]	; (801b9e0 <ip_reass_free_complete_datagram+0x134>)
 801b8e6:	f001 faaf 	bl	801ce48 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	685b      	ldr	r3, [r3, #4]
 801b8f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b8f2:	697b      	ldr	r3, [r7, #20]
 801b8f4:	889b      	ldrh	r3, [r3, #4]
 801b8f6:	b29b      	uxth	r3, r3
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d12a      	bne.n	801b952 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	685b      	ldr	r3, [r3, #4]
 801b900:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b902:	697b      	ldr	r3, [r7, #20]
 801b904:	681a      	ldr	r2, [r3, #0]
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b90a:	69bb      	ldr	r3, [r7, #24]
 801b90c:	6858      	ldr	r0, [r3, #4]
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	3308      	adds	r3, #8
 801b912:	2214      	movs	r2, #20
 801b914:	4619      	mov	r1, r3
 801b916:	f001 f9bd 	bl	801cc94 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b91a:	2101      	movs	r1, #1
 801b91c:	69b8      	ldr	r0, [r7, #24]
 801b91e:	f7ff fc47 	bl	801b1b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b922:	69b8      	ldr	r0, [r7, #24]
 801b924:	f7f7 fbac 	bl	8013080 <pbuf_clen>
 801b928:	4603      	mov	r3, r0
 801b92a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b92c:	8bfa      	ldrh	r2, [r7, #30]
 801b92e:	8a7b      	ldrh	r3, [r7, #18]
 801b930:	4413      	add	r3, r2
 801b932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b936:	db05      	blt.n	801b944 <ip_reass_free_complete_datagram+0x98>
 801b938:	4b27      	ldr	r3, [pc, #156]	; (801b9d8 <ip_reass_free_complete_datagram+0x12c>)
 801b93a:	22bc      	movs	r2, #188	; 0xbc
 801b93c:	492a      	ldr	r1, [pc, #168]	; (801b9e8 <ip_reass_free_complete_datagram+0x13c>)
 801b93e:	4828      	ldr	r0, [pc, #160]	; (801b9e0 <ip_reass_free_complete_datagram+0x134>)
 801b940:	f001 fa82 	bl	801ce48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b944:	8bfa      	ldrh	r2, [r7, #30]
 801b946:	8a7b      	ldrh	r3, [r7, #18]
 801b948:	4413      	add	r3, r2
 801b94a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b94c:	69b8      	ldr	r0, [r7, #24]
 801b94e:	f7f7 fb09 	bl	8012f64 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	685b      	ldr	r3, [r3, #4]
 801b956:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b958:	e01f      	b.n	801b99a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b95a:	69bb      	ldr	r3, [r7, #24]
 801b95c:	685b      	ldr	r3, [r3, #4]
 801b95e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b960:	69bb      	ldr	r3, [r7, #24]
 801b962:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b964:	697b      	ldr	r3, [r7, #20]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b96a:	68f8      	ldr	r0, [r7, #12]
 801b96c:	f7f7 fb88 	bl	8013080 <pbuf_clen>
 801b970:	4603      	mov	r3, r0
 801b972:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b974:	8bfa      	ldrh	r2, [r7, #30]
 801b976:	8a7b      	ldrh	r3, [r7, #18]
 801b978:	4413      	add	r3, r2
 801b97a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b97e:	db05      	blt.n	801b98c <ip_reass_free_complete_datagram+0xe0>
 801b980:	4b15      	ldr	r3, [pc, #84]	; (801b9d8 <ip_reass_free_complete_datagram+0x12c>)
 801b982:	22cc      	movs	r2, #204	; 0xcc
 801b984:	4918      	ldr	r1, [pc, #96]	; (801b9e8 <ip_reass_free_complete_datagram+0x13c>)
 801b986:	4816      	ldr	r0, [pc, #88]	; (801b9e0 <ip_reass_free_complete_datagram+0x134>)
 801b988:	f001 fa5e 	bl	801ce48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b98c:	8bfa      	ldrh	r2, [r7, #30]
 801b98e:	8a7b      	ldrh	r3, [r7, #18]
 801b990:	4413      	add	r3, r2
 801b992:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b994:	68f8      	ldr	r0, [r7, #12]
 801b996:	f7f7 fae5 	bl	8012f64 <pbuf_free>
  while (p != NULL) {
 801b99a:	69bb      	ldr	r3, [r7, #24]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d1dc      	bne.n	801b95a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b9a0:	6839      	ldr	r1, [r7, #0]
 801b9a2:	6878      	ldr	r0, [r7, #4]
 801b9a4:	f000 f8c2 	bl	801bb2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b9a8:	4b10      	ldr	r3, [pc, #64]	; (801b9ec <ip_reass_free_complete_datagram+0x140>)
 801b9aa:	881b      	ldrh	r3, [r3, #0]
 801b9ac:	8bfa      	ldrh	r2, [r7, #30]
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	d905      	bls.n	801b9be <ip_reass_free_complete_datagram+0x112>
 801b9b2:	4b09      	ldr	r3, [pc, #36]	; (801b9d8 <ip_reass_free_complete_datagram+0x12c>)
 801b9b4:	22d2      	movs	r2, #210	; 0xd2
 801b9b6:	490e      	ldr	r1, [pc, #56]	; (801b9f0 <ip_reass_free_complete_datagram+0x144>)
 801b9b8:	4809      	ldr	r0, [pc, #36]	; (801b9e0 <ip_reass_free_complete_datagram+0x134>)
 801b9ba:	f001 fa45 	bl	801ce48 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b9be:	4b0b      	ldr	r3, [pc, #44]	; (801b9ec <ip_reass_free_complete_datagram+0x140>)
 801b9c0:	881a      	ldrh	r2, [r3, #0]
 801b9c2:	8bfb      	ldrh	r3, [r7, #30]
 801b9c4:	1ad3      	subs	r3, r2, r3
 801b9c6:	b29a      	uxth	r2, r3
 801b9c8:	4b08      	ldr	r3, [pc, #32]	; (801b9ec <ip_reass_free_complete_datagram+0x140>)
 801b9ca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b9cc:	8bfb      	ldrh	r3, [r7, #30]
}
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	3720      	adds	r7, #32
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	bd80      	pop	{r7, pc}
 801b9d6:	bf00      	nop
 801b9d8:	0802168c 	.word	0x0802168c
 801b9dc:	080216c8 	.word	0x080216c8
 801b9e0:	080216d4 	.word	0x080216d4
 801b9e4:	080216fc 	.word	0x080216fc
 801b9e8:	08021710 	.word	0x08021710
 801b9ec:	20006d1c 	.word	0x20006d1c
 801b9f0:	08021730 	.word	0x08021730

0801b9f4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b9f4:	b580      	push	{r7, lr}
 801b9f6:	b08a      	sub	sp, #40	; 0x28
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
 801b9fc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b9fe:	2300      	movs	r3, #0
 801ba00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ba02:	2300      	movs	r3, #0
 801ba04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ba06:	2300      	movs	r3, #0
 801ba08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ba0e:	2300      	movs	r3, #0
 801ba10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ba12:	4b28      	ldr	r3, [pc, #160]	; (801bab4 <ip_reass_remove_oldest_datagram+0xc0>)
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ba18:	e030      	b.n	801ba7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba1c:	695a      	ldr	r2, [r3, #20]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	68db      	ldr	r3, [r3, #12]
 801ba22:	429a      	cmp	r2, r3
 801ba24:	d10c      	bne.n	801ba40 <ip_reass_remove_oldest_datagram+0x4c>
 801ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba28:	699a      	ldr	r2, [r3, #24]
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	691b      	ldr	r3, [r3, #16]
 801ba2e:	429a      	cmp	r2, r3
 801ba30:	d106      	bne.n	801ba40 <ip_reass_remove_oldest_datagram+0x4c>
 801ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba34:	899a      	ldrh	r2, [r3, #12]
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	889b      	ldrh	r3, [r3, #4]
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d014      	beq.n	801ba6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	3301      	adds	r3, #1
 801ba44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ba46:	6a3b      	ldr	r3, [r7, #32]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d104      	bne.n	801ba56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ba50:	69fb      	ldr	r3, [r7, #28]
 801ba52:	61bb      	str	r3, [r7, #24]
 801ba54:	e009      	b.n	801ba6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba58:	7fda      	ldrb	r2, [r3, #31]
 801ba5a:	6a3b      	ldr	r3, [r7, #32]
 801ba5c:	7fdb      	ldrb	r3, [r3, #31]
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d803      	bhi.n	801ba6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ba66:	69fb      	ldr	r3, [r7, #28]
 801ba68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d001      	beq.n	801ba76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d1cb      	bne.n	801ba1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ba82:	6a3b      	ldr	r3, [r7, #32]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d008      	beq.n	801ba9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ba88:	69b9      	ldr	r1, [r7, #24]
 801ba8a:	6a38      	ldr	r0, [r7, #32]
 801ba8c:	f7ff ff0e 	bl	801b8ac <ip_reass_free_complete_datagram>
 801ba90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ba92:	697a      	ldr	r2, [r7, #20]
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	4413      	add	r3, r2
 801ba98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ba9a:	697a      	ldr	r2, [r7, #20]
 801ba9c:	683b      	ldr	r3, [r7, #0]
 801ba9e:	429a      	cmp	r2, r3
 801baa0:	da02      	bge.n	801baa8 <ip_reass_remove_oldest_datagram+0xb4>
 801baa2:	693b      	ldr	r3, [r7, #16]
 801baa4:	2b01      	cmp	r3, #1
 801baa6:	dcac      	bgt.n	801ba02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801baa8:	697b      	ldr	r3, [r7, #20]
}
 801baaa:	4618      	mov	r0, r3
 801baac:	3728      	adds	r7, #40	; 0x28
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}
 801bab2:	bf00      	nop
 801bab4:	20006d18 	.word	0x20006d18

0801bab8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bab8:	b580      	push	{r7, lr}
 801baba:	b084      	sub	sp, #16
 801babc:	af00      	add	r7, sp, #0
 801babe:	6078      	str	r0, [r7, #4]
 801bac0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bac2:	2004      	movs	r0, #4
 801bac4:	f7f6 fbbc 	bl	8012240 <memp_malloc>
 801bac8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d110      	bne.n	801baf2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bad0:	6839      	ldr	r1, [r7, #0]
 801bad2:	6878      	ldr	r0, [r7, #4]
 801bad4:	f7ff ff8e 	bl	801b9f4 <ip_reass_remove_oldest_datagram>
 801bad8:	4602      	mov	r2, r0
 801bada:	683b      	ldr	r3, [r7, #0]
 801badc:	4293      	cmp	r3, r2
 801bade:	dc03      	bgt.n	801bae8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bae0:	2004      	movs	r0, #4
 801bae2:	f7f6 fbad 	bl	8012240 <memp_malloc>
 801bae6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d101      	bne.n	801baf2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801baee:	2300      	movs	r3, #0
 801baf0:	e016      	b.n	801bb20 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801baf2:	2220      	movs	r2, #32
 801baf4:	2100      	movs	r1, #0
 801baf6:	68f8      	ldr	r0, [r7, #12]
 801baf8:	f001 f8f4 	bl	801cce4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	220f      	movs	r2, #15
 801bb00:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bb02:	4b09      	ldr	r3, [pc, #36]	; (801bb28 <ip_reass_enqueue_new_datagram+0x70>)
 801bb04:	681a      	ldr	r2, [r3, #0]
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bb0a:	4a07      	ldr	r2, [pc, #28]	; (801bb28 <ip_reass_enqueue_new_datagram+0x70>)
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	3308      	adds	r3, #8
 801bb14:	2214      	movs	r2, #20
 801bb16:	6879      	ldr	r1, [r7, #4]
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f001 f8bb 	bl	801cc94 <memcpy>
  return ipr;
 801bb1e:	68fb      	ldr	r3, [r7, #12]
}
 801bb20:	4618      	mov	r0, r3
 801bb22:	3710      	adds	r7, #16
 801bb24:	46bd      	mov	sp, r7
 801bb26:	bd80      	pop	{r7, pc}
 801bb28:	20006d18 	.word	0x20006d18

0801bb2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b082      	sub	sp, #8
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
 801bb34:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bb36:	4b10      	ldr	r3, [pc, #64]	; (801bb78 <ip_reass_dequeue_datagram+0x4c>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	687a      	ldr	r2, [r7, #4]
 801bb3c:	429a      	cmp	r2, r3
 801bb3e:	d104      	bne.n	801bb4a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	4a0c      	ldr	r2, [pc, #48]	; (801bb78 <ip_reass_dequeue_datagram+0x4c>)
 801bb46:	6013      	str	r3, [r2, #0]
 801bb48:	e00d      	b.n	801bb66 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bb4a:	683b      	ldr	r3, [r7, #0]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d106      	bne.n	801bb5e <ip_reass_dequeue_datagram+0x32>
 801bb50:	4b0a      	ldr	r3, [pc, #40]	; (801bb7c <ip_reass_dequeue_datagram+0x50>)
 801bb52:	f240 1245 	movw	r2, #325	; 0x145
 801bb56:	490a      	ldr	r1, [pc, #40]	; (801bb80 <ip_reass_dequeue_datagram+0x54>)
 801bb58:	480a      	ldr	r0, [pc, #40]	; (801bb84 <ip_reass_dequeue_datagram+0x58>)
 801bb5a:	f001 f975 	bl	801ce48 <iprintf>
    prev->next = ipr->next;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681a      	ldr	r2, [r3, #0]
 801bb62:	683b      	ldr	r3, [r7, #0]
 801bb64:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bb66:	6879      	ldr	r1, [r7, #4]
 801bb68:	2004      	movs	r0, #4
 801bb6a:	f7f6 fbbb 	bl	80122e4 <memp_free>
}
 801bb6e:	bf00      	nop
 801bb70:	3708      	adds	r7, #8
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}
 801bb76:	bf00      	nop
 801bb78:	20006d18 	.word	0x20006d18
 801bb7c:	0802168c 	.word	0x0802168c
 801bb80:	08021754 	.word	0x08021754
 801bb84:	080216d4 	.word	0x080216d4

0801bb88 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b08c      	sub	sp, #48	; 0x30
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	60f8      	str	r0, [r7, #12]
 801bb90:	60b9      	str	r1, [r7, #8]
 801bb92:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bb94:	2300      	movs	r3, #0
 801bb96:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bb98:	2301      	movs	r3, #1
 801bb9a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bba2:	69fb      	ldr	r3, [r7, #28]
 801bba4:	885b      	ldrh	r3, [r3, #2]
 801bba6:	b29b      	uxth	r3, r3
 801bba8:	4618      	mov	r0, r3
 801bbaa:	f7f5 fe93 	bl	80118d4 <lwip_htons>
 801bbae:	4603      	mov	r3, r0
 801bbb0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bbb2:	69fb      	ldr	r3, [r7, #28]
 801bbb4:	781b      	ldrb	r3, [r3, #0]
 801bbb6:	f003 030f 	and.w	r3, r3, #15
 801bbba:	b2db      	uxtb	r3, r3
 801bbbc:	009b      	lsls	r3, r3, #2
 801bbbe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bbc0:	7e7b      	ldrb	r3, [r7, #25]
 801bbc2:	b29b      	uxth	r3, r3
 801bbc4:	8b7a      	ldrh	r2, [r7, #26]
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d202      	bcs.n	801bbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bbca:	f04f 33ff 	mov.w	r3, #4294967295
 801bbce:	e135      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bbd0:	7e7b      	ldrb	r3, [r7, #25]
 801bbd2:	b29b      	uxth	r3, r3
 801bbd4:	8b7a      	ldrh	r2, [r7, #26]
 801bbd6:	1ad3      	subs	r3, r2, r3
 801bbd8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bbda:	69fb      	ldr	r3, [r7, #28]
 801bbdc:	88db      	ldrh	r3, [r3, #6]
 801bbde:	b29b      	uxth	r3, r3
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f7f5 fe77 	bl	80118d4 <lwip_htons>
 801bbe6:	4603      	mov	r3, r0
 801bbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bbec:	b29b      	uxth	r3, r3
 801bbee:	00db      	lsls	r3, r3, #3
 801bbf0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bbf2:	68bb      	ldr	r3, [r7, #8]
 801bbf4:	685b      	ldr	r3, [r3, #4]
 801bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	701a      	strb	r2, [r3, #0]
 801bbfe:	2200      	movs	r2, #0
 801bc00:	705a      	strb	r2, [r3, #1]
 801bc02:	2200      	movs	r2, #0
 801bc04:	709a      	strb	r2, [r3, #2]
 801bc06:	2200      	movs	r2, #0
 801bc08:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc0c:	8afa      	ldrh	r2, [r7, #22]
 801bc0e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bc10:	8afa      	ldrh	r2, [r7, #22]
 801bc12:	8b7b      	ldrh	r3, [r7, #26]
 801bc14:	4413      	add	r3, r2
 801bc16:	b29a      	uxth	r2, r3
 801bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc1a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc1e:	88db      	ldrh	r3, [r3, #6]
 801bc20:	b29b      	uxth	r3, r3
 801bc22:	8afa      	ldrh	r2, [r7, #22]
 801bc24:	429a      	cmp	r2, r3
 801bc26:	d902      	bls.n	801bc2e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc28:	f04f 33ff 	mov.w	r3, #4294967295
 801bc2c:	e106      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	685b      	ldr	r3, [r3, #4]
 801bc32:	627b      	str	r3, [r7, #36]	; 0x24
 801bc34:	e068      	b.n	801bd08 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc38:	685b      	ldr	r3, [r3, #4]
 801bc3a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc3e:	889b      	ldrh	r3, [r3, #4]
 801bc40:	b29a      	uxth	r2, r3
 801bc42:	693b      	ldr	r3, [r7, #16]
 801bc44:	889b      	ldrh	r3, [r3, #4]
 801bc46:	b29b      	uxth	r3, r3
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	d235      	bcs.n	801bcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc50:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d020      	beq.n	801bc9a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc5a:	889b      	ldrh	r3, [r3, #4]
 801bc5c:	b29a      	uxth	r2, r3
 801bc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc60:	88db      	ldrh	r3, [r3, #6]
 801bc62:	b29b      	uxth	r3, r3
 801bc64:	429a      	cmp	r2, r3
 801bc66:	d307      	bcc.n	801bc78 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc6a:	88db      	ldrh	r3, [r3, #6]
 801bc6c:	b29a      	uxth	r2, r3
 801bc6e:	693b      	ldr	r3, [r7, #16]
 801bc70:	889b      	ldrh	r3, [r3, #4]
 801bc72:	b29b      	uxth	r3, r3
 801bc74:	429a      	cmp	r2, r3
 801bc76:	d902      	bls.n	801bc7e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc78:	f04f 33ff 	mov.w	r3, #4294967295
 801bc7c:	e0de      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc80:	68ba      	ldr	r2, [r7, #8]
 801bc82:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc86:	88db      	ldrh	r3, [r3, #6]
 801bc88:	b29a      	uxth	r2, r3
 801bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc8c:	889b      	ldrh	r3, [r3, #4]
 801bc8e:	b29b      	uxth	r3, r3
 801bc90:	429a      	cmp	r2, r3
 801bc92:	d03d      	beq.n	801bd10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bc94:	2300      	movs	r3, #0
 801bc96:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bc98:	e03a      	b.n	801bd10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc9c:	88db      	ldrh	r3, [r3, #6]
 801bc9e:	b29a      	uxth	r2, r3
 801bca0:	693b      	ldr	r3, [r7, #16]
 801bca2:	889b      	ldrh	r3, [r3, #4]
 801bca4:	b29b      	uxth	r3, r3
 801bca6:	429a      	cmp	r2, r3
 801bca8:	d902      	bls.n	801bcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcaa:	f04f 33ff 	mov.w	r3, #4294967295
 801bcae:	e0c5      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	68ba      	ldr	r2, [r7, #8]
 801bcb4:	605a      	str	r2, [r3, #4]
      break;
 801bcb6:	e02b      	b.n	801bd10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcba:	889b      	ldrh	r3, [r3, #4]
 801bcbc:	b29a      	uxth	r2, r3
 801bcbe:	693b      	ldr	r3, [r7, #16]
 801bcc0:	889b      	ldrh	r3, [r3, #4]
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	429a      	cmp	r2, r3
 801bcc6:	d102      	bne.n	801bcce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 801bccc:	e0b6      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcd0:	889b      	ldrh	r3, [r3, #4]
 801bcd2:	b29a      	uxth	r2, r3
 801bcd4:	693b      	ldr	r3, [r7, #16]
 801bcd6:	88db      	ldrh	r3, [r3, #6]
 801bcd8:	b29b      	uxth	r3, r3
 801bcda:	429a      	cmp	r2, r3
 801bcdc:	d202      	bcs.n	801bce4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcde:	f04f 33ff 	mov.w	r3, #4294967295
 801bce2:	e0ab      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d009      	beq.n	801bcfe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcec:	88db      	ldrh	r3, [r3, #6]
 801bcee:	b29a      	uxth	r2, r3
 801bcf0:	693b      	ldr	r3, [r7, #16]
 801bcf2:	889b      	ldrh	r3, [r3, #4]
 801bcf4:	b29b      	uxth	r3, r3
 801bcf6:	429a      	cmp	r2, r3
 801bcf8:	d001      	beq.n	801bcfe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bcfe:	693b      	ldr	r3, [r7, #16]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801bd04:	693b      	ldr	r3, [r7, #16]
 801bd06:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d193      	bne.n	801bc36 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bd0e:	e000      	b.n	801bd12 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bd10:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d12d      	bne.n	801bd74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d01c      	beq.n	801bd58 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd20:	88db      	ldrh	r3, [r3, #6]
 801bd22:	b29a      	uxth	r2, r3
 801bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd26:	889b      	ldrh	r3, [r3, #4]
 801bd28:	b29b      	uxth	r3, r3
 801bd2a:	429a      	cmp	r2, r3
 801bd2c:	d906      	bls.n	801bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bd2e:	4b45      	ldr	r3, [pc, #276]	; (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd30:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801bd34:	4944      	ldr	r1, [pc, #272]	; (801be48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bd36:	4845      	ldr	r0, [pc, #276]	; (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd38:	f001 f886 	bl	801ce48 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd3e:	68ba      	ldr	r2, [r7, #8]
 801bd40:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd44:	88db      	ldrh	r3, [r3, #6]
 801bd46:	b29a      	uxth	r2, r3
 801bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd4a:	889b      	ldrh	r3, [r3, #4]
 801bd4c:	b29b      	uxth	r3, r3
 801bd4e:	429a      	cmp	r2, r3
 801bd50:	d010      	beq.n	801bd74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bd52:	2300      	movs	r3, #0
 801bd54:	623b      	str	r3, [r7, #32]
 801bd56:	e00d      	b.n	801bd74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	685b      	ldr	r3, [r3, #4]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d006      	beq.n	801bd6e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bd60:	4b38      	ldr	r3, [pc, #224]	; (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd62:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801bd66:	493a      	ldr	r1, [pc, #232]	; (801be50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bd68:	4838      	ldr	r0, [pc, #224]	; (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd6a:	f001 f86d 	bl	801ce48 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bd6e:	68fb      	ldr	r3, [r7, #12]
 801bd70:	68ba      	ldr	r2, [r7, #8]
 801bd72:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d105      	bne.n	801bd86 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	7f9b      	ldrb	r3, [r3, #30]
 801bd7e:	f003 0301 	and.w	r3, r3, #1
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d059      	beq.n	801be3a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bd86:	6a3b      	ldr	r3, [r7, #32]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d04f      	beq.n	801be2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d006      	beq.n	801bda2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	889b      	ldrh	r3, [r3, #4]
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d002      	beq.n	801bda8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bda2:	2300      	movs	r3, #0
 801bda4:	623b      	str	r3, [r7, #32]
 801bda6:	e041      	b.n	801be2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdaa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bdb2:	e012      	b.n	801bdda <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdbc:	88db      	ldrh	r3, [r3, #6]
 801bdbe:	b29a      	uxth	r2, r3
 801bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdc2:	889b      	ldrh	r3, [r3, #4]
 801bdc4:	b29b      	uxth	r3, r3
 801bdc6:	429a      	cmp	r2, r3
 801bdc8:	d002      	beq.n	801bdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bdca:	2300      	movs	r3, #0
 801bdcc:	623b      	str	r3, [r7, #32]
            break;
 801bdce:	e007      	b.n	801bde0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdd2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801bdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d1e9      	bne.n	801bdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bde0:	6a3b      	ldr	r3, [r7, #32]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d022      	beq.n	801be2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	685b      	ldr	r3, [r3, #4]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d106      	bne.n	801bdfc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bdee:	4b15      	ldr	r3, [pc, #84]	; (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bdf0:	f240 12df 	movw	r2, #479	; 0x1df
 801bdf4:	4917      	ldr	r1, [pc, #92]	; (801be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bdf6:	4815      	ldr	r0, [pc, #84]	; (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bdf8:	f001 f826 	bl	801ce48 <iprintf>
          LWIP_ASSERT("sanity check",
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	685b      	ldr	r3, [r3, #4]
 801be00:	685b      	ldr	r3, [r3, #4]
 801be02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be04:	429a      	cmp	r2, r3
 801be06:	d106      	bne.n	801be16 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801be08:	4b0e      	ldr	r3, [pc, #56]	; (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801be0e:	4911      	ldr	r1, [pc, #68]	; (801be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801be10:	480e      	ldr	r0, [pc, #56]	; (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be12:	f001 f819 	bl	801ce48 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d006      	beq.n	801be2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801be1e:	4b09      	ldr	r3, [pc, #36]	; (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be20:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801be24:	490c      	ldr	r1, [pc, #48]	; (801be58 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801be26:	4809      	ldr	r0, [pc, #36]	; (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be28:	f001 f80e 	bl	801ce48 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801be2c:	6a3b      	ldr	r3, [r7, #32]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	bf14      	ite	ne
 801be32:	2301      	movne	r3, #1
 801be34:	2300      	moveq	r3, #0
 801be36:	b2db      	uxtb	r3, r3
 801be38:	e000      	b.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801be3a:	2300      	movs	r3, #0
}
 801be3c:	4618      	mov	r0, r3
 801be3e:	3730      	adds	r7, #48	; 0x30
 801be40:	46bd      	mov	sp, r7
 801be42:	bd80      	pop	{r7, pc}
 801be44:	0802168c 	.word	0x0802168c
 801be48:	08021770 	.word	0x08021770
 801be4c:	080216d4 	.word	0x080216d4
 801be50:	08021790 	.word	0x08021790
 801be54:	080217c8 	.word	0x080217c8
 801be58:	080217d8 	.word	0x080217d8

0801be5c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b08e      	sub	sp, #56	; 0x38
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	685b      	ldr	r3, [r3, #4]
 801be68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be6c:	781b      	ldrb	r3, [r3, #0]
 801be6e:	f003 030f 	and.w	r3, r3, #15
 801be72:	b2db      	uxtb	r3, r3
 801be74:	009b      	lsls	r3, r3, #2
 801be76:	b2db      	uxtb	r3, r3
 801be78:	2b14      	cmp	r3, #20
 801be7a:	f040 8167 	bne.w	801c14c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be80:	88db      	ldrh	r3, [r3, #6]
 801be82:	b29b      	uxth	r3, r3
 801be84:	4618      	mov	r0, r3
 801be86:	f7f5 fd25 	bl	80118d4 <lwip_htons>
 801be8a:	4603      	mov	r3, r0
 801be8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be90:	b29b      	uxth	r3, r3
 801be92:	00db      	lsls	r3, r3, #3
 801be94:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be98:	885b      	ldrh	r3, [r3, #2]
 801be9a:	b29b      	uxth	r3, r3
 801be9c:	4618      	mov	r0, r3
 801be9e:	f7f5 fd19 	bl	80118d4 <lwip_htons>
 801bea2:	4603      	mov	r3, r0
 801bea4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bea8:	781b      	ldrb	r3, [r3, #0]
 801beaa:	f003 030f 	and.w	r3, r3, #15
 801beae:	b2db      	uxtb	r3, r3
 801beb0:	009b      	lsls	r3, r3, #2
 801beb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801beb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801beba:	b29b      	uxth	r3, r3
 801bebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bebe:	429a      	cmp	r2, r3
 801bec0:	f0c0 8146 	bcc.w	801c150 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bec8:	b29b      	uxth	r3, r3
 801beca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801becc:	1ad3      	subs	r3, r2, r3
 801bece:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bed0:	6878      	ldr	r0, [r7, #4]
 801bed2:	f7f7 f8d5 	bl	8013080 <pbuf_clen>
 801bed6:	4603      	mov	r3, r0
 801bed8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801beda:	4b9f      	ldr	r3, [pc, #636]	; (801c158 <ip4_reass+0x2fc>)
 801bedc:	881b      	ldrh	r3, [r3, #0]
 801bede:	461a      	mov	r2, r3
 801bee0:	8c3b      	ldrh	r3, [r7, #32]
 801bee2:	4413      	add	r3, r2
 801bee4:	2b0a      	cmp	r3, #10
 801bee6:	dd10      	ble.n	801bf0a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bee8:	8c3b      	ldrh	r3, [r7, #32]
 801beea:	4619      	mov	r1, r3
 801beec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801beee:	f7ff fd81 	bl	801b9f4 <ip_reass_remove_oldest_datagram>
 801bef2:	4603      	mov	r3, r0
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	f000 812d 	beq.w	801c154 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801befa:	4b97      	ldr	r3, [pc, #604]	; (801c158 <ip4_reass+0x2fc>)
 801befc:	881b      	ldrh	r3, [r3, #0]
 801befe:	461a      	mov	r2, r3
 801bf00:	8c3b      	ldrh	r3, [r7, #32]
 801bf02:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bf04:	2b0a      	cmp	r3, #10
 801bf06:	f300 8125 	bgt.w	801c154 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bf0a:	4b94      	ldr	r3, [pc, #592]	; (801c15c <ip4_reass+0x300>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	633b      	str	r3, [r7, #48]	; 0x30
 801bf10:	e015      	b.n	801bf3e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf14:	695a      	ldr	r2, [r3, #20]
 801bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf18:	68db      	ldr	r3, [r3, #12]
 801bf1a:	429a      	cmp	r2, r3
 801bf1c:	d10c      	bne.n	801bf38 <ip4_reass+0xdc>
 801bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf20:	699a      	ldr	r2, [r3, #24]
 801bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf24:	691b      	ldr	r3, [r3, #16]
 801bf26:	429a      	cmp	r2, r3
 801bf28:	d106      	bne.n	801bf38 <ip4_reass+0xdc>
 801bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf2c:	899a      	ldrh	r2, [r3, #12]
 801bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf30:	889b      	ldrh	r3, [r3, #4]
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	429a      	cmp	r2, r3
 801bf36:	d006      	beq.n	801bf46 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	633b      	str	r3, [r7, #48]	; 0x30
 801bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d1e6      	bne.n	801bf12 <ip4_reass+0xb6>
 801bf44:	e000      	b.n	801bf48 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bf46:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d109      	bne.n	801bf62 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bf4e:	8c3b      	ldrh	r3, [r7, #32]
 801bf50:	4619      	mov	r1, r3
 801bf52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bf54:	f7ff fdb0 	bl	801bab8 <ip_reass_enqueue_new_datagram>
 801bf58:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d11c      	bne.n	801bf9a <ip4_reass+0x13e>
      goto nullreturn;
 801bf60:	e109      	b.n	801c176 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf64:	88db      	ldrh	r3, [r3, #6]
 801bf66:	b29b      	uxth	r3, r3
 801bf68:	4618      	mov	r0, r3
 801bf6a:	f7f5 fcb3 	bl	80118d4 <lwip_htons>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d110      	bne.n	801bf9a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf7a:	89db      	ldrh	r3, [r3, #14]
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	f7f5 fca9 	bl	80118d4 <lwip_htons>
 801bf82:	4603      	mov	r3, r0
 801bf84:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d006      	beq.n	801bf9a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf8e:	3308      	adds	r3, #8
 801bf90:	2214      	movs	r2, #20
 801bf92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf94:	4618      	mov	r0, r3
 801bf96:	f000 fe7d 	bl	801cc94 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf9c:	88db      	ldrh	r3, [r3, #6]
 801bf9e:	b29b      	uxth	r3, r3
 801bfa0:	f003 0320 	and.w	r3, r3, #32
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	bf0c      	ite	eq
 801bfa8:	2301      	moveq	r3, #1
 801bfaa:	2300      	movne	r3, #0
 801bfac:	b2db      	uxtb	r3, r3
 801bfae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bfb0:	69fb      	ldr	r3, [r7, #28]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d00e      	beq.n	801bfd4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bfb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bfb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bfba:	4413      	add	r3, r2
 801bfbc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bfbe:	8b7a      	ldrh	r2, [r7, #26]
 801bfc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bfc2:	429a      	cmp	r2, r3
 801bfc4:	f0c0 80a0 	bcc.w	801c108 <ip4_reass+0x2ac>
 801bfc8:	8b7b      	ldrh	r3, [r7, #26]
 801bfca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	f200 809a 	bhi.w	801c108 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bfd4:	69fa      	ldr	r2, [r7, #28]
 801bfd6:	6879      	ldr	r1, [r7, #4]
 801bfd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bfda:	f7ff fdd5 	bl	801bb88 <ip_reass_chain_frag_into_datagram_and_validate>
 801bfde:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bfe0:	697b      	ldr	r3, [r7, #20]
 801bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfe6:	f000 8091 	beq.w	801c10c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bfea:	4b5b      	ldr	r3, [pc, #364]	; (801c158 <ip4_reass+0x2fc>)
 801bfec:	881a      	ldrh	r2, [r3, #0]
 801bfee:	8c3b      	ldrh	r3, [r7, #32]
 801bff0:	4413      	add	r3, r2
 801bff2:	b29a      	uxth	r2, r3
 801bff4:	4b58      	ldr	r3, [pc, #352]	; (801c158 <ip4_reass+0x2fc>)
 801bff6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801bff8:	69fb      	ldr	r3, [r7, #28]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d00d      	beq.n	801c01a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bffe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c002:	4413      	add	r3, r2
 801c004:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c008:	8a7a      	ldrh	r2, [r7, #18]
 801c00a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c00e:	7f9b      	ldrb	r3, [r3, #30]
 801c010:	f043 0301 	orr.w	r3, r3, #1
 801c014:	b2da      	uxtb	r2, r3
 801c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c018:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c01a:	697b      	ldr	r3, [r7, #20]
 801c01c:	2b01      	cmp	r3, #1
 801c01e:	d171      	bne.n	801c104 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c022:	8b9b      	ldrh	r3, [r3, #28]
 801c024:	3314      	adds	r3, #20
 801c026:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c02a:	685b      	ldr	r3, [r3, #4]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c034:	685b      	ldr	r3, [r3, #4]
 801c036:	685b      	ldr	r3, [r3, #4]
 801c038:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c03c:	3308      	adds	r3, #8
 801c03e:	2214      	movs	r2, #20
 801c040:	4619      	mov	r1, r3
 801c042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c044:	f000 fe26 	bl	801cc94 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c048:	8a3b      	ldrh	r3, [r7, #16]
 801c04a:	4618      	mov	r0, r3
 801c04c:	f7f5 fc42 	bl	80118d4 <lwip_htons>
 801c050:	4603      	mov	r3, r0
 801c052:	461a      	mov	r2, r3
 801c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c056:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c05a:	2200      	movs	r2, #0
 801c05c:	719a      	strb	r2, [r3, #6]
 801c05e:	2200      	movs	r2, #0
 801c060:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c064:	2200      	movs	r2, #0
 801c066:	729a      	strb	r2, [r3, #10]
 801c068:	2200      	movs	r2, #0
 801c06a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c072:	e00d      	b.n	801c090 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c076:	685b      	ldr	r3, [r3, #4]
 801c078:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c07a:	2114      	movs	r1, #20
 801c07c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c07e:	f7f6 feeb 	bl	8012e58 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c082:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c084:	6878      	ldr	r0, [r7, #4]
 801c086:	f7f7 f83b 	bl	8013100 <pbuf_cat>
      r = iprh->next_pbuf;
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c092:	2b00      	cmp	r3, #0
 801c094:	d1ee      	bne.n	801c074 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c096:	4b31      	ldr	r3, [pc, #196]	; (801c15c <ip4_reass+0x300>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c09c:	429a      	cmp	r2, r3
 801c09e:	d102      	bne.n	801c0a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0a4:	e010      	b.n	801c0c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c0a6:	4b2d      	ldr	r3, [pc, #180]	; (801c15c <ip4_reass+0x300>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0ac:	e007      	b.n	801c0be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0b4:	429a      	cmp	r2, r3
 801c0b6:	d006      	beq.n	801c0c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d1f4      	bne.n	801c0ae <ip4_reass+0x252>
 801c0c4:	e000      	b.n	801c0c8 <ip4_reass+0x26c>
          break;
 801c0c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c0c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c0cc:	f7ff fd2e 	bl	801bb2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c0d0:	6878      	ldr	r0, [r7, #4]
 801c0d2:	f7f6 ffd5 	bl	8013080 <pbuf_clen>
 801c0d6:	4603      	mov	r3, r0
 801c0d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c0da:	4b1f      	ldr	r3, [pc, #124]	; (801c158 <ip4_reass+0x2fc>)
 801c0dc:	881b      	ldrh	r3, [r3, #0]
 801c0de:	8c3a      	ldrh	r2, [r7, #32]
 801c0e0:	429a      	cmp	r2, r3
 801c0e2:	d906      	bls.n	801c0f2 <ip4_reass+0x296>
 801c0e4:	4b1e      	ldr	r3, [pc, #120]	; (801c160 <ip4_reass+0x304>)
 801c0e6:	f240 229b 	movw	r2, #667	; 0x29b
 801c0ea:	491e      	ldr	r1, [pc, #120]	; (801c164 <ip4_reass+0x308>)
 801c0ec:	481e      	ldr	r0, [pc, #120]	; (801c168 <ip4_reass+0x30c>)
 801c0ee:	f000 feab 	bl	801ce48 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c0f2:	4b19      	ldr	r3, [pc, #100]	; (801c158 <ip4_reass+0x2fc>)
 801c0f4:	881a      	ldrh	r2, [r3, #0]
 801c0f6:	8c3b      	ldrh	r3, [r7, #32]
 801c0f8:	1ad3      	subs	r3, r2, r3
 801c0fa:	b29a      	uxth	r2, r3
 801c0fc:	4b16      	ldr	r3, [pc, #88]	; (801c158 <ip4_reass+0x2fc>)
 801c0fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	e03c      	b.n	801c17e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c104:	2300      	movs	r3, #0
 801c106:	e03a      	b.n	801c17e <ip4_reass+0x322>
      goto nullreturn_ipr;
 801c108:	bf00      	nop
 801c10a:	e000      	b.n	801c10e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801c10c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c110:	2b00      	cmp	r3, #0
 801c112:	d106      	bne.n	801c122 <ip4_reass+0x2c6>
 801c114:	4b12      	ldr	r3, [pc, #72]	; (801c160 <ip4_reass+0x304>)
 801c116:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801c11a:	4914      	ldr	r1, [pc, #80]	; (801c16c <ip4_reass+0x310>)
 801c11c:	4812      	ldr	r0, [pc, #72]	; (801c168 <ip4_reass+0x30c>)
 801c11e:	f000 fe93 	bl	801ce48 <iprintf>
  if (ipr->p == NULL) {
 801c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c124:	685b      	ldr	r3, [r3, #4]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d124      	bne.n	801c174 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c12a:	4b0c      	ldr	r3, [pc, #48]	; (801c15c <ip4_reass+0x300>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c130:	429a      	cmp	r2, r3
 801c132:	d006      	beq.n	801c142 <ip4_reass+0x2e6>
 801c134:	4b0a      	ldr	r3, [pc, #40]	; (801c160 <ip4_reass+0x304>)
 801c136:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c13a:	490d      	ldr	r1, [pc, #52]	; (801c170 <ip4_reass+0x314>)
 801c13c:	480a      	ldr	r0, [pc, #40]	; (801c168 <ip4_reass+0x30c>)
 801c13e:	f000 fe83 	bl	801ce48 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c142:	2100      	movs	r1, #0
 801c144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c146:	f7ff fcf1 	bl	801bb2c <ip_reass_dequeue_datagram>
 801c14a:	e014      	b.n	801c176 <ip4_reass+0x31a>
    goto nullreturn;
 801c14c:	bf00      	nop
 801c14e:	e012      	b.n	801c176 <ip4_reass+0x31a>
    goto nullreturn;
 801c150:	bf00      	nop
 801c152:	e010      	b.n	801c176 <ip4_reass+0x31a>
      goto nullreturn;
 801c154:	bf00      	nop
 801c156:	e00e      	b.n	801c176 <ip4_reass+0x31a>
 801c158:	20006d1c 	.word	0x20006d1c
 801c15c:	20006d18 	.word	0x20006d18
 801c160:	0802168c 	.word	0x0802168c
 801c164:	080217fc 	.word	0x080217fc
 801c168:	080216d4 	.word	0x080216d4
 801c16c:	08021818 	.word	0x08021818
 801c170:	08021824 	.word	0x08021824
  }

nullreturn:
 801c174:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c176:	6878      	ldr	r0, [r7, #4]
 801c178:	f7f6 fef4 	bl	8012f64 <pbuf_free>
  return NULL;
 801c17c:	2300      	movs	r3, #0
}
 801c17e:	4618      	mov	r0, r3
 801c180:	3738      	adds	r7, #56	; 0x38
 801c182:	46bd      	mov	sp, r7
 801c184:	bd80      	pop	{r7, pc}
 801c186:	bf00      	nop

0801c188 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c18c:	2005      	movs	r0, #5
 801c18e:	f7f6 f857 	bl	8012240 <memp_malloc>
 801c192:	4603      	mov	r3, r0
}
 801c194:	4618      	mov	r0, r3
 801c196:	bd80      	pop	{r7, pc}

0801c198 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b082      	sub	sp, #8
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d106      	bne.n	801c1b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c1a6:	4b07      	ldr	r3, [pc, #28]	; (801c1c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c1a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801c1ac:	4906      	ldr	r1, [pc, #24]	; (801c1c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c1ae:	4807      	ldr	r0, [pc, #28]	; (801c1cc <ip_frag_free_pbuf_custom_ref+0x34>)
 801c1b0:	f000 fe4a 	bl	801ce48 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c1b4:	6879      	ldr	r1, [r7, #4]
 801c1b6:	2005      	movs	r0, #5
 801c1b8:	f7f6 f894 	bl	80122e4 <memp_free>
}
 801c1bc:	bf00      	nop
 801c1be:	3708      	adds	r7, #8
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	bd80      	pop	{r7, pc}
 801c1c4:	0802168c 	.word	0x0802168c
 801c1c8:	08021844 	.word	0x08021844
 801c1cc:	080216d4 	.word	0x080216d4

0801c1d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b084      	sub	sp, #16
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d106      	bne.n	801c1f0 <ipfrag_free_pbuf_custom+0x20>
 801c1e2:	4b11      	ldr	r3, [pc, #68]	; (801c228 <ipfrag_free_pbuf_custom+0x58>)
 801c1e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801c1e8:	4910      	ldr	r1, [pc, #64]	; (801c22c <ipfrag_free_pbuf_custom+0x5c>)
 801c1ea:	4811      	ldr	r0, [pc, #68]	; (801c230 <ipfrag_free_pbuf_custom+0x60>)
 801c1ec:	f000 fe2c 	bl	801ce48 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c1f0:	68fa      	ldr	r2, [r7, #12]
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	429a      	cmp	r2, r3
 801c1f6:	d006      	beq.n	801c206 <ipfrag_free_pbuf_custom+0x36>
 801c1f8:	4b0b      	ldr	r3, [pc, #44]	; (801c228 <ipfrag_free_pbuf_custom+0x58>)
 801c1fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c1fe:	490d      	ldr	r1, [pc, #52]	; (801c234 <ipfrag_free_pbuf_custom+0x64>)
 801c200:	480b      	ldr	r0, [pc, #44]	; (801c230 <ipfrag_free_pbuf_custom+0x60>)
 801c202:	f000 fe21 	bl	801ce48 <iprintf>
  if (pcr->original != NULL) {
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	695b      	ldr	r3, [r3, #20]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d004      	beq.n	801c218 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	695b      	ldr	r3, [r3, #20]
 801c212:	4618      	mov	r0, r3
 801c214:	f7f6 fea6 	bl	8012f64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c218:	68f8      	ldr	r0, [r7, #12]
 801c21a:	f7ff ffbd 	bl	801c198 <ip_frag_free_pbuf_custom_ref>
}
 801c21e:	bf00      	nop
 801c220:	3710      	adds	r7, #16
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}
 801c226:	bf00      	nop
 801c228:	0802168c 	.word	0x0802168c
 801c22c:	08021850 	.word	0x08021850
 801c230:	080216d4 	.word	0x080216d4
 801c234:	0802185c 	.word	0x0802185c

0801c238 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b094      	sub	sp, #80	; 0x50
 801c23c:	af02      	add	r7, sp, #8
 801c23e:	60f8      	str	r0, [r7, #12]
 801c240:	60b9      	str	r1, [r7, #8]
 801c242:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c244:	2300      	movs	r3, #0
 801c246:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c24a:	68bb      	ldr	r3, [r7, #8]
 801c24c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c24e:	3b14      	subs	r3, #20
 801c250:	2b00      	cmp	r3, #0
 801c252:	da00      	bge.n	801c256 <ip4_frag+0x1e>
 801c254:	3307      	adds	r3, #7
 801c256:	10db      	asrs	r3, r3, #3
 801c258:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c25a:	2314      	movs	r3, #20
 801c25c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	685b      	ldr	r3, [r3, #4]
 801c262:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801c264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c266:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c26a:	781b      	ldrb	r3, [r3, #0]
 801c26c:	f003 030f 	and.w	r3, r3, #15
 801c270:	b2db      	uxtb	r3, r3
 801c272:	009b      	lsls	r3, r3, #2
 801c274:	b2db      	uxtb	r3, r3
 801c276:	2b14      	cmp	r3, #20
 801c278:	d002      	beq.n	801c280 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c27a:	f06f 0305 	mvn.w	r3, #5
 801c27e:	e110      	b.n	801c4a2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	895b      	ldrh	r3, [r3, #10]
 801c284:	2b13      	cmp	r3, #19
 801c286:	d809      	bhi.n	801c29c <ip4_frag+0x64>
 801c288:	4b88      	ldr	r3, [pc, #544]	; (801c4ac <ip4_frag+0x274>)
 801c28a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801c28e:	4988      	ldr	r1, [pc, #544]	; (801c4b0 <ip4_frag+0x278>)
 801c290:	4888      	ldr	r0, [pc, #544]	; (801c4b4 <ip4_frag+0x27c>)
 801c292:	f000 fdd9 	bl	801ce48 <iprintf>
 801c296:	f06f 0305 	mvn.w	r3, #5
 801c29a:	e102      	b.n	801c4a2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c29e:	88db      	ldrh	r3, [r3, #6]
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7f5 fb16 	bl	80118d4 <lwip_htons>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801c2ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c2ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c2b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c2b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c2bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	891b      	ldrh	r3, [r3, #8]
 801c2c2:	3b14      	subs	r3, #20
 801c2c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801c2c8:	e0e1      	b.n	801c48e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c2ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c2cc:	00db      	lsls	r3, r3, #3
 801c2ce:	b29b      	uxth	r3, r3
 801c2d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c2d4:	4293      	cmp	r3, r2
 801c2d6:	bf28      	it	cs
 801c2d8:	4613      	movcs	r3, r2
 801c2da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c2dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c2e0:	2114      	movs	r1, #20
 801c2e2:	200e      	movs	r0, #14
 801c2e4:	f7f6 fb5a 	bl	801299c <pbuf_alloc>
 801c2e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	f000 80d5 	beq.w	801c49c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2f4:	895b      	ldrh	r3, [r3, #10]
 801c2f6:	2b13      	cmp	r3, #19
 801c2f8:	d806      	bhi.n	801c308 <ip4_frag+0xd0>
 801c2fa:	4b6c      	ldr	r3, [pc, #432]	; (801c4ac <ip4_frag+0x274>)
 801c2fc:	f44f 7249 	mov.w	r2, #804	; 0x324
 801c300:	496d      	ldr	r1, [pc, #436]	; (801c4b8 <ip4_frag+0x280>)
 801c302:	486c      	ldr	r0, [pc, #432]	; (801c4b4 <ip4_frag+0x27c>)
 801c304:	f000 fda0 	bl	801ce48 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c30a:	685b      	ldr	r3, [r3, #4]
 801c30c:	2214      	movs	r2, #20
 801c30e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c310:	4618      	mov	r0, r3
 801c312:	f000 fcbf 	bl	801cc94 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c318:	685b      	ldr	r3, [r3, #4]
 801c31a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801c31c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c31e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801c322:	e064      	b.n	801c3ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	895a      	ldrh	r2, [r3, #10]
 801c328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c32a:	1ad3      	subs	r3, r2, r3
 801c32c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	895b      	ldrh	r3, [r3, #10]
 801c332:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c334:	429a      	cmp	r2, r3
 801c336:	d906      	bls.n	801c346 <ip4_frag+0x10e>
 801c338:	4b5c      	ldr	r3, [pc, #368]	; (801c4ac <ip4_frag+0x274>)
 801c33a:	f240 322d 	movw	r2, #813	; 0x32d
 801c33e:	495f      	ldr	r1, [pc, #380]	; (801c4bc <ip4_frag+0x284>)
 801c340:	485c      	ldr	r0, [pc, #368]	; (801c4b4 <ip4_frag+0x27c>)
 801c342:	f000 fd81 	bl	801ce48 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c346:	8bfa      	ldrh	r2, [r7, #30]
 801c348:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c34c:	4293      	cmp	r3, r2
 801c34e:	bf28      	it	cs
 801c350:	4613      	movcs	r3, r2
 801c352:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d105      	bne.n	801c36a <ip4_frag+0x132>
        poff = 0;
 801c35e:	2300      	movs	r3, #0
 801c360:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	60fb      	str	r3, [r7, #12]
        continue;
 801c368:	e041      	b.n	801c3ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c36a:	f7ff ff0d 	bl	801c188 <ip_frag_alloc_pbuf_custom_ref>
 801c36e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c370:	69bb      	ldr	r3, [r7, #24]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d103      	bne.n	801c37e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c378:	f7f6 fdf4 	bl	8012f64 <pbuf_free>
        goto memerr;
 801c37c:	e08f      	b.n	801c49e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c37e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c384:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c386:	4413      	add	r3, r2
 801c388:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c38c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c390:	9201      	str	r2, [sp, #4]
 801c392:	9300      	str	r3, [sp, #0]
 801c394:	4603      	mov	r3, r0
 801c396:	2241      	movs	r2, #65	; 0x41
 801c398:	2000      	movs	r0, #0
 801c39a:	f7f6 fc29 	bl	8012bf0 <pbuf_alloced_custom>
 801c39e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d106      	bne.n	801c3b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c3a6:	69b8      	ldr	r0, [r7, #24]
 801c3a8:	f7ff fef6 	bl	801c198 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3ae:	f7f6 fdd9 	bl	8012f64 <pbuf_free>
        goto memerr;
 801c3b2:	e074      	b.n	801c49e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c3b4:	68f8      	ldr	r0, [r7, #12]
 801c3b6:	f7f6 fe7b 	bl	80130b0 <pbuf_ref>
      pcr->original = p;
 801c3ba:	69bb      	ldr	r3, [r7, #24]
 801c3bc:	68fa      	ldr	r2, [r7, #12]
 801c3be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c3c0:	69bb      	ldr	r3, [r7, #24]
 801c3c2:	4a3f      	ldr	r2, [pc, #252]	; (801c4c0 <ip4_frag+0x288>)
 801c3c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c3c6:	6979      	ldr	r1, [r7, #20]
 801c3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3ca:	f7f6 fe99 	bl	8013100 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c3ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c3d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c3d6:	1ad3      	subs	r3, r2, r3
 801c3d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c3dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d004      	beq.n	801c3ee <ip4_frag+0x1b6>
        poff = 0;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c3ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d196      	bne.n	801c324 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c3f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c3f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c3fc:	4413      	add	r3, r2
 801c3fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c404:	f1a3 0213 	sub.w	r2, r3, #19
 801c408:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c40c:	429a      	cmp	r2, r3
 801c40e:	bfcc      	ite	gt
 801c410:	2301      	movgt	r3, #1
 801c412:	2300      	movle	r3, #0
 801c414:	b2db      	uxtb	r3, r3
 801c416:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c418:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c41c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c420:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c422:	6a3b      	ldr	r3, [r7, #32]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d002      	beq.n	801c42e <ip4_frag+0x1f6>
 801c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d003      	beq.n	801c436 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c42e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c434:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c438:	4618      	mov	r0, r3
 801c43a:	f7f5 fa4b 	bl	80118d4 <lwip_htons>
 801c43e:	4603      	mov	r3, r0
 801c440:	461a      	mov	r2, r3
 801c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c444:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c448:	3314      	adds	r3, #20
 801c44a:	b29b      	uxth	r3, r3
 801c44c:	4618      	mov	r0, r3
 801c44e:	f7f5 fa41 	bl	80118d4 <lwip_htons>
 801c452:	4603      	mov	r3, r0
 801c454:	461a      	mov	r2, r3
 801c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c458:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c45c:	2200      	movs	r2, #0
 801c45e:	729a      	strb	r2, [r3, #10]
 801c460:	2200      	movs	r2, #0
 801c462:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c464:	68bb      	ldr	r3, [r7, #8]
 801c466:	695b      	ldr	r3, [r3, #20]
 801c468:	687a      	ldr	r2, [r7, #4]
 801c46a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c46c:	68b8      	ldr	r0, [r7, #8]
 801c46e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c472:	f7f6 fd77 	bl	8012f64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c476:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c47a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c47c:	1ad3      	subs	r3, r2, r3
 801c47e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c482:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c486:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c488:	4413      	add	r3, r2
 801c48a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c48e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c492:	2b00      	cmp	r3, #0
 801c494:	f47f af19 	bne.w	801c2ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c498:	2300      	movs	r3, #0
 801c49a:	e002      	b.n	801c4a2 <ip4_frag+0x26a>
      goto memerr;
 801c49c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c49e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	3748      	adds	r7, #72	; 0x48
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	bd80      	pop	{r7, pc}
 801c4aa:	bf00      	nop
 801c4ac:	0802168c 	.word	0x0802168c
 801c4b0:	08021868 	.word	0x08021868
 801c4b4:	080216d4 	.word	0x080216d4
 801c4b8:	08021884 	.word	0x08021884
 801c4bc:	080218a4 	.word	0x080218a4
 801c4c0:	0801c1d1 	.word	0x0801c1d1

0801c4c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b086      	sub	sp, #24
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c4ce:	230e      	movs	r3, #14
 801c4d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	895b      	ldrh	r3, [r3, #10]
 801c4d6:	2b0e      	cmp	r3, #14
 801c4d8:	d96e      	bls.n	801c5b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	7bdb      	ldrb	r3, [r3, #15]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d106      	bne.n	801c4f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c4e2:	683b      	ldr	r3, [r7, #0]
 801c4e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	b2da      	uxtb	r2, r3
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	685b      	ldr	r3, [r3, #4]
 801c4f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c4f6:	693b      	ldr	r3, [r7, #16]
 801c4f8:	7b1a      	ldrb	r2, [r3, #12]
 801c4fa:	7b5b      	ldrb	r3, [r3, #13]
 801c4fc:	021b      	lsls	r3, r3, #8
 801c4fe:	4313      	orrs	r3, r2
 801c500:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c502:	693b      	ldr	r3, [r7, #16]
 801c504:	781b      	ldrb	r3, [r3, #0]
 801c506:	f003 0301 	and.w	r3, r3, #1
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d023      	beq.n	801c556 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c50e:	693b      	ldr	r3, [r7, #16]
 801c510:	781b      	ldrb	r3, [r3, #0]
 801c512:	2b01      	cmp	r3, #1
 801c514:	d10f      	bne.n	801c536 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c516:	693b      	ldr	r3, [r7, #16]
 801c518:	785b      	ldrb	r3, [r3, #1]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d11b      	bne.n	801c556 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c51e:	693b      	ldr	r3, [r7, #16]
 801c520:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c522:	2b5e      	cmp	r3, #94	; 0x5e
 801c524:	d117      	bne.n	801c556 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	7b5b      	ldrb	r3, [r3, #13]
 801c52a:	f043 0310 	orr.w	r3, r3, #16
 801c52e:	b2da      	uxtb	r2, r3
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	735a      	strb	r2, [r3, #13]
 801c534:	e00f      	b.n	801c556 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c536:	693b      	ldr	r3, [r7, #16]
 801c538:	2206      	movs	r2, #6
 801c53a:	4928      	ldr	r1, [pc, #160]	; (801c5dc <ethernet_input+0x118>)
 801c53c:	4618      	mov	r0, r3
 801c53e:	f000 fb9b 	bl	801cc78 <memcmp>
 801c542:	4603      	mov	r3, r0
 801c544:	2b00      	cmp	r3, #0
 801c546:	d106      	bne.n	801c556 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	7b5b      	ldrb	r3, [r3, #13]
 801c54c:	f043 0308 	orr.w	r3, r3, #8
 801c550:	b2da      	uxtb	r2, r3
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c556:	89fb      	ldrh	r3, [r7, #14]
 801c558:	2b08      	cmp	r3, #8
 801c55a:	d003      	beq.n	801c564 <ethernet_input+0xa0>
 801c55c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c560:	d014      	beq.n	801c58c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c562:	e032      	b.n	801c5ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c564:	683b      	ldr	r3, [r7, #0]
 801c566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c56a:	f003 0308 	and.w	r3, r3, #8
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d024      	beq.n	801c5bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c572:	8afb      	ldrh	r3, [r7, #22]
 801c574:	4619      	mov	r1, r3
 801c576:	6878      	ldr	r0, [r7, #4]
 801c578:	f7f6 fc6e 	bl	8012e58 <pbuf_remove_header>
 801c57c:	4603      	mov	r3, r0
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d11e      	bne.n	801c5c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c582:	6839      	ldr	r1, [r7, #0]
 801c584:	6878      	ldr	r0, [r7, #4]
 801c586:	f7fe ff27 	bl	801b3d8 <ip4_input>
      break;
 801c58a:	e013      	b.n	801c5b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c592:	f003 0308 	and.w	r3, r3, #8
 801c596:	2b00      	cmp	r3, #0
 801c598:	d014      	beq.n	801c5c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c59a:	8afb      	ldrh	r3, [r7, #22]
 801c59c:	4619      	mov	r1, r3
 801c59e:	6878      	ldr	r0, [r7, #4]
 801c5a0:	f7f6 fc5a 	bl	8012e58 <pbuf_remove_header>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d10e      	bne.n	801c5c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c5aa:	6839      	ldr	r1, [r7, #0]
 801c5ac:	6878      	ldr	r0, [r7, #4]
 801c5ae:	f7fe f8c7 	bl	801a740 <etharp_input>
      break;
 801c5b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	e00c      	b.n	801c5d2 <ethernet_input+0x10e>
    goto free_and_return;
 801c5b8:	bf00      	nop
 801c5ba:	e006      	b.n	801c5ca <ethernet_input+0x106>
        goto free_and_return;
 801c5bc:	bf00      	nop
 801c5be:	e004      	b.n	801c5ca <ethernet_input+0x106>
        goto free_and_return;
 801c5c0:	bf00      	nop
 801c5c2:	e002      	b.n	801c5ca <ethernet_input+0x106>
        goto free_and_return;
 801c5c4:	bf00      	nop
 801c5c6:	e000      	b.n	801c5ca <ethernet_input+0x106>
        goto free_and_return;
 801c5c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c5ca:	6878      	ldr	r0, [r7, #4]
 801c5cc:	f7f6 fcca 	bl	8012f64 <pbuf_free>
  return ERR_OK;
 801c5d0:	2300      	movs	r3, #0
}
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	3718      	adds	r7, #24
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}
 801c5da:	bf00      	nop
 801c5dc:	08021a80 	.word	0x08021a80

0801c5e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b086      	sub	sp, #24
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	60f8      	str	r0, [r7, #12]
 801c5e8:	60b9      	str	r1, [r7, #8]
 801c5ea:	607a      	str	r2, [r7, #4]
 801c5ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c5ee:	8c3b      	ldrh	r3, [r7, #32]
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7f5 f96f 	bl	80118d4 <lwip_htons>
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c5fa:	210e      	movs	r1, #14
 801c5fc:	68b8      	ldr	r0, [r7, #8]
 801c5fe:	f7f6 fc1b 	bl	8012e38 <pbuf_add_header>
 801c602:	4603      	mov	r3, r0
 801c604:	2b00      	cmp	r3, #0
 801c606:	d125      	bne.n	801c654 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c608:	68bb      	ldr	r3, [r7, #8]
 801c60a:	685b      	ldr	r3, [r3, #4]
 801c60c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c60e:	693b      	ldr	r3, [r7, #16]
 801c610:	8afa      	ldrh	r2, [r7, #22]
 801c612:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c614:	693b      	ldr	r3, [r7, #16]
 801c616:	2206      	movs	r2, #6
 801c618:	6839      	ldr	r1, [r7, #0]
 801c61a:	4618      	mov	r0, r3
 801c61c:	f000 fb3a 	bl	801cc94 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c620:	693b      	ldr	r3, [r7, #16]
 801c622:	3306      	adds	r3, #6
 801c624:	2206      	movs	r2, #6
 801c626:	6879      	ldr	r1, [r7, #4]
 801c628:	4618      	mov	r0, r3
 801c62a:	f000 fb33 	bl	801cc94 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c634:	2b06      	cmp	r3, #6
 801c636:	d006      	beq.n	801c646 <ethernet_output+0x66>
 801c638:	4b0a      	ldr	r3, [pc, #40]	; (801c664 <ethernet_output+0x84>)
 801c63a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c63e:	490a      	ldr	r1, [pc, #40]	; (801c668 <ethernet_output+0x88>)
 801c640:	480a      	ldr	r0, [pc, #40]	; (801c66c <ethernet_output+0x8c>)
 801c642:	f000 fc01 	bl	801ce48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	699b      	ldr	r3, [r3, #24]
 801c64a:	68b9      	ldr	r1, [r7, #8]
 801c64c:	68f8      	ldr	r0, [r7, #12]
 801c64e:	4798      	blx	r3
 801c650:	4603      	mov	r3, r0
 801c652:	e002      	b.n	801c65a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c654:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c656:	f06f 0301 	mvn.w	r3, #1
}
 801c65a:	4618      	mov	r0, r3
 801c65c:	3718      	adds	r7, #24
 801c65e:	46bd      	mov	sp, r7
 801c660:	bd80      	pop	{r7, pc}
 801c662:	bf00      	nop
 801c664:	080218b4 	.word	0x080218b4
 801c668:	080218ec 	.word	0x080218ec
 801c66c:	08021920 	.word	0x08021920

0801c670 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b086      	sub	sp, #24
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	60bb      	str	r3, [r7, #8]
 801c67e:	2304      	movs	r3, #4
 801c680:	60fb      	str	r3, [r7, #12]
 801c682:	2300      	movs	r3, #0
 801c684:	613b      	str	r3, [r7, #16]
 801c686:	2300      	movs	r3, #0
 801c688:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c68a:	f107 0308 	add.w	r3, r7, #8
 801c68e:	2100      	movs	r1, #0
 801c690:	4618      	mov	r0, r3
 801c692:	f7f0 f98e 	bl	800c9b2 <osMessageCreate>
 801c696:	4602      	mov	r2, r0
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d102      	bne.n	801c6aa <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c6a4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6a8:	e000      	b.n	801c6ac <sys_mbox_new+0x3c>

  return ERR_OK;
 801c6aa:	2300      	movs	r3, #0
}
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	3718      	adds	r7, #24
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	bd80      	pop	{r7, pc}

0801c6b4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b082      	sub	sp, #8
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7f0 fb88 	bl	800cdd6 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	f7f0 fb99 	bl	800ce02 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c6d0:	bf00      	nop
 801c6d2:	3708      	adds	r7, #8
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd80      	pop	{r7, pc}

0801c6d8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b084      	sub	sp, #16
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	6078      	str	r0, [r7, #4]
 801c6e0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	6839      	ldr	r1, [r7, #0]
 801c6e8:	2200      	movs	r2, #0
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f7f0 f98a 	bl	800ca04 <osMessagePut>
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d102      	bne.n	801c6fc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	73fb      	strb	r3, [r7, #15]
 801c6fa:	e001      	b.n	801c700 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c6fc:	23ff      	movs	r3, #255	; 0xff
 801c6fe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c704:	4618      	mov	r0, r3
 801c706:	3710      	adds	r7, #16
 801c708:	46bd      	mov	sp, r7
 801c70a:	bd80      	pop	{r7, pc}

0801c70c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b08c      	sub	sp, #48	; 0x30
 801c710:	af00      	add	r7, sp, #0
 801c712:	61f8      	str	r0, [r7, #28]
 801c714:	61b9      	str	r1, [r7, #24]
 801c716:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c718:	f7ef fe75 	bl	800c406 <osKernelSysTick>
 801c71c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	2b00      	cmp	r3, #0
 801c722:	d017      	beq.n	801c754 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c724:	69fb      	ldr	r3, [r7, #28]
 801c726:	6819      	ldr	r1, [r3, #0]
 801c728:	f107 0320 	add.w	r3, r7, #32
 801c72c:	697a      	ldr	r2, [r7, #20]
 801c72e:	4618      	mov	r0, r3
 801c730:	f7f0 f9a8 	bl	800ca84 <osMessageGet>

    if(event.status == osEventMessage)
 801c734:	6a3b      	ldr	r3, [r7, #32]
 801c736:	2b10      	cmp	r3, #16
 801c738:	d109      	bne.n	801c74e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c73c:	461a      	mov	r2, r3
 801c73e:	69bb      	ldr	r3, [r7, #24]
 801c740:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c742:	f7ef fe60 	bl	800c406 <osKernelSysTick>
 801c746:	4602      	mov	r2, r0
 801c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c74a:	1ad3      	subs	r3, r2, r3
 801c74c:	e019      	b.n	801c782 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c74e:	f04f 33ff 	mov.w	r3, #4294967295
 801c752:	e016      	b.n	801c782 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c754:	69fb      	ldr	r3, [r7, #28]
 801c756:	6819      	ldr	r1, [r3, #0]
 801c758:	463b      	mov	r3, r7
 801c75a:	f04f 32ff 	mov.w	r2, #4294967295
 801c75e:	4618      	mov	r0, r3
 801c760:	f7f0 f990 	bl	800ca84 <osMessageGet>
 801c764:	f107 0320 	add.w	r3, r7, #32
 801c768:	463a      	mov	r2, r7
 801c76a:	ca07      	ldmia	r2, {r0, r1, r2}
 801c76c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c772:	461a      	mov	r2, r3
 801c774:	69bb      	ldr	r3, [r7, #24]
 801c776:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c778:	f7ef fe45 	bl	800c406 <osKernelSysTick>
 801c77c:	4602      	mov	r2, r0
 801c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c780:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c782:	4618      	mov	r0, r3
 801c784:	3730      	adds	r7, #48	; 0x30
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}

0801c78a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c78a:	b580      	push	{r7, lr}
 801c78c:	b086      	sub	sp, #24
 801c78e:	af00      	add	r7, sp, #0
 801c790:	6078      	str	r0, [r7, #4]
 801c792:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	6819      	ldr	r1, [r3, #0]
 801c798:	f107 030c 	add.w	r3, r7, #12
 801c79c:	2200      	movs	r2, #0
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f7f0 f970 	bl	800ca84 <osMessageGet>

  if(event.status == osEventMessage)
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	2b10      	cmp	r3, #16
 801c7a8:	d105      	bne.n	801c7b6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c7aa:	693b      	ldr	r3, [r7, #16]
 801c7ac:	461a      	mov	r2, r3
 801c7ae:	683b      	ldr	r3, [r7, #0]
 801c7b0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	e001      	b.n	801c7ba <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c7b6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	3718      	adds	r7, #24
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	bd80      	pop	{r7, pc}

0801c7c2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c7c2:	b480      	push	{r7}
 801c7c4:	b083      	sub	sp, #12
 801c7c6:	af00      	add	r7, sp, #0
 801c7c8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d101      	bne.n	801c7d6 <sys_mbox_valid+0x14>
    return 0;
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	e000      	b.n	801c7d8 <sys_mbox_valid+0x16>
  else
    return 1;
 801c7d6:	2301      	movs	r3, #1
}
 801c7d8:	4618      	mov	r0, r3
 801c7da:	370c      	adds	r7, #12
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7e2:	4770      	bx	lr

0801c7e4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c7e4:	b480      	push	{r7}
 801c7e6:	b083      	sub	sp, #12
 801c7e8:	af00      	add	r7, sp, #0
 801c7ea:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	601a      	str	r2, [r3, #0]
}
 801c7f2:	bf00      	nop
 801c7f4:	370c      	adds	r7, #12
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7fc:	4770      	bx	lr

0801c7fe <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c7fe:	b580      	push	{r7, lr}
 801c800:	b084      	sub	sp, #16
 801c802:	af00      	add	r7, sp, #0
 801c804:	6078      	str	r0, [r7, #4]
 801c806:	460b      	mov	r3, r1
 801c808:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c80a:	2300      	movs	r3, #0
 801c80c:	60bb      	str	r3, [r7, #8]
 801c80e:	2300      	movs	r3, #0
 801c810:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c812:	f107 0308 	add.w	r3, r7, #8
 801c816:	2101      	movs	r1, #1
 801c818:	4618      	mov	r0, r3
 801c81a:	f7ef ff01 	bl	800c620 <osSemaphoreCreate>
 801c81e:	4602      	mov	r2, r0
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d102      	bne.n	801c832 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c82c:	f04f 33ff 	mov.w	r3, #4294967295
 801c830:	e009      	b.n	801c846 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c832:	78fb      	ldrb	r3, [r7, #3]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d105      	bne.n	801c844 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	2100      	movs	r1, #0
 801c83e:	4618      	mov	r0, r3
 801c840:	f7ef ff20 	bl	800c684 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c844:	2300      	movs	r3, #0
}
 801c846:	4618      	mov	r0, r3
 801c848:	3710      	adds	r7, #16
 801c84a:	46bd      	mov	sp, r7
 801c84c:	bd80      	pop	{r7, pc}

0801c84e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c84e:	b580      	push	{r7, lr}
 801c850:	b084      	sub	sp, #16
 801c852:	af00      	add	r7, sp, #0
 801c854:	6078      	str	r0, [r7, #4]
 801c856:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c858:	f7ef fdd5 	bl	800c406 <osKernelSysTick>
 801c85c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d011      	beq.n	801c888 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	6839      	ldr	r1, [r7, #0]
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7ef ff0a 	bl	800c684 <osSemaphoreWait>
 801c870:	4603      	mov	r3, r0
 801c872:	2b00      	cmp	r3, #0
 801c874:	d105      	bne.n	801c882 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c876:	f7ef fdc6 	bl	800c406 <osKernelSysTick>
 801c87a:	4602      	mov	r2, r0
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	1ad3      	subs	r3, r2, r3
 801c880:	e012      	b.n	801c8a8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c882:	f04f 33ff 	mov.w	r3, #4294967295
 801c886:	e00f      	b.n	801c8a8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c888:	bf00      	nop
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	f04f 31ff 	mov.w	r1, #4294967295
 801c892:	4618      	mov	r0, r3
 801c894:	f7ef fef6 	bl	800c684 <osSemaphoreWait>
 801c898:	4603      	mov	r3, r0
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d1f5      	bne.n	801c88a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c89e:	f7ef fdb2 	bl	800c406 <osKernelSysTick>
 801c8a2:	4602      	mov	r2, r0
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	3710      	adds	r7, #16
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	bd80      	pop	{r7, pc}

0801c8b0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b082      	sub	sp, #8
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f7ef ff2f 	bl	800c720 <osSemaphoreRelease>
}
 801c8c2:	bf00      	nop
 801c8c4:	3708      	adds	r7, #8
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	bd80      	pop	{r7, pc}

0801c8ca <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c8ca:	b580      	push	{r7, lr}
 801c8cc:	b082      	sub	sp, #8
 801c8ce:	af00      	add	r7, sp, #0
 801c8d0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	f7ef ff58 	bl	800c78c <osSemaphoreDelete>
}
 801c8dc:	bf00      	nop
 801c8de:	3708      	adds	r7, #8
 801c8e0:	46bd      	mov	sp, r7
 801c8e2:	bd80      	pop	{r7, pc}

0801c8e4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c8e4:	b480      	push	{r7}
 801c8e6:	b083      	sub	sp, #12
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d101      	bne.n	801c8f8 <sys_sem_valid+0x14>
    return 0;
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	e000      	b.n	801c8fa <sys_sem_valid+0x16>
  else
    return 1;
 801c8f8:	2301      	movs	r3, #1
}
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	370c      	adds	r7, #12
 801c8fe:	46bd      	mov	sp, r7
 801c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c904:	4770      	bx	lr

0801c906 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c906:	b480      	push	{r7}
 801c908:	b083      	sub	sp, #12
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	2200      	movs	r2, #0
 801c912:	601a      	str	r2, [r3, #0]
}
 801c914:	bf00      	nop
 801c916:	370c      	adds	r7, #12
 801c918:	46bd      	mov	sp, r7
 801c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c91e:	4770      	bx	lr

0801c920 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c924:	4803      	ldr	r0, [pc, #12]	; (801c934 <sys_init+0x14>)
 801c926:	f7ef fdde 	bl	800c4e6 <osMutexCreate>
 801c92a:	4603      	mov	r3, r0
 801c92c:	4a02      	ldr	r2, [pc, #8]	; (801c938 <sys_init+0x18>)
 801c92e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c930:	bf00      	nop
 801c932:	bd80      	pop	{r7, pc}
 801c934:	08021a90 	.word	0x08021a90
 801c938:	2000df34 	.word	0x2000df34

0801c93c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b084      	sub	sp, #16
 801c940:	af00      	add	r7, sp, #0
 801c942:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c944:	2300      	movs	r3, #0
 801c946:	60bb      	str	r3, [r7, #8]
 801c948:	2300      	movs	r3, #0
 801c94a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c94c:	f107 0308 	add.w	r3, r7, #8
 801c950:	4618      	mov	r0, r3
 801c952:	f7ef fdc8 	bl	800c4e6 <osMutexCreate>
 801c956:	4602      	mov	r2, r0
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d102      	bne.n	801c96a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c964:	f04f 33ff 	mov.w	r3, #4294967295
 801c968:	e000      	b.n	801c96c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c96a:	2300      	movs	r3, #0
}
 801c96c:	4618      	mov	r0, r3
 801c96e:	3710      	adds	r7, #16
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}

0801c974 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b082      	sub	sp, #8
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	f04f 31ff 	mov.w	r1, #4294967295
 801c984:	4618      	mov	r0, r3
 801c986:	f7ef fdc7 	bl	800c518 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c98a:	bf00      	nop
 801c98c:	3708      	adds	r7, #8
 801c98e:	46bd      	mov	sp, r7
 801c990:	bd80      	pop	{r7, pc}

0801c992 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c992:	b580      	push	{r7, lr}
 801c994:	b082      	sub	sp, #8
 801c996:	af00      	add	r7, sp, #0
 801c998:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7ef fe08 	bl	800c5b4 <osMutexRelease>
}
 801c9a4:	bf00      	nop
 801c9a6:	3708      	adds	r7, #8
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}

0801c9ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b08c      	sub	sp, #48	; 0x30
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	607a      	str	r2, [r7, #4]
 801c9b8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9ba:	f107 0314 	add.w	r3, r7, #20
 801c9be:	2200      	movs	r2, #0
 801c9c0:	601a      	str	r2, [r3, #0]
 801c9c2:	605a      	str	r2, [r3, #4]
 801c9c4:	609a      	str	r2, [r3, #8]
 801c9c6:	60da      	str	r2, [r3, #12]
 801c9c8:	611a      	str	r2, [r3, #16]
 801c9ca:	615a      	str	r2, [r3, #20]
 801c9cc:	619a      	str	r2, [r3, #24]
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	617b      	str	r3, [r7, #20]
 801c9d2:	68bb      	ldr	r3, [r7, #8]
 801c9d4:	61bb      	str	r3, [r7, #24]
 801c9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9d8:	b21b      	sxth	r3, r3
 801c9da:	83bb      	strh	r3, [r7, #28]
 801c9dc:	683b      	ldr	r3, [r7, #0]
 801c9de:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c9e0:	f107 0314 	add.w	r3, r7, #20
 801c9e4:	6879      	ldr	r1, [r7, #4]
 801c9e6:	4618      	mov	r0, r3
 801c9e8:	f7ef fd1d 	bl	800c426 <osThreadCreate>
 801c9ec:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	3730      	adds	r7, #48	; 0x30
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	bd80      	pop	{r7, pc}
	...

0801c9f8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c9fc:	4b04      	ldr	r3, [pc, #16]	; (801ca10 <sys_arch_protect+0x18>)
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	f04f 31ff 	mov.w	r1, #4294967295
 801ca04:	4618      	mov	r0, r3
 801ca06:	f7ef fd87 	bl	800c518 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ca0a:	2301      	movs	r3, #1
}
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	bd80      	pop	{r7, pc}
 801ca10:	2000df34 	.word	0x2000df34

0801ca14 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b082      	sub	sp, #8
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ca1c:	4b04      	ldr	r3, [pc, #16]	; (801ca30 <sys_arch_unprotect+0x1c>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	4618      	mov	r0, r3
 801ca22:	f7ef fdc7 	bl	800c5b4 <osMutexRelease>
}
 801ca26:	bf00      	nop
 801ca28:	3708      	adds	r7, #8
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}
 801ca2e:	bf00      	nop
 801ca30:	2000df34 	.word	0x2000df34

0801ca34 <std>:
 801ca34:	2300      	movs	r3, #0
 801ca36:	b510      	push	{r4, lr}
 801ca38:	4604      	mov	r4, r0
 801ca3a:	e9c0 3300 	strd	r3, r3, [r0]
 801ca3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca42:	6083      	str	r3, [r0, #8]
 801ca44:	8181      	strh	r1, [r0, #12]
 801ca46:	6643      	str	r3, [r0, #100]	; 0x64
 801ca48:	81c2      	strh	r2, [r0, #14]
 801ca4a:	6183      	str	r3, [r0, #24]
 801ca4c:	4619      	mov	r1, r3
 801ca4e:	2208      	movs	r2, #8
 801ca50:	305c      	adds	r0, #92	; 0x5c
 801ca52:	f000 f947 	bl	801cce4 <memset>
 801ca56:	4b05      	ldr	r3, [pc, #20]	; (801ca6c <std+0x38>)
 801ca58:	6263      	str	r3, [r4, #36]	; 0x24
 801ca5a:	4b05      	ldr	r3, [pc, #20]	; (801ca70 <std+0x3c>)
 801ca5c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ca5e:	4b05      	ldr	r3, [pc, #20]	; (801ca74 <std+0x40>)
 801ca60:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ca62:	4b05      	ldr	r3, [pc, #20]	; (801ca78 <std+0x44>)
 801ca64:	6224      	str	r4, [r4, #32]
 801ca66:	6323      	str	r3, [r4, #48]	; 0x30
 801ca68:	bd10      	pop	{r4, pc}
 801ca6a:	bf00      	nop
 801ca6c:	0801d02d 	.word	0x0801d02d
 801ca70:	0801d04f 	.word	0x0801d04f
 801ca74:	0801d087 	.word	0x0801d087
 801ca78:	0801d0ab 	.word	0x0801d0ab

0801ca7c <_cleanup_r>:
 801ca7c:	4901      	ldr	r1, [pc, #4]	; (801ca84 <_cleanup_r+0x8>)
 801ca7e:	f000 b8af 	b.w	801cbe0 <_fwalk_reent>
 801ca82:	bf00      	nop
 801ca84:	0801d289 	.word	0x0801d289

0801ca88 <__sfmoreglue>:
 801ca88:	b570      	push	{r4, r5, r6, lr}
 801ca8a:	1e4a      	subs	r2, r1, #1
 801ca8c:	2568      	movs	r5, #104	; 0x68
 801ca8e:	4355      	muls	r5, r2
 801ca90:	460e      	mov	r6, r1
 801ca92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ca96:	f000 f97d 	bl	801cd94 <_malloc_r>
 801ca9a:	4604      	mov	r4, r0
 801ca9c:	b140      	cbz	r0, 801cab0 <__sfmoreglue+0x28>
 801ca9e:	2100      	movs	r1, #0
 801caa0:	e9c0 1600 	strd	r1, r6, [r0]
 801caa4:	300c      	adds	r0, #12
 801caa6:	60a0      	str	r0, [r4, #8]
 801caa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801caac:	f000 f91a 	bl	801cce4 <memset>
 801cab0:	4620      	mov	r0, r4
 801cab2:	bd70      	pop	{r4, r5, r6, pc}

0801cab4 <__sfp_lock_acquire>:
 801cab4:	4801      	ldr	r0, [pc, #4]	; (801cabc <__sfp_lock_acquire+0x8>)
 801cab6:	f7e8 beef 	b.w	8005898 <__retarget_lock_acquire_recursive>
 801caba:	bf00      	nop
 801cabc:	2000070c 	.word	0x2000070c

0801cac0 <__sfp_lock_release>:
 801cac0:	4801      	ldr	r0, [pc, #4]	; (801cac8 <__sfp_lock_release+0x8>)
 801cac2:	f7e8 befd 	b.w	80058c0 <__retarget_lock_release_recursive>
 801cac6:	bf00      	nop
 801cac8:	2000070c 	.word	0x2000070c

0801cacc <__sinit_lock_acquire>:
 801cacc:	4801      	ldr	r0, [pc, #4]	; (801cad4 <__sinit_lock_acquire+0x8>)
 801cace:	f7e8 bee3 	b.w	8005898 <__retarget_lock_acquire_recursive>
 801cad2:	bf00      	nop
 801cad4:	20000700 	.word	0x20000700

0801cad8 <__sinit_lock_release>:
 801cad8:	4801      	ldr	r0, [pc, #4]	; (801cae0 <__sinit_lock_release+0x8>)
 801cada:	f7e8 bef1 	b.w	80058c0 <__retarget_lock_release_recursive>
 801cade:	bf00      	nop
 801cae0:	20000700 	.word	0x20000700

0801cae4 <__sinit>:
 801cae4:	b510      	push	{r4, lr}
 801cae6:	4604      	mov	r4, r0
 801cae8:	f7ff fff0 	bl	801cacc <__sinit_lock_acquire>
 801caec:	69a3      	ldr	r3, [r4, #24]
 801caee:	b11b      	cbz	r3, 801caf8 <__sinit+0x14>
 801caf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801caf4:	f7ff bff0 	b.w	801cad8 <__sinit_lock_release>
 801caf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cafc:	6523      	str	r3, [r4, #80]	; 0x50
 801cafe:	4b13      	ldr	r3, [pc, #76]	; (801cb4c <__sinit+0x68>)
 801cb00:	4a13      	ldr	r2, [pc, #76]	; (801cb50 <__sinit+0x6c>)
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	62a2      	str	r2, [r4, #40]	; 0x28
 801cb06:	42a3      	cmp	r3, r4
 801cb08:	bf04      	itt	eq
 801cb0a:	2301      	moveq	r3, #1
 801cb0c:	61a3      	streq	r3, [r4, #24]
 801cb0e:	4620      	mov	r0, r4
 801cb10:	f000 f820 	bl	801cb54 <__sfp>
 801cb14:	6060      	str	r0, [r4, #4]
 801cb16:	4620      	mov	r0, r4
 801cb18:	f000 f81c 	bl	801cb54 <__sfp>
 801cb1c:	60a0      	str	r0, [r4, #8]
 801cb1e:	4620      	mov	r0, r4
 801cb20:	f000 f818 	bl	801cb54 <__sfp>
 801cb24:	2200      	movs	r2, #0
 801cb26:	60e0      	str	r0, [r4, #12]
 801cb28:	2104      	movs	r1, #4
 801cb2a:	6860      	ldr	r0, [r4, #4]
 801cb2c:	f7ff ff82 	bl	801ca34 <std>
 801cb30:	68a0      	ldr	r0, [r4, #8]
 801cb32:	2201      	movs	r2, #1
 801cb34:	2109      	movs	r1, #9
 801cb36:	f7ff ff7d 	bl	801ca34 <std>
 801cb3a:	68e0      	ldr	r0, [r4, #12]
 801cb3c:	2202      	movs	r2, #2
 801cb3e:	2112      	movs	r1, #18
 801cb40:	f7ff ff78 	bl	801ca34 <std>
 801cb44:	2301      	movs	r3, #1
 801cb46:	61a3      	str	r3, [r4, #24]
 801cb48:	e7d2      	b.n	801caf0 <__sinit+0xc>
 801cb4a:	bf00      	nop
 801cb4c:	08021af8 	.word	0x08021af8
 801cb50:	0801ca7d 	.word	0x0801ca7d

0801cb54 <__sfp>:
 801cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb56:	4607      	mov	r7, r0
 801cb58:	f7ff ffac 	bl	801cab4 <__sfp_lock_acquire>
 801cb5c:	4b1e      	ldr	r3, [pc, #120]	; (801cbd8 <__sfp+0x84>)
 801cb5e:	681e      	ldr	r6, [r3, #0]
 801cb60:	69b3      	ldr	r3, [r6, #24]
 801cb62:	b913      	cbnz	r3, 801cb6a <__sfp+0x16>
 801cb64:	4630      	mov	r0, r6
 801cb66:	f7ff ffbd 	bl	801cae4 <__sinit>
 801cb6a:	3648      	adds	r6, #72	; 0x48
 801cb6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cb70:	3b01      	subs	r3, #1
 801cb72:	d503      	bpl.n	801cb7c <__sfp+0x28>
 801cb74:	6833      	ldr	r3, [r6, #0]
 801cb76:	b30b      	cbz	r3, 801cbbc <__sfp+0x68>
 801cb78:	6836      	ldr	r6, [r6, #0]
 801cb7a:	e7f7      	b.n	801cb6c <__sfp+0x18>
 801cb7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cb80:	b9d5      	cbnz	r5, 801cbb8 <__sfp+0x64>
 801cb82:	4b16      	ldr	r3, [pc, #88]	; (801cbdc <__sfp+0x88>)
 801cb84:	60e3      	str	r3, [r4, #12]
 801cb86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cb8a:	6665      	str	r5, [r4, #100]	; 0x64
 801cb8c:	f7e8 fe5e 	bl	800584c <__retarget_lock_init_recursive>
 801cb90:	f7ff ff96 	bl	801cac0 <__sfp_lock_release>
 801cb94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cb98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cb9c:	6025      	str	r5, [r4, #0]
 801cb9e:	61a5      	str	r5, [r4, #24]
 801cba0:	2208      	movs	r2, #8
 801cba2:	4629      	mov	r1, r5
 801cba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cba8:	f000 f89c 	bl	801cce4 <memset>
 801cbac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cbb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cbb4:	4620      	mov	r0, r4
 801cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbb8:	3468      	adds	r4, #104	; 0x68
 801cbba:	e7d9      	b.n	801cb70 <__sfp+0x1c>
 801cbbc:	2104      	movs	r1, #4
 801cbbe:	4638      	mov	r0, r7
 801cbc0:	f7ff ff62 	bl	801ca88 <__sfmoreglue>
 801cbc4:	4604      	mov	r4, r0
 801cbc6:	6030      	str	r0, [r6, #0]
 801cbc8:	2800      	cmp	r0, #0
 801cbca:	d1d5      	bne.n	801cb78 <__sfp+0x24>
 801cbcc:	f7ff ff78 	bl	801cac0 <__sfp_lock_release>
 801cbd0:	230c      	movs	r3, #12
 801cbd2:	603b      	str	r3, [r7, #0]
 801cbd4:	e7ee      	b.n	801cbb4 <__sfp+0x60>
 801cbd6:	bf00      	nop
 801cbd8:	08021af8 	.word	0x08021af8
 801cbdc:	ffff0001 	.word	0xffff0001

0801cbe0 <_fwalk_reent>:
 801cbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbe4:	4606      	mov	r6, r0
 801cbe6:	4688      	mov	r8, r1
 801cbe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cbec:	2700      	movs	r7, #0
 801cbee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cbf2:	f1b9 0901 	subs.w	r9, r9, #1
 801cbf6:	d505      	bpl.n	801cc04 <_fwalk_reent+0x24>
 801cbf8:	6824      	ldr	r4, [r4, #0]
 801cbfa:	2c00      	cmp	r4, #0
 801cbfc:	d1f7      	bne.n	801cbee <_fwalk_reent+0xe>
 801cbfe:	4638      	mov	r0, r7
 801cc00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc04:	89ab      	ldrh	r3, [r5, #12]
 801cc06:	2b01      	cmp	r3, #1
 801cc08:	d907      	bls.n	801cc1a <_fwalk_reent+0x3a>
 801cc0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cc0e:	3301      	adds	r3, #1
 801cc10:	d003      	beq.n	801cc1a <_fwalk_reent+0x3a>
 801cc12:	4629      	mov	r1, r5
 801cc14:	4630      	mov	r0, r6
 801cc16:	47c0      	blx	r8
 801cc18:	4307      	orrs	r7, r0
 801cc1a:	3568      	adds	r5, #104	; 0x68
 801cc1c:	e7e9      	b.n	801cbf2 <_fwalk_reent+0x12>
	...

0801cc20 <__libc_init_array>:
 801cc20:	b570      	push	{r4, r5, r6, lr}
 801cc22:	4d0d      	ldr	r5, [pc, #52]	; (801cc58 <__libc_init_array+0x38>)
 801cc24:	4c0d      	ldr	r4, [pc, #52]	; (801cc5c <__libc_init_array+0x3c>)
 801cc26:	1b64      	subs	r4, r4, r5
 801cc28:	10a4      	asrs	r4, r4, #2
 801cc2a:	2600      	movs	r6, #0
 801cc2c:	42a6      	cmp	r6, r4
 801cc2e:	d109      	bne.n	801cc44 <__libc_init_array+0x24>
 801cc30:	4d0b      	ldr	r5, [pc, #44]	; (801cc60 <__libc_init_array+0x40>)
 801cc32:	4c0c      	ldr	r4, [pc, #48]	; (801cc64 <__libc_init_array+0x44>)
 801cc34:	f001 f9b0 	bl	801df98 <_init>
 801cc38:	1b64      	subs	r4, r4, r5
 801cc3a:	10a4      	asrs	r4, r4, #2
 801cc3c:	2600      	movs	r6, #0
 801cc3e:	42a6      	cmp	r6, r4
 801cc40:	d105      	bne.n	801cc4e <__libc_init_array+0x2e>
 801cc42:	bd70      	pop	{r4, r5, r6, pc}
 801cc44:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc48:	4798      	blx	r3
 801cc4a:	3601      	adds	r6, #1
 801cc4c:	e7ee      	b.n	801cc2c <__libc_init_array+0xc>
 801cc4e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc52:	4798      	blx	r3
 801cc54:	3601      	adds	r6, #1
 801cc56:	e7f2      	b.n	801cc3e <__libc_init_array+0x1e>
 801cc58:	08021bec 	.word	0x08021bec
 801cc5c:	08021bec 	.word	0x08021bec
 801cc60:	08021bec 	.word	0x08021bec
 801cc64:	08021bf0 	.word	0x08021bf0

0801cc68 <malloc>:
 801cc68:	4b02      	ldr	r3, [pc, #8]	; (801cc74 <malloc+0xc>)
 801cc6a:	4601      	mov	r1, r0
 801cc6c:	6818      	ldr	r0, [r3, #0]
 801cc6e:	f000 b891 	b.w	801cd94 <_malloc_r>
 801cc72:	bf00      	nop
 801cc74:	200002f8 	.word	0x200002f8

0801cc78 <memcmp>:
 801cc78:	b530      	push	{r4, r5, lr}
 801cc7a:	3901      	subs	r1, #1
 801cc7c:	2400      	movs	r4, #0
 801cc7e:	42a2      	cmp	r2, r4
 801cc80:	d101      	bne.n	801cc86 <memcmp+0xe>
 801cc82:	2000      	movs	r0, #0
 801cc84:	e005      	b.n	801cc92 <memcmp+0x1a>
 801cc86:	5d03      	ldrb	r3, [r0, r4]
 801cc88:	3401      	adds	r4, #1
 801cc8a:	5d0d      	ldrb	r5, [r1, r4]
 801cc8c:	42ab      	cmp	r3, r5
 801cc8e:	d0f6      	beq.n	801cc7e <memcmp+0x6>
 801cc90:	1b58      	subs	r0, r3, r5
 801cc92:	bd30      	pop	{r4, r5, pc}

0801cc94 <memcpy>:
 801cc94:	440a      	add	r2, r1
 801cc96:	4291      	cmp	r1, r2
 801cc98:	f100 33ff 	add.w	r3, r0, #4294967295
 801cc9c:	d100      	bne.n	801cca0 <memcpy+0xc>
 801cc9e:	4770      	bx	lr
 801cca0:	b510      	push	{r4, lr}
 801cca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ccaa:	4291      	cmp	r1, r2
 801ccac:	d1f9      	bne.n	801cca2 <memcpy+0xe>
 801ccae:	bd10      	pop	{r4, pc}

0801ccb0 <memmove>:
 801ccb0:	4288      	cmp	r0, r1
 801ccb2:	b510      	push	{r4, lr}
 801ccb4:	eb01 0402 	add.w	r4, r1, r2
 801ccb8:	d902      	bls.n	801ccc0 <memmove+0x10>
 801ccba:	4284      	cmp	r4, r0
 801ccbc:	4623      	mov	r3, r4
 801ccbe:	d807      	bhi.n	801ccd0 <memmove+0x20>
 801ccc0:	1e43      	subs	r3, r0, #1
 801ccc2:	42a1      	cmp	r1, r4
 801ccc4:	d008      	beq.n	801ccd8 <memmove+0x28>
 801ccc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ccca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ccce:	e7f8      	b.n	801ccc2 <memmove+0x12>
 801ccd0:	4402      	add	r2, r0
 801ccd2:	4601      	mov	r1, r0
 801ccd4:	428a      	cmp	r2, r1
 801ccd6:	d100      	bne.n	801ccda <memmove+0x2a>
 801ccd8:	bd10      	pop	{r4, pc}
 801ccda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ccde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cce2:	e7f7      	b.n	801ccd4 <memmove+0x24>

0801cce4 <memset>:
 801cce4:	4402      	add	r2, r0
 801cce6:	4603      	mov	r3, r0
 801cce8:	4293      	cmp	r3, r2
 801ccea:	d100      	bne.n	801ccee <memset+0xa>
 801ccec:	4770      	bx	lr
 801ccee:	f803 1b01 	strb.w	r1, [r3], #1
 801ccf2:	e7f9      	b.n	801cce8 <memset+0x4>

0801ccf4 <_free_r>:
 801ccf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ccf6:	2900      	cmp	r1, #0
 801ccf8:	d048      	beq.n	801cd8c <_free_r+0x98>
 801ccfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ccfe:	9001      	str	r0, [sp, #4]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	f1a1 0404 	sub.w	r4, r1, #4
 801cd06:	bfb8      	it	lt
 801cd08:	18e4      	addlt	r4, r4, r3
 801cd0a:	f000 fb1d 	bl	801d348 <__malloc_lock>
 801cd0e:	4a20      	ldr	r2, [pc, #128]	; (801cd90 <_free_r+0x9c>)
 801cd10:	9801      	ldr	r0, [sp, #4]
 801cd12:	6813      	ldr	r3, [r2, #0]
 801cd14:	4615      	mov	r5, r2
 801cd16:	b933      	cbnz	r3, 801cd26 <_free_r+0x32>
 801cd18:	6063      	str	r3, [r4, #4]
 801cd1a:	6014      	str	r4, [r2, #0]
 801cd1c:	b003      	add	sp, #12
 801cd1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd22:	f000 bb17 	b.w	801d354 <__malloc_unlock>
 801cd26:	42a3      	cmp	r3, r4
 801cd28:	d90b      	bls.n	801cd42 <_free_r+0x4e>
 801cd2a:	6821      	ldr	r1, [r4, #0]
 801cd2c:	1862      	adds	r2, r4, r1
 801cd2e:	4293      	cmp	r3, r2
 801cd30:	bf04      	itt	eq
 801cd32:	681a      	ldreq	r2, [r3, #0]
 801cd34:	685b      	ldreq	r3, [r3, #4]
 801cd36:	6063      	str	r3, [r4, #4]
 801cd38:	bf04      	itt	eq
 801cd3a:	1852      	addeq	r2, r2, r1
 801cd3c:	6022      	streq	r2, [r4, #0]
 801cd3e:	602c      	str	r4, [r5, #0]
 801cd40:	e7ec      	b.n	801cd1c <_free_r+0x28>
 801cd42:	461a      	mov	r2, r3
 801cd44:	685b      	ldr	r3, [r3, #4]
 801cd46:	b10b      	cbz	r3, 801cd4c <_free_r+0x58>
 801cd48:	42a3      	cmp	r3, r4
 801cd4a:	d9fa      	bls.n	801cd42 <_free_r+0x4e>
 801cd4c:	6811      	ldr	r1, [r2, #0]
 801cd4e:	1855      	adds	r5, r2, r1
 801cd50:	42a5      	cmp	r5, r4
 801cd52:	d10b      	bne.n	801cd6c <_free_r+0x78>
 801cd54:	6824      	ldr	r4, [r4, #0]
 801cd56:	4421      	add	r1, r4
 801cd58:	1854      	adds	r4, r2, r1
 801cd5a:	42a3      	cmp	r3, r4
 801cd5c:	6011      	str	r1, [r2, #0]
 801cd5e:	d1dd      	bne.n	801cd1c <_free_r+0x28>
 801cd60:	681c      	ldr	r4, [r3, #0]
 801cd62:	685b      	ldr	r3, [r3, #4]
 801cd64:	6053      	str	r3, [r2, #4]
 801cd66:	4421      	add	r1, r4
 801cd68:	6011      	str	r1, [r2, #0]
 801cd6a:	e7d7      	b.n	801cd1c <_free_r+0x28>
 801cd6c:	d902      	bls.n	801cd74 <_free_r+0x80>
 801cd6e:	230c      	movs	r3, #12
 801cd70:	6003      	str	r3, [r0, #0]
 801cd72:	e7d3      	b.n	801cd1c <_free_r+0x28>
 801cd74:	6825      	ldr	r5, [r4, #0]
 801cd76:	1961      	adds	r1, r4, r5
 801cd78:	428b      	cmp	r3, r1
 801cd7a:	bf04      	itt	eq
 801cd7c:	6819      	ldreq	r1, [r3, #0]
 801cd7e:	685b      	ldreq	r3, [r3, #4]
 801cd80:	6063      	str	r3, [r4, #4]
 801cd82:	bf04      	itt	eq
 801cd84:	1949      	addeq	r1, r1, r5
 801cd86:	6021      	streq	r1, [r4, #0]
 801cd88:	6054      	str	r4, [r2, #4]
 801cd8a:	e7c7      	b.n	801cd1c <_free_r+0x28>
 801cd8c:	b003      	add	sp, #12
 801cd8e:	bd30      	pop	{r4, r5, pc}
 801cd90:	20006d20 	.word	0x20006d20

0801cd94 <_malloc_r>:
 801cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd96:	1ccd      	adds	r5, r1, #3
 801cd98:	f025 0503 	bic.w	r5, r5, #3
 801cd9c:	3508      	adds	r5, #8
 801cd9e:	2d0c      	cmp	r5, #12
 801cda0:	bf38      	it	cc
 801cda2:	250c      	movcc	r5, #12
 801cda4:	2d00      	cmp	r5, #0
 801cda6:	4606      	mov	r6, r0
 801cda8:	db01      	blt.n	801cdae <_malloc_r+0x1a>
 801cdaa:	42a9      	cmp	r1, r5
 801cdac:	d903      	bls.n	801cdb6 <_malloc_r+0x22>
 801cdae:	230c      	movs	r3, #12
 801cdb0:	6033      	str	r3, [r6, #0]
 801cdb2:	2000      	movs	r0, #0
 801cdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cdb6:	f000 fac7 	bl	801d348 <__malloc_lock>
 801cdba:	4921      	ldr	r1, [pc, #132]	; (801ce40 <_malloc_r+0xac>)
 801cdbc:	680a      	ldr	r2, [r1, #0]
 801cdbe:	4614      	mov	r4, r2
 801cdc0:	b99c      	cbnz	r4, 801cdea <_malloc_r+0x56>
 801cdc2:	4f20      	ldr	r7, [pc, #128]	; (801ce44 <_malloc_r+0xb0>)
 801cdc4:	683b      	ldr	r3, [r7, #0]
 801cdc6:	b923      	cbnz	r3, 801cdd2 <_malloc_r+0x3e>
 801cdc8:	4621      	mov	r1, r4
 801cdca:	4630      	mov	r0, r6
 801cdcc:	f000 f8fe 	bl	801cfcc <_sbrk_r>
 801cdd0:	6038      	str	r0, [r7, #0]
 801cdd2:	4629      	mov	r1, r5
 801cdd4:	4630      	mov	r0, r6
 801cdd6:	f000 f8f9 	bl	801cfcc <_sbrk_r>
 801cdda:	1c43      	adds	r3, r0, #1
 801cddc:	d123      	bne.n	801ce26 <_malloc_r+0x92>
 801cdde:	230c      	movs	r3, #12
 801cde0:	6033      	str	r3, [r6, #0]
 801cde2:	4630      	mov	r0, r6
 801cde4:	f000 fab6 	bl	801d354 <__malloc_unlock>
 801cde8:	e7e3      	b.n	801cdb2 <_malloc_r+0x1e>
 801cdea:	6823      	ldr	r3, [r4, #0]
 801cdec:	1b5b      	subs	r3, r3, r5
 801cdee:	d417      	bmi.n	801ce20 <_malloc_r+0x8c>
 801cdf0:	2b0b      	cmp	r3, #11
 801cdf2:	d903      	bls.n	801cdfc <_malloc_r+0x68>
 801cdf4:	6023      	str	r3, [r4, #0]
 801cdf6:	441c      	add	r4, r3
 801cdf8:	6025      	str	r5, [r4, #0]
 801cdfa:	e004      	b.n	801ce06 <_malloc_r+0x72>
 801cdfc:	6863      	ldr	r3, [r4, #4]
 801cdfe:	42a2      	cmp	r2, r4
 801ce00:	bf0c      	ite	eq
 801ce02:	600b      	streq	r3, [r1, #0]
 801ce04:	6053      	strne	r3, [r2, #4]
 801ce06:	4630      	mov	r0, r6
 801ce08:	f000 faa4 	bl	801d354 <__malloc_unlock>
 801ce0c:	f104 000b 	add.w	r0, r4, #11
 801ce10:	1d23      	adds	r3, r4, #4
 801ce12:	f020 0007 	bic.w	r0, r0, #7
 801ce16:	1ac2      	subs	r2, r0, r3
 801ce18:	d0cc      	beq.n	801cdb4 <_malloc_r+0x20>
 801ce1a:	1a1b      	subs	r3, r3, r0
 801ce1c:	50a3      	str	r3, [r4, r2]
 801ce1e:	e7c9      	b.n	801cdb4 <_malloc_r+0x20>
 801ce20:	4622      	mov	r2, r4
 801ce22:	6864      	ldr	r4, [r4, #4]
 801ce24:	e7cc      	b.n	801cdc0 <_malloc_r+0x2c>
 801ce26:	1cc4      	adds	r4, r0, #3
 801ce28:	f024 0403 	bic.w	r4, r4, #3
 801ce2c:	42a0      	cmp	r0, r4
 801ce2e:	d0e3      	beq.n	801cdf8 <_malloc_r+0x64>
 801ce30:	1a21      	subs	r1, r4, r0
 801ce32:	4630      	mov	r0, r6
 801ce34:	f000 f8ca 	bl	801cfcc <_sbrk_r>
 801ce38:	3001      	adds	r0, #1
 801ce3a:	d1dd      	bne.n	801cdf8 <_malloc_r+0x64>
 801ce3c:	e7cf      	b.n	801cdde <_malloc_r+0x4a>
 801ce3e:	bf00      	nop
 801ce40:	20006d20 	.word	0x20006d20
 801ce44:	20006d24 	.word	0x20006d24

0801ce48 <iprintf>:
 801ce48:	b40f      	push	{r0, r1, r2, r3}
 801ce4a:	4b0a      	ldr	r3, [pc, #40]	; (801ce74 <iprintf+0x2c>)
 801ce4c:	b513      	push	{r0, r1, r4, lr}
 801ce4e:	681c      	ldr	r4, [r3, #0]
 801ce50:	b124      	cbz	r4, 801ce5c <iprintf+0x14>
 801ce52:	69a3      	ldr	r3, [r4, #24]
 801ce54:	b913      	cbnz	r3, 801ce5c <iprintf+0x14>
 801ce56:	4620      	mov	r0, r4
 801ce58:	f7ff fe44 	bl	801cae4 <__sinit>
 801ce5c:	ab05      	add	r3, sp, #20
 801ce5e:	9a04      	ldr	r2, [sp, #16]
 801ce60:	68a1      	ldr	r1, [r4, #8]
 801ce62:	9301      	str	r3, [sp, #4]
 801ce64:	4620      	mov	r0, r4
 801ce66:	f000 fc01 	bl	801d66c <_vfiprintf_r>
 801ce6a:	b002      	add	sp, #8
 801ce6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce70:	b004      	add	sp, #16
 801ce72:	4770      	bx	lr
 801ce74:	200002f8 	.word	0x200002f8

0801ce78 <rand>:
 801ce78:	4b17      	ldr	r3, [pc, #92]	; (801ced8 <rand+0x60>)
 801ce7a:	b510      	push	{r4, lr}
 801ce7c:	681c      	ldr	r4, [r3, #0]
 801ce7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ce80:	b9b3      	cbnz	r3, 801ceb0 <rand+0x38>
 801ce82:	2018      	movs	r0, #24
 801ce84:	f7ff fef0 	bl	801cc68 <malloc>
 801ce88:	63a0      	str	r0, [r4, #56]	; 0x38
 801ce8a:	b928      	cbnz	r0, 801ce98 <rand+0x20>
 801ce8c:	4602      	mov	r2, r0
 801ce8e:	4b13      	ldr	r3, [pc, #76]	; (801cedc <rand+0x64>)
 801ce90:	4813      	ldr	r0, [pc, #76]	; (801cee0 <rand+0x68>)
 801ce92:	214e      	movs	r1, #78	; 0x4e
 801ce94:	f000 f944 	bl	801d120 <__assert_func>
 801ce98:	4a12      	ldr	r2, [pc, #72]	; (801cee4 <rand+0x6c>)
 801ce9a:	4b13      	ldr	r3, [pc, #76]	; (801cee8 <rand+0x70>)
 801ce9c:	e9c0 2300 	strd	r2, r3, [r0]
 801cea0:	4b12      	ldr	r3, [pc, #72]	; (801ceec <rand+0x74>)
 801cea2:	6083      	str	r3, [r0, #8]
 801cea4:	230b      	movs	r3, #11
 801cea6:	8183      	strh	r3, [r0, #12]
 801cea8:	2201      	movs	r2, #1
 801ceaa:	2300      	movs	r3, #0
 801ceac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ceb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ceb2:	480f      	ldr	r0, [pc, #60]	; (801cef0 <rand+0x78>)
 801ceb4:	690a      	ldr	r2, [r1, #16]
 801ceb6:	694b      	ldr	r3, [r1, #20]
 801ceb8:	4c0e      	ldr	r4, [pc, #56]	; (801cef4 <rand+0x7c>)
 801ceba:	4350      	muls	r0, r2
 801cebc:	fb04 0003 	mla	r0, r4, r3, r0
 801cec0:	fba2 3404 	umull	r3, r4, r2, r4
 801cec4:	1c5a      	adds	r2, r3, #1
 801cec6:	4404      	add	r4, r0
 801cec8:	f144 0000 	adc.w	r0, r4, #0
 801cecc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ced0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ced4:	bd10      	pop	{r4, pc}
 801ced6:	bf00      	nop
 801ced8:	200002f8 	.word	0x200002f8
 801cedc:	08021afc 	.word	0x08021afc
 801cee0:	08021b13 	.word	0x08021b13
 801cee4:	abcd330e 	.word	0xabcd330e
 801cee8:	e66d1234 	.word	0xe66d1234
 801ceec:	0005deec 	.word	0x0005deec
 801cef0:	5851f42d 	.word	0x5851f42d
 801cef4:	4c957f2d 	.word	0x4c957f2d

0801cef8 <cleanup_glue>:
 801cef8:	b538      	push	{r3, r4, r5, lr}
 801cefa:	460c      	mov	r4, r1
 801cefc:	6809      	ldr	r1, [r1, #0]
 801cefe:	4605      	mov	r5, r0
 801cf00:	b109      	cbz	r1, 801cf06 <cleanup_glue+0xe>
 801cf02:	f7ff fff9 	bl	801cef8 <cleanup_glue>
 801cf06:	4621      	mov	r1, r4
 801cf08:	4628      	mov	r0, r5
 801cf0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf0e:	f7ff bef1 	b.w	801ccf4 <_free_r>
	...

0801cf14 <_reclaim_reent>:
 801cf14:	4b2c      	ldr	r3, [pc, #176]	; (801cfc8 <_reclaim_reent+0xb4>)
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	4283      	cmp	r3, r0
 801cf1a:	b570      	push	{r4, r5, r6, lr}
 801cf1c:	4604      	mov	r4, r0
 801cf1e:	d051      	beq.n	801cfc4 <_reclaim_reent+0xb0>
 801cf20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801cf22:	b143      	cbz	r3, 801cf36 <_reclaim_reent+0x22>
 801cf24:	68db      	ldr	r3, [r3, #12]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d14a      	bne.n	801cfc0 <_reclaim_reent+0xac>
 801cf2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf2c:	6819      	ldr	r1, [r3, #0]
 801cf2e:	b111      	cbz	r1, 801cf36 <_reclaim_reent+0x22>
 801cf30:	4620      	mov	r0, r4
 801cf32:	f7ff fedf 	bl	801ccf4 <_free_r>
 801cf36:	6961      	ldr	r1, [r4, #20]
 801cf38:	b111      	cbz	r1, 801cf40 <_reclaim_reent+0x2c>
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f7ff feda 	bl	801ccf4 <_free_r>
 801cf40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cf42:	b111      	cbz	r1, 801cf4a <_reclaim_reent+0x36>
 801cf44:	4620      	mov	r0, r4
 801cf46:	f7ff fed5 	bl	801ccf4 <_free_r>
 801cf4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cf4c:	b111      	cbz	r1, 801cf54 <_reclaim_reent+0x40>
 801cf4e:	4620      	mov	r0, r4
 801cf50:	f7ff fed0 	bl	801ccf4 <_free_r>
 801cf54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801cf56:	b111      	cbz	r1, 801cf5e <_reclaim_reent+0x4a>
 801cf58:	4620      	mov	r0, r4
 801cf5a:	f7ff fecb 	bl	801ccf4 <_free_r>
 801cf5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cf60:	b111      	cbz	r1, 801cf68 <_reclaim_reent+0x54>
 801cf62:	4620      	mov	r0, r4
 801cf64:	f7ff fec6 	bl	801ccf4 <_free_r>
 801cf68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801cf6a:	b111      	cbz	r1, 801cf72 <_reclaim_reent+0x5e>
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	f7ff fec1 	bl	801ccf4 <_free_r>
 801cf72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cf74:	b111      	cbz	r1, 801cf7c <_reclaim_reent+0x68>
 801cf76:	4620      	mov	r0, r4
 801cf78:	f7ff febc 	bl	801ccf4 <_free_r>
 801cf7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cf7e:	b111      	cbz	r1, 801cf86 <_reclaim_reent+0x72>
 801cf80:	4620      	mov	r0, r4
 801cf82:	f7ff feb7 	bl	801ccf4 <_free_r>
 801cf86:	69a3      	ldr	r3, [r4, #24]
 801cf88:	b1e3      	cbz	r3, 801cfc4 <_reclaim_reent+0xb0>
 801cf8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	4798      	blx	r3
 801cf90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cf92:	b1b9      	cbz	r1, 801cfc4 <_reclaim_reent+0xb0>
 801cf94:	4620      	mov	r0, r4
 801cf96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf9a:	f7ff bfad 	b.w	801cef8 <cleanup_glue>
 801cf9e:	5949      	ldr	r1, [r1, r5]
 801cfa0:	b941      	cbnz	r1, 801cfb4 <_reclaim_reent+0xa0>
 801cfa2:	3504      	adds	r5, #4
 801cfa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cfa6:	2d80      	cmp	r5, #128	; 0x80
 801cfa8:	68d9      	ldr	r1, [r3, #12]
 801cfaa:	d1f8      	bne.n	801cf9e <_reclaim_reent+0x8a>
 801cfac:	4620      	mov	r0, r4
 801cfae:	f7ff fea1 	bl	801ccf4 <_free_r>
 801cfb2:	e7ba      	b.n	801cf2a <_reclaim_reent+0x16>
 801cfb4:	680e      	ldr	r6, [r1, #0]
 801cfb6:	4620      	mov	r0, r4
 801cfb8:	f7ff fe9c 	bl	801ccf4 <_free_r>
 801cfbc:	4631      	mov	r1, r6
 801cfbe:	e7ef      	b.n	801cfa0 <_reclaim_reent+0x8c>
 801cfc0:	2500      	movs	r5, #0
 801cfc2:	e7ef      	b.n	801cfa4 <_reclaim_reent+0x90>
 801cfc4:	bd70      	pop	{r4, r5, r6, pc}
 801cfc6:	bf00      	nop
 801cfc8:	200002f8 	.word	0x200002f8

0801cfcc <_sbrk_r>:
 801cfcc:	b538      	push	{r3, r4, r5, lr}
 801cfce:	4d06      	ldr	r5, [pc, #24]	; (801cfe8 <_sbrk_r+0x1c>)
 801cfd0:	2300      	movs	r3, #0
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	4608      	mov	r0, r1
 801cfd6:	602b      	str	r3, [r5, #0]
 801cfd8:	f7e8 f90a 	bl	80051f0 <_sbrk>
 801cfdc:	1c43      	adds	r3, r0, #1
 801cfde:	d102      	bne.n	801cfe6 <_sbrk_r+0x1a>
 801cfe0:	682b      	ldr	r3, [r5, #0]
 801cfe2:	b103      	cbz	r3, 801cfe6 <_sbrk_r+0x1a>
 801cfe4:	6023      	str	r3, [r4, #0]
 801cfe6:	bd38      	pop	{r3, r4, r5, pc}
 801cfe8:	2000df38 	.word	0x2000df38

0801cfec <siprintf>:
 801cfec:	b40e      	push	{r1, r2, r3}
 801cfee:	b500      	push	{lr}
 801cff0:	b09c      	sub	sp, #112	; 0x70
 801cff2:	ab1d      	add	r3, sp, #116	; 0x74
 801cff4:	9002      	str	r0, [sp, #8]
 801cff6:	9006      	str	r0, [sp, #24]
 801cff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cffc:	4809      	ldr	r0, [pc, #36]	; (801d024 <siprintf+0x38>)
 801cffe:	9107      	str	r1, [sp, #28]
 801d000:	9104      	str	r1, [sp, #16]
 801d002:	4909      	ldr	r1, [pc, #36]	; (801d028 <siprintf+0x3c>)
 801d004:	f853 2b04 	ldr.w	r2, [r3], #4
 801d008:	9105      	str	r1, [sp, #20]
 801d00a:	6800      	ldr	r0, [r0, #0]
 801d00c:	9301      	str	r3, [sp, #4]
 801d00e:	a902      	add	r1, sp, #8
 801d010:	f000 fa02 	bl	801d418 <_svfiprintf_r>
 801d014:	9b02      	ldr	r3, [sp, #8]
 801d016:	2200      	movs	r2, #0
 801d018:	701a      	strb	r2, [r3, #0]
 801d01a:	b01c      	add	sp, #112	; 0x70
 801d01c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d020:	b003      	add	sp, #12
 801d022:	4770      	bx	lr
 801d024:	200002f8 	.word	0x200002f8
 801d028:	ffff0208 	.word	0xffff0208

0801d02c <__sread>:
 801d02c:	b510      	push	{r4, lr}
 801d02e:	460c      	mov	r4, r1
 801d030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d034:	f000 fdde 	bl	801dbf4 <_read_r>
 801d038:	2800      	cmp	r0, #0
 801d03a:	bfab      	itete	ge
 801d03c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d03e:	89a3      	ldrhlt	r3, [r4, #12]
 801d040:	181b      	addge	r3, r3, r0
 801d042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d046:	bfac      	ite	ge
 801d048:	6563      	strge	r3, [r4, #84]	; 0x54
 801d04a:	81a3      	strhlt	r3, [r4, #12]
 801d04c:	bd10      	pop	{r4, pc}

0801d04e <__swrite>:
 801d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d052:	461f      	mov	r7, r3
 801d054:	898b      	ldrh	r3, [r1, #12]
 801d056:	05db      	lsls	r3, r3, #23
 801d058:	4605      	mov	r5, r0
 801d05a:	460c      	mov	r4, r1
 801d05c:	4616      	mov	r6, r2
 801d05e:	d505      	bpl.n	801d06c <__swrite+0x1e>
 801d060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d064:	2302      	movs	r3, #2
 801d066:	2200      	movs	r2, #0
 801d068:	f000 f95c 	bl	801d324 <_lseek_r>
 801d06c:	89a3      	ldrh	r3, [r4, #12]
 801d06e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d076:	81a3      	strh	r3, [r4, #12]
 801d078:	4632      	mov	r2, r6
 801d07a:	463b      	mov	r3, r7
 801d07c:	4628      	mov	r0, r5
 801d07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d082:	f000 b83b 	b.w	801d0fc <_write_r>

0801d086 <__sseek>:
 801d086:	b510      	push	{r4, lr}
 801d088:	460c      	mov	r4, r1
 801d08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d08e:	f000 f949 	bl	801d324 <_lseek_r>
 801d092:	1c43      	adds	r3, r0, #1
 801d094:	89a3      	ldrh	r3, [r4, #12]
 801d096:	bf15      	itete	ne
 801d098:	6560      	strne	r0, [r4, #84]	; 0x54
 801d09a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d09e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d0a2:	81a3      	strheq	r3, [r4, #12]
 801d0a4:	bf18      	it	ne
 801d0a6:	81a3      	strhne	r3, [r4, #12]
 801d0a8:	bd10      	pop	{r4, pc}

0801d0aa <__sclose>:
 801d0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0ae:	f000 b855 	b.w	801d15c <_close_r>

0801d0b2 <strncmp>:
 801d0b2:	b510      	push	{r4, lr}
 801d0b4:	b16a      	cbz	r2, 801d0d2 <strncmp+0x20>
 801d0b6:	3901      	subs	r1, #1
 801d0b8:	1884      	adds	r4, r0, r2
 801d0ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d0be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d103      	bne.n	801d0ce <strncmp+0x1c>
 801d0c6:	42a0      	cmp	r0, r4
 801d0c8:	d001      	beq.n	801d0ce <strncmp+0x1c>
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d1f5      	bne.n	801d0ba <strncmp+0x8>
 801d0ce:	1a98      	subs	r0, r3, r2
 801d0d0:	bd10      	pop	{r4, pc}
 801d0d2:	4610      	mov	r0, r2
 801d0d4:	e7fc      	b.n	801d0d0 <strncmp+0x1e>

0801d0d6 <strncpy>:
 801d0d6:	b510      	push	{r4, lr}
 801d0d8:	3901      	subs	r1, #1
 801d0da:	4603      	mov	r3, r0
 801d0dc:	b132      	cbz	r2, 801d0ec <strncpy+0x16>
 801d0de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d0e2:	f803 4b01 	strb.w	r4, [r3], #1
 801d0e6:	3a01      	subs	r2, #1
 801d0e8:	2c00      	cmp	r4, #0
 801d0ea:	d1f7      	bne.n	801d0dc <strncpy+0x6>
 801d0ec:	441a      	add	r2, r3
 801d0ee:	2100      	movs	r1, #0
 801d0f0:	4293      	cmp	r3, r2
 801d0f2:	d100      	bne.n	801d0f6 <strncpy+0x20>
 801d0f4:	bd10      	pop	{r4, pc}
 801d0f6:	f803 1b01 	strb.w	r1, [r3], #1
 801d0fa:	e7f9      	b.n	801d0f0 <strncpy+0x1a>

0801d0fc <_write_r>:
 801d0fc:	b538      	push	{r3, r4, r5, lr}
 801d0fe:	4d07      	ldr	r5, [pc, #28]	; (801d11c <_write_r+0x20>)
 801d100:	4604      	mov	r4, r0
 801d102:	4608      	mov	r0, r1
 801d104:	4611      	mov	r1, r2
 801d106:	2200      	movs	r2, #0
 801d108:	602a      	str	r2, [r5, #0]
 801d10a:	461a      	mov	r2, r3
 801d10c:	f7e8 f81f 	bl	800514e <_write>
 801d110:	1c43      	adds	r3, r0, #1
 801d112:	d102      	bne.n	801d11a <_write_r+0x1e>
 801d114:	682b      	ldr	r3, [r5, #0]
 801d116:	b103      	cbz	r3, 801d11a <_write_r+0x1e>
 801d118:	6023      	str	r3, [r4, #0]
 801d11a:	bd38      	pop	{r3, r4, r5, pc}
 801d11c:	2000df38 	.word	0x2000df38

0801d120 <__assert_func>:
 801d120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d122:	4614      	mov	r4, r2
 801d124:	461a      	mov	r2, r3
 801d126:	4b09      	ldr	r3, [pc, #36]	; (801d14c <__assert_func+0x2c>)
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	4605      	mov	r5, r0
 801d12c:	68d8      	ldr	r0, [r3, #12]
 801d12e:	b14c      	cbz	r4, 801d144 <__assert_func+0x24>
 801d130:	4b07      	ldr	r3, [pc, #28]	; (801d150 <__assert_func+0x30>)
 801d132:	9100      	str	r1, [sp, #0]
 801d134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d138:	4906      	ldr	r1, [pc, #24]	; (801d154 <__assert_func+0x34>)
 801d13a:	462b      	mov	r3, r5
 801d13c:	f000 f8e0 	bl	801d300 <fiprintf>
 801d140:	f000 fe2a 	bl	801dd98 <abort>
 801d144:	4b04      	ldr	r3, [pc, #16]	; (801d158 <__assert_func+0x38>)
 801d146:	461c      	mov	r4, r3
 801d148:	e7f3      	b.n	801d132 <__assert_func+0x12>
 801d14a:	bf00      	nop
 801d14c:	200002f8 	.word	0x200002f8
 801d150:	08021b72 	.word	0x08021b72
 801d154:	08021b7f 	.word	0x08021b7f
 801d158:	08021bad 	.word	0x08021bad

0801d15c <_close_r>:
 801d15c:	b538      	push	{r3, r4, r5, lr}
 801d15e:	4d06      	ldr	r5, [pc, #24]	; (801d178 <_close_r+0x1c>)
 801d160:	2300      	movs	r3, #0
 801d162:	4604      	mov	r4, r0
 801d164:	4608      	mov	r0, r1
 801d166:	602b      	str	r3, [r5, #0]
 801d168:	f7e8 f80d 	bl	8005186 <_close>
 801d16c:	1c43      	adds	r3, r0, #1
 801d16e:	d102      	bne.n	801d176 <_close_r+0x1a>
 801d170:	682b      	ldr	r3, [r5, #0]
 801d172:	b103      	cbz	r3, 801d176 <_close_r+0x1a>
 801d174:	6023      	str	r3, [r4, #0]
 801d176:	bd38      	pop	{r3, r4, r5, pc}
 801d178:	2000df38 	.word	0x2000df38

0801d17c <__sflush_r>:
 801d17c:	898a      	ldrh	r2, [r1, #12]
 801d17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d182:	4605      	mov	r5, r0
 801d184:	0710      	lsls	r0, r2, #28
 801d186:	460c      	mov	r4, r1
 801d188:	d458      	bmi.n	801d23c <__sflush_r+0xc0>
 801d18a:	684b      	ldr	r3, [r1, #4]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	dc05      	bgt.n	801d19c <__sflush_r+0x20>
 801d190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d192:	2b00      	cmp	r3, #0
 801d194:	dc02      	bgt.n	801d19c <__sflush_r+0x20>
 801d196:	2000      	movs	r0, #0
 801d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d19e:	2e00      	cmp	r6, #0
 801d1a0:	d0f9      	beq.n	801d196 <__sflush_r+0x1a>
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d1a8:	682f      	ldr	r7, [r5, #0]
 801d1aa:	602b      	str	r3, [r5, #0]
 801d1ac:	d032      	beq.n	801d214 <__sflush_r+0x98>
 801d1ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d1b0:	89a3      	ldrh	r3, [r4, #12]
 801d1b2:	075a      	lsls	r2, r3, #29
 801d1b4:	d505      	bpl.n	801d1c2 <__sflush_r+0x46>
 801d1b6:	6863      	ldr	r3, [r4, #4]
 801d1b8:	1ac0      	subs	r0, r0, r3
 801d1ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d1bc:	b10b      	cbz	r3, 801d1c2 <__sflush_r+0x46>
 801d1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d1c0:	1ac0      	subs	r0, r0, r3
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	4602      	mov	r2, r0
 801d1c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d1c8:	6a21      	ldr	r1, [r4, #32]
 801d1ca:	4628      	mov	r0, r5
 801d1cc:	47b0      	blx	r6
 801d1ce:	1c43      	adds	r3, r0, #1
 801d1d0:	89a3      	ldrh	r3, [r4, #12]
 801d1d2:	d106      	bne.n	801d1e2 <__sflush_r+0x66>
 801d1d4:	6829      	ldr	r1, [r5, #0]
 801d1d6:	291d      	cmp	r1, #29
 801d1d8:	d82c      	bhi.n	801d234 <__sflush_r+0xb8>
 801d1da:	4a2a      	ldr	r2, [pc, #168]	; (801d284 <__sflush_r+0x108>)
 801d1dc:	40ca      	lsrs	r2, r1
 801d1de:	07d6      	lsls	r6, r2, #31
 801d1e0:	d528      	bpl.n	801d234 <__sflush_r+0xb8>
 801d1e2:	2200      	movs	r2, #0
 801d1e4:	6062      	str	r2, [r4, #4]
 801d1e6:	04d9      	lsls	r1, r3, #19
 801d1e8:	6922      	ldr	r2, [r4, #16]
 801d1ea:	6022      	str	r2, [r4, #0]
 801d1ec:	d504      	bpl.n	801d1f8 <__sflush_r+0x7c>
 801d1ee:	1c42      	adds	r2, r0, #1
 801d1f0:	d101      	bne.n	801d1f6 <__sflush_r+0x7a>
 801d1f2:	682b      	ldr	r3, [r5, #0]
 801d1f4:	b903      	cbnz	r3, 801d1f8 <__sflush_r+0x7c>
 801d1f6:	6560      	str	r0, [r4, #84]	; 0x54
 801d1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d1fa:	602f      	str	r7, [r5, #0]
 801d1fc:	2900      	cmp	r1, #0
 801d1fe:	d0ca      	beq.n	801d196 <__sflush_r+0x1a>
 801d200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d204:	4299      	cmp	r1, r3
 801d206:	d002      	beq.n	801d20e <__sflush_r+0x92>
 801d208:	4628      	mov	r0, r5
 801d20a:	f7ff fd73 	bl	801ccf4 <_free_r>
 801d20e:	2000      	movs	r0, #0
 801d210:	6360      	str	r0, [r4, #52]	; 0x34
 801d212:	e7c1      	b.n	801d198 <__sflush_r+0x1c>
 801d214:	6a21      	ldr	r1, [r4, #32]
 801d216:	2301      	movs	r3, #1
 801d218:	4628      	mov	r0, r5
 801d21a:	47b0      	blx	r6
 801d21c:	1c41      	adds	r1, r0, #1
 801d21e:	d1c7      	bne.n	801d1b0 <__sflush_r+0x34>
 801d220:	682b      	ldr	r3, [r5, #0]
 801d222:	2b00      	cmp	r3, #0
 801d224:	d0c4      	beq.n	801d1b0 <__sflush_r+0x34>
 801d226:	2b1d      	cmp	r3, #29
 801d228:	d001      	beq.n	801d22e <__sflush_r+0xb2>
 801d22a:	2b16      	cmp	r3, #22
 801d22c:	d101      	bne.n	801d232 <__sflush_r+0xb6>
 801d22e:	602f      	str	r7, [r5, #0]
 801d230:	e7b1      	b.n	801d196 <__sflush_r+0x1a>
 801d232:	89a3      	ldrh	r3, [r4, #12]
 801d234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d238:	81a3      	strh	r3, [r4, #12]
 801d23a:	e7ad      	b.n	801d198 <__sflush_r+0x1c>
 801d23c:	690f      	ldr	r7, [r1, #16]
 801d23e:	2f00      	cmp	r7, #0
 801d240:	d0a9      	beq.n	801d196 <__sflush_r+0x1a>
 801d242:	0793      	lsls	r3, r2, #30
 801d244:	680e      	ldr	r6, [r1, #0]
 801d246:	bf08      	it	eq
 801d248:	694b      	ldreq	r3, [r1, #20]
 801d24a:	600f      	str	r7, [r1, #0]
 801d24c:	bf18      	it	ne
 801d24e:	2300      	movne	r3, #0
 801d250:	eba6 0807 	sub.w	r8, r6, r7
 801d254:	608b      	str	r3, [r1, #8]
 801d256:	f1b8 0f00 	cmp.w	r8, #0
 801d25a:	dd9c      	ble.n	801d196 <__sflush_r+0x1a>
 801d25c:	6a21      	ldr	r1, [r4, #32]
 801d25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d260:	4643      	mov	r3, r8
 801d262:	463a      	mov	r2, r7
 801d264:	4628      	mov	r0, r5
 801d266:	47b0      	blx	r6
 801d268:	2800      	cmp	r0, #0
 801d26a:	dc06      	bgt.n	801d27a <__sflush_r+0xfe>
 801d26c:	89a3      	ldrh	r3, [r4, #12]
 801d26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d272:	81a3      	strh	r3, [r4, #12]
 801d274:	f04f 30ff 	mov.w	r0, #4294967295
 801d278:	e78e      	b.n	801d198 <__sflush_r+0x1c>
 801d27a:	4407      	add	r7, r0
 801d27c:	eba8 0800 	sub.w	r8, r8, r0
 801d280:	e7e9      	b.n	801d256 <__sflush_r+0xda>
 801d282:	bf00      	nop
 801d284:	20400001 	.word	0x20400001

0801d288 <_fflush_r>:
 801d288:	b538      	push	{r3, r4, r5, lr}
 801d28a:	690b      	ldr	r3, [r1, #16]
 801d28c:	4605      	mov	r5, r0
 801d28e:	460c      	mov	r4, r1
 801d290:	b913      	cbnz	r3, 801d298 <_fflush_r+0x10>
 801d292:	2500      	movs	r5, #0
 801d294:	4628      	mov	r0, r5
 801d296:	bd38      	pop	{r3, r4, r5, pc}
 801d298:	b118      	cbz	r0, 801d2a2 <_fflush_r+0x1a>
 801d29a:	6983      	ldr	r3, [r0, #24]
 801d29c:	b90b      	cbnz	r3, 801d2a2 <_fflush_r+0x1a>
 801d29e:	f7ff fc21 	bl	801cae4 <__sinit>
 801d2a2:	4b14      	ldr	r3, [pc, #80]	; (801d2f4 <_fflush_r+0x6c>)
 801d2a4:	429c      	cmp	r4, r3
 801d2a6:	d11b      	bne.n	801d2e0 <_fflush_r+0x58>
 801d2a8:	686c      	ldr	r4, [r5, #4]
 801d2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d0ef      	beq.n	801d292 <_fflush_r+0xa>
 801d2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d2b4:	07d0      	lsls	r0, r2, #31
 801d2b6:	d404      	bmi.n	801d2c2 <_fflush_r+0x3a>
 801d2b8:	0599      	lsls	r1, r3, #22
 801d2ba:	d402      	bmi.n	801d2c2 <_fflush_r+0x3a>
 801d2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2be:	f7e8 faeb 	bl	8005898 <__retarget_lock_acquire_recursive>
 801d2c2:	4628      	mov	r0, r5
 801d2c4:	4621      	mov	r1, r4
 801d2c6:	f7ff ff59 	bl	801d17c <__sflush_r>
 801d2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2cc:	07da      	lsls	r2, r3, #31
 801d2ce:	4605      	mov	r5, r0
 801d2d0:	d4e0      	bmi.n	801d294 <_fflush_r+0xc>
 801d2d2:	89a3      	ldrh	r3, [r4, #12]
 801d2d4:	059b      	lsls	r3, r3, #22
 801d2d6:	d4dd      	bmi.n	801d294 <_fflush_r+0xc>
 801d2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2da:	f7e8 faf1 	bl	80058c0 <__retarget_lock_release_recursive>
 801d2de:	e7d9      	b.n	801d294 <_fflush_r+0xc>
 801d2e0:	4b05      	ldr	r3, [pc, #20]	; (801d2f8 <_fflush_r+0x70>)
 801d2e2:	429c      	cmp	r4, r3
 801d2e4:	d101      	bne.n	801d2ea <_fflush_r+0x62>
 801d2e6:	68ac      	ldr	r4, [r5, #8]
 801d2e8:	e7df      	b.n	801d2aa <_fflush_r+0x22>
 801d2ea:	4b04      	ldr	r3, [pc, #16]	; (801d2fc <_fflush_r+0x74>)
 801d2ec:	429c      	cmp	r4, r3
 801d2ee:	bf08      	it	eq
 801d2f0:	68ec      	ldreq	r4, [r5, #12]
 801d2f2:	e7da      	b.n	801d2aa <_fflush_r+0x22>
 801d2f4:	08021ab8 	.word	0x08021ab8
 801d2f8:	08021ad8 	.word	0x08021ad8
 801d2fc:	08021a98 	.word	0x08021a98

0801d300 <fiprintf>:
 801d300:	b40e      	push	{r1, r2, r3}
 801d302:	b503      	push	{r0, r1, lr}
 801d304:	4601      	mov	r1, r0
 801d306:	ab03      	add	r3, sp, #12
 801d308:	4805      	ldr	r0, [pc, #20]	; (801d320 <fiprintf+0x20>)
 801d30a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d30e:	6800      	ldr	r0, [r0, #0]
 801d310:	9301      	str	r3, [sp, #4]
 801d312:	f000 f9ab 	bl	801d66c <_vfiprintf_r>
 801d316:	b002      	add	sp, #8
 801d318:	f85d eb04 	ldr.w	lr, [sp], #4
 801d31c:	b003      	add	sp, #12
 801d31e:	4770      	bx	lr
 801d320:	200002f8 	.word	0x200002f8

0801d324 <_lseek_r>:
 801d324:	b538      	push	{r3, r4, r5, lr}
 801d326:	4d07      	ldr	r5, [pc, #28]	; (801d344 <_lseek_r+0x20>)
 801d328:	4604      	mov	r4, r0
 801d32a:	4608      	mov	r0, r1
 801d32c:	4611      	mov	r1, r2
 801d32e:	2200      	movs	r2, #0
 801d330:	602a      	str	r2, [r5, #0]
 801d332:	461a      	mov	r2, r3
 801d334:	f7e7 ff4e 	bl	80051d4 <_lseek>
 801d338:	1c43      	adds	r3, r0, #1
 801d33a:	d102      	bne.n	801d342 <_lseek_r+0x1e>
 801d33c:	682b      	ldr	r3, [r5, #0]
 801d33e:	b103      	cbz	r3, 801d342 <_lseek_r+0x1e>
 801d340:	6023      	str	r3, [r4, #0]
 801d342:	bd38      	pop	{r3, r4, r5, pc}
 801d344:	2000df38 	.word	0x2000df38

0801d348 <__malloc_lock>:
 801d348:	4801      	ldr	r0, [pc, #4]	; (801d350 <__malloc_lock+0x8>)
 801d34a:	f7e8 baa5 	b.w	8005898 <__retarget_lock_acquire_recursive>
 801d34e:	bf00      	nop
 801d350:	20000718 	.word	0x20000718

0801d354 <__malloc_unlock>:
 801d354:	4801      	ldr	r0, [pc, #4]	; (801d35c <__malloc_unlock+0x8>)
 801d356:	f7e8 bab3 	b.w	80058c0 <__retarget_lock_release_recursive>
 801d35a:	bf00      	nop
 801d35c:	20000718 	.word	0x20000718

0801d360 <__ssputs_r>:
 801d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d364:	688e      	ldr	r6, [r1, #8]
 801d366:	429e      	cmp	r6, r3
 801d368:	4682      	mov	sl, r0
 801d36a:	460c      	mov	r4, r1
 801d36c:	4690      	mov	r8, r2
 801d36e:	461f      	mov	r7, r3
 801d370:	d838      	bhi.n	801d3e4 <__ssputs_r+0x84>
 801d372:	898a      	ldrh	r2, [r1, #12]
 801d374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d378:	d032      	beq.n	801d3e0 <__ssputs_r+0x80>
 801d37a:	6825      	ldr	r5, [r4, #0]
 801d37c:	6909      	ldr	r1, [r1, #16]
 801d37e:	eba5 0901 	sub.w	r9, r5, r1
 801d382:	6965      	ldr	r5, [r4, #20]
 801d384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d38c:	3301      	adds	r3, #1
 801d38e:	444b      	add	r3, r9
 801d390:	106d      	asrs	r5, r5, #1
 801d392:	429d      	cmp	r5, r3
 801d394:	bf38      	it	cc
 801d396:	461d      	movcc	r5, r3
 801d398:	0553      	lsls	r3, r2, #21
 801d39a:	d531      	bpl.n	801d400 <__ssputs_r+0xa0>
 801d39c:	4629      	mov	r1, r5
 801d39e:	f7ff fcf9 	bl	801cd94 <_malloc_r>
 801d3a2:	4606      	mov	r6, r0
 801d3a4:	b950      	cbnz	r0, 801d3bc <__ssputs_r+0x5c>
 801d3a6:	230c      	movs	r3, #12
 801d3a8:	f8ca 3000 	str.w	r3, [sl]
 801d3ac:	89a3      	ldrh	r3, [r4, #12]
 801d3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3b2:	81a3      	strh	r3, [r4, #12]
 801d3b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3bc:	6921      	ldr	r1, [r4, #16]
 801d3be:	464a      	mov	r2, r9
 801d3c0:	f7ff fc68 	bl	801cc94 <memcpy>
 801d3c4:	89a3      	ldrh	r3, [r4, #12]
 801d3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d3ce:	81a3      	strh	r3, [r4, #12]
 801d3d0:	6126      	str	r6, [r4, #16]
 801d3d2:	6165      	str	r5, [r4, #20]
 801d3d4:	444e      	add	r6, r9
 801d3d6:	eba5 0509 	sub.w	r5, r5, r9
 801d3da:	6026      	str	r6, [r4, #0]
 801d3dc:	60a5      	str	r5, [r4, #8]
 801d3de:	463e      	mov	r6, r7
 801d3e0:	42be      	cmp	r6, r7
 801d3e2:	d900      	bls.n	801d3e6 <__ssputs_r+0x86>
 801d3e4:	463e      	mov	r6, r7
 801d3e6:	4632      	mov	r2, r6
 801d3e8:	6820      	ldr	r0, [r4, #0]
 801d3ea:	4641      	mov	r1, r8
 801d3ec:	f7ff fc60 	bl	801ccb0 <memmove>
 801d3f0:	68a3      	ldr	r3, [r4, #8]
 801d3f2:	6822      	ldr	r2, [r4, #0]
 801d3f4:	1b9b      	subs	r3, r3, r6
 801d3f6:	4432      	add	r2, r6
 801d3f8:	60a3      	str	r3, [r4, #8]
 801d3fa:	6022      	str	r2, [r4, #0]
 801d3fc:	2000      	movs	r0, #0
 801d3fe:	e7db      	b.n	801d3b8 <__ssputs_r+0x58>
 801d400:	462a      	mov	r2, r5
 801d402:	f000 fd35 	bl	801de70 <_realloc_r>
 801d406:	4606      	mov	r6, r0
 801d408:	2800      	cmp	r0, #0
 801d40a:	d1e1      	bne.n	801d3d0 <__ssputs_r+0x70>
 801d40c:	6921      	ldr	r1, [r4, #16]
 801d40e:	4650      	mov	r0, sl
 801d410:	f7ff fc70 	bl	801ccf4 <_free_r>
 801d414:	e7c7      	b.n	801d3a6 <__ssputs_r+0x46>
	...

0801d418 <_svfiprintf_r>:
 801d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d41c:	4698      	mov	r8, r3
 801d41e:	898b      	ldrh	r3, [r1, #12]
 801d420:	061b      	lsls	r3, r3, #24
 801d422:	b09d      	sub	sp, #116	; 0x74
 801d424:	4607      	mov	r7, r0
 801d426:	460d      	mov	r5, r1
 801d428:	4614      	mov	r4, r2
 801d42a:	d50e      	bpl.n	801d44a <_svfiprintf_r+0x32>
 801d42c:	690b      	ldr	r3, [r1, #16]
 801d42e:	b963      	cbnz	r3, 801d44a <_svfiprintf_r+0x32>
 801d430:	2140      	movs	r1, #64	; 0x40
 801d432:	f7ff fcaf 	bl	801cd94 <_malloc_r>
 801d436:	6028      	str	r0, [r5, #0]
 801d438:	6128      	str	r0, [r5, #16]
 801d43a:	b920      	cbnz	r0, 801d446 <_svfiprintf_r+0x2e>
 801d43c:	230c      	movs	r3, #12
 801d43e:	603b      	str	r3, [r7, #0]
 801d440:	f04f 30ff 	mov.w	r0, #4294967295
 801d444:	e0d1      	b.n	801d5ea <_svfiprintf_r+0x1d2>
 801d446:	2340      	movs	r3, #64	; 0x40
 801d448:	616b      	str	r3, [r5, #20]
 801d44a:	2300      	movs	r3, #0
 801d44c:	9309      	str	r3, [sp, #36]	; 0x24
 801d44e:	2320      	movs	r3, #32
 801d450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d454:	f8cd 800c 	str.w	r8, [sp, #12]
 801d458:	2330      	movs	r3, #48	; 0x30
 801d45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d604 <_svfiprintf_r+0x1ec>
 801d45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d462:	f04f 0901 	mov.w	r9, #1
 801d466:	4623      	mov	r3, r4
 801d468:	469a      	mov	sl, r3
 801d46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d46e:	b10a      	cbz	r2, 801d474 <_svfiprintf_r+0x5c>
 801d470:	2a25      	cmp	r2, #37	; 0x25
 801d472:	d1f9      	bne.n	801d468 <_svfiprintf_r+0x50>
 801d474:	ebba 0b04 	subs.w	fp, sl, r4
 801d478:	d00b      	beq.n	801d492 <_svfiprintf_r+0x7a>
 801d47a:	465b      	mov	r3, fp
 801d47c:	4622      	mov	r2, r4
 801d47e:	4629      	mov	r1, r5
 801d480:	4638      	mov	r0, r7
 801d482:	f7ff ff6d 	bl	801d360 <__ssputs_r>
 801d486:	3001      	adds	r0, #1
 801d488:	f000 80aa 	beq.w	801d5e0 <_svfiprintf_r+0x1c8>
 801d48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d48e:	445a      	add	r2, fp
 801d490:	9209      	str	r2, [sp, #36]	; 0x24
 801d492:	f89a 3000 	ldrb.w	r3, [sl]
 801d496:	2b00      	cmp	r3, #0
 801d498:	f000 80a2 	beq.w	801d5e0 <_svfiprintf_r+0x1c8>
 801d49c:	2300      	movs	r3, #0
 801d49e:	f04f 32ff 	mov.w	r2, #4294967295
 801d4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4a6:	f10a 0a01 	add.w	sl, sl, #1
 801d4aa:	9304      	str	r3, [sp, #16]
 801d4ac:	9307      	str	r3, [sp, #28]
 801d4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d4b2:	931a      	str	r3, [sp, #104]	; 0x68
 801d4b4:	4654      	mov	r4, sl
 801d4b6:	2205      	movs	r2, #5
 801d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4bc:	4851      	ldr	r0, [pc, #324]	; (801d604 <_svfiprintf_r+0x1ec>)
 801d4be:	f7e2 fe8f 	bl	80001e0 <memchr>
 801d4c2:	9a04      	ldr	r2, [sp, #16]
 801d4c4:	b9d8      	cbnz	r0, 801d4fe <_svfiprintf_r+0xe6>
 801d4c6:	06d0      	lsls	r0, r2, #27
 801d4c8:	bf44      	itt	mi
 801d4ca:	2320      	movmi	r3, #32
 801d4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4d0:	0711      	lsls	r1, r2, #28
 801d4d2:	bf44      	itt	mi
 801d4d4:	232b      	movmi	r3, #43	; 0x2b
 801d4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4da:	f89a 3000 	ldrb.w	r3, [sl]
 801d4de:	2b2a      	cmp	r3, #42	; 0x2a
 801d4e0:	d015      	beq.n	801d50e <_svfiprintf_r+0xf6>
 801d4e2:	9a07      	ldr	r2, [sp, #28]
 801d4e4:	4654      	mov	r4, sl
 801d4e6:	2000      	movs	r0, #0
 801d4e8:	f04f 0c0a 	mov.w	ip, #10
 801d4ec:	4621      	mov	r1, r4
 801d4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4f2:	3b30      	subs	r3, #48	; 0x30
 801d4f4:	2b09      	cmp	r3, #9
 801d4f6:	d94e      	bls.n	801d596 <_svfiprintf_r+0x17e>
 801d4f8:	b1b0      	cbz	r0, 801d528 <_svfiprintf_r+0x110>
 801d4fa:	9207      	str	r2, [sp, #28]
 801d4fc:	e014      	b.n	801d528 <_svfiprintf_r+0x110>
 801d4fe:	eba0 0308 	sub.w	r3, r0, r8
 801d502:	fa09 f303 	lsl.w	r3, r9, r3
 801d506:	4313      	orrs	r3, r2
 801d508:	9304      	str	r3, [sp, #16]
 801d50a:	46a2      	mov	sl, r4
 801d50c:	e7d2      	b.n	801d4b4 <_svfiprintf_r+0x9c>
 801d50e:	9b03      	ldr	r3, [sp, #12]
 801d510:	1d19      	adds	r1, r3, #4
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	9103      	str	r1, [sp, #12]
 801d516:	2b00      	cmp	r3, #0
 801d518:	bfbb      	ittet	lt
 801d51a:	425b      	neglt	r3, r3
 801d51c:	f042 0202 	orrlt.w	r2, r2, #2
 801d520:	9307      	strge	r3, [sp, #28]
 801d522:	9307      	strlt	r3, [sp, #28]
 801d524:	bfb8      	it	lt
 801d526:	9204      	strlt	r2, [sp, #16]
 801d528:	7823      	ldrb	r3, [r4, #0]
 801d52a:	2b2e      	cmp	r3, #46	; 0x2e
 801d52c:	d10c      	bne.n	801d548 <_svfiprintf_r+0x130>
 801d52e:	7863      	ldrb	r3, [r4, #1]
 801d530:	2b2a      	cmp	r3, #42	; 0x2a
 801d532:	d135      	bne.n	801d5a0 <_svfiprintf_r+0x188>
 801d534:	9b03      	ldr	r3, [sp, #12]
 801d536:	1d1a      	adds	r2, r3, #4
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	9203      	str	r2, [sp, #12]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	bfb8      	it	lt
 801d540:	f04f 33ff 	movlt.w	r3, #4294967295
 801d544:	3402      	adds	r4, #2
 801d546:	9305      	str	r3, [sp, #20]
 801d548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d614 <_svfiprintf_r+0x1fc>
 801d54c:	7821      	ldrb	r1, [r4, #0]
 801d54e:	2203      	movs	r2, #3
 801d550:	4650      	mov	r0, sl
 801d552:	f7e2 fe45 	bl	80001e0 <memchr>
 801d556:	b140      	cbz	r0, 801d56a <_svfiprintf_r+0x152>
 801d558:	2340      	movs	r3, #64	; 0x40
 801d55a:	eba0 000a 	sub.w	r0, r0, sl
 801d55e:	fa03 f000 	lsl.w	r0, r3, r0
 801d562:	9b04      	ldr	r3, [sp, #16]
 801d564:	4303      	orrs	r3, r0
 801d566:	3401      	adds	r4, #1
 801d568:	9304      	str	r3, [sp, #16]
 801d56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d56e:	4826      	ldr	r0, [pc, #152]	; (801d608 <_svfiprintf_r+0x1f0>)
 801d570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d574:	2206      	movs	r2, #6
 801d576:	f7e2 fe33 	bl	80001e0 <memchr>
 801d57a:	2800      	cmp	r0, #0
 801d57c:	d038      	beq.n	801d5f0 <_svfiprintf_r+0x1d8>
 801d57e:	4b23      	ldr	r3, [pc, #140]	; (801d60c <_svfiprintf_r+0x1f4>)
 801d580:	bb1b      	cbnz	r3, 801d5ca <_svfiprintf_r+0x1b2>
 801d582:	9b03      	ldr	r3, [sp, #12]
 801d584:	3307      	adds	r3, #7
 801d586:	f023 0307 	bic.w	r3, r3, #7
 801d58a:	3308      	adds	r3, #8
 801d58c:	9303      	str	r3, [sp, #12]
 801d58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d590:	4433      	add	r3, r6
 801d592:	9309      	str	r3, [sp, #36]	; 0x24
 801d594:	e767      	b.n	801d466 <_svfiprintf_r+0x4e>
 801d596:	fb0c 3202 	mla	r2, ip, r2, r3
 801d59a:	460c      	mov	r4, r1
 801d59c:	2001      	movs	r0, #1
 801d59e:	e7a5      	b.n	801d4ec <_svfiprintf_r+0xd4>
 801d5a0:	2300      	movs	r3, #0
 801d5a2:	3401      	adds	r4, #1
 801d5a4:	9305      	str	r3, [sp, #20]
 801d5a6:	4619      	mov	r1, r3
 801d5a8:	f04f 0c0a 	mov.w	ip, #10
 801d5ac:	4620      	mov	r0, r4
 801d5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5b2:	3a30      	subs	r2, #48	; 0x30
 801d5b4:	2a09      	cmp	r2, #9
 801d5b6:	d903      	bls.n	801d5c0 <_svfiprintf_r+0x1a8>
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d0c5      	beq.n	801d548 <_svfiprintf_r+0x130>
 801d5bc:	9105      	str	r1, [sp, #20]
 801d5be:	e7c3      	b.n	801d548 <_svfiprintf_r+0x130>
 801d5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 801d5c4:	4604      	mov	r4, r0
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	e7f0      	b.n	801d5ac <_svfiprintf_r+0x194>
 801d5ca:	ab03      	add	r3, sp, #12
 801d5cc:	9300      	str	r3, [sp, #0]
 801d5ce:	462a      	mov	r2, r5
 801d5d0:	4b0f      	ldr	r3, [pc, #60]	; (801d610 <_svfiprintf_r+0x1f8>)
 801d5d2:	a904      	add	r1, sp, #16
 801d5d4:	4638      	mov	r0, r7
 801d5d6:	f3af 8000 	nop.w
 801d5da:	1c42      	adds	r2, r0, #1
 801d5dc:	4606      	mov	r6, r0
 801d5de:	d1d6      	bne.n	801d58e <_svfiprintf_r+0x176>
 801d5e0:	89ab      	ldrh	r3, [r5, #12]
 801d5e2:	065b      	lsls	r3, r3, #25
 801d5e4:	f53f af2c 	bmi.w	801d440 <_svfiprintf_r+0x28>
 801d5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d5ea:	b01d      	add	sp, #116	; 0x74
 801d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5f0:	ab03      	add	r3, sp, #12
 801d5f2:	9300      	str	r3, [sp, #0]
 801d5f4:	462a      	mov	r2, r5
 801d5f6:	4b06      	ldr	r3, [pc, #24]	; (801d610 <_svfiprintf_r+0x1f8>)
 801d5f8:	a904      	add	r1, sp, #16
 801d5fa:	4638      	mov	r0, r7
 801d5fc:	f000 f9d4 	bl	801d9a8 <_printf_i>
 801d600:	e7eb      	b.n	801d5da <_svfiprintf_r+0x1c2>
 801d602:	bf00      	nop
 801d604:	08021bae 	.word	0x08021bae
 801d608:	08021bb8 	.word	0x08021bb8
 801d60c:	00000000 	.word	0x00000000
 801d610:	0801d361 	.word	0x0801d361
 801d614:	08021bb4 	.word	0x08021bb4

0801d618 <__sfputc_r>:
 801d618:	6893      	ldr	r3, [r2, #8]
 801d61a:	3b01      	subs	r3, #1
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	b410      	push	{r4}
 801d620:	6093      	str	r3, [r2, #8]
 801d622:	da08      	bge.n	801d636 <__sfputc_r+0x1e>
 801d624:	6994      	ldr	r4, [r2, #24]
 801d626:	42a3      	cmp	r3, r4
 801d628:	db01      	blt.n	801d62e <__sfputc_r+0x16>
 801d62a:	290a      	cmp	r1, #10
 801d62c:	d103      	bne.n	801d636 <__sfputc_r+0x1e>
 801d62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d632:	f000 baf1 	b.w	801dc18 <__swbuf_r>
 801d636:	6813      	ldr	r3, [r2, #0]
 801d638:	1c58      	adds	r0, r3, #1
 801d63a:	6010      	str	r0, [r2, #0]
 801d63c:	7019      	strb	r1, [r3, #0]
 801d63e:	4608      	mov	r0, r1
 801d640:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d644:	4770      	bx	lr

0801d646 <__sfputs_r>:
 801d646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d648:	4606      	mov	r6, r0
 801d64a:	460f      	mov	r7, r1
 801d64c:	4614      	mov	r4, r2
 801d64e:	18d5      	adds	r5, r2, r3
 801d650:	42ac      	cmp	r4, r5
 801d652:	d101      	bne.n	801d658 <__sfputs_r+0x12>
 801d654:	2000      	movs	r0, #0
 801d656:	e007      	b.n	801d668 <__sfputs_r+0x22>
 801d658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d65c:	463a      	mov	r2, r7
 801d65e:	4630      	mov	r0, r6
 801d660:	f7ff ffda 	bl	801d618 <__sfputc_r>
 801d664:	1c43      	adds	r3, r0, #1
 801d666:	d1f3      	bne.n	801d650 <__sfputs_r+0xa>
 801d668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d66c <_vfiprintf_r>:
 801d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d670:	460d      	mov	r5, r1
 801d672:	b09d      	sub	sp, #116	; 0x74
 801d674:	4614      	mov	r4, r2
 801d676:	4698      	mov	r8, r3
 801d678:	4606      	mov	r6, r0
 801d67a:	b118      	cbz	r0, 801d684 <_vfiprintf_r+0x18>
 801d67c:	6983      	ldr	r3, [r0, #24]
 801d67e:	b90b      	cbnz	r3, 801d684 <_vfiprintf_r+0x18>
 801d680:	f7ff fa30 	bl	801cae4 <__sinit>
 801d684:	4b89      	ldr	r3, [pc, #548]	; (801d8ac <_vfiprintf_r+0x240>)
 801d686:	429d      	cmp	r5, r3
 801d688:	d11b      	bne.n	801d6c2 <_vfiprintf_r+0x56>
 801d68a:	6875      	ldr	r5, [r6, #4]
 801d68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d68e:	07d9      	lsls	r1, r3, #31
 801d690:	d405      	bmi.n	801d69e <_vfiprintf_r+0x32>
 801d692:	89ab      	ldrh	r3, [r5, #12]
 801d694:	059a      	lsls	r2, r3, #22
 801d696:	d402      	bmi.n	801d69e <_vfiprintf_r+0x32>
 801d698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d69a:	f7e8 f8fd 	bl	8005898 <__retarget_lock_acquire_recursive>
 801d69e:	89ab      	ldrh	r3, [r5, #12]
 801d6a0:	071b      	lsls	r3, r3, #28
 801d6a2:	d501      	bpl.n	801d6a8 <_vfiprintf_r+0x3c>
 801d6a4:	692b      	ldr	r3, [r5, #16]
 801d6a6:	b9eb      	cbnz	r3, 801d6e4 <_vfiprintf_r+0x78>
 801d6a8:	4629      	mov	r1, r5
 801d6aa:	4630      	mov	r0, r6
 801d6ac:	f000 fb06 	bl	801dcbc <__swsetup_r>
 801d6b0:	b1c0      	cbz	r0, 801d6e4 <_vfiprintf_r+0x78>
 801d6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d6b4:	07dc      	lsls	r4, r3, #31
 801d6b6:	d50e      	bpl.n	801d6d6 <_vfiprintf_r+0x6a>
 801d6b8:	f04f 30ff 	mov.w	r0, #4294967295
 801d6bc:	b01d      	add	sp, #116	; 0x74
 801d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6c2:	4b7b      	ldr	r3, [pc, #492]	; (801d8b0 <_vfiprintf_r+0x244>)
 801d6c4:	429d      	cmp	r5, r3
 801d6c6:	d101      	bne.n	801d6cc <_vfiprintf_r+0x60>
 801d6c8:	68b5      	ldr	r5, [r6, #8]
 801d6ca:	e7df      	b.n	801d68c <_vfiprintf_r+0x20>
 801d6cc:	4b79      	ldr	r3, [pc, #484]	; (801d8b4 <_vfiprintf_r+0x248>)
 801d6ce:	429d      	cmp	r5, r3
 801d6d0:	bf08      	it	eq
 801d6d2:	68f5      	ldreq	r5, [r6, #12]
 801d6d4:	e7da      	b.n	801d68c <_vfiprintf_r+0x20>
 801d6d6:	89ab      	ldrh	r3, [r5, #12]
 801d6d8:	0598      	lsls	r0, r3, #22
 801d6da:	d4ed      	bmi.n	801d6b8 <_vfiprintf_r+0x4c>
 801d6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d6de:	f7e8 f8ef 	bl	80058c0 <__retarget_lock_release_recursive>
 801d6e2:	e7e9      	b.n	801d6b8 <_vfiprintf_r+0x4c>
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	9309      	str	r3, [sp, #36]	; 0x24
 801d6e8:	2320      	movs	r3, #32
 801d6ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801d6f2:	2330      	movs	r3, #48	; 0x30
 801d6f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d8b8 <_vfiprintf_r+0x24c>
 801d6f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d6fc:	f04f 0901 	mov.w	r9, #1
 801d700:	4623      	mov	r3, r4
 801d702:	469a      	mov	sl, r3
 801d704:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d708:	b10a      	cbz	r2, 801d70e <_vfiprintf_r+0xa2>
 801d70a:	2a25      	cmp	r2, #37	; 0x25
 801d70c:	d1f9      	bne.n	801d702 <_vfiprintf_r+0x96>
 801d70e:	ebba 0b04 	subs.w	fp, sl, r4
 801d712:	d00b      	beq.n	801d72c <_vfiprintf_r+0xc0>
 801d714:	465b      	mov	r3, fp
 801d716:	4622      	mov	r2, r4
 801d718:	4629      	mov	r1, r5
 801d71a:	4630      	mov	r0, r6
 801d71c:	f7ff ff93 	bl	801d646 <__sfputs_r>
 801d720:	3001      	adds	r0, #1
 801d722:	f000 80aa 	beq.w	801d87a <_vfiprintf_r+0x20e>
 801d726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d728:	445a      	add	r2, fp
 801d72a:	9209      	str	r2, [sp, #36]	; 0x24
 801d72c:	f89a 3000 	ldrb.w	r3, [sl]
 801d730:	2b00      	cmp	r3, #0
 801d732:	f000 80a2 	beq.w	801d87a <_vfiprintf_r+0x20e>
 801d736:	2300      	movs	r3, #0
 801d738:	f04f 32ff 	mov.w	r2, #4294967295
 801d73c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d740:	f10a 0a01 	add.w	sl, sl, #1
 801d744:	9304      	str	r3, [sp, #16]
 801d746:	9307      	str	r3, [sp, #28]
 801d748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d74c:	931a      	str	r3, [sp, #104]	; 0x68
 801d74e:	4654      	mov	r4, sl
 801d750:	2205      	movs	r2, #5
 801d752:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d756:	4858      	ldr	r0, [pc, #352]	; (801d8b8 <_vfiprintf_r+0x24c>)
 801d758:	f7e2 fd42 	bl	80001e0 <memchr>
 801d75c:	9a04      	ldr	r2, [sp, #16]
 801d75e:	b9d8      	cbnz	r0, 801d798 <_vfiprintf_r+0x12c>
 801d760:	06d1      	lsls	r1, r2, #27
 801d762:	bf44      	itt	mi
 801d764:	2320      	movmi	r3, #32
 801d766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d76a:	0713      	lsls	r3, r2, #28
 801d76c:	bf44      	itt	mi
 801d76e:	232b      	movmi	r3, #43	; 0x2b
 801d770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d774:	f89a 3000 	ldrb.w	r3, [sl]
 801d778:	2b2a      	cmp	r3, #42	; 0x2a
 801d77a:	d015      	beq.n	801d7a8 <_vfiprintf_r+0x13c>
 801d77c:	9a07      	ldr	r2, [sp, #28]
 801d77e:	4654      	mov	r4, sl
 801d780:	2000      	movs	r0, #0
 801d782:	f04f 0c0a 	mov.w	ip, #10
 801d786:	4621      	mov	r1, r4
 801d788:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d78c:	3b30      	subs	r3, #48	; 0x30
 801d78e:	2b09      	cmp	r3, #9
 801d790:	d94e      	bls.n	801d830 <_vfiprintf_r+0x1c4>
 801d792:	b1b0      	cbz	r0, 801d7c2 <_vfiprintf_r+0x156>
 801d794:	9207      	str	r2, [sp, #28]
 801d796:	e014      	b.n	801d7c2 <_vfiprintf_r+0x156>
 801d798:	eba0 0308 	sub.w	r3, r0, r8
 801d79c:	fa09 f303 	lsl.w	r3, r9, r3
 801d7a0:	4313      	orrs	r3, r2
 801d7a2:	9304      	str	r3, [sp, #16]
 801d7a4:	46a2      	mov	sl, r4
 801d7a6:	e7d2      	b.n	801d74e <_vfiprintf_r+0xe2>
 801d7a8:	9b03      	ldr	r3, [sp, #12]
 801d7aa:	1d19      	adds	r1, r3, #4
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	9103      	str	r1, [sp, #12]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	bfbb      	ittet	lt
 801d7b4:	425b      	neglt	r3, r3
 801d7b6:	f042 0202 	orrlt.w	r2, r2, #2
 801d7ba:	9307      	strge	r3, [sp, #28]
 801d7bc:	9307      	strlt	r3, [sp, #28]
 801d7be:	bfb8      	it	lt
 801d7c0:	9204      	strlt	r2, [sp, #16]
 801d7c2:	7823      	ldrb	r3, [r4, #0]
 801d7c4:	2b2e      	cmp	r3, #46	; 0x2e
 801d7c6:	d10c      	bne.n	801d7e2 <_vfiprintf_r+0x176>
 801d7c8:	7863      	ldrb	r3, [r4, #1]
 801d7ca:	2b2a      	cmp	r3, #42	; 0x2a
 801d7cc:	d135      	bne.n	801d83a <_vfiprintf_r+0x1ce>
 801d7ce:	9b03      	ldr	r3, [sp, #12]
 801d7d0:	1d1a      	adds	r2, r3, #4
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	9203      	str	r2, [sp, #12]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	bfb8      	it	lt
 801d7da:	f04f 33ff 	movlt.w	r3, #4294967295
 801d7de:	3402      	adds	r4, #2
 801d7e0:	9305      	str	r3, [sp, #20]
 801d7e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d8c8 <_vfiprintf_r+0x25c>
 801d7e6:	7821      	ldrb	r1, [r4, #0]
 801d7e8:	2203      	movs	r2, #3
 801d7ea:	4650      	mov	r0, sl
 801d7ec:	f7e2 fcf8 	bl	80001e0 <memchr>
 801d7f0:	b140      	cbz	r0, 801d804 <_vfiprintf_r+0x198>
 801d7f2:	2340      	movs	r3, #64	; 0x40
 801d7f4:	eba0 000a 	sub.w	r0, r0, sl
 801d7f8:	fa03 f000 	lsl.w	r0, r3, r0
 801d7fc:	9b04      	ldr	r3, [sp, #16]
 801d7fe:	4303      	orrs	r3, r0
 801d800:	3401      	adds	r4, #1
 801d802:	9304      	str	r3, [sp, #16]
 801d804:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d808:	482c      	ldr	r0, [pc, #176]	; (801d8bc <_vfiprintf_r+0x250>)
 801d80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d80e:	2206      	movs	r2, #6
 801d810:	f7e2 fce6 	bl	80001e0 <memchr>
 801d814:	2800      	cmp	r0, #0
 801d816:	d03f      	beq.n	801d898 <_vfiprintf_r+0x22c>
 801d818:	4b29      	ldr	r3, [pc, #164]	; (801d8c0 <_vfiprintf_r+0x254>)
 801d81a:	bb1b      	cbnz	r3, 801d864 <_vfiprintf_r+0x1f8>
 801d81c:	9b03      	ldr	r3, [sp, #12]
 801d81e:	3307      	adds	r3, #7
 801d820:	f023 0307 	bic.w	r3, r3, #7
 801d824:	3308      	adds	r3, #8
 801d826:	9303      	str	r3, [sp, #12]
 801d828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d82a:	443b      	add	r3, r7
 801d82c:	9309      	str	r3, [sp, #36]	; 0x24
 801d82e:	e767      	b.n	801d700 <_vfiprintf_r+0x94>
 801d830:	fb0c 3202 	mla	r2, ip, r2, r3
 801d834:	460c      	mov	r4, r1
 801d836:	2001      	movs	r0, #1
 801d838:	e7a5      	b.n	801d786 <_vfiprintf_r+0x11a>
 801d83a:	2300      	movs	r3, #0
 801d83c:	3401      	adds	r4, #1
 801d83e:	9305      	str	r3, [sp, #20]
 801d840:	4619      	mov	r1, r3
 801d842:	f04f 0c0a 	mov.w	ip, #10
 801d846:	4620      	mov	r0, r4
 801d848:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d84c:	3a30      	subs	r2, #48	; 0x30
 801d84e:	2a09      	cmp	r2, #9
 801d850:	d903      	bls.n	801d85a <_vfiprintf_r+0x1ee>
 801d852:	2b00      	cmp	r3, #0
 801d854:	d0c5      	beq.n	801d7e2 <_vfiprintf_r+0x176>
 801d856:	9105      	str	r1, [sp, #20]
 801d858:	e7c3      	b.n	801d7e2 <_vfiprintf_r+0x176>
 801d85a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d85e:	4604      	mov	r4, r0
 801d860:	2301      	movs	r3, #1
 801d862:	e7f0      	b.n	801d846 <_vfiprintf_r+0x1da>
 801d864:	ab03      	add	r3, sp, #12
 801d866:	9300      	str	r3, [sp, #0]
 801d868:	462a      	mov	r2, r5
 801d86a:	4b16      	ldr	r3, [pc, #88]	; (801d8c4 <_vfiprintf_r+0x258>)
 801d86c:	a904      	add	r1, sp, #16
 801d86e:	4630      	mov	r0, r6
 801d870:	f3af 8000 	nop.w
 801d874:	4607      	mov	r7, r0
 801d876:	1c78      	adds	r0, r7, #1
 801d878:	d1d6      	bne.n	801d828 <_vfiprintf_r+0x1bc>
 801d87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d87c:	07d9      	lsls	r1, r3, #31
 801d87e:	d405      	bmi.n	801d88c <_vfiprintf_r+0x220>
 801d880:	89ab      	ldrh	r3, [r5, #12]
 801d882:	059a      	lsls	r2, r3, #22
 801d884:	d402      	bmi.n	801d88c <_vfiprintf_r+0x220>
 801d886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d888:	f7e8 f81a 	bl	80058c0 <__retarget_lock_release_recursive>
 801d88c:	89ab      	ldrh	r3, [r5, #12]
 801d88e:	065b      	lsls	r3, r3, #25
 801d890:	f53f af12 	bmi.w	801d6b8 <_vfiprintf_r+0x4c>
 801d894:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d896:	e711      	b.n	801d6bc <_vfiprintf_r+0x50>
 801d898:	ab03      	add	r3, sp, #12
 801d89a:	9300      	str	r3, [sp, #0]
 801d89c:	462a      	mov	r2, r5
 801d89e:	4b09      	ldr	r3, [pc, #36]	; (801d8c4 <_vfiprintf_r+0x258>)
 801d8a0:	a904      	add	r1, sp, #16
 801d8a2:	4630      	mov	r0, r6
 801d8a4:	f000 f880 	bl	801d9a8 <_printf_i>
 801d8a8:	e7e4      	b.n	801d874 <_vfiprintf_r+0x208>
 801d8aa:	bf00      	nop
 801d8ac:	08021ab8 	.word	0x08021ab8
 801d8b0:	08021ad8 	.word	0x08021ad8
 801d8b4:	08021a98 	.word	0x08021a98
 801d8b8:	08021bae 	.word	0x08021bae
 801d8bc:	08021bb8 	.word	0x08021bb8
 801d8c0:	00000000 	.word	0x00000000
 801d8c4:	0801d647 	.word	0x0801d647
 801d8c8:	08021bb4 	.word	0x08021bb4

0801d8cc <_printf_common>:
 801d8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8d0:	4616      	mov	r6, r2
 801d8d2:	4699      	mov	r9, r3
 801d8d4:	688a      	ldr	r2, [r1, #8]
 801d8d6:	690b      	ldr	r3, [r1, #16]
 801d8d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d8dc:	4293      	cmp	r3, r2
 801d8de:	bfb8      	it	lt
 801d8e0:	4613      	movlt	r3, r2
 801d8e2:	6033      	str	r3, [r6, #0]
 801d8e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d8e8:	4607      	mov	r7, r0
 801d8ea:	460c      	mov	r4, r1
 801d8ec:	b10a      	cbz	r2, 801d8f2 <_printf_common+0x26>
 801d8ee:	3301      	adds	r3, #1
 801d8f0:	6033      	str	r3, [r6, #0]
 801d8f2:	6823      	ldr	r3, [r4, #0]
 801d8f4:	0699      	lsls	r1, r3, #26
 801d8f6:	bf42      	ittt	mi
 801d8f8:	6833      	ldrmi	r3, [r6, #0]
 801d8fa:	3302      	addmi	r3, #2
 801d8fc:	6033      	strmi	r3, [r6, #0]
 801d8fe:	6825      	ldr	r5, [r4, #0]
 801d900:	f015 0506 	ands.w	r5, r5, #6
 801d904:	d106      	bne.n	801d914 <_printf_common+0x48>
 801d906:	f104 0a19 	add.w	sl, r4, #25
 801d90a:	68e3      	ldr	r3, [r4, #12]
 801d90c:	6832      	ldr	r2, [r6, #0]
 801d90e:	1a9b      	subs	r3, r3, r2
 801d910:	42ab      	cmp	r3, r5
 801d912:	dc26      	bgt.n	801d962 <_printf_common+0x96>
 801d914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d918:	1e13      	subs	r3, r2, #0
 801d91a:	6822      	ldr	r2, [r4, #0]
 801d91c:	bf18      	it	ne
 801d91e:	2301      	movne	r3, #1
 801d920:	0692      	lsls	r2, r2, #26
 801d922:	d42b      	bmi.n	801d97c <_printf_common+0xb0>
 801d924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d928:	4649      	mov	r1, r9
 801d92a:	4638      	mov	r0, r7
 801d92c:	47c0      	blx	r8
 801d92e:	3001      	adds	r0, #1
 801d930:	d01e      	beq.n	801d970 <_printf_common+0xa4>
 801d932:	6823      	ldr	r3, [r4, #0]
 801d934:	68e5      	ldr	r5, [r4, #12]
 801d936:	6832      	ldr	r2, [r6, #0]
 801d938:	f003 0306 	and.w	r3, r3, #6
 801d93c:	2b04      	cmp	r3, #4
 801d93e:	bf08      	it	eq
 801d940:	1aad      	subeq	r5, r5, r2
 801d942:	68a3      	ldr	r3, [r4, #8]
 801d944:	6922      	ldr	r2, [r4, #16]
 801d946:	bf0c      	ite	eq
 801d948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d94c:	2500      	movne	r5, #0
 801d94e:	4293      	cmp	r3, r2
 801d950:	bfc4      	itt	gt
 801d952:	1a9b      	subgt	r3, r3, r2
 801d954:	18ed      	addgt	r5, r5, r3
 801d956:	2600      	movs	r6, #0
 801d958:	341a      	adds	r4, #26
 801d95a:	42b5      	cmp	r5, r6
 801d95c:	d11a      	bne.n	801d994 <_printf_common+0xc8>
 801d95e:	2000      	movs	r0, #0
 801d960:	e008      	b.n	801d974 <_printf_common+0xa8>
 801d962:	2301      	movs	r3, #1
 801d964:	4652      	mov	r2, sl
 801d966:	4649      	mov	r1, r9
 801d968:	4638      	mov	r0, r7
 801d96a:	47c0      	blx	r8
 801d96c:	3001      	adds	r0, #1
 801d96e:	d103      	bne.n	801d978 <_printf_common+0xac>
 801d970:	f04f 30ff 	mov.w	r0, #4294967295
 801d974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d978:	3501      	adds	r5, #1
 801d97a:	e7c6      	b.n	801d90a <_printf_common+0x3e>
 801d97c:	18e1      	adds	r1, r4, r3
 801d97e:	1c5a      	adds	r2, r3, #1
 801d980:	2030      	movs	r0, #48	; 0x30
 801d982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d986:	4422      	add	r2, r4
 801d988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d98c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d990:	3302      	adds	r3, #2
 801d992:	e7c7      	b.n	801d924 <_printf_common+0x58>
 801d994:	2301      	movs	r3, #1
 801d996:	4622      	mov	r2, r4
 801d998:	4649      	mov	r1, r9
 801d99a:	4638      	mov	r0, r7
 801d99c:	47c0      	blx	r8
 801d99e:	3001      	adds	r0, #1
 801d9a0:	d0e6      	beq.n	801d970 <_printf_common+0xa4>
 801d9a2:	3601      	adds	r6, #1
 801d9a4:	e7d9      	b.n	801d95a <_printf_common+0x8e>
	...

0801d9a8 <_printf_i>:
 801d9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d9ac:	460c      	mov	r4, r1
 801d9ae:	4691      	mov	r9, r2
 801d9b0:	7e27      	ldrb	r7, [r4, #24]
 801d9b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d9b4:	2f78      	cmp	r7, #120	; 0x78
 801d9b6:	4680      	mov	r8, r0
 801d9b8:	469a      	mov	sl, r3
 801d9ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d9be:	d807      	bhi.n	801d9d0 <_printf_i+0x28>
 801d9c0:	2f62      	cmp	r7, #98	; 0x62
 801d9c2:	d80a      	bhi.n	801d9da <_printf_i+0x32>
 801d9c4:	2f00      	cmp	r7, #0
 801d9c6:	f000 80d8 	beq.w	801db7a <_printf_i+0x1d2>
 801d9ca:	2f58      	cmp	r7, #88	; 0x58
 801d9cc:	f000 80a3 	beq.w	801db16 <_printf_i+0x16e>
 801d9d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d9d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d9d8:	e03a      	b.n	801da50 <_printf_i+0xa8>
 801d9da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d9de:	2b15      	cmp	r3, #21
 801d9e0:	d8f6      	bhi.n	801d9d0 <_printf_i+0x28>
 801d9e2:	a001      	add	r0, pc, #4	; (adr r0, 801d9e8 <_printf_i+0x40>)
 801d9e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d9e8:	0801da41 	.word	0x0801da41
 801d9ec:	0801da55 	.word	0x0801da55
 801d9f0:	0801d9d1 	.word	0x0801d9d1
 801d9f4:	0801d9d1 	.word	0x0801d9d1
 801d9f8:	0801d9d1 	.word	0x0801d9d1
 801d9fc:	0801d9d1 	.word	0x0801d9d1
 801da00:	0801da55 	.word	0x0801da55
 801da04:	0801d9d1 	.word	0x0801d9d1
 801da08:	0801d9d1 	.word	0x0801d9d1
 801da0c:	0801d9d1 	.word	0x0801d9d1
 801da10:	0801d9d1 	.word	0x0801d9d1
 801da14:	0801db61 	.word	0x0801db61
 801da18:	0801da85 	.word	0x0801da85
 801da1c:	0801db43 	.word	0x0801db43
 801da20:	0801d9d1 	.word	0x0801d9d1
 801da24:	0801d9d1 	.word	0x0801d9d1
 801da28:	0801db83 	.word	0x0801db83
 801da2c:	0801d9d1 	.word	0x0801d9d1
 801da30:	0801da85 	.word	0x0801da85
 801da34:	0801d9d1 	.word	0x0801d9d1
 801da38:	0801d9d1 	.word	0x0801d9d1
 801da3c:	0801db4b 	.word	0x0801db4b
 801da40:	680b      	ldr	r3, [r1, #0]
 801da42:	1d1a      	adds	r2, r3, #4
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	600a      	str	r2, [r1, #0]
 801da48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801da4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801da50:	2301      	movs	r3, #1
 801da52:	e0a3      	b.n	801db9c <_printf_i+0x1f4>
 801da54:	6825      	ldr	r5, [r4, #0]
 801da56:	6808      	ldr	r0, [r1, #0]
 801da58:	062e      	lsls	r6, r5, #24
 801da5a:	f100 0304 	add.w	r3, r0, #4
 801da5e:	d50a      	bpl.n	801da76 <_printf_i+0xce>
 801da60:	6805      	ldr	r5, [r0, #0]
 801da62:	600b      	str	r3, [r1, #0]
 801da64:	2d00      	cmp	r5, #0
 801da66:	da03      	bge.n	801da70 <_printf_i+0xc8>
 801da68:	232d      	movs	r3, #45	; 0x2d
 801da6a:	426d      	negs	r5, r5
 801da6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801da70:	485e      	ldr	r0, [pc, #376]	; (801dbec <_printf_i+0x244>)
 801da72:	230a      	movs	r3, #10
 801da74:	e019      	b.n	801daaa <_printf_i+0x102>
 801da76:	f015 0f40 	tst.w	r5, #64	; 0x40
 801da7a:	6805      	ldr	r5, [r0, #0]
 801da7c:	600b      	str	r3, [r1, #0]
 801da7e:	bf18      	it	ne
 801da80:	b22d      	sxthne	r5, r5
 801da82:	e7ef      	b.n	801da64 <_printf_i+0xbc>
 801da84:	680b      	ldr	r3, [r1, #0]
 801da86:	6825      	ldr	r5, [r4, #0]
 801da88:	1d18      	adds	r0, r3, #4
 801da8a:	6008      	str	r0, [r1, #0]
 801da8c:	0628      	lsls	r0, r5, #24
 801da8e:	d501      	bpl.n	801da94 <_printf_i+0xec>
 801da90:	681d      	ldr	r5, [r3, #0]
 801da92:	e002      	b.n	801da9a <_printf_i+0xf2>
 801da94:	0669      	lsls	r1, r5, #25
 801da96:	d5fb      	bpl.n	801da90 <_printf_i+0xe8>
 801da98:	881d      	ldrh	r5, [r3, #0]
 801da9a:	4854      	ldr	r0, [pc, #336]	; (801dbec <_printf_i+0x244>)
 801da9c:	2f6f      	cmp	r7, #111	; 0x6f
 801da9e:	bf0c      	ite	eq
 801daa0:	2308      	moveq	r3, #8
 801daa2:	230a      	movne	r3, #10
 801daa4:	2100      	movs	r1, #0
 801daa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801daaa:	6866      	ldr	r6, [r4, #4]
 801daac:	60a6      	str	r6, [r4, #8]
 801daae:	2e00      	cmp	r6, #0
 801dab0:	bfa2      	ittt	ge
 801dab2:	6821      	ldrge	r1, [r4, #0]
 801dab4:	f021 0104 	bicge.w	r1, r1, #4
 801dab8:	6021      	strge	r1, [r4, #0]
 801daba:	b90d      	cbnz	r5, 801dac0 <_printf_i+0x118>
 801dabc:	2e00      	cmp	r6, #0
 801dabe:	d04d      	beq.n	801db5c <_printf_i+0x1b4>
 801dac0:	4616      	mov	r6, r2
 801dac2:	fbb5 f1f3 	udiv	r1, r5, r3
 801dac6:	fb03 5711 	mls	r7, r3, r1, r5
 801daca:	5dc7      	ldrb	r7, [r0, r7]
 801dacc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dad0:	462f      	mov	r7, r5
 801dad2:	42bb      	cmp	r3, r7
 801dad4:	460d      	mov	r5, r1
 801dad6:	d9f4      	bls.n	801dac2 <_printf_i+0x11a>
 801dad8:	2b08      	cmp	r3, #8
 801dada:	d10b      	bne.n	801daf4 <_printf_i+0x14c>
 801dadc:	6823      	ldr	r3, [r4, #0]
 801dade:	07df      	lsls	r7, r3, #31
 801dae0:	d508      	bpl.n	801daf4 <_printf_i+0x14c>
 801dae2:	6923      	ldr	r3, [r4, #16]
 801dae4:	6861      	ldr	r1, [r4, #4]
 801dae6:	4299      	cmp	r1, r3
 801dae8:	bfde      	ittt	le
 801daea:	2330      	movle	r3, #48	; 0x30
 801daec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801daf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801daf4:	1b92      	subs	r2, r2, r6
 801daf6:	6122      	str	r2, [r4, #16]
 801daf8:	f8cd a000 	str.w	sl, [sp]
 801dafc:	464b      	mov	r3, r9
 801dafe:	aa03      	add	r2, sp, #12
 801db00:	4621      	mov	r1, r4
 801db02:	4640      	mov	r0, r8
 801db04:	f7ff fee2 	bl	801d8cc <_printf_common>
 801db08:	3001      	adds	r0, #1
 801db0a:	d14c      	bne.n	801dba6 <_printf_i+0x1fe>
 801db0c:	f04f 30ff 	mov.w	r0, #4294967295
 801db10:	b004      	add	sp, #16
 801db12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db16:	4835      	ldr	r0, [pc, #212]	; (801dbec <_printf_i+0x244>)
 801db18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801db1c:	6823      	ldr	r3, [r4, #0]
 801db1e:	680e      	ldr	r6, [r1, #0]
 801db20:	061f      	lsls	r7, r3, #24
 801db22:	f856 5b04 	ldr.w	r5, [r6], #4
 801db26:	600e      	str	r6, [r1, #0]
 801db28:	d514      	bpl.n	801db54 <_printf_i+0x1ac>
 801db2a:	07d9      	lsls	r1, r3, #31
 801db2c:	bf44      	itt	mi
 801db2e:	f043 0320 	orrmi.w	r3, r3, #32
 801db32:	6023      	strmi	r3, [r4, #0]
 801db34:	b91d      	cbnz	r5, 801db3e <_printf_i+0x196>
 801db36:	6823      	ldr	r3, [r4, #0]
 801db38:	f023 0320 	bic.w	r3, r3, #32
 801db3c:	6023      	str	r3, [r4, #0]
 801db3e:	2310      	movs	r3, #16
 801db40:	e7b0      	b.n	801daa4 <_printf_i+0xfc>
 801db42:	6823      	ldr	r3, [r4, #0]
 801db44:	f043 0320 	orr.w	r3, r3, #32
 801db48:	6023      	str	r3, [r4, #0]
 801db4a:	2378      	movs	r3, #120	; 0x78
 801db4c:	4828      	ldr	r0, [pc, #160]	; (801dbf0 <_printf_i+0x248>)
 801db4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801db52:	e7e3      	b.n	801db1c <_printf_i+0x174>
 801db54:	065e      	lsls	r6, r3, #25
 801db56:	bf48      	it	mi
 801db58:	b2ad      	uxthmi	r5, r5
 801db5a:	e7e6      	b.n	801db2a <_printf_i+0x182>
 801db5c:	4616      	mov	r6, r2
 801db5e:	e7bb      	b.n	801dad8 <_printf_i+0x130>
 801db60:	680b      	ldr	r3, [r1, #0]
 801db62:	6826      	ldr	r6, [r4, #0]
 801db64:	6960      	ldr	r0, [r4, #20]
 801db66:	1d1d      	adds	r5, r3, #4
 801db68:	600d      	str	r5, [r1, #0]
 801db6a:	0635      	lsls	r5, r6, #24
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	d501      	bpl.n	801db74 <_printf_i+0x1cc>
 801db70:	6018      	str	r0, [r3, #0]
 801db72:	e002      	b.n	801db7a <_printf_i+0x1d2>
 801db74:	0671      	lsls	r1, r6, #25
 801db76:	d5fb      	bpl.n	801db70 <_printf_i+0x1c8>
 801db78:	8018      	strh	r0, [r3, #0]
 801db7a:	2300      	movs	r3, #0
 801db7c:	6123      	str	r3, [r4, #16]
 801db7e:	4616      	mov	r6, r2
 801db80:	e7ba      	b.n	801daf8 <_printf_i+0x150>
 801db82:	680b      	ldr	r3, [r1, #0]
 801db84:	1d1a      	adds	r2, r3, #4
 801db86:	600a      	str	r2, [r1, #0]
 801db88:	681e      	ldr	r6, [r3, #0]
 801db8a:	6862      	ldr	r2, [r4, #4]
 801db8c:	2100      	movs	r1, #0
 801db8e:	4630      	mov	r0, r6
 801db90:	f7e2 fb26 	bl	80001e0 <memchr>
 801db94:	b108      	cbz	r0, 801db9a <_printf_i+0x1f2>
 801db96:	1b80      	subs	r0, r0, r6
 801db98:	6060      	str	r0, [r4, #4]
 801db9a:	6863      	ldr	r3, [r4, #4]
 801db9c:	6123      	str	r3, [r4, #16]
 801db9e:	2300      	movs	r3, #0
 801dba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dba4:	e7a8      	b.n	801daf8 <_printf_i+0x150>
 801dba6:	6923      	ldr	r3, [r4, #16]
 801dba8:	4632      	mov	r2, r6
 801dbaa:	4649      	mov	r1, r9
 801dbac:	4640      	mov	r0, r8
 801dbae:	47d0      	blx	sl
 801dbb0:	3001      	adds	r0, #1
 801dbb2:	d0ab      	beq.n	801db0c <_printf_i+0x164>
 801dbb4:	6823      	ldr	r3, [r4, #0]
 801dbb6:	079b      	lsls	r3, r3, #30
 801dbb8:	d413      	bmi.n	801dbe2 <_printf_i+0x23a>
 801dbba:	68e0      	ldr	r0, [r4, #12]
 801dbbc:	9b03      	ldr	r3, [sp, #12]
 801dbbe:	4298      	cmp	r0, r3
 801dbc0:	bfb8      	it	lt
 801dbc2:	4618      	movlt	r0, r3
 801dbc4:	e7a4      	b.n	801db10 <_printf_i+0x168>
 801dbc6:	2301      	movs	r3, #1
 801dbc8:	4632      	mov	r2, r6
 801dbca:	4649      	mov	r1, r9
 801dbcc:	4640      	mov	r0, r8
 801dbce:	47d0      	blx	sl
 801dbd0:	3001      	adds	r0, #1
 801dbd2:	d09b      	beq.n	801db0c <_printf_i+0x164>
 801dbd4:	3501      	adds	r5, #1
 801dbd6:	68e3      	ldr	r3, [r4, #12]
 801dbd8:	9903      	ldr	r1, [sp, #12]
 801dbda:	1a5b      	subs	r3, r3, r1
 801dbdc:	42ab      	cmp	r3, r5
 801dbde:	dcf2      	bgt.n	801dbc6 <_printf_i+0x21e>
 801dbe0:	e7eb      	b.n	801dbba <_printf_i+0x212>
 801dbe2:	2500      	movs	r5, #0
 801dbe4:	f104 0619 	add.w	r6, r4, #25
 801dbe8:	e7f5      	b.n	801dbd6 <_printf_i+0x22e>
 801dbea:	bf00      	nop
 801dbec:	08021bbf 	.word	0x08021bbf
 801dbf0:	08021bd0 	.word	0x08021bd0

0801dbf4 <_read_r>:
 801dbf4:	b538      	push	{r3, r4, r5, lr}
 801dbf6:	4d07      	ldr	r5, [pc, #28]	; (801dc14 <_read_r+0x20>)
 801dbf8:	4604      	mov	r4, r0
 801dbfa:	4608      	mov	r0, r1
 801dbfc:	4611      	mov	r1, r2
 801dbfe:	2200      	movs	r2, #0
 801dc00:	602a      	str	r2, [r5, #0]
 801dc02:	461a      	mov	r2, r3
 801dc04:	f7e7 fa86 	bl	8005114 <_read>
 801dc08:	1c43      	adds	r3, r0, #1
 801dc0a:	d102      	bne.n	801dc12 <_read_r+0x1e>
 801dc0c:	682b      	ldr	r3, [r5, #0]
 801dc0e:	b103      	cbz	r3, 801dc12 <_read_r+0x1e>
 801dc10:	6023      	str	r3, [r4, #0]
 801dc12:	bd38      	pop	{r3, r4, r5, pc}
 801dc14:	2000df38 	.word	0x2000df38

0801dc18 <__swbuf_r>:
 801dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc1a:	460e      	mov	r6, r1
 801dc1c:	4614      	mov	r4, r2
 801dc1e:	4605      	mov	r5, r0
 801dc20:	b118      	cbz	r0, 801dc2a <__swbuf_r+0x12>
 801dc22:	6983      	ldr	r3, [r0, #24]
 801dc24:	b90b      	cbnz	r3, 801dc2a <__swbuf_r+0x12>
 801dc26:	f7fe ff5d 	bl	801cae4 <__sinit>
 801dc2a:	4b21      	ldr	r3, [pc, #132]	; (801dcb0 <__swbuf_r+0x98>)
 801dc2c:	429c      	cmp	r4, r3
 801dc2e:	d12b      	bne.n	801dc88 <__swbuf_r+0x70>
 801dc30:	686c      	ldr	r4, [r5, #4]
 801dc32:	69a3      	ldr	r3, [r4, #24]
 801dc34:	60a3      	str	r3, [r4, #8]
 801dc36:	89a3      	ldrh	r3, [r4, #12]
 801dc38:	071a      	lsls	r2, r3, #28
 801dc3a:	d52f      	bpl.n	801dc9c <__swbuf_r+0x84>
 801dc3c:	6923      	ldr	r3, [r4, #16]
 801dc3e:	b36b      	cbz	r3, 801dc9c <__swbuf_r+0x84>
 801dc40:	6923      	ldr	r3, [r4, #16]
 801dc42:	6820      	ldr	r0, [r4, #0]
 801dc44:	1ac0      	subs	r0, r0, r3
 801dc46:	6963      	ldr	r3, [r4, #20]
 801dc48:	b2f6      	uxtb	r6, r6
 801dc4a:	4283      	cmp	r3, r0
 801dc4c:	4637      	mov	r7, r6
 801dc4e:	dc04      	bgt.n	801dc5a <__swbuf_r+0x42>
 801dc50:	4621      	mov	r1, r4
 801dc52:	4628      	mov	r0, r5
 801dc54:	f7ff fb18 	bl	801d288 <_fflush_r>
 801dc58:	bb30      	cbnz	r0, 801dca8 <__swbuf_r+0x90>
 801dc5a:	68a3      	ldr	r3, [r4, #8]
 801dc5c:	3b01      	subs	r3, #1
 801dc5e:	60a3      	str	r3, [r4, #8]
 801dc60:	6823      	ldr	r3, [r4, #0]
 801dc62:	1c5a      	adds	r2, r3, #1
 801dc64:	6022      	str	r2, [r4, #0]
 801dc66:	701e      	strb	r6, [r3, #0]
 801dc68:	6963      	ldr	r3, [r4, #20]
 801dc6a:	3001      	adds	r0, #1
 801dc6c:	4283      	cmp	r3, r0
 801dc6e:	d004      	beq.n	801dc7a <__swbuf_r+0x62>
 801dc70:	89a3      	ldrh	r3, [r4, #12]
 801dc72:	07db      	lsls	r3, r3, #31
 801dc74:	d506      	bpl.n	801dc84 <__swbuf_r+0x6c>
 801dc76:	2e0a      	cmp	r6, #10
 801dc78:	d104      	bne.n	801dc84 <__swbuf_r+0x6c>
 801dc7a:	4621      	mov	r1, r4
 801dc7c:	4628      	mov	r0, r5
 801dc7e:	f7ff fb03 	bl	801d288 <_fflush_r>
 801dc82:	b988      	cbnz	r0, 801dca8 <__swbuf_r+0x90>
 801dc84:	4638      	mov	r0, r7
 801dc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc88:	4b0a      	ldr	r3, [pc, #40]	; (801dcb4 <__swbuf_r+0x9c>)
 801dc8a:	429c      	cmp	r4, r3
 801dc8c:	d101      	bne.n	801dc92 <__swbuf_r+0x7a>
 801dc8e:	68ac      	ldr	r4, [r5, #8]
 801dc90:	e7cf      	b.n	801dc32 <__swbuf_r+0x1a>
 801dc92:	4b09      	ldr	r3, [pc, #36]	; (801dcb8 <__swbuf_r+0xa0>)
 801dc94:	429c      	cmp	r4, r3
 801dc96:	bf08      	it	eq
 801dc98:	68ec      	ldreq	r4, [r5, #12]
 801dc9a:	e7ca      	b.n	801dc32 <__swbuf_r+0x1a>
 801dc9c:	4621      	mov	r1, r4
 801dc9e:	4628      	mov	r0, r5
 801dca0:	f000 f80c 	bl	801dcbc <__swsetup_r>
 801dca4:	2800      	cmp	r0, #0
 801dca6:	d0cb      	beq.n	801dc40 <__swbuf_r+0x28>
 801dca8:	f04f 37ff 	mov.w	r7, #4294967295
 801dcac:	e7ea      	b.n	801dc84 <__swbuf_r+0x6c>
 801dcae:	bf00      	nop
 801dcb0:	08021ab8 	.word	0x08021ab8
 801dcb4:	08021ad8 	.word	0x08021ad8
 801dcb8:	08021a98 	.word	0x08021a98

0801dcbc <__swsetup_r>:
 801dcbc:	4b32      	ldr	r3, [pc, #200]	; (801dd88 <__swsetup_r+0xcc>)
 801dcbe:	b570      	push	{r4, r5, r6, lr}
 801dcc0:	681d      	ldr	r5, [r3, #0]
 801dcc2:	4606      	mov	r6, r0
 801dcc4:	460c      	mov	r4, r1
 801dcc6:	b125      	cbz	r5, 801dcd2 <__swsetup_r+0x16>
 801dcc8:	69ab      	ldr	r3, [r5, #24]
 801dcca:	b913      	cbnz	r3, 801dcd2 <__swsetup_r+0x16>
 801dccc:	4628      	mov	r0, r5
 801dcce:	f7fe ff09 	bl	801cae4 <__sinit>
 801dcd2:	4b2e      	ldr	r3, [pc, #184]	; (801dd8c <__swsetup_r+0xd0>)
 801dcd4:	429c      	cmp	r4, r3
 801dcd6:	d10f      	bne.n	801dcf8 <__swsetup_r+0x3c>
 801dcd8:	686c      	ldr	r4, [r5, #4]
 801dcda:	89a3      	ldrh	r3, [r4, #12]
 801dcdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dce0:	0719      	lsls	r1, r3, #28
 801dce2:	d42c      	bmi.n	801dd3e <__swsetup_r+0x82>
 801dce4:	06dd      	lsls	r5, r3, #27
 801dce6:	d411      	bmi.n	801dd0c <__swsetup_r+0x50>
 801dce8:	2309      	movs	r3, #9
 801dcea:	6033      	str	r3, [r6, #0]
 801dcec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dcf0:	81a3      	strh	r3, [r4, #12]
 801dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 801dcf6:	e03e      	b.n	801dd76 <__swsetup_r+0xba>
 801dcf8:	4b25      	ldr	r3, [pc, #148]	; (801dd90 <__swsetup_r+0xd4>)
 801dcfa:	429c      	cmp	r4, r3
 801dcfc:	d101      	bne.n	801dd02 <__swsetup_r+0x46>
 801dcfe:	68ac      	ldr	r4, [r5, #8]
 801dd00:	e7eb      	b.n	801dcda <__swsetup_r+0x1e>
 801dd02:	4b24      	ldr	r3, [pc, #144]	; (801dd94 <__swsetup_r+0xd8>)
 801dd04:	429c      	cmp	r4, r3
 801dd06:	bf08      	it	eq
 801dd08:	68ec      	ldreq	r4, [r5, #12]
 801dd0a:	e7e6      	b.n	801dcda <__swsetup_r+0x1e>
 801dd0c:	0758      	lsls	r0, r3, #29
 801dd0e:	d512      	bpl.n	801dd36 <__swsetup_r+0x7a>
 801dd10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dd12:	b141      	cbz	r1, 801dd26 <__swsetup_r+0x6a>
 801dd14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dd18:	4299      	cmp	r1, r3
 801dd1a:	d002      	beq.n	801dd22 <__swsetup_r+0x66>
 801dd1c:	4630      	mov	r0, r6
 801dd1e:	f7fe ffe9 	bl	801ccf4 <_free_r>
 801dd22:	2300      	movs	r3, #0
 801dd24:	6363      	str	r3, [r4, #52]	; 0x34
 801dd26:	89a3      	ldrh	r3, [r4, #12]
 801dd28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dd2c:	81a3      	strh	r3, [r4, #12]
 801dd2e:	2300      	movs	r3, #0
 801dd30:	6063      	str	r3, [r4, #4]
 801dd32:	6923      	ldr	r3, [r4, #16]
 801dd34:	6023      	str	r3, [r4, #0]
 801dd36:	89a3      	ldrh	r3, [r4, #12]
 801dd38:	f043 0308 	orr.w	r3, r3, #8
 801dd3c:	81a3      	strh	r3, [r4, #12]
 801dd3e:	6923      	ldr	r3, [r4, #16]
 801dd40:	b94b      	cbnz	r3, 801dd56 <__swsetup_r+0x9a>
 801dd42:	89a3      	ldrh	r3, [r4, #12]
 801dd44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dd48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dd4c:	d003      	beq.n	801dd56 <__swsetup_r+0x9a>
 801dd4e:	4621      	mov	r1, r4
 801dd50:	4630      	mov	r0, r6
 801dd52:	f000 f84d 	bl	801ddf0 <__smakebuf_r>
 801dd56:	89a0      	ldrh	r0, [r4, #12]
 801dd58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dd5c:	f010 0301 	ands.w	r3, r0, #1
 801dd60:	d00a      	beq.n	801dd78 <__swsetup_r+0xbc>
 801dd62:	2300      	movs	r3, #0
 801dd64:	60a3      	str	r3, [r4, #8]
 801dd66:	6963      	ldr	r3, [r4, #20]
 801dd68:	425b      	negs	r3, r3
 801dd6a:	61a3      	str	r3, [r4, #24]
 801dd6c:	6923      	ldr	r3, [r4, #16]
 801dd6e:	b943      	cbnz	r3, 801dd82 <__swsetup_r+0xc6>
 801dd70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dd74:	d1ba      	bne.n	801dcec <__swsetup_r+0x30>
 801dd76:	bd70      	pop	{r4, r5, r6, pc}
 801dd78:	0781      	lsls	r1, r0, #30
 801dd7a:	bf58      	it	pl
 801dd7c:	6963      	ldrpl	r3, [r4, #20]
 801dd7e:	60a3      	str	r3, [r4, #8]
 801dd80:	e7f4      	b.n	801dd6c <__swsetup_r+0xb0>
 801dd82:	2000      	movs	r0, #0
 801dd84:	e7f7      	b.n	801dd76 <__swsetup_r+0xba>
 801dd86:	bf00      	nop
 801dd88:	200002f8 	.word	0x200002f8
 801dd8c:	08021ab8 	.word	0x08021ab8
 801dd90:	08021ad8 	.word	0x08021ad8
 801dd94:	08021a98 	.word	0x08021a98

0801dd98 <abort>:
 801dd98:	b508      	push	{r3, lr}
 801dd9a:	2006      	movs	r0, #6
 801dd9c:	f000 f8b6 	bl	801df0c <raise>
 801dda0:	2001      	movs	r0, #1
 801dda2:	f7e7 f9ad 	bl	8005100 <_exit>

0801dda6 <__swhatbuf_r>:
 801dda6:	b570      	push	{r4, r5, r6, lr}
 801dda8:	460e      	mov	r6, r1
 801ddaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddae:	2900      	cmp	r1, #0
 801ddb0:	b096      	sub	sp, #88	; 0x58
 801ddb2:	4614      	mov	r4, r2
 801ddb4:	461d      	mov	r5, r3
 801ddb6:	da07      	bge.n	801ddc8 <__swhatbuf_r+0x22>
 801ddb8:	2300      	movs	r3, #0
 801ddba:	602b      	str	r3, [r5, #0]
 801ddbc:	89b3      	ldrh	r3, [r6, #12]
 801ddbe:	061a      	lsls	r2, r3, #24
 801ddc0:	d410      	bmi.n	801dde4 <__swhatbuf_r+0x3e>
 801ddc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ddc6:	e00e      	b.n	801dde6 <__swhatbuf_r+0x40>
 801ddc8:	466a      	mov	r2, sp
 801ddca:	f000 f8bb 	bl	801df44 <_fstat_r>
 801ddce:	2800      	cmp	r0, #0
 801ddd0:	dbf2      	blt.n	801ddb8 <__swhatbuf_r+0x12>
 801ddd2:	9a01      	ldr	r2, [sp, #4]
 801ddd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ddd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dddc:	425a      	negs	r2, r3
 801ddde:	415a      	adcs	r2, r3
 801dde0:	602a      	str	r2, [r5, #0]
 801dde2:	e7ee      	b.n	801ddc2 <__swhatbuf_r+0x1c>
 801dde4:	2340      	movs	r3, #64	; 0x40
 801dde6:	2000      	movs	r0, #0
 801dde8:	6023      	str	r3, [r4, #0]
 801ddea:	b016      	add	sp, #88	; 0x58
 801ddec:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ddf0 <__smakebuf_r>:
 801ddf0:	898b      	ldrh	r3, [r1, #12]
 801ddf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ddf4:	079d      	lsls	r5, r3, #30
 801ddf6:	4606      	mov	r6, r0
 801ddf8:	460c      	mov	r4, r1
 801ddfa:	d507      	bpl.n	801de0c <__smakebuf_r+0x1c>
 801ddfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801de00:	6023      	str	r3, [r4, #0]
 801de02:	6123      	str	r3, [r4, #16]
 801de04:	2301      	movs	r3, #1
 801de06:	6163      	str	r3, [r4, #20]
 801de08:	b002      	add	sp, #8
 801de0a:	bd70      	pop	{r4, r5, r6, pc}
 801de0c:	ab01      	add	r3, sp, #4
 801de0e:	466a      	mov	r2, sp
 801de10:	f7ff ffc9 	bl	801dda6 <__swhatbuf_r>
 801de14:	9900      	ldr	r1, [sp, #0]
 801de16:	4605      	mov	r5, r0
 801de18:	4630      	mov	r0, r6
 801de1a:	f7fe ffbb 	bl	801cd94 <_malloc_r>
 801de1e:	b948      	cbnz	r0, 801de34 <__smakebuf_r+0x44>
 801de20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de24:	059a      	lsls	r2, r3, #22
 801de26:	d4ef      	bmi.n	801de08 <__smakebuf_r+0x18>
 801de28:	f023 0303 	bic.w	r3, r3, #3
 801de2c:	f043 0302 	orr.w	r3, r3, #2
 801de30:	81a3      	strh	r3, [r4, #12]
 801de32:	e7e3      	b.n	801ddfc <__smakebuf_r+0xc>
 801de34:	4b0d      	ldr	r3, [pc, #52]	; (801de6c <__smakebuf_r+0x7c>)
 801de36:	62b3      	str	r3, [r6, #40]	; 0x28
 801de38:	89a3      	ldrh	r3, [r4, #12]
 801de3a:	6020      	str	r0, [r4, #0]
 801de3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de40:	81a3      	strh	r3, [r4, #12]
 801de42:	9b00      	ldr	r3, [sp, #0]
 801de44:	6163      	str	r3, [r4, #20]
 801de46:	9b01      	ldr	r3, [sp, #4]
 801de48:	6120      	str	r0, [r4, #16]
 801de4a:	b15b      	cbz	r3, 801de64 <__smakebuf_r+0x74>
 801de4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de50:	4630      	mov	r0, r6
 801de52:	f000 f889 	bl	801df68 <_isatty_r>
 801de56:	b128      	cbz	r0, 801de64 <__smakebuf_r+0x74>
 801de58:	89a3      	ldrh	r3, [r4, #12]
 801de5a:	f023 0303 	bic.w	r3, r3, #3
 801de5e:	f043 0301 	orr.w	r3, r3, #1
 801de62:	81a3      	strh	r3, [r4, #12]
 801de64:	89a0      	ldrh	r0, [r4, #12]
 801de66:	4305      	orrs	r5, r0
 801de68:	81a5      	strh	r5, [r4, #12]
 801de6a:	e7cd      	b.n	801de08 <__smakebuf_r+0x18>
 801de6c:	0801ca7d 	.word	0x0801ca7d

0801de70 <_realloc_r>:
 801de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de72:	4607      	mov	r7, r0
 801de74:	4614      	mov	r4, r2
 801de76:	460e      	mov	r6, r1
 801de78:	b921      	cbnz	r1, 801de84 <_realloc_r+0x14>
 801de7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801de7e:	4611      	mov	r1, r2
 801de80:	f7fe bf88 	b.w	801cd94 <_malloc_r>
 801de84:	b922      	cbnz	r2, 801de90 <_realloc_r+0x20>
 801de86:	f7fe ff35 	bl	801ccf4 <_free_r>
 801de8a:	4625      	mov	r5, r4
 801de8c:	4628      	mov	r0, r5
 801de8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de90:	f000 f87a 	bl	801df88 <_malloc_usable_size_r>
 801de94:	42a0      	cmp	r0, r4
 801de96:	d20f      	bcs.n	801deb8 <_realloc_r+0x48>
 801de98:	4621      	mov	r1, r4
 801de9a:	4638      	mov	r0, r7
 801de9c:	f7fe ff7a 	bl	801cd94 <_malloc_r>
 801dea0:	4605      	mov	r5, r0
 801dea2:	2800      	cmp	r0, #0
 801dea4:	d0f2      	beq.n	801de8c <_realloc_r+0x1c>
 801dea6:	4631      	mov	r1, r6
 801dea8:	4622      	mov	r2, r4
 801deaa:	f7fe fef3 	bl	801cc94 <memcpy>
 801deae:	4631      	mov	r1, r6
 801deb0:	4638      	mov	r0, r7
 801deb2:	f7fe ff1f 	bl	801ccf4 <_free_r>
 801deb6:	e7e9      	b.n	801de8c <_realloc_r+0x1c>
 801deb8:	4635      	mov	r5, r6
 801deba:	e7e7      	b.n	801de8c <_realloc_r+0x1c>

0801debc <_raise_r>:
 801debc:	291f      	cmp	r1, #31
 801debe:	b538      	push	{r3, r4, r5, lr}
 801dec0:	4604      	mov	r4, r0
 801dec2:	460d      	mov	r5, r1
 801dec4:	d904      	bls.n	801ded0 <_raise_r+0x14>
 801dec6:	2316      	movs	r3, #22
 801dec8:	6003      	str	r3, [r0, #0]
 801deca:	f04f 30ff 	mov.w	r0, #4294967295
 801dece:	bd38      	pop	{r3, r4, r5, pc}
 801ded0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ded2:	b112      	cbz	r2, 801deda <_raise_r+0x1e>
 801ded4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ded8:	b94b      	cbnz	r3, 801deee <_raise_r+0x32>
 801deda:	4620      	mov	r0, r4
 801dedc:	f000 f830 	bl	801df40 <_getpid_r>
 801dee0:	462a      	mov	r2, r5
 801dee2:	4601      	mov	r1, r0
 801dee4:	4620      	mov	r0, r4
 801dee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801deea:	f000 b817 	b.w	801df1c <_kill_r>
 801deee:	2b01      	cmp	r3, #1
 801def0:	d00a      	beq.n	801df08 <_raise_r+0x4c>
 801def2:	1c59      	adds	r1, r3, #1
 801def4:	d103      	bne.n	801defe <_raise_r+0x42>
 801def6:	2316      	movs	r3, #22
 801def8:	6003      	str	r3, [r0, #0]
 801defa:	2001      	movs	r0, #1
 801defc:	e7e7      	b.n	801dece <_raise_r+0x12>
 801defe:	2400      	movs	r4, #0
 801df00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801df04:	4628      	mov	r0, r5
 801df06:	4798      	blx	r3
 801df08:	2000      	movs	r0, #0
 801df0a:	e7e0      	b.n	801dece <_raise_r+0x12>

0801df0c <raise>:
 801df0c:	4b02      	ldr	r3, [pc, #8]	; (801df18 <raise+0xc>)
 801df0e:	4601      	mov	r1, r0
 801df10:	6818      	ldr	r0, [r3, #0]
 801df12:	f7ff bfd3 	b.w	801debc <_raise_r>
 801df16:	bf00      	nop
 801df18:	200002f8 	.word	0x200002f8

0801df1c <_kill_r>:
 801df1c:	b538      	push	{r3, r4, r5, lr}
 801df1e:	4d07      	ldr	r5, [pc, #28]	; (801df3c <_kill_r+0x20>)
 801df20:	2300      	movs	r3, #0
 801df22:	4604      	mov	r4, r0
 801df24:	4608      	mov	r0, r1
 801df26:	4611      	mov	r1, r2
 801df28:	602b      	str	r3, [r5, #0]
 801df2a:	f7e7 f8d7 	bl	80050dc <_kill>
 801df2e:	1c43      	adds	r3, r0, #1
 801df30:	d102      	bne.n	801df38 <_kill_r+0x1c>
 801df32:	682b      	ldr	r3, [r5, #0]
 801df34:	b103      	cbz	r3, 801df38 <_kill_r+0x1c>
 801df36:	6023      	str	r3, [r4, #0]
 801df38:	bd38      	pop	{r3, r4, r5, pc}
 801df3a:	bf00      	nop
 801df3c:	2000df38 	.word	0x2000df38

0801df40 <_getpid_r>:
 801df40:	f7e7 b8c4 	b.w	80050cc <_getpid>

0801df44 <_fstat_r>:
 801df44:	b538      	push	{r3, r4, r5, lr}
 801df46:	4d07      	ldr	r5, [pc, #28]	; (801df64 <_fstat_r+0x20>)
 801df48:	2300      	movs	r3, #0
 801df4a:	4604      	mov	r4, r0
 801df4c:	4608      	mov	r0, r1
 801df4e:	4611      	mov	r1, r2
 801df50:	602b      	str	r3, [r5, #0]
 801df52:	f7e7 f924 	bl	800519e <_fstat>
 801df56:	1c43      	adds	r3, r0, #1
 801df58:	d102      	bne.n	801df60 <_fstat_r+0x1c>
 801df5a:	682b      	ldr	r3, [r5, #0]
 801df5c:	b103      	cbz	r3, 801df60 <_fstat_r+0x1c>
 801df5e:	6023      	str	r3, [r4, #0]
 801df60:	bd38      	pop	{r3, r4, r5, pc}
 801df62:	bf00      	nop
 801df64:	2000df38 	.word	0x2000df38

0801df68 <_isatty_r>:
 801df68:	b538      	push	{r3, r4, r5, lr}
 801df6a:	4d06      	ldr	r5, [pc, #24]	; (801df84 <_isatty_r+0x1c>)
 801df6c:	2300      	movs	r3, #0
 801df6e:	4604      	mov	r4, r0
 801df70:	4608      	mov	r0, r1
 801df72:	602b      	str	r3, [r5, #0]
 801df74:	f7e7 f923 	bl	80051be <_isatty>
 801df78:	1c43      	adds	r3, r0, #1
 801df7a:	d102      	bne.n	801df82 <_isatty_r+0x1a>
 801df7c:	682b      	ldr	r3, [r5, #0]
 801df7e:	b103      	cbz	r3, 801df82 <_isatty_r+0x1a>
 801df80:	6023      	str	r3, [r4, #0]
 801df82:	bd38      	pop	{r3, r4, r5, pc}
 801df84:	2000df38 	.word	0x2000df38

0801df88 <_malloc_usable_size_r>:
 801df88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df8c:	1f18      	subs	r0, r3, #4
 801df8e:	2b00      	cmp	r3, #0
 801df90:	bfbc      	itt	lt
 801df92:	580b      	ldrlt	r3, [r1, r0]
 801df94:	18c0      	addlt	r0, r0, r3
 801df96:	4770      	bx	lr

0801df98 <_init>:
 801df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df9a:	bf00      	nop
 801df9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df9e:	bc08      	pop	{r3}
 801dfa0:	469e      	mov	lr, r3
 801dfa2:	4770      	bx	lr

0801dfa4 <_fini>:
 801dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfa6:	bf00      	nop
 801dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfaa:	bc08      	pop	{r3}
 801dfac:	469e      	mov	lr, r3
 801dfae:	4770      	bx	lr
