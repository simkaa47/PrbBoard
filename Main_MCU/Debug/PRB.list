
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b4  080198c4  080198c4  000298c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d178  0801d178  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  0801d178  0801d178  0002d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d180  0801d180  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d180  0801d180  0002d180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d184  0801d184  0002d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0801d188  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030114  2**0
                  CONTENTS
 10 .bss          0000d920  20000114  20000114  00030114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000da34  2000da34  00030114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .debug_info   000343df  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008744  00000000  00000000  00064523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  0006cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002278  00000000  00000000  0006f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003450c  00000000  00000000  00071340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003be44  00000000  00000000  000a584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3458  00000000  00000000  000e1690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d4ae8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c78  00000000  00000000  001d4b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080198ac 	.word	0x080198ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	080198ac 	.word	0x080198ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	2201      	movs	r2, #1
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	b21a      	sxth	r2, r3
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	4313      	orrs	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29b      	uxth	r3, r3
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <Read_Inputs>:

extern Settings_Struct settings;
extern Meas_Data meas_data;

void Read_Inputs()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	meas_data.d_inputs.in0 	= settings.input_emulation_switches.in0  ? settings.input_emulation_values.in0 :  HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 80005a8:	4b9f      	ldr	r3, [pc, #636]	; (8000828 <Read_Inputs+0x284>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d005      	beq.n	80005c2 <Read_Inputs+0x1e>
 80005b6:	4b9c      	ldr	r3, [pc, #624]	; (8000828 <Read_Inputs+0x284>)
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	e008      	b.n	80005d4 <Read_Inputs+0x30>
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4899      	ldr	r0, [pc, #612]	; (800082c <Read_Inputs+0x288>)
 80005c8:	f004 fc30 	bl	8004e2c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4996      	ldr	r1, [pc, #600]	; (8000830 <Read_Inputs+0x28c>)
 80005d6:	780b      	ldrb	r3, [r1, #0]
 80005d8:	f362 0300 	bfi	r3, r2, #0, #1
 80005dc:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.input_emulation_switches.in1  ? settings.input_emulation_values.in1 :  HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 80005de:	4b92      	ldr	r3, [pc, #584]	; (8000828 <Read_Inputs+0x284>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <Read_Inputs+0x54>
 80005ec:	4b8e      	ldr	r3, [pc, #568]	; (8000828 <Read_Inputs+0x284>)
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	e008      	b.n	800060a <Read_Inputs+0x66>
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	488b      	ldr	r0, [pc, #556]	; (800082c <Read_Inputs+0x288>)
 80005fe:	f004 fc15 	bl	8004e2c <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4989      	ldr	r1, [pc, #548]	; (8000830 <Read_Inputs+0x28c>)
 800060c:	780b      	ldrb	r3, [r1, #0]
 800060e:	f362 0341 	bfi	r3, r2, #1, #1
 8000612:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.input_emulation_switches.in2  ? settings.input_emulation_values.in2 :  HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000614:	4b84      	ldr	r3, [pc, #528]	; (8000828 <Read_Inputs+0x284>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <Read_Inputs+0x8a>
 8000622:	4b81      	ldr	r3, [pc, #516]	; (8000828 <Read_Inputs+0x284>)
 8000624:	789b      	ldrb	r3, [r3, #2]
 8000626:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	e007      	b.n	800063e <Read_Inputs+0x9a>
 800062e:	2101      	movs	r1, #1
 8000630:	4880      	ldr	r0, [pc, #512]	; (8000834 <Read_Inputs+0x290>)
 8000632:	f004 fbfb 	bl	8004e2c <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	497c      	ldr	r1, [pc, #496]	; (8000830 <Read_Inputs+0x28c>)
 8000640:	780b      	ldrb	r3, [r1, #0]
 8000642:	f362 0382 	bfi	r3, r2, #2, #1
 8000646:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.input_emulation_switches.in3  ? settings.input_emulation_values.in3 :  HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8000648:	4b77      	ldr	r3, [pc, #476]	; (8000828 <Read_Inputs+0x284>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <Read_Inputs+0xbe>
 8000656:	4b74      	ldr	r3, [pc, #464]	; (8000828 <Read_Inputs+0x284>)
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	e007      	b.n	8000672 <Read_Inputs+0xce>
 8000662:	2102      	movs	r1, #2
 8000664:	4873      	ldr	r0, [pc, #460]	; (8000834 <Read_Inputs+0x290>)
 8000666:	f004 fbe1 	bl	8004e2c <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	496f      	ldr	r1, [pc, #444]	; (8000830 <Read_Inputs+0x28c>)
 8000674:	780b      	ldrb	r3, [r1, #0]
 8000676:	f362 03c3 	bfi	r3, r2, #3, #1
 800067a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.input_emulation_switches.in4  ? settings.input_emulation_values.in4 :  HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 800067c:	4b6a      	ldr	r3, [pc, #424]	; (8000828 <Read_Inputs+0x284>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <Read_Inputs+0xf2>
 800068a:	4b67      	ldr	r3, [pc, #412]	; (8000828 <Read_Inputs+0x284>)
 800068c:	789b      	ldrb	r3, [r3, #2]
 800068e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	e007      	b.n	80006a6 <Read_Inputs+0x102>
 8000696:	2104      	movs	r1, #4
 8000698:	4866      	ldr	r0, [pc, #408]	; (8000834 <Read_Inputs+0x290>)
 800069a:	f004 fbc7 	bl	8004e2c <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4962      	ldr	r1, [pc, #392]	; (8000830 <Read_Inputs+0x28c>)
 80006a8:	780b      	ldrb	r3, [r1, #0]
 80006aa:	f362 1304 	bfi	r3, r2, #4, #1
 80006ae:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.input_emulation_switches.in5  ? settings.input_emulation_values.in5 :  HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80006b0:	4b5d      	ldr	r3, [pc, #372]	; (8000828 <Read_Inputs+0x284>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <Read_Inputs+0x126>
 80006be:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <Read_Inputs+0x284>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	e007      	b.n	80006da <Read_Inputs+0x136>
 80006ca:	2108      	movs	r1, #8
 80006cc:	4859      	ldr	r0, [pc, #356]	; (8000834 <Read_Inputs+0x290>)
 80006ce:	f004 fbad 	bl	8004e2c <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4955      	ldr	r1, [pc, #340]	; (8000830 <Read_Inputs+0x28c>)
 80006dc:	780b      	ldrb	r3, [r1, #0]
 80006de:	f362 1345 	bfi	r3, r2, #5, #1
 80006e2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.input_emulation_switches.in6  ? settings.input_emulation_values.in6 :  HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80006e4:	4b50      	ldr	r3, [pc, #320]	; (8000828 <Read_Inputs+0x284>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <Read_Inputs+0x15a>
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <Read_Inputs+0x284>)
 80006f4:	789b      	ldrb	r3, [r3, #2]
 80006f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	e007      	b.n	800070e <Read_Inputs+0x16a>
 80006fe:	2110      	movs	r1, #16
 8000700:	484c      	ldr	r0, [pc, #304]	; (8000834 <Read_Inputs+0x290>)
 8000702:	f004 fb93 	bl	8004e2c <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4948      	ldr	r1, [pc, #288]	; (8000830 <Read_Inputs+0x28c>)
 8000710:	780b      	ldrb	r3, [r1, #0]
 8000712:	f362 1386 	bfi	r3, r2, #6, #1
 8000716:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.input_emulation_switches.in7  ? settings.input_emulation_values.in7 :  HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 8000718:	4b43      	ldr	r3, [pc, #268]	; (8000828 <Read_Inputs+0x284>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <Read_Inputs+0x18e>
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <Read_Inputs+0x284>)
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	e007      	b.n	8000742 <Read_Inputs+0x19e>
 8000732:	2120      	movs	r1, #32
 8000734:	483f      	ldr	r0, [pc, #252]	; (8000834 <Read_Inputs+0x290>)
 8000736:	f004 fb79 	bl	8004e2c <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	493b      	ldr	r1, [pc, #236]	; (8000830 <Read_Inputs+0x28c>)
 8000744:	780b      	ldrb	r3, [r1, #0]
 8000746:	f362 13c7 	bfi	r3, r2, #7, #1
 800074a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.input_emulation_switches.in8  ? settings.input_emulation_values.in8 :  HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <Read_Inputs+0x284>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d005      	beq.n	8000766 <Read_Inputs+0x1c2>
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <Read_Inputs+0x284>)
 800075c:	78db      	ldrb	r3, [r3, #3]
 800075e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	e007      	b.n	8000776 <Read_Inputs+0x1d2>
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	4832      	ldr	r0, [pc, #200]	; (8000834 <Read_Inputs+0x290>)
 800076a:	f004 fb5f 	bl	8004e2c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	492e      	ldr	r1, [pc, #184]	; (8000830 <Read_Inputs+0x28c>)
 8000778:	784b      	ldrb	r3, [r1, #1]
 800077a:	f362 0300 	bfi	r3, r2, #0, #1
 800077e:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.input_emulation_switches.in9  ? settings.input_emulation_values.in9 :  HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <Read_Inputs+0x284>)
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d005      	beq.n	800079a <Read_Inputs+0x1f6>
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <Read_Inputs+0x284>)
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	e008      	b.n	80007ac <Read_Inputs+0x208>
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4826      	ldr	r0, [pc, #152]	; (8000838 <Read_Inputs+0x294>)
 80007a0:	f004 fb44 	bl	8004e2c <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4920      	ldr	r1, [pc, #128]	; (8000830 <Read_Inputs+0x28c>)
 80007ae:	784b      	ldrb	r3, [r1, #1]
 80007b0:	f362 0341 	bfi	r3, r2, #1, #1
 80007b4:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.input_emulation_switches.in10 ? settings.input_emulation_values.in10 : HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <Read_Inputs+0x284>)
 80007b8:	785b      	ldrb	r3, [r3, #1]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <Read_Inputs+0x22c>
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <Read_Inputs+0x284>)
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	e008      	b.n	80007e2 <Read_Inputs+0x23e>
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <Read_Inputs+0x294>)
 80007d6:	f004 fb29 	bl	8004e2c <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4913      	ldr	r1, [pc, #76]	; (8000830 <Read_Inputs+0x28c>)
 80007e4:	784b      	ldrb	r3, [r1, #1]
 80007e6:	f362 0382 	bfi	r3, r2, #2, #1
 80007ea:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.input_emulation_switches.in11 ? settings.input_emulation_values.in11 : HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <Read_Inputs+0x284>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <Read_Inputs+0x262>
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <Read_Inputs+0x284>)
 80007fc:	78db      	ldrb	r3, [r3, #3]
 80007fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	e008      	b.n	8000818 <Read_Inputs+0x274>
 8000806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <Read_Inputs+0x294>)
 800080c:	f004 fb0e 	bl	8004e2c <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4905      	ldr	r1, [pc, #20]	; (8000830 <Read_Inputs+0x28c>)
 800081a:	784b      	ldrb	r3, [r1, #1]
 800081c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000820:	704b      	strb	r3, [r1, #1]
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000744 	.word	0x20000744
 800082c:	40020400 	.word	0x40020400
 8000830:	200007b4 	.word	0x200007b4
 8000834:	40021000 	.word	0x40021000
 8000838:	40020800 	.word	0x40020800

0800083c <Write_Outputs>:

void Write_Outputs()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.output_emulation_switches.out0  ? settings.output_emulation_values.out0  :  0;
 8000840:	4bb4      	ldr	r3, [pc, #720]	; (8000b14 <Write_Outputs+0x2d8>)
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d005      	beq.n	800085a <Write_Outputs+0x1e>
 800084e:	4bb1      	ldr	r3, [pc, #708]	; (8000b14 <Write_Outputs+0x2d8>)
 8000850:	799b      	ldrb	r3, [r3, #6]
 8000852:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	e000      	b.n	800085c <Write_Outputs+0x20>
 800085a:	2100      	movs	r1, #0
 800085c:	4aae      	ldr	r2, [pc, #696]	; (8000b18 <Write_Outputs+0x2dc>)
 800085e:	7893      	ldrb	r3, [r2, #2]
 8000860:	f361 0300 	bfi	r3, r1, #0, #1
 8000864:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out1  = settings.output_emulation_switches.out1  ? settings.output_emulation_values.out1  :  0;
 8000866:	4bab      	ldr	r3, [pc, #684]	; (8000b14 <Write_Outputs+0x2d8>)
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <Write_Outputs+0x44>
 8000874:	4ba7      	ldr	r3, [pc, #668]	; (8000b14 <Write_Outputs+0x2d8>)
 8000876:	799b      	ldrb	r3, [r3, #6]
 8000878:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	e000      	b.n	8000882 <Write_Outputs+0x46>
 8000880:	2100      	movs	r1, #0
 8000882:	4aa5      	ldr	r2, [pc, #660]	; (8000b18 <Write_Outputs+0x2dc>)
 8000884:	7893      	ldrb	r3, [r2, #2]
 8000886:	f361 0341 	bfi	r3, r1, #1, #1
 800088a:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out2  = settings.output_emulation_switches.out2  ? settings.output_emulation_values.out2  :  0;
 800088c:	4ba1      	ldr	r3, [pc, #644]	; (8000b14 <Write_Outputs+0x2d8>)
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <Write_Outputs+0x6a>
 800089a:	4b9e      	ldr	r3, [pc, #632]	; (8000b14 <Write_Outputs+0x2d8>)
 800089c:	799b      	ldrb	r3, [r3, #6]
 800089e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80008a2:	b2d9      	uxtb	r1, r3
 80008a4:	e000      	b.n	80008a8 <Write_Outputs+0x6c>
 80008a6:	2100      	movs	r1, #0
 80008a8:	4a9b      	ldr	r2, [pc, #620]	; (8000b18 <Write_Outputs+0x2dc>)
 80008aa:	7893      	ldrb	r3, [r2, #2]
 80008ac:	f361 0382 	bfi	r3, r1, #2, #1
 80008b0:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out3  = settings.output_emulation_switches.out3  ? settings.output_emulation_values.out3  :  0;
 80008b2:	4b98      	ldr	r3, [pc, #608]	; (8000b14 <Write_Outputs+0x2d8>)
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d005      	beq.n	80008cc <Write_Outputs+0x90>
 80008c0:	4b94      	ldr	r3, [pc, #592]	; (8000b14 <Write_Outputs+0x2d8>)
 80008c2:	799b      	ldrb	r3, [r3, #6]
 80008c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	e000      	b.n	80008ce <Write_Outputs+0x92>
 80008cc:	2100      	movs	r1, #0
 80008ce:	4a92      	ldr	r2, [pc, #584]	; (8000b18 <Write_Outputs+0x2dc>)
 80008d0:	7893      	ldrb	r3, [r2, #2]
 80008d2:	f361 03c3 	bfi	r3, r1, #3, #1
 80008d6:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.output_emulation_switches.out4  ? settings.output_emulation_values.out4  :  0;
 80008d8:	4b8e      	ldr	r3, [pc, #568]	; (8000b14 <Write_Outputs+0x2d8>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <Write_Outputs+0xb6>
 80008e6:	4b8b      	ldr	r3, [pc, #556]	; (8000b14 <Write_Outputs+0x2d8>)
 80008e8:	799b      	ldrb	r3, [r3, #6]
 80008ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008ee:	b2d9      	uxtb	r1, r3
 80008f0:	e000      	b.n	80008f4 <Write_Outputs+0xb8>
 80008f2:	2100      	movs	r1, #0
 80008f4:	4a88      	ldr	r2, [pc, #544]	; (8000b18 <Write_Outputs+0x2dc>)
 80008f6:	7893      	ldrb	r3, [r2, #2]
 80008f8:	f361 1304 	bfi	r3, r1, #4, #1
 80008fc:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.output_emulation_switches.out5  ? settings.output_emulation_values.out5  :  0;
 80008fe:	4b85      	ldr	r3, [pc, #532]	; (8000b14 <Write_Outputs+0x2d8>)
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <Write_Outputs+0xdc>
 800090c:	4b81      	ldr	r3, [pc, #516]	; (8000b14 <Write_Outputs+0x2d8>)
 800090e:	799b      	ldrb	r3, [r3, #6]
 8000910:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000914:	b2d9      	uxtb	r1, r3
 8000916:	e000      	b.n	800091a <Write_Outputs+0xde>
 8000918:	2100      	movs	r1, #0
 800091a:	4a7f      	ldr	r2, [pc, #508]	; (8000b18 <Write_Outputs+0x2dc>)
 800091c:	7893      	ldrb	r3, [r2, #2]
 800091e:	f361 1345 	bfi	r3, r1, #5, #1
 8000922:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.output_emulation_switches.out6  ? settings.output_emulation_values.out6  :  0;
 8000924:	4b7b      	ldr	r3, [pc, #492]	; (8000b14 <Write_Outputs+0x2d8>)
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <Write_Outputs+0x102>
 8000932:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <Write_Outputs+0x2d8>)
 8000934:	799b      	ldrb	r3, [r3, #6]
 8000936:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	e000      	b.n	8000940 <Write_Outputs+0x104>
 800093e:	2100      	movs	r1, #0
 8000940:	4a75      	ldr	r2, [pc, #468]	; (8000b18 <Write_Outputs+0x2dc>)
 8000942:	7893      	ldrb	r3, [r2, #2]
 8000944:	f361 1386 	bfi	r3, r1, #6, #1
 8000948:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.output_emulation_switches.out7  ? settings.output_emulation_values.out7  :  0;
 800094a:	4b72      	ldr	r3, [pc, #456]	; (8000b14 <Write_Outputs+0x2d8>)
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d005      	beq.n	8000964 <Write_Outputs+0x128>
 8000958:	4b6e      	ldr	r3, [pc, #440]	; (8000b14 <Write_Outputs+0x2d8>)
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000960:	b2d9      	uxtb	r1, r3
 8000962:	e000      	b.n	8000966 <Write_Outputs+0x12a>
 8000964:	2100      	movs	r1, #0
 8000966:	4a6c      	ldr	r2, [pc, #432]	; (8000b18 <Write_Outputs+0x2dc>)
 8000968:	7893      	ldrb	r3, [r2, #2]
 800096a:	f361 13c7 	bfi	r3, r1, #7, #1
 800096e:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.output_emulation_switches.out8  ? settings.output_emulation_values.out8  :  0;
 8000970:	4b68      	ldr	r3, [pc, #416]	; (8000b14 <Write_Outputs+0x2d8>)
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <Write_Outputs+0x14e>
 800097e:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <Write_Outputs+0x2d8>)
 8000980:	79db      	ldrb	r3, [r3, #7]
 8000982:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000986:	b2d9      	uxtb	r1, r3
 8000988:	e000      	b.n	800098c <Write_Outputs+0x150>
 800098a:	2100      	movs	r1, #0
 800098c:	4a62      	ldr	r2, [pc, #392]	; (8000b18 <Write_Outputs+0x2dc>)
 800098e:	78d3      	ldrb	r3, [r2, #3]
 8000990:	f361 0300 	bfi	r3, r1, #0, #1
 8000994:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.output_emulation_switches.out9  ? settings.output_emulation_values.out9  :  0;
 8000996:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <Write_Outputs+0x2d8>)
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <Write_Outputs+0x174>
 80009a4:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <Write_Outputs+0x2d8>)
 80009a6:	79db      	ldrb	r3, [r3, #7]
 80009a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	e000      	b.n	80009b2 <Write_Outputs+0x176>
 80009b0:	2100      	movs	r1, #0
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <Write_Outputs+0x2dc>)
 80009b4:	78d3      	ldrb	r3, [r2, #3]
 80009b6:	f361 0341 	bfi	r3, r1, #1, #1
 80009ba:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.output_emulation_switches.out10 ? settings.output_emulation_values.out10 :  0;
 80009bc:	4b55      	ldr	r3, [pc, #340]	; (8000b14 <Write_Outputs+0x2d8>)
 80009be:	795b      	ldrb	r3, [r3, #5]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <Write_Outputs+0x19a>
 80009ca:	4b52      	ldr	r3, [pc, #328]	; (8000b14 <Write_Outputs+0x2d8>)
 80009cc:	79db      	ldrb	r3, [r3, #7]
 80009ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009d2:	b2d9      	uxtb	r1, r3
 80009d4:	e000      	b.n	80009d8 <Write_Outputs+0x19c>
 80009d6:	2100      	movs	r1, #0
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <Write_Outputs+0x2dc>)
 80009da:	78d3      	ldrb	r3, [r2, #3]
 80009dc:	f361 0382 	bfi	r3, r1, #2, #1
 80009e0:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.output_emulation_switches.out11 ? settings.output_emulation_values.out11 :  0;
 80009e2:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <Write_Outputs+0x2d8>)
 80009e4:	795b      	ldrb	r3, [r3, #5]
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <Write_Outputs+0x1c0>
 80009f0:	4b48      	ldr	r3, [pc, #288]	; (8000b14 <Write_Outputs+0x2d8>)
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009f8:	b2d9      	uxtb	r1, r3
 80009fa:	e000      	b.n	80009fe <Write_Outputs+0x1c2>
 80009fc:	2100      	movs	r1, #0
 80009fe:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a00:	78d3      	ldrb	r3, [r2, #3]
 8000a02:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a06:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	4841      	ldr	r0, [pc, #260]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a18:	f004 fa20 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a1e:	789b      	ldrb	r3, [r3, #2]
 8000a20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	483b      	ldr	r0, [pc, #236]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a2e:	f004 fa15 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	4836      	ldr	r0, [pc, #216]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a44:	f004 fa0a 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a58:	4830      	ldr	r0, [pc, #192]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a5a:	f004 f9ff 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a60:	789b      	ldrb	r3, [r3, #2]
 8000a62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6e:	482b      	ldr	r0, [pc, #172]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a70:	f004 f9f4 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a84:	4825      	ldr	r0, [pc, #148]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a86:	f004 f9e9 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	4820      	ldr	r0, [pc, #128]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a9c:	f004 f9de 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <Write_Outputs+0x2dc>)
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab0:	481a      	ldr	r0, [pc, #104]	; (8000b1c <Write_Outputs+0x2e0>)
 8000ab2:	f004 f9d3 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <Write_Outputs+0x2dc>)
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <Write_Outputs+0x2e0>)
 8000ac8:	f004 f9c8 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <Write_Outputs+0x2dc>)
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	4810      	ldr	r0, [pc, #64]	; (8000b20 <Write_Outputs+0x2e4>)
 8000ade:	f004 f9bd 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <Write_Outputs+0x2dc>)
 8000ae4:	78db      	ldrb	r3, [r3, #3]
 8000ae6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <Write_Outputs+0x2e8>)
 8000af4:	f004 f9b2 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <Write_Outputs+0x2dc>)
 8000afa:	78db      	ldrb	r3, [r3, #3]
 8000afc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <Write_Outputs+0x2e8>)
 8000b0a:	f004 f9a7 	bl	8004e5c <HAL_GPIO_WritePin>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000744 	.word	0x20000744
 8000b18:	200007b4 	.word	0x200007b4
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <ethernet_reset+0x24>)
 8000b32:	f004 f993 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b36:	2064      	movs	r0, #100	; 0x64
 8000b38:	f002 f946 	bl	8002dc8 <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <ethernet_reset+0x24>)
 8000b42:	f004 f98b 	bl	8004e5c <HAL_GPIO_WritePin>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40020000 	.word	0x40020000

08000b50 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0cc      	sub	sp, #304	; 0x130
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b5e:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000b60:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2020      	movs	r0, #32
 8000b76:	f00a facb 	bl	800b110 <netconn_new_with_proto_and_callback>
 8000b7a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d05d      	beq.n	8000c42 <ethernet_thread+0xf2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000b86:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	492f      	ldr	r1, [pc, #188]	; (8000c4c <ethernet_thread+0xfc>)
 8000b8e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b92:	f00a fb77 	bl	800b284 <netconn_bind>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8000b9c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <ethernet_thread+0xea>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8000ba4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000bae:	f00a fd1d 	bl	800b5ec <netconn_recv>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8000bb8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <ethernet_thread+0x54>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8000bc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000bca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bce:	899b      	ldrh	r3, [r3, #12]
 8000bd0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000bd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bd8:	f107 020a 	add.w	r2, r7, #10
 8000bdc:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00c f8d9 	bl	800cd98 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000be6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000bea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000bee:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	f107 020c 	add.w	r2, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f000 f859 	bl	8000cb0 <ethernet_answer>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8000c04:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d010      	beq.n	8000c2e <ethernet_thread+0xde>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000c0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c10:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8000c14:	f107 010c 	add.w	r1, r7, #12
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c24:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000c28:	f000 f812 	bl	8000c50 <Send>
 8000c2c:	e7ba      	b.n	8000ba4 <ethernet_thread+0x54>
				  }
				  else netbuf_delete(buf);
 8000c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00c f846 	bl	800ccc4 <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000c38:	e7b4      	b.n	8000ba4 <ethernet_thread+0x54>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000c3a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000c3e:	f00a fb05 	bl	800b24c <netconn_delete>
	  }
	}
}
 8000c42:	bf00      	nop
 8000c44:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	0801d014 	.word	0x0801d014

08000c50 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8000c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c68:	f00c f82c 	bl	800ccc4 <netbuf_delete>
	buf = netbuf_new();
 8000c6c:	f00c f816 	bl	800cc9c <netbuf_new>
 8000c70:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	8c3a      	ldrh	r2, [r7, #32]
 8000c76:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	461a      	mov	r2, r3
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c86:	f00c f83d 	bl	800cd04 <netbuf_ref>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8000c8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d108      	bne.n	8000ca8 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8000c96:	8c3b      	ldrh	r3, [r7, #32]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f00a fd1f 	bl	800b6e0 <netconn_sendto>
		netbuf_delete(buf);
 8000ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca4:	f00c f80e 	bl	800ccc4 <netbuf_delete>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8000cbe:	8979      	ldrh	r1, [r7, #10]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f000 ff59 	bl	8001b7c <ModbusParse>
 8000cca:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <ethernet_answer+0x26>
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	e000      	b.n	8000cd8 <ethernet_answer+0x28>
	return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <vApplicationGetIdleTaskMemory+0x2c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <vApplicationGetIdleTaskMemory+0x30>)
 8000cf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000134 	.word	0x20000134
 8000d10:	200001e8 	.word	0x200001e8

08000d14 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8000d1e:	f00a f911 	bl	800af44 <xPortGetFreeHeapSize>
 8000d22:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000d24:	2300      	movs	r3, #0
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <task_init+0x90>)
 8000d2e:	491e      	ldr	r1, [pc, #120]	; (8000da8 <task_init+0x94>)
 8000d30:	481e      	ldr	r0, [pc, #120]	; (8000dac <task_init+0x98>)
 8000d32:	f017 faa9 	bl	8018288 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d36:	f00a f905 	bl	800af44 <xPortGetFreeHeapSize>
 8000d3a:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <task_init+0x9c>)
 8000d46:	4918      	ldr	r1, [pc, #96]	; (8000da8 <task_init+0x94>)
 8000d48:	481a      	ldr	r0, [pc, #104]	; (8000db4 <task_init+0xa0>)
 8000d4a:	f017 fa9d 	bl	8018288 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d4e:	f00a f8f9 	bl	800af44 <xPortGetFreeHeapSize>
 8000d52:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8000d54:	2300      	movs	r3, #0
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4916      	ldr	r1, [pc, #88]	; (8000db8 <task_init+0xa4>)
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <task_init+0xa8>)
 8000d62:	f017 fa91 	bl	8018288 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d66:	f00a f8ed 	bl	800af44 <xPortGetFreeHeapSize>
 8000d6a:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	2310      	movs	r3, #16
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f007 fb56 	bl	8008430 <osMailCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <task_init+0xac>)
 8000d88:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	2200      	movs	r2, #0
 8000d92:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <task_init+0xb0>)
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <task_init+0xb4>)
 8000d96:	f017 fa77 	bl	8018288 <sys_thread_new>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000000 	.word	0x20000000
 8000da8:	08000b51 	.word	0x08000b51
 8000dac:	080198c4 	.word	0x080198c4
 8000db0:	20000002 	.word	0x20000002
 8000db4:	080198d0 	.word	0x080198d0
 8000db8:	080028ed 	.word	0x080028ed
 8000dbc:	080198dc 	.word	0x080198dc
 8000dc0:	20000130 	.word	0x20000130
 8000dc4:	08000dcd 	.word	0x08000dcd
 8000dc8:	080198e8 	.word	0x080198e8

08000dcc <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		Tact_pins();
 8000dd4:	f000 f846 	bl	8000e64 <Tact_pins>
		Key_Read();
 8000dd8:	f000 f950 	bl	800107c <Key_Read>
		key_filter_all();
 8000ddc:	f000 f9c4 	bl	8001168 <key_filter_all>
		GetPositiveFront();
 8000de0:	f000 fa72 	bl	80012c8 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e030      	b.n	8000e4c <keyscan_thread+0x80>
			for (int j = 0; j < 6; ++j) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	e027      	b.n	8000e40 <keyscan_thread+0x74>
				if(positive_fronts[i][j])
 8000df0:	491a      	ldr	r1, [pc, #104]	; (8000e5c <keyscan_thread+0x90>)
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	18ca      	adds	r2, r1, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d018      	beq.n	8000e3a <keyscan_thread+0x6e>
				{
					if(keys[i][j]!=NULL)
 8000e08:	4915      	ldr	r1, [pc, #84]	; (8000e60 <keyscan_thread+0x94>)
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00c      	beq.n	8000e3a <keyscan_thread+0x6e>
					{
						PrintSymbol(keys[i][j]);
 8000e20:	490f      	ldr	r1, [pc, #60]	; (8000e60 <keyscan_thread+0x94>)
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	4413      	add	r3, r2
 8000e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 faa5 	bl	8001384 <PrintSymbol>
			for (int j = 0; j < 6; ++j) {
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	ddd4      	ble.n	8000df0 <keyscan_thread+0x24>
		for (int i = 0; i < 6; ++i) {
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	ddcb      	ble.n	8000dea <keyscan_thread+0x1e>
				}
			}
		}


		osDelay(2);
 8000e52:	2002      	movs	r0, #2
 8000e54:	f006 ff95 	bl	8007d82 <osDelay>
		Tact_pins();
 8000e58:	e7bc      	b.n	8000dd4 <keyscan_thread+0x8>
 8000e5a:	bf00      	nop
 8000e5c:	2000047c 	.word	0x2000047c
 8000e60:	20000004 	.word	0x20000004

08000e64 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8000e68:	4b81      	ldr	r3, [pc, #516]	; (8001070 <Tact_pins+0x20c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	4b81      	ldr	r3, [pc, #516]	; (8001074 <Tact_pins+0x210>)
 8000e70:	fb83 3102 	smull	r3, r1, r3, r2
 8000e74:	17d3      	asrs	r3, r2, #31
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	460b      	mov	r3, r1
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	440b      	add	r3, r1
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	1ad1      	subs	r1, r2, r3
 8000e82:	b2ca      	uxtb	r2, r1
 8000e84:	4b7a      	ldr	r3, [pc, #488]	; (8001070 <Tact_pins+0x20c>)
 8000e86:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8000e88:	4b79      	ldr	r3, [pc, #484]	; (8001070 <Tact_pins+0x20c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	f200 80ed 	bhi.w	800106c <Tact_pins+0x208>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <Tact_pins+0x34>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000efb 	.word	0x08000efb
 8000ea0:	08000f45 	.word	0x08000f45
 8000ea4:	08000f8f 	.word	0x08000f8f
 8000ea8:	08000fd9 	.word	0x08000fd9
 8000eac:	08001023 	.word	0x08001023
	{
		case 0:
			C0_HIGH;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb6:	4870      	ldr	r0, [pc, #448]	; (8001078 <Tact_pins+0x214>)
 8000eb8:	f003 ffd0 	bl	8004e5c <HAL_GPIO_WritePin>
			C1_LOW;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec2:	486d      	ldr	r0, [pc, #436]	; (8001078 <Tact_pins+0x214>)
 8000ec4:	f003 ffca 	bl	8004e5c <HAL_GPIO_WritePin>
			C2_LOW;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ece:	486a      	ldr	r0, [pc, #424]	; (8001078 <Tact_pins+0x214>)
 8000ed0:	f003 ffc4 	bl	8004e5c <HAL_GPIO_WritePin>
			C3_LOW;
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eda:	4867      	ldr	r0, [pc, #412]	; (8001078 <Tact_pins+0x214>)
 8000edc:	f003 ffbe 	bl	8004e5c <HAL_GPIO_WritePin>
			C4_LOW;
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee6:	4864      	ldr	r0, [pc, #400]	; (8001078 <Tact_pins+0x214>)
 8000ee8:	f003 ffb8 	bl	8004e5c <HAL_GPIO_WritePin>
			C5_LOW;
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef2:	4861      	ldr	r0, [pc, #388]	; (8001078 <Tact_pins+0x214>)
 8000ef4:	f003 ffb2 	bl	8004e5c <HAL_GPIO_WritePin>
			break;
 8000ef8:	e0b8      	b.n	800106c <Tact_pins+0x208>
		case 1:
			C0_LOW;
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	485d      	ldr	r0, [pc, #372]	; (8001078 <Tact_pins+0x214>)
 8000f02:	f003 ffab 	bl	8004e5c <HAL_GPIO_WritePin>
			C1_HIGH;
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0c:	485a      	ldr	r0, [pc, #360]	; (8001078 <Tact_pins+0x214>)
 8000f0e:	f003 ffa5 	bl	8004e5c <HAL_GPIO_WritePin>
			C2_LOW;
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f18:	4857      	ldr	r0, [pc, #348]	; (8001078 <Tact_pins+0x214>)
 8000f1a:	f003 ff9f 	bl	8004e5c <HAL_GPIO_WritePin>
			C3_LOW;
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	4854      	ldr	r0, [pc, #336]	; (8001078 <Tact_pins+0x214>)
 8000f26:	f003 ff99 	bl	8004e5c <HAL_GPIO_WritePin>
			C4_LOW;
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f30:	4851      	ldr	r0, [pc, #324]	; (8001078 <Tact_pins+0x214>)
 8000f32:	f003 ff93 	bl	8004e5c <HAL_GPIO_WritePin>
			C5_LOW;
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	484e      	ldr	r0, [pc, #312]	; (8001078 <Tact_pins+0x214>)
 8000f3e:	f003 ff8d 	bl	8004e5c <HAL_GPIO_WritePin>
			break;
 8000f42:	e093      	b.n	800106c <Tact_pins+0x208>
		case 2:
			C0_LOW;
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	484b      	ldr	r0, [pc, #300]	; (8001078 <Tact_pins+0x214>)
 8000f4c:	f003 ff86 	bl	8004e5c <HAL_GPIO_WritePin>
			C1_LOW;
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f56:	4848      	ldr	r0, [pc, #288]	; (8001078 <Tact_pins+0x214>)
 8000f58:	f003 ff80 	bl	8004e5c <HAL_GPIO_WritePin>
			C2_HIGH;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	4845      	ldr	r0, [pc, #276]	; (8001078 <Tact_pins+0x214>)
 8000f64:	f003 ff7a 	bl	8004e5c <HAL_GPIO_WritePin>
			C3_LOW;
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6e:	4842      	ldr	r0, [pc, #264]	; (8001078 <Tact_pins+0x214>)
 8000f70:	f003 ff74 	bl	8004e5c <HAL_GPIO_WritePin>
			C4_LOW;
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	483f      	ldr	r0, [pc, #252]	; (8001078 <Tact_pins+0x214>)
 8000f7c:	f003 ff6e 	bl	8004e5c <HAL_GPIO_WritePin>
			C5_LOW;
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f86:	483c      	ldr	r0, [pc, #240]	; (8001078 <Tact_pins+0x214>)
 8000f88:	f003 ff68 	bl	8004e5c <HAL_GPIO_WritePin>
			break;
 8000f8c:	e06e      	b.n	800106c <Tact_pins+0x208>
		case 3:
			C0_LOW;
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	4838      	ldr	r0, [pc, #224]	; (8001078 <Tact_pins+0x214>)
 8000f96:	f003 ff61 	bl	8004e5c <HAL_GPIO_WritePin>
			C1_LOW;
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4835      	ldr	r0, [pc, #212]	; (8001078 <Tact_pins+0x214>)
 8000fa2:	f003 ff5b 	bl	8004e5c <HAL_GPIO_WritePin>
			C2_LOW;
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fac:	4832      	ldr	r0, [pc, #200]	; (8001078 <Tact_pins+0x214>)
 8000fae:	f003 ff55 	bl	8004e5c <HAL_GPIO_WritePin>
			C3_HIGH;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb8:	482f      	ldr	r0, [pc, #188]	; (8001078 <Tact_pins+0x214>)
 8000fba:	f003 ff4f 	bl	8004e5c <HAL_GPIO_WritePin>
			C4_LOW;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc4:	482c      	ldr	r0, [pc, #176]	; (8001078 <Tact_pins+0x214>)
 8000fc6:	f003 ff49 	bl	8004e5c <HAL_GPIO_WritePin>
			C5_LOW;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	4829      	ldr	r0, [pc, #164]	; (8001078 <Tact_pins+0x214>)
 8000fd2:	f003 ff43 	bl	8004e5c <HAL_GPIO_WritePin>
			break;
 8000fd6:	e049      	b.n	800106c <Tact_pins+0x208>
		case 4:
			C0_LOW;
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	4826      	ldr	r0, [pc, #152]	; (8001078 <Tact_pins+0x214>)
 8000fe0:	f003 ff3c 	bl	8004e5c <HAL_GPIO_WritePin>
			C1_LOW;
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	4823      	ldr	r0, [pc, #140]	; (8001078 <Tact_pins+0x214>)
 8000fec:	f003 ff36 	bl	8004e5c <HAL_GPIO_WritePin>
			C2_LOW;
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4820      	ldr	r0, [pc, #128]	; (8001078 <Tact_pins+0x214>)
 8000ff8:	f003 ff30 	bl	8004e5c <HAL_GPIO_WritePin>
			C3_LOW;
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <Tact_pins+0x214>)
 8001004:	f003 ff2a 	bl	8004e5c <HAL_GPIO_WritePin>
			C4_HIGH;
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <Tact_pins+0x214>)
 8001010:	f003 ff24 	bl	8004e5c <HAL_GPIO_WritePin>
			C5_LOW;
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101a:	4817      	ldr	r0, [pc, #92]	; (8001078 <Tact_pins+0x214>)
 800101c:	f003 ff1e 	bl	8004e5c <HAL_GPIO_WritePin>
			break;
 8001020:	e024      	b.n	800106c <Tact_pins+0x208>
		case 5:
			C0_LOW;
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <Tact_pins+0x214>)
 800102a:	f003 ff17 	bl	8004e5c <HAL_GPIO_WritePin>
			C1_LOW;
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <Tact_pins+0x214>)
 8001036:	f003 ff11 	bl	8004e5c <HAL_GPIO_WritePin>
			C2_LOW;
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <Tact_pins+0x214>)
 8001042:	f003 ff0b 	bl	8004e5c <HAL_GPIO_WritePin>
			C3_LOW;
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <Tact_pins+0x214>)
 800104e:	f003 ff05 	bl	8004e5c <HAL_GPIO_WritePin>
			C4_LOW;
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <Tact_pins+0x214>)
 800105a:	f003 feff 	bl	8004e5c <HAL_GPIO_WritePin>
			C5_HIGH;
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <Tact_pins+0x214>)
 8001066:	f003 fef9 	bl	8004e5c <HAL_GPIO_WritePin>
			break;
 800106a:	bf00      	nop
	}
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200003e8 	.word	0x200003e8
 8001074:	2aaaaaab 	.word	0x2aaaaaab
 8001078:	40020c00 	.word	0x40020c00

0800107c <Key_Read>:


static void Key_Read(void)
{
 800107c:	b598      	push	{r3, r4, r7, lr}
 800107e:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <Key_Read+0xe0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461c      	mov	r4, r3
 8001086:	2101      	movs	r1, #1
 8001088:	4835      	ldr	r0, [pc, #212]	; (8001160 <Key_Read+0xe4>)
 800108a:	f003 fecf 	bl	8004e2c <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	4619      	mov	r1, r3
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <Key_Read+0xe8>)
 8001094:	4623      	mov	r3, r4
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4423      	add	r3, r4
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <Key_Read+0xe0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461c      	mov	r4, r3
 80010a8:	2102      	movs	r1, #2
 80010aa:	482d      	ldr	r0, [pc, #180]	; (8001160 <Key_Read+0xe4>)
 80010ac:	f003 febe 	bl	8004e2c <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <Key_Read+0xe8>)
 80010b6:	4623      	mov	r3, r4
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4423      	add	r3, r4
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	3301      	adds	r3, #1
 80010c2:	460a      	mov	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <Key_Read+0xe0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461c      	mov	r4, r3
 80010cc:	2104      	movs	r1, #4
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <Key_Read+0xe4>)
 80010d0:	f003 feac 	bl	8004e2c <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4a22      	ldr	r2, [pc, #136]	; (8001164 <Key_Read+0xe8>)
 80010da:	4623      	mov	r3, r4
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4423      	add	r3, r4
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	3302      	adds	r3, #2
 80010e6:	460a      	mov	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <Key_Read+0xe0>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461c      	mov	r4, r3
 80010f0:	2108      	movs	r1, #8
 80010f2:	481b      	ldr	r0, [pc, #108]	; (8001160 <Key_Read+0xe4>)
 80010f4:	f003 fe9a 	bl	8004e2c <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <Key_Read+0xe8>)
 80010fe:	4623      	mov	r3, r4
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4423      	add	r3, r4
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	3303      	adds	r3, #3
 800110a:	460a      	mov	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <Key_Read+0xe0>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461c      	mov	r4, r3
 8001114:	2110      	movs	r1, #16
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <Key_Read+0xe4>)
 8001118:	f003 fe88 	bl	8004e2c <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <Key_Read+0xe8>)
 8001122:	4623      	mov	r3, r4
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4423      	add	r3, r4
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	3304      	adds	r3, #4
 800112e:	460a      	mov	r2, r1
 8001130:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <Key_Read+0xe0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461c      	mov	r4, r3
 8001138:	2120      	movs	r1, #32
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <Key_Read+0xe4>)
 800113c:	f003 fe76 	bl	8004e2c <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	4619      	mov	r1, r3
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <Key_Read+0xe8>)
 8001146:	4623      	mov	r3, r4
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4423      	add	r3, r4
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	3305      	adds	r3, #5
 8001152:	460a      	mov	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	bd98      	pop	{r3, r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	200003e8 	.word	0x200003e8
 8001160:	40020c00 	.word	0x40020c00
 8001164:	200003ec 	.word	0x200003ec

08001168 <key_filter_all>:

static void key_filter_all()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	e013      	b.n	800119c <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	e00a      	b.n	8001190 <key_filter_all+0x28>
			key_filter(x, y);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f811 	bl	80011ac <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b05      	cmp	r3, #5
 8001194:	ddf1      	ble.n	800117a <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	dde8      	ble.n	8001174 <key_filter_all+0xc>
		}
	}
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 80011ac:	b490      	push	{r4, r7}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	79b9      	ldrb	r1, [r7, #6]
 80011c0:	483e      	ldr	r0, [pc, #248]	; (80012bc <key_filter+0x110>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4403      	add	r3, r0
 80011cc:	440b      	add	r3, r1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01b      	beq.n	800120c <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	79b9      	ldrb	r1, [r7, #6]
 80011d8:	4839      	ldr	r0, [pc, #228]	; (80012c0 <key_filter+0x114>)
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4403      	add	r3, r0
 80011e4:	440b      	add	r3, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	bf28      	it	cs
 80011ec:	2304      	movcs	r3, #4
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	79b9      	ldrb	r1, [r7, #6]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2dc      	uxtb	r4, r3
 80011f8:	4831      	ldr	r0, [pc, #196]	; (80012c0 <key_filter+0x114>)
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4403      	add	r3, r0
 8001204:	440b      	add	r3, r1
 8001206:	4622      	mov	r2, r4
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e024      	b.n	8001256 <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	79b9      	ldrb	r1, [r7, #6]
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <key_filter+0x114>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4403      	add	r3, r0
 800121c:	440b      	add	r3, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00c      	beq.n	800123e <key_filter+0x92>
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	79b9      	ldrb	r1, [r7, #6]
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <key_filter+0x114>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4403      	add	r3, r0
 8001234:	440b      	add	r3, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	b2d8      	uxtb	r0, r3
 800123c:	e000      	b.n	8001240 <key_filter+0x94>
 800123e:	2000      	movs	r0, #0
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	79b9      	ldrb	r1, [r7, #6]
 8001244:	4c1e      	ldr	r4, [pc, #120]	; (80012c0 <key_filter+0x114>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4423      	add	r3, r4
 8001250:	440b      	add	r3, r1
 8001252:	4602      	mov	r2, r0
 8001254:	701a      	strb	r2, [r3, #0]
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	79b9      	ldrb	r1, [r7, #6]
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <key_filter+0x114>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4403      	add	r3, r0
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b05      	cmp	r3, #5
 800126c:	d10a      	bne.n	8001284 <key_filter+0xd8>
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	79b9      	ldrb	r1, [r7, #6]
 8001272:	4814      	ldr	r0, [pc, #80]	; (80012c4 <key_filter+0x118>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4403      	add	r3, r0
 800127e:	440b      	add	r3, r1
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	79b9      	ldrb	r1, [r7, #6]
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <key_filter+0x114>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4403      	add	r3, r0
 8001294:	440b      	add	r3, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10a      	bne.n	80012b2 <key_filter+0x106>
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	79b9      	ldrb	r1, [r7, #6]
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <key_filter+0x118>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4403      	add	r3, r0
 80012ac:	440b      	add	r3, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc90      	pop	{r4, r7}
 80012ba:	4770      	bx	lr
 80012bc:	200003ec 	.word	0x200003ec
 80012c0:	20000458 	.word	0x20000458
 80012c4:	20000410 	.word	0x20000410

080012c8 <GetPositiveFront>:

static void GetPositiveFront()
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	e047      	b.n	8001364 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	e03e      	b.n	8001358 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 80012da:	4927      	ldr	r1, [pc, #156]	; (8001378 <GetPositiveFront+0xb0>)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	18ca      	adds	r2, r1, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10d      	bne.n	800130e <GetPositiveFront+0x46>
 80012f2:	4922      	ldr	r1, [pc, #136]	; (800137c <GetPositiveFront+0xb4>)
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	18ca      	adds	r2, r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <GetPositiveFront+0x46>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <GetPositiveFront+0x48>
 800130e:	2300      	movs	r3, #0
 8001310:	b2d8      	uxtb	r0, r3
 8001312:	491b      	ldr	r1, [pc, #108]	; (8001380 <GetPositiveFront+0xb8>)
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	18ca      	adds	r2, r1, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4602      	mov	r2, r0
 8001326:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 8001328:	4913      	ldr	r1, [pc, #76]	; (8001378 <GetPositiveFront+0xb0>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	18ca      	adds	r2, r1, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	7818      	ldrb	r0, [r3, #0]
 800133c:	490f      	ldr	r1, [pc, #60]	; (800137c <GetPositiveFront+0xb4>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	18ca      	adds	r2, r1, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	4602      	mov	r2, r0
 8001350:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b05      	cmp	r3, #5
 800135c:	ddbd      	ble.n	80012da <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b05      	cmp	r3, #5
 8001368:	ddb4      	ble.n	80012d4 <GetPositiveFront+0xc>
		}
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000410 	.word	0x20000410
 800137c:	20000434 	.word	0x20000434
 8001380:	2000047c 	.word	0x2000047c

08001384 <PrintSymbol>:

static void PrintSymbol(const char *str)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	counter++;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <PrintSymbol+0x78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <PrintSymbol+0x78>)
 8001394:	6013      	str	r3, [r2, #0]
	sprintf(lcd[row_pointer], "%s  %d",str,counter);
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <PrintSymbol+0x7c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <PrintSymbol+0x80>)
 80013a6:	1898      	adds	r0, r3, r2
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <PrintSymbol+0x78>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4916      	ldr	r1, [pc, #88]	; (8001408 <PrintSymbol+0x84>)
 80013b0:	f017 fac0 	bl	8018934 <siprintf>
	row_pointer = row_pointer>=3 ? 0 : row_pointer+1;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <PrintSymbol+0x7c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d804      	bhi.n	80013c6 <PrintSymbol+0x42>
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <PrintSymbol+0x7c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	e000      	b.n	80013c8 <PrintSymbol+0x44>
 80013c6:	2300      	movs	r3, #0
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <PrintSymbol+0x7c>)
 80013ca:	7013      	strb	r3, [r2, #0]
	sendStr(lcd[0], 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <PrintSymbol+0x80>)
 80013d2:	f000 f8f5 	bl	80015c0 <sendStr>
	sendStr(lcd[1], 1, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2101      	movs	r1, #1
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <PrintSymbol+0x88>)
 80013dc:	f000 f8f0 	bl	80015c0 <sendStr>
	sendStr(lcd[2], 2, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2102      	movs	r1, #2
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <PrintSymbol+0x8c>)
 80013e6:	f000 f8eb 	bl	80015c0 <sendStr>
	sendStr(lcd[3], 3, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2103      	movs	r1, #3
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <PrintSymbol+0x90>)
 80013f0:	f000 f8e6 	bl	80015c0 <sendStr>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200005e4 	.word	0x200005e4
 8001400:	200005e0 	.word	0x200005e0
 8001404:	200004a0 	.word	0x200004a0
 8001408:	08019960 	.word	0x08019960
 800140c:	200004f0 	.word	0x200004f0
 8001410:	20000540 	.word	0x20000540
 8001414:	20000590 	.word	0x20000590

08001418 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001422:	481f      	ldr	r0, [pc, #124]	; (80014a0 <lcd_init+0x88>)
 8001424:	f003 fd1a 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2110      	movs	r1, #16
 800142c:	481c      	ldr	r0, [pc, #112]	; (80014a0 <lcd_init+0x88>)
 800142e:	f003 fd15 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001432:	200f      	movs	r0, #15
 8001434:	f001 fcc8 	bl	8002dc8 <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8001438:	2100      	movs	r1, #0
 800143a:	2033      	movs	r0, #51	; 0x33
 800143c:	f000 f832 	bl	80014a4 <sendByte>
	HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f001 fcc1 	bl	8002dc8 <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8001446:	2100      	movs	r1, #0
 8001448:	2032      	movs	r0, #50	; 0x32
 800144a:	f000 f82b 	bl	80014a4 <sendByte>
	HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f001 fcba 	bl	8002dc8 <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 8001454:	2100      	movs	r1, #0
 8001456:	2028      	movs	r0, #40	; 0x28
 8001458:	f000 f824 	bl	80014a4 <sendByte>
	HAL_Delay(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f001 fcb3 	bl	8002dc8 <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8001462:	2100      	movs	r1, #0
 8001464:	2008      	movs	r0, #8
 8001466:	f000 f81d 	bl	80014a4 <sendByte>
	HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f001 fcac 	bl	8002dc8 <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8001470:	2100      	movs	r1, #0
 8001472:	2001      	movs	r0, #1
 8001474:	f000 f816 	bl	80014a4 <sendByte>
	HAL_Delay(2);
 8001478:	2002      	movs	r0, #2
 800147a:	f001 fca5 	bl	8002dc8 <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 800147e:	2100      	movs	r1, #0
 8001480:	2006      	movs	r0, #6
 8001482:	f000 f80f 	bl	80014a4 <sendByte>
	HAL_Delay(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f001 fc9e 	bl	8002dc8 <HAL_Delay>
	sendByte(DISPLAY_ON, 0);// включаем дисплей и убираем курсор
 800148c:	2100      	movs	r1, #0
 800148e:	200c      	movs	r0, #12
 8001490:	f000 f808 	bl	80014a4 <sendByte>
	HAL_Delay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f001 fc97 	bl	8002dc8 <HAL_Delay>



}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020400 	.word	0x40020400

080014a4 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	216f      	movs	r1, #111	; 0x6f
 80014b4:	4841      	ldr	r0, [pc, #260]	; (80015bc <sendByte+0x118>)
 80014b6:	f003 fcd1 	bl	8004e5c <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <sendByte+0x28>
 80014c0:	2201      	movs	r2, #1
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	483d      	ldr	r0, [pc, #244]	; (80015bc <sendByte+0x118>)
 80014c6:	f003 fcc9 	bl	8004e5c <HAL_GPIO_WritePin>
 80014ca:	e004      	b.n	80014d6 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 80014cc:	2200      	movs	r2, #0
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	483a      	ldr	r0, [pc, #232]	; (80015bc <sendByte+0x118>)
 80014d2:	f003 fcc3 	bl	8004e5c <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da04      	bge.n	80014e8 <sendByte+0x44>
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	4836      	ldr	r0, [pc, #216]	; (80015bc <sendByte+0x118>)
 80014e4:	f003 fcba 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <sendByte+0x58>
 80014f2:	2201      	movs	r2, #1
 80014f4:	2104      	movs	r1, #4
 80014f6:	4831      	ldr	r0, [pc, #196]	; (80015bc <sendByte+0x118>)
 80014f8:	f003 fcb0 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <sendByte+0x6c>
 8001506:	2201      	movs	r2, #1
 8001508:	2102      	movs	r1, #2
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <sendByte+0x118>)
 800150c:	f003 fca6 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <sendByte+0x80>
 800151a:	2201      	movs	r2, #1
 800151c:	2101      	movs	r1, #1
 800151e:	4827      	ldr	r0, [pc, #156]	; (80015bc <sendByte+0x118>)
 8001520:	f003 fc9c 	bl	8004e5c <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2120      	movs	r1, #32
 8001528:	4824      	ldr	r0, [pc, #144]	; (80015bc <sendByte+0x118>)
 800152a:	f003 fc97 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f001 fc4a 	bl	8002dc8 <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8001534:	2200      	movs	r2, #0
 8001536:	2120      	movs	r1, #32
 8001538:	4820      	ldr	r0, [pc, #128]	; (80015bc <sendByte+0x118>)
 800153a:	f003 fc8f 	bl	8004e5c <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	212f      	movs	r1, #47	; 0x2f
 8001542:	481e      	ldr	r0, [pc, #120]	; (80015bc <sendByte+0x118>)
 8001544:	f003 fc8a 	bl	8004e5c <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2120      	movs	r1, #32
 800154c:	481b      	ldr	r0, [pc, #108]	; (80015bc <sendByte+0x118>)
 800154e:	f003 fc85 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <sendByte+0xc2>
 800155c:	2201      	movs	r2, #1
 800155e:	2108      	movs	r1, #8
 8001560:	4816      	ldr	r0, [pc, #88]	; (80015bc <sendByte+0x118>)
 8001562:	f003 fc7b 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <sendByte+0xd6>
 8001570:	2201      	movs	r2, #1
 8001572:	2104      	movs	r1, #4
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <sendByte+0x118>)
 8001576:	f003 fc71 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <sendByte+0xea>
 8001584:	2201      	movs	r2, #1
 8001586:	2102      	movs	r1, #2
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <sendByte+0x118>)
 800158a:	f003 fc67 	bl	8004e5c <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <sendByte+0xfe>
 8001598:	2201      	movs	r2, #1
 800159a:	2101      	movs	r1, #1
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <sendByte+0x118>)
 800159e:	f003 fc5d 	bl	8004e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <sendByte+0x118>)
 80015a8:	f003 fc58 	bl	8004e5c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f001 fc0b 	bl	8002dc8 <HAL_Delay>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40020400 	.word	0x40020400

080015c0 <sendStr>:


void sendStr( char *str, int row , int position )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
	char start_address;

	switch (row)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d817      	bhi.n	8001604 <sendStr+0x44>
 80015d4:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <sendStr+0x1c>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015f3 	.word	0x080015f3
 80015e4:	080015f9 	.word	0x080015f9
 80015e8:	080015ff 	.word	0x080015ff
	{

		case 1:
			start_address = 0x0; // 1 строка
 80015ec:	2300      	movs	r3, #0
 80015ee:	75fb      	strb	r3, [r7, #23]
			break;
 80015f0:	e008      	b.n	8001604 <sendStr+0x44>

		case 2:
			start_address = 0x40; // 2 строка
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	75fb      	strb	r3, [r7, #23]
			break;
 80015f6:	e005      	b.n	8001604 <sendStr+0x44>

		case 3:
			start_address = 0x14; // 3 строка
 80015f8:	2314      	movs	r3, #20
 80015fa:	75fb      	strb	r3, [r7, #23]
			break;
 80015fc:	e002      	b.n	8001604 <sendStr+0x44>

		case 4:
			start_address = 0x54; // 4 строка
 80015fe:	2354      	movs	r3, #84	; 0x54
 8001600:	75fb      	strb	r3, [r7, #23]
			break;
 8001602:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	4413      	add	r3, r2
 800160c:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001614:	75fb      	strb	r3, [r7, #23]
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff42 	bl	80014a4 <sendByte>

	HAL_Delay(4);
 8001620:	2004      	movs	r0, #4
 8001622:	f001 fbd1 	bl	8002dc8 <HAL_Delay>
	while(*str != '\0'){
 8001626:	e008      	b.n	800163a <sendStr+0x7a>

		sendByte(*str, 1);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff38 	bl	80014a4 <sendByte>
		str++;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
	while(*str != '\0'){
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f2      	bne.n	8001628 <sendStr+0x68>
	}
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 8001652:	f000 fa6b 	bl	8001b2c <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f001 fb75 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 f833 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f000 f91d 	bl	800189c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001662:	f000 f89f 	bl	80017a4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001666:	f000 f8f1 	bl	800184c <MX_DMA_Init>
  MX_USART6_UART_Init();
 800166a:	f000 f8c5 	bl	80017f8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800166e:	f7ff fed3 	bl	8001418 <lcd_init>
  ethernet_reset();
 8001672:	f7ff fa59 	bl	8000b28 <ethernet_reset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2101      	movs	r1, #1
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fc2d 	bl	8007ee4 <osSemaphoreCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <main+0x6c>)
 800168e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <main+0x70>)
 8001692:	1d3c      	adds	r4, r7, #4
 8001694:	461d      	mov	r5, r3
 8001696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800169e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 fb1f 	bl	8007cea <osThreadCreate>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <main+0x74>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016b2:	f006 fb03 	bl	8007cbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <main+0x6a>
 80016b8:	20000734 	.word	0x20000734
 80016bc:	08019974 	.word	0x08019974
 80016c0:	20000730 	.word	0x20000730

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f016 ff76 	bl	80185c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <SystemClock_Config+0xd8>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a2a      	ldr	r2, [pc, #168]	; (800179c <SystemClock_Config+0xd8>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <SystemClock_Config+0xd8>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <SystemClock_Config+0xdc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <SystemClock_Config+0xdc>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <SystemClock_Config+0xdc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001734:	2319      	movs	r3, #25
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001742:	2304      	movs	r3, #4
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fba0 	bl	8004e90 <HAL_RCC_OscConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001756:	f000 f9db 	bl	8001b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175a:	230f      	movs	r3, #15
 800175c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2105      	movs	r1, #5
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fe01 	bl	8005380 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001784:	f000 f9c4 	bl	8001b10 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800178e:	2000      	movs	r0, #0
 8001790:	f003 fedc 	bl	800554c <HAL_RCC_MCOConfig>
}
 8001794:	bf00      	nop
 8001796:	3750      	adds	r7, #80	; 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <MX_USART1_UART_Init+0x50>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017dc:	f004 faf8 	bl	8005dd0 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017e6:	f000 f993 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200005e8 	.word	0x200005e8
 80017f4:	40011000 	.word	0x40011000

080017f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_USART6_UART_Init+0x50>)
 8001800:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 8001804:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001808:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART6_UART_Init+0x4c>)
 8001830:	f004 face 	bl	8005dd0 <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800183a:	f000 f969 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000062c 	.word	0x2000062c
 8001848:	40011400 	.word	0x40011400

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_DMA_Init+0x4c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <MX_DMA_Init+0x4c>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <MX_DMA_Init+0x4c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2105      	movs	r1, #5
 8001872:	2039      	movs	r0, #57	; 0x39
 8001874:	f001 fb84 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001878:	2039      	movs	r0, #57	; 0x39
 800187a:	f001 fb9d 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	203a      	movs	r0, #58	; 0x3a
 8001884:	f001 fb7c 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001888:	203a      	movs	r0, #58	; 0x3a
 800188a:	f001 fb95 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a7f      	ldr	r2, [pc, #508]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	4b79      	ldr	r3, [pc, #484]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a78      	ldr	r2, [pc, #480]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b72      	ldr	r3, [pc, #456]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a71      	ldr	r2, [pc, #452]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a63      	ldr	r2, [pc, #396]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a5c      	ldr	r2, [pc, #368]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <MX_GPIO_Init+0x21c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2101      	movs	r1, #1
 800195e:	4857      	ldr	r0, [pc, #348]	; (8001abc <MX_GPIO_Init+0x220>)
 8001960:	f003 fa7c 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8001964:	2200      	movs	r2, #0
 8001966:	f24c 417f 	movw	r1, #50303	; 0xc47f
 800196a:	4855      	ldr	r0, [pc, #340]	; (8001ac0 <MX_GPIO_Init+0x224>)
 800196c:	f003 fa76 	bl	8004e5c <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8001970:	2200      	movs	r2, #0
 8001972:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001976:	4853      	ldr	r0, [pc, #332]	; (8001ac4 <MX_GPIO_Init+0x228>)
 8001978:	f003 fa70 	bl	8004e5c <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001982:	4851      	ldr	r0, [pc, #324]	; (8001ac8 <MX_GPIO_Init+0x22c>)
 8001984:	f003 fa6a 	bl	8004e5c <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198e:	484f      	ldr	r0, [pc, #316]	; (8001acc <MX_GPIO_Init+0x230>)
 8001990:	f003 fa64 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8001994:	237f      	movs	r3, #127	; 0x7f
 8001996:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199c:	2301      	movs	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4847      	ldr	r0, [pc, #284]	; (8001ac4 <MX_GPIO_Init+0x228>)
 80019a8:	f003 f8a4 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 80019ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4842      	ldr	r0, [pc, #264]	; (8001acc <MX_GPIO_Init+0x230>)
 80019c2:	f003 f897 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERESET_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ERESET_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4837      	ldr	r0, [pc, #220]	; (8001abc <MX_GPIO_Init+0x220>)
 80019de:	f003 f889 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 80019e2:	f24c 437f 	movw	r3, #50303	; 0xc47f
 80019e6:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4831      	ldr	r0, [pc, #196]	; (8001ac0 <MX_GPIO_Init+0x224>)
 80019fc:	f003 f87a 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8001a00:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a04:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	482a      	ldr	r0, [pc, #168]	; (8001ac4 <MX_GPIO_Init+0x228>)
 8001a1a:	f003 f86b 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8001a1e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a22:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	4824      	ldr	r0, [pc, #144]	; (8001ac8 <MX_GPIO_Init+0x22c>)
 8001a38:	f003 f85c 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	481d      	ldr	r0, [pc, #116]	; (8001acc <MX_GPIO_Init+0x230>)
 8001a56:	f003 f84d 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_GPIO_Init+0x220>)
 8001a78:	f003 f83c 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 8001a7c:	233f      	movs	r3, #63	; 0x3f
 8001a7e:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a84:	2302      	movs	r3, #2
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <MX_GPIO_Init+0x22c>)
 8001a90:	f003 f830 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8001a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_GPIO_Init+0x224>)
 8001aaa:	f003 f823 	bl	8004af4 <HAL_GPIO_Init>

}
 8001aae:	bf00      	nop
 8001ab0:	3730      	adds	r7, #48	; 0x30
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40020800 	.word	0x40020800

08001ad0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001ad8:	f005 fbaa 	bl	8007230 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 8001adc:	f7ff f91a 	bl	8000d14 <task_init>

  /* Infinite loop */
  for(;;)
  {
	main_process();
 8001ae0:	f000 f81b 	bl	8001b1a <main_process>
    osDelay(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f006 f94c 	bl	8007d82 <osDelay>
	main_process();
 8001aea:	e7f9      	b.n	8001ae0 <StartDefaultTask+0x10>

08001aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001afe:	f001 f943 	bl	8002d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>

08001b1a <main_process>:
 */
#include <string.h>
#include <dio.h>

void main_process()
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
	Read_Inputs();
 8001b1e:	f7fe fd41 	bl	80005a4 <Read_Inputs>
	Write_Outputs();
 8001b22:	f7fe fe8b 	bl	800083c <Write_Outputs>
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <ModbusInit+0x38>)
 8001b32:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <ModbusInit+0x3c>)
 8001b34:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <ModbusInit+0x40>)
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <ModbusInit+0x44>)
 8001b3a:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <ModbusInit+0x48>)
 8001b3e:	2237      	movs	r2, #55	; 0x37
 8001b40:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <ModbusInit+0x4c>)
 8001b44:	222a      	movs	r2, #42	; 0x2a
 8001b46:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <ModbusInit+0x3c>)
 8001b4a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <ModbusInit+0x2e>
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <ModbusInit+0x3c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000738 	.word	0x20000738
 8001b68:	20000744 	.word	0x20000744
 8001b6c:	2000073c 	.word	0x2000073c
 8001b70:	200007b4 	.word	0x200007b4
 8001b74:	20000740 	.word	0x20000740
 8001b78:	20000742 	.word	0x20000742

08001b7c <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	461a      	mov	r2, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	817b      	strh	r3, [r7, #10]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	727b      	strb	r3, [r7, #9]
	settings.data[37]++;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <ModbusParse+0xb0>)
 8001b92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001b96:	3301      	adds	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <ModbusParse+0xb0>)
 8001b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <ModbusParse+0x2e>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e03c      	b.n	8001c24 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	7a7a      	ldrb	r2, [r7, #9]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f83d 	bl	8001c30 <CheckRequestLength>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <ModbusParse+0x44>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e031      	b.n	8001c24 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8001bc0:	7a7b      	ldrb	r3, [r7, #9]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f857 	bl	8001c78 <CheckMbAddr>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <ModbusParse+0x58>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e027      	b.n	8001c24 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8001bd4:	7a7b      	ldrb	r3, [r7, #9]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f875 	bl	8001cc8 <IsCorrectMbCommand>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8001be4:	7a7b      	ldrb	r3, [r7, #9]
 8001be6:	2201      	movs	r2, #1
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f8a0 	bl	8001d30 <SetInvalidCommand>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	e017      	b.n	8001c24 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	7a7a      	ldrb	r2, [r7, #9]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f941 	bl	8001e82 <CheckCrc>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8001c06:	7a7b      	ldrb	r3, [r7, #9]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f88f 	bl	8001d30 <SetInvalidCommand>
 8001c12:	4603      	mov	r3, r0
 8001c14:	e006      	b.n	8001c24 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8001c16:	7a7b      	ldrb	r3, [r7, #9]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f965 	bl	8001eec <GetModbusAnswer>
 8001c22:	4603      	mov	r3, r0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000744 	.word	0x20000744

08001c30 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <CheckRequestLength+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e010      	b.n	8001c6a <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	3205      	adds	r2, #5
 8001c54:	7812      	ldrb	r2, [r2, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	799b      	ldrb	r3, [r3, #6]
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e005      	b.n	8001ca2 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.mb_addr;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <CheckMbAddr+0x4c>)
 8001ca8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000744 	.word	0x20000744

08001cc8 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d103      	bne.n	8001ce6 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	79db      	ldrb	r3, [r3, #7]
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e005      	b.n	8001cf2 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	bf8c      	ite	hi
 8001cf8:	2201      	movhi	r2, #1
 8001cfa:	2200      	movls	r2, #0
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d10c      	bne.n	8001d1c <IsCorrectMbCommand+0x54>
 8001d02:	2201      	movs	r2, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <IsCorrectMbCommand+0x64>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf14      	ite	ne
 8001d0e:	2301      	movne	r3, #1
 8001d10:	2300      	moveq	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8001d1c:	2300      	movs	r3, #0
	}
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	00010058 	.word	0x00010058

08001d30 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	460b      	mov	r3, r1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	4613      	mov	r3, r2
 8001d44:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2107      	movs	r1, #7
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fc0e 	bl	8000574 <set_bit>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11d      	bne.n	8001d9e <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8001d62:	2300      	movs	r3, #0
 8001d64:	82bb      	strh	r3, [r7, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3301      	adds	r3, #1
 8001d72:	7dfa      	ldrb	r2, [r7, #23]
 8001d74:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	79fa      	ldrb	r2, [r7, #7]
 8001d7c:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2203      	movs	r2, #3
 8001d84:	4619      	mov	r1, r3
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f000 f832 	bl	8001df0 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3303      	adds	r3, #3
 8001d90:	7d3a      	ldrb	r2, [r7, #20]
 8001d92:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3304      	adds	r3, #4
 8001d98:	7d7a      	ldrb	r2, [r7, #21]
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e01c      	b.n	8001dd8 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d119      	bne.n	8001dd8 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8001da4:	2208      	movs	r2, #8
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	f016 fbe3 	bl	8018574 <memcpy>
		*(answer+4) = 0;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3305      	adds	r3, #5
 8001dba:	2203      	movs	r2, #3
 8001dbc:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	3307      	adds	r3, #7
 8001dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	79fa      	ldrb	r2, [r7, #7]
 8001dd6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <SetInvalidCommand+0xb2>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e000      	b.n	8001de4 <SetInvalidCommand+0xb4>
 8001de2:	2309      	movs	r3, #9
 8001de4:	75bb      	strb	r3, [r7, #22]
	return len;
 8001de6:	7dbb      	ldrb	r3, [r7, #22]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8001dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e02:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8001e04:	f24a 0301 	movw	r3, #40961	; 0xa001
 8001e08:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	e023      	b.n	8001e58 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	8bfb      	ldrh	r3, [r7, #30]
 8001e1c:	4053      	eors	r3, r2
 8001e1e:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e012      	b.n	8001e4c <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8001e26:	8bfb      	ldrh	r3, [r7, #30]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <CRC16_CALC+0x50>
					reg>>=1;
 8001e30:	8bfb      	ldrh	r3, [r7, #30]
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8001e36:	8bfa      	ldrh	r2, [r7, #30]
 8001e38:	8a7b      	ldrh	r3, [r7, #18]
 8001e3a:	4053      	eors	r3, r2
 8001e3c:	83fb      	strh	r3, [r7, #30]
 8001e3e:	e002      	b.n	8001e46 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b07      	cmp	r3, #7
 8001e50:	dde9      	ble.n	8001e26 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbd7      	blt.n	8001e10 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8001e6e:	8bfb      	ldrh	r3, [r7, #30]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	701a      	strb	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <CheckCrc+0x18>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e024      	b.n	8001ee4 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	dc01      	bgt.n	8001ea8 <CheckCrc+0x26>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e01d      	b.n	8001ee4 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3b02      	subs	r3, #2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff ff9a 	bl	8001df0 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3b02      	subs	r3, #2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	7d3b      	ldrb	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d109      	bne.n	8001ee0 <CheckCrc+0x5e>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	7d7b      	ldrb	r3, [r7, #21]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d101      	bne.n	8001ee0 <CheckCrc+0x5e>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <CheckCrc+0x60>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <GetModbusAnswer+0x1a>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	e001      	b.n	8001f0a <GetModbusAnswer+0x1e>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	79db      	ldrb	r3, [r3, #7]
 8001f0a:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	3b03      	subs	r3, #3
 8001f10:	2b0d      	cmp	r3, #13
 8001f12:	d849      	bhi.n	8001fa8 <GetModbusAnswer+0xbc>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <GetModbusAnswer+0x30>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f55 	.word	0x08001f55
 8001f20:	08001f6f 	.word	0x08001f6f
 8001f24:	08001fa9 	.word	0x08001fa9
 8001f28:	08001f89 	.word	0x08001f89
 8001f2c:	08001fa9 	.word	0x08001fa9
 8001f30:	08001fa9 	.word	0x08001fa9
 8001f34:	08001fa9 	.word	0x08001fa9
 8001f38:	08001fa9 	.word	0x08001fa9
 8001f3c:	08001fa9 	.word	0x08001fa9
 8001f40:	08001fa9 	.word	0x08001fa9
 8001f44:	08001fa9 	.word	0x08001fa9
 8001f48:	08001fa9 	.word	0x08001fa9
 8001f4c:	08001fa9 	.word	0x08001fa9
 8001f50:	08001f99 	.word	0x08001f99
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <GetModbusAnswer+0xc8>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <GetModbusAnswer+0xcc>)
 8001f5a:	8819      	ldrh	r1, [r3, #0]
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	460b      	mov	r3, r1
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f831 	bl	8001fcc <ReadRegisters>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	e01e      	b.n	8001fac <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <GetModbusAnswer+0xd0>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <GetModbusAnswer+0xd4>)
 8001f74:	8819      	ldrh	r1, [r3, #0]
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f824 	bl	8001fcc <ReadRegisters>
 8001f84:	4603      	mov	r3, r0
 8001f86:	e011      	b.n	8001fac <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <GetModbusAnswer+0xd8>)
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f9dc 	bl	800234c <WriteToHoldings>
 8001f94:	4603      	mov	r3, r0
 8001f96:	e009      	b.n	8001fac <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <GetModbusAnswer+0xdc>)
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f9d4 	bl	800234c <WriteToHoldings>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	e001      	b.n	8001fac <GetModbusAnswer+0xc0>
		default:
			break;
 8001fa8:	bf00      	nop
	}
	return 0;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000738 	.word	0x20000738
 8001fb8:	20000740 	.word	0x20000740
 8001fbc:	2000073c 	.word	0x2000073c
 8001fc0:	20000742 	.word	0x20000742
 8001fc4:	080021ad 	.word	0x080021ad
 8001fc8:	08002251 	.word	0x08002251

08001fcc <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8001fe0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <ReadRegisters+0x20>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e000      	b.n	8001fee <ReadRegisters+0x22>
 8001fec:	2308      	movs	r3, #8
 8001fee:	4619      	mov	r1, r3
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f882 	bl	80020fa <GetWordFromBytes>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8001ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <ReadRegisters+0x3a>
 8002002:	2304      	movs	r3, #4
 8002004:	e000      	b.n	8002008 <ReadRegisters+0x3c>
 8002006:	230a      	movs	r3, #10
 8002008:	4619      	mov	r1, r3
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f875 	bl	80020fa <GetWordFromBytes>
 8002010:	4603      	mov	r3, r0
 8002012:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8002014:	8bba      	ldrh	r2, [r7, #28]
 8002016:	8b7b      	ldrh	r3, [r7, #26]
 8002018:	4413      	add	r3, r2
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	429a      	cmp	r2, r3
 8002020:	dd08      	ble.n	8002034 <ReadRegisters+0x68>
 8002022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002026:	2202      	movs	r2, #2
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff fe80 	bl	8001d30 <SetInvalidCommand>
 8002030:	4603      	mov	r3, r0
 8002032:	e05e      	b.n	80020f2 <ReadRegisters+0x126>
	if(source==ETHERNET)
 8002034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002038:	2b01      	cmp	r3, #1
 800203a:	d124      	bne.n	8002086 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 800203c:	2208      	movs	r2, #8
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	68b8      	ldr	r0, [r7, #8]
 8002042:	f016 fa97 	bl	8018574 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 8002046:	8b7b      	ldrh	r3, [r7, #26]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	3303      	adds	r3, #3
 800204e:	b29a      	uxth	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3304      	adds	r3, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 f86a 	bl	8002130 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 800205c:	8b7b      	ldrh	r3, [r7, #26]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	3308      	adds	r3, #8
 8002064:	0052      	lsls	r2, r2, #1
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 800206a:	8bbb      	ldrh	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	18d0      	adds	r0, r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3309      	adds	r3, #9
 8002076:	8b7a      	ldrh	r2, [r7, #26]
 8002078:	4619      	mov	r1, r3
 800207a:	f000 f869 	bl	8002150 <InsertWordsToMemory>
		return 9+reg_count*2;
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3309      	adds	r3, #9
 8002084:	e035      	b.n	80020f2 <ReadRegisters+0x126>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8002090:	8b7b      	ldrh	r3, [r7, #26]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3302      	adds	r3, #2
 8002098:	0052      	lsls	r2, r2, #1
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 800209e:	8bbb      	ldrh	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	18d0      	adds	r0, r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3303      	adds	r3, #3
 80020aa:	8b7a      	ldrh	r2, [r7, #26]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f000 f84f 	bl	8002150 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80020b2:	2300      	movs	r3, #0
 80020b4:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 80020b6:	8b7b      	ldrh	r3, [r7, #26]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	3303      	adds	r3, #3
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	4619      	mov	r1, r3
 80020c8:	68b8      	ldr	r0, [r7, #8]
 80020ca:	f7ff fe91 	bl	8001df0 <CRC16_CALC>
		int offset = 3+reg_count*2;
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	3303      	adds	r3, #3
 80020d4:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	4413      	add	r3, r2
 80020dc:	7c3a      	ldrb	r2, [r7, #16]
 80020de:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	7c7a      	ldrb	r2, [r7, #17]
 80020ea:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 80020ec:	8b7b      	ldrh	r3, [r7, #26]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	3305      	adds	r3, #5

	}
	return 0;
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b29a      	uxth	r2, r3
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	3301      	adds	r3, #1
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	440b      	add	r3, r1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4413      	add	r3, r2
 8002122:	b29b      	uxth	r3, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	2201      	movs	r2, #1
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f804 	bl	8002150 <InsertWordsToMemory>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e014      	b.n	8002192 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	441a      	add	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	440b      	add	r3, r1
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	441a      	add	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	440b      	add	r3, r1
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3302      	adds	r3, #2
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbe5      	blt.n	8002168 <InsertWordsToMemory+0x18>
    }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <WriteSingleRegister+0x9c>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	3b01      	subs	r3, #1
 80021c0:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <WriteSingleRegister+0x20>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e000      	b.n	80021ce <WriteSingleRegister+0x22>
 80021cc:	2308      	movs	r3, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff ff92 	bl	80020fa <GetWordFromBytes>
 80021d6:	4603      	mov	r3, r0
 80021d8:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80021da:	8aba      	ldrh	r2, [r7, #20]
 80021dc:	8afb      	ldrh	r3, [r7, #22]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d907      	bls.n	80021f2 <WriteSingleRegister+0x46>
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2202      	movs	r2, #2
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fda1 	bl	8001d30 <SetInvalidCommand>
 80021ee:	4603      	mov	r3, r0
 80021f0:	e026      	b.n	8002240 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d112      	bne.n	800221e <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f103 000a 	add.w	r0, r3, #10
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <WriteSingleRegister+0xa0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	8aba      	ldrh	r2, [r7, #20]
 8002204:	0052      	lsls	r2, r2, #1
 8002206:	4413      	add	r3, r2
 8002208:	2201      	movs	r2, #1
 800220a:	4619      	mov	r1, r3
 800220c:	f7ff ffa0 	bl	8002150 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 8002210:	220c      	movs	r2, #12
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	68b8      	ldr	r0, [r7, #8]
 8002216:	f016 f9ad 	bl	8018574 <memcpy>
    	return 12;
 800221a:	230c      	movs	r3, #12
 800221c:	e010      	b.n	8002240 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1d18      	adds	r0, r3, #4
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <WriteSingleRegister+0xa0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	8aba      	ldrh	r2, [r7, #20]
 8002228:	0052      	lsls	r2, r2, #1
 800222a:	4413      	add	r3, r2
 800222c:	2201      	movs	r2, #1
 800222e:	4619      	mov	r1, r3
 8002230:	f7ff ff8e 	bl	8002150 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 8002234:	2208      	movs	r2, #8
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f016 f99b 	bl	8018574 <memcpy>
    	return 8;
 800223e:	2308      	movs	r3, #8
    }
    return 0;
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000740 	.word	0x20000740
 800224c:	20000738 	.word	0x20000738

08002250 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <WrieMultiplyRegisters+0xf4>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	3b01      	subs	r3, #1
 8002264:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <WrieMultiplyRegisters+0x20>
 800226c:	2302      	movs	r3, #2
 800226e:	e000      	b.n	8002272 <WrieMultiplyRegisters+0x22>
 8002270:	2308      	movs	r3, #8
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ff40 	bl	80020fa <GetWordFromBytes>
 800227a:	4603      	mov	r3, r0
 800227c:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <WrieMultiplyRegisters+0x38>
 8002284:	2304      	movs	r3, #4
 8002286:	e000      	b.n	800228a <WrieMultiplyRegisters+0x3a>
 8002288:	230a      	movs	r3, #10
 800228a:	4619      	mov	r1, r3
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff34 	bl	80020fa <GetWordFromBytes>
 8002292:	4603      	mov	r3, r0
 8002294:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8002296:	8aba      	ldrh	r2, [r7, #20]
 8002298:	8a7b      	ldrh	r3, [r7, #18]
 800229a:	4413      	add	r3, r2
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	8afb      	ldrh	r3, [r7, #22]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dd07      	ble.n	80022b4 <WrieMultiplyRegisters+0x64>
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2202      	movs	r2, #2
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fd40 	bl	8001d30 <SetInvalidCommand>
 80022b0:	4603      	mov	r3, r0
 80022b2:	e042      	b.n	800233a <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d11d      	bne.n	80022f6 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 80022ba:	220c      	movs	r2, #12
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f016 f958 	bl	8018574 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 80022c4:	8a7b      	ldrh	r3, [r7, #18]
 80022c6:	3302      	adds	r3, #2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f7ff ff2b 	bl	8002130 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f103 000d 	add.w	r0, r3, #13
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <WrieMultiplyRegisters+0xf8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	8aba      	ldrh	r2, [r7, #20]
 80022e6:	0052      	lsls	r2, r2, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	8a7a      	ldrh	r2, [r7, #18]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7ff ff2f 	bl	8002150 <InsertWordsToMemory>
        return 12;
 80022f2:	230c      	movs	r3, #12
 80022f4:	e021      	b.n	800233a <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 80022f6:	2206      	movs	r2, #6
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	68b8      	ldr	r0, [r7, #8]
 80022fc:	f016 f93a 	bl	8018574 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8002300:	2300      	movs	r3, #0
 8002302:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2206      	movs	r2, #6
 800230a:	4619      	mov	r1, r3
 800230c:	68b8      	ldr	r0, [r7, #8]
 800230e:	f7ff fd6f 	bl	8001df0 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3306      	adds	r3, #6
 8002316:	7c3a      	ldrb	r2, [r7, #16]
 8002318:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3307      	adds	r3, #7
 800231e:	7c7a      	ldrb	r2, [r7, #17]
 8002320:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1dd8      	adds	r0, r3, #7
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <WrieMultiplyRegisters+0xf8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	8aba      	ldrh	r2, [r7, #20]
 800232c:	0052      	lsls	r2, r2, #1
 800232e:	4413      	add	r3, r2
 8002330:	8a7a      	ldrh	r2, [r7, #18]
 8002332:	4619      	mov	r1, r3
 8002334:	f7ff ff0c 	bl	8002150 <InsertWordsToMemory>
		return 8;
 8002338:	2308      	movs	r3, #8
    }
    return 0;
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000740 	.word	0x20000740
 8002348:	20000738 	.word	0x20000738

0800234c <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <WriteToHoldings+0x50>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d014      	beq.n	8002392 <WriteToHoldings+0x46>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <WriteToHoldings+0x50>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002370:	4618      	mov	r0, r3
 8002372:	f005 fde9 	bl	8007f48 <osSemaphoreWait>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <WriteToHoldings+0x46>
		{
			result =  (*write)(request,answer,source);
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	4798      	blx	r3
 8002386:	6178      	str	r0, [r7, #20]
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <WriteToHoldings+0x50>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f005 fe29 	bl	8007fe4 <osSemaphoreRelease>
		}
	}
	return result;
 8002392:	697b      	ldr	r3, [r7, #20]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000734 	.word	0x20000734

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_MspInit+0x54>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_MspInit+0x54>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_MspInit+0x54>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_MspInit+0x54>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_MspInit+0x54>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_MspInit+0x54>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	210f      	movs	r1, #15
 80023e2:	f06f 0001 	mvn.w	r0, #1
 80023e6:	f000 fdcb 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	; 0x30
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_UART_MspInit+0x1c0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d163      	bne.n	80024e2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	4b60      	ldr	r3, [pc, #384]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a5f      	ldr	r2, [pc, #380]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002464:	2307      	movs	r3, #7
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	4619      	mov	r1, r3
 800246e:	4854      	ldr	r0, [pc, #336]	; (80025c0 <HAL_UART_MspInit+0x1c8>)
 8002470:	f002 fb40 	bl	8004af4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 8002476:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_UART_MspInit+0x1d0>)
 8002478:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800247a:	4b52      	ldr	r3, [pc, #328]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 800247c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002480:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002482:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002488:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 8002490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002494:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249c:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ae:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024b4:	4843      	ldr	r0, [pc, #268]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 80024b6:	f000 fd8d 	bl	8002fd4 <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80024c0:	f7ff fb26 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_UART_MspInit+0x1cc>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2105      	movs	r1, #5
 80024d4:	2025      	movs	r0, #37	; 0x25
 80024d6:	f000 fd53 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024da:	2025      	movs	r0, #37	; 0x25
 80024dc:	f000 fd6c 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024e0:	e066      	b.n	80025b0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a39      	ldr	r2, [pc, #228]	; (80025cc <HAL_UART_MspInit+0x1d4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d161      	bne.n	80025b0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	4a31      	ldr	r2, [pc, #196]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 80024f6:	f043 0320 	orr.w	r3, r3, #32
 80024fa:	6453      	str	r3, [r2, #68]	; 0x44
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6313      	str	r3, [r2, #48]	; 0x30
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_UART_MspInit+0x1c4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002534:	2308      	movs	r3, #8
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4619      	mov	r1, r3
 800253e:	4824      	ldr	r0, [pc, #144]	; (80025d0 <HAL_UART_MspInit+0x1d8>)
 8002540:	f002 fad8 	bl	8004af4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_UART_MspInit+0x1e0>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 800254c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002550:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002564:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002584:	4813      	ldr	r0, [pc, #76]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002586:	f000 fd25 	bl	8002fd4 <HAL_DMA_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002590:	f7ff fabe 	bl	8001b10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_UART_MspInit+0x1dc>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2105      	movs	r1, #5
 80025a4:	2047      	movs	r0, #71	; 0x47
 80025a6:	f000 fceb 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025aa:	2047      	movs	r0, #71	; 0x47
 80025ac:	f000 fd04 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 80025b0:	bf00      	nop
 80025b2:	3730      	adds	r7, #48	; 0x30
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	20000670 	.word	0x20000670
 80025c8:	40026440 	.word	0x40026440
 80025cc:	40011400 	.word	0x40011400
 80025d0:	40020800 	.word	0x40020800
 80025d4:	200006d0 	.word	0x200006d0
 80025d8:	40026428 	.word	0x40026428

080025dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	2019      	movs	r0, #25
 80025f2:	f000 fcc5 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025f6:	2019      	movs	r0, #25
 80025f8:	f000 fcde 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_InitTick+0xa4>)
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_InitTick+0xa4>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6453      	str	r3, [r2, #68]	; 0x44
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_InitTick+0xa4>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002618:	f107 0210 	add.w	r2, r7, #16
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f003 f8f4 	bl	8005810 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002628:	f003 f8de 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 800262c:	4603      	mov	r3, r0
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_InitTick+0xa8>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	3b01      	subs	r3, #1
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_InitTick+0xac>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_InitTick+0xb0>)
 8002644:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_InitTick+0xac>)
 8002648:	f240 32e7 	movw	r2, #999	; 0x3e7
 800264c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_InitTick+0xac>)
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_InitTick+0xac>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_InitTick+0xac>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002660:	4809      	ldr	r0, [pc, #36]	; (8002688 <HAL_InitTick+0xac>)
 8002662:	f003 f907 	bl	8005874 <HAL_TIM_Base_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <HAL_InitTick+0xac>)
 800266e:	f003 f95b 	bl	8005928 <HAL_TIM_Base_Start_IT>
 8002672:	4603      	mov	r3, r0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3730      	adds	r7, #48	; 0x30
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	431bde83 	.word	0x431bde83
 8002688:	20000808 	.word	0x20000808
 800268c:	40010000 	.word	0x40010000

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <NMI_Handler+0x4>

08002696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269a:	e7fe      	b.n	800269a <HardFault_Handler+0x4>

0800269c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <MemManage_Handler+0x4>

080026a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <BusFault_Handler+0x4>

080026a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <UsageFault_Handler+0x4>

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026c2:	f003 f9a1 	bl	8005a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000808 	.word	0x20000808

080026d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <USART1_IRQHandler+0x10>)
 80026d6:	f003 fcbf 	bl	8006058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200005e8 	.word	0x200005e8

080026e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <DMA2_Stream1_IRQHandler+0x10>)
 80026ea:	f000 fe0b 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200006d0 	.word	0x200006d0

080026f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <DMA2_Stream2_IRQHandler+0x10>)
 80026fe:	f000 fe01 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000670 	.word	0x20000670

0800270c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <ETH_IRQHandler+0x10>)
 8002712:	f001 fc41 	bl	8003f98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20003c78 	.word	0x20003c78

08002720 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <USART6_IRQHandler+0x10>)
 8002726:	f003 fc97 	bl	8006058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000062c 	.word	0x2000062c

08002734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	return 1;
 8002738:	2301      	movs	r3, #1
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_kill>:

int _kill(int pid, int sig)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <_kill+0x20>)
 8002750:	2216      	movs	r2, #22
 8002752:	601a      	str	r2, [r3, #0]
	return -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	2000da30 	.word	0x2000da30

08002768 <_exit>:

void _exit (int status)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffe5 	bl	8002744 <_kill>
	while (1) {}		/* Make sure we hang here */
 800277a:	e7fe      	b.n	800277a <_exit+0x12>

0800277c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e00a      	b.n	80027a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800278e:	f3af 8000 	nop.w
 8002792:	4601      	mov	r1, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	b2ca      	uxtb	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf0      	blt.n	800278e <_read+0x12>
	}

return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e009      	b.n	80027dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbf1      	blt.n	80027c8 <_write+0x12>
	}
	return len;
 80027e4:	687b      	ldr	r3, [r7, #4]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_close>:

int _close(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	return -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002816:	605a      	str	r2, [r3, #4]
	return 0;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_isatty>:

int _isatty(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return 1;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <_sbrk+0x5c>)
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <_sbrk+0x60>)
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <_sbrk+0x64>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <_sbrk+0x68>)
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d205      	bcs.n	8002894 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <_sbrk+0x6c>)
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e009      	b.n	80028a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a06      	ldr	r2, [pc, #24]	; (80028bc <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	20020000 	.word	0x20020000
 80028b8:	00000400 	.word	0x00000400
 80028bc:	20000850 	.word	0x20000850
 80028c0:	2000da38 	.word	0x2000da38
 80028c4:	2000da30 	.word	0x2000da30

080028c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <SystemInit+0x20>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <SystemInit+0x20>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <uart_thread>:
static void StartReciveUartAll();
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);


void uart_thread(void *argument)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	StartReciveUartAll();
 80028f4:	f000 f82c 	bl	8002950 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <uart_thread+0x60>)
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	4618      	mov	r0, r3
 8002906:	f005 fe3f 	bl	8008588 <osMailGet>
		if(event.status == osEventMail)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b20      	cmp	r3, #32
 800290e:	d1f3      	bne.n	80028f8 <uart_thread+0xc>
		{
			int result = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8002918:	69b8      	ldr	r0, [r7, #24]
 800291a:	f000 f8c5 	bl	8002aa8 <RecognizePacket>
 800291e:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <uart_thread+0x4c>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	68d8      	ldr	r0, [r3, #12]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	b292      	uxth	r2, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f000 f8ec 	bl	8002b10 <Transmit>
			StartReceive(1);
 8002938:	2001      	movs	r0, #1
 800293a:	f000 f81d 	bl	8002978 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 800293e:	4b03      	ldr	r3, [pc, #12]	; (800294c <uart_thread+0x60>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	4618      	mov	r0, r3
 8002946:	f005 fe93 	bl	8008670 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 800294a:	e7d5      	b.n	80028f8 <uart_thread+0xc>
 800294c:	20000130 	.word	0x20000130

08002950 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	e005      	b.n	8002968 <StartReciveUartAll+0x18>
		StartReceive(i);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f80b 	bl	8002978 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3301      	adds	r3, #1
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	ddf6      	ble.n	800295c <StartReciveUartAll+0xc>
	}
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <StartReceive>:


static void StartReceive(int index)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	switch (index) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <StartReceive+0x16>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d016      	beq.n	80029ba <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 800298c:	e02e      	b.n	80029ec <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <StartReceive+0x7c>)
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d124      	bne.n	80029e6 <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 800299c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a0:	4915      	ldr	r1, [pc, #84]	; (80029f8 <StartReceive+0x80>)
 80029a2:	4814      	ldr	r0, [pc, #80]	; (80029f4 <StartReceive+0x7c>)
 80029a4:	f003 faf3 	bl	8005f8e <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <StartReceive+0x84>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <StartReceive+0x84>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
			break;
 80029b8:	e015      	b.n	80029e6 <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <StartReceive+0x88>)
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d110      	bne.n	80029ea <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 80029c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029cc:	490d      	ldr	r1, [pc, #52]	; (8002a04 <StartReceive+0x8c>)
 80029ce:	480c      	ldr	r0, [pc, #48]	; (8002a00 <StartReceive+0x88>)
 80029d0:	f003 fadd 	bl	8005f8e <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <StartReceive+0x90>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <StartReceive+0x90>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0208 	bic.w	r2, r2, #8
 80029e2:	601a      	str	r2, [r3, #0]
			break;
 80029e4:	e001      	b.n	80029ea <StartReceive+0x72>
			break;
 80029e6:	bf00      	nop
 80029e8:	e000      	b.n	80029ec <StartReceive+0x74>
			break;
 80029ea:	bf00      	nop
	}
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200005e8 	.word	0x200005e8
 80029f8:	20000854 	.word	0x20000854
 80029fc:	20000670 	.word	0x20000670
 8002a00:	2000062c 	.word	0x2000062c
 8002a04:	20000954 	.word	0x20000954
 8002a08:	200006d0 	.word	0x200006d0

08002a0c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_UARTEx_RxEventCallback+0x84>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d105      	bne.n	8002a36 <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_UARTEx_RxEventCallback+0x88>)
 8002a2c:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7ff ffa2 	bl	8002978 <StartReceive>
 8002a34:	e008      	b.n	8002a48 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d120      	bne.n	8002a82 <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_UARTEx_RxEventCallback+0x90>)
 8002a42:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_UARTEx_RxEventCallback+0x94>)
 8002a46:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_UARTEx_RxEventCallback+0x98>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 fd46 	bl	80084e0 <osMailAlloc>
 8002a54:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d014      	beq.n	8002a86 <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_UARTEx_RxEventCallback+0x98>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68f9      	ldr	r1, [r7, #12]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 fd46 	bl	800850c <osMailPut>
 8002a80:	e002      	b.n	8002a88 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 8002a86:	bf00      	nop
}
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40011000 	.word	0x40011000
 8002a94:	20000854 	.word	0x20000854
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	20000954 	.word	0x20000954
 8002aa0:	20000a54 	.word	0x20000a54
 8002aa4:	20000130 	.word	0x20000130

08002aa8 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	int result = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <RecognizePacket+0x18>
 8002abc:	2300      	movs	r3, #0
 8002abe:	e01e      	b.n	8002afe <RecognizePacket+0x56>
	if(request->huart->Instance==USART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <RecognizePacket+0x60>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <RecognizePacket+0x28>
	{
		// Написать обработку пакета от АЦП
		return 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e016      	b.n	8002afe <RecognizePacket+0x56>
	}
	else if (request->huart->Instance==USART6) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <RecognizePacket+0x64>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10f      	bne.n	8002afc <RecognizePacket+0x54>
		if(request->output_pointer == NULL)return 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <RecognizePacket+0x40>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e00a      	b.n	8002afe <RecognizePacket+0x56>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8919      	ldrh	r1, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	2300      	movs	r3, #0
 8002af6:	f7ff f841 	bl	8001b7c <ModbusParse>
 8002afa:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8002afc:	68fb      	ldr	r3, [r7, #12]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400

08002b10 <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <Transmit+0x48>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d112      	bne.n	8002b4e <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b2e:	480b      	ldr	r0, [pc, #44]	; (8002b5c <Transmit+0x4c>)
 8002b30:	f002 f994 	bl	8004e5c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f003 f994 	bl	8005e6a <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <Transmit+0x4c>)
 8002b4a:	f002 f987 	bl	8004e5c <HAL_GPIO_WritePin>

	}
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40011400 	.word	0x40011400
 8002b5c:	40020800 	.word	0x40020800

08002b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b66:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b7c:	4c0b      	ldr	r4, [pc, #44]	; (8002bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b8a:	f7ff fe9d 	bl	80028c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f015 fcb5 	bl	80184fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b92:	f7fe fd5b 	bl	800164c <main>
  bx  lr    
 8002b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba0:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002ba4:	0801d188 	.word	0x0801d188
  ldr r2, =_sbss
 8002ba8:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8002bac:	2000da34 	.word	0x2000da34

08002bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb0:	e7fe      	b.n	8002bb0 <ADC_IRQHandler>

08002bb2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc0:	b672      	cpsid	i
}
 8002bc2:	bf00      	nop
 8002bc4:	f7fe ffa4 	bl	8001b10 <Error_Handler>
 8002bc8:	e7fe      	b.n	8002bc8 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e007      	b.n	8002be0 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d9f4      	bls.n	8002bd0 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	721a      	strb	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c02:	b672      	cpsid	i
}
 8002c04:	bf00      	nop
 8002c06:	f7fe ff83 	bl	8001b10 <Error_Handler>
 8002c0a:	e7fe      	b.n	8002c0a <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7a1b      	ldrb	r3, [r3, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d904      	bls.n	8002c1e <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
 8002c18:	f7fe ff7a 	bl	8001b10 <Error_Handler>
 8002c1c:	e7fe      	b.n	8002c1c <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7a1b      	ldrb	r3, [r3, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	b2d1      	uxtb	r1, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	7211      	strb	r1, [r2, #8]
 8002c2a:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c2c:	f3ef 8211 	mrs	r2, BASEPRI
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	60fa      	str	r2, [r7, #12]
 8002c42:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c62:	b672      	cpsid	i
}
 8002c64:	bf00      	nop
 8002c66:	f7fe ff53 	bl	8001b10 <Error_Handler>
 8002c6a:	e7fe      	b.n	8002c6a <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7a1b      	ldrb	r3, [r3, #8]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7a1b      	ldrb	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d904      	bls.n	8002c8a <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
 8002c84:	f7fe ff44 	bl	8001b10 <Error_Handler>
 8002c88:	e7fe      	b.n	8002c88 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7a1b      	ldrb	r3, [r3, #8]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c96:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c9e:	bf00      	nop
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <__retarget_lock_init_recursive+0x48>)
 8002cb8:	2216      	movs	r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
    return;
 8002cbc:	e015      	b.n	8002cea <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002cbe:	200c      	movs	r0, #12
 8002cc0:	f015 fc40 	bl	8018544 <malloc>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff6a 	bl	8002bb2 <stm32_lock_init>
    return;
 8002cde:	e004      	b.n	8002cea <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002ce4:	f7fe ff14 	bl	8001b10 <Error_Handler>
 8002ce8:	e7fe      	b.n	8002ce8 <__retarget_lock_init_recursive+0x40>
}
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000da30 	.word	0x2000da30

08002cf4 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d02:	b672      	cpsid	i
}
 8002d04:	bf00      	nop
 8002d06:	f7fe ff03 	bl	8001b10 <Error_Handler>
 8002d0a:	e7fe      	b.n	8002d0a <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff70 	bl	8002bf4 <stm32_lock_acquire>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2a:	b672      	cpsid	i
}
 8002d2c:	bf00      	nop
 8002d2e:	f7fe feef 	bl	8001b10 <Error_Handler>
 8002d32:	e7fe      	b.n	8002d32 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff8c 	bl	8002c54 <stm32_lock_release>
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <HAL_Init+0x40>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_Init+0x40>)
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_Init+0x40>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	f000 f8fc 	bl	8002f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d72:	200f      	movs	r0, #15
 8002d74:	f7ff fc32 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d78:	f7ff fb12 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00

08002d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_IncTick+0x20>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_IncTick+0x24>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_IncTick+0x24>)
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	2000009c 	.word	0x2000009c
 8002dac:	20000b78 	.word	0x20000b78

08002db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_GetTick+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000b78 	.word	0x20000b78

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff ffee 	bl	8002db0 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d005      	beq.n	8002dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_Delay+0x44>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dee:	bf00      	nop
 8002df0:	f7ff ffde 	bl	8002db0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8f7      	bhi.n	8002df0 <HAL_Delay+0x28>
  {
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000009c 	.word	0x2000009c

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4c 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f92:	f7ff ff61 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7ff ffb1 	bl	8002f04 <NVIC_EncodePriority>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff80 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff54 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff fee6 	bl	8002db0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e099      	b.n	8003124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003010:	e00f      	b.n	8003032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7ff fecd 	bl	8002db0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d908      	bls.n	8003032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e078      	b.n	8003124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e8      	bne.n	8003012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4b38      	ldr	r3, [pc, #224]	; (800312c <HAL_DMA_Init+0x158>)
 800304c:	4013      	ands	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b04      	cmp	r3, #4
 800308a:	d107      	bne.n	800309c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4313      	orrs	r3, r2
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d117      	bne.n	80030f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb01 	bl	80036e0 <DMA_CheckFifoParam>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030f2:	2301      	movs	r3, #1
 80030f4:	e016      	b.n	8003124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fab8 	bl	8003674 <DMA_CalcBaseAndBitshift>
 8003104:	4603      	mov	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	223f      	movs	r2, #63	; 0x3f
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	f010803f 	.word	0xf010803f

08003130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_DMA_Start_IT+0x26>
 8003152:	2302      	movs	r3, #2
 8003154:	e040      	b.n	80031d8 <HAL_DMA_Start_IT+0xa8>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12f      	bne.n	80031ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa4a 	bl	8003618 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	223f      	movs	r2, #63	; 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0216 	orr.w	r2, r2, #22
 800319e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0208 	orr.w	r2, r2, #8
 80031b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e005      	b.n	80031d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ee:	f7ff fddf 	bl	8002db0 <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d008      	beq.n	8003212 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e052      	b.n	80032b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0216 	bic.w	r2, r2, #22
 8003220:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003230:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_DMA_Abort+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0208 	bic.w	r2, r2, #8
 8003250:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003262:	e013      	b.n	800328c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003264:	f7ff fda4 	bl	8002db0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b05      	cmp	r3, #5
 8003270:	d90c      	bls.n	800328c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2203      	movs	r2, #3
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e015      	b.n	80032b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e4      	bne.n	8003264 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	223f      	movs	r2, #63	; 0x3f
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e00c      	b.n	80032f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2205      	movs	r2, #5
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003310:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_DMA_IRQHandler+0x248>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a8e      	ldr	r2, [pc, #568]	; (8003550 <HAL_DMA_IRQHandler+0x24c>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2208      	movs	r2, #8
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01a      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2208      	movs	r2, #8
 800335e:	409a      	lsls	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2204      	movs	r2, #4
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2210      	movs	r2, #16
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d043      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2210      	movs	r2, #16
 8003400:	409a      	lsls	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d018      	beq.n	8003446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d024      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e01f      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e016      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0208 	bic.w	r2, r2, #8
 8003462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	2220      	movs	r2, #32
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 808f 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8087 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	2220      	movs	r2, #32
 800349c:	409a      	lsls	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d136      	bne.n	800351c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_IRQHandler+0x1da>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
        }
        return;
 800351a:	e079      	b.n	8003610 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	2b00      	cmp	r3, #0
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e02c      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
 800354a:	bf00      	nop
 800354c:	20000094 	.word	0x20000094
 8003550:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
 8003564:	e01e      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2205      	movs	r2, #5
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d307      	bcc.n	80035ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f2      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x2cc>
 80035ea:	e000      	b.n	80035ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e000      	b.n	8003612 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003610:	bf00      	nop
    }
  }
}
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003634:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d108      	bne.n	8003658 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003656:	e007      	b.n	8003668 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b10      	subs	r3, #16
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <DMA_CalcBaseAndBitshift+0x68>)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d909      	bls.n	80036b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	659a      	str	r2, [r3, #88]	; 0x58
 80036b4:	e007      	b.n	80036c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	aaaaaaab 	.word	0xaaaaaaab
 80036dc:	0801cef8 	.word	0x0801cef8

080036e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11f      	bne.n	800373a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d856      	bhi.n	80037ae <DMA_CheckFifoParam+0xce>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <DMA_CheckFifoParam+0x28>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003719 	.word	0x08003719
 800370c:	0800372b 	.word	0x0800372b
 8003710:	08003719 	.word	0x08003719
 8003714:	080037af 	.word	0x080037af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d046      	beq.n	80037b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003728:	e043      	b.n	80037b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003732:	d140      	bne.n	80037b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003738:	e03d      	b.n	80037b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	d121      	bne.n	8003788 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d837      	bhi.n	80037ba <DMA_CheckFifoParam+0xda>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <DMA_CheckFifoParam+0x70>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003761 	.word	0x08003761
 8003754:	08003767 	.word	0x08003767
 8003758:	08003761 	.word	0x08003761
 800375c:	08003779 	.word	0x08003779
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e030      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d025      	beq.n	80037be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003776:	e022      	b.n	80037be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003780:	d11f      	bne.n	80037c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003786:	e01c      	b.n	80037c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d903      	bls.n	8003796 <DMA_CheckFifoParam+0xb6>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d003      	beq.n	800379c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003794:	e018      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      break;
 800379a:	e015      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e00b      	b.n	80037c6 <DMA_CheckFifoParam+0xe6>
      break;
 80037ae:	bf00      	nop
 80037b0:	e00a      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e008      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e006      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e004      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
    }
  } 
  
  return status; 
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop

080037d8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80037e8:	4ba1      	ldr	r3, [pc, #644]	; (8003a70 <HAL_ETH_Init+0x298>)
 80037ea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e182      	b.n	8003b04 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f003 fe58 	bl	80074c8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	4b95      	ldr	r3, [pc, #596]	; (8003a74 <HAL_ETH_Init+0x29c>)
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <HAL_ETH_Init+0x29c>)
 8003822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003826:	6453      	str	r3, [r2, #68]	; 0x44
 8003828:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <HAL_ETH_Init+0x29c>)
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003834:	4b90      	ldr	r3, [pc, #576]	; (8003a78 <HAL_ETH_Init+0x2a0>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a8f      	ldr	r2, [pc, #572]	; (8003a78 <HAL_ETH_Init+0x2a0>)
 800383a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800383e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003840:	4b8d      	ldr	r3, [pc, #564]	; (8003a78 <HAL_ETH_Init+0x2a0>)
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	498b      	ldr	r1, [pc, #556]	; (8003a78 <HAL_ETH_Init+0x2a0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003864:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003866:	f7ff faa3 	bl	8002db0 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800386c:	e011      	b.n	8003892 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800386e:	f7ff fa9f 	bl	8002db0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800387c:	d909      	bls.n	8003892 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e138      	b.n	8003b04 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e4      	bne.n	800386e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f023 031c 	bic.w	r3, r3, #28
 80038b2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80038b4:	f001 ff78 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80038b8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4a6f      	ldr	r2, [pc, #444]	; (8003a7c <HAL_ETH_Init+0x2a4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d908      	bls.n	80038d4 <HAL_ETH_Init+0xfc>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4a6e      	ldr	r2, [pc, #440]	; (8003a80 <HAL_ETH_Init+0x2a8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d804      	bhi.n	80038d4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e027      	b.n	8003924 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <HAL_ETH_Init+0x2a8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d908      	bls.n	80038ee <HAL_ETH_Init+0x116>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4a64      	ldr	r2, [pc, #400]	; (8003a70 <HAL_ETH_Init+0x298>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d204      	bcs.n	80038ee <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f043 030c 	orr.w	r3, r3, #12
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	e01a      	b.n	8003924 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <HAL_ETH_Init+0x298>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d303      	bcc.n	80038fe <HAL_ETH_Init+0x126>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <HAL_ETH_Init+0x2ac>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d911      	bls.n	8003922 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4a60      	ldr	r2, [pc, #384]	; (8003a84 <HAL_ETH_Init+0x2ac>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d908      	bls.n	8003918 <HAL_ETH_Init+0x140>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4a5f      	ldr	r2, [pc, #380]	; (8003a88 <HAL_ETH_Init+0x2b0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d804      	bhi.n	8003918 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e005      	b.n	8003924 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f043 0310 	orr.w	r3, r3, #16
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e000      	b.n	8003924 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003922:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800392c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003930:	2100      	movs	r1, #0
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fc10 	bl	8004158 <HAL_ETH_WritePHYRegister>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003942:	6939      	ldr	r1, [r7, #16]
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fdc5 	bl	80044d4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0d6      	b.n	8003b04 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003956:	20ff      	movs	r0, #255	; 0xff
 8003958:	f7ff fa36 	bl	8002dc8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80a4 	beq.w	8003aae <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003966:	f7ff fa23 	bl	8002db0 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	461a      	mov	r2, r3
 8003972:	2101      	movs	r1, #1
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fb87 	bl	8004088 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800397a:	f7ff fa19 	bl	8002db0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d90f      	bls.n	80039ac <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003990:	6939      	ldr	r1, [r7, #16]
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fd9e 	bl	80044d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0ab      	b.n	8003b04 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0da      	beq.n	800396c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80039b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039ba:	2100      	movs	r1, #0
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fbcb 	bl	8004158 <HAL_ETH_WritePHYRegister>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80039cc:	6939      	ldr	r1, [r7, #16]
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fd80 	bl	80044d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80039dc:	2301      	movs	r3, #1
 80039de:	e091      	b.n	8003b04 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80039e0:	f7ff f9e6 	bl	8002db0 <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	461a      	mov	r2, r3
 80039ec:	2101      	movs	r1, #1
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fb4a 	bl	8004088 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80039f4:	f7ff f9dc 	bl	8002db0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d90f      	bls.n	8003a26 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003a0a:	6939      	ldr	r1, [r7, #16]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fd61 	bl	80044d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e06e      	b.n	8003b04 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0da      	beq.n	80039e6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	461a      	mov	r2, r3
 8003a36:	2110      	movs	r1, #16
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fb25 	bl	8004088 <HAL_ETH_ReadPHYRegister>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003a48:	6939      	ldr	r1, [r7, #16]
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fd42 	bl	80044d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e053      	b.n	8003b04 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e010      	b.n	8003a92 <HAL_ETH_Init+0x2ba>
 8003a70:	03938700 	.word	0x03938700
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	01312cff 	.word	0x01312cff
 8003a80:	02160ebf 	.word	0x02160ebf
 8003a84:	05f5e0ff 	.word	0x05f5e0ff
 8003a88:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	e026      	b.n	8003af2 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	e021      	b.n	8003af2 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	08db      	lsrs	r3, r3, #3
 8003ab4:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fb46 	bl	8004158 <HAL_ETH_WritePHYRegister>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fcfb 	bl	80044d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00c      	b.n	8003b04 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003aea:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003aee:	f7ff f96b 	bl	8002dc8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003af2:	6939      	ldr	r1, [r7, #16]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fced 	bl	80044d4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_ETH_DMATxDescListInit+0x20>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e051      	b.n	8003bd0 <HAL_ETH_DMATxDescListInit+0xc4>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e030      	b.n	8003baa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	015b      	lsls	r3, r3, #5
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	4413      	add	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b58:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d208      	bcs.n	8003b9e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	015b      	lsls	r3, r3, #5
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	4413      	add	r3, r2
 8003b96:	461a      	mov	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	e002      	b.n	8003ba4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3ca      	bcc.n	8003b48 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bbc:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_ETH_DMARxDescListInit+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e055      	b.n	8003ca8 <HAL_ETH_DMARxDescListInit+0xcc>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e034      	b.n	8003c82 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	015b      	lsls	r3, r3, #5
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	4413      	add	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c28:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003c30:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d208      	bcs.n	8003c76 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	015b      	lsls	r3, r3, #5
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	461a      	mov	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e002      	b.n	8003c7c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3c6      	bcc.n	8003c18 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c94:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ETH_TransmitFrame+0x24>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e0cc      	b.n	8003e72 <HAL_ETH_TransmitFrame+0x1be>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0b7      	b.n	8003e72 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	da09      	bge.n	8003d20 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2212      	movs	r2, #18
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0a8      	b.n	8003e72 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d915      	bls.n	8003d56 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_ETH_TransmitFrame+0x1cc>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0a9b      	lsrs	r3, r3, #10
 8003d34:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_ETH_TransmitFrame+0x1cc>)
 8003d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	3301      	adds	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e001      	b.n	8003d5a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003d56:	2301      	movs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d11c      	bne.n	8003d9a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003d6e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003d7a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d8a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	461a      	mov	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d98:	e04b      	b.n	8003e32 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e044      	b.n	8003e2a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dae:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d107      	bne.n	8003dc6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dc4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003dce:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d116      	bne.n	8003e08 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003de8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_ETH_TransmitFrame+0x1d0>)
 8003dee:	fb03 f202 	mul.w	r2, r3, r2
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003dfa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003e06:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e16:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3301      	adds	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3b6      	bcc.n	8003da0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2304      	movs	r3, #4
 8003e50:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	ac02b00b 	.word	0xac02b00b
 8003e84:	fffffa0c 	.word	0xfffffa0c

08003e88 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e074      	b.n	8003f8c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003eb2:	e05a      	b.n	8003f6a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee4:	e041      	b.n	8003f6a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
 8003f0a:	e02e      	b.n	8003f6a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d103      	bne.n	8003f2e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f3a:	1f1a      	subs	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	461a      	mov	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e010      	b.n	8003f8c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	db02      	blt.n	8003f7a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d99c      	bls.n	8003eb4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d112      	bne.n	8003fd8 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f003 fb36 	bl	8007624 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd6:	e01a      	b.n	800400e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d111      	bne.n	800400e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f838 	bl	8004060 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004030:	d112      	bne.n	8004058 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f81e 	bl	8004074 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	460b      	mov	r3, r1
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b82      	cmp	r3, #130	; 0x82
 80040a8:	d101      	bne.n	80040ae <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
 80040ac:	e050      	b.n	8004150 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2282      	movs	r2, #130	; 0x82
 80040b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 031c 	and.w	r3, r3, #28
 80040c4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8a1b      	ldrh	r3, [r3, #16]
 80040ca:	02db      	lsls	r3, r3, #11
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f023 0302 	bic.w	r3, r3, #2
 80040e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80040fa:	f7fe fe59 	bl	8002db0 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004100:	e015      	b.n	800412e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004102:	f7fe fe55 	bl	8002db0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d309      	bcc.n	8004126 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e014      	b.n	8004150 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e4      	bne.n	8004102 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	460b      	mov	r3, r1
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b42      	cmp	r3, #66	; 0x42
 8004178:	d101      	bne.n	800417e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
 800417c:	e04e      	b.n	800421c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2242      	movs	r2, #66	; 0x42
 8004182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 031c 	and.w	r3, r3, #28
 8004194:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8a1b      	ldrh	r3, [r3, #16]
 800419a:	02db      	lsls	r3, r3, #11
 800419c:	b29b      	uxth	r3, r3
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	019b      	lsls	r3, r3, #6
 80041a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80041d4:	f7fe fdec 	bl	8002db0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041da:	e015      	b.n	8004208 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80041dc:	f7fe fde8 	bl	8002db0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d309      	bcc.n	8004200 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e00d      	b.n	800421c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e4      	bne.n	80041dc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_ETH_Start+0x16>
 8004236:	2302      	movs	r3, #2
 8004238:	e01f      	b.n	800427a <HAL_ETH_Start+0x56>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb40 	bl	80048d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fb77 	bl	8004944 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fc06 	bl	8004a68 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fbab 	bl	80049b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fbd4 	bl	8004a10 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_ETH_Stop+0x16>
 8004294:	2302      	movs	r3, #2
 8004296:	e01f      	b.n	80042d8 <HAL_ETH_Stop+0x56>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fb9b 	bl	80049e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fbc4 	bl	8004a3c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb62 	bl	800497e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fbd4 	bl	8004a68 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fb22 	bl	800490a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_ETH_ConfigMAC+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0e4      	b.n	80044c6 <HAL_ETH_ConfigMAC+0x1e6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80b1 	beq.w	8004476 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_ETH_ConfigMAC+0x1f0>)
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800432c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004332:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004338:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800433e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004344:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800434a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004350:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004356:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800435c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004362:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004368:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800436e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004386:	2001      	movs	r0, #1
 8004388:	f7fe fd1e 	bl	8002dc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800439c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80043a2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80043a8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80043ae:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80043b4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80043c6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80043c8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80043d2:	2001      	movs	r0, #1
 80043d4:	f7fe fcf8 	bl	8002dc8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043e8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043f2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004402:	4013      	ands	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004410:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004416:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800441c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004422:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004428:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004440:	2001      	movs	r0, #1
 8004442:	f7fe fcc1 	bl	8002dc8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004466:	2001      	movs	r0, #1
 8004468:	f7fe fcae 	bl	8002dc8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	61da      	str	r2, [r3, #28]
 8004474:	e01e      	b.n	80044b4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004484:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7fe fc8e 	bl	8002dc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	ff20810f 	.word	0xff20810f

080044d4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0b0      	sub	sp, #192	; 0xc0
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004502:	2300      	movs	r3, #0
 8004504:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800450a:	2300      	movs	r3, #0
 800450c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800451a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451e:	663b      	str	r3, [r7, #96]	; 0x60
 8004520:	e001      	b.n	8004526 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800452a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800452c:	2300      	movs	r3, #0
 800452e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004530:	2300      	movs	r3, #0
 8004532:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004540:	2340      	movs	r3, #64	; 0x40
 8004542:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80045a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045ac:	4baa      	ldr	r3, [pc, #680]	; (8004858 <ETH_MACDMAConfig+0x384>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80045b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80045b8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80045bc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80045be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80045c0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80045c6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80045c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80045ca:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80045cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80045ce:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80045d4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80045d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80045d8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80045da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80045dc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80045de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80045e0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80045e4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80045e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80045e8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80045ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004608:	2001      	movs	r0, #1
 800460a:	f7fe fbdd 	bl	8002dc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004616:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004618:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800461a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800461c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800461e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004620:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004626:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800462c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800462e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004632:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004638:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800463c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004644:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004646:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004652:	2001      	movs	r0, #1
 8004654:	f7fe fbb8 	bl	8002dc8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004660:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800466a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004674:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004684:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004688:	4013      	ands	r3, r2
 800468a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800468e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004692:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004698:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800469a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800469e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80046a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80046a4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80046a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80046aa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80046ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80046b0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80046b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046c4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7fe fb79 	bl	8002dc8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046de:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80046e0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80046e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046fa:	2001      	movs	r0, #1
 80046fc:	f7fe fb64 	bl	8002dc8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004708:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800470e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004712:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800471c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800472e:	2304      	movs	r3, #4
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800473c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800473e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004748:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800474e:	2300      	movs	r3, #0
 8004750:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004752:	2300      	movs	r3, #0
 8004754:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004764:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004768:	4b3c      	ldr	r3, [pc, #240]	; (800485c <ETH_MACDMAConfig+0x388>)
 800476a:	4013      	ands	r3, r2
 800476c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004770:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004772:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004774:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004776:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004778:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800477a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800477c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800477e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004780:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004782:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004784:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004786:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004788:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800478c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004790:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004792:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a4:	461a      	mov	r2, r3
 80047a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047aa:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047ba:	2001      	movs	r0, #1
 80047bc:	f7fe fb04 	bl	8002dc8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	461a      	mov	r2, r3
 80047ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ce:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80047d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80047d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80047d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80047dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80047e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80047e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80047e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80047ea:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047f8:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004808:	2001      	movs	r0, #1
 800480a:	f7fe fadd 	bl	8002dc8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004816:	461a      	mov	r2, r3
 8004818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800481c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10d      	bne.n	8004842 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004840:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	461a      	mov	r2, r3
 8004848:	2100      	movs	r1, #0
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f808 	bl	8004860 <ETH_MACAddressConfig>
}
 8004850:	bf00      	nop
 8004852:	37c0      	adds	r7, #192	; 0xc0
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	ff20810f 	.word	0xff20810f
 800485c:	f8de3f23 	.word	0xf8de3f23

08004860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3305      	adds	r3, #5
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	3204      	adds	r2, #4
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <ETH_MACAddressConfig+0x68>)
 8004882:	4413      	add	r3, r2
 8004884:	461a      	mov	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3303      	adds	r3, #3
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	061a      	lsls	r2, r3, #24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3302      	adds	r3, #2
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3301      	adds	r3, #1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	4313      	orrs	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <ETH_MACAddressConfig+0x6c>)
 80048b2:	4413      	add	r3, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40028040 	.word	0x40028040
 80048cc:	40028044 	.word	0x40028044

080048d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0208 	orr.w	r2, r2, #8
 80048ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f000 f8dd 	bl	8004ab4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	601a      	str	r2, [r3, #0]
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800492e:	2001      	movs	r0, #1
 8004930:	f000 f8c0 	bl	8004ab4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0204 	orr.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004968:	2001      	movs	r0, #1
 800496a:	f000 f8a3 	bl	8004ab4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0204 	bic.w	r2, r2, #4
 8004998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f000 f886 	bl	8004ab4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049d6:	6193      	str	r3, [r2, #24]
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a02:	6193      	str	r3, [r2, #24]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a2e:	6193      	str	r3, [r2, #24]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	f023 0302 	bic.w	r3, r3, #2
 8004a56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a5a:	6193      	str	r3, [r2, #24]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a8a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f000 f80b 	bl	8004ab4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aa8:	6193      	str	r3, [r2, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <ETH_Delay+0x38>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0b      	ldr	r2, [pc, #44]	; (8004af0 <ETH_Delay+0x3c>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004ad0:	bf00      	nop
  } 
  while (Delay --);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f9      	bne.n	8004ad0 <ETH_Delay+0x1c>
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000094 	.word	0x20000094
 8004af0:	10624dd3 	.word	0x10624dd3

08004af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e16b      	b.n	8004de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b10:	2201      	movs	r2, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4013      	ands	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	f040 815a 	bne.w	8004de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d005      	beq.n	8004b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d130      	bne.n	8004ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 0201 	and.w	r2, r3, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d017      	beq.n	8004be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d123      	bne.n	8004c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	08da      	lsrs	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3208      	adds	r2, #8
 8004bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	220f      	movs	r2, #15
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	08da      	lsrs	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3208      	adds	r2, #8
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	2203      	movs	r2, #3
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 0203 	and.w	r2, r3, #3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80b4 	beq.w	8004de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	4b60      	ldr	r3, [pc, #384]	; (8004e00 <HAL_GPIO_Init+0x30c>)
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	4a5f      	ldr	r2, [pc, #380]	; (8004e00 <HAL_GPIO_Init+0x30c>)
 8004c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c88:	6453      	str	r3, [r2, #68]	; 0x44
 8004c8a:	4b5d      	ldr	r3, [pc, #372]	; (8004e00 <HAL_GPIO_Init+0x30c>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c96:	4a5b      	ldr	r2, [pc, #364]	; (8004e04 <HAL_GPIO_Init+0x310>)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	089b      	lsrs	r3, r3, #2
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	220f      	movs	r2, #15
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a52      	ldr	r2, [pc, #328]	; (8004e08 <HAL_GPIO_Init+0x314>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02b      	beq.n	8004d1a <HAL_GPIO_Init+0x226>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a51      	ldr	r2, [pc, #324]	; (8004e0c <HAL_GPIO_Init+0x318>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d025      	beq.n	8004d16 <HAL_GPIO_Init+0x222>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a50      	ldr	r2, [pc, #320]	; (8004e10 <HAL_GPIO_Init+0x31c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <HAL_GPIO_Init+0x21e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a4f      	ldr	r2, [pc, #316]	; (8004e14 <HAL_GPIO_Init+0x320>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x21a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <HAL_GPIO_Init+0x324>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x216>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a4d      	ldr	r2, [pc, #308]	; (8004e1c <HAL_GPIO_Init+0x328>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x212>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4c      	ldr	r2, [pc, #304]	; (8004e20 <HAL_GPIO_Init+0x32c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x20e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a4b      	ldr	r2, [pc, #300]	; (8004e24 <HAL_GPIO_Init+0x330>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x20a>
 8004cfa:	2307      	movs	r3, #7
 8004cfc:	e00e      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	e00c      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d02:	2306      	movs	r3, #6
 8004d04:	e00a      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d06:	2305      	movs	r3, #5
 8004d08:	e008      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	e006      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e004      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e002      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_GPIO_Init+0x228>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	f002 0203 	and.w	r2, r2, #3
 8004d22:	0092      	lsls	r2, r2, #2
 8004d24:	4093      	lsls	r3, r2
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d2c:	4935      	ldr	r1, [pc, #212]	; (8004e04 <HAL_GPIO_Init+0x310>)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	3302      	adds	r3, #2
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d5e:	4a32      	ldr	r2, [pc, #200]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d64:	4b30      	ldr	r3, [pc, #192]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d8e:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ddc:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <HAL_GPIO_Init+0x334>)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3301      	adds	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	f67f ae90 	bls.w	8004b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40013800 	.word	0x40013800
 8004e08:	40020000 	.word	0x40020000
 8004e0c:	40020400 	.word	0x40020400
 8004e10:	40020800 	.word	0x40020800
 8004e14:	40020c00 	.word	0x40020c00
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40021400 	.word	0x40021400
 8004e20:	40021800 	.word	0x40021800
 8004e24:	40021c00 	.word	0x40021c00
 8004e28:	40013c00 	.word	0x40013c00

08004e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	887b      	ldrh	r3, [r7, #2]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e001      	b.n	8004e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e6c:	787b      	ldrb	r3, [r7, #1]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e78:	e003      	b.n	8004e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	041a      	lsls	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e267      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d075      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eae:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b85      	ldr	r3, [pc, #532]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e242      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x74>
 8004ef6:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6f      	ldr	r2, [pc, #444]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6c      	ldr	r2, [pc, #432]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f28:	4b69      	ldr	r3, [pc, #420]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b66      	ldr	r3, [pc, #408]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd ff32 	bl	8002db0 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd ff2e 	bl	8002db0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e207      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fd ff1e 	bl	8002db0 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd ff1a 	bl	8002db0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1f3      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0xe8>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d063      	beq.n	800506e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d116      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1c7      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4937      	ldr	r1, [pc, #220]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	e03a      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd fed3 	bl	8002db0 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500e:	f7fd fecf 	bl	8002db0 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1a8      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4925      	ldr	r1, [pc, #148]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	e015      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd feb2 	bl	8002db0 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005050:	f7fd feae 	bl	8002db0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e187      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <HAL_RCC_OscConfig+0x248>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd fe92 	bl	8002db0 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd fe8e 	bl	8002db0 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e167      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x200>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_RCC_OscConfig+0x248>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd fe7b 	bl	8002db0 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	e00e      	b.n	80050dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050be:	f7fd fe77 	bl	8002db0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d907      	bls.n	80050dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e150      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470000 	.word	0x42470000
 80050d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ea      	bne.n	80050be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8097 	beq.w	8005224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b7d      	ldr	r3, [pc, #500]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4a7c      	ldr	r2, [pc, #496]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	; 0x40
 8005116:	4b7a      	ldr	r3, [pc, #488]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	4b77      	ldr	r3, [pc, #476]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005132:	4b74      	ldr	r3, [pc, #464]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fd fe37 	bl	8002db0 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fd fe33 	bl	8002db0 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e10c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x2ea>
 800516c:	4b64      	ldr	r3, [pc, #400]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a63      	ldr	r2, [pc, #396]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x30c>
 8005182:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	4a5e      	ldr	r2, [pc, #376]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	; 0x70
 800518e:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	; 0x70
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800519c:	4b58      	ldr	r3, [pc, #352]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a57      	ldr	r2, [pc, #348]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	4b55      	ldr	r3, [pc, #340]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	4a54      	ldr	r2, [pc, #336]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd fdf8 	bl	8002db0 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd fdf4 	bl	8002db0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0cb      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b49      	ldr	r3, [pc, #292]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCC_OscConfig+0x334>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fd fde2 	bl	8002db0 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fd fdde 	bl	8002db0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b5      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	4b3e      	ldr	r3, [pc, #248]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a38      	ldr	r2, [pc, #224]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522e:	4b34      	ldr	r3, [pc, #208]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d05c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d141      	bne.n	80052c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b31      	ldr	r3, [pc, #196]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd fdb2 	bl	8002db0 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd fdae 	bl	8002db0 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e087      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b27      	ldr	r3, [pc, #156]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	491b      	ldr	r1, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd fd87 	bl	8002db0 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd fd83 	bl	8002db0 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e05c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x416>
 80052c4:	e054      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd fd70 	bl	8002db0 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fd fd6c 	bl	8002db0 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e045      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x444>
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_RCC_OscConfig+0x4ec>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d028      	beq.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d121      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11a      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fd fc9e 	bl	8002db0 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fd fc9a 	bl	8002db0 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f889 	bl	800561c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd f858 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	0801cee0 	.word	0x0801cee0
 8005544:	20000094 	.word	0x20000094
 8005548:	20000098 	.word	0x20000098

0800554c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d129      	bne.n	80055b2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b28      	ldr	r3, [pc, #160]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800557a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800557e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005584:	2303      	movs	r3, #3
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800558c:	2300      	movs	r3, #0
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005590:	f107 031c 	add.w	r3, r7, #28
 8005594:	4619      	mov	r1, r3
 8005596:	481f      	ldr	r0, [pc, #124]	; (8005614 <HAL_RCC_MCOConfig+0xc8>)
 8005598:	f7ff faac 	bl	8004af4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	4919      	ldr	r1, [pc, #100]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80055b0:	e029      	b.n	8005606 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	4a15      	ldr	r2, [pc, #84]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6313      	str	r3, [r2, #48]	; 0x30
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80055ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d4:	2302      	movs	r3, #2
 80055d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d8:	2303      	movs	r3, #3
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80055e4:	f107 031c 	add.w	r3, r7, #28
 80055e8:	4619      	mov	r1, r3
 80055ea:	480b      	ldr	r0, [pc, #44]	; (8005618 <HAL_RCC_MCOConfig+0xcc>)
 80055ec:	f7ff fa82 	bl	8004af4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	00d9      	lsls	r1, r3, #3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	430b      	orrs	r3, r1
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCC_MCOConfig+0xc4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
}
 8005606:	bf00      	nop
 8005608:	3730      	adds	r7, #48	; 0x30
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40023800 	.word	0x40023800
 8005614:	40020000 	.word	0x40020000
 8005618:	40020800 	.word	0x40020800

0800561c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b090      	sub	sp, #64	; 0x40
 8005622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
 8005628:	2300      	movs	r3, #0
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562c:	2300      	movs	r3, #0
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005634:	4b59      	ldr	r3, [pc, #356]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b08      	cmp	r3, #8
 800563e:	d00d      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x40>
 8005640:	2b08      	cmp	r3, #8
 8005642:	f200 80a1 	bhi.w	8005788 <HAL_RCC_GetSysClockFreq+0x16c>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x34>
 800564a:	2b04      	cmp	r3, #4
 800564c:	d003      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x3a>
 800564e:	e09b      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005652:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005654:	e09b      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005656:	4b53      	ldr	r3, [pc, #332]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005658:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800565a:	e098      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800565c:	4b4f      	ldr	r3, [pc, #316]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005666:	4b4d      	ldr	r3, [pc, #308]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d028      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005672:	4b4a      	ldr	r3, [pc, #296]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	2200      	movs	r2, #0
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	627a      	str	r2, [r7, #36]	; 0x24
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005684:	2100      	movs	r1, #0
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005688:	fb03 f201 	mul.w	r2, r3, r1
 800568c:	2300      	movs	r3, #0
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	4413      	add	r3, r2
 8005694:	4a43      	ldr	r2, [pc, #268]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005696:	fba0 1202 	umull	r1, r2, r0, r2
 800569a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800569c:	460a      	mov	r2, r1
 800569e:	62ba      	str	r2, [r7, #40]	; 0x28
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	4413      	add	r3, r2
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	2200      	movs	r2, #0
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	61fa      	str	r2, [r7, #28]
 80056ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056b6:	f7fa fddb 	bl	8000270 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4613      	mov	r3, r2
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c2:	e053      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c4:	4b35      	ldr	r3, [pc, #212]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	2200      	movs	r2, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	617a      	str	r2, [r7, #20]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056d6:	f04f 0b00 	mov.w	fp, #0
 80056da:	4652      	mov	r2, sl
 80056dc:	465b      	mov	r3, fp
 80056de:	f04f 0000 	mov.w	r0, #0
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	0159      	lsls	r1, r3, #5
 80056e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ec:	0150      	lsls	r0, r2, #5
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	ebb2 080a 	subs.w	r8, r2, sl
 80056f6:	eb63 090b 	sbc.w	r9, r3, fp
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005706:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800570a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800570e:	ebb2 0408 	subs.w	r4, r2, r8
 8005712:	eb63 0509 	sbc.w	r5, r3, r9
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	00eb      	lsls	r3, r5, #3
 8005720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005724:	00e2      	lsls	r2, r4, #3
 8005726:	4614      	mov	r4, r2
 8005728:	461d      	mov	r5, r3
 800572a:	eb14 030a 	adds.w	r3, r4, sl
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	eb45 030b 	adc.w	r3, r5, fp
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005742:	4629      	mov	r1, r5
 8005744:	028b      	lsls	r3, r1, #10
 8005746:	4621      	mov	r1, r4
 8005748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800574c:	4621      	mov	r1, r4
 800574e:	028a      	lsls	r2, r1, #10
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	2200      	movs	r2, #0
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	60fa      	str	r2, [r7, #12]
 800575c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005760:	f7fa fd86 	bl	8000270 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4613      	mov	r3, r2
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	3301      	adds	r3, #1
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800577c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005786:	e002      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800578c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005790:	4618      	mov	r0, r3
 8005792:	3740      	adds	r7, #64	; 0x40
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	017d7840 	.word	0x017d7840

080057a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000094 	.word	0x20000094

080057c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c4:	f7ff fff0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4903      	ldr	r1, [pc, #12]	; (80057e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d6:	5ccb      	ldrb	r3, [r1, r3]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0801cef0 	.word	0x0801cef0

080057e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057ec:	f7ff ffdc 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	0b5b      	lsrs	r3, r3, #13
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <HAL_RCC_GetPCLK2Freq+0x24>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40023800 	.word	0x40023800
 800580c:	0801cef0 	.word	0x0801cef0

08005810 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	220f      	movs	r2, #15
 800581e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <HAL_RCC_GetClockConfig+0x5c>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0203 	and.w	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_RCC_GetClockConfig+0x5c>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <HAL_RCC_GetClockConfig+0x5c>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_GetClockConfig+0x5c>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	08db      	lsrs	r3, r3, #3
 800584a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <HAL_RCC_GetClockConfig+0x60>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0207 	and.w	r2, r3, #7
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800
 8005870:	40023c00 	.word	0x40023c00

08005874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e041      	b.n	800590a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f839 	bl	8005912 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 f9d8 	bl	8005c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d001      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04e      	b.n	80059de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_TIM_Base_Start_IT+0xc4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d01d      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d111      	bne.n	80059cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d010      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	e007      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40010400 	.word	0x40010400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40001800 	.word	0x40001800

08005a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0202 	mvn.w	r2, #2
 8005a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8ee 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8e0 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f8f1 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0204 	mvn.w	r2, #4
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8c4 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8b6 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f8c7 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0208 	mvn.w	r2, #8
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f89a 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f88c 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f89d 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d122      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d11b      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0210 	mvn.w	r2, #16
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2208      	movs	r2, #8
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f870 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f862 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f873 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb ffb0 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f902 	bl	8005dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f838 	bl	8005c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8cc 	bl	8005da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a40      	ldr	r2, [pc, #256]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c86:	d00f      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3d      	ldr	r2, [pc, #244]	; (8005d80 <TIM_Base_SetConfig+0x118>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3c      	ldr	r2, [pc, #240]	; (8005d84 <TIM_Base_SetConfig+0x11c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3b      	ldr	r2, [pc, #236]	; (8005d88 <TIM_Base_SetConfig+0x120>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a3a      	ldr	r2, [pc, #232]	; (8005d8c <TIM_Base_SetConfig+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02b      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d027      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2c      	ldr	r2, [pc, #176]	; (8005d80 <TIM_Base_SetConfig+0x118>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d023      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2b      	ldr	r2, [pc, #172]	; (8005d84 <TIM_Base_SetConfig+0x11c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01f      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <TIM_Base_SetConfig+0x120>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01b      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <TIM_Base_SetConfig+0x124>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d017      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a28      	ldr	r2, [pc, #160]	; (8005d90 <TIM_Base_SetConfig+0x128>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <TIM_Base_SetConfig+0x12c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a26      	ldr	r2, [pc, #152]	; (8005d98 <TIM_Base_SetConfig+0x130>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a25      	ldr	r2, [pc, #148]	; (8005d9c <TIM_Base_SetConfig+0x134>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a24      	ldr	r2, [pc, #144]	; (8005da0 <TIM_Base_SetConfig+0x138>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <TIM_Base_SetConfig+0x13c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0xf8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <TIM_Base_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d103      	bne.n	8005d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	615a      	str	r2, [r3, #20]
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800
 8005d9c:	40001800 	.word	0x40001800
 8005da0:	40001c00 	.word	0x40001c00
 8005da4:	40002000 	.word	0x40002000

08005da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e03f      	b.n	8005e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc fafe 	bl	80023f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	; 0x24
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 ff97 	bl	8006d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b08a      	sub	sp, #40	; 0x28
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d17c      	bne.n	8005f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_Transmit+0x2c>
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e075      	b.n	8005f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UART_Transmit+0x3e>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e06e      	b.n	8005f86 <HAL_UART_Transmit+0x11c>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2221      	movs	r2, #33	; 0x21
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ebe:	f7fc ff77 	bl	8002db0 <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Transmit+0x82>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005efc:	e02a      	b.n	8005f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fc53 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e036      	b.n	8005f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3302      	adds	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e007      	b.n	8005f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1cf      	bne.n	8005efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fc23 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e006      	b.n	8005f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e000      	b.n	8005f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b08c      	sub	sp, #48	; 0x30
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d152      	bne.n	800604e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e04b      	b.n	8006050 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e044      	b.n	8006050 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fc58 	bl	8006890 <UART_Start_Receive_DMA>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d12c      	bne.n	8006048 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d125      	bne.n	8006042 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	617b      	str	r3, [r7, #20]
   return(result);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f043 0310 	orr.w	r3, r3, #16
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602c:	627a      	str	r2, [r7, #36]	; 0x24
 800602e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6a39      	ldr	r1, [r7, #32]
 8006032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	61fb      	str	r3, [r7, #28]
   return(result);
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006040:	e002      	b.n	8006048 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800604c:	e000      	b.n	8006050 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	3730      	adds	r7, #48	; 0x30
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b0ba      	sub	sp, #232	; 0xe8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_UART_IRQHandler+0x66>
 80060aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fd8b 	bl	8006bd2 <UART_Receive_IT>
      return;
 80060bc:	e256      	b.n	800656c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80de 	beq.w	8006284 <HAL_UART_IRQHandler+0x22c>
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80d1 	beq.w	8006284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_UART_IRQHandler+0xae>
 80060ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f043 0201 	orr.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_UART_IRQHandler+0xd2>
 8006112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0202 	orr.w	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_UART_IRQHandler+0xf6>
 8006136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0204 	orr.w	r2, r3, #4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d011      	beq.n	800617e <HAL_UART_IRQHandler+0x126>
 800615a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f043 0208 	orr.w	r2, r3, #8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 81ed 	beq.w	8006562 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_UART_IRQHandler+0x14e>
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fd16 	bl	8006bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <HAL_UART_IRQHandler+0x17a>
 80061ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04f      	beq.n	8006272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fc1e 	bl	8006a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d141      	bne.n	800626a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3314      	adds	r3, #20
 80061ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3314      	adds	r3, #20
 800620e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006212:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800621e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800622a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1d9      	bne.n	80061e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	2b00      	cmp	r3, #0
 8006238:	d013      	beq.n	8006262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	4a7d      	ldr	r2, [pc, #500]	; (8006434 <HAL_UART_IRQHandler+0x3dc>)
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd f83a 	bl	80032c0 <HAL_DMA_Abort_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d016      	beq.n	8006280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00e      	b.n	8006280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9a4 	bl	80065b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e00a      	b.n	8006280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9a0 	bl	80065b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e006      	b.n	8006280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f99c 	bl	80065b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800627e:	e170      	b.n	8006562 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	bf00      	nop
    return;
 8006282:	e16e      	b.n	8006562 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 814a 	bne.w	8006522 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800628e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8143 	beq.w	8006522 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 813c 	beq.w	8006522 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	f040 80b4 	bne.w	8006438 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8140 	beq.w	8006566 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ee:	429a      	cmp	r2, r3
 80062f0:	f080 8139 	bcs.w	8006566 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006306:	f000 8088 	beq.w	800641a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800633a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006342:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800634e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1d9      	bne.n	800630a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3314      	adds	r3, #20
 8006376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800637a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800637e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800638c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e1      	bne.n	8006356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3314      	adds	r3, #20
 8006398:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e3      	bne.n	8006392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80063fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006402:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800640a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e3      	bne.n	80063d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	4618      	mov	r0, r3
 8006416:	f7fc fee3 	bl	80031e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006422:	b29b      	uxth	r3, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc faee 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006430:	e099      	b.n	8006566 <HAL_UART_IRQHandler+0x50e>
 8006432:	bf00      	nop
 8006434:	08006adb 	.word	0x08006adb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006440:	b29b      	uxth	r3, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 808b 	beq.w	800656a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8086 	beq.w	800656a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006482:	647a      	str	r2, [r7, #68]	; 0x44
 8006484:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e3      	bne.n	800645e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	623b      	str	r3, [r7, #32]
   return(result);
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3314      	adds	r3, #20
 80064b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ba:	633a      	str	r2, [r7, #48]	; 0x30
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e3      	bne.n	8006496 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0310 	bic.w	r3, r3, #16
 80064f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	69b9      	ldr	r1, [r7, #24]
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	617b      	str	r3, [r7, #20]
   return(result);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e3      	bne.n	80064dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fc fa76 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006520:	e023      	b.n	800656a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_UART_IRQHandler+0x4ea>
 800652e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fae1 	bl	8006b02 <UART_Transmit_IT>
    return;
 8006540:	e014      	b.n	800656c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00e      	beq.n	800656c <HAL_UART_IRQHandler+0x514>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb21 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 8006560:	e004      	b.n	800656c <HAL_UART_IRQHandler+0x514>
    return;
 8006562:	bf00      	nop
 8006564:	e002      	b.n	800656c <HAL_UART_IRQHandler+0x514>
      return;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_UART_IRQHandler+0x514>
      return;
 800656a:	bf00      	nop
  }
}
 800656c:	37e8      	adds	r7, #232	; 0xe8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop

08006574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b09c      	sub	sp, #112	; 0x70
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d172      	bne.n	80066c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e2:	2200      	movs	r2, #0
 80065e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006606:	65ba      	str	r2, [r7, #88]	; 0x58
 8006608:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800660c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e5      	bne.n	80065e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	667b      	str	r3, [r7, #100]	; 0x64
 8006632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3314      	adds	r3, #20
 8006638:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800663a:	647a      	str	r2, [r7, #68]	; 0x44
 800663c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	623b      	str	r3, [r7, #32]
   return(result);
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	663b      	str	r3, [r7, #96]	; 0x60
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800666e:	633a      	str	r2, [r7, #48]	; 0x30
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	2b01      	cmp	r3, #1
 8006690:	d119      	bne.n	80066c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f023 0310 	bic.w	r3, r3, #16
 80066a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066b2:	61fa      	str	r2, [r7, #28]
 80066b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	69b9      	ldr	r1, [r7, #24]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	617b      	str	r3, [r7, #20]
   return(result);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d106      	bne.n	80066dc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066d2:	4619      	mov	r1, r3
 80066d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066d6:	f7fc f999 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066da:	e002      	b.n	80066e2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066de:	f7ff ff53 	bl	8006588 <HAL_UART_RxCpltCallback>
}
 80066e2:	bf00      	nop
 80066e4:	3770      	adds	r7, #112	; 0x70
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d108      	bne.n	8006712 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	b29b      	uxth	r3, r3
 8006708:	4619      	mov	r1, r3
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7fc f97e 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006710:	e002      	b.n	8006718 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff ff42 	bl	800659c <HAL_UART_RxHalfCpltCallback>
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673c:	2b80      	cmp	r3, #128	; 0x80
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b21      	cmp	r3, #33	; 0x21
 8006752:	d108      	bne.n	8006766 <UART_DMAError+0x46>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006760:	68b8      	ldr	r0, [r7, #8]
 8006762:	f000 f92f 	bl	80069c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b22      	cmp	r3, #34	; 0x22
 8006786:	d108      	bne.n	800679a <UART_DMAError+0x7a>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2200      	movs	r2, #0
 8006792:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006794:	68b8      	ldr	r0, [r7, #8]
 8006796:	f000 f93d 	bl	8006a14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f043 0210 	orr.w	r2, r3, #16
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	f7ff ff02 	bl	80065b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b090      	sub	sp, #64	; 0x40
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4613      	mov	r3, r2
 80067c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c4:	e050      	b.n	8006868 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d04c      	beq.n	8006868 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d007      	beq.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80067d4:	f7fc faec 	bl	8002db0 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d241      	bcs.n	8006868 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006804:	637a      	str	r2, [r7, #52]	; 0x34
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800680a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3314      	adds	r3, #20
 800681e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	613b      	str	r3, [r7, #16]
   return(result);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006838:	623a      	str	r2, [r7, #32]
 800683a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	69f9      	ldr	r1, [r7, #28]
 800683e:	6a3a      	ldr	r2, [r7, #32]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	61bb      	str	r3, [r7, #24]
   return(result);
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e00f      	b.n	8006888 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	bf0c      	ite	eq
 8006878:	2301      	moveq	r3, #1
 800687a:	2300      	movne	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	429a      	cmp	r2, r3
 8006884:	d09f      	beq.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3740      	adds	r7, #64	; 0x40
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b098      	sub	sp, #96	; 0x60
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2222      	movs	r2, #34	; 0x22
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	4a3e      	ldr	r2, [pc, #248]	; (80069b8 <UART_Start_Receive_DMA+0x128>)
 80068be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	4a3d      	ldr	r2, [pc, #244]	; (80069bc <UART_Start_Receive_DMA+0x12c>)
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <UART_Start_Receive_DMA+0x130>)
 80068ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	2200      	movs	r2, #0
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	f7fc fc1e 	bl	8003130 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006928:	65bb      	str	r3, [r7, #88]	; 0x58
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006932:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006966:	63ba      	str	r2, [r7, #56]	; 0x38
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800696c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e5      	bne.n	8006946 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006990:	653b      	str	r3, [r7, #80]	; 0x50
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3314      	adds	r3, #20
 8006998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6a39      	ldr	r1, [r7, #32]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3760      	adds	r7, #96	; 0x60
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	080065c5 	.word	0x080065c5
 80069bc:	080066eb 	.word	0x080066eb
 80069c0:	08006721 	.word	0x08006721

080069c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60bb      	str	r3, [r7, #8]
   return(result);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	61ba      	str	r2, [r7, #24]
 80069ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	613b      	str	r3, [r7, #16]
   return(result);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a08:	bf00      	nop
 8006a0a:	3724      	adds	r7, #36	; 0x24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b095      	sub	sp, #84	; 0x54
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ace:	bf00      	nop
 8006ad0:	3754      	adds	r7, #84	; 0x54
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fd5b 	bl	80065b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	; 0x21
 8006b14:	d13e      	bne.n	8006b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d114      	bne.n	8006b4a <UART_Transmit_IT+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e008      	b.n	8006b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6211      	str	r1, [r2, #32]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fcd6 	bl	8006574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b22      	cmp	r3, #34	; 0x22
 8006be4:	f040 80ab 	bne.w	8006d3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d117      	bne.n	8006c22 <UART_Receive_IT+0x50>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d113      	bne.n	8006c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c20:	e026      	b.n	8006c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d007      	beq.n	8006c46 <UART_Receive_IT+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d15a      	bne.n	8006d3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0220 	bic.w	r2, r2, #32
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d135      	bne.n	8006d30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	623a      	str	r2, [r7, #32]
 8006cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d10a      	bne.n	8006d22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fb fe6f 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
 8006d2e:	e002      	b.n	8006d36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fc29 	bl	8006588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e002      	b.n	8006d40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d4c:	b0c0      	sub	sp, #256	; 0x100
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	ea40 0301 	orr.w	r3, r0, r1
 8006d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006da0:	f021 010c 	bic.w	r1, r1, #12
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dae:	430b      	orrs	r3, r1
 8006db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc2:	6999      	ldr	r1, [r3, #24]
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	ea40 0301 	orr.w	r3, r0, r1
 8006dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b8f      	ldr	r3, [pc, #572]	; (8007014 <UART_SetConfig+0x2cc>)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d005      	beq.n	8006de8 <UART_SetConfig+0xa0>
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <UART_SetConfig+0x2d0>)
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d104      	bne.n	8006df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006de8:	f7fe fcfe 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8006dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006df0:	e003      	b.n	8006dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006df2:	f7fe fce5 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8006df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e04:	f040 810c 	bne.w	8007020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	1891      	adds	r1, r2, r2
 8006e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e22:	415b      	adcs	r3, r3
 8006e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	eb12 0801 	adds.w	r8, r2, r1
 8006e30:	4629      	mov	r1, r5
 8006e32:	eb43 0901 	adc.w	r9, r3, r1
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	eb18 0303 	adds.w	r3, r8, r3
 8006e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e58:	462b      	mov	r3, r5
 8006e5a:	eb49 0303 	adc.w	r3, r9, r3
 8006e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e76:	460b      	mov	r3, r1
 8006e78:	18db      	adds	r3, r3, r3
 8006e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	eb42 0303 	adc.w	r3, r2, r3
 8006e82:	657b      	str	r3, [r7, #84]	; 0x54
 8006e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e8c:	f7f9 f9f0 	bl	8000270 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4b61      	ldr	r3, [pc, #388]	; (800701c <UART_SetConfig+0x2d4>)
 8006e96:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	011c      	lsls	r4, r3, #4
 8006e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	1891      	adds	r1, r2, r2
 8006eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006eb8:	415b      	adcs	r3, r3
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee0:	4692      	mov	sl, r2
 8006ee2:	469b      	mov	fp, r3
 8006ee4:	4643      	mov	r3, r8
 8006ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8006eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	18db      	adds	r3, r3, r3
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
 8006f12:	4613      	mov	r3, r2
 8006f14:	eb42 0303 	adc.w	r3, r2, r3
 8006f18:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f22:	f7f9 f9a5 	bl	8000270 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4b3b      	ldr	r3, [pc, #236]	; (800701c <UART_SetConfig+0x2d4>)
 8006f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	2264      	movs	r2, #100	; 0x64
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	1acb      	subs	r3, r1, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f42:	4b36      	ldr	r3, [pc, #216]	; (800701c <UART_SetConfig+0x2d4>)
 8006f44:	fba3 2302 	umull	r2, r3, r3, r2
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f50:	441c      	add	r4, r3
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f74:	4641      	mov	r1, r8
 8006f76:	1851      	adds	r1, r2, r1
 8006f78:	6339      	str	r1, [r7, #48]	; 0x30
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	414b      	adcs	r3, r1
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	00cb      	lsls	r3, r1, #3
 8006f90:	4651      	mov	r1, sl
 8006f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f96:	4651      	mov	r1, sl
 8006f98:	00ca      	lsls	r2, r1, #3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa8:	464b      	mov	r3, r9
 8006faa:	460a      	mov	r2, r1
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fc8:	460b      	mov	r3, r1
 8006fca:	18db      	adds	r3, r3, r3
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fce:	4613      	mov	r3, r2
 8006fd0:	eb42 0303 	adc.w	r3, r2, r3
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fde:	f7f9 f947 	bl	8000270 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <UART_SetConfig+0x2d4>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <UART_SetConfig+0x2d4>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f003 0207 	and.w	r2, r3, #7
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4422      	add	r2, r4
 800700e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007010:	e105      	b.n	800721e <UART_SetConfig+0x4d6>
 8007012:	bf00      	nop
 8007014:	40011000 	.word	0x40011000
 8007018:	40011400 	.word	0x40011400
 800701c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800702a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800702e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	1891      	adds	r1, r2, r2
 8007038:	6239      	str	r1, [r7, #32]
 800703a:	415b      	adcs	r3, r3
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
 800703e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007042:	4641      	mov	r1, r8
 8007044:	1854      	adds	r4, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0501 	adc.w	r5, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	00eb      	lsls	r3, r5, #3
 8007056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800705a:	00e2      	lsls	r2, r4, #3
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	4643      	mov	r3, r8
 8007062:	18e3      	adds	r3, r4, r3
 8007064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007068:	464b      	mov	r3, r9
 800706a:	eb45 0303 	adc.w	r3, r5, r3
 800706e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800707e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800708e:	4629      	mov	r1, r5
 8007090:	008b      	lsls	r3, r1, #2
 8007092:	4621      	mov	r1, r4
 8007094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007098:	4621      	mov	r1, r4
 800709a:	008a      	lsls	r2, r1, #2
 800709c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070a0:	f7f9 f8e6 	bl	8000270 <__aeabi_uldivmod>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4b60      	ldr	r3, [pc, #384]	; (800722c <UART_SetConfig+0x4e4>)
 80070aa:	fba3 2302 	umull	r2, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	011c      	lsls	r4, r3, #4
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	1891      	adds	r1, r2, r2
 80070ca:	61b9      	str	r1, [r7, #24]
 80070cc:	415b      	adcs	r3, r3
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d4:	4641      	mov	r1, r8
 80070d6:	1851      	adds	r1, r2, r1
 80070d8:	6139      	str	r1, [r7, #16]
 80070da:	4649      	mov	r1, r9
 80070dc:	414b      	adcs	r3, r1
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070ec:	4659      	mov	r1, fp
 80070ee:	00cb      	lsls	r3, r1, #3
 80070f0:	4651      	mov	r1, sl
 80070f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f6:	4651      	mov	r1, sl
 80070f8:	00ca      	lsls	r2, r1, #3
 80070fa:	4610      	mov	r0, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	4642      	mov	r2, r8
 8007102:	189b      	adds	r3, r3, r2
 8007104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007108:	464b      	mov	r3, r9
 800710a:	460a      	mov	r2, r1
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	67bb      	str	r3, [r7, #120]	; 0x78
 800711e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800712c:	4649      	mov	r1, r9
 800712e:	008b      	lsls	r3, r1, #2
 8007130:	4641      	mov	r1, r8
 8007132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007136:	4641      	mov	r1, r8
 8007138:	008a      	lsls	r2, r1, #2
 800713a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800713e:	f7f9 f897 	bl	8000270 <__aeabi_uldivmod>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <UART_SetConfig+0x4e4>)
 8007148:	fba3 1302 	umull	r1, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2164      	movs	r1, #100	; 0x64
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	3332      	adds	r3, #50	; 0x32
 800715a:	4a34      	ldr	r2, [pc, #208]	; (800722c <UART_SetConfig+0x4e4>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007166:	441c      	add	r4, r3
 8007168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716c:	2200      	movs	r2, #0
 800716e:	673b      	str	r3, [r7, #112]	; 0x70
 8007170:	677a      	str	r2, [r7, #116]	; 0x74
 8007172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	1891      	adds	r1, r2, r2
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	415b      	adcs	r3, r3
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007186:	4641      	mov	r1, r8
 8007188:	1851      	adds	r1, r2, r1
 800718a:	6039      	str	r1, [r7, #0]
 800718c:	4649      	mov	r1, r9
 800718e:	414b      	adcs	r3, r1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800719e:	4659      	mov	r1, fp
 80071a0:	00cb      	lsls	r3, r1, #3
 80071a2:	4651      	mov	r1, sl
 80071a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071a8:	4651      	mov	r1, sl
 80071aa:	00ca      	lsls	r2, r1, #3
 80071ac:	4610      	mov	r0, r2
 80071ae:	4619      	mov	r1, r3
 80071b0:	4603      	mov	r3, r0
 80071b2:	4642      	mov	r2, r8
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b8:	464b      	mov	r3, r9
 80071ba:	460a      	mov	r2, r1
 80071bc:	eb42 0303 	adc.w	r3, r2, r3
 80071c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	663b      	str	r3, [r7, #96]	; 0x60
 80071cc:	667a      	str	r2, [r7, #100]	; 0x64
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071da:	4649      	mov	r1, r9
 80071dc:	008b      	lsls	r3, r1, #2
 80071de:	4641      	mov	r1, r8
 80071e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e4:	4641      	mov	r1, r8
 80071e6:	008a      	lsls	r2, r1, #2
 80071e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071ec:	f7f9 f840 	bl	8000270 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <UART_SetConfig+0x4e4>)
 80071f6:	fba3 1302 	umull	r1, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2164      	movs	r1, #100	; 0x64
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	3332      	adds	r3, #50	; 0x32
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <UART_SetConfig+0x4e4>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f003 020f 	and.w	r2, r3, #15
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4422      	add	r2, r4
 800721c:	609a      	str	r2, [r3, #8]
}
 800721e:	bf00      	nop
 8007220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	51eb851f 	.word	0x51eb851f

08007230 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007236:	4b98      	ldr	r3, [pc, #608]	; (8007498 <MX_LWIP_Init+0x268>)
 8007238:	22c0      	movs	r2, #192	; 0xc0
 800723a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800723c:	4b96      	ldr	r3, [pc, #600]	; (8007498 <MX_LWIP_Init+0x268>)
 800723e:	22a8      	movs	r2, #168	; 0xa8
 8007240:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007242:	4b95      	ldr	r3, [pc, #596]	; (8007498 <MX_LWIP_Init+0x268>)
 8007244:	2201      	movs	r2, #1
 8007246:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 8007248:	4b93      	ldr	r3, [pc, #588]	; (8007498 <MX_LWIP_Init+0x268>)
 800724a:	22b1      	movs	r2, #177	; 0xb1
 800724c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800724e:	4b93      	ldr	r3, [pc, #588]	; (800749c <MX_LWIP_Init+0x26c>)
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007254:	4b91      	ldr	r3, [pc, #580]	; (800749c <MX_LWIP_Init+0x26c>)
 8007256:	22ff      	movs	r2, #255	; 0xff
 8007258:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800725a:	4b90      	ldr	r3, [pc, #576]	; (800749c <MX_LWIP_Init+0x26c>)
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007260:	4b8e      	ldr	r3, [pc, #568]	; (800749c <MX_LWIP_Init+0x26c>)
 8007262:	2200      	movs	r2, #0
 8007264:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007266:	4b8e      	ldr	r3, [pc, #568]	; (80074a0 <MX_LWIP_Init+0x270>)
 8007268:	22c0      	movs	r2, #192	; 0xc0
 800726a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800726c:	4b8c      	ldr	r3, [pc, #560]	; (80074a0 <MX_LWIP_Init+0x270>)
 800726e:	22a8      	movs	r2, #168	; 0xa8
 8007270:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007272:	4b8b      	ldr	r3, [pc, #556]	; (80074a0 <MX_LWIP_Init+0x270>)
 8007274:	2201      	movs	r2, #1
 8007276:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007278:	4b89      	ldr	r3, [pc, #548]	; (80074a0 <MX_LWIP_Init+0x270>)
 800727a:	2201      	movs	r2, #1
 800727c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800727e:	2100      	movs	r1, #0
 8007280:	2000      	movs	r0, #0
 8007282:	f005 ff41 	bl	800d108 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007286:	4b84      	ldr	r3, [pc, #528]	; (8007498 <MX_LWIP_Init+0x268>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	061a      	lsls	r2, r3, #24
 800728c:	4b82      	ldr	r3, [pc, #520]	; (8007498 <MX_LWIP_Init+0x268>)
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	431a      	orrs	r2, r3
 8007294:	4b80      	ldr	r3, [pc, #512]	; (8007498 <MX_LWIP_Init+0x268>)
 8007296:	789b      	ldrb	r3, [r3, #2]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	4313      	orrs	r3, r2
 800729c:	4a7e      	ldr	r2, [pc, #504]	; (8007498 <MX_LWIP_Init+0x268>)
 800729e:	78d2      	ldrb	r2, [r2, #3]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	061a      	lsls	r2, r3, #24
 80072a4:	4b7c      	ldr	r3, [pc, #496]	; (8007498 <MX_LWIP_Init+0x268>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	0619      	lsls	r1, r3, #24
 80072aa:	4b7b      	ldr	r3, [pc, #492]	; (8007498 <MX_LWIP_Init+0x268>)
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	041b      	lsls	r3, r3, #16
 80072b0:	4319      	orrs	r1, r3
 80072b2:	4b79      	ldr	r3, [pc, #484]	; (8007498 <MX_LWIP_Init+0x268>)
 80072b4:	789b      	ldrb	r3, [r3, #2]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	430b      	orrs	r3, r1
 80072ba:	4977      	ldr	r1, [pc, #476]	; (8007498 <MX_LWIP_Init+0x268>)
 80072bc:	78c9      	ldrb	r1, [r1, #3]
 80072be:	430b      	orrs	r3, r1
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072c6:	431a      	orrs	r2, r3
 80072c8:	4b73      	ldr	r3, [pc, #460]	; (8007498 <MX_LWIP_Init+0x268>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	0619      	lsls	r1, r3, #24
 80072ce:	4b72      	ldr	r3, [pc, #456]	; (8007498 <MX_LWIP_Init+0x268>)
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	4319      	orrs	r1, r3
 80072d6:	4b70      	ldr	r3, [pc, #448]	; (8007498 <MX_LWIP_Init+0x268>)
 80072d8:	789b      	ldrb	r3, [r3, #2]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	430b      	orrs	r3, r1
 80072de:	496e      	ldr	r1, [pc, #440]	; (8007498 <MX_LWIP_Init+0x268>)
 80072e0:	78c9      	ldrb	r1, [r1, #3]
 80072e2:	430b      	orrs	r3, r1
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072ea:	431a      	orrs	r2, r3
 80072ec:	4b6a      	ldr	r3, [pc, #424]	; (8007498 <MX_LWIP_Init+0x268>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	0619      	lsls	r1, r3, #24
 80072f2:	4b69      	ldr	r3, [pc, #420]	; (8007498 <MX_LWIP_Init+0x268>)
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	4319      	orrs	r1, r3
 80072fa:	4b67      	ldr	r3, [pc, #412]	; (8007498 <MX_LWIP_Init+0x268>)
 80072fc:	789b      	ldrb	r3, [r3, #2]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	430b      	orrs	r3, r1
 8007302:	4965      	ldr	r1, [pc, #404]	; (8007498 <MX_LWIP_Init+0x268>)
 8007304:	78c9      	ldrb	r1, [r1, #3]
 8007306:	430b      	orrs	r3, r1
 8007308:	0e1b      	lsrs	r3, r3, #24
 800730a:	4313      	orrs	r3, r2
 800730c:	4a65      	ldr	r2, [pc, #404]	; (80074a4 <MX_LWIP_Init+0x274>)
 800730e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007310:	4b62      	ldr	r3, [pc, #392]	; (800749c <MX_LWIP_Init+0x26c>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	061a      	lsls	r2, r3, #24
 8007316:	4b61      	ldr	r3, [pc, #388]	; (800749c <MX_LWIP_Init+0x26c>)
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	431a      	orrs	r2, r3
 800731e:	4b5f      	ldr	r3, [pc, #380]	; (800749c <MX_LWIP_Init+0x26c>)
 8007320:	789b      	ldrb	r3, [r3, #2]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	4313      	orrs	r3, r2
 8007326:	4a5d      	ldr	r2, [pc, #372]	; (800749c <MX_LWIP_Init+0x26c>)
 8007328:	78d2      	ldrb	r2, [r2, #3]
 800732a:	4313      	orrs	r3, r2
 800732c:	061a      	lsls	r2, r3, #24
 800732e:	4b5b      	ldr	r3, [pc, #364]	; (800749c <MX_LWIP_Init+0x26c>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	0619      	lsls	r1, r3, #24
 8007334:	4b59      	ldr	r3, [pc, #356]	; (800749c <MX_LWIP_Init+0x26c>)
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	4319      	orrs	r1, r3
 800733c:	4b57      	ldr	r3, [pc, #348]	; (800749c <MX_LWIP_Init+0x26c>)
 800733e:	789b      	ldrb	r3, [r3, #2]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	430b      	orrs	r3, r1
 8007344:	4955      	ldr	r1, [pc, #340]	; (800749c <MX_LWIP_Init+0x26c>)
 8007346:	78c9      	ldrb	r1, [r1, #3]
 8007348:	430b      	orrs	r3, r1
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007350:	431a      	orrs	r2, r3
 8007352:	4b52      	ldr	r3, [pc, #328]	; (800749c <MX_LWIP_Init+0x26c>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	0619      	lsls	r1, r3, #24
 8007358:	4b50      	ldr	r3, [pc, #320]	; (800749c <MX_LWIP_Init+0x26c>)
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	4319      	orrs	r1, r3
 8007360:	4b4e      	ldr	r3, [pc, #312]	; (800749c <MX_LWIP_Init+0x26c>)
 8007362:	789b      	ldrb	r3, [r3, #2]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	430b      	orrs	r3, r1
 8007368:	494c      	ldr	r1, [pc, #304]	; (800749c <MX_LWIP_Init+0x26c>)
 800736a:	78c9      	ldrb	r1, [r1, #3]
 800736c:	430b      	orrs	r3, r1
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007374:	431a      	orrs	r2, r3
 8007376:	4b49      	ldr	r3, [pc, #292]	; (800749c <MX_LWIP_Init+0x26c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	0619      	lsls	r1, r3, #24
 800737c:	4b47      	ldr	r3, [pc, #284]	; (800749c <MX_LWIP_Init+0x26c>)
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	4319      	orrs	r1, r3
 8007384:	4b45      	ldr	r3, [pc, #276]	; (800749c <MX_LWIP_Init+0x26c>)
 8007386:	789b      	ldrb	r3, [r3, #2]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	430b      	orrs	r3, r1
 800738c:	4943      	ldr	r1, [pc, #268]	; (800749c <MX_LWIP_Init+0x26c>)
 800738e:	78c9      	ldrb	r1, [r1, #3]
 8007390:	430b      	orrs	r3, r1
 8007392:	0e1b      	lsrs	r3, r3, #24
 8007394:	4313      	orrs	r3, r2
 8007396:	4a44      	ldr	r2, [pc, #272]	; (80074a8 <MX_LWIP_Init+0x278>)
 8007398:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800739a:	4b41      	ldr	r3, [pc, #260]	; (80074a0 <MX_LWIP_Init+0x270>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	061a      	lsls	r2, r3, #24
 80073a0:	4b3f      	ldr	r3, [pc, #252]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	041b      	lsls	r3, r3, #16
 80073a6:	431a      	orrs	r2, r3
 80073a8:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	4313      	orrs	r3, r2
 80073b0:	4a3b      	ldr	r2, [pc, #236]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073b2:	78d2      	ldrb	r2, [r2, #3]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	061a      	lsls	r2, r3, #24
 80073b8:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	0619      	lsls	r1, r3, #24
 80073be:	4b38      	ldr	r3, [pc, #224]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	4319      	orrs	r1, r3
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073c8:	789b      	ldrb	r3, [r3, #2]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	430b      	orrs	r3, r1
 80073ce:	4934      	ldr	r1, [pc, #208]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073d0:	78c9      	ldrb	r1, [r1, #3]
 80073d2:	430b      	orrs	r3, r1
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073da:	431a      	orrs	r2, r3
 80073dc:	4b30      	ldr	r3, [pc, #192]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	0619      	lsls	r1, r3, #24
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	4319      	orrs	r1, r3
 80073ea:	4b2d      	ldr	r3, [pc, #180]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073ec:	789b      	ldrb	r3, [r3, #2]
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	430b      	orrs	r3, r1
 80073f2:	492b      	ldr	r1, [pc, #172]	; (80074a0 <MX_LWIP_Init+0x270>)
 80073f4:	78c9      	ldrb	r1, [r1, #3]
 80073f6:	430b      	orrs	r3, r1
 80073f8:	0a1b      	lsrs	r3, r3, #8
 80073fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073fe:	431a      	orrs	r2, r3
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <MX_LWIP_Init+0x270>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	0619      	lsls	r1, r3, #24
 8007406:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <MX_LWIP_Init+0x270>)
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	4319      	orrs	r1, r3
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <MX_LWIP_Init+0x270>)
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	430b      	orrs	r3, r1
 8007416:	4922      	ldr	r1, [pc, #136]	; (80074a0 <MX_LWIP_Init+0x270>)
 8007418:	78c9      	ldrb	r1, [r1, #3]
 800741a:	430b      	orrs	r3, r1
 800741c:	0e1b      	lsrs	r3, r3, #24
 800741e:	4313      	orrs	r3, r2
 8007420:	4a22      	ldr	r2, [pc, #136]	; (80074ac <MX_LWIP_Init+0x27c>)
 8007422:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007424:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <MX_LWIP_Init+0x280>)
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <MX_LWIP_Init+0x284>)
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	2300      	movs	r3, #0
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <MX_LWIP_Init+0x27c>)
 8007432:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <MX_LWIP_Init+0x278>)
 8007434:	491b      	ldr	r1, [pc, #108]	; (80074a4 <MX_LWIP_Init+0x274>)
 8007436:	4820      	ldr	r0, [pc, #128]	; (80074b8 <MX_LWIP_Init+0x288>)
 8007438:	f006 fbea 	bl	800dc10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800743c:	481e      	ldr	r0, [pc, #120]	; (80074b8 <MX_LWIP_Init+0x288>)
 800743e:	f006 fd99 	bl	800df74 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007442:	4b1d      	ldr	r3, [pc, #116]	; (80074b8 <MX_LWIP_Init+0x288>)
 8007444:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007448:	089b      	lsrs	r3, r3, #2
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007454:	4818      	ldr	r0, [pc, #96]	; (80074b8 <MX_LWIP_Init+0x288>)
 8007456:	f006 fd9d 	bl	800df94 <netif_set_up>
 800745a:	e002      	b.n	8007462 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800745c:	4816      	ldr	r0, [pc, #88]	; (80074b8 <MX_LWIP_Init+0x288>)
 800745e:	f006 fe05 	bl	800e06c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007462:	4916      	ldr	r1, [pc, #88]	; (80074bc <MX_LWIP_Init+0x28c>)
 8007464:	4814      	ldr	r0, [pc, #80]	; (80074b8 <MX_LWIP_Init+0x288>)
 8007466:	f006 fe33 	bl	800e0d0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800746a:	2300      	movs	r3, #0
 800746c:	603b      	str	r3, [r7, #0]
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8007472:	463b      	mov	r3, r7
 8007474:	2101      	movs	r1, #1
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fd34 	bl	8007ee4 <osSemaphoreCreate>
 800747c:	4603      	mov	r3, r0
 800747e:	4a10      	ldr	r2, [pc, #64]	; (80074c0 <MX_LWIP_Init+0x290>)
 8007480:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8007482:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <MX_LWIP_Init+0x294>)
 8007484:	4a0c      	ldr	r2, [pc, #48]	; (80074b8 <MX_LWIP_Init+0x288>)
 8007486:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <MX_LWIP_Init+0x290>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a0d      	ldr	r2, [pc, #52]	; (80074c4 <MX_LWIP_Init+0x294>)
 800748e:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000bc8 	.word	0x20000bc8
 800749c:	20000bcc 	.word	0x20000bcc
 80074a0:	20000bd0 	.word	0x20000bd0
 80074a4:	20000bbc 	.word	0x20000bbc
 80074a8:	20000bc0 	.word	0x20000bc0
 80074ac:	20000bc4 	.word	0x20000bc4
 80074b0:	0800d019 	.word	0x0800d019
 80074b4:	08007af1 	.word	0x08007af1
 80074b8:	20000b88 	.word	0x20000b88
 80074bc:	08007b5d 	.word	0x08007b5d
 80074c0:	20000b7c 	.word	0x20000b7c
 80074c4:	20000b80 	.word	0x20000b80

080074c8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	; 0x38
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	605a      	str	r2, [r3, #4]
 80074da:	609a      	str	r2, [r3, #8]
 80074dc:	60da      	str	r2, [r3, #12]
 80074de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a4a      	ldr	r2, [pc, #296]	; (8007610 <HAL_ETH_MspInit+0x148>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	f040 808d 	bne.w	8007606 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80074ec:	2300      	movs	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
 80074f0:	4b48      	ldr	r3, [pc, #288]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	4a47      	ldr	r2, [pc, #284]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 80074f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074fa:	6313      	str	r3, [r2, #48]	; 0x30
 80074fc:	4b45      	ldr	r3, [pc, #276]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	4b41      	ldr	r3, [pc, #260]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	4a40      	ldr	r2, [pc, #256]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007516:	6313      	str	r3, [r2, #48]	; 0x30
 8007518:	4b3e      	ldr	r3, [pc, #248]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007520:	61fb      	str	r3, [r7, #28]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	4b3a      	ldr	r3, [pc, #232]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	4a39      	ldr	r2, [pc, #228]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800752e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007532:	6313      	str	r3, [r2, #48]	; 0x30
 8007534:	4b37      	ldr	r3, [pc, #220]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	4b33      	ldr	r3, [pc, #204]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	4a32      	ldr	r2, [pc, #200]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800754a:	f043 0304 	orr.w	r3, r3, #4
 800754e:	6313      	str	r3, [r2, #48]	; 0x30
 8007550:	4b30      	ldr	r3, [pc, #192]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800755c:	2300      	movs	r3, #0
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4a2b      	ldr	r2, [pc, #172]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	6313      	str	r3, [r2, #48]	; 0x30
 800756c:	4b29      	ldr	r3, [pc, #164]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	4b25      	ldr	r3, [pc, #148]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	4a24      	ldr	r2, [pc, #144]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 8007582:	f043 0302 	orr.w	r3, r3, #2
 8007586:	6313      	str	r3, [r2, #48]	; 0x30
 8007588:	4b22      	ldr	r3, [pc, #136]	; (8007614 <HAL_ETH_MspInit+0x14c>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007594:	2332      	movs	r3, #50	; 0x32
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007598:	2302      	movs	r3, #2
 800759a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759c:	2300      	movs	r3, #0
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075a0:	2303      	movs	r3, #3
 80075a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075a4:	230b      	movs	r3, #11
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ac:	4619      	mov	r1, r3
 80075ae:	481a      	ldr	r0, [pc, #104]	; (8007618 <HAL_ETH_MspInit+0x150>)
 80075b0:	f7fd faa0 	bl	8004af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80075b4:	2386      	movs	r3, #134	; 0x86
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b8:	2302      	movs	r3, #2
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075c0:	2303      	movs	r3, #3
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075c4:	230b      	movs	r3, #11
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075cc:	4619      	mov	r1, r3
 80075ce:	4813      	ldr	r0, [pc, #76]	; (800761c <HAL_ETH_MspInit+0x154>)
 80075d0:	f7fd fa90 	bl	8004af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80075d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075da:	2302      	movs	r3, #2
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e2:	2303      	movs	r3, #3
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075e6:	230b      	movs	r3, #11
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ee:	4619      	mov	r1, r3
 80075f0:	480b      	ldr	r0, [pc, #44]	; (8007620 <HAL_ETH_MspInit+0x158>)
 80075f2:	f7fd fa7f 	bl	8004af4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80075f6:	2200      	movs	r2, #0
 80075f8:	2105      	movs	r1, #5
 80075fa:	203d      	movs	r0, #61	; 0x3d
 80075fc:	f7fb fcc0 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007600:	203d      	movs	r0, #61	; 0x3d
 8007602:	f7fb fcd9 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007606:	bf00      	nop
 8007608:	3738      	adds	r7, #56	; 0x38
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40028000 	.word	0x40028000
 8007614:	40023800 	.word	0x40023800
 8007618:	40020800 	.word	0x40020800
 800761c:	40020000 	.word	0x40020000
 8007620:	40020400 	.word	0x40020400

08007624 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <HAL_ETH_RxCpltCallback+0x1c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fcd7 	bl	8007fe4 <osSemaphoreRelease>
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20003c74 	.word	0x20003c74

08007644 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007644:	b5b0      	push	{r4, r5, r7, lr}
 8007646:	b090      	sub	sp, #64	; 0x40
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007650:	4b5f      	ldr	r3, [pc, #380]	; (80077d0 <low_level_init+0x18c>)
 8007652:	4a60      	ldr	r2, [pc, #384]	; (80077d4 <low_level_init+0x190>)
 8007654:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 8007656:	4b5e      	ldr	r3, [pc, #376]	; (80077d0 <low_level_init+0x18c>)
 8007658:	2200      	movs	r2, #0
 800765a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800765c:	4b5c      	ldr	r3, [pc, #368]	; (80077d0 <low_level_init+0x18c>)
 800765e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007662:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007664:	4b5a      	ldr	r3, [pc, #360]	; (80077d0 <low_level_init+0x18c>)
 8007666:	2200      	movs	r2, #0
 8007668:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800766a:	4b59      	ldr	r3, [pc, #356]	; (80077d0 <low_level_init+0x18c>)
 800766c:	2200      	movs	r2, #0
 800766e:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007670:	2300      	movs	r3, #0
 8007672:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007676:	2380      	movs	r3, #128	; 0x80
 8007678:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800767c:	23e1      	movs	r3, #225	; 0xe1
 800767e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007682:	2300      	movs	r3, #0
 8007684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800768e:	2300      	movs	r3, #0
 8007690:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007694:	4a4e      	ldr	r2, [pc, #312]	; (80077d0 <low_level_init+0x18c>)
 8007696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800769a:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800769c:	4b4c      	ldr	r3, [pc, #304]	; (80077d0 <low_level_init+0x18c>)
 800769e:	2201      	movs	r2, #1
 80076a0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80076a2:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <low_level_init+0x18c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80076a8:	4b49      	ldr	r3, [pc, #292]	; (80077d0 <low_level_init+0x18c>)
 80076aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80076ae:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80076b0:	4847      	ldr	r0, [pc, #284]	; (80077d0 <low_level_init+0x18c>)
 80076b2:	f7fc f891 	bl	80037d8 <HAL_ETH_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80076bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d108      	bne.n	80076d6 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076ca:	f043 0304 	orr.w	r3, r3, #4
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80076d6:	2304      	movs	r3, #4
 80076d8:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <low_level_init+0x194>)
 80076da:	4940      	ldr	r1, [pc, #256]	; (80077dc <low_level_init+0x198>)
 80076dc:	483c      	ldr	r0, [pc, #240]	; (80077d0 <low_level_init+0x18c>)
 80076de:	f7fc fa15 	bl	8003b0c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80076e2:	2304      	movs	r3, #4
 80076e4:	4a3e      	ldr	r2, [pc, #248]	; (80077e0 <low_level_init+0x19c>)
 80076e6:	493f      	ldr	r1, [pc, #252]	; (80077e4 <low_level_init+0x1a0>)
 80076e8:	4839      	ldr	r0, [pc, #228]	; (80077d0 <low_level_init+0x18c>)
 80076ea:	f7fc fa77 	bl	8003bdc <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2206      	movs	r2, #6
 80076f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80076f6:	4b36      	ldr	r3, [pc, #216]	; (80077d0 <low_level_init+0x18c>)
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007702:	4b33      	ldr	r3, [pc, #204]	; (80077d0 <low_level_init+0x18c>)
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	785a      	ldrb	r2, [r3, #1]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800770e:	4b30      	ldr	r3, [pc, #192]	; (80077d0 <low_level_init+0x18c>)
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	789a      	ldrb	r2, [r3, #2]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800771a:	4b2d      	ldr	r3, [pc, #180]	; (80077d0 <low_level_init+0x18c>)
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	78da      	ldrb	r2, [r3, #3]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007726:	4b2a      	ldr	r3, [pc, #168]	; (80077d0 <low_level_init+0x18c>)
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	791a      	ldrb	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007732:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <low_level_init+0x18c>)
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	795a      	ldrb	r2, [r3, #5]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007744:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800774c:	f043 030a 	orr.w	r3, r3, #10
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8007758:	2300      	movs	r3, #0
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
 800775c:	2300      	movs	r3, #0
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007764:	2101      	movs	r1, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fbbc 	bl	8007ee4 <osSemaphoreCreate>
 800776c:	4603      	mov	r3, r0
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <low_level_init+0x1a4>)
 8007770:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007772:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <low_level_init+0x1a8>)
 8007774:	f107 040c 	add.w	r4, r7, #12
 8007778:	461d      	mov	r5, r3
 800777a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800777c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007786:	f107 030c 	add.w	r3, r7, #12
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	f000 faac 	bl	8007cea <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007792:	480f      	ldr	r0, [pc, #60]	; (80077d0 <low_level_init+0x18c>)
 8007794:	f7fc fd46 	bl	8004224 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007798:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800779c:	461a      	mov	r2, r3
 800779e:	211d      	movs	r1, #29
 80077a0:	480b      	ldr	r0, [pc, #44]	; (80077d0 <low_level_init+0x18c>)
 80077a2:	f7fc fc71 	bl	8004088 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	f043 030b 	orr.w	r3, r3, #11
 80077ac:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	461a      	mov	r2, r3
 80077b2:	211d      	movs	r1, #29
 80077b4:	4806      	ldr	r0, [pc, #24]	; (80077d0 <low_level_init+0x18c>)
 80077b6:	f7fc fccf 	bl	8004158 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80077ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80077be:	461a      	mov	r2, r3
 80077c0:	211d      	movs	r1, #29
 80077c2:	4803      	ldr	r0, [pc, #12]	; (80077d0 <low_level_init+0x18c>)
 80077c4:	f7fc fc60 	bl	8004088 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80077c8:	bf00      	nop
 80077ca:	3740      	adds	r7, #64	; 0x40
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bdb0      	pop	{r4, r5, r7, pc}
 80077d0:	20003c78 	.word	0x20003c78
 80077d4:	40028000 	.word	0x40028000
 80077d8:	200024a4 	.word	0x200024a4
 80077dc:	20000c54 	.word	0x20000c54
 80077e0:	20000cd4 	.word	0x20000cd4
 80077e4:	20000bd4 	.word	0x20000bd4
 80077e8:	20003c74 	.word	0x20003c74
 80077ec:	08019998 	.word	0x08019998

080077f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	; 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80077fa:	4b4b      	ldr	r3, [pc, #300]	; (8007928 <low_level_output+0x138>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007812:	4b45      	ldr	r3, [pc, #276]	; (8007928 <low_level_output+0x138>)
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	623b      	str	r3, [r7, #32]
 8007820:	e05a      	b.n	80078d8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	da03      	bge.n	8007832 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800782a:	23f8      	movs	r3, #248	; 0xf8
 800782c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007830:	e05c      	b.n	80078ec <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	895b      	ldrh	r3, [r3, #10]
 8007836:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800783c:	e02f      	b.n	800789e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	18d0      	adds	r0, r2, r3
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	18d1      	adds	r1, r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007852:	3304      	adds	r3, #4
 8007854:	461a      	mov	r2, r3
 8007856:	f010 fe8d 	bl	8018574 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	da03      	bge.n	8007870 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007868:	23f8      	movs	r3, #248	; 0xf8
 800786a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800786e:	e03d      	b.n	80078ec <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007880:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800788c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007898:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d8c8      	bhi.n	800783e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	18d0      	adds	r0, r2, r3
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4619      	mov	r1, r3
 80078be:	f010 fe59 	bl	8018574 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	623b      	str	r3, [r7, #32]
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1a1      	bne.n	8007822 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	4811      	ldr	r0, [pc, #68]	; (8007928 <low_level_output+0x138>)
 80078e2:	f7fc f9e7 	bl	8003cb4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80078ec:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <low_level_output+0x138>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <low_level_output+0x138>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007906:	461a      	mov	r2, r3
 8007908:	2320      	movs	r3, #32
 800790a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <low_level_output+0x138>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800791a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800791e:	4618      	mov	r0, r3
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20003c78 	.word	0x20003c78

0800792c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	; 0x30
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800794c:	2300      	movs	r3, #0
 800794e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007950:	484e      	ldr	r0, [pc, #312]	; (8007a8c <low_level_input+0x160>)
 8007952:	f7fc fa99 	bl	8003e88 <HAL_ETH_GetReceivedFrame_IT>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <low_level_input+0x34>

    return NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	e091      	b.n	8007a84 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007960:	4b4a      	ldr	r3, [pc, #296]	; (8007a8c <low_level_input+0x160>)
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007966:	4b49      	ldr	r3, [pc, #292]	; (8007a8c <low_level_input+0x160>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800796c:	89fb      	ldrh	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007972:	89fb      	ldrh	r3, [r7, #14]
 8007974:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007978:	4619      	mov	r1, r3
 800797a:	2000      	movs	r0, #0
 800797c:	f006 fc72 	bl	800e264 <pbuf_alloc>
 8007980:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d04b      	beq.n	8007a20 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007988:	4b40      	ldr	r3, [pc, #256]	; (8007a8c <low_level_input+0x160>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
 8007996:	e040      	b.n	8007a1a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	895b      	ldrh	r3, [r3, #10]
 800799c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80079a2:	e021      	b.n	80079e8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	18d0      	adds	r0, r2, r3
 80079ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	18d1      	adds	r1, r2, r3
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80079b8:	3304      	adds	r3, #4
 80079ba:	461a      	mov	r2, r3
 80079bc:	f010 fdda 	bl	8018574 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	4413      	add	r3, r2
 80079d2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80079d6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80079e2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d8d6      	bhi.n	80079a4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	18d0      	adds	r0, r2, r3
 80079fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4619      	mov	r1, r3
 8007a08:	f010 fdb4 	bl	8018574 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1bb      	bne.n	8007998 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <low_level_input+0x160>)
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	e00b      	b.n	8007a44 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <low_level_input+0x160>)
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d3ee      	bcc.n	8007a2c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <low_level_input+0x160>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007a54:	4b0d      	ldr	r3, [pc, #52]	; (8007a8c <low_level_input+0x160>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007a66:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <low_level_input+0x160>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <low_level_input+0x160>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6093      	str	r3, [r2, #8]
  }
  return p;
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3730      	adds	r7, #48	; 0x30
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20003c78 	.word	0x20003c78

08007a90 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007a9c:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <ethernetif_input+0x58>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fa4f 	bl	8007f48 <osSemaphoreWait>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1f5      	bne.n	8007a9c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007ab0:	480e      	ldr	r0, [pc, #56]	; (8007aec <ethernetif_input+0x5c>)
 8007ab2:	f010 fbcd 	bl	8018250 <sys_mutex_lock>
        p = low_level_input( netif );
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff ff38 	bl	800792c <low_level_input>
 8007abc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	68b8      	ldr	r0, [r7, #8]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	f006 fea9 	bl	800e82c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007ada:	4804      	ldr	r0, [pc, #16]	; (8007aec <ethernetif_input+0x5c>)
 8007adc:	f010 fbc7 	bl	801826e <sys_mutex_unlock>
      } while(p!=NULL);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e4      	bne.n	8007ab0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007ae6:	e7d9      	b.n	8007a9c <ethernetif_input+0xc>
 8007ae8:	20003c74 	.word	0x20003c74
 8007aec:	2000a170 	.word	0x2000a170

08007af0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <ethernetif_init+0x1c>
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <ethernetif_init+0x48>)
 8007b00:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8007b04:	490d      	ldr	r1, [pc, #52]	; (8007b3c <ethernetif_init+0x4c>)
 8007b06:	480e      	ldr	r0, [pc, #56]	; (8007b40 <ethernetif_init+0x50>)
 8007b08:	f010 fe44 	bl	8018794 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2273      	movs	r2, #115	; 0x73
 8007b10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2274      	movs	r2, #116	; 0x74
 8007b18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <ethernetif_init+0x54>)
 8007b20:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <ethernetif_init+0x58>)
 8007b26:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff fd8b 	bl	8007644 <low_level_init>

  return ERR_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	080199b4 	.word	0x080199b4
 8007b3c:	080199d0 	.word	0x080199d0
 8007b40:	080199e0 	.word	0x080199e0
 8007b44:	08016259 	.word	0x08016259
 8007b48:	080077f1 	.word	0x080077f1

08007b4c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b50:	f7fb f92e 	bl	8002db0 <HAL_GetTick>
 8007b54:	4603      	mov	r3, r0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b72:	089b      	lsrs	r3, r3, #2
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d05d      	beq.n	8007c3a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007b7e:	4b34      	ldr	r3, [pc, #208]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d03f      	beq.n	8007c06 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4830      	ldr	r0, [pc, #192]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007b8e:	f7fc fae3 	bl	8004158 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007b92:	f7fb f90d 	bl	8002db0 <HAL_GetTick>
 8007b96:	4603      	mov	r3, r0
 8007b98:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007b9a:	f107 0308 	add.w	r3, r7, #8
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	482b      	ldr	r0, [pc, #172]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007ba4:	f7fc fa70 	bl	8004088 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007ba8:	f7fb f902 	bl	8002db0 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb6:	d828      	bhi.n	8007c0a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0eb      	beq.n	8007b9a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2110      	movs	r1, #16
 8007bca:	4821      	ldr	r0, [pc, #132]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007bcc:	f7fc fa5c 	bl	8004088 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007bda:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	e002      	b.n	8007bea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007bf4:	4b16      	ldr	r3, [pc, #88]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	609a      	str	r2, [r3, #8]
 8007bfa:	e016      	b.n	8007c2a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007bfc:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c02:	609a      	str	r2, [r3, #8]
 8007c04:	e011      	b.n	8007c2a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007c06:	bf00      	nop
 8007c08:	e000      	b.n	8007c0c <ethernetif_update_config+0xb0>
          goto error;
 8007c0a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	2100      	movs	r1, #0
 8007c24:	480a      	ldr	r0, [pc, #40]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007c26:	f7fc fa97 	bl	8004158 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4808      	ldr	r0, [pc, #32]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007c2e:	f7fc fb57 	bl	80042e0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007c32:	4807      	ldr	r0, [pc, #28]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007c34:	f7fc faf6 	bl	8004224 <HAL_ETH_Start>
 8007c38:	e002      	b.n	8007c40 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007c3a:	4805      	ldr	r0, [pc, #20]	; (8007c50 <ethernetif_update_config+0xf4>)
 8007c3c:	f7fc fb21 	bl	8004282 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f807 	bl	8007c54 <ethernetif_notify_conn_changed>
}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20003c78 	.word	0x20003c78

08007c54 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c7a:	2b84      	cmp	r3, #132	; 0x84
 8007c7c:	d005      	beq.n	8007c8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	3303      	adds	r3, #3
 8007c88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9e:	f3ef 8305 	mrs	r3, IPSR
 8007ca2:	607b      	str	r3, [r7, #4]
  return(result);
 8007ca4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cc0:	f001 ff70 	bl	8009ba4 <vTaskStartScheduler>
  
  return osOK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007cce:	f7ff ffe3 	bl	8007c98 <inHandlerMode>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007cd8:	f002 f888 	bl	8009dec <xTaskGetTickCountFromISR>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	e002      	b.n	8007ce6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007ce0:	f002 f874 	bl	8009dcc <xTaskGetTickCount>
 8007ce4:	4603      	mov	r3, r0
  }
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cec:	b089      	sub	sp, #36	; 0x24
 8007cee:	af04      	add	r7, sp, #16
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d020      	beq.n	8007d3e <osThreadCreate+0x54>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01c      	beq.n	8007d3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685c      	ldr	r4, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681d      	ldr	r5, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691e      	ldr	r6, [r3, #16]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff ffa6 	bl	8007c68 <makeFreeRtosPriority>
 8007d1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d26:	9202      	str	r2, [sp, #8]
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	9100      	str	r1, [sp, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	4632      	mov	r2, r6
 8007d30:	4629      	mov	r1, r5
 8007d32:	4620      	mov	r0, r4
 8007d34:	f001 fd58 	bl	80097e8 <xTaskCreateStatic>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	e01c      	b.n	8007d78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685c      	ldr	r4, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d4a:	b29e      	uxth	r6, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff ff88 	bl	8007c68 <makeFreeRtosPriority>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	9200      	str	r2, [sp, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	4632      	mov	r2, r6
 8007d66:	4629      	mov	r1, r5
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f001 fd9a 	bl	80098a2 <xTaskCreate>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d001      	beq.n	8007d78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <osDelay+0x16>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	e000      	b.n	8007d9a <osDelay+0x18>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 fece 	bl	8009b3c <vTaskDelay>
  
  return osOK;
 8007da0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f000 feb2 	bl	8008b2a <xQueueCreateMutexStatic>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	e003      	b.n	8007dd2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007dca:	2001      	movs	r0, #1
 8007dcc:	f000 fe95 	bl	8008afa <xQueueCreateMutex>
 8007dd0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <osMutexWait+0x18>
    return osErrorParameter;
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	e03a      	b.n	8007e6a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfe:	d103      	bne.n	8007e08 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e009      	b.n	8007e1c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d006      	beq.n	8007e1c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <osMutexWait+0x40>
      ticks = 1;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007e1c:	f7ff ff3c 	bl	8007c98 <inHandlerMode>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d017      	beq.n	8007e56 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 faa8 	bl	8009384 <xQueueReceiveFromISR>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d001      	beq.n	8007e3e <osMutexWait+0x62>
      return osErrorOS;
 8007e3a:	23ff      	movs	r3, #255	; 0xff
 8007e3c:	e015      	b.n	8007e6a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d011      	beq.n	8007e68 <osMutexWait+0x8c>
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <osMutexWait+0x98>)
 8007e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	e008      	b.n	8007e68 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007e56:	68f9      	ldr	r1, [r7, #12]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 f987 	bl	800916c <xQueueSemaphoreTake>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d001      	beq.n	8007e68 <osMutexWait+0x8c>
    return osErrorOS;
 8007e64:	23ff      	movs	r3, #255	; 0xff
 8007e66:	e000      	b.n	8007e6a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007e88:	f7ff ff06 	bl	8007c98 <inHandlerMode>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fffa 	bl	8008e92 <xQueueGiveFromISR>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d001      	beq.n	8007ea8 <osMutexRelease+0x30>
      return osErrorOS;
 8007ea4:	23ff      	movs	r3, #255	; 0xff
 8007ea6:	e017      	b.n	8007ed8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d013      	beq.n	8007ed6 <osMutexRelease+0x5e>
 8007eae:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <osMutexRelease+0x68>)
 8007eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	e00a      	b.n	8007ed6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fe4a 	bl	8008b60 <xQueueGenericSend>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d001      	beq.n	8007ed6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007ed2:	23ff      	movs	r3, #255	; 0xff
 8007ed4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	e000ed04 	.word	0xe000ed04

08007ee4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00f      	beq.n	8007f16 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10a      	bne.n	8007f12 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2203      	movs	r2, #3
 8007f02:	9200      	str	r2, [sp, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	2001      	movs	r0, #1
 8007f0a:	f000 fd0b 	bl	8008924 <xQueueGenericCreateStatic>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	e016      	b.n	8007f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	e014      	b.n	8007f40 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d110      	bne.n	8007f3e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	2100      	movs	r1, #0
 8007f20:	2001      	movs	r0, #1
 8007f22:	f000 fd77 	bl	8008a14 <xQueueGenericCreate>
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <osSemaphoreCreate+0x56>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2200      	movs	r2, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 fe13 	bl	8008b60 <xQueueGenericSend>
      return sema;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	e000      	b.n	8007f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007f3e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007f52:	2300      	movs	r3, #0
 8007f54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007f5c:	2380      	movs	r3, #128	; 0x80
 8007f5e:	e03a      	b.n	8007fd6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d103      	bne.n	8007f74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e009      	b.n	8007f88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d006      	beq.n	8007f88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <osSemaphoreWait+0x40>
      ticks = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007f88:	f7ff fe86 	bl	8007c98 <inHandlerMode>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d017      	beq.n	8007fc2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	461a      	mov	r2, r3
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f9f2 	bl	8009384 <xQueueReceiveFromISR>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d001      	beq.n	8007faa <osSemaphoreWait+0x62>
      return osErrorOS;
 8007fa6:	23ff      	movs	r3, #255	; 0xff
 8007fa8:	e015      	b.n	8007fd6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <osSemaphoreWait+0x8c>
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <osSemaphoreWait+0x98>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	e008      	b.n	8007fd4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 f8d1 	bl	800916c <xQueueSemaphoreTake>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d001      	beq.n	8007fd4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007fd0:	23ff      	movs	r3, #255	; 0xff
 8007fd2:	e000      	b.n	8007fd6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	e000ed04 	.word	0xe000ed04

08007fe4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007ff4:	f7ff fe50 	bl	8007c98 <inHandlerMode>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d016      	beq.n	800802c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 ff44 	bl	8008e92 <xQueueGiveFromISR>
 800800a:	4603      	mov	r3, r0
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008010:	23ff      	movs	r3, #255	; 0xff
 8008012:	e017      	b.n	8008044 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d013      	beq.n	8008042 <osSemaphoreRelease+0x5e>
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <osSemaphoreRelease+0x68>)
 800801c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	e00a      	b.n	8008042 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800802c:	2300      	movs	r3, #0
 800802e:	2200      	movs	r2, #0
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fd94 	bl	8008b60 <xQueueGenericSend>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d001      	beq.n	8008042 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800803e:	23ff      	movs	r3, #255	; 0xff
 8008040:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008042:	68fb      	ldr	r3, [r7, #12]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008058:	f7ff fe1e 	bl	8007c98 <inHandlerMode>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008062:	2382      	movs	r3, #130	; 0x82
 8008064:	e003      	b.n	800806e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fa48 	bl	80094fc <vQueueDelete>

  return osOK; 
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b086      	sub	sp, #24
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	3303      	adds	r3, #3
 8008084:	f023 0303 	bic.w	r3, r3, #3
 8008088:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800808a:	2014      	movs	r0, #20
 800808c:	f002 fe2c 	bl	800ace8 <pvPortMalloc>
 8008090:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d046      	beq.n	8008126 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2200      	movs	r2, #0
 80080aa:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 fe19 	bl	800ace8 <pvPortMalloc>
 80080b6:	4602      	mov	r2, r0
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d02b      	beq.n	800811c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
 80080ce:	4618      	mov	r0, r3
 80080d0:	f002 fe0a 	bl	800ace8 <pvPortMalloc>
 80080d4:	4602      	mov	r2, r0
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d011      	beq.n	8008106 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	e008      	b.n	80080fa <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3301      	adds	r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	429a      	cmp	r2, r3
 8008102:	d3f1      	bcc.n	80080e8 <osPoolCreate+0x72>
 8008104:	e00f      	b.n	8008126 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4618      	mov	r0, r3
 800810c:	f002 feb8 	bl	800ae80 <vPortFree>
        vPortFree(thePool);
 8008110:	6978      	ldr	r0, [r7, #20]
 8008112:	f002 feb5 	bl	800ae80 <vPortFree>
        thePool = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e004      	b.n	8008126 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800811c:	6978      	ldr	r0, [r7, #20]
 800811e:	f002 feaf 	bl	800ae80 <vPortFree>
      thePool = NULL;
 8008122:	2300      	movs	r3, #0
 8008124:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8008126:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08a      	sub	sp, #40	; 0x28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8008140:	f7ff fdaa 	bl	8007c98 <inHandlerMode>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00e      	beq.n	8008168 <osPoolAlloc+0x38>
	__asm volatile
 800814a:	f3ef 8211 	mrs	r2, BASEPRI
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	617a      	str	r2, [r7, #20]
 8008160:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008162:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	e001      	b.n	800816c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8008168:	f002 fc9c 	bl	800aaa4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e029      	b.n	80081c6 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6892      	ldr	r2, [r2, #8]
 800817e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008182:	fb01 f202 	mul.w	r2, r1, r2
 8008186:	1a9b      	subs	r3, r3, r2
 8008188:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	4413      	add	r3, r2
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d113      	bne.n	80081c0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	4413      	add	r3, r2
 80081a0:	2201      	movs	r2, #1
 80081a2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4619      	mov	r1, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	fb02 f303 	mul.w	r3, r2, r3
 80081b4:	440b      	add	r3, r1
 80081b6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	611a      	str	r2, [r3, #16]
      break;
 80081be:	e007      	b.n	80081d0 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3d0      	bcc.n	8008172 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80081d0:	f7ff fd62 	bl	8007c98 <inHandlerMode>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f383 8811 	msr	BASEPRI, r3
}
 80081e4:	e001      	b.n	80081ea <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80081e6:	f002 fc8d 	bl	800ab04 <vPortExitCritical>
  }
  
  return p;
 80081ea:	6a3b      	ldr	r3, [r7, #32]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3728      	adds	r7, #40	; 0x28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <osPoolFree+0x14>
    return osErrorParameter;
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	e030      	b.n	800826a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <osPoolFree+0x1e>
    return osErrorParameter;
 800820e:	2380      	movs	r3, #128	; 0x80
 8008210:	e02b      	b.n	800826a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d201      	bcs.n	8008220 <osPoolFree+0x2c>
    return osErrorParameter;
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	e024      	b.n	800826a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	fbb3 f1f2 	udiv	r1, r3, r2
 8008234:	fb01 f202 	mul.w	r2, r1, r2
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <osPoolFree+0x4e>
    return osErrorParameter;
 800823e:	2380      	movs	r3, #128	; 0x80
 8008240:	e013      	b.n	800826a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	429a      	cmp	r2, r3
 8008256:	d301      	bcc.n	800825c <osPoolFree+0x68>
    return osErrorParameter;
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	e006      	b.n	800826a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b085      	sub	sp, #20
 800827a:	af02      	add	r7, sp, #8
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d011      	beq.n	80082ac <osMessageCreate+0x36>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00d      	beq.n	80082ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6859      	ldr	r1, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2400      	movs	r4, #0
 80082a2:	9400      	str	r4, [sp, #0]
 80082a4:	f000 fb3e 	bl	8008924 <xQueueGenericCreateStatic>
 80082a8:	4603      	mov	r3, r0
 80082aa:	e008      	b.n	80082be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	4619      	mov	r1, r3
 80082b8:	f000 fbac 	bl	8008a14 <xQueueGenericCreate>
 80082bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd90      	pop	{r4, r7, pc}
	...

080082c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <osMessagePut+0x1e>
    ticks = 1;
 80082e2:	2301      	movs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80082e6:	f7ff fcd7 	bl	8007c98 <inHandlerMode>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d018      	beq.n	8008322 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80082f0:	f107 0210 	add.w	r2, r7, #16
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	2300      	movs	r3, #0
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fd2e 	bl	8008d5c <xQueueGenericSendFromISR>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d001      	beq.n	800830a <osMessagePut+0x42>
      return osErrorOS;
 8008306:	23ff      	movs	r3, #255	; 0xff
 8008308:	e018      	b.n	800833c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d014      	beq.n	800833a <osMessagePut+0x72>
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <osMessagePut+0x7c>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	e00b      	b.n	800833a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008322:	f107 0108 	add.w	r1, r7, #8
 8008326:	2300      	movs	r3, #0
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fc18 	bl	8008b60 <xQueueGenericSend>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d001      	beq.n	800833a <osMessagePut+0x72>
      return osErrorOS;
 8008336:	23ff      	movs	r3, #255	; 0xff
 8008338:	e000      	b.n	800833c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008348:	b590      	push	{r4, r7, lr}
 800834a:	b08b      	sub	sp, #44	; 0x2c
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	617b      	str	r3, [r7, #20]
    return event;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	461c      	mov	r4, r3
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008376:	e054      	b.n	8008422 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d103      	bne.n	8008390 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
 800838e:	e009      	b.n	80083a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d006      	beq.n	80083a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <osMessageGet+0x5c>
      ticks = 1;
 80083a0:	2301      	movs	r3, #1
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80083a4:	f7ff fc78 	bl	8007c98 <inHandlerMode>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01c      	beq.n	80083e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80083ae:	f107 0220 	add.w	r2, r7, #32
 80083b2:	f107 0314 	add.w	r3, r7, #20
 80083b6:	3304      	adds	r3, #4
 80083b8:	4619      	mov	r1, r3
 80083ba:	68b8      	ldr	r0, [r7, #8]
 80083bc:	f000 ffe2 	bl	8009384 <xQueueReceiveFromISR>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d102      	bne.n	80083cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80083c6:	2310      	movs	r3, #16
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	e001      	b.n	80083d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01d      	beq.n	8008412 <osMessageGet+0xca>
 80083d6:	4b15      	ldr	r3, [pc, #84]	; (800842c <osMessageGet+0xe4>)
 80083d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	e014      	b.n	8008412 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	3304      	adds	r3, #4
 80083ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f0:	4619      	mov	r1, r3
 80083f2:	68b8      	ldr	r0, [r7, #8]
 80083f4:	f000 fdda 	bl	8008fac <xQueueReceive>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d102      	bne.n	8008404 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80083fe:	2310      	movs	r3, #16
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e006      	b.n	8008412 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <osMessageGet+0xc6>
 800840a:	2300      	movs	r3, #0
 800840c:	e000      	b.n	8008410 <osMessageGet+0xc8>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	461c      	mov	r4, r3
 8008416:	f107 0314 	add.w	r3, r7, #20
 800841a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800841e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	372c      	adds	r7, #44	; 0x2c
 8008426:	46bd      	mov	sp, r7
 8008428:	bd90      	pop	{r4, r7, pc}
 800842a:	bf00      	nop
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8008430:	b590      	push	{r4, r7, lr}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689c      	ldr	r4, [r3, #8]
 800844e:	200c      	movs	r0, #12
 8008450:	f002 fc4a 	bl	800ace8 <pvPortMalloc>
 8008454:	4603      	mov	r3, r0
 8008456:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <osMailCreate+0x36>
    return NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	e038      	b.n	80084d8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	681c      	ldr	r4, [r3, #0]
 800847a:	2200      	movs	r2, #0
 800847c:	2104      	movs	r1, #4
 800847e:	f000 fac9 	bl	8008a14 <xQueueGenericCreate>
 8008482:	4603      	mov	r3, r0
 8008484:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d107      	bne.n	80084a2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f002 fcf1 	bl	800ae80 <vPortFree>
    return NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	e01a      	b.n	80084d8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	681c      	ldr	r4, [r3, #0]
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff fde2 	bl	8008076 <osPoolCreate>
 80084b2:	4603      	mov	r3, r0
 80084b4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d107      	bne.n	80084d2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 fcd9 	bl	800ae80 <vPortFree>
    return NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e002      	b.n	80084d8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80084d8:	4618      	mov	r0, r3
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd90      	pop	{r4, r7, pc}

080084e0 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <osMailAlloc+0x14>
    return NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e006      	b.n	8008502 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fe19 	bl	8008130 <osPoolAlloc>
 80084fe:	60f8      	str	r0, [r7, #12]
  
  return p;
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <osMailPut+0x14>
    return osErrorParameter;
 800851c:	2380      	movs	r3, #128	; 0x80
 800851e:	e02c      	b.n	800857a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8008524:	f7ff fbb8 	bl	8007c98 <inHandlerMode>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d018      	beq.n	8008560 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6858      	ldr	r0, [r3, #4]
 8008532:	f107 020c 	add.w	r2, r7, #12
 8008536:	4639      	mov	r1, r7
 8008538:	2300      	movs	r3, #0
 800853a:	f000 fc0f 	bl	8008d5c <xQueueGenericSendFromISR>
 800853e:	4603      	mov	r3, r0
 8008540:	2b01      	cmp	r3, #1
 8008542:	d001      	beq.n	8008548 <osMailPut+0x3c>
      return osErrorOS;
 8008544:	23ff      	movs	r3, #255	; 0xff
 8008546:	e018      	b.n	800857a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d014      	beq.n	8008578 <osMailPut+0x6c>
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <osMailPut+0x78>)
 8008550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	e00b      	b.n	8008578 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6858      	ldr	r0, [r3, #4]
 8008564:	4639      	mov	r1, r7
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	f000 faf9 	bl	8008b60 <xQueueGenericSend>
 800856e:	4603      	mov	r3, r0
 8008570:	2b01      	cmp	r3, #1
 8008572:	d001      	beq.n	8008578 <osMailPut+0x6c>
      return osErrorOS;
 8008574:	23ff      	movs	r3, #255	; 0xff
 8008576:	e000      	b.n	800857a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8008588:	b590      	push	{r4, r7, lr}
 800858a:	b08b      	sub	sp, #44	; 0x2c
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	617b      	str	r3, [r7, #20]
    return event;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	461c      	mov	r4, r3
 80085a6:	f107 0314 	add.w	r3, r7, #20
 80085aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085b2:	e056      	b.n	8008662 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d103      	bne.n	80085cc <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80085c4:	f04f 33ff 	mov.w	r3, #4294967295
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
 80085ca:	e009      	b.n	80085e0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d006      	beq.n	80085e0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <osMailGet+0x58>
      ticks = 1;
 80085dc:	2301      	movs	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80085e0:	f7ff fb5a 	bl	8007c98 <inHandlerMode>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01d      	beq.n	8008626 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6858      	ldr	r0, [r3, #4]
 80085ee:	f107 0220 	add.w	r2, r7, #32
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	3304      	adds	r3, #4
 80085f8:	4619      	mov	r1, r3
 80085fa:	f000 fec3 	bl	8009384 <xQueueReceiveFromISR>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b01      	cmp	r3, #1
 8008602:	d102      	bne.n	800860a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8008604:	2320      	movs	r3, #32
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e001      	b.n	800860e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01e      	beq.n	8008652 <osMailGet+0xca>
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <osMailGet+0xe4>)
 8008616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	e015      	b.n	8008652 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6858      	ldr	r0, [r3, #4]
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	3304      	adds	r3, #4
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	4619      	mov	r1, r3
 8008634:	f000 fcba 	bl	8008fac <xQueueReceive>
 8008638:	4603      	mov	r3, r0
 800863a:	2b01      	cmp	r3, #1
 800863c:	d102      	bne.n	8008644 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800863e:	2320      	movs	r3, #32
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	e006      	b.n	8008652 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <osMailGet+0xc6>
 800864a:	2300      	movs	r3, #0
 800864c:	e000      	b.n	8008650 <osMailGet+0xc8>
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	461c      	mov	r4, r3
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800865e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	372c      	adds	r7, #44	; 0x2c
 8008666:	46bd      	mov	sp, r7
 8008668:	bd90      	pop	{r4, r7, pc}
 800866a:	bf00      	nop
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <osMailFree+0x14>
    return osErrorParameter;
 8008680:	2380      	movs	r3, #128	; 0x80
 8008682:	e006      	b.n	8008692 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fdb2 	bl	80081f4 <osPoolFree>
 8008690:	4603      	mov	r3, r0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80086a2:	f7ff faf9 	bl	8007c98 <inHandlerMode>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 ff07 	bl	80094c0 <uxQueueMessagesWaitingFromISR>
 80086b2:	4603      	mov	r3, r0
 80086b4:	e003      	b.n	80086be <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fee4 	bl	8009484 <uxQueueMessagesWaiting>
 80086bc:	4603      	mov	r3, r0
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80086ce:	f7ff fae3 	bl	8007c98 <inHandlerMode>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <osMessageDelete+0x16>
    return osErrorISR;
 80086d8:	2382      	movs	r3, #130	; 0x82
 80086da:	e003      	b.n	80086e4 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 ff0d 	bl	80094fc <vQueueDelete>

  return osOK; 
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f103 0208 	add.w	r2, r3, #8
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f04f 32ff 	mov.w	r2, #4294967295
 8008704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f103 0208 	add.w	r2, r3, #8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f103 0208 	add.w	r2, r3, #8
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800878e:	b480      	push	{r7}
 8008790:	b085      	sub	sp, #20
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d103      	bne.n	80087ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	e00c      	b.n	80087c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3308      	adds	r3, #8
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	e002      	b.n	80087bc <vListInsert+0x2e>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d2f6      	bcs.n	80087b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6892      	ldr	r2, [r2, #8]
 8008816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6852      	ldr	r2, [r2, #4]
 8008820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	429a      	cmp	r2, r3
 800882a:	d103      	bne.n	8008834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	1e5a      	subs	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xQueueGenericReset+0x2a>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	60bb      	str	r3, [r7, #8]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800887e:	f002 f911 	bl	800aaa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	441a      	add	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	3b01      	subs	r3, #1
 80088b0:	68f9      	ldr	r1, [r7, #12]
 80088b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	441a      	add	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	22ff      	movs	r2, #255	; 0xff
 80088c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d114      	bne.n	80088fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01a      	beq.n	8008912 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3310      	adds	r3, #16
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fbd3 	bl	800a08c <xTaskRemoveFromEventList>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d012      	beq.n	8008912 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <xQueueGenericReset+0xcc>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	e009      	b.n	8008912 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3310      	adds	r3, #16
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fef2 	bl	80086ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	3324      	adds	r3, #36	; 0x24
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff feed 	bl	80086ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008912:	f002 f8f7 	bl	800ab04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008916:	2301      	movs	r3, #1
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10a      	bne.n	800894e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800894a:	bf00      	nop
 800894c:	e7fe      	b.n	800894c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <xQueueGenericCreateStatic+0x52>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <xQueueGenericCreateStatic+0x56>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericCreateStatic+0x58>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <xQueueGenericCreateStatic+0x7e>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <xQueueGenericCreateStatic+0x82>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <xQueueGenericCreateStatic+0x84>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	61fb      	str	r3, [r7, #28]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089c2:	2348      	movs	r3, #72	; 0x48
 80089c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b48      	cmp	r3, #72	; 0x48
 80089ca:	d00a      	beq.n	80089e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	61bb      	str	r3, [r7, #24]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	4613      	mov	r3, r2
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f83f 	bl	8008a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3730      	adds	r7, #48	; 0x30
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	613b      	str	r3, [r7, #16]
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3348      	adds	r3, #72	; 0x48
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f002 f94b 	bl	800ace8 <pvPortMalloc>
 8008a52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d011      	beq.n	8008a7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	3348      	adds	r3, #72	; 0x48
 8008a62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a6c:	79fa      	ldrb	r2, [r7, #7]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f805 	bl	8008a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
	}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e002      	b.n	8008aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	69b8      	ldr	r0, [r7, #24]
 8008aba:	f7ff fecb 	bl	8008854 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008abe:	bf00      	nop
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2100      	movs	r1, #0
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f837 	bl	8008b60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	4603      	mov	r3, r0
 8008b02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b04:	2301      	movs	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6939      	ldr	r1, [r7, #16]
 8008b12:	6978      	ldr	r0, [r7, #20]
 8008b14:	f7ff ff7e 	bl	8008a14 <xQueueGenericCreate>
 8008b18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff ffd3 	bl	8008ac6 <prvInitialiseMutex>

		return xNewQueue;
 8008b20:	68fb      	ldr	r3, [r7, #12]
	}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af02      	add	r7, sp, #8
 8008b30:	4603      	mov	r3, r0
 8008b32:	6039      	str	r1, [r7, #0]
 8008b34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2200      	movs	r2, #0
 8008b46:	6939      	ldr	r1, [r7, #16]
 8008b48:	6978      	ldr	r0, [r7, #20]
 8008b4a:	f7ff feeb 	bl	8008924 <xQueueGenericCreateStatic>
 8008b4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff ffb8 	bl	8008ac6 <prvInitialiseMutex>

		return xNewQueue;
 8008b56:	68fb      	ldr	r3, [r7, #12]
	}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08e      	sub	sp, #56	; 0x38
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <xQueueGenericSend+0x32>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <xQueueGenericSend+0x40>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <xQueueGenericSend+0x44>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <xQueueGenericSend+0x46>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <xQueueGenericSend+0x60>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d103      	bne.n	8008bce <xQueueGenericSend+0x6e>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d101      	bne.n	8008bd2 <xQueueGenericSend+0x72>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <xQueueGenericSend+0x74>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericSend+0x8e>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	623b      	str	r3, [r7, #32]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bee:	f001 fc0d 	bl	800a40c <xTaskGetSchedulerState>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <xQueueGenericSend+0x9e>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueGenericSend+0xa2>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueGenericSend+0xa4>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xQueueGenericSend+0xbe>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61fb      	str	r3, [r7, #28]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c1e:	f001 ff41 	bl	800aaa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d302      	bcc.n	8008c34 <xQueueGenericSend+0xd4>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d129      	bne.n	8008c88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c3a:	f000 fc9a 	bl	8009572 <prvCopyDataToQueue>
 8008c3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d010      	beq.n	8008c6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	3324      	adds	r3, #36	; 0x24
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 fa1d 	bl	800a08c <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d013      	beq.n	8008c80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b3f      	ldr	r3, [pc, #252]	; (8008d58 <xQueueGenericSend+0x1f8>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	e00a      	b.n	8008c80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c70:	4b39      	ldr	r3, [pc, #228]	; (8008d58 <xQueueGenericSend+0x1f8>)
 8008c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c80:	f001 ff40 	bl	800ab04 <vPortExitCritical>
				return pdPASS;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e063      	b.n	8008d50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c8e:	f001 ff39 	bl	800ab04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	e05c      	b.n	8008d50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d106      	bne.n	8008caa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c9c:	f107 0314 	add.w	r3, r7, #20
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 fa55 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008caa:	f001 ff2b 	bl	800ab04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cae:	f000 ffe3 	bl	8009c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cb2:	f001 fef7 	bl	800aaa4 <vPortEnterCritical>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cbc:	b25b      	sxtb	r3, r3
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d103      	bne.n	8008ccc <xQueueGenericSend+0x16c>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cd2:	b25b      	sxtb	r3, r3
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <xQueueGenericSend+0x182>
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce2:	f001 ff0f 	bl	800ab04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ce6:	1d3a      	adds	r2, r7, #4
 8008ce8:	f107 0314 	add.w	r3, r7, #20
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f001 fa44 	bl	800a17c <xTaskCheckForTimeOut>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d124      	bne.n	8008d44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfc:	f000 fd31 	bl	8009762 <prvIsQueueFull>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d018      	beq.n	8008d38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	3310      	adds	r3, #16
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f998 	bl	800a044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d16:	f000 fcbc 	bl	8009692 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d1a:	f000 ffbb 	bl	8009c94 <xTaskResumeAll>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f47f af7c 	bne.w	8008c1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <xQueueGenericSend+0x1f8>)
 8008d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	e772      	b.n	8008c1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d3a:	f000 fcaa 	bl	8009692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d3e:	f000 ffa9 	bl	8009c94 <xTaskResumeAll>
 8008d42:	e76c      	b.n	8008c1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d46:	f000 fca4 	bl	8009692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d4a:	f000 ffa3 	bl	8009c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3738      	adds	r7, #56	; 0x38
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b090      	sub	sp, #64	; 0x40
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <xQueueGenericSendFromISR+0x3c>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <xQueueGenericSendFromISR+0x40>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <xQueueGenericSendFromISR+0x42>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d103      	bne.n	8008dc6 <xQueueGenericSendFromISR+0x6a>
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <xQueueGenericSendFromISR+0x6e>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <xQueueGenericSendFromISR+0x70>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	623b      	str	r3, [r7, #32]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008de6:	f001 ff3f 	bl	800ac68 <vPortValidateInterruptPriority>
	__asm volatile
 8008dea:	f3ef 8211 	mrs	r2, BASEPRI
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	61fa      	str	r2, [r7, #28]
 8008e00:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008e02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d302      	bcc.n	8008e18 <xQueueGenericSendFromISR+0xbc>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d12f      	bne.n	8008e78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e2e:	f000 fba0 	bl	8009572 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d112      	bne.n	8008e62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d016      	beq.n	8008e72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	3324      	adds	r3, #36	; 0x24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 f91f 	bl	800a08c <xTaskRemoveFromEventList>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00e      	beq.n	8008e72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	e007      	b.n	8008e72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e66:	3301      	adds	r3, #1
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	b25a      	sxtb	r2, r3
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e72:	2301      	movs	r3, #1
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008e76:	e001      	b.n	8008e7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f383 8811 	msr	BASEPRI, r3
}
 8008e86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3740      	adds	r7, #64	; 0x40
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b08e      	sub	sp, #56	; 0x38
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10a      	bne.n	8008ebc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	623b      	str	r3, [r7, #32]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <xQueueGiveFromISR+0x48>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	61fb      	str	r3, [r7, #28]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d103      	bne.n	8008eea <xQueueGiveFromISR+0x58>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <xQueueGiveFromISR+0x5c>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e000      	b.n	8008ef0 <xQueueGiveFromISR+0x5e>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	61bb      	str	r3, [r7, #24]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f0a:	f001 fead 	bl	800ac68 <vPortValidateInterruptPriority>
	__asm volatile
 8008f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	617a      	str	r2, [r7, #20]
 8008f24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008f26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d22b      	bcs.n	8008f92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	d112      	bne.n	8008f7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d016      	beq.n	8008f8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	3324      	adds	r3, #36	; 0x24
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 f892 	bl	800a08c <xTaskRemoveFromEventList>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00e      	beq.n	8008f8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2201      	movs	r2, #1
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e007      	b.n	8008f8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f80:	3301      	adds	r3, #1
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	b25a      	sxtb	r2, r3
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f90:	e001      	b.n	8008f96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f383 8811 	msr	BASEPRI, r3
}
 8008fa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3738      	adds	r7, #56	; 0x38
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08c      	sub	sp, #48	; 0x30
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <xQueueReceive+0x30>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	623b      	str	r3, [r7, #32]
}
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d103      	bne.n	8008fea <xQueueReceive+0x3e>
 8008fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <xQueueReceive+0x42>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e000      	b.n	8008ff0 <xQueueReceive+0x44>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10a      	bne.n	800900a <xQueueReceive+0x5e>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	61fb      	str	r3, [r7, #28]
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800900a:	f001 f9ff 	bl	800a40c <xTaskGetSchedulerState>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <xQueueReceive+0x6e>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <xQueueReceive+0x72>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <xQueueReceive+0x74>
 800901e:	2300      	movs	r3, #0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <xQueueReceive+0x8e>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	61bb      	str	r3, [r7, #24]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800903a:	f001 fd33 	bl	800aaa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01f      	beq.n	800908a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800904e:	f000 fafa 	bl	8009646 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	1e5a      	subs	r2, r3, #1
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00f      	beq.n	8009082 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	3310      	adds	r3, #16
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f810 	bl	800a08c <xTaskRemoveFromEventList>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009072:	4b3d      	ldr	r3, [pc, #244]	; (8009168 <xQueueReceive+0x1bc>)
 8009074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009082:	f001 fd3f 	bl	800ab04 <vPortExitCritical>
				return pdPASS;
 8009086:	2301      	movs	r3, #1
 8009088:	e069      	b.n	800915e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d103      	bne.n	8009098 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009090:	f001 fd38 	bl	800ab04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009094:	2300      	movs	r3, #0
 8009096:	e062      	b.n	800915e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800909e:	f107 0310 	add.w	r3, r7, #16
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 f854 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090ac:	f001 fd2a 	bl	800ab04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090b0:	f000 fde2 	bl	8009c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090b4:	f001 fcf6 	bl	800aaa4 <vPortEnterCritical>
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090be:	b25b      	sxtb	r3, r3
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c4:	d103      	bne.n	80090ce <xQueueReceive+0x122>
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090d4:	b25b      	sxtb	r3, r3
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	d103      	bne.n	80090e4 <xQueueReceive+0x138>
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090e4:	f001 fd0e 	bl	800ab04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090e8:	1d3a      	adds	r2, r7, #4
 80090ea:	f107 0310 	add.w	r3, r7, #16
 80090ee:	4611      	mov	r1, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 f843 	bl	800a17c <xTaskCheckForTimeOut>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d123      	bne.n	8009144 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fe:	f000 fb1a 	bl	8009736 <prvIsQueueEmpty>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d017      	beq.n	8009138 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	3324      	adds	r3, #36	; 0x24
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f000 ff97 	bl	800a044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009118:	f000 fabb 	bl	8009692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800911c:	f000 fdba 	bl	8009c94 <xTaskResumeAll>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d189      	bne.n	800903a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009126:	4b10      	ldr	r3, [pc, #64]	; (8009168 <xQueueReceive+0x1bc>)
 8009128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	e780      	b.n	800903a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800913a:	f000 faaa 	bl	8009692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800913e:	f000 fda9 	bl	8009c94 <xTaskResumeAll>
 8009142:	e77a      	b.n	800903a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009146:	f000 faa4 	bl	8009692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800914a:	f000 fda3 	bl	8009c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800914e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009150:	f000 faf1 	bl	8009736 <prvIsQueueEmpty>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	f43f af6f 	beq.w	800903a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800915c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800915e:	4618      	mov	r0, r3
 8009160:	3730      	adds	r7, #48	; 0x30
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08e      	sub	sp, #56	; 0x38
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009176:	2300      	movs	r3, #0
 8009178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	623b      	str	r3, [r7, #32]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	61fb      	str	r3, [r7, #28]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091bc:	f001 f926 	bl	800a40c <xTaskGetSchedulerState>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d102      	bne.n	80091cc <xQueueSemaphoreTake+0x60>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <xQueueSemaphoreTake+0x64>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <xQueueSemaphoreTake+0x66>
 80091d0:	2300      	movs	r3, #0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	61bb      	str	r3, [r7, #24]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091ec:	f001 fc5a 	bl	800aaa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d024      	beq.n	8009246 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	1e5a      	subs	r2, r3, #1
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800920c:	f001 faa6 	bl	800a75c <pvTaskIncrementMutexHeldCount>
 8009210:	4602      	mov	r2, r0
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00f      	beq.n	800923e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	3310      	adds	r3, #16
 8009222:	4618      	mov	r0, r3
 8009224:	f000 ff32 	bl	800a08c <xTaskRemoveFromEventList>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800922e:	4b54      	ldr	r3, [pc, #336]	; (8009380 <xQueueSemaphoreTake+0x214>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800923e:	f001 fc61 	bl	800ab04 <vPortExitCritical>
				return pdPASS;
 8009242:	2301      	movs	r3, #1
 8009244:	e097      	b.n	8009376 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d111      	bne.n	8009270 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	617b      	str	r3, [r7, #20]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009268:	f001 fc4c 	bl	800ab04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800926c:	2300      	movs	r3, #0
 800926e:	e082      	b.n	8009376 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	4618      	mov	r0, r3
 800927c:	f000 ff68 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009280:	2301      	movs	r3, #1
 8009282:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009284:	f001 fc3e 	bl	800ab04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009288:	f000 fcf6 	bl	8009c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800928c:	f001 fc0a 	bl	800aaa4 <vPortEnterCritical>
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009296:	b25b      	sxtb	r3, r3
 8009298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929c:	d103      	bne.n	80092a6 <xQueueSemaphoreTake+0x13a>
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092ac:	b25b      	sxtb	r3, r3
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d103      	bne.n	80092bc <xQueueSemaphoreTake+0x150>
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092bc:	f001 fc22 	bl	800ab04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092c0:	463a      	mov	r2, r7
 80092c2:	f107 030c 	add.w	r3, r7, #12
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 ff57 	bl	800a17c <xTaskCheckForTimeOut>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d132      	bne.n	800933a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d6:	f000 fa2e 	bl	8009736 <prvIsQueueEmpty>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d026      	beq.n	800932e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80092e8:	f001 fbdc 	bl	800aaa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 f8a9 	bl	800a448 <xTaskPriorityInherit>
 80092f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80092f8:	f001 fc04 	bl	800ab04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fe9d 	bl	800a044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800930a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800930c:	f000 f9c1 	bl	8009692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009310:	f000 fcc0 	bl	8009c94 <xTaskResumeAll>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	f47f af68 	bne.w	80091ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800931c:	4b18      	ldr	r3, [pc, #96]	; (8009380 <xQueueSemaphoreTake+0x214>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	e75e      	b.n	80091ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800932e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009330:	f000 f9af 	bl	8009692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009334:	f000 fcae 	bl	8009c94 <xTaskResumeAll>
 8009338:	e758      	b.n	80091ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800933a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800933c:	f000 f9a9 	bl	8009692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009340:	f000 fca8 	bl	8009c94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009346:	f000 f9f6 	bl	8009736 <prvIsQueueEmpty>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	f43f af4d 	beq.w	80091ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00d      	beq.n	8009374 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009358:	f001 fba4 	bl	800aaa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800935c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800935e:	f000 f8f0 	bl	8009542 <prvGetDisinheritPriorityAfterTimeout>
 8009362:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800936a:	4618      	mov	r0, r3
 800936c:	f001 f968 	bl	800a640 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009370:	f001 fbc8 	bl	800ab04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009376:	4618      	mov	r0, r3
 8009378:	3738      	adds	r7, #56	; 0x38
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b08e      	sub	sp, #56	; 0x38
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	623b      	str	r3, [r7, #32]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <xQueueReceiveFromISR+0x3a>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <xQueueReceiveFromISR+0x3e>
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <xQueueReceiveFromISR+0x40>
 80093c2:	2300      	movs	r3, #0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	61fb      	str	r3, [r7, #28]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093de:	f001 fc43 	bl	800ac68 <vPortValidateInterruptPriority>
	__asm volatile
 80093e2:	f3ef 8211 	mrs	r2, BASEPRI
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	61ba      	str	r2, [r7, #24]
 80093f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80093fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	2b00      	cmp	r3, #0
 8009408:	d02f      	beq.n	800946a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009418:	f000 f915 	bl	8009646 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	1e5a      	subs	r2, r3, #1
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d112      	bne.n	8009454 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d016      	beq.n	8009464 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	3310      	adds	r3, #16
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fe26 	bl	800a08c <xTaskRemoveFromEventList>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00e      	beq.n	8009464 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e007      	b.n	8009464 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009458:	3301      	adds	r3, #1
 800945a:	b2db      	uxtb	r3, r3
 800945c:	b25a      	sxtb	r2, r3
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009464:	2301      	movs	r3, #1
 8009466:	637b      	str	r3, [r7, #52]	; 0x34
 8009468:	e001      	b.n	800946e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800946a:	2300      	movs	r3, #0
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f383 8811 	msr	BASEPRI, r3
}
 8009478:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800947a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800947c:	4618      	mov	r0, r3
 800947e:	3738      	adds	r7, #56	; 0x38
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	60bb      	str	r3, [r7, #8]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80094a8:	f001 fafc 	bl	800aaa4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80094b2:	f001 fb27 	bl	800ab04 <vPortExitCritical>

	return uxReturn;
 80094b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60fb      	str	r3, [r7, #12]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80094ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <vQueueDelete+0x28>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60bb      	str	r3, [r7, #8]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f935 	bl	8009794 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f001 fca3 	bl	800ae80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800953a:	bf00      	nop
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f1c3 0307 	rsb	r3, r3, #7
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e001      	b.n	8009564 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009564:	68fb      	ldr	r3, [r7, #12]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10d      	bne.n	80095ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d14d      	bne.n	8009634 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 ffc9 	bl	800a534 <xTaskPriorityDisinherit>
 80095a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	609a      	str	r2, [r3, #8]
 80095aa:	e043      	b.n	8009634 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d119      	bne.n	80095e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6858      	ldr	r0, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	461a      	mov	r2, r3
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	f00e ffd9 	bl	8018574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	441a      	add	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d32b      	bcc.n	8009634 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	605a      	str	r2, [r3, #4]
 80095e4:	e026      	b.n	8009634 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	68d8      	ldr	r0, [r3, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	461a      	mov	r2, r3
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	f00e ffbf 	bl	8018574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	425b      	negs	r3, r3
 8009600:	441a      	add	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d207      	bcs.n	8009622 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	425b      	negs	r3, r3
 800961c:	441a      	add	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d105      	bne.n	8009634 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3b01      	subs	r3, #1
 8009632:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800963c:	697b      	ldr	r3, [r7, #20]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	2b00      	cmp	r3, #0
 8009656:	d018      	beq.n	800968a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	441a      	add	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	429a      	cmp	r2, r3
 8009670:	d303      	bcc.n	800967a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68d9      	ldr	r1, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	461a      	mov	r2, r3
 8009684:	6838      	ldr	r0, [r7, #0]
 8009686:	f00e ff75 	bl	8018574 <memcpy>
	}
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800969a:	f001 fa03 	bl	800aaa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096a6:	e011      	b.n	80096cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d012      	beq.n	80096d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3324      	adds	r3, #36	; 0x24
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fce9 	bl	800a08c <xTaskRemoveFromEventList>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096c0:	f000 fdbe 	bl	800a240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dce9      	bgt.n	80096a8 <prvUnlockQueue+0x16>
 80096d4:	e000      	b.n	80096d8 <prvUnlockQueue+0x46>
					break;
 80096d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	22ff      	movs	r2, #255	; 0xff
 80096dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80096e0:	f001 fa10 	bl	800ab04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80096e4:	f001 f9de 	bl	800aaa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096f0:	e011      	b.n	8009716 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d012      	beq.n	8009720 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3310      	adds	r3, #16
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fcc4 	bl	800a08c <xTaskRemoveFromEventList>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800970a:	f000 fd99 	bl	800a240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	3b01      	subs	r3, #1
 8009712:	b2db      	uxtb	r3, r3
 8009714:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	dce9      	bgt.n	80096f2 <prvUnlockQueue+0x60>
 800971e:	e000      	b.n	8009722 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009720:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800972a:	f001 f9eb 	bl	800ab04 <vPortExitCritical>
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800973e:	f001 f9b1 	bl	800aaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800974a:	2301      	movs	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	e001      	b.n	8009754 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009754:	f001 f9d6 	bl	800ab04 <vPortExitCritical>

	return xReturn;
 8009758:	68fb      	ldr	r3, [r7, #12]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800976a:	f001 f99b 	bl	800aaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	429a      	cmp	r2, r3
 8009778:	d102      	bne.n	8009780 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e001      	b.n	8009784 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009784:	f001 f9be 	bl	800ab04 <vPortExitCritical>

	return xReturn;
 8009788:	68fb      	ldr	r3, [r7, #12]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
	...

08009794 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e016      	b.n	80097d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80097a2:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <vQueueUnregisterQueue+0x50>)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d10b      	bne.n	80097ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80097b2:	4a0c      	ldr	r2, [pc, #48]	; (80097e4 <vQueueUnregisterQueue+0x50>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2100      	movs	r1, #0
 80097b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80097bc:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <vQueueUnregisterQueue+0x50>)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	4413      	add	r3, r2
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
				break;
 80097c8:	e006      	b.n	80097d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b07      	cmp	r3, #7
 80097d4:	d9e5      	bls.n	80097a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20003cc0 	.word	0x20003cc0

080097e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08e      	sub	sp, #56	; 0x38
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	623b      	str	r3, [r7, #32]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <xTaskCreateStatic+0x46>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	61fb      	str	r3, [r7, #28]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800982e:	23b4      	movs	r3, #180	; 0xb4
 8009830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2bb4      	cmp	r3, #180	; 0xb4
 8009836:	d00a      	beq.n	800984e <xTaskCreateStatic+0x66>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	61bb      	str	r3, [r7, #24]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800984e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01e      	beq.n	8009894 <xTaskCreateStatic+0xac>
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01b      	beq.n	8009894 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009864:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	2202      	movs	r2, #2
 800986a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800986e:	2300      	movs	r3, #0
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	f107 0314 	add.w	r3, r7, #20
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f850 	bl	800992c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800988c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800988e:	f000 f8eb 	bl	8009a68 <prvAddNewTaskToReadyList>
 8009892:	e001      	b.n	8009898 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009898:	697b      	ldr	r3, [r7, #20]
	}
 800989a:	4618      	mov	r0, r3
 800989c:	3728      	adds	r7, #40	; 0x28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b08c      	sub	sp, #48	; 0x30
 80098a6:	af04      	add	r7, sp, #16
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	603b      	str	r3, [r7, #0]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 fa16 	bl	800ace8 <pvPortMalloc>
 80098bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098c4:	20b4      	movs	r0, #180	; 0xb4
 80098c6:	f001 fa0f 	bl	800ace8 <pvPortMalloc>
 80098ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	631a      	str	r2, [r3, #48]	; 0x30
 80098d8:	e005      	b.n	80098e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098da:	6978      	ldr	r0, [r7, #20]
 80098dc:	f001 fad0 	bl	800ae80 <vPortFree>
 80098e0:	e001      	b.n	80098e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f80e 	bl	800992c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009910:	69f8      	ldr	r0, [r7, #28]
 8009912:	f000 f8a9 	bl	8009a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009916:	2301      	movs	r3, #1
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e002      	b.n	8009922 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800991c:	f04f 33ff 	mov.w	r3, #4294967295
 8009920:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009922:	69bb      	ldr	r3, [r7, #24]
	}
 8009924:	4618      	mov	r0, r3
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009944:	3b01      	subs	r3, #1
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	f023 0307 	bic.w	r3, r3, #7
 8009952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <prvInitialiseNewTask+0x48>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	617b      	str	r3, [r7, #20]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01f      	beq.n	80099ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800997a:	2300      	movs	r3, #0
 800997c:	61fb      	str	r3, [r7, #28]
 800997e:	e012      	b.n	80099a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	7819      	ldrb	r1, [r3, #0]
 8009988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	3334      	adds	r3, #52	; 0x34
 8009990:	460a      	mov	r2, r1
 8009992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4413      	add	r3, r2
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d006      	beq.n	80099ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	3301      	adds	r3, #1
 80099a4:	61fb      	str	r3, [r7, #28]
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	2b0f      	cmp	r3, #15
 80099aa:	d9e9      	bls.n	8009980 <prvInitialiseNewTask+0x54>
 80099ac:	e000      	b.n	80099b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80099ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b8:	e003      	b.n	80099c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	2b06      	cmp	r3, #6
 80099c6:	d901      	bls.n	80099cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099c8:	2306      	movs	r3, #6
 80099ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	2200      	movs	r2, #0
 80099dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	3304      	adds	r3, #4
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fea2 	bl	800872c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	3318      	adds	r3, #24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe fe9d 	bl	800872c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	f1c3 0207 	rsb	r2, r3, #7
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	334c      	adds	r3, #76	; 0x4c
 8009a1c:	2260      	movs	r2, #96	; 0x60
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f00e fdcf 	bl	80185c4 <memset>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	4a0c      	ldr	r2, [pc, #48]	; (8009a5c <prvInitialiseNewTask+0x130>)
 8009a2a:	651a      	str	r2, [r3, #80]	; 0x50
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <prvInitialiseNewTask+0x134>)
 8009a30:	655a      	str	r2, [r3, #84]	; 0x54
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	4a0b      	ldr	r2, [pc, #44]	; (8009a64 <prvInitialiseNewTask+0x138>)
 8009a36:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	69b8      	ldr	r0, [r7, #24]
 8009a3e:	f000 ff07 	bl	800a850 <pxPortInitialiseStack>
 8009a42:	4602      	mov	r2, r0
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a54:	bf00      	nop
 8009a56:	3720      	adds	r7, #32
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	0801d050 	.word	0x0801d050
 8009a60:	0801d070 	.word	0x0801d070
 8009a64:	0801d030 	.word	0x0801d030

08009a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a70:	f001 f818 	bl	800aaa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a74:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <prvAddNewTaskToReadyList+0xb8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	4a29      	ldr	r2, [pc, #164]	; (8009b20 <prvAddNewTaskToReadyList+0xb8>)
 8009a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a7e:	4b29      	ldr	r3, [pc, #164]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a86:	4a27      	ldr	r2, [pc, #156]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a8c:	4b24      	ldr	r3, [pc, #144]	; (8009b20 <prvAddNewTaskToReadyList+0xb8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d110      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a94:	f000 fbf8 	bl	800a288 <prvInitialiseTaskLists>
 8009a98:	e00d      	b.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a9a:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <prvAddNewTaskToReadyList+0xc0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aa2:	4b20      	ldr	r3, [pc, #128]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d802      	bhi.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ab0:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ab6:	4b1d      	ldr	r3, [pc, #116]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3301      	adds	r3, #1
 8009abc:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009abe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	409a      	lsls	r2, r3
 8009ac8:	4b19      	ldr	r3, [pc, #100]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	4a18      	ldr	r2, [pc, #96]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <prvAddNewTaskToReadyList+0xcc>)
 8009ae0:	441a      	add	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fe fe2c 	bl	8008746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aee:	f001 f809 	bl	800ab04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009af2:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <prvAddNewTaskToReadyList+0xc0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00e      	beq.n	8009b18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d207      	bcs.n	8009b18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b08:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <prvAddNewTaskToReadyList+0xd0>)
 8009b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20003e00 	.word	0x20003e00
 8009b24:	20003d00 	.word	0x20003d00
 8009b28:	20003e0c 	.word	0x20003e0c
 8009b2c:	20003e1c 	.word	0x20003e1c
 8009b30:	20003e08 	.word	0x20003e08
 8009b34:	20003d04 	.word	0x20003d04
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d017      	beq.n	8009b7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b4e:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <vTaskDelay+0x60>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <vTaskDelay+0x30>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	60bb      	str	r3, [r7, #8]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b6c:	f000 f884 	bl	8009c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fe06 	bl	800a784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b78:	f000 f88c 	bl	8009c94 <xTaskResumeAll>
 8009b7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d107      	bne.n	8009b94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b84:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <vTaskDelay+0x64>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20003e28 	.word	0x20003e28
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08a      	sub	sp, #40	; 0x28
 8009ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	1d39      	adds	r1, r7, #4
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f7 f890 	bl	8000ce0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	9202      	str	r2, [sp, #8]
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	4921      	ldr	r1, [pc, #132]	; (8009c58 <vTaskStartScheduler+0xb4>)
 8009bd4:	4821      	ldr	r0, [pc, #132]	; (8009c5c <vTaskStartScheduler+0xb8>)
 8009bd6:	f7ff fe07 	bl	80097e8 <xTaskCreateStatic>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4a20      	ldr	r2, [pc, #128]	; (8009c60 <vTaskStartScheduler+0xbc>)
 8009bde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009be0:	4b1f      	ldr	r3, [pc, #124]	; (8009c60 <vTaskStartScheduler+0xbc>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009be8:	2301      	movs	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	e001      	b.n	8009bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d11b      	bne.n	8009c30 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	613b      	str	r3, [r7, #16]
}
 8009c0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c0c:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <vTaskStartScheduler+0xc0>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	334c      	adds	r3, #76	; 0x4c
 8009c12:	4a15      	ldr	r2, [pc, #84]	; (8009c68 <vTaskStartScheduler+0xc4>)
 8009c14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c16:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <vTaskStartScheduler+0xc8>)
 8009c18:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c1e:	4b14      	ldr	r3, [pc, #80]	; (8009c70 <vTaskStartScheduler+0xcc>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c24:	4b13      	ldr	r3, [pc, #76]	; (8009c74 <vTaskStartScheduler+0xd0>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c2a:	f000 fe99 	bl	800a960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c2e:	e00e      	b.n	8009c4e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c36:	d10a      	bne.n	8009c4e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	60fb      	str	r3, [r7, #12]
}
 8009c4a:	bf00      	nop
 8009c4c:	e7fe      	b.n	8009c4c <vTaskStartScheduler+0xa8>
}
 8009c4e:	bf00      	nop
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	08019a08 	.word	0x08019a08
 8009c5c:	0800a259 	.word	0x0800a259
 8009c60:	20003e24 	.word	0x20003e24
 8009c64:	20003d00 	.word	0x20003d00
 8009c68:	200000b0 	.word	0x200000b0
 8009c6c:	20003e20 	.word	0x20003e20
 8009c70:	20003e0c 	.word	0x20003e0c
 8009c74:	20003e04 	.word	0x20003e04

08009c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vTaskSuspendAll+0x18>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	4a03      	ldr	r2, [pc, #12]	; (8009c90 <vTaskSuspendAll+0x18>)
 8009c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c86:	bf00      	nop
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	20003e28 	.word	0x20003e28

08009c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ca2:	4b41      	ldr	r3, [pc, #260]	; (8009da8 <xTaskResumeAll+0x114>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	603b      	str	r3, [r7, #0]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cc0:	f000 fef0 	bl	800aaa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cc4:	4b38      	ldr	r3, [pc, #224]	; (8009da8 <xTaskResumeAll+0x114>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	4a37      	ldr	r2, [pc, #220]	; (8009da8 <xTaskResumeAll+0x114>)
 8009ccc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cce:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <xTaskResumeAll+0x114>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d161      	bne.n	8009d9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cd6:	4b35      	ldr	r3, [pc, #212]	; (8009dac <xTaskResumeAll+0x118>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d05d      	beq.n	8009d9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cde:	e02e      	b.n	8009d3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce0:	4b33      	ldr	r3, [pc, #204]	; (8009db0 <xTaskResumeAll+0x11c>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3318      	adds	r3, #24
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe fd87 	bl	8008800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fd82 	bl	8008800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	2201      	movs	r2, #1
 8009d02:	409a      	lsls	r2, r3
 8009d04:	4b2b      	ldr	r3, [pc, #172]	; (8009db4 <xTaskResumeAll+0x120>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	; (8009db4 <xTaskResumeAll+0x120>)
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d12:	4613      	mov	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4a27      	ldr	r2, [pc, #156]	; (8009db8 <xTaskResumeAll+0x124>)
 8009d1c:	441a      	add	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f7fe fd0e 	bl	8008746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2e:	4b23      	ldr	r3, [pc, #140]	; (8009dbc <xTaskResumeAll+0x128>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009d38:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <xTaskResumeAll+0x12c>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d3e:	4b1c      	ldr	r3, [pc, #112]	; (8009db0 <xTaskResumeAll+0x11c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1cc      	bne.n	8009ce0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d4c:	f000 fb3e 	bl	800a3cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d50:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <xTaskResumeAll+0x130>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d5c:	f000 f858 	bl	8009e10 <xTaskIncrementTick>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d66:	4b16      	ldr	r3, [pc, #88]	; (8009dc0 <xTaskResumeAll+0x12c>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1f1      	bne.n	8009d5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009d78:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <xTaskResumeAll+0x130>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <xTaskResumeAll+0x12c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d009      	beq.n	8009d9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d86:	2301      	movs	r3, #1
 8009d88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <xTaskResumeAll+0x134>)
 8009d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d9a:	f000 feb3 	bl	800ab04 <vPortExitCritical>

	return xAlreadyYielded;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20003e28 	.word	0x20003e28
 8009dac:	20003e00 	.word	0x20003e00
 8009db0:	20003dc0 	.word	0x20003dc0
 8009db4:	20003e08 	.word	0x20003e08
 8009db8:	20003d04 	.word	0x20003d04
 8009dbc:	20003d00 	.word	0x20003d00
 8009dc0:	20003e14 	.word	0x20003e14
 8009dc4:	20003e10 	.word	0x20003e10
 8009dc8:	e000ed04 	.word	0xe000ed04

08009dcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <xTaskGetTickCount+0x1c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dd8:	687b      	ldr	r3, [r7, #4]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20003e04 	.word	0x20003e04

08009dec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009df2:	f000 ff39 	bl	800ac68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009df6:	2300      	movs	r3, #0
 8009df8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009dfa:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <xTaskGetTickCountFromISR+0x20>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e00:	683b      	ldr	r3, [r7, #0]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20003e04 	.word	0x20003e04

08009e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e1a:	4b4e      	ldr	r3, [pc, #312]	; (8009f54 <xTaskIncrementTick+0x144>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f040 808e 	bne.w	8009f40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e24:	4b4c      	ldr	r3, [pc, #304]	; (8009f58 <xTaskIncrementTick+0x148>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e2c:	4a4a      	ldr	r2, [pc, #296]	; (8009f58 <xTaskIncrementTick+0x148>)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d120      	bne.n	8009e7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e38:	4b48      	ldr	r3, [pc, #288]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	603b      	str	r3, [r7, #0]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <xTaskIncrementTick+0x46>
 8009e58:	4b40      	ldr	r3, [pc, #256]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	4b40      	ldr	r3, [pc, #256]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a3e      	ldr	r2, [pc, #248]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	4a3e      	ldr	r2, [pc, #248]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	4b3d      	ldr	r3, [pc, #244]	; (8009f64 <xTaskIncrementTick+0x154>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a3c      	ldr	r2, [pc, #240]	; (8009f64 <xTaskIncrementTick+0x154>)
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	f000 faa9 	bl	800a3cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e7a:	4b3b      	ldr	r3, [pc, #236]	; (8009f68 <xTaskIncrementTick+0x158>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d348      	bcc.n	8009f16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e84:	4b35      	ldr	r3, [pc, #212]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8e:	4b36      	ldr	r3, [pc, #216]	; (8009f68 <xTaskIncrementTick+0x158>)
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	601a      	str	r2, [r3, #0]
					break;
 8009e96:	e03e      	b.n	8009f16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e98:	4b30      	ldr	r3, [pc, #192]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d203      	bcs.n	8009eb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009eb0:	4a2d      	ldr	r2, [pc, #180]	; (8009f68 <xTaskIncrementTick+0x158>)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eb6:	e02e      	b.n	8009f16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe fc9f 	bl	8008800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d004      	beq.n	8009ed4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	3318      	adds	r3, #24
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fc96 	bl	8008800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	2201      	movs	r2, #1
 8009eda:	409a      	lsls	r2, r3
 8009edc:	4b23      	ldr	r3, [pc, #140]	; (8009f6c <xTaskIncrementTick+0x15c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	4a22      	ldr	r2, [pc, #136]	; (8009f6c <xTaskIncrementTick+0x15c>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <xTaskIncrementTick+0x160>)
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7fe fc22 	bl	8008746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f06:	4b1b      	ldr	r3, [pc, #108]	; (8009f74 <xTaskIncrementTick+0x164>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d3b9      	bcc.n	8009e84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f14:	e7b6      	b.n	8009e84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f16:	4b17      	ldr	r3, [pc, #92]	; (8009f74 <xTaskIncrementTick+0x164>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4914      	ldr	r1, [pc, #80]	; (8009f70 <xTaskIncrementTick+0x160>)
 8009f1e:	4613      	mov	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	440b      	add	r3, r1
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d901      	bls.n	8009f32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f32:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <xTaskIncrementTick+0x168>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d007      	beq.n	8009f4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e004      	b.n	8009f4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <xTaskIncrementTick+0x16c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	4a0d      	ldr	r2, [pc, #52]	; (8009f7c <xTaskIncrementTick+0x16c>)
 8009f48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f4a:	697b      	ldr	r3, [r7, #20]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	20003e28 	.word	0x20003e28
 8009f58:	20003e04 	.word	0x20003e04
 8009f5c:	20003db8 	.word	0x20003db8
 8009f60:	20003dbc 	.word	0x20003dbc
 8009f64:	20003e18 	.word	0x20003e18
 8009f68:	20003e20 	.word	0x20003e20
 8009f6c:	20003e08 	.word	0x20003e08
 8009f70:	20003d04 	.word	0x20003d04
 8009f74:	20003d00 	.word	0x20003d00
 8009f78:	20003e14 	.word	0x20003e14
 8009f7c:	20003e10 	.word	0x20003e10

08009f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f86:	4b29      	ldr	r3, [pc, #164]	; (800a02c <vTaskSwitchContext+0xac>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f8e:	4b28      	ldr	r3, [pc, #160]	; (800a030 <vTaskSwitchContext+0xb0>)
 8009f90:	2201      	movs	r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f94:	e044      	b.n	800a020 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009f96:	4b26      	ldr	r3, [pc, #152]	; (800a030 <vTaskSwitchContext+0xb0>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9c:	4b25      	ldr	r3, [pc, #148]	; (800a034 <vTaskSwitchContext+0xb4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	fab3 f383 	clz	r3, r3
 8009fa8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009faa:	7afb      	ldrb	r3, [r7, #11]
 8009fac:	f1c3 031f 	rsb	r3, r3, #31
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	4921      	ldr	r1, [pc, #132]	; (800a038 <vTaskSwitchContext+0xb8>)
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	607b      	str	r3, [r7, #4]
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <vTaskSwitchContext+0x5a>
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4a14      	ldr	r2, [pc, #80]	; (800a038 <vTaskSwitchContext+0xb8>)
 8009fe8:	4413      	add	r3, r2
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	605a      	str	r2, [r3, #4]
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d104      	bne.n	800a00c <vTaskSwitchContext+0x8c>
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	605a      	str	r2, [r3, #4]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <vTaskSwitchContext+0xbc>)
 800a014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <vTaskSwitchContext+0xbc>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	334c      	adds	r3, #76	; 0x4c
 800a01c:	4a08      	ldr	r2, [pc, #32]	; (800a040 <vTaskSwitchContext+0xc0>)
 800a01e:	6013      	str	r3, [r2, #0]
}
 800a020:	bf00      	nop
 800a022:	371c      	adds	r7, #28
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20003e28 	.word	0x20003e28
 800a030:	20003e14 	.word	0x20003e14
 800a034:	20003e08 	.word	0x20003e08
 800a038:	20003d04 	.word	0x20003d04
 800a03c:	20003d00 	.word	0x20003d00
 800a040:	200000b0 	.word	0x200000b0

0800a044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10a      	bne.n	800a06a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <vTaskPlaceOnEventList+0x44>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3318      	adds	r3, #24
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7fe fb8b 	bl	800878e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a078:	2101      	movs	r1, #1
 800a07a:	6838      	ldr	r0, [r7, #0]
 800a07c:	f000 fb82 	bl	800a784 <prvAddCurrentTaskToDelayedList>
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20003d00 	.word	0x20003d00

0800a08c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60fb      	str	r3, [r7, #12]
}
 800a0b4:	bf00      	nop
 800a0b6:	e7fe      	b.n	800a0b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	3318      	adds	r3, #24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fb9f 	bl	8008800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0c2:	4b1d      	ldr	r3, [pc, #116]	; (800a138 <xTaskRemoveFromEventList+0xac>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d11c      	bne.n	800a104 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fb96 	bl	8008800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	2201      	movs	r2, #1
 800a0da:	409a      	lsls	r2, r3
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <xTaskRemoveFromEventList+0xb0>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	4a16      	ldr	r2, [pc, #88]	; (800a13c <xTaskRemoveFromEventList+0xb0>)
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4a13      	ldr	r2, [pc, #76]	; (800a140 <xTaskRemoveFromEventList+0xb4>)
 800a0f4:	441a      	add	r2, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	f7fe fb22 	bl	8008746 <vListInsertEnd>
 800a102:	e005      	b.n	800a110 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	3318      	adds	r3, #24
 800a108:	4619      	mov	r1, r3
 800a10a:	480e      	ldr	r0, [pc, #56]	; (800a144 <xTaskRemoveFromEventList+0xb8>)
 800a10c:	f7fe fb1b 	bl	8008746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <xTaskRemoveFromEventList+0xbc>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d905      	bls.n	800a12a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a11e:	2301      	movs	r3, #1
 800a120:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <xTaskRemoveFromEventList+0xc0>)
 800a124:	2201      	movs	r2, #1
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	e001      	b.n	800a12e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a12e:	697b      	ldr	r3, [r7, #20]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20003e28 	.word	0x20003e28
 800a13c:	20003e08 	.word	0x20003e08
 800a140:	20003d04 	.word	0x20003d04
 800a144:	20003dc0 	.word	0x20003dc0
 800a148:	20003d00 	.word	0x20003d00
 800a14c:	20003e14 	.word	0x20003e14

0800a150 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <vTaskInternalSetTimeOutState+0x24>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <vTaskInternalSetTimeOutState+0x28>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	20003e18 	.word	0x20003e18
 800a178:	20003e04 	.word	0x20003e04

0800a17c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	613b      	str	r3, [r7, #16]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	60fb      	str	r3, [r7, #12]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1be:	f000 fc71 	bl	800aaa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1c2:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <xTaskCheckForTimeOut+0xbc>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d102      	bne.n	800a1e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61fb      	str	r3, [r7, #28]
 800a1e0:	e023      	b.n	800a22a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <xTaskCheckForTimeOut+0xc0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d007      	beq.n	800a1fe <xTaskCheckForTimeOut+0x82>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d302      	bcc.n	800a1fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	e015      	b.n	800a22a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	429a      	cmp	r2, r3
 800a206:	d20b      	bcs.n	800a220 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	1ad2      	subs	r2, r2, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ff9b 	bl	800a150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	e004      	b.n	800a22a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a22a:	f000 fc6b 	bl	800ab04 <vPortExitCritical>

	return xReturn;
 800a22e:	69fb      	ldr	r3, [r7, #28]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20003e04 	.word	0x20003e04
 800a23c:	20003e18 	.word	0x20003e18

0800a240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a244:	4b03      	ldr	r3, [pc, #12]	; (800a254 <vTaskMissedYield+0x14>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
}
 800a24a:	bf00      	nop
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	20003e14 	.word	0x20003e14

0800a258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a260:	f000 f852 	bl	800a308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a264:	4b06      	ldr	r3, [pc, #24]	; (800a280 <prvIdleTask+0x28>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d9f9      	bls.n	800a260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <prvIdleTask+0x2c>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a27c:	e7f0      	b.n	800a260 <prvIdleTask+0x8>
 800a27e:	bf00      	nop
 800a280:	20003d04 	.word	0x20003d04
 800a284:	e000ed04 	.word	0xe000ed04

0800a288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	e00c      	b.n	800a2ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4a12      	ldr	r2, [pc, #72]	; (800a2e8 <prvInitialiseTaskLists+0x60>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fa22 	bl	80086ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	607b      	str	r3, [r7, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b06      	cmp	r3, #6
 800a2b2:	d9ef      	bls.n	800a294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2b4:	480d      	ldr	r0, [pc, #52]	; (800a2ec <prvInitialiseTaskLists+0x64>)
 800a2b6:	f7fe fa19 	bl	80086ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ba:	480d      	ldr	r0, [pc, #52]	; (800a2f0 <prvInitialiseTaskLists+0x68>)
 800a2bc:	f7fe fa16 	bl	80086ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2c0:	480c      	ldr	r0, [pc, #48]	; (800a2f4 <prvInitialiseTaskLists+0x6c>)
 800a2c2:	f7fe fa13 	bl	80086ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2c6:	480c      	ldr	r0, [pc, #48]	; (800a2f8 <prvInitialiseTaskLists+0x70>)
 800a2c8:	f7fe fa10 	bl	80086ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2cc:	480b      	ldr	r0, [pc, #44]	; (800a2fc <prvInitialiseTaskLists+0x74>)
 800a2ce:	f7fe fa0d 	bl	80086ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2d2:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <prvInitialiseTaskLists+0x78>)
 800a2d4:	4a05      	ldr	r2, [pc, #20]	; (800a2ec <prvInitialiseTaskLists+0x64>)
 800a2d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <prvInitialiseTaskLists+0x7c>)
 800a2da:	4a05      	ldr	r2, [pc, #20]	; (800a2f0 <prvInitialiseTaskLists+0x68>)
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20003d04 	.word	0x20003d04
 800a2ec:	20003d90 	.word	0x20003d90
 800a2f0:	20003da4 	.word	0x20003da4
 800a2f4:	20003dc0 	.word	0x20003dc0
 800a2f8:	20003dd4 	.word	0x20003dd4
 800a2fc:	20003dec 	.word	0x20003dec
 800a300:	20003db8 	.word	0x20003db8
 800a304:	20003dbc 	.word	0x20003dbc

0800a308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a30e:	e019      	b.n	800a344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a310:	f000 fbc8 	bl	800aaa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a314:	4b10      	ldr	r3, [pc, #64]	; (800a358 <prvCheckTasksWaitingTermination+0x50>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fa6d 	bl	8008800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a326:	4b0d      	ldr	r3, [pc, #52]	; (800a35c <prvCheckTasksWaitingTermination+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	4a0b      	ldr	r2, [pc, #44]	; (800a35c <prvCheckTasksWaitingTermination+0x54>)
 800a32e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a330:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3b01      	subs	r3, #1
 800a336:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a33a:	f000 fbe3 	bl	800ab04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f810 	bl	800a364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a344:	4b06      	ldr	r3, [pc, #24]	; (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e1      	bne.n	800a310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20003dd4 	.word	0x20003dd4
 800a35c:	20003e00 	.word	0x20003e00
 800a360:	20003de8 	.word	0x20003de8

0800a364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	334c      	adds	r3, #76	; 0x4c
 800a370:	4618      	mov	r0, r3
 800a372:	f00e fa73 	bl	801885c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d108      	bne.n	800a392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fd7b 	bl	800ae80 <vPortFree>
				vPortFree( pxTCB );
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fd78 	bl	800ae80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a390:	e018      	b.n	800a3c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d103      	bne.n	800a3a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fd6f 	bl	800ae80 <vPortFree>
	}
 800a3a2:	e00f      	b.n	800a3c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d00a      	beq.n	800a3c4 <prvDeleteTCB+0x60>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <prvDeleteTCB+0x5e>
	}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <prvResetNextTaskUnblockTime+0x38>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <prvResetNextTaskUnblockTime+0x3c>)
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e4:	e008      	b.n	800a3f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e6:	4b07      	ldr	r3, [pc, #28]	; (800a404 <prvResetNextTaskUnblockTime+0x38>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	; (800a408 <prvResetNextTaskUnblockTime+0x3c>)
 800a3f6:	6013      	str	r3, [r2, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20003db8 	.word	0x20003db8
 800a408:	20003e20 	.word	0x20003e20

0800a40c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a412:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <xTaskGetSchedulerState+0x34>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a41a:	2301      	movs	r3, #1
 800a41c:	607b      	str	r3, [r7, #4]
 800a41e:	e008      	b.n	800a432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a420:	4b08      	ldr	r3, [pc, #32]	; (800a444 <xTaskGetSchedulerState+0x38>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a428:	2302      	movs	r3, #2
 800a42a:	607b      	str	r3, [r7, #4]
 800a42c:	e001      	b.n	800a432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a42e:	2300      	movs	r3, #0
 800a430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a432:	687b      	ldr	r3, [r7, #4]
	}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20003e0c 	.word	0x20003e0c
 800a444:	20003e28 	.word	0x20003e28

0800a448 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d05e      	beq.n	800a51c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	4b31      	ldr	r3, [pc, #196]	; (800a528 <xTaskPriorityInherit+0xe0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	429a      	cmp	r2, r3
 800a46a:	d24e      	bcs.n	800a50a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	2b00      	cmp	r3, #0
 800a472:	db06      	blt.n	800a482 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a474:	4b2c      	ldr	r3, [pc, #176]	; (800a528 <xTaskPriorityInherit+0xe0>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	f1c3 0207 	rsb	r2, r3, #7
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6959      	ldr	r1, [r3, #20]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48a:	4613      	mov	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4a26      	ldr	r2, [pc, #152]	; (800a52c <xTaskPriorityInherit+0xe4>)
 800a494:	4413      	add	r3, r2
 800a496:	4299      	cmp	r1, r3
 800a498:	d12f      	bne.n	800a4fa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe f9ae 	bl	8008800 <uxListRemove>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b4:	43da      	mvns	r2, r3
 800a4b6:	4b1e      	ldr	r3, [pc, #120]	; (800a530 <xTaskPriorityInherit+0xe8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	4a1c      	ldr	r2, [pc, #112]	; (800a530 <xTaskPriorityInherit+0xe8>)
 800a4be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4c0:	4b19      	ldr	r3, [pc, #100]	; (800a528 <xTaskPriorityInherit+0xe0>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	409a      	lsls	r2, r3
 800a4d2:	4b17      	ldr	r3, [pc, #92]	; (800a530 <xTaskPriorityInherit+0xe8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	4a15      	ldr	r2, [pc, #84]	; (800a530 <xTaskPriorityInherit+0xe8>)
 800a4da:	6013      	str	r3, [r2, #0]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4a10      	ldr	r2, [pc, #64]	; (800a52c <xTaskPriorityInherit+0xe4>)
 800a4ea:	441a      	add	r2, r3
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7fe f927 	bl	8008746 <vListInsertEnd>
 800a4f8:	e004      	b.n	800a504 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4fa:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <xTaskPriorityInherit+0xe0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e008      	b.n	800a51c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a50e:	4b06      	ldr	r3, [pc, #24]	; (800a528 <xTaskPriorityInherit+0xe0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	429a      	cmp	r2, r3
 800a516:	d201      	bcs.n	800a51c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a518:	2301      	movs	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a51c:	68fb      	ldr	r3, [r7, #12]
	}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20003d00 	.word	0x20003d00
 800a52c:	20003d04 	.word	0x20003d04
 800a530:	20003e08 	.word	0x20003e08

0800a534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d06e      	beq.n	800a628 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a54a:	4b3a      	ldr	r3, [pc, #232]	; (800a634 <xTaskPriorityDisinherit+0x100>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	429a      	cmp	r2, r3
 800a552:	d00a      	beq.n	800a56a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	60fb      	str	r3, [r7, #12]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	60bb      	str	r3, [r7, #8]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a58c:	1e5a      	subs	r2, r3, #1
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d044      	beq.n	800a628 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d140      	bne.n	800a628 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe f928 	bl	8008800 <uxListRemove>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d115      	bne.n	800a5e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ba:	491f      	ldr	r1, [pc, #124]	; (800a638 <xTaskPriorityDisinherit+0x104>)
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10a      	bne.n	800a5e2 <xTaskPriorityDisinherit+0xae>
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	43da      	mvns	r2, r3
 800a5d8:	4b18      	ldr	r3, [pc, #96]	; (800a63c <xTaskPriorityDisinherit+0x108>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	4a17      	ldr	r2, [pc, #92]	; (800a63c <xTaskPriorityDisinherit+0x108>)
 800a5e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	f1c3 0207 	rsb	r2, r3, #7
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	409a      	lsls	r2, r3
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <xTaskPriorityDisinherit+0x108>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4313      	orrs	r3, r2
 800a604:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <xTaskPriorityDisinherit+0x108>)
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4a08      	ldr	r2, [pc, #32]	; (800a638 <xTaskPriorityDisinherit+0x104>)
 800a616:	441a      	add	r2, r3
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	3304      	adds	r3, #4
 800a61c:	4619      	mov	r1, r3
 800a61e:	4610      	mov	r0, r2
 800a620:	f7fe f891 	bl	8008746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a628:	697b      	ldr	r3, [r7, #20]
	}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20003d00 	.word	0x20003d00
 800a638:	20003d04 	.word	0x20003d04
 800a63c:	20003e08 	.word	0x20003e08

0800a640 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a64e:	2301      	movs	r3, #1
 800a650:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d077      	beq.n	800a748 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	60fb      	str	r3, [r7, #12]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d902      	bls.n	800a686 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	e002      	b.n	800a68c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	69fa      	ldr	r2, [r7, #28]
 800a692:	429a      	cmp	r2, r3
 800a694:	d058      	beq.n	800a748 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d153      	bne.n	800a748 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a6a0:	4b2b      	ldr	r3, [pc, #172]	; (800a750 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d10a      	bne.n	800a6c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	60bb      	str	r3, [r7, #8]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	db04      	blt.n	800a6de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f1c3 0207 	rsb	r2, r3, #7
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	6959      	ldr	r1, [r3, #20]
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4a19      	ldr	r2, [pc, #100]	; (800a754 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a6ee:	4413      	add	r3, r2
 800a6f0:	4299      	cmp	r1, r3
 800a6f2:	d129      	bne.n	800a748 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe f881 	bl	8008800 <uxListRemove>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10a      	bne.n	800a71a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	2201      	movs	r2, #1
 800a70a:	fa02 f303 	lsl.w	r3, r2, r3
 800a70e:	43da      	mvns	r2, r3
 800a710:	4b11      	ldr	r3, [pc, #68]	; (800a758 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4013      	ands	r3, r2
 800a716:	4a10      	ldr	r2, [pc, #64]	; (800a758 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a718:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	2201      	movs	r2, #1
 800a720:	409a      	lsls	r2, r3
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4313      	orrs	r3, r2
 800a728:	4a0b      	ldr	r2, [pc, #44]	; (800a758 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4a06      	ldr	r2, [pc, #24]	; (800a754 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a73a:	441a      	add	r2, r3
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fd ffff 	bl	8008746 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a748:	bf00      	nop
 800a74a:	3720      	adds	r7, #32
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20003d00 	.word	0x20003d00
 800a754:	20003d04 	.word	0x20003d04
 800a758:	20003e08 	.word	0x20003e08

0800a75c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <pvTaskIncrementMutexHeldCount+0x24>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <pvTaskIncrementMutexHeldCount+0x24>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a76e:	3201      	adds	r2, #1
 800a770:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a772:	4b03      	ldr	r3, [pc, #12]	; (800a780 <pvTaskIncrementMutexHeldCount+0x24>)
 800a774:	681b      	ldr	r3, [r3, #0]
	}
 800a776:	4618      	mov	r0, r3
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	20003d00 	.word	0x20003d00

0800a784 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a78e:	4b29      	ldr	r3, [pc, #164]	; (800a834 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a794:	4b28      	ldr	r3, [pc, #160]	; (800a838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3304      	adds	r3, #4
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe f830 	bl	8008800 <uxListRemove>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10b      	bne.n	800a7be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a7a6:	4b24      	ldr	r3, [pc, #144]	; (800a838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	43da      	mvns	r2, r3
 800a7b4:	4b21      	ldr	r3, [pc, #132]	; (800a83c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	4a20      	ldr	r2, [pc, #128]	; (800a83c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d10a      	bne.n	800a7dc <prvAddCurrentTaskToDelayedList+0x58>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d007      	beq.n	800a7dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	; (800a838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	481a      	ldr	r0, [pc, #104]	; (800a840 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a7d6:	f7fd ffb6 	bl	8008746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7da:	e026      	b.n	800a82a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7e4:	4b14      	ldr	r3, [pc, #80]	; (800a838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d209      	bcs.n	800a808 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7f4:	4b13      	ldr	r3, [pc, #76]	; (800a844 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	; (800a838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f7fd ffc4 	bl	800878e <vListInsert>
}
 800a806:	e010      	b.n	800a82a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a808:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3304      	adds	r3, #4
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f7fd ffba 	bl	800878e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a81a:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	429a      	cmp	r2, r3
 800a822:	d202      	bcs.n	800a82a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a824:	4a09      	ldr	r2, [pc, #36]	; (800a84c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	6013      	str	r3, [r2, #0]
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20003e04 	.word	0x20003e04
 800a838:	20003d00 	.word	0x20003d00
 800a83c:	20003e08 	.word	0x20003e08
 800a840:	20003dec 	.word	0x20003dec
 800a844:	20003dbc 	.word	0x20003dbc
 800a848:	20003db8 	.word	0x20003db8
 800a84c:	20003e20 	.word	0x20003e20

0800a850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3b04      	subs	r3, #4
 800a860:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3b04      	subs	r3, #4
 800a86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f023 0201 	bic.w	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3b04      	subs	r3, #4
 800a87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a880:	4a0c      	ldr	r2, [pc, #48]	; (800a8b4 <pxPortInitialiseStack+0x64>)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b14      	subs	r3, #20
 800a88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3b04      	subs	r3, #4
 800a896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f06f 0202 	mvn.w	r2, #2
 800a89e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3b20      	subs	r3, #32
 800a8a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	0800a8b9 	.word	0x0800a8b9

0800a8b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <prvTaskExitError+0x54>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	d00a      	beq.n	800a8e2 <prvTaskExitError+0x2a>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	60fb      	str	r3, [r7, #12]
}
 800a8de:	bf00      	nop
 800a8e0:	e7fe      	b.n	800a8e0 <prvTaskExitError+0x28>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	60bb      	str	r3, [r7, #8]
}
 800a8f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8f6:	bf00      	nop
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0fc      	beq.n	800a8f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8fe:	bf00      	nop
 800a900:	bf00      	nop
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	200000a0 	.word	0x200000a0

0800a910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	20003d00 	.word	0x20003d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a938:	4808      	ldr	r0, [pc, #32]	; (800a95c <prvPortStartFirstTask+0x24>)
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f380 8808 	msr	MSP, r0
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8814 	msr	CONTROL, r0
 800a94a:	b662      	cpsie	i
 800a94c:	b661      	cpsie	f
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	df00      	svc	0
 800a958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a95a:	bf00      	nop
 800a95c:	e000ed08 	.word	0xe000ed08

0800a960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a966:	4b46      	ldr	r3, [pc, #280]	; (800aa80 <xPortStartScheduler+0x120>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a46      	ldr	r2, [pc, #280]	; (800aa84 <xPortStartScheduler+0x124>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d10a      	bne.n	800a986 <xPortStartScheduler+0x26>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a986:	4b3e      	ldr	r3, [pc, #248]	; (800aa80 <xPortStartScheduler+0x120>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a3f      	ldr	r2, [pc, #252]	; (800aa88 <xPortStartScheduler+0x128>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d10a      	bne.n	800a9a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	60fb      	str	r3, [r7, #12]
}
 800a9a2:	bf00      	nop
 800a9a4:	e7fe      	b.n	800a9a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9a6:	4b39      	ldr	r3, [pc, #228]	; (800aa8c <xPortStartScheduler+0x12c>)
 800a9a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	22ff      	movs	r2, #255	; 0xff
 800a9b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9c0:	78fb      	ldrb	r3, [r7, #3]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	4b31      	ldr	r3, [pc, #196]	; (800aa90 <xPortStartScheduler+0x130>)
 800a9cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9ce:	4b31      	ldr	r3, [pc, #196]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9d4:	e009      	b.n	800a9ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a9d6:	4b2f      	ldr	r3, [pc, #188]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	4a2d      	ldr	r2, [pc, #180]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ea:	78fb      	ldrb	r3, [r7, #3]
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b80      	cmp	r3, #128	; 0x80
 800a9f4:	d0ef      	beq.n	800a9d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9f6:	4b27      	ldr	r3, [pc, #156]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f1c3 0307 	rsb	r3, r3, #7
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d00a      	beq.n	800aa18 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	60bb      	str	r3, [r7, #8]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa18:	4b1e      	ldr	r3, [pc, #120]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	021b      	lsls	r3, r3, #8
 800aa1e:	4a1d      	ldr	r2, [pc, #116]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa2a:	4a1a      	ldr	r2, [pc, #104]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa36:	4b18      	ldr	r3, [pc, #96]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a17      	ldr	r2, [pc, #92]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a14      	ldr	r2, [pc, #80]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa4e:	f000 f8dd 	bl	800ac0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa52:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <xPortStartScheduler+0x13c>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa58:	f000 f8fc 	bl	800ac54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <xPortStartScheduler+0x140>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a0f      	ldr	r2, [pc, #60]	; (800aaa0 <xPortStartScheduler+0x140>)
 800aa62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa68:	f7ff ff66 	bl	800a938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa6c:	f7ff fa88 	bl	8009f80 <vTaskSwitchContext>
	prvTaskExitError();
 800aa70:	f7ff ff22 	bl	800a8b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	e000ed00 	.word	0xe000ed00
 800aa84:	410fc271 	.word	0x410fc271
 800aa88:	410fc270 	.word	0x410fc270
 800aa8c:	e000e400 	.word	0xe000e400
 800aa90:	20003e2c 	.word	0x20003e2c
 800aa94:	20003e30 	.word	0x20003e30
 800aa98:	e000ed20 	.word	0xe000ed20
 800aa9c:	200000a0 	.word	0x200000a0
 800aaa0:	e000ef34 	.word	0xe000ef34

0800aaa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	607b      	str	r3, [r7, #4]
}
 800aabc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aabe:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <vPortEnterCritical+0x58>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	4a0d      	ldr	r2, [pc, #52]	; (800aafc <vPortEnterCritical+0x58>)
 800aac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <vPortEnterCritical+0x58>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d10f      	bne.n	800aaf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <vPortEnterCritical+0x5c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	603b      	str	r3, [r7, #0]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <vPortEnterCritical+0x4a>
	}
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	200000a0 	.word	0x200000a0
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab0a:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <vPortExitCritical+0x50>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <vPortExitCritical+0x24>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	607b      	str	r3, [r7, #4]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <vPortExitCritical+0x50>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <vPortExitCritical+0x50>)
 800ab30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab32:	4b08      	ldr	r3, [pc, #32]	; (800ab54 <vPortExitCritical+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d105      	bne.n	800ab46 <vPortExitCritical+0x42>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	f383 8811 	msr	BASEPRI, r3
}
 800ab44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	200000a0 	.word	0x200000a0
	...

0800ab60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab60:	f3ef 8009 	mrs	r0, PSP
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <pxCurrentTCBConst>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f01e 0f10 	tst.w	lr, #16
 800ab70:	bf08      	it	eq
 800ab72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab84:	f380 8811 	msr	BASEPRI, r0
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f7ff f9f6 	bl	8009f80 <vTaskSwitchContext>
 800ab94:	f04f 0000 	mov.w	r0, #0
 800ab98:	f380 8811 	msr	BASEPRI, r0
 800ab9c:	bc09      	pop	{r0, r3}
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	6808      	ldr	r0, [r1, #0]
 800aba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	f01e 0f10 	tst.w	lr, #16
 800abaa:	bf08      	it	eq
 800abac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abb0:	f380 8809 	msr	PSP, r0
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst>:
 800abc0:	20003d00 	.word	0x20003d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	607b      	str	r3, [r7, #4]
}
 800abe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abe2:	f7ff f915 	bl	8009e10 <xTaskIncrementTick>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abec:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <SysTick_Handler+0x40>)
 800abee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f383 8811 	msr	BASEPRI, r3
}
 800abfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <vPortSetupTimerInterrupt+0x38>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <vPortSetupTimerInterrupt+0x3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a0a      	ldr	r2, [pc, #40]	; (800ac4c <vPortSetupTimerInterrupt+0x40>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <vPortSetupTimerInterrupt+0x44>)
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac2e:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	601a      	str	r2, [r3, #0]
}
 800ac34:	bf00      	nop
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e010 	.word	0xe000e010
 800ac44:	e000e018 	.word	0xe000e018
 800ac48:	20000094 	.word	0x20000094
 800ac4c:	10624dd3 	.word	0x10624dd3
 800ac50:	e000e014 	.word	0xe000e014

0800ac54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac64 <vPortEnableVFP+0x10>
 800ac58:	6801      	ldr	r1, [r0, #0]
 800ac5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac62:	bf00      	nop
 800ac64:	e000ed88 	.word	0xe000ed88

0800ac68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac6e:	f3ef 8305 	mrs	r3, IPSR
 800ac72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b0f      	cmp	r3, #15
 800ac78:	d914      	bls.n	800aca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac7a:	4a17      	ldr	r2, [pc, #92]	; (800acd8 <vPortValidateInterruptPriority+0x70>)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac84:	4b15      	ldr	r3, [pc, #84]	; (800acdc <vPortValidateInterruptPriority+0x74>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	7afa      	ldrb	r2, [r7, #11]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d20a      	bcs.n	800aca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aca4:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <vPortValidateInterruptPriority+0x78>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acac:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <vPortValidateInterruptPriority+0x7c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d90a      	bls.n	800acca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	603b      	str	r3, [r7, #0]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <vPortValidateInterruptPriority+0x60>
	}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	e000e3f0 	.word	0xe000e3f0
 800acdc:	20003e2c 	.word	0x20003e2c
 800ace0:	e000ed0c 	.word	0xe000ed0c
 800ace4:	20003e30 	.word	0x20003e30

0800ace8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08a      	sub	sp, #40	; 0x28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acf4:	f7fe ffc0 	bl	8009c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acf8:	4b5b      	ldr	r3, [pc, #364]	; (800ae68 <pvPortMalloc+0x180>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad00:	f000 f92c 	bl	800af5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad04:	4b59      	ldr	r3, [pc, #356]	; (800ae6c <pvPortMalloc+0x184>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f040 8093 	bne.w	800ae38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01d      	beq.n	800ad54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad18:	2208      	movs	r2, #8
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f003 0307 	and.w	r3, r3, #7
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d014      	beq.n	800ad54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f023 0307 	bic.w	r3, r3, #7
 800ad30:	3308      	adds	r3, #8
 800ad32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <pvPortMalloc+0x6c>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	617b      	str	r3, [r7, #20]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d06e      	beq.n	800ae38 <pvPortMalloc+0x150>
 800ad5a:	4b45      	ldr	r3, [pc, #276]	; (800ae70 <pvPortMalloc+0x188>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d869      	bhi.n	800ae38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad64:	4b43      	ldr	r3, [pc, #268]	; (800ae74 <pvPortMalloc+0x18c>)
 800ad66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad68:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <pvPortMalloc+0x18c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad6e:	e004      	b.n	800ad7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d903      	bls.n	800ad8c <pvPortMalloc+0xa4>
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f1      	bne.n	800ad70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad8c:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <pvPortMalloc+0x180>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d050      	beq.n	800ae38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2208      	movs	r2, #8
 800ad9c:	4413      	add	r3, r2
 800ad9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	2308      	movs	r3, #8
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d91f      	bls.n	800adf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4413      	add	r3, r2
 800adbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00a      	beq.n	800ade0 <pvPortMalloc+0xf8>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	613b      	str	r3, [r7, #16]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	1ad2      	subs	r2, r2, r3
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adf2:	69b8      	ldr	r0, [r7, #24]
 800adf4:	f000 f914 	bl	800b020 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adf8:	4b1d      	ldr	r3, [pc, #116]	; (800ae70 <pvPortMalloc+0x188>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	4a1b      	ldr	r2, [pc, #108]	; (800ae70 <pvPortMalloc+0x188>)
 800ae04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae06:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <pvPortMalloc+0x188>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <pvPortMalloc+0x190>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d203      	bcs.n	800ae1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae12:	4b17      	ldr	r3, [pc, #92]	; (800ae70 <pvPortMalloc+0x188>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a18      	ldr	r2, [pc, #96]	; (800ae78 <pvPortMalloc+0x190>)
 800ae18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <pvPortMalloc+0x184>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	431a      	orrs	r2, r3
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <pvPortMalloc+0x194>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	4a11      	ldr	r2, [pc, #68]	; (800ae7c <pvPortMalloc+0x194>)
 800ae36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae38:	f7fe ff2c 	bl	8009c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <pvPortMalloc+0x174>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	60fb      	str	r3, [r7, #12]
}
 800ae58:	bf00      	nop
 800ae5a:	e7fe      	b.n	800ae5a <pvPortMalloc+0x172>
	return pvReturn;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3728      	adds	r7, #40	; 0x28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	2000a14c 	.word	0x2000a14c
 800ae6c:	2000a160 	.word	0x2000a160
 800ae70:	2000a150 	.word	0x2000a150
 800ae74:	2000a144 	.word	0x2000a144
 800ae78:	2000a154 	.word	0x2000a154
 800ae7c:	2000a158 	.word	0x2000a158

0800ae80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d04d      	beq.n	800af2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae92:	2308      	movs	r3, #8
 800ae94:	425b      	negs	r3, r3
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	4413      	add	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	4b24      	ldr	r3, [pc, #144]	; (800af38 <vPortFree+0xb8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4013      	ands	r3, r2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <vPortFree+0x44>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	60fb      	str	r3, [r7, #12]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <vPortFree+0x62>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	60bb      	str	r3, [r7, #8]
}
 800aede:	bf00      	nop
 800aee0:	e7fe      	b.n	800aee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	4b14      	ldr	r3, [pc, #80]	; (800af38 <vPortFree+0xb8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01e      	beq.n	800af2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11a      	bne.n	800af2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <vPortFree+0xb8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	43db      	mvns	r3, r3
 800af02:	401a      	ands	r2, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af08:	f7fe feb6 	bl	8009c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <vPortFree+0xbc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4413      	add	r3, r2
 800af16:	4a09      	ldr	r2, [pc, #36]	; (800af3c <vPortFree+0xbc>)
 800af18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af1a:	6938      	ldr	r0, [r7, #16]
 800af1c:	f000 f880 	bl	800b020 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af20:	4b07      	ldr	r3, [pc, #28]	; (800af40 <vPortFree+0xc0>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	4a06      	ldr	r2, [pc, #24]	; (800af40 <vPortFree+0xc0>)
 800af28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af2a:	f7fe feb3 	bl	8009c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af2e:	bf00      	nop
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	2000a160 	.word	0x2000a160
 800af3c:	2000a150 	.word	0x2000a150
 800af40:	2000a15c 	.word	0x2000a15c

0800af44 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800af48:	4b03      	ldr	r3, [pc, #12]	; (800af58 <xPortGetFreeHeapSize+0x14>)
 800af4a:	681b      	ldr	r3, [r3, #0]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	2000a150 	.word	0x2000a150

0800af5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af62:	f246 3310 	movw	r3, #25360	; 0x6310
 800af66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af68:	4b27      	ldr	r3, [pc, #156]	; (800b008 <prvHeapInit+0xac>)
 800af6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00c      	beq.n	800af90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3307      	adds	r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 0307 	bic.w	r3, r3, #7
 800af82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	4a1f      	ldr	r2, [pc, #124]	; (800b008 <prvHeapInit+0xac>)
 800af8c:	4413      	add	r3, r2
 800af8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af94:	4a1d      	ldr	r2, [pc, #116]	; (800b00c <prvHeapInit+0xb0>)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af9a:	4b1c      	ldr	r3, [pc, #112]	; (800b00c <prvHeapInit+0xb0>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	4413      	add	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afa8:	2208      	movs	r2, #8
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1a9b      	subs	r3, r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 0307 	bic.w	r3, r3, #7
 800afb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4a15      	ldr	r2, [pc, #84]	; (800b010 <prvHeapInit+0xb4>)
 800afbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afbe:	4b14      	ldr	r3, [pc, #80]	; (800b010 <prvHeapInit+0xb4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2200      	movs	r2, #0
 800afc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afc6:	4b12      	ldr	r3, [pc, #72]	; (800b010 <prvHeapInit+0xb4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	1ad2      	subs	r2, r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afdc:	4b0c      	ldr	r3, [pc, #48]	; (800b010 <prvHeapInit+0xb4>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	4a0a      	ldr	r2, [pc, #40]	; (800b014 <prvHeapInit+0xb8>)
 800afea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	4a09      	ldr	r2, [pc, #36]	; (800b018 <prvHeapInit+0xbc>)
 800aff2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aff4:	4b09      	ldr	r3, [pc, #36]	; (800b01c <prvHeapInit+0xc0>)
 800aff6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800affa:	601a      	str	r2, [r3, #0]
}
 800affc:	bf00      	nop
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	20003e34 	.word	0x20003e34
 800b00c:	2000a144 	.word	0x2000a144
 800b010:	2000a14c 	.word	0x2000a14c
 800b014:	2000a154 	.word	0x2000a154
 800b018:	2000a150 	.word	0x2000a150
 800b01c:	2000a160 	.word	0x2000a160

0800b020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b028:	4b28      	ldr	r3, [pc, #160]	; (800b0cc <prvInsertBlockIntoFreeList+0xac>)
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	e002      	b.n	800b034 <prvInsertBlockIntoFreeList+0x14>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d8f7      	bhi.n	800b02e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	4413      	add	r3, r2
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d108      	bne.n	800b062 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	441a      	add	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d118      	bne.n	800b0a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d00d      	beq.n	800b09e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	441a      	add	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e008      	b.n	800b0b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e003      	b.n	800b0b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d002      	beq.n	800b0be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0be:	bf00      	nop
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	2000a144 	.word	0x2000a144
 800b0d0:	2000a14c 	.word	0x2000a14c

0800b0d4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	330c      	adds	r3, #12
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 fff7 	bl	800d0dc <tcpip_send_msg_wait_sem>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d103      	bne.n	800b102 <netconn_apimsg+0x2e>
    return apimsg->err;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b100:	e001      	b.n	800b106 <netconn_apimsg+0x32>
  }
  return err;
 800b102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08c      	sub	sp, #48	; 0x30
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	603a      	str	r2, [r7, #0]
 800b11a:	71fb      	strb	r3, [r7, #7]
 800b11c:	460b      	mov	r3, r1
 800b11e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b120:	79fb      	ldrb	r3, [r7, #7]
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 ff21 	bl	800bf6c <netconn_alloc>
 800b12a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d054      	beq.n	800b1dc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b132:	79bb      	ldrb	r3, [r7, #6]
 800b134:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b138:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b13a:	f107 0308 	add.w	r3, r7, #8
 800b13e:	4619      	mov	r1, r3
 800b140:	4829      	ldr	r0, [pc, #164]	; (800b1e8 <netconn_new_with_proto_and_callback+0xd8>)
 800b142:	f7ff ffc7 	bl	800b0d4 <netconn_apimsg>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800b14c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b150:	2b00      	cmp	r3, #0
 800b152:	d043      	beq.n	800b1dc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <netconn_new_with_proto_and_callback+0x58>
 800b15c:	4b23      	ldr	r3, [pc, #140]	; (800b1ec <netconn_new_with_proto_and_callback+0xdc>)
 800b15e:	22a3      	movs	r2, #163	; 0xa3
 800b160:	4923      	ldr	r1, [pc, #140]	; (800b1f0 <netconn_new_with_proto_and_callback+0xe0>)
 800b162:	4824      	ldr	r0, [pc, #144]	; (800b1f4 <netconn_new_with_proto_and_callback+0xe4>)
 800b164:	f00d fb16 	bl	8018794 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	3310      	adds	r3, #16
 800b16c:	4618      	mov	r0, r3
 800b16e:	f00c ff96 	bl	801809e <sys_mbox_valid>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d105      	bne.n	800b184 <netconn_new_with_proto_and_callback+0x74>
 800b178:	4b1c      	ldr	r3, [pc, #112]	; (800b1ec <netconn_new_with_proto_and_callback+0xdc>)
 800b17a:	22a4      	movs	r2, #164	; 0xa4
 800b17c:	491e      	ldr	r1, [pc, #120]	; (800b1f8 <netconn_new_with_proto_and_callback+0xe8>)
 800b17e:	481d      	ldr	r0, [pc, #116]	; (800b1f4 <netconn_new_with_proto_and_callback+0xe4>)
 800b180:	f00d fb08 	bl	8018794 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	3314      	adds	r3, #20
 800b188:	4618      	mov	r0, r3
 800b18a:	f00c ff88 	bl	801809e <sys_mbox_valid>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <netconn_new_with_proto_and_callback+0x90>
 800b194:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <netconn_new_with_proto_and_callback+0xdc>)
 800b196:	22a6      	movs	r2, #166	; 0xa6
 800b198:	4918      	ldr	r1, [pc, #96]	; (800b1fc <netconn_new_with_proto_and_callback+0xec>)
 800b19a:	4816      	ldr	r0, [pc, #88]	; (800b1f4 <netconn_new_with_proto_and_callback+0xe4>)
 800b19c:	f00d fafa 	bl	8018794 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	330c      	adds	r3, #12
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f00d f80b 	bl	80181c0 <sys_sem_valid>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <netconn_new_with_proto_and_callback+0xac>
 800b1b0:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <netconn_new_with_proto_and_callback+0xdc>)
 800b1b2:	22a9      	movs	r2, #169	; 0xa9
 800b1b4:	4912      	ldr	r1, [pc, #72]	; (800b200 <netconn_new_with_proto_and_callback+0xf0>)
 800b1b6:	480f      	ldr	r0, [pc, #60]	; (800b1f4 <netconn_new_with_proto_and_callback+0xe4>)
 800b1b8:	f00d faec 	bl	8018794 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	330c      	adds	r3, #12
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f00c fff0 	bl	80181a6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c8:	3310      	adds	r3, #16
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f00c fee0 	bl	8017f90 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b1d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1d2:	2007      	movs	r0, #7
 800b1d4:	f002 fcea 	bl	800dbac <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3730      	adds	r7, #48	; 0x30
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800bf41 	.word	0x0800bf41
 800b1ec:	08019a10 	.word	0x08019a10
 800b1f0:	08019a44 	.word	0x08019a44
 800b1f4:	08019a68 	.word	0x08019a68
 800b1f8:	08019a90 	.word	0x08019a90
 800b1fc:	08019aa8 	.word	0x08019aa8
 800b200:	08019acc 	.word	0x08019acc

0800b204 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08c      	sub	sp, #48	; 0x30
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	e014      	b.n	800b240 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b21a:	2329      	movs	r3, #41	; 0x29
 800b21c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b21e:	f107 030c 	add.w	r3, r7, #12
 800b222:	4619      	mov	r1, r3
 800b224:	4808      	ldr	r0, [pc, #32]	; (800b248 <netconn_prepare_delete+0x44>)
 800b226:	f7ff ff55 	bl	800b0d4 <netconn_apimsg>
 800b22a:	4603      	mov	r3, r0
 800b22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b230:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <netconn_prepare_delete+0x3a>
    return err;
 800b238:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b23c:	e000      	b.n	800b240 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3730      	adds	r7, #48	; 0x30
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	0800c4ad 	.word	0x0800c4ad

0800b24c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <netconn_delete+0x12>
    return ERR_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e00d      	b.n	800b27a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff ffd0 	bl	800b204 <netconn_prepare_delete>
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <netconn_delete+0x2a>
    netconn_free(conn);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fee9 	bl	800c048 <netconn_free>
  }
  return err;
 800b276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08e      	sub	sp, #56	; 0x38
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d109      	bne.n	800b2ac <netconn_bind+0x28>
 800b298:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <netconn_bind+0x5c>)
 800b29a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800b29e:	4911      	ldr	r1, [pc, #68]	; (800b2e4 <netconn_bind+0x60>)
 800b2a0:	4811      	ldr	r0, [pc, #68]	; (800b2e8 <netconn_bind+0x64>)
 800b2a2:	f00d fa77 	bl	8018794 <iprintf>
 800b2a6:	f06f 030f 	mvn.w	r3, #15
 800b2aa:	e015      	b.n	800b2d8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800b2b2:	4b0e      	ldr	r3, [pc, #56]	; (800b2ec <netconn_bind+0x68>)
 800b2b4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b2be:	88fb      	ldrh	r3, [r7, #6]
 800b2c0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b2c2:	f107 0314 	add.w	r3, r7, #20
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4809      	ldr	r0, [pc, #36]	; (800b2f0 <netconn_bind+0x6c>)
 800b2ca:	f7ff ff03 	bl	800b0d4 <netconn_apimsg>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b2d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3738      	adds	r7, #56	; 0x38
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	08019a10 	.word	0x08019a10
 800b2e4:	08019b48 	.word	0x08019b48
 800b2e8:	08019a68 	.word	0x08019a68
 800b2ec:	0801d014 	.word	0x0801d014
 800b2f0:	0800c675 	.word	0x0800c675

0800b2f4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d109      	bne.n	800b320 <netconn_recv_data+0x2c>
 800b30c:	4b58      	ldr	r3, [pc, #352]	; (800b470 <netconn_recv_data+0x17c>)
 800b30e:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b312:	4958      	ldr	r1, [pc, #352]	; (800b474 <netconn_recv_data+0x180>)
 800b314:	4858      	ldr	r0, [pc, #352]	; (800b478 <netconn_recv_data+0x184>)
 800b316:	f00d fa3d 	bl	8018794 <iprintf>
 800b31a:	f06f 030f 	mvn.w	r3, #15
 800b31e:	e0a2      	b.n	800b466 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <netconn_recv_data+0x4c>
 800b32c:	4b50      	ldr	r3, [pc, #320]	; (800b470 <netconn_recv_data+0x17c>)
 800b32e:	f240 224a 	movw	r2, #586	; 0x24a
 800b332:	4952      	ldr	r1, [pc, #328]	; (800b47c <netconn_recv_data+0x188>)
 800b334:	4850      	ldr	r0, [pc, #320]	; (800b478 <netconn_recv_data+0x184>)
 800b336:	f00d fa2d 	bl	8018794 <iprintf>
 800b33a:	f06f 030f 	mvn.w	r3, #15
 800b33e:	e092      	b.n	800b466 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3310      	adds	r3, #16
 800b344:	4618      	mov	r0, r3
 800b346:	f00c feaa 	bl	801809e <sys_mbox_valid>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10e      	bne.n	800b36e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 fa45 	bl	800b7e0 <netconn_err>
 800b356:	4603      	mov	r3, r0
 800b358:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b35a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b362:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b366:	e07e      	b.n	800b466 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b368:	f06f 030a 	mvn.w	r3, #10
 800b36c:	e07b      	b.n	800b466 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	7f1b      	ldrb	r3, [r3, #28]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10f      	bne.n	800b39a <netconn_recv_data+0xa6>
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	7f1b      	ldrb	r3, [r3, #28]
 800b388:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d104      	bne.n	800b39a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d023      	beq.n	800b3e2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3310      	adds	r3, #16
 800b39e:	f107 0218 	add.w	r2, r7, #24
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f00c fe5e 	bl	8018066 <sys_arch_mbox_tryfetch>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d11f      	bne.n	800b3f2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 fa14 	bl	800b7e0 <netconn_err>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b3bc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b3c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b3c8:	e04d      	b.n	800b466 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	7f1b      	ldrb	r3, [r3, #28]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b3d6:	f06f 030a 	mvn.w	r3, #10
 800b3da:	e044      	b.n	800b466 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b3dc:	f06f 0306 	mvn.w	r3, #6
 800b3e0:	e041      	b.n	800b466 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3310      	adds	r3, #16
 800b3e6:	f107 0118 	add.w	r1, r7, #24
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f00c fdfb 	bl	8017fe8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3fa:	2b10      	cmp	r3, #16
 800b3fc:	d117      	bne.n	800b42e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	f107 0217 	add.w	r2, r7, #23
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fa3c 	bl	800b884 <lwip_netconn_is_err_msg>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d009      	beq.n	800b426 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b412:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b416:	f113 0f0f 	cmn.w	r3, #15
 800b41a:	d101      	bne.n	800b420 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	e022      	b.n	800b466 <netconn_recv_data+0x172>
      }
      return err;
 800b420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b424:	e01f      	b.n	800b466 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	891b      	ldrh	r3, [r3, #8]
 800b42a:	83fb      	strh	r3, [r7, #30]
 800b42c:	e00d      	b.n	800b44a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <netconn_recv_data+0x14e>
 800b434:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <netconn_recv_data+0x17c>)
 800b436:	f240 2291 	movw	r2, #657	; 0x291
 800b43a:	4911      	ldr	r1, [pc, #68]	; (800b480 <netconn_recv_data+0x18c>)
 800b43c:	480e      	ldr	r0, [pc, #56]	; (800b478 <netconn_recv_data+0x184>)
 800b43e:	f00d f9a9 	bl	8018794 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	891b      	ldrh	r3, [r3, #8]
 800b448:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <netconn_recv_data+0x16a>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	8bfa      	ldrh	r2, [r7, #30]
 800b458:	2101      	movs	r1, #1
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	08019a10 	.word	0x08019a10
 800b474:	08019c28 	.word	0x08019c28
 800b478:	08019a68 	.word	0x08019a68
 800b47c:	08019c48 	.word	0x08019c48
 800b480:	08019c64 	.word	0x08019c64

0800b484 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d005      	beq.n	800b4a2 <netconn_tcp_recvd_msg+0x1e>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b49e:	2b10      	cmp	r3, #16
 800b4a0:	d009      	beq.n	800b4b6 <netconn_tcp_recvd_msg+0x32>
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <netconn_tcp_recvd_msg+0x50>)
 800b4a4:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b4a8:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <netconn_tcp_recvd_msg+0x54>)
 800b4aa:	480c      	ldr	r0, [pc, #48]	; (800b4dc <netconn_tcp_recvd_msg+0x58>)
 800b4ac:	f00d f972 	bl	8018794 <iprintf>
 800b4b0:	f06f 030f 	mvn.w	r3, #15
 800b4b4:	e00a      	b.n	800b4cc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b4c2:	6879      	ldr	r1, [r7, #4]
 800b4c4:	4806      	ldr	r0, [pc, #24]	; (800b4e0 <netconn_tcp_recvd_msg+0x5c>)
 800b4c6:	f7ff fe05 	bl	800b0d4 <netconn_apimsg>
 800b4ca:	4603      	mov	r3, r0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	08019a10 	.word	0x08019a10
 800b4d8:	08019c70 	.word	0x08019c70
 800b4dc:	08019a68 	.word	0x08019a68
 800b4e0:	0800c783 	.word	0x0800c783

0800b4e4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b090      	sub	sp, #64	; 0x40
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3310      	adds	r3, #16
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f00c fdd1 	bl	801809e <sys_mbox_valid>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d102      	bne.n	800b508 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b502:	f06f 030a 	mvn.w	r3, #10
 800b506:	e06d      	b.n	800b5e4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	7f1b      	ldrb	r3, [r3, #28]
 800b50c:	b25b      	sxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	da07      	bge.n	800b522 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	7f1b      	ldrb	r3, [r3, #28]
 800b516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b520:	e039      	b.n	800b596 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	461a      	mov	r2, r3
 800b526:	68b9      	ldr	r1, [r7, #8]
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff fee3 	bl	800b2f4 <netconn_recv_data>
 800b52e:	4603      	mov	r3, r0
 800b530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b534:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b53c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b540:	e050      	b.n	800b5e4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b548:	79fb      	ldrb	r3, [r7, #7]
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10e      	bne.n	800b570 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <netconn_recv_data_tcp+0x7a>
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	891b      	ldrh	r3, [r3, #8]
 800b55c:	e000      	b.n	800b560 <netconn_recv_data_tcp+0x7c>
 800b55e:	2301      	movs	r3, #1
 800b560:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b564:	f107 0214 	add.w	r2, r7, #20
 800b568:	4619      	mov	r1, r3
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff ff8a 	bl	800b484 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	2b00      	cmp	r3, #0
 800b574:	d134      	bne.n	800b5e0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	7f1b      	ldrb	r3, [r3, #28]
 800b584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b58e:	f06f 0306 	mvn.w	r3, #6
 800b592:	e027      	b.n	800b5e4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b594:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d005      	beq.n	800b5aa <netconn_recv_data_tcp+0xc6>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10f      	bne.n	800b5d2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 f914 	bl	800b7e0 <netconn_err>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b5be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <netconn_recv_data_tcp+0xe8>
          return err;
 800b5c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5ca:	e00b      	b.n	800b5e4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b5cc:	f06f 030d 	mvn.w	r3, #13
 800b5d0:	e008      	b.n	800b5e4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f8d3 	bl	800b780 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b5da:	f06f 030e 	mvn.w	r3, #14
 800b5de:	e001      	b.n	800b5e4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b5e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3740      	adds	r7, #64	; 0x40
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d109      	bne.n	800b614 <netconn_recv+0x28>
 800b600:	4b32      	ldr	r3, [pc, #200]	; (800b6cc <netconn_recv+0xe0>)
 800b602:	f240 3263 	movw	r2, #867	; 0x363
 800b606:	4932      	ldr	r1, [pc, #200]	; (800b6d0 <netconn_recv+0xe4>)
 800b608:	4832      	ldr	r0, [pc, #200]	; (800b6d4 <netconn_recv+0xe8>)
 800b60a:	f00d f8c3 	bl	8018794 <iprintf>
 800b60e:	f06f 030f 	mvn.w	r3, #15
 800b612:	e056      	b.n	800b6c2 <netconn_recv+0xd6>
  *new_buf = NULL;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d109      	bne.n	800b634 <netconn_recv+0x48>
 800b620:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <netconn_recv+0xe0>)
 800b622:	f240 3265 	movw	r2, #869	; 0x365
 800b626:	492c      	ldr	r1, [pc, #176]	; (800b6d8 <netconn_recv+0xec>)
 800b628:	482a      	ldr	r0, [pc, #168]	; (800b6d4 <netconn_recv+0xe8>)
 800b62a:	f00d f8b3 	bl	8018794 <iprintf>
 800b62e:	f06f 030f 	mvn.w	r3, #15
 800b632:	e046      	b.n	800b6c2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b63c:	2b10      	cmp	r3, #16
 800b63e:	d13a      	bne.n	800b6b6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b644:	2006      	movs	r0, #6
 800b646:	f002 fa5f 	bl	800db08 <memp_malloc>
 800b64a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <netconn_recv+0x6c>
      return ERR_MEM;
 800b652:	f04f 33ff 	mov.w	r3, #4294967295
 800b656:	e034      	b.n	800b6c2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b658:	f107 030c 	add.w	r3, r7, #12
 800b65c:	2200      	movs	r2, #0
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff ff3f 	bl	800b4e4 <netconn_recv_data_tcp>
 800b666:	4603      	mov	r3, r0
 800b668:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b66a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d006      	beq.n	800b680 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b672:	6979      	ldr	r1, [r7, #20]
 800b674:	2006      	movs	r0, #6
 800b676:	f002 fa99 	bl	800dbac <memp_free>
      return err;
 800b67a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b67e:	e020      	b.n	800b6c2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <netconn_recv+0xa8>
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <netconn_recv+0xe0>)
 800b688:	f240 3279 	movw	r2, #889	; 0x379
 800b68c:	4913      	ldr	r1, [pc, #76]	; (800b6dc <netconn_recv+0xf0>)
 800b68e:	4811      	ldr	r0, [pc, #68]	; (800b6d4 <netconn_recv+0xe8>)
 800b690:	f00d f880 	bl	8018794 <iprintf>

    buf->p = p;
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e005      	b.n	800b6c2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff fe1a 	bl	800b2f4 <netconn_recv_data>
 800b6c0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3718      	adds	r7, #24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	08019a10 	.word	0x08019a10
 800b6d0:	08019c28 	.word	0x08019c28
 800b6d4:	08019a68 	.word	0x08019a68
 800b6d8:	08019c48 	.word	0x08019c48
 800b6dc:	08019cc0 	.word	0x08019cc0

0800b6e0 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d011      	beq.n	800b718 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <netconn_sendto+0x20>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	e000      	b.n	800b702 <netconn_sendto+0x22>
 800b700:	2300      	movs	r3, #0
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	887a      	ldrh	r2, [r7, #2]
 800b70a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800b70c:	68b9      	ldr	r1, [r7, #8]
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f000 f808 	bl	800b724 <netconn_send>
 800b714:	4603      	mov	r3, r0
 800b716:	e001      	b.n	800b71c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800b718:	f06f 0305 	mvn.w	r3, #5
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08c      	sub	sp, #48	; 0x30
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d109      	bne.n	800b748 <netconn_send+0x24>
 800b734:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <netconn_send+0x4c>)
 800b736:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b73a:	490e      	ldr	r1, [pc, #56]	; (800b774 <netconn_send+0x50>)
 800b73c:	480e      	ldr	r0, [pc, #56]	; (800b778 <netconn_send+0x54>)
 800b73e:	f00d f829 	bl	8018794 <iprintf>
 800b742:	f06f 030f 	mvn.w	r3, #15
 800b746:	e00e      	b.n	800b766 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b750:	f107 030c 	add.w	r3, r7, #12
 800b754:	4619      	mov	r1, r3
 800b756:	4809      	ldr	r0, [pc, #36]	; (800b77c <netconn_send+0x58>)
 800b758:	f7ff fcbc 	bl	800b0d4 <netconn_apimsg>
 800b75c:	4603      	mov	r3, r0
 800b75e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b762:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b766:	4618      	mov	r0, r3
 800b768:	3730      	adds	r7, #48	; 0x30
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	08019a10 	.word	0x08019a10
 800b774:	08019ccc 	.word	0x08019ccc
 800b778:	08019a68 	.word	0x08019a68
 800b77c:	0800c6e9 	.word	0x0800c6e9

0800b780 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08c      	sub	sp, #48	; 0x30
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <netconn_close_shutdown+0x26>
 800b792:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <netconn_close_shutdown+0x50>)
 800b794:	f240 4247 	movw	r2, #1095	; 0x447
 800b798:	490e      	ldr	r1, [pc, #56]	; (800b7d4 <netconn_close_shutdown+0x54>)
 800b79a:	480f      	ldr	r0, [pc, #60]	; (800b7d8 <netconn_close_shutdown+0x58>)
 800b79c:	f00c fffa 	bl	8018794 <iprintf>
 800b7a0:	f06f 030f 	mvn.w	r3, #15
 800b7a4:	e010      	b.n	800b7c8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b7aa:	78fb      	ldrb	r3, [r7, #3]
 800b7ac:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b7ae:	2329      	movs	r3, #41	; 0x29
 800b7b0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b7b2:	f107 030c 	add.w	r3, r7, #12
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4808      	ldr	r0, [pc, #32]	; (800b7dc <netconn_close_shutdown+0x5c>)
 800b7ba:	f7ff fc8b 	bl	800b0d4 <netconn_apimsg>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b7c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3730      	adds	r7, #48	; 0x30
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	08019a10 	.word	0x08019a10
 800b7d4:	08019d4c 	.word	0x08019d4c
 800b7d8:	08019a68 	.word	0x08019a68
 800b7dc:	0800cb85 	.word	0x0800cb85

0800b7e0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <netconn_err+0x12>
    return ERR_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e00d      	b.n	800b80e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b7f2:	f00c fd6f 	bl	80182d4 <sys_arch_protect>
 800b7f6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	7a1b      	ldrb	r3, [r3, #8]
 800b7fc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f00c fd73 	bl	80182f0 <sys_arch_unprotect>
  return err;
 800b80a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b826:	f113 0f0d 	cmn.w	r3, #13
 800b82a:	d009      	beq.n	800b840 <lwip_netconn_err_to_msg+0x28>
 800b82c:	f113 0f0d 	cmn.w	r3, #13
 800b830:	dc0c      	bgt.n	800b84c <lwip_netconn_err_to_msg+0x34>
 800b832:	f113 0f0f 	cmn.w	r3, #15
 800b836:	d007      	beq.n	800b848 <lwip_netconn_err_to_msg+0x30>
 800b838:	f113 0f0e 	cmn.w	r3, #14
 800b83c:	d002      	beq.n	800b844 <lwip_netconn_err_to_msg+0x2c>
 800b83e:	e005      	b.n	800b84c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b840:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <lwip_netconn_err_to_msg+0x54>)
 800b842:	e00e      	b.n	800b862 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <lwip_netconn_err_to_msg+0x58>)
 800b846:	e00c      	b.n	800b862 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b848:	4b0a      	ldr	r3, [pc, #40]	; (800b874 <lwip_netconn_err_to_msg+0x5c>)
 800b84a:	e00a      	b.n	800b862 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b84c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <lwip_netconn_err_to_msg+0x48>
 800b854:	4b08      	ldr	r3, [pc, #32]	; (800b878 <lwip_netconn_err_to_msg+0x60>)
 800b856:	227d      	movs	r2, #125	; 0x7d
 800b858:	4908      	ldr	r1, [pc, #32]	; (800b87c <lwip_netconn_err_to_msg+0x64>)
 800b85a:	4809      	ldr	r0, [pc, #36]	; (800b880 <lwip_netconn_err_to_msg+0x68>)
 800b85c:	f00c ff9a 	bl	8018794 <iprintf>
      return NULL;
 800b860:	2300      	movs	r3, #0
  }
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	0801cf00 	.word	0x0801cf00
 800b870:	0801cf01 	.word	0x0801cf01
 800b874:	0801cf02 	.word	0x0801cf02
 800b878:	08019d68 	.word	0x08019d68
 800b87c:	08019d9c 	.word	0x08019d9c
 800b880:	08019dac 	.word	0x08019dac

0800b884 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d105      	bne.n	800b8a0 <lwip_netconn_is_err_msg+0x1c>
 800b894:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <lwip_netconn_is_err_msg+0x5c>)
 800b896:	2285      	movs	r2, #133	; 0x85
 800b898:	4912      	ldr	r1, [pc, #72]	; (800b8e4 <lwip_netconn_is_err_msg+0x60>)
 800b89a:	4813      	ldr	r0, [pc, #76]	; (800b8e8 <lwip_netconn_is_err_msg+0x64>)
 800b89c:	f00c ff7a 	bl	8018794 <iprintf>

  if (msg == &netconn_aborted) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a12      	ldr	r2, [pc, #72]	; (800b8ec <lwip_netconn_is_err_msg+0x68>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d104      	bne.n	800b8b2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	22f3      	movs	r2, #243	; 0xf3
 800b8ac:	701a      	strb	r2, [r3, #0]
    return 1;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e012      	b.n	800b8d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a0e      	ldr	r2, [pc, #56]	; (800b8f0 <lwip_netconn_is_err_msg+0x6c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d104      	bne.n	800b8c4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	22f2      	movs	r2, #242	; 0xf2
 800b8be:	701a      	strb	r2, [r3, #0]
    return 1;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e009      	b.n	800b8d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a0b      	ldr	r2, [pc, #44]	; (800b8f4 <lwip_netconn_is_err_msg+0x70>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d104      	bne.n	800b8d6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	22f1      	movs	r2, #241	; 0xf1
 800b8d0:	701a      	strb	r2, [r3, #0]
    return 1;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e000      	b.n	800b8d8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08019d68 	.word	0x08019d68
 800b8e4:	08019dd4 	.word	0x08019dd4
 800b8e8:	08019dac 	.word	0x08019dac
 800b8ec:	0801cf00 	.word	0x0801cf00
 800b8f0:	0801cf01 	.word	0x0801cf01
 800b8f4:	0801cf02 	.word	0x0801cf02

0800b8f8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d105      	bne.n	800b918 <recv_udp+0x20>
 800b90c:	4b34      	ldr	r3, [pc, #208]	; (800b9e0 <recv_udp+0xe8>)
 800b90e:	22e5      	movs	r2, #229	; 0xe5
 800b910:	4934      	ldr	r1, [pc, #208]	; (800b9e4 <recv_udp+0xec>)
 800b912:	4835      	ldr	r0, [pc, #212]	; (800b9e8 <recv_udp+0xf0>)
 800b914:	f00c ff3e 	bl	8018794 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d105      	bne.n	800b92a <recv_udp+0x32>
 800b91e:	4b30      	ldr	r3, [pc, #192]	; (800b9e0 <recv_udp+0xe8>)
 800b920:	22e6      	movs	r2, #230	; 0xe6
 800b922:	4932      	ldr	r1, [pc, #200]	; (800b9ec <recv_udp+0xf4>)
 800b924:	4830      	ldr	r0, [pc, #192]	; (800b9e8 <recv_udp+0xf0>)
 800b926:	f00c ff35 	bl	8018794 <iprintf>
  conn = (struct netconn *)arg;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <recv_udp+0x44>
    pbuf_free(p);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f002 ff79 	bl	800e82c <pbuf_free>
    return;
 800b93a:	e04d      	b.n	800b9d8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	429a      	cmp	r2, r3
 800b944:	d005      	beq.n	800b952 <recv_udp+0x5a>
 800b946:	4b26      	ldr	r3, [pc, #152]	; (800b9e0 <recv_udp+0xe8>)
 800b948:	22ee      	movs	r2, #238	; 0xee
 800b94a:	4929      	ldr	r1, [pc, #164]	; (800b9f0 <recv_udp+0xf8>)
 800b94c:	4826      	ldr	r0, [pc, #152]	; (800b9e8 <recv_udp+0xf0>)
 800b94e:	f00c ff21 	bl	8018794 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	3310      	adds	r3, #16
 800b956:	4618      	mov	r0, r3
 800b958:	f00c fba1 	bl	801809e <sys_mbox_valid>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d103      	bne.n	800b96a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f002 ff62 	bl	800e82c <pbuf_free>
    return;
 800b968:	e036      	b.n	800b9d8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b96a:	2006      	movs	r0, #6
 800b96c:	f002 f8cc 	bl	800db08 <memp_malloc>
 800b970:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <recv_udp+0x88>
    pbuf_free(p);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f002 ff57 	bl	800e82c <pbuf_free>
    return;
 800b97e:	e02b      	b.n	800b9d8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <recv_udp+0xa0>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	e000      	b.n	800b99a <recv_udp+0xa2>
 800b998:	2300      	movs	r3, #0
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b9a2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	891b      	ldrh	r3, [r3, #8]
 800b9a8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	3310      	adds	r3, #16
 800b9ae:	69b9      	ldr	r1, [r7, #24]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f00c faff 	bl	8017fb4 <sys_mbox_trypost>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b9bc:	69b8      	ldr	r0, [r7, #24]
 800b9be:	f001 f981 	bl	800ccc4 <netbuf_delete>
    return;
 800b9c2:	e009      	b.n	800b9d8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d005      	beq.n	800b9d8 <recv_udp+0xe0>
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	8afa      	ldrh	r2, [r7, #22]
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	69f8      	ldr	r0, [r7, #28]
 800b9d6:	4798      	blx	r3
  }
}
 800b9d8:	3720      	adds	r7, #32
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	08019d68 	.word	0x08019d68
 800b9e4:	08019de0 	.word	0x08019de0
 800b9e8:	08019dac 	.word	0x08019dac
 800b9ec:	08019e04 	.word	0x08019e04
 800b9f0:	08019e24 	.word	0x08019e24

0800b9f4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <recv_tcp+0x22>
 800ba08:	4b36      	ldr	r3, [pc, #216]	; (800bae4 <recv_tcp+0xf0>)
 800ba0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ba0e:	4936      	ldr	r1, [pc, #216]	; (800bae8 <recv_tcp+0xf4>)
 800ba10:	4836      	ldr	r0, [pc, #216]	; (800baec <recv_tcp+0xf8>)
 800ba12:	f00c febf 	bl	8018794 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <recv_tcp+0x36>
 800ba1c:	4b31      	ldr	r3, [pc, #196]	; (800bae4 <recv_tcp+0xf0>)
 800ba1e:	f240 122d 	movw	r2, #301	; 0x12d
 800ba22:	4933      	ldr	r1, [pc, #204]	; (800baf0 <recv_tcp+0xfc>)
 800ba24:	4831      	ldr	r0, [pc, #196]	; (800baec <recv_tcp+0xf8>)
 800ba26:	f00c feb5 	bl	8018794 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ba2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d006      	beq.n	800ba40 <recv_tcp+0x4c>
 800ba32:	4b2c      	ldr	r3, [pc, #176]	; (800bae4 <recv_tcp+0xf0>)
 800ba34:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ba38:	492e      	ldr	r1, [pc, #184]	; (800baf4 <recv_tcp+0x100>)
 800ba3a:	482c      	ldr	r0, [pc, #176]	; (800baec <recv_tcp+0xf8>)
 800ba3c:	f00c feaa 	bl	8018794 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <recv_tcp+0x5c>
    return ERR_VAL;
 800ba4a:	f06f 0305 	mvn.w	r3, #5
 800ba4e:	e045      	b.n	800badc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d006      	beq.n	800ba68 <recv_tcp+0x74>
 800ba5a:	4b22      	ldr	r3, [pc, #136]	; (800bae4 <recv_tcp+0xf0>)
 800ba5c:	f240 1235 	movw	r2, #309	; 0x135
 800ba60:	4925      	ldr	r1, [pc, #148]	; (800baf8 <recv_tcp+0x104>)
 800ba62:	4822      	ldr	r0, [pc, #136]	; (800baec <recv_tcp+0xf8>)
 800ba64:	f00c fe96 	bl	8018794 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	3310      	adds	r3, #16
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f00c fb16 	bl	801809e <sys_mbox_valid>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10d      	bne.n	800ba94 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d008      	beq.n	800ba90 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	891b      	ldrh	r3, [r3, #8]
 800ba82:	4619      	mov	r1, r3
 800ba84:	68b8      	ldr	r0, [r7, #8]
 800ba86:	f003 fdcf 	bl	800f628 <tcp_recved>
      pbuf_free(p);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f002 fece 	bl	800e82c <pbuf_free>
    }
    return ERR_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	e023      	b.n	800badc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <recv_tcp+0xb2>
    msg = p;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	891b      	ldrh	r3, [r3, #8]
 800baa2:	83fb      	strh	r3, [r7, #30]
 800baa4:	e003      	b.n	800baae <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800baa6:	4b15      	ldr	r3, [pc, #84]	; (800bafc <recv_tcp+0x108>)
 800baa8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	3310      	adds	r3, #16
 800bab2:	69b9      	ldr	r1, [r7, #24]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f00c fa7d 	bl	8017fb4 <sys_mbox_trypost>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800bac0:	f04f 33ff 	mov.w	r3, #4294967295
 800bac4:	e00a      	b.n	800badc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d005      	beq.n	800bada <recv_tcp+0xe6>
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	8bfa      	ldrh	r2, [r7, #30]
 800bad4:	2100      	movs	r1, #0
 800bad6:	6978      	ldr	r0, [r7, #20]
 800bad8:	4798      	blx	r3
  }

  return ERR_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3720      	adds	r7, #32
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	08019d68 	.word	0x08019d68
 800bae8:	08019e44 	.word	0x08019e44
 800baec:	08019dac 	.word	0x08019dac
 800baf0:	08019e68 	.word	0x08019e68
 800baf4:	08019e88 	.word	0x08019e88
 800baf8:	08019ea0 	.word	0x08019ea0
 800bafc:	0801cf02 	.word	0x0801cf02

0800bb00 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <poll_tcp+0x22>
 800bb14:	4b29      	ldr	r3, [pc, #164]	; (800bbbc <poll_tcp+0xbc>)
 800bb16:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bb1a:	4929      	ldr	r1, [pc, #164]	; (800bbc0 <poll_tcp+0xc0>)
 800bb1c:	4829      	ldr	r0, [pc, #164]	; (800bbc4 <poll_tcp+0xc4>)
 800bb1e:	f00c fe39 	bl	8018794 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	785b      	ldrb	r3, [r3, #1]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d104      	bne.n	800bb34 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f000 fe5d 	bl	800c7ec <lwip_netconn_do_writemore>
 800bb32:	e016      	b.n	800bb62 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	785b      	ldrb	r3, [r3, #1]
 800bb38:	2b04      	cmp	r3, #4
 800bb3a:	d112      	bne.n	800bb62 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <poll_tcp+0x5a>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	7a5b      	ldrb	r3, [r3, #9]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d005      	beq.n	800bb5a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	7a5a      	ldrb	r2, [r3, #9]
 800bb54:	3a01      	subs	r2, #1
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f000 fb3b 	bl	800c1d8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	7f1b      	ldrb	r3, [r3, #28]
 800bb66:	f003 0310 	and.w	r3, r3, #16
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d021      	beq.n	800bbb2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01d      	beq.n	800bbb2 <poll_tcp+0xb2>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb7e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bb82:	d316      	bcc.n	800bbb2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bb8c:	2b04      	cmp	r3, #4
 800bb8e:	d810      	bhi.n	800bbb2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	7f1b      	ldrb	r3, [r3, #28]
 800bb94:	f023 0310 	bic.w	r3, r3, #16
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d005      	beq.n	800bbb2 <poll_tcp+0xb2>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2102      	movs	r1, #2
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	08019d68 	.word	0x08019d68
 800bbc0:	08019ec0 	.word	0x08019ec0
 800bbc4:	08019dac 	.word	0x08019dac

0800bbc8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <sent_tcp+0x26>
 800bbe0:	4b20      	ldr	r3, [pc, #128]	; (800bc64 <sent_tcp+0x9c>)
 800bbe2:	f240 1293 	movw	r2, #403	; 0x193
 800bbe6:	4920      	ldr	r1, [pc, #128]	; (800bc68 <sent_tcp+0xa0>)
 800bbe8:	4820      	ldr	r0, [pc, #128]	; (800bc6c <sent_tcp+0xa4>)
 800bbea:	f00c fdd3 	bl	8018794 <iprintf>

  if (conn) {
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d032      	beq.n	800bc5a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d104      	bne.n	800bc06 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	6978      	ldr	r0, [r7, #20]
 800bc00:	f000 fdf4 	bl	800c7ec <lwip_netconn_do_writemore>
 800bc04:	e007      	b.n	800bc16 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	d103      	bne.n	800bc16 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bc0e:	2101      	movs	r1, #1
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	f000 fae1 	bl	800c1d8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d01d      	beq.n	800bc5a <sent_tcp+0x92>
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bc26:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bc2a:	d316      	bcc.n	800bc5a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	d810      	bhi.n	800bc5a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	7f1b      	ldrb	r3, [r3, #28]
 800bc3c:	f023 0310 	bic.w	r3, r3, #16
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d005      	beq.n	800bc5a <sent_tcp+0x92>
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc52:	88fa      	ldrh	r2, [r7, #6]
 800bc54:	2102      	movs	r1, #2
 800bc56:	6978      	ldr	r0, [r7, #20]
 800bc58:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	08019d68 	.word	0x08019d68
 800bc68:	08019ec0 	.word	0x08019ec0
 800bc6c:	08019dac 	.word	0x08019dac

0800bc70 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d106      	bne.n	800bc94 <err_tcp+0x24>
 800bc86:	4b5f      	ldr	r3, [pc, #380]	; (800be04 <err_tcp+0x194>)
 800bc88:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800bc8c:	495e      	ldr	r1, [pc, #376]	; (800be08 <err_tcp+0x198>)
 800bc8e:	485f      	ldr	r0, [pc, #380]	; (800be0c <err_tcp+0x19c>)
 800bc90:	f00c fd80 	bl	8018794 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800bc94:	f00c fb1e 	bl	80182d4 <sys_arch_protect>
 800bc98:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	78fa      	ldrb	r2, [r7, #3]
 800bca4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	7f1b      	ldrb	r3, [r3, #28]
 800bcaa:	f043 0301 	orr.w	r3, r3, #1
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	785b      	ldrb	r3, [r3, #1]
 800bcb8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800bcc0:	69b8      	ldr	r0, [r7, #24]
 800bcc2:	f00c fb15 	bl	80182f0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <err_tcp+0x6a>
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2104      	movs	r1, #4
 800bcd6:	69f8      	ldr	r0, [r7, #28]
 800bcd8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <err_tcp+0x7e>
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2200      	movs	r2, #0
 800bce8:	2100      	movs	r1, #0
 800bcea:	69f8      	ldr	r0, [r7, #28]
 800bcec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <err_tcp+0x92>
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2102      	movs	r1, #2
 800bcfe:	69f8      	ldr	r0, [r7, #28]
 800bd00:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bd02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff fd86 	bl	800b818 <lwip_netconn_err_to_msg>
 800bd0c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	3310      	adds	r3, #16
 800bd12:	4618      	mov	r0, r3
 800bd14:	f00c f9c3 	bl	801809e <sys_mbox_valid>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d005      	beq.n	800bd2a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	3310      	adds	r3, #16
 800bd22:	6939      	ldr	r1, [r7, #16]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f00c f945 	bl	8017fb4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	3314      	adds	r3, #20
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f00c f9b5 	bl	801809e <sys_mbox_valid>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d005      	beq.n	800bd46 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	3314      	adds	r3, #20
 800bd3e:	6939      	ldr	r1, [r7, #16]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f00c f937 	bl	8017fb4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d005      	beq.n	800bd58 <err_tcp+0xe8>
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	d002      	beq.n	800bd58 <err_tcp+0xe8>
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	2b03      	cmp	r3, #3
 800bd56:	d143      	bne.n	800bde0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	7f1b      	ldrb	r3, [r3, #28]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	bf14      	ite	ne
 800bd64:	2301      	movne	r3, #1
 800bd66:	2300      	moveq	r3, #0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	7f1b      	ldrb	r3, [r3, #28]
 800bd70:	f023 0304 	bic.w	r3, r3, #4
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d13b      	bne.n	800bdf8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d106      	bne.n	800bd96 <err_tcp+0x126>
 800bd88:	4b1e      	ldr	r3, [pc, #120]	; (800be04 <err_tcp+0x194>)
 800bd8a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bd8e:	4920      	ldr	r1, [pc, #128]	; (800be10 <err_tcp+0x1a0>)
 800bd90:	481e      	ldr	r0, [pc, #120]	; (800be0c <err_tcp+0x19c>)
 800bd92:	f00c fcff 	bl	8018794 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	2b04      	cmp	r3, #4
 800bd9a:	d104      	bne.n	800bda6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	2200      	movs	r2, #0
 800bda2:	711a      	strb	r2, [r3, #4]
 800bda4:	e003      	b.n	800bdae <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	78fa      	ldrb	r2, [r7, #3]
 800bdac:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	330c      	adds	r3, #12
 800bdb6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bdb8:	68b8      	ldr	r0, [r7, #8]
 800bdba:	f00c fa01 	bl	80181c0 <sys_sem_valid>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d106      	bne.n	800bdd2 <err_tcp+0x162>
 800bdc4:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <err_tcp+0x194>)
 800bdc6:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bdca:	4912      	ldr	r1, [pc, #72]	; (800be14 <err_tcp+0x1a4>)
 800bdcc:	480f      	ldr	r0, [pc, #60]	; (800be0c <err_tcp+0x19c>)
 800bdce:	f00c fce1 	bl	8018794 <iprintf>
      conn->current_msg = NULL;
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800bdd8:	68b8      	ldr	r0, [r7, #8]
 800bdda:	f00c f9d7 	bl	801818c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bdde:	e00b      	b.n	800bdf8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d008      	beq.n	800bdfa <err_tcp+0x18a>
 800bde8:	4b06      	ldr	r3, [pc, #24]	; (800be04 <err_tcp+0x194>)
 800bdea:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bdee:	490a      	ldr	r1, [pc, #40]	; (800be18 <err_tcp+0x1a8>)
 800bdf0:	4806      	ldr	r0, [pc, #24]	; (800be0c <err_tcp+0x19c>)
 800bdf2:	f00c fccf 	bl	8018794 <iprintf>
  }
}
 800bdf6:	e000      	b.n	800bdfa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bdf8:	bf00      	nop
}
 800bdfa:	bf00      	nop
 800bdfc:	3720      	adds	r7, #32
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	08019d68 	.word	0x08019d68
 800be08:	08019ec0 	.word	0x08019ec0
 800be0c:	08019dac 	.word	0x08019dac
 800be10:	08019ed0 	.word	0x08019ed0
 800be14:	08019eec 	.word	0x08019eec
 800be18:	08019f08 	.word	0x08019f08

0800be1c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800be2a:	6879      	ldr	r1, [r7, #4]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f004 fac1 	bl	80103b4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800be32:	490a      	ldr	r1, [pc, #40]	; (800be5c <setup_tcp+0x40>)
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f004 facf 	bl	80103d8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800be3a:	4909      	ldr	r1, [pc, #36]	; (800be60 <setup_tcp+0x44>)
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f004 faed 	bl	801041c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800be42:	2202      	movs	r2, #2
 800be44:	4907      	ldr	r1, [pc, #28]	; (800be64 <setup_tcp+0x48>)
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f004 fb44 	bl	80104d4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800be4c:	4906      	ldr	r1, [pc, #24]	; (800be68 <setup_tcp+0x4c>)
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f004 fb06 	bl	8010460 <tcp_err>
}
 800be54:	bf00      	nop
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	0800b9f5 	.word	0x0800b9f5
 800be60:	0800bbc9 	.word	0x0800bbc9
 800be64:	0800bb01 	.word	0x0800bb01
 800be68:	0800bc71 	.word	0x0800bc71

0800be6c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800be6c:	b590      	push	{r4, r7, lr}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d006      	beq.n	800be90 <pcb_new+0x24>
 800be82:	4b2b      	ldr	r3, [pc, #172]	; (800bf30 <pcb_new+0xc4>)
 800be84:	f240 2265 	movw	r2, #613	; 0x265
 800be88:	492a      	ldr	r1, [pc, #168]	; (800bf34 <pcb_new+0xc8>)
 800be8a:	482b      	ldr	r0, [pc, #172]	; (800bf38 <pcb_new+0xcc>)
 800be8c:	f00c fc82 	bl	8018794 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be9a:	2b10      	cmp	r3, #16
 800be9c:	d022      	beq.n	800bee4 <pcb_new+0x78>
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	d133      	bne.n	800bf0a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681c      	ldr	r4, [r3, #0]
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f009 fd4c 	bl	8015946 <udp_new_ip_type>
 800beae:	4603      	mov	r3, r0
 800beb0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d02a      	beq.n	800bf12 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b22      	cmp	r3, #34	; 0x22
 800bec4:	d104      	bne.n	800bed0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6858      	ldr	r0, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	4917      	ldr	r1, [pc, #92]	; (800bf3c <pcb_new+0xd0>)
 800bede:	f009 fcb9 	bl	8015854 <udp_recv>
      }
      break;
 800bee2:	e016      	b.n	800bf12 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681c      	ldr	r4, [r3, #0]
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4618      	mov	r0, r3
 800beec:	f004 fa54 	bl	8010398 <tcp_new_ip_type>
 800bef0:	4603      	mov	r3, r0
 800bef2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00b      	beq.n	800bf16 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff ff8a 	bl	800be1c <setup_tcp>
      }
      break;
 800bf08:	e005      	b.n	800bf16 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	22fa      	movs	r2, #250	; 0xfa
 800bf0e:	711a      	strb	r2, [r3, #4]
      return;
 800bf10:	e00a      	b.n	800bf28 <pcb_new+0xbc>
      break;
 800bf12:	bf00      	nop
 800bf14:	e000      	b.n	800bf18 <pcb_new+0xac>
      break;
 800bf16:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d102      	bne.n	800bf28 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	22ff      	movs	r2, #255	; 0xff
 800bf26:	711a      	strb	r2, [r3, #4]
  }
}
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd90      	pop	{r4, r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	08019d68 	.word	0x08019d68
 800bf34:	08019f4c 	.word	0x08019f4c
 800bf38:	08019dac 	.word	0x08019dac
 800bf3c:	0800b8f9 	.word	0x0800b8f9

0800bf40 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7ff ff85 	bl	800be6c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bf62:	bf00      	nop
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
	...

0800bf6c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	6039      	str	r1, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bf7c:	2007      	movs	r0, #7
 800bf7e:	f001 fdc3 	bl	800db08 <memp_malloc>
 800bf82:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <netconn_alloc+0x22>
    return NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e052      	b.n	800c034 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	79fa      	ldrb	r2, [r7, #7]
 800bf98:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bfa0:	79fb      	ldrb	r3, [r7, #7]
 800bfa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfa6:	2b10      	cmp	r3, #16
 800bfa8:	d004      	beq.n	800bfb4 <netconn_alloc+0x48>
 800bfaa:	2b20      	cmp	r3, #32
 800bfac:	d105      	bne.n	800bfba <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bfae:	2306      	movs	r3, #6
 800bfb0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bfb2:	e00a      	b.n	800bfca <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bfb4:	2306      	movs	r3, #6
 800bfb6:	617b      	str	r3, [r7, #20]
      break;
 800bfb8:	e007      	b.n	800bfca <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bfba:	4b20      	ldr	r3, [pc, #128]	; (800c03c <netconn_alloc+0xd0>)
 800bfbc:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bfc0:	491f      	ldr	r1, [pc, #124]	; (800c040 <netconn_alloc+0xd4>)
 800bfc2:	4820      	ldr	r0, [pc, #128]	; (800c044 <netconn_alloc+0xd8>)
 800bfc4:	f00c fbe6 	bl	8018794 <iprintf>
      goto free_and_return;
 800bfc8:	e02f      	b.n	800c02a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3310      	adds	r3, #16
 800bfce:	6979      	ldr	r1, [r7, #20]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f00b ffbb 	bl	8017f4c <sys_mbox_new>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d125      	bne.n	800c028 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	330c      	adds	r3, #12
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f00c f879 	bl	80180da <sys_sem_new>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3310      	adds	r3, #16
 800bff2:	4618      	mov	r0, r3
 800bff4:	f00b ffcc 	bl	8017f90 <sys_mbox_free>
    goto free_and_return;
 800bff8:	e017      	b.n	800c02a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3314      	adds	r3, #20
 800bffe:	4618      	mov	r0, r3
 800c000:	f00c f85e 	bl	80180c0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f04f 32ff 	mov.w	r2, #4294967295
 800c010:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	7cfa      	ldrb	r2, [r7, #19]
 800c022:	771a      	strb	r2, [r3, #28]
  return conn;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	e005      	b.n	800c034 <netconn_alloc+0xc8>
    goto free_and_return;
 800c028:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800c02a:	68f9      	ldr	r1, [r7, #12]
 800c02c:	2007      	movs	r0, #7
 800c02e:	f001 fdbd 	bl	800dbac <memp_free>
  return NULL;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	08019d68 	.word	0x08019d68
 800c040:	08019f6c 	.word	0x08019f6c
 800c044:	08019dac 	.word	0x08019dac

0800c048 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d006      	beq.n	800c066 <netconn_free+0x1e>
 800c058:	4b1b      	ldr	r3, [pc, #108]	; (800c0c8 <netconn_free+0x80>)
 800c05a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c05e:	491b      	ldr	r1, [pc, #108]	; (800c0cc <netconn_free+0x84>)
 800c060:	481b      	ldr	r0, [pc, #108]	; (800c0d0 <netconn_free+0x88>)
 800c062:	f00c fb97 	bl	8018794 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3310      	adds	r3, #16
 800c06a:	4618      	mov	r0, r3
 800c06c:	f00c f817 	bl	801809e <sys_mbox_valid>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d006      	beq.n	800c084 <netconn_free+0x3c>
 800c076:	4b14      	ldr	r3, [pc, #80]	; (800c0c8 <netconn_free+0x80>)
 800c078:	f240 3223 	movw	r2, #803	; 0x323
 800c07c:	4915      	ldr	r1, [pc, #84]	; (800c0d4 <netconn_free+0x8c>)
 800c07e:	4814      	ldr	r0, [pc, #80]	; (800c0d0 <netconn_free+0x88>)
 800c080:	f00c fb88 	bl	8018794 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3314      	adds	r3, #20
 800c088:	4618      	mov	r0, r3
 800c08a:	f00c f808 	bl	801809e <sys_mbox_valid>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d006      	beq.n	800c0a2 <netconn_free+0x5a>
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <netconn_free+0x80>)
 800c096:	f240 3226 	movw	r2, #806	; 0x326
 800c09a:	490f      	ldr	r1, [pc, #60]	; (800c0d8 <netconn_free+0x90>)
 800c09c:	480c      	ldr	r0, [pc, #48]	; (800c0d0 <netconn_free+0x88>)
 800c09e:	f00c fb79 	bl	8018794 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f00c f87d 	bl	80181a6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	330c      	adds	r3, #12
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f00c f896 	bl	80181e2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c0b6:	6879      	ldr	r1, [r7, #4]
 800c0b8:	2007      	movs	r0, #7
 800c0ba:	f001 fd77 	bl	800dbac <memp_free>
}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	08019d68 	.word	0x08019d68
 800c0cc:	08019f94 	.word	0x08019f94
 800c0d0:	08019dac 	.word	0x08019dac
 800c0d4:	08019fc4 	.word	0x08019fc4
 800c0d8:	0801a000 	.word	0x0801a000

0800c0dc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3310      	adds	r3, #16
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f00b ffd8 	bl	801809e <sys_mbox_valid>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d02f      	beq.n	800c154 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c0f4:	e018      	b.n	800c128 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0fe:	2b10      	cmp	r3, #16
 800c100:	d10e      	bne.n	800c120 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	f107 020f 	add.w	r2, r7, #15
 800c108:	4611      	mov	r1, r2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff fbba 	bl	800b884 <lwip_netconn_is_err_msg>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d108      	bne.n	800c128 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	4618      	mov	r0, r3
 800c11a:	f002 fb87 	bl	800e82c <pbuf_free>
 800c11e:	e003      	b.n	800c128 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 fdce 	bl	800ccc4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3310      	adds	r3, #16
 800c12c:	f107 0210 	add.w	r2, r7, #16
 800c130:	4611      	mov	r1, r2
 800c132:	4618      	mov	r0, r3
 800c134:	f00b ff97 	bl	8018066 <sys_arch_mbox_tryfetch>
 800c138:	4603      	mov	r3, r0
 800c13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13e:	d1da      	bne.n	800c0f6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3310      	adds	r3, #16
 800c144:	4618      	mov	r0, r3
 800c146:	f00b ff23 	bl	8017f90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3310      	adds	r3, #16
 800c14e:	4618      	mov	r0, r3
 800c150:	f00b ffb6 	bl	80180c0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3314      	adds	r3, #20
 800c158:	4618      	mov	r0, r3
 800c15a:	f00b ffa0 	bl	801809e <sys_mbox_valid>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d034      	beq.n	800c1ce <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c164:	e01d      	b.n	800c1a2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f107 020e 	add.w	r2, r7, #14
 800c16c:	4611      	mov	r1, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff fb88 	bl	800b884 <lwip_netconn_is_err_msg>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d113      	bne.n	800c1a2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c17e:	6978      	ldr	r0, [r7, #20]
 800c180:	f7ff ffac 	bl	800c0dc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d007      	beq.n	800c19c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	4618      	mov	r0, r3
 800c192:	f003 f94b 	bl	800f42c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2200      	movs	r2, #0
 800c19a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	f7ff ff53 	bl	800c048 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3314      	adds	r3, #20
 800c1a6:	f107 0210 	add.w	r2, r7, #16
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f00b ff5a 	bl	8018066 <sys_arch_mbox_tryfetch>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b8:	d1d5      	bne.n	800c166 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3314      	adds	r3, #20
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f00b fee6 	bl	8017f90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f00b ff79 	bl	80180c0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c1ce:	bf00      	nop
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d106      	bne.n	800c1fc <lwip_netconn_do_close_internal+0x24>
 800c1ee:	4b87      	ldr	r3, [pc, #540]	; (800c40c <lwip_netconn_do_close_internal+0x234>)
 800c1f0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c1f4:	4986      	ldr	r1, [pc, #536]	; (800c410 <lwip_netconn_do_close_internal+0x238>)
 800c1f6:	4887      	ldr	r0, [pc, #540]	; (800c414 <lwip_netconn_do_close_internal+0x23c>)
 800c1f8:	f00c facc 	bl	8018794 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c204:	2b10      	cmp	r3, #16
 800c206:	d006      	beq.n	800c216 <lwip_netconn_do_close_internal+0x3e>
 800c208:	4b80      	ldr	r3, [pc, #512]	; (800c40c <lwip_netconn_do_close_internal+0x234>)
 800c20a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c20e:	4982      	ldr	r1, [pc, #520]	; (800c418 <lwip_netconn_do_close_internal+0x240>)
 800c210:	4880      	ldr	r0, [pc, #512]	; (800c414 <lwip_netconn_do_close_internal+0x23c>)
 800c212:	f00c fabf 	bl	8018794 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	785b      	ldrb	r3, [r3, #1]
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	d006      	beq.n	800c22c <lwip_netconn_do_close_internal+0x54>
 800c21e:	4b7b      	ldr	r3, [pc, #492]	; (800c40c <lwip_netconn_do_close_internal+0x234>)
 800c220:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c224:	497d      	ldr	r1, [pc, #500]	; (800c41c <lwip_netconn_do_close_internal+0x244>)
 800c226:	487b      	ldr	r0, [pc, #492]	; (800c414 <lwip_netconn_do_close_internal+0x23c>)
 800c228:	f00c fab4 	bl	8018794 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d106      	bne.n	800c242 <lwip_netconn_do_close_internal+0x6a>
 800c234:	4b75      	ldr	r3, [pc, #468]	; (800c40c <lwip_netconn_do_close_internal+0x234>)
 800c236:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c23a:	4979      	ldr	r1, [pc, #484]	; (800c420 <lwip_netconn_do_close_internal+0x248>)
 800c23c:	4875      	ldr	r0, [pc, #468]	; (800c414 <lwip_netconn_do_close_internal+0x23c>)
 800c23e:	f00c faa9 	bl	8018794 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d106      	bne.n	800c258 <lwip_netconn_do_close_internal+0x80>
 800c24a:	4b70      	ldr	r3, [pc, #448]	; (800c40c <lwip_netconn_do_close_internal+0x234>)
 800c24c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c250:	4974      	ldr	r1, [pc, #464]	; (800c424 <lwip_netconn_do_close_internal+0x24c>)
 800c252:	4870      	ldr	r0, [pc, #448]	; (800c414 <lwip_netconn_do_close_internal+0x23c>)
 800c254:	f00c fa9e 	bl	8018794 <iprintf>

  tpcb = conn->pcb.tcp;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	7a1b      	ldrb	r3, [r3, #8]
 800c264:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	f003 0302 	and.w	r3, r3, #2
 800c274:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d102      	bne.n	800c282 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c27c:	2301      	movs	r3, #1
 800c27e:	75bb      	strb	r3, [r7, #22]
 800c280:	e01f      	b.n	800c2c2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00e      	beq.n	800c2a6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c28c:	2b05      	cmp	r3, #5
 800c28e:	d007      	beq.n	800c2a0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c294:	2b06      	cmp	r3, #6
 800c296:	d003      	beq.n	800c2a0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c29c:	2b08      	cmp	r3, #8
 800c29e:	d102      	bne.n	800c2a6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	75bb      	strb	r3, [r7, #22]
 800c2a4:	e00d      	b.n	800c2c2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c2a6:	7b7b      	ldrb	r3, [r7, #13]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d008      	beq.n	800c2be <lwip_netconn_do_close_internal+0xe6>
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	8b5b      	ldrh	r3, [r3, #26]
 800c2b0:	f003 0310 	and.w	r3, r3, #16
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	75bb      	strb	r3, [r7, #22]
 800c2bc:	e001      	b.n	800c2c2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c2c2:	7dbb      	ldrb	r3, [r7, #22]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d003      	beq.n	800c2d0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	6938      	ldr	r0, [r7, #16]
 800c2cc:	f004 f872 	bl	80103b4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	7d1b      	ldrb	r3, [r3, #20]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d104      	bne.n	800c2e2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c2d8:	2100      	movs	r1, #0
 800c2da:	6938      	ldr	r0, [r7, #16]
 800c2dc:	f004 f8e2 	bl	80104a4 <tcp_accept>
 800c2e0:	e01d      	b.n	800c31e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d007      	beq.n	800c2f8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f004 f874 	bl	80103d8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	6938      	ldr	r0, [r7, #16]
 800c2f4:	f004 f8d6 	bl	80104a4 <tcp_accept>
    }
    if (shut_tx) {
 800c2f8:	7b7b      	ldrb	r3, [r7, #13]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c2fe:	2100      	movs	r1, #0
 800c300:	6938      	ldr	r0, [r7, #16]
 800c302:	f004 f88b 	bl	801041c <tcp_sent>
    }
    if (shut_close) {
 800c306:	7dbb      	ldrb	r3, [r7, #22]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d008      	beq.n	800c31e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c30c:	2200      	movs	r2, #0
 800c30e:	2100      	movs	r1, #0
 800c310:	6938      	ldr	r0, [r7, #16]
 800c312:	f004 f8df 	bl	80104d4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c316:	2100      	movs	r1, #0
 800c318:	6938      	ldr	r0, [r7, #16]
 800c31a:	f004 f8a1 	bl	8010460 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c31e:	7dbb      	ldrb	r3, [r7, #22]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d005      	beq.n	800c330 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c324:	6938      	ldr	r0, [r7, #16]
 800c326:	f002 ff3b 	bl	800f1a0 <tcp_close>
 800c32a:	4603      	mov	r3, r0
 800c32c:	75fb      	strb	r3, [r7, #23]
 800c32e:	e007      	b.n	800c340 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	7b7a      	ldrb	r2, [r7, #13]
 800c334:	4619      	mov	r1, r3
 800c336:	6938      	ldr	r0, [r7, #16]
 800c338:	f002 ff5e 	bl	800f1f8 <tcp_shutdown>
 800c33c:	4603      	mov	r3, r0
 800c33e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c348:	2301      	movs	r3, #1
 800c34a:	757b      	strb	r3, [r7, #21]
 800c34c:	e016      	b.n	800c37c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c356:	d10f      	bne.n	800c378 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a1b      	ldr	r3, [r3, #32]
 800c35c:	7a5b      	ldrb	r3, [r3, #9]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10c      	bne.n	800c37c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c362:	2301      	movs	r3, #1
 800c364:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c366:	7dbb      	ldrb	r3, [r7, #22]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d007      	beq.n	800c37c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c36c:	6938      	ldr	r0, [r7, #16]
 800c36e:	f003 f85d 	bl	800f42c <tcp_abort>
          err = ERR_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	75fb      	strb	r3, [r7, #23]
 800c376:	e001      	b.n	800c37c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c378:	2301      	movs	r3, #1
 800c37a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c37c:	7d7b      	ldrb	r3, [r7, #21]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d052      	beq.n	800c428 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	330c      	adds	r3, #12
 800c38a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a1b      	ldr	r3, [r3, #32]
 800c390:	7dfa      	ldrb	r2, [r7, #23]
 800c392:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c3a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d129      	bne.n	800c3fc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c3a8:	7dbb      	ldrb	r3, [r7, #22]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00c      	beq.n	800c3c8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d005      	beq.n	800c3c8 <lwip_netconn_do_close_internal+0x1f0>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2104      	movs	r1, #4
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	4798      	blx	r3
      }
      if (shut_rx) {
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d009      	beq.n	800c3e2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d005      	beq.n	800c3e2 <lwip_netconn_do_close_internal+0x20a>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3da:	2200      	movs	r2, #0
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	4798      	blx	r3
      }
      if (shut_tx) {
 800c3e2:	7b7b      	ldrb	r3, [r7, #13]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <lwip_netconn_do_close_internal+0x224>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2102      	movs	r1, #2
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c402:	68b8      	ldr	r0, [r7, #8]
 800c404:	f00b fec2 	bl	801818c <sys_sem_signal>
    }
    return ERR_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	e03c      	b.n	800c486 <lwip_netconn_do_close_internal+0x2ae>
 800c40c:	08019d68 	.word	0x08019d68
 800c410:	0801a03c 	.word	0x0801a03c
 800c414:	08019dac 	.word	0x08019dac
 800c418:	0801a04c 	.word	0x0801a04c
 800c41c:	0801a06c 	.word	0x0801a06c
 800c420:	0801a090 	.word	0x0801a090
 800c424:	08019ed0 	.word	0x08019ed0
  }
  if (!close_finished) {
 800c428:	7d7b      	ldrb	r3, [r7, #21]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d11e      	bne.n	800c46c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	7d1b      	ldrb	r3, [r3, #20]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d106      	bne.n	800c444 <lwip_netconn_do_close_internal+0x26c>
 800c436:	4b16      	ldr	r3, [pc, #88]	; (800c490 <lwip_netconn_do_close_internal+0x2b8>)
 800c438:	f240 4241 	movw	r2, #1089	; 0x441
 800c43c:	4915      	ldr	r1, [pc, #84]	; (800c494 <lwip_netconn_do_close_internal+0x2bc>)
 800c43e:	4816      	ldr	r0, [pc, #88]	; (800c498 <lwip_netconn_do_close_internal+0x2c0>)
 800c440:	f00c f9a8 	bl	8018794 <iprintf>
    if (shut_tx) {
 800c444:	7b7b      	ldrb	r3, [r7, #13]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800c44a:	4914      	ldr	r1, [pc, #80]	; (800c49c <lwip_netconn_do_close_internal+0x2c4>)
 800c44c:	6938      	ldr	r0, [r7, #16]
 800c44e:	f003 ffe5 	bl	801041c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c452:	2201      	movs	r2, #1
 800c454:	4912      	ldr	r1, [pc, #72]	; (800c4a0 <lwip_netconn_do_close_internal+0x2c8>)
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f004 f83c 	bl	80104d4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c45c:	4911      	ldr	r1, [pc, #68]	; (800c4a4 <lwip_netconn_do_close_internal+0x2cc>)
 800c45e:	6938      	ldr	r0, [r7, #16]
 800c460:	f003 fffe 	bl	8010460 <tcp_err>
    tcp_arg(tpcb, conn);
 800c464:	6879      	ldr	r1, [r7, #4]
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f003 ffa4 	bl	80103b4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d106      	bne.n	800c482 <lwip_netconn_do_close_internal+0x2aa>
 800c474:	4b06      	ldr	r3, [pc, #24]	; (800c490 <lwip_netconn_do_close_internal+0x2b8>)
 800c476:	f240 424d 	movw	r2, #1101	; 0x44d
 800c47a:	490b      	ldr	r1, [pc, #44]	; (800c4a8 <lwip_netconn_do_close_internal+0x2d0>)
 800c47c:	4806      	ldr	r0, [pc, #24]	; (800c498 <lwip_netconn_do_close_internal+0x2c0>)
 800c47e:	f00c f989 	bl	8018794 <iprintf>
  return err;
 800c482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	08019d68 	.word	0x08019d68
 800c494:	0801a0a4 	.word	0x0801a0a4
 800c498:	08019dac 	.word	0x08019dac
 800c49c:	0800bbc9 	.word	0x0800bbc9
 800c4a0:	0800bb01 	.word	0x0800bb01
 800c4a4:	0800bc71 	.word	0x0800bc71
 800c4a8:	0801a0c8 	.word	0x0801a0c8

0800c4ac <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	785b      	ldrb	r3, [r3, #1]
 800c4be:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c4c0:	7afb      	ldrb	r3, [r7, #11]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00d      	beq.n	800c4e2 <lwip_netconn_do_delconn+0x36>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4d0:	2b10      	cmp	r3, #16
 800c4d2:	d006      	beq.n	800c4e2 <lwip_netconn_do_delconn+0x36>
 800c4d4:	4b60      	ldr	r3, [pc, #384]	; (800c658 <lwip_netconn_do_delconn+0x1ac>)
 800c4d6:	f240 425e 	movw	r2, #1118	; 0x45e
 800c4da:	4960      	ldr	r1, [pc, #384]	; (800c65c <lwip_netconn_do_delconn+0x1b0>)
 800c4dc:	4860      	ldr	r0, [pc, #384]	; (800c660 <lwip_netconn_do_delconn+0x1b4>)
 800c4de:	f00c f959 	bl	8018794 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c4e2:	7afb      	ldrb	r3, [r7, #11]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <lwip_netconn_do_delconn+0x48>
 800c4e8:	7afb      	ldrb	r3, [r7, #11]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d002      	beq.n	800c4f4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c4ee:	7afb      	ldrb	r3, [r7, #11]
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d109      	bne.n	800c508 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c4f4:	7afb      	ldrb	r3, [r7, #11]
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d10a      	bne.n	800c510 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	7f1b      	ldrb	r3, [r3, #28]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	22fb      	movs	r2, #251	; 0xfb
 800c50c:	711a      	strb	r2, [r3, #4]
 800c50e:	e097      	b.n	800c640 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	2b03      	cmp	r3, #3
 800c514:	d10d      	bne.n	800c532 <lwip_netconn_do_delconn+0x86>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	7f1b      	ldrb	r3, [r3, #28]
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <lwip_netconn_do_delconn+0x86>
 800c524:	4b4c      	ldr	r3, [pc, #304]	; (800c658 <lwip_netconn_do_delconn+0x1ac>)
 800c526:	f240 427a 	movw	r2, #1146	; 0x47a
 800c52a:	494e      	ldr	r1, [pc, #312]	; (800c664 <lwip_netconn_do_delconn+0x1b8>)
 800c52c:	484c      	ldr	r0, [pc, #304]	; (800c660 <lwip_netconn_do_delconn+0x1b4>)
 800c52e:	f00c f931 	bl	8018794 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff fdcd 	bl	800c0dc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d05f      	beq.n	800c60c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c556:	2b10      	cmp	r3, #16
 800c558:	d00d      	beq.n	800c576 <lwip_netconn_do_delconn+0xca>
 800c55a:	2b20      	cmp	r3, #32
 800c55c:	d151      	bne.n	800c602 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	4618      	mov	r0, r3
 800c570:	f009 f990 	bl	8015894 <udp_remove>
          break;
 800c574:	e046      	b.n	800c604 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d006      	beq.n	800c58e <lwip_netconn_do_delconn+0xe2>
 800c580:	4b35      	ldr	r3, [pc, #212]	; (800c658 <lwip_netconn_do_delconn+0x1ac>)
 800c582:	f240 4294 	movw	r2, #1172	; 0x494
 800c586:	4938      	ldr	r1, [pc, #224]	; (800c668 <lwip_netconn_do_delconn+0x1bc>)
 800c588:	4835      	ldr	r0, [pc, #212]	; (800c660 <lwip_netconn_do_delconn+0x1b4>)
 800c58a:	f00c f903 	bl	8018794 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2204      	movs	r2, #4
 800c594:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2203      	movs	r2, #3
 800c59a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff fe14 	bl	800c1d8 <lwip_netconn_do_close_internal>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d04b      	beq.n	800c64e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	785b      	ldrb	r3, [r3, #1]
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d006      	beq.n	800c5ce <lwip_netconn_do_delconn+0x122>
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <lwip_netconn_do_delconn+0x1ac>)
 800c5c2:	f240 429a 	movw	r2, #1178	; 0x49a
 800c5c6:	4929      	ldr	r1, [pc, #164]	; (800c66c <lwip_netconn_do_delconn+0x1c0>)
 800c5c8:	4825      	ldr	r0, [pc, #148]	; (800c660 <lwip_netconn_do_delconn+0x1b4>)
 800c5ca:	f00c f8e3 	bl	8018794 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c5ce:	4828      	ldr	r0, [pc, #160]	; (800c670 <lwip_netconn_do_delconn+0x1c4>)
 800c5d0:	f00b fe4d 	bl	801826e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	330c      	adds	r3, #12
 800c5da:	2100      	movs	r1, #0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f00b fda4 	bl	801812a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c5e2:	4823      	ldr	r0, [pc, #140]	; (800c670 <lwip_netconn_do_delconn+0x1c4>)
 800c5e4:	f00b fe34 	bl	8018250 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	785b      	ldrb	r3, [r3, #1]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d02d      	beq.n	800c64e <lwip_netconn_do_delconn+0x1a2>
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <lwip_netconn_do_delconn+0x1ac>)
 800c5f4:	f240 429e 	movw	r2, #1182	; 0x49e
 800c5f8:	491c      	ldr	r1, [pc, #112]	; (800c66c <lwip_netconn_do_delconn+0x1c0>)
 800c5fa:	4819      	ldr	r0, [pc, #100]	; (800c660 <lwip_netconn_do_delconn+0x1b4>)
 800c5fc:	f00c f8ca 	bl	8018794 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c600:	e025      	b.n	800c64e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c602:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2200      	movs	r2, #0
 800c60a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <lwip_netconn_do_delconn+0x17a>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	6810      	ldr	r0, [r2, #0]
 800c620:	2200      	movs	r2, #0
 800c622:	2100      	movs	r1, #0
 800c624:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d007      	beq.n	800c640 <lwip_netconn_do_delconn+0x194>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	6810      	ldr	r0, [r2, #0]
 800c63a:	2200      	movs	r2, #0
 800c63c:	2102      	movs	r1, #2
 800c63e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	330c      	adds	r3, #12
 800c646:	4618      	mov	r0, r3
 800c648:	f00b fdba 	bl	80181c0 <sys_sem_valid>
 800c64c:	e000      	b.n	800c650 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c64e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	08019d68 	.word	0x08019d68
 800c65c:	0801a0d8 	.word	0x0801a0d8
 800c660:	08019dac 	.word	0x08019dac
 800c664:	0801a0ec 	.word	0x0801a0ec
 800c668:	0801a10c 	.word	0x0801a10c
 800c66c:	0801a128 	.word	0x0801a128
 800c670:	2000a170 	.word	0x2000a170

0800c674 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d025      	beq.n	800c6d6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c694:	2b10      	cmp	r3, #16
 800c696:	d00e      	beq.n	800c6b6 <lwip_netconn_do_bind+0x42>
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d119      	bne.n	800c6d0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6858      	ldr	r0, [r3, #4]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6899      	ldr	r1, [r3, #8]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	899b      	ldrh	r3, [r3, #12]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f009 f84a 	bl	8015744 <udp_bind>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]
        break;
 800c6b4:	e011      	b.n	800c6da <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6858      	ldr	r0, [r3, #4]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	6899      	ldr	r1, [r3, #8]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	899b      	ldrh	r3, [r3, #12]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	f002 febd 	bl	800f444 <tcp_bind>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	73fb      	strb	r3, [r7, #15]
        break;
 800c6ce:	e004      	b.n	800c6da <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c6d0:	23fa      	movs	r3, #250	; 0xfa
 800c6d2:	73fb      	strb	r3, [r7, #15]
        break;
 800c6d4:	e001      	b.n	800c6da <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c6d6:	23fa      	movs	r3, #250	; 0xfa
 800c6d8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	7bfa      	ldrb	r2, [r7, #15]
 800c6de:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c6e0:	bf00      	nop
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff f871 	bl	800b7e0 <netconn_err>
 800c6fe:	4603      	mov	r3, r0
 800c700:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d134      	bne.n	800c774 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d02d      	beq.n	800c770 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c71e:	2b20      	cmp	r3, #32
 800c720:	d123      	bne.n	800c76a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10c      	bne.n	800c746 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4619      	mov	r1, r3
 800c73a:	4610      	mov	r0, r2
 800c73c:	f008 fe18 	bl	8015370 <udp_send>
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c744:	e016      	b.n	800c774 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6858      	ldr	r0, [r3, #4]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	6819      	ldr	r1, [r3, #0]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f103 0208 	add.w	r2, r3, #8
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	f008 fe3a 	bl	80153d8 <udp_sendto>
 800c764:	4603      	mov	r3, r0
 800c766:	73fb      	strb	r3, [r7, #15]
          break;
 800c768:	e004      	b.n	800c774 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c76a:	23f5      	movs	r3, #245	; 0xf5
 800c76c:	73fb      	strb	r3, [r7, #15]
          break;
 800c76e:	e001      	b.n	800c774 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c770:	23f5      	movs	r3, #245	; 0xf5
 800c772:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	7bfa      	ldrb	r2, [r7, #15]
 800c778:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c77a:	bf00      	nop
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b086      	sub	sp, #24
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2200      	movs	r2, #0
 800c792:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d022      	beq.n	800c7e4 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7a8:	2b10      	cmp	r3, #16
 800c7aa:	d11b      	bne.n	800c7e4 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7b8:	d202      	bcs.n	800c7c0 <lwip_netconn_do_recv+0x3e>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	e001      	b.n	800c7c4 <lwip_netconn_do_recv+0x42>
 800c7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7c4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	89fa      	ldrh	r2, [r7, #14]
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f002 ff29 	bl	800f628 <tcp_recved>
        remaining -= recved;
 800c7d6:	89fb      	ldrh	r3, [r7, #14]
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1e6      	bne.n	800c7b2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c7e4:	bf00      	nop
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <lwip_netconn_do_writemore+0x24>
 800c802:	4b96      	ldr	r3, [pc, #600]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c804:	f240 6273 	movw	r2, #1651	; 0x673
 800c808:	4995      	ldr	r1, [pc, #596]	; (800ca60 <lwip_netconn_do_writemore+0x274>)
 800c80a:	4896      	ldr	r0, [pc, #600]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c80c:	f00b ffc2 	bl	8018794 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	785b      	ldrb	r3, [r3, #1]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d006      	beq.n	800c826 <lwip_netconn_do_writemore+0x3a>
 800c818:	4b90      	ldr	r3, [pc, #576]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c81a:	f240 6274 	movw	r2, #1652	; 0x674
 800c81e:	4992      	ldr	r1, [pc, #584]	; (800ca68 <lwip_netconn_do_writemore+0x27c>)
 800c820:	4890      	ldr	r0, [pc, #576]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c822:	f00b ffb7 	bl	8018794 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d106      	bne.n	800c83c <lwip_netconn_do_writemore+0x50>
 800c82e:	4b8b      	ldr	r3, [pc, #556]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c830:	f240 6275 	movw	r2, #1653	; 0x675
 800c834:	498d      	ldr	r1, [pc, #564]	; (800ca6c <lwip_netconn_do_writemore+0x280>)
 800c836:	488b      	ldr	r0, [pc, #556]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c838:	f00b ffac 	bl	8018794 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d106      	bne.n	800c852 <lwip_netconn_do_writemore+0x66>
 800c844:	4b85      	ldr	r3, [pc, #532]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c846:	f240 6276 	movw	r2, #1654	; 0x676
 800c84a:	4989      	ldr	r1, [pc, #548]	; (800ca70 <lwip_netconn_do_writemore+0x284>)
 800c84c:	4885      	ldr	r0, [pc, #532]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c84e:	f00b ffa1 	bl	8018794 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a1b      	ldr	r3, [r3, #32]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d306      	bcc.n	800c870 <lwip_netconn_do_writemore+0x84>
 800c862:	4b7e      	ldr	r3, [pc, #504]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c864:	f240 6277 	movw	r2, #1655	; 0x677
 800c868:	4982      	ldr	r1, [pc, #520]	; (800ca74 <lwip_netconn_do_writemore+0x288>)
 800c86a:	487e      	ldr	r0, [pc, #504]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c86c:	f00b ff92 	bl	8018794 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <lwip_netconn_do_writemore+0x9c>
 800c87a:	4b78      	ldr	r3, [pc, #480]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c87c:	f240 6279 	movw	r2, #1657	; 0x679
 800c880:	497d      	ldr	r1, [pc, #500]	; (800ca78 <lwip_netconn_do_writemore+0x28c>)
 800c882:	4878      	ldr	r0, [pc, #480]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c884:	f00b ff86 	bl	8018794 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	7f1b      	ldrb	r3, [r3, #28]
 800c88e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7f1b      	ldrb	r3, [r3, #28]
 800c894:	f003 0302 	and.w	r3, r3, #2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d104      	bne.n	800c8a6 <lwip_netconn_do_writemore+0xba>
 800c89c:	7ebb      	ldrb	r3, [r7, #26]
 800c89e:	f003 0304 	and.w	r3, r3, #4
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <lwip_netconn_do_writemore+0xbe>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <lwip_netconn_do_writemore+0xc0>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	4413      	add	r3, r2
 800c8be:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8d8:	d307      	bcc.n	800c8ea <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c8da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8de:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c8e0:	7ebb      	ldrb	r3, [r7, #26]
 800c8e2:	f043 0302 	orr.w	r3, r3, #2
 800c8e6:	76bb      	strb	r3, [r7, #26]
 800c8e8:	e001      	b.n	800c8ee <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c8f6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c8f8:	89fa      	ldrh	r2, [r7, #14]
 800c8fa:	8bbb      	ldrh	r3, [r7, #28]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d216      	bcs.n	800c92e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c900:	89fb      	ldrh	r3, [r7, #14]
 800c902:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c904:	7e3b      	ldrb	r3, [r7, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00d      	beq.n	800c926 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c90a:	8bbb      	ldrh	r3, [r7, #28]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10e      	bne.n	800c92e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a1b      	ldr	r3, [r3, #32]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d102      	bne.n	800c920 <lwip_netconn_do_writemore+0x134>
 800c91a:	f06f 0306 	mvn.w	r3, #6
 800c91e:	e000      	b.n	800c922 <lwip_netconn_do_writemore+0x136>
 800c920:	2300      	movs	r3, #0
 800c922:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c924:	e07d      	b.n	800ca22 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c926:	7ebb      	ldrb	r3, [r7, #26]
 800c928:	f043 0302 	orr.w	r3, r3, #2
 800c92c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	691a      	ldr	r2, [r3, #16]
 800c934:	8bbb      	ldrh	r3, [r7, #28]
 800c936:	441a      	add	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	429a      	cmp	r2, r3
 800c942:	d906      	bls.n	800c952 <lwip_netconn_do_writemore+0x166>
 800c944:	4b45      	ldr	r3, [pc, #276]	; (800ca5c <lwip_netconn_do_writemore+0x270>)
 800c946:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c94a:	494c      	ldr	r1, [pc, #304]	; (800ca7c <lwip_netconn_do_writemore+0x290>)
 800c94c:	4845      	ldr	r0, [pc, #276]	; (800ca64 <lwip_netconn_do_writemore+0x278>)
 800c94e:	f00b ff21 	bl	8018794 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c952:	8bbb      	ldrh	r3, [r7, #28]
 800c954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c958:	4293      	cmp	r3, r2
 800c95a:	d103      	bne.n	800c964 <lwip_netconn_do_writemore+0x178>
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c962:	d209      	bcs.n	800c978 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c968:	8bba      	ldrh	r2, [r7, #28]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d10b      	bne.n	800c986 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	899b      	ldrh	r3, [r3, #12]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d906      	bls.n	800c986 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c978:	2301      	movs	r3, #1
 800c97a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c97c:	7ebb      	ldrb	r3, [r7, #26]
 800c97e:	f043 0302 	orr.w	r3, r3, #2
 800c982:	76bb      	strb	r3, [r7, #26]
 800c984:	e001      	b.n	800c98a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6858      	ldr	r0, [r3, #4]
 800c98e:	7ebb      	ldrb	r3, [r7, #26]
 800c990:	8bba      	ldrh	r2, [r7, #28]
 800c992:	6979      	ldr	r1, [r7, #20]
 800c994:	f006 fc50 	bl	8013238 <tcp_write>
 800c998:	4603      	mov	r3, r0
 800c99a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c99c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d12c      	bne.n	800c9fe <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	6999      	ldr	r1, [r3, #24]
 800c9aa:	8bba      	ldrh	r2, [r7, #28]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	440a      	add	r2, r1
 800c9b2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	6919      	ldr	r1, [r3, #16]
 800c9ba:	8bba      	ldrh	r2, [r7, #28]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	440a      	add	r2, r1
 800c9c2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	691a      	ldr	r2, [r3, #16]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d113      	bne.n	800c9fe <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	899a      	ldrh	r2, [r3, #12]
 800c9dc:	3a01      	subs	r2, #1
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	899b      	ldrh	r3, [r3, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d008      	beq.n	800c9fe <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a1b      	ldr	r3, [r3, #32]
 800c9f0:	689a      	ldr	r2, [r3, #8]
 800c9f2:	3208      	adds	r2, #8
 800c9f4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a1b      	ldr	r3, [r3, #32]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c9fe:	7e7b      	ldrb	r3, [r7, #25]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d004      	beq.n	800ca0e <lwip_netconn_do_writemore+0x222>
 800ca04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f43f af50 	beq.w	800c8ae <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ca0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d004      	beq.n	800ca20 <lwip_netconn_do_writemore+0x234>
 800ca16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1e:	d146      	bne.n	800caae <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ca20:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ca22:	7e3b      	ldrb	r3, [r7, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02b      	beq.n	800ca80 <lwip_netconn_do_writemore+0x294>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
 800ca2c:	699a      	ldr	r2, [r3, #24]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d223      	bcs.n	800ca80 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <lwip_netconn_do_writemore+0x260>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca44:	2200      	movs	r2, #0
 800ca46:	2103      	movs	r1, #3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7f1b      	ldrb	r3, [r3, #28]
 800ca50:	f043 0310 	orr.w	r3, r3, #16
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	771a      	strb	r2, [r3, #28]
 800ca5a:	e028      	b.n	800caae <lwip_netconn_do_writemore+0x2c2>
 800ca5c:	08019d68 	.word	0x08019d68
 800ca60:	08019ec0 	.word	0x08019ec0
 800ca64:	08019dac 	.word	0x08019dac
 800ca68:	0801a1c8 	.word	0x0801a1c8
 800ca6c:	08019ed0 	.word	0x08019ed0
 800ca70:	0801a1e8 	.word	0x0801a1e8
 800ca74:	0801a200 	.word	0x0801a200
 800ca78:	0801a240 	.word	0x0801a240
 800ca7c:	0801a268 	.word	0x0801a268
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca88:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ca8c:	d305      	bcc.n	800ca9a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d909      	bls.n	800caae <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d005      	beq.n	800caae <lwip_netconn_do_writemore+0x2c2>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	2200      	movs	r2, #0
 800caa8:	2103      	movs	r1, #3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800caae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d11d      	bne.n	800caf2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	699a      	ldr	r2, [r3, #24]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d002      	beq.n	800cacc <lwip_netconn_do_writemore+0x2e0>
 800cac6:	7e3b      	ldrb	r3, [r7, #24]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800cacc:	2301      	movs	r3, #1
 800cace:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f007 f999 	bl	8013e0c <tcp_output>
 800cada:	4603      	mov	r3, r0
 800cadc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cade:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cae2:	f113 0f04 	cmn.w	r3, #4
 800cae6:	d12c      	bne.n	800cb42 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cae8:	7b3b      	ldrb	r3, [r7, #12]
 800caea:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800caec:	2301      	movs	r3, #1
 800caee:	76fb      	strb	r3, [r7, #27]
 800caf0:	e027      	b.n	800cb42 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800caf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafa:	d120      	bne.n	800cb3e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f007 f983 	bl	8013e0c <tcp_output>
 800cb06:	4603      	mov	r3, r0
 800cb08:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cb0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cb0e:	f113 0f04 	cmn.w	r3, #4
 800cb12:	d104      	bne.n	800cb1e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cb14:	7b7b      	ldrb	r3, [r7, #13]
 800cb16:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	76fb      	strb	r3, [r7, #27]
 800cb1c:	e011      	b.n	800cb42 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cb1e:	7e3b      	ldrb	r3, [r7, #24]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00e      	beq.n	800cb42 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a1b      	ldr	r3, [r3, #32]
 800cb28:	699b      	ldr	r3, [r3, #24]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <lwip_netconn_do_writemore+0x348>
 800cb2e:	f06f 0306 	mvn.w	r3, #6
 800cb32:	e000      	b.n	800cb36 <lwip_netconn_do_writemore+0x34a>
 800cb34:	2300      	movs	r3, #0
 800cb36:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	76fb      	strb	r3, [r7, #27]
 800cb3c:	e001      	b.n	800cb42 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cb42:	7efb      	ldrb	r3, [r7, #27]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d015      	beq.n	800cb74 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a1b      	ldr	r3, [r3, #32]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	330c      	adds	r3, #12
 800cb50:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	7ffa      	ldrb	r2, [r7, #31]
 800cb58:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cb66:	78fb      	ldrb	r3, [r7, #3]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d006      	beq.n	800cb7a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cb6c:	68b8      	ldr	r0, [r7, #8]
 800cb6e:	f00b fb0d 	bl	801818c <sys_sem_signal>
 800cb72:	e002      	b.n	800cb7a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cb74:	f04f 33ff 	mov.w	r3, #4294967295
 800cb78:	e000      	b.n	800cb7c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3720      	adds	r7, #32
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	785b      	ldrb	r3, [r3, #1]
 800cb96:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d069      	beq.n	800cc76 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800cbac:	2b10      	cmp	r3, #16
 800cbae:	d162      	bne.n	800cc76 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d002      	beq.n	800cbbe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cbb8:	7afb      	ldrb	r3, [r7, #11]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d05b      	beq.n	800cc76 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800cbbe:	7afb      	ldrb	r3, [r7, #11]
 800cbc0:	2b03      	cmp	r3, #3
 800cbc2:	d103      	bne.n	800cbcc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	22f5      	movs	r2, #245	; 0xf5
 800cbc8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cbca:	e059      	b.n	800cc80 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800cbcc:	7afb      	ldrb	r3, [r7, #11]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d103      	bne.n	800cbda <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	22fb      	movs	r2, #251	; 0xfb
 800cbd6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cbd8:	e052      	b.n	800cc80 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	7a1b      	ldrb	r3, [r3, #8]
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d004      	beq.n	800cbf0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff fa76 	bl	800c0dc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d006      	beq.n	800cc08 <lwip_netconn_do_close+0x84>
 800cbfa:	4b23      	ldr	r3, [pc, #140]	; (800cc88 <lwip_netconn_do_close+0x104>)
 800cbfc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800cc00:	4922      	ldr	r1, [pc, #136]	; (800cc8c <lwip_netconn_do_close+0x108>)
 800cc02:	4823      	ldr	r0, [pc, #140]	; (800cc90 <lwip_netconn_do_close+0x10c>)
 800cc04:	f00b fdc6 	bl	8018794 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2204      	movs	r2, #4
 800cc0e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fada 	bl	800c1d8 <lwip_netconn_do_close_internal>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d029      	beq.n	800cc7e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	785b      	ldrb	r3, [r3, #1]
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d006      	beq.n	800cc42 <lwip_netconn_do_close+0xbe>
 800cc34:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <lwip_netconn_do_close+0x104>)
 800cc36:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cc3a:	4916      	ldr	r1, [pc, #88]	; (800cc94 <lwip_netconn_do_close+0x110>)
 800cc3c:	4814      	ldr	r0, [pc, #80]	; (800cc90 <lwip_netconn_do_close+0x10c>)
 800cc3e:	f00b fda9 	bl	8018794 <iprintf>
        UNLOCK_TCPIP_CORE();
 800cc42:	4815      	ldr	r0, [pc, #84]	; (800cc98 <lwip_netconn_do_close+0x114>)
 800cc44:	f00b fb13 	bl	801826e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4618      	mov	r0, r3
 800cc52:	f00b fa6a 	bl	801812a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cc56:	4810      	ldr	r0, [pc, #64]	; (800cc98 <lwip_netconn_do_close+0x114>)
 800cc58:	f00b fafa 	bl	8018250 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	785b      	ldrb	r3, [r3, #1]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <lwip_netconn_do_close+0xfa>
 800cc66:	4b08      	ldr	r3, [pc, #32]	; (800cc88 <lwip_netconn_do_close+0x104>)
 800cc68:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800cc6c:	4909      	ldr	r1, [pc, #36]	; (800cc94 <lwip_netconn_do_close+0x110>)
 800cc6e:	4808      	ldr	r0, [pc, #32]	; (800cc90 <lwip_netconn_do_close+0x10c>)
 800cc70:	f00b fd90 	bl	8018794 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800cc74:	e003      	b.n	800cc7e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	22f5      	movs	r2, #245	; 0xf5
 800cc7a:	711a      	strb	r2, [r3, #4]
 800cc7c:	e000      	b.n	800cc80 <lwip_netconn_do_close+0xfc>
      return;
 800cc7e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	08019d68 	.word	0x08019d68
 800cc8c:	0801a10c 	.word	0x0801a10c
 800cc90:	08019dac 	.word	0x08019dac
 800cc94:	0801a128 	.word	0x0801a128
 800cc98:	2000a170 	.word	0x2000a170

0800cc9c <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cca2:	2006      	movs	r0, #6
 800cca4:	f000 ff30 	bl	800db08 <memp_malloc>
 800cca8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d004      	beq.n	800ccba <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800ccb0:	2210      	movs	r2, #16
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f00b fc85 	bl	80185c4 <memset>
  }
  return buf;
 800ccba:	687b      	ldr	r3, [r7, #4]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d013      	beq.n	800ccfa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00b      	beq.n	800ccf2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 fda4 	bl	800e82c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	605a      	str	r2, [r3, #4]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	2006      	movs	r0, #6
 800ccf6:	f000 ff59 	bl	800dbac <memp_free>
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d108      	bne.n	800cd2a <netbuf_ref+0x26>
 800cd18:	4b1c      	ldr	r3, [pc, #112]	; (800cd8c <netbuf_ref+0x88>)
 800cd1a:	2299      	movs	r2, #153	; 0x99
 800cd1c:	491c      	ldr	r1, [pc, #112]	; (800cd90 <netbuf_ref+0x8c>)
 800cd1e:	481d      	ldr	r0, [pc, #116]	; (800cd94 <netbuf_ref+0x90>)
 800cd20:	f00b fd38 	bl	8018794 <iprintf>
 800cd24:	f06f 030f 	mvn.w	r3, #15
 800cd28:	e02b      	b.n	800cd82 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d004      	beq.n	800cd3c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f001 fd78 	bl	800e82c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800cd3c:	2241      	movs	r2, #65	; 0x41
 800cd3e:	2100      	movs	r1, #0
 800cd40:	2036      	movs	r0, #54	; 0x36
 800cd42:	f001 fa8f 	bl	800e264 <pbuf_alloc>
 800cd46:	4602      	mov	r2, r0
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d105      	bne.n	800cd60 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800cd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5e:	e010      	b.n	800cd82 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	88fa      	ldrh	r2, [r7, #6]
 800cd6e:	811a      	strh	r2, [r3, #8]
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	6812      	ldr	r2, [r2, #0]
 800cd74:	891b      	ldrh	r3, [r3, #8]
 800cd76:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0801a2c0 	.word	0x0801a2c0
 800cd90:	0801a378 	.word	0x0801a378
 800cd94:	0801a310 	.word	0x0801a310

0800cd98 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d108      	bne.n	800cdbc <netbuf_data+0x24>
 800cdaa:	4b1b      	ldr	r3, [pc, #108]	; (800ce18 <netbuf_data+0x80>)
 800cdac:	22c6      	movs	r2, #198	; 0xc6
 800cdae:	491b      	ldr	r1, [pc, #108]	; (800ce1c <netbuf_data+0x84>)
 800cdb0:	481b      	ldr	r0, [pc, #108]	; (800ce20 <netbuf_data+0x88>)
 800cdb2:	f00b fcef 	bl	8018794 <iprintf>
 800cdb6:	f06f 030f 	mvn.w	r3, #15
 800cdba:	e029      	b.n	800ce10 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d108      	bne.n	800cdd4 <netbuf_data+0x3c>
 800cdc2:	4b15      	ldr	r3, [pc, #84]	; (800ce18 <netbuf_data+0x80>)
 800cdc4:	22c7      	movs	r2, #199	; 0xc7
 800cdc6:	4917      	ldr	r1, [pc, #92]	; (800ce24 <netbuf_data+0x8c>)
 800cdc8:	4815      	ldr	r0, [pc, #84]	; (800ce20 <netbuf_data+0x88>)
 800cdca:	f00b fce3 	bl	8018794 <iprintf>
 800cdce:	f06f 030f 	mvn.w	r3, #15
 800cdd2:	e01d      	b.n	800ce10 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d108      	bne.n	800cdec <netbuf_data+0x54>
 800cdda:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <netbuf_data+0x80>)
 800cddc:	22c8      	movs	r2, #200	; 0xc8
 800cdde:	4912      	ldr	r1, [pc, #72]	; (800ce28 <netbuf_data+0x90>)
 800cde0:	480f      	ldr	r0, [pc, #60]	; (800ce20 <netbuf_data+0x88>)
 800cde2:	f00b fcd7 	bl	8018794 <iprintf>
 800cde6:	f06f 030f 	mvn.w	r3, #15
 800cdea:	e011      	b.n	800ce10 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d102      	bne.n	800cdfa <netbuf_data+0x62>
    return ERR_BUF;
 800cdf4:	f06f 0301 	mvn.w	r3, #1
 800cdf8:	e00a      	b.n	800ce10 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	895a      	ldrh	r2, [r3, #10]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	0801a2c0 	.word	0x0801a2c0
 800ce1c:	0801a3c8 	.word	0x0801a3c8
 800ce20:	0801a310 	.word	0x0801a310
 800ce24:	0801a3e4 	.word	0x0801a3e4
 800ce28:	0801a404 	.word	0x0801a404

0800ce2c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ce36:	f008 f8a1 	bl	8014f7c <sys_timeouts_sleeptime>
 800ce3a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d10b      	bne.n	800ce5c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ce44:	4813      	ldr	r0, [pc, #76]	; (800ce94 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce46:	f00b fa12 	bl	801826e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f00b f8ca 	bl	8017fe8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ce54:	480f      	ldr	r0, [pc, #60]	; (800ce94 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce56:	f00b f9fb 	bl	8018250 <sys_mutex_lock>
    return;
 800ce5a:	e018      	b.n	800ce8e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d102      	bne.n	800ce68 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ce62:	f008 f851 	bl	8014f08 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ce66:	e7e6      	b.n	800ce36 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ce68:	480a      	ldr	r0, [pc, #40]	; (800ce94 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce6a:	f00b fa00 	bl	801826e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f00b f8b8 	bl	8017fe8 <sys_arch_mbox_fetch>
 800ce78:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ce7a:	4806      	ldr	r0, [pc, #24]	; (800ce94 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce7c:	f00b f9e8 	bl	8018250 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce86:	d102      	bne.n	800ce8e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ce88:	f008 f83e 	bl	8014f08 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ce8c:	e7d3      	b.n	800ce36 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	2000a170 	.word	0x2000a170

0800ce98 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cea0:	4810      	ldr	r0, [pc, #64]	; (800cee4 <tcpip_thread+0x4c>)
 800cea2:	f00b f9d5 	bl	8018250 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cea6:	4b10      	ldr	r3, [pc, #64]	; (800cee8 <tcpip_thread+0x50>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d005      	beq.n	800ceba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ceae:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <tcpip_thread+0x50>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a0e      	ldr	r2, [pc, #56]	; (800ceec <tcpip_thread+0x54>)
 800ceb4:	6812      	ldr	r2, [r2, #0]
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ceba:	f107 030c 	add.w	r3, r7, #12
 800cebe:	4619      	mov	r1, r3
 800cec0:	480b      	ldr	r0, [pc, #44]	; (800cef0 <tcpip_thread+0x58>)
 800cec2:	f7ff ffb3 	bl	800ce2c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cecc:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <tcpip_thread+0x5c>)
 800cece:	2291      	movs	r2, #145	; 0x91
 800ced0:	4909      	ldr	r1, [pc, #36]	; (800cef8 <tcpip_thread+0x60>)
 800ced2:	480a      	ldr	r0, [pc, #40]	; (800cefc <tcpip_thread+0x64>)
 800ced4:	f00b fc5e 	bl	8018794 <iprintf>
      continue;
 800ced8:	e003      	b.n	800cee2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 f80f 	bl	800cf00 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cee2:	e7ea      	b.n	800ceba <tcpip_thread+0x22>
 800cee4:	2000a170 	.word	0x2000a170
 800cee8:	2000a164 	.word	0x2000a164
 800ceec:	2000a168 	.word	0x2000a168
 800cef0:	2000a16c 	.word	0x2000a16c
 800cef4:	0801a458 	.word	0x0801a458
 800cef8:	0801a488 	.word	0x0801a488
 800cefc:	0801a4a8 	.word	0x0801a4a8

0800cf00 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d026      	beq.n	800cf5e <tcpip_thread_handle_msg+0x5e>
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	dc2b      	bgt.n	800cf6c <tcpip_thread_handle_msg+0x6c>
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <tcpip_thread_handle_msg+0x1e>
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d015      	beq.n	800cf48 <tcpip_thread_handle_msg+0x48>
 800cf1c:	e026      	b.n	800cf6c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	6850      	ldr	r0, [r2, #4]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	6892      	ldr	r2, [r2, #8]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4798      	blx	r3
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d004      	beq.n	800cf3e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f001 fc77 	bl	800e82c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	2009      	movs	r0, #9
 800cf42:	f000 fe33 	bl	800dbac <memp_free>
      break;
 800cf46:	e018      	b.n	800cf7a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	6892      	ldr	r2, [r2, #8]
 800cf50:	4610      	mov	r0, r2
 800cf52:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	2008      	movs	r0, #8
 800cf58:	f000 fe28 	bl	800dbac <memp_free>
      break;
 800cf5c:	e00d      	b.n	800cf7a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	6892      	ldr	r2, [r2, #8]
 800cf66:	4610      	mov	r0, r2
 800cf68:	4798      	blx	r3
      break;
 800cf6a:	e006      	b.n	800cf7a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cf6c:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <tcpip_thread_handle_msg+0x84>)
 800cf6e:	22cf      	movs	r2, #207	; 0xcf
 800cf70:	4905      	ldr	r1, [pc, #20]	; (800cf88 <tcpip_thread_handle_msg+0x88>)
 800cf72:	4806      	ldr	r0, [pc, #24]	; (800cf8c <tcpip_thread_handle_msg+0x8c>)
 800cf74:	f00b fc0e 	bl	8018794 <iprintf>
      break;
 800cf78:	bf00      	nop
  }
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	0801a458 	.word	0x0801a458
 800cf88:	0801a488 	.word	0x0801a488
 800cf8c:	0801a4a8 	.word	0x0801a4a8

0800cf90 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cf9c:	481a      	ldr	r0, [pc, #104]	; (800d008 <tcpip_inpkt+0x78>)
 800cf9e:	f00b f87e 	bl	801809e <sys_mbox_valid>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d105      	bne.n	800cfb4 <tcpip_inpkt+0x24>
 800cfa8:	4b18      	ldr	r3, [pc, #96]	; (800d00c <tcpip_inpkt+0x7c>)
 800cfaa:	22fc      	movs	r2, #252	; 0xfc
 800cfac:	4918      	ldr	r1, [pc, #96]	; (800d010 <tcpip_inpkt+0x80>)
 800cfae:	4819      	ldr	r0, [pc, #100]	; (800d014 <tcpip_inpkt+0x84>)
 800cfb0:	f00b fbf0 	bl	8018794 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cfb4:	2009      	movs	r0, #9
 800cfb6:	f000 fda7 	bl	800db08 <memp_malloc>
 800cfba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc6:	e01a      	b.n	800cffe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cfe0:	6979      	ldr	r1, [r7, #20]
 800cfe2:	4809      	ldr	r0, [pc, #36]	; (800d008 <tcpip_inpkt+0x78>)
 800cfe4:	f00a ffe6 	bl	8017fb4 <sys_mbox_trypost>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d006      	beq.n	800cffc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cfee:	6979      	ldr	r1, [r7, #20]
 800cff0:	2009      	movs	r0, #9
 800cff2:	f000 fddb 	bl	800dbac <memp_free>
    return ERR_MEM;
 800cff6:	f04f 33ff 	mov.w	r3, #4294967295
 800cffa:	e000      	b.n	800cffe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cffc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	2000a16c 	.word	0x2000a16c
 800d00c:	0801a458 	.word	0x0801a458
 800d010:	0801a4d0 	.word	0x0801a4d0
 800d014:	0801a4a8 	.word	0x0801a4a8

0800d018 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d028:	f003 0318 	and.w	r3, r3, #24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d006      	beq.n	800d03e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d030:	4a08      	ldr	r2, [pc, #32]	; (800d054 <tcpip_input+0x3c>)
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff ffab 	bl	800cf90 <tcpip_inpkt>
 800d03a:	4603      	mov	r3, r0
 800d03c:	e005      	b.n	800d04a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d03e:	4a06      	ldr	r2, [pc, #24]	; (800d058 <tcpip_input+0x40>)
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff ffa4 	bl	800cf90 <tcpip_inpkt>
 800d048:	4603      	mov	r3, r0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	08017da1 	.word	0x08017da1
 800d058:	08016ca9 	.word	0x08016ca9

0800d05c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d066:	4819      	ldr	r0, [pc, #100]	; (800d0cc <tcpip_try_callback+0x70>)
 800d068:	f00b f819 	bl	801809e <sys_mbox_valid>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d106      	bne.n	800d080 <tcpip_try_callback+0x24>
 800d072:	4b17      	ldr	r3, [pc, #92]	; (800d0d0 <tcpip_try_callback+0x74>)
 800d074:	f240 125d 	movw	r2, #349	; 0x15d
 800d078:	4916      	ldr	r1, [pc, #88]	; (800d0d4 <tcpip_try_callback+0x78>)
 800d07a:	4817      	ldr	r0, [pc, #92]	; (800d0d8 <tcpip_try_callback+0x7c>)
 800d07c:	f00b fb8a 	bl	8018794 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d080:	2008      	movs	r0, #8
 800d082:	f000 fd41 	bl	800db08 <memp_malloc>
 800d086:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d08e:	f04f 33ff 	mov.w	r3, #4294967295
 800d092:	e017      	b.n	800d0c4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2201      	movs	r2, #1
 800d098:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d0a6:	68f9      	ldr	r1, [r7, #12]
 800d0a8:	4808      	ldr	r0, [pc, #32]	; (800d0cc <tcpip_try_callback+0x70>)
 800d0aa:	f00a ff83 	bl	8017fb4 <sys_mbox_trypost>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d006      	beq.n	800d0c2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d0b4:	68f9      	ldr	r1, [r7, #12]
 800d0b6:	2008      	movs	r0, #8
 800d0b8:	f000 fd78 	bl	800dbac <memp_free>
    return ERR_MEM;
 800d0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c0:	e000      	b.n	800d0c4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	2000a16c 	.word	0x2000a16c
 800d0d0:	0801a458 	.word	0x0801a458
 800d0d4:	0801a4d0 	.word	0x0801a4d0
 800d0d8:	0801a4a8 	.word	0x0801a4a8

0800d0dc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d0e8:	4806      	ldr	r0, [pc, #24]	; (800d104 <tcpip_send_msg_wait_sem+0x28>)
 800d0ea:	f00b f8b1 	bl	8018250 <sys_mutex_lock>
  fn(apimsg);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	68b8      	ldr	r0, [r7, #8]
 800d0f2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d0f4:	4803      	ldr	r0, [pc, #12]	; (800d104 <tcpip_send_msg_wait_sem+0x28>)
 800d0f6:	f00b f8ba 	bl	801826e <sys_mutex_unlock>
  return ERR_OK;
 800d0fa:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	2000a170 	.word	0x2000a170

0800d108 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d112:	f000 f871 	bl	800d1f8 <lwip_init>

  tcpip_init_done = initfunc;
 800d116:	4a17      	ldr	r2, [pc, #92]	; (800d174 <tcpip_init+0x6c>)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d11c:	4a16      	ldr	r2, [pc, #88]	; (800d178 <tcpip_init+0x70>)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d122:	2106      	movs	r1, #6
 800d124:	4815      	ldr	r0, [pc, #84]	; (800d17c <tcpip_init+0x74>)
 800d126:	f00a ff11 	bl	8017f4c <sys_mbox_new>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d006      	beq.n	800d13e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d130:	4b13      	ldr	r3, [pc, #76]	; (800d180 <tcpip_init+0x78>)
 800d132:	f240 2261 	movw	r2, #609	; 0x261
 800d136:	4913      	ldr	r1, [pc, #76]	; (800d184 <tcpip_init+0x7c>)
 800d138:	4813      	ldr	r0, [pc, #76]	; (800d188 <tcpip_init+0x80>)
 800d13a:	f00b fb2b 	bl	8018794 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d13e:	4813      	ldr	r0, [pc, #76]	; (800d18c <tcpip_init+0x84>)
 800d140:	f00b f86a 	bl	8018218 <sys_mutex_new>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d006      	beq.n	800d158 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d14a:	4b0d      	ldr	r3, [pc, #52]	; (800d180 <tcpip_init+0x78>)
 800d14c:	f240 2265 	movw	r2, #613	; 0x265
 800d150:	490f      	ldr	r1, [pc, #60]	; (800d190 <tcpip_init+0x88>)
 800d152:	480d      	ldr	r0, [pc, #52]	; (800d188 <tcpip_init+0x80>)
 800d154:	f00b fb1e 	bl	8018794 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d158:	2300      	movs	r3, #0
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d160:	2200      	movs	r2, #0
 800d162:	490c      	ldr	r1, [pc, #48]	; (800d194 <tcpip_init+0x8c>)
 800d164:	480c      	ldr	r0, [pc, #48]	; (800d198 <tcpip_init+0x90>)
 800d166:	f00b f88f 	bl	8018288 <sys_thread_new>
}
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000a164 	.word	0x2000a164
 800d178:	2000a168 	.word	0x2000a168
 800d17c:	2000a16c 	.word	0x2000a16c
 800d180:	0801a458 	.word	0x0801a458
 800d184:	0801a4e0 	.word	0x0801a4e0
 800d188:	0801a4a8 	.word	0x0801a4a8
 800d18c:	2000a170 	.word	0x2000a170
 800d190:	0801a504 	.word	0x0801a504
 800d194:	0800ce99 	.word	0x0800ce99
 800d198:	0801a528 	.word	0x0801a528

0800d19c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d1a6:	88fb      	ldrh	r3, [r7, #6]
 800d1a8:	021b      	lsls	r3, r3, #8
 800d1aa:	b21a      	sxth	r2, r3
 800d1ac:	88fb      	ldrh	r3, [r7, #6]
 800d1ae:	0a1b      	lsrs	r3, r3, #8
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	b21b      	sxth	r3, r3
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	b21b      	sxth	r3, r3
 800d1b8:	b29b      	uxth	r3, r3
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b083      	sub	sp, #12
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	061a      	lsls	r2, r3, #24
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	021b      	lsls	r3, r3, #8
 800d1d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	0a1b      	lsrs	r3, r3, #8
 800d1e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	0e1b      	lsrs	r3, r3, #24
 800d1ea:	4313      	orrs	r3, r2
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d202:	f00a fffb 	bl	80181fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d206:	f000 f8d5 	bl	800d3b4 <mem_init>
  memp_init();
 800d20a:	f000 fc31 	bl	800da70 <memp_init>
  pbuf_init();
  netif_init();
 800d20e:	f000 fcf7 	bl	800dc00 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d212:	f007 feeb 	bl	8014fec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d216:	f001 fdb3 	bl	800ed80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d21a:	f007 fe2d 	bl	8014e78 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d21e:	bf00      	nop
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d232:	4b05      	ldr	r3, [pc, #20]	; (800d248 <ptr_to_mem+0x20>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	4413      	add	r3, r2
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	2000a7e0 	.word	0x2000a7e0

0800d24c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d254:	4b05      	ldr	r3, [pc, #20]	; (800d26c <mem_to_ptr+0x20>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	b29b      	uxth	r3, r3
}
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	2000a7e0 	.word	0x2000a7e0

0800d270 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d270:	b590      	push	{r4, r7, lr}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d278:	4b45      	ldr	r3, [pc, #276]	; (800d390 <plug_holes+0x120>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d206      	bcs.n	800d290 <plug_holes+0x20>
 800d282:	4b44      	ldr	r3, [pc, #272]	; (800d394 <plug_holes+0x124>)
 800d284:	f240 12df 	movw	r2, #479	; 0x1df
 800d288:	4943      	ldr	r1, [pc, #268]	; (800d398 <plug_holes+0x128>)
 800d28a:	4844      	ldr	r0, [pc, #272]	; (800d39c <plug_holes+0x12c>)
 800d28c:	f00b fa82 	bl	8018794 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d290:	4b43      	ldr	r3, [pc, #268]	; (800d3a0 <plug_holes+0x130>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d306      	bcc.n	800d2a8 <plug_holes+0x38>
 800d29a:	4b3e      	ldr	r3, [pc, #248]	; (800d394 <plug_holes+0x124>)
 800d29c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d2a0:	4940      	ldr	r1, [pc, #256]	; (800d3a4 <plug_holes+0x134>)
 800d2a2:	483e      	ldr	r0, [pc, #248]	; (800d39c <plug_holes+0x12c>)
 800d2a4:	f00b fa76 	bl	8018794 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	791b      	ldrb	r3, [r3, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d006      	beq.n	800d2be <plug_holes+0x4e>
 800d2b0:	4b38      	ldr	r3, [pc, #224]	; (800d394 <plug_holes+0x124>)
 800d2b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d2b6:	493c      	ldr	r1, [pc, #240]	; (800d3a8 <plug_holes+0x138>)
 800d2b8:	4838      	ldr	r0, [pc, #224]	; (800d39c <plug_holes+0x12c>)
 800d2ba:	f00b fa6b 	bl	8018794 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2c6:	d906      	bls.n	800d2d6 <plug_holes+0x66>
 800d2c8:	4b32      	ldr	r3, [pc, #200]	; (800d394 <plug_holes+0x124>)
 800d2ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d2ce:	4937      	ldr	r1, [pc, #220]	; (800d3ac <plug_holes+0x13c>)
 800d2d0:	4832      	ldr	r0, [pc, #200]	; (800d39c <plug_holes+0x12c>)
 800d2d2:	f00b fa5f 	bl	8018794 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff ffa4 	bl	800d228 <ptr_to_mem>
 800d2e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d024      	beq.n	800d334 <plug_holes+0xc4>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	791b      	ldrb	r3, [r3, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d120      	bne.n	800d334 <plug_holes+0xc4>
 800d2f2:	4b2b      	ldr	r3, [pc, #172]	; (800d3a0 <plug_holes+0x130>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d01b      	beq.n	800d334 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d2fc:	4b2c      	ldr	r3, [pc, #176]	; (800d3b0 <plug_holes+0x140>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	429a      	cmp	r2, r3
 800d304:	d102      	bne.n	800d30c <plug_holes+0x9c>
      lfree = mem;
 800d306:	4a2a      	ldr	r2, [pc, #168]	; (800d3b0 <plug_holes+0x140>)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	881a      	ldrh	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d31c:	d00a      	beq.n	800d334 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff ff80 	bl	800d228 <ptr_to_mem>
 800d328:	4604      	mov	r4, r0
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff ff8e 	bl	800d24c <mem_to_ptr>
 800d330:	4603      	mov	r3, r0
 800d332:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	885b      	ldrh	r3, [r3, #2]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff ff75 	bl	800d228 <ptr_to_mem>
 800d33e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	429a      	cmp	r2, r3
 800d346:	d01f      	beq.n	800d388 <plug_holes+0x118>
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	791b      	ldrb	r3, [r3, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d11b      	bne.n	800d388 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d350:	4b17      	ldr	r3, [pc, #92]	; (800d3b0 <plug_holes+0x140>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	429a      	cmp	r2, r3
 800d358:	d102      	bne.n	800d360 <plug_holes+0xf0>
      lfree = pmem;
 800d35a:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <plug_holes+0x140>)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	881a      	ldrh	r2, [r3, #0]
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d370:	d00a      	beq.n	800d388 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff ff56 	bl	800d228 <ptr_to_mem>
 800d37c:	4604      	mov	r4, r0
 800d37e:	68b8      	ldr	r0, [r7, #8]
 800d380:	f7ff ff64 	bl	800d24c <mem_to_ptr>
 800d384:	4603      	mov	r3, r0
 800d386:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d388:	bf00      	nop
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd90      	pop	{r4, r7, pc}
 800d390:	2000a7e0 	.word	0x2000a7e0
 800d394:	0801a538 	.word	0x0801a538
 800d398:	0801a568 	.word	0x0801a568
 800d39c:	0801a580 	.word	0x0801a580
 800d3a0:	2000a7e4 	.word	0x2000a7e4
 800d3a4:	0801a5a8 	.word	0x0801a5a8
 800d3a8:	0801a5c4 	.word	0x0801a5c4
 800d3ac:	0801a5e0 	.word	0x0801a5e0
 800d3b0:	2000a7ec 	.word	0x2000a7ec

0800d3b4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <mem_init+0x84>)
 800d3bc:	3303      	adds	r3, #3
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4b1d      	ldr	r3, [pc, #116]	; (800d43c <mem_init+0x88>)
 800d3c6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d3c8:	4b1c      	ldr	r3, [pc, #112]	; (800d43c <mem_init+0x88>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d3d4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d3e2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d3e6:	f7ff ff1f 	bl	800d228 <ptr_to_mem>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	4a14      	ldr	r2, [pc, #80]	; (800d440 <mem_init+0x8c>)
 800d3ee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d3f0:	4b13      	ldr	r3, [pc, #76]	; (800d440 <mem_init+0x8c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d3f8:	4b11      	ldr	r3, [pc, #68]	; (800d440 <mem_init+0x8c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d400:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d402:	4b0f      	ldr	r3, [pc, #60]	; (800d440 <mem_init+0x8c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d40a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d40c:	4b0b      	ldr	r3, [pc, #44]	; (800d43c <mem_init+0x88>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a0c      	ldr	r2, [pc, #48]	; (800d444 <mem_init+0x90>)
 800d412:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d414:	480c      	ldr	r0, [pc, #48]	; (800d448 <mem_init+0x94>)
 800d416:	f00a feff 	bl	8018218 <sys_mutex_new>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d006      	beq.n	800d42e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d420:	4b0a      	ldr	r3, [pc, #40]	; (800d44c <mem_init+0x98>)
 800d422:	f240 221f 	movw	r2, #543	; 0x21f
 800d426:	490a      	ldr	r1, [pc, #40]	; (800d450 <mem_init+0x9c>)
 800d428:	480a      	ldr	r0, [pc, #40]	; (800d454 <mem_init+0xa0>)
 800d42a:	f00b f9b3 	bl	8018794 <iprintf>
  }
}
 800d42e:	bf00      	nop
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	2000a18c 	.word	0x2000a18c
 800d43c:	2000a7e0 	.word	0x2000a7e0
 800d440:	2000a7e4 	.word	0x2000a7e4
 800d444:	2000a7ec 	.word	0x2000a7ec
 800d448:	2000a7e8 	.word	0x2000a7e8
 800d44c:	0801a538 	.word	0x0801a538
 800d450:	0801a60c 	.word	0x0801a60c
 800d454:	0801a580 	.word	0x0801a580

0800d458 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff fef3 	bl	800d24c <mem_to_ptr>
 800d466:	4603      	mov	r3, r0
 800d468:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff feda 	bl	800d228 <ptr_to_mem>
 800d474:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	885b      	ldrh	r3, [r3, #2]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff fed4 	bl	800d228 <ptr_to_mem>
 800d480:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d48a:	d818      	bhi.n	800d4be <mem_link_valid+0x66>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	885b      	ldrh	r3, [r3, #2]
 800d490:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d494:	d813      	bhi.n	800d4be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d49a:	8afa      	ldrh	r2, [r7, #22]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d004      	beq.n	800d4aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	881b      	ldrh	r3, [r3, #0]
 800d4a4:	8afa      	ldrh	r2, [r7, #22]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d109      	bne.n	800d4be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4aa:	4b08      	ldr	r3, [pc, #32]	; (800d4cc <mem_link_valid+0x74>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d006      	beq.n	800d4c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	885b      	ldrh	r3, [r3, #2]
 800d4b8:	8afa      	ldrh	r2, [r7, #22]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d001      	beq.n	800d4c2 <mem_link_valid+0x6a>
    return 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e000      	b.n	800d4c4 <mem_link_valid+0x6c>
  }
  return 1;
 800d4c2:	2301      	movs	r3, #1
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	2000a7e4 	.word	0x2000a7e4

0800d4d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d070      	beq.n	800d5c0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f003 0303 	and.w	r3, r3, #3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00d      	beq.n	800d504 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d4e8:	4b37      	ldr	r3, [pc, #220]	; (800d5c8 <mem_free+0xf8>)
 800d4ea:	f240 2273 	movw	r2, #627	; 0x273
 800d4ee:	4937      	ldr	r1, [pc, #220]	; (800d5cc <mem_free+0xfc>)
 800d4f0:	4837      	ldr	r0, [pc, #220]	; (800d5d0 <mem_free+0x100>)
 800d4f2:	f00b f94f 	bl	8018794 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4f6:	f00a feed 	bl	80182d4 <sys_arch_protect>
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f00a fef7 	bl	80182f0 <sys_arch_unprotect>
    return;
 800d502:	e05e      	b.n	800d5c2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	3b08      	subs	r3, #8
 800d508:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d50a:	4b32      	ldr	r3, [pc, #200]	; (800d5d4 <mem_free+0x104>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	69fa      	ldr	r2, [r7, #28]
 800d510:	429a      	cmp	r2, r3
 800d512:	d306      	bcc.n	800d522 <mem_free+0x52>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f103 020c 	add.w	r2, r3, #12
 800d51a:	4b2f      	ldr	r3, [pc, #188]	; (800d5d8 <mem_free+0x108>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d90d      	bls.n	800d53e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d522:	4b29      	ldr	r3, [pc, #164]	; (800d5c8 <mem_free+0xf8>)
 800d524:	f240 227f 	movw	r2, #639	; 0x27f
 800d528:	492c      	ldr	r1, [pc, #176]	; (800d5dc <mem_free+0x10c>)
 800d52a:	4829      	ldr	r0, [pc, #164]	; (800d5d0 <mem_free+0x100>)
 800d52c:	f00b f932 	bl	8018794 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d530:	f00a fed0 	bl	80182d4 <sys_arch_protect>
 800d534:	6138      	str	r0, [r7, #16]
 800d536:	6938      	ldr	r0, [r7, #16]
 800d538:	f00a feda 	bl	80182f0 <sys_arch_unprotect>
    return;
 800d53c:	e041      	b.n	800d5c2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d53e:	4828      	ldr	r0, [pc, #160]	; (800d5e0 <mem_free+0x110>)
 800d540:	f00a fe86 	bl	8018250 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	791b      	ldrb	r3, [r3, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d110      	bne.n	800d56e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d54c:	4b1e      	ldr	r3, [pc, #120]	; (800d5c8 <mem_free+0xf8>)
 800d54e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d552:	4924      	ldr	r1, [pc, #144]	; (800d5e4 <mem_free+0x114>)
 800d554:	481e      	ldr	r0, [pc, #120]	; (800d5d0 <mem_free+0x100>)
 800d556:	f00b f91d 	bl	8018794 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d55a:	4821      	ldr	r0, [pc, #132]	; (800d5e0 <mem_free+0x110>)
 800d55c:	f00a fe87 	bl	801826e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d560:	f00a feb8 	bl	80182d4 <sys_arch_protect>
 800d564:	6178      	str	r0, [r7, #20]
 800d566:	6978      	ldr	r0, [r7, #20]
 800d568:	f00a fec2 	bl	80182f0 <sys_arch_unprotect>
    return;
 800d56c:	e029      	b.n	800d5c2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d56e:	69f8      	ldr	r0, [r7, #28]
 800d570:	f7ff ff72 	bl	800d458 <mem_link_valid>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d110      	bne.n	800d59c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <mem_free+0xf8>)
 800d57c:	f240 2295 	movw	r2, #661	; 0x295
 800d580:	4919      	ldr	r1, [pc, #100]	; (800d5e8 <mem_free+0x118>)
 800d582:	4813      	ldr	r0, [pc, #76]	; (800d5d0 <mem_free+0x100>)
 800d584:	f00b f906 	bl	8018794 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d588:	4815      	ldr	r0, [pc, #84]	; (800d5e0 <mem_free+0x110>)
 800d58a:	f00a fe70 	bl	801826e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d58e:	f00a fea1 	bl	80182d4 <sys_arch_protect>
 800d592:	61b8      	str	r0, [r7, #24]
 800d594:	69b8      	ldr	r0, [r7, #24]
 800d596:	f00a feab 	bl	80182f0 <sys_arch_unprotect>
    return;
 800d59a:	e012      	b.n	800d5c2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d5a2:	4b12      	ldr	r3, [pc, #72]	; (800d5ec <mem_free+0x11c>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	69fa      	ldr	r2, [r7, #28]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d202      	bcs.n	800d5b2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d5ac:	4a0f      	ldr	r2, [pc, #60]	; (800d5ec <mem_free+0x11c>)
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d5b2:	69f8      	ldr	r0, [r7, #28]
 800d5b4:	f7ff fe5c 	bl	800d270 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d5b8:	4809      	ldr	r0, [pc, #36]	; (800d5e0 <mem_free+0x110>)
 800d5ba:	f00a fe58 	bl	801826e <sys_mutex_unlock>
 800d5be:	e000      	b.n	800d5c2 <mem_free+0xf2>
    return;
 800d5c0:	bf00      	nop
}
 800d5c2:	3720      	adds	r7, #32
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	0801a538 	.word	0x0801a538
 800d5cc:	0801a628 	.word	0x0801a628
 800d5d0:	0801a580 	.word	0x0801a580
 800d5d4:	2000a7e0 	.word	0x2000a7e0
 800d5d8:	2000a7e4 	.word	0x2000a7e4
 800d5dc:	0801a64c 	.word	0x0801a64c
 800d5e0:	2000a7e8 	.word	0x2000a7e8
 800d5e4:	0801a668 	.word	0x0801a668
 800d5e8:	0801a690 	.word	0x0801a690
 800d5ec:	2000a7ec 	.word	0x2000a7ec

0800d5f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b088      	sub	sp, #32
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d5fc:	887b      	ldrh	r3, [r7, #2]
 800d5fe:	3303      	adds	r3, #3
 800d600:	b29b      	uxth	r3, r3
 800d602:	f023 0303 	bic.w	r3, r3, #3
 800d606:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d608:	8bfb      	ldrh	r3, [r7, #30]
 800d60a:	2b0b      	cmp	r3, #11
 800d60c:	d801      	bhi.n	800d612 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d60e:	230c      	movs	r3, #12
 800d610:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d612:	8bfb      	ldrh	r3, [r7, #30]
 800d614:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d618:	d803      	bhi.n	800d622 <mem_trim+0x32>
 800d61a:	8bfa      	ldrh	r2, [r7, #30]
 800d61c:	887b      	ldrh	r3, [r7, #2]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d201      	bcs.n	800d626 <mem_trim+0x36>
    return NULL;
 800d622:	2300      	movs	r3, #0
 800d624:	e0d8      	b.n	800d7d8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d626:	4b6e      	ldr	r3, [pc, #440]	; (800d7e0 <mem_trim+0x1f0>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d304      	bcc.n	800d63a <mem_trim+0x4a>
 800d630:	4b6c      	ldr	r3, [pc, #432]	; (800d7e4 <mem_trim+0x1f4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d306      	bcc.n	800d648 <mem_trim+0x58>
 800d63a:	4b6b      	ldr	r3, [pc, #428]	; (800d7e8 <mem_trim+0x1f8>)
 800d63c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d640:	496a      	ldr	r1, [pc, #424]	; (800d7ec <mem_trim+0x1fc>)
 800d642:	486b      	ldr	r0, [pc, #428]	; (800d7f0 <mem_trim+0x200>)
 800d644:	f00b f8a6 	bl	8018794 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d648:	4b65      	ldr	r3, [pc, #404]	; (800d7e0 <mem_trim+0x1f0>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d304      	bcc.n	800d65c <mem_trim+0x6c>
 800d652:	4b64      	ldr	r3, [pc, #400]	; (800d7e4 <mem_trim+0x1f4>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d307      	bcc.n	800d66c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d65c:	f00a fe3a 	bl	80182d4 <sys_arch_protect>
 800d660:	60b8      	str	r0, [r7, #8]
 800d662:	68b8      	ldr	r0, [r7, #8]
 800d664:	f00a fe44 	bl	80182f0 <sys_arch_unprotect>
    return rmem;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	e0b5      	b.n	800d7d8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3b08      	subs	r3, #8
 800d670:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d672:	69b8      	ldr	r0, [r7, #24]
 800d674:	f7ff fdea 	bl	800d24c <mem_to_ptr>
 800d678:	4603      	mov	r3, r0
 800d67a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	881a      	ldrh	r2, [r3, #0]
 800d680:	8afb      	ldrh	r3, [r7, #22]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	b29b      	uxth	r3, r3
 800d686:	3b08      	subs	r3, #8
 800d688:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d68a:	8bfa      	ldrh	r2, [r7, #30]
 800d68c:	8abb      	ldrh	r3, [r7, #20]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d906      	bls.n	800d6a0 <mem_trim+0xb0>
 800d692:	4b55      	ldr	r3, [pc, #340]	; (800d7e8 <mem_trim+0x1f8>)
 800d694:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d698:	4956      	ldr	r1, [pc, #344]	; (800d7f4 <mem_trim+0x204>)
 800d69a:	4855      	ldr	r0, [pc, #340]	; (800d7f0 <mem_trim+0x200>)
 800d69c:	f00b f87a 	bl	8018794 <iprintf>
  if (newsize > size) {
 800d6a0:	8bfa      	ldrh	r2, [r7, #30]
 800d6a2:	8abb      	ldrh	r3, [r7, #20]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d901      	bls.n	800d6ac <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e095      	b.n	800d7d8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d6ac:	8bfa      	ldrh	r2, [r7, #30]
 800d6ae:	8abb      	ldrh	r3, [r7, #20]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d101      	bne.n	800d6b8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	e08f      	b.n	800d7d8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d6b8:	484f      	ldr	r0, [pc, #316]	; (800d7f8 <mem_trim+0x208>)
 800d6ba:	f00a fdc9 	bl	8018250 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7ff fdb0 	bl	800d228 <ptr_to_mem>
 800d6c8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	791b      	ldrb	r3, [r3, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d13f      	bne.n	800d752 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6da:	d106      	bne.n	800d6ea <mem_trim+0xfa>
 800d6dc:	4b42      	ldr	r3, [pc, #264]	; (800d7e8 <mem_trim+0x1f8>)
 800d6de:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d6e2:	4946      	ldr	r1, [pc, #280]	; (800d7fc <mem_trim+0x20c>)
 800d6e4:	4842      	ldr	r0, [pc, #264]	; (800d7f0 <mem_trim+0x200>)
 800d6e6:	f00b f855 	bl	8018794 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d6f0:	8afa      	ldrh	r2, [r7, #22]
 800d6f2:	8bfb      	ldrh	r3, [r7, #30]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d6fc:	4b40      	ldr	r3, [pc, #256]	; (800d800 <mem_trim+0x210>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	429a      	cmp	r2, r3
 800d704:	d106      	bne.n	800d714 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d706:	89fb      	ldrh	r3, [r7, #14]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fd8d 	bl	800d228 <ptr_to_mem>
 800d70e:	4603      	mov	r3, r0
 800d710:	4a3b      	ldr	r2, [pc, #236]	; (800d800 <mem_trim+0x210>)
 800d712:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d714:	89fb      	ldrh	r3, [r7, #14]
 800d716:	4618      	mov	r0, r3
 800d718:	f7ff fd86 	bl	800d228 <ptr_to_mem>
 800d71c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2200      	movs	r2, #0
 800d722:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	89ba      	ldrh	r2, [r7, #12]
 800d728:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	8afa      	ldrh	r2, [r7, #22]
 800d72e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	89fa      	ldrh	r2, [r7, #14]
 800d734:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d73e:	d047      	beq.n	800d7d0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	4618      	mov	r0, r3
 800d746:	f7ff fd6f 	bl	800d228 <ptr_to_mem>
 800d74a:	4602      	mov	r2, r0
 800d74c:	89fb      	ldrh	r3, [r7, #14]
 800d74e:	8053      	strh	r3, [r2, #2]
 800d750:	e03e      	b.n	800d7d0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d752:	8bfb      	ldrh	r3, [r7, #30]
 800d754:	f103 0214 	add.w	r2, r3, #20
 800d758:	8abb      	ldrh	r3, [r7, #20]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d838      	bhi.n	800d7d0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d75e:	8afa      	ldrh	r2, [r7, #22]
 800d760:	8bfb      	ldrh	r3, [r7, #30]
 800d762:	4413      	add	r3, r2
 800d764:	b29b      	uxth	r3, r3
 800d766:	3308      	adds	r3, #8
 800d768:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d772:	d106      	bne.n	800d782 <mem_trim+0x192>
 800d774:	4b1c      	ldr	r3, [pc, #112]	; (800d7e8 <mem_trim+0x1f8>)
 800d776:	f240 3216 	movw	r2, #790	; 0x316
 800d77a:	4920      	ldr	r1, [pc, #128]	; (800d7fc <mem_trim+0x20c>)
 800d77c:	481c      	ldr	r0, [pc, #112]	; (800d7f0 <mem_trim+0x200>)
 800d77e:	f00b f809 	bl	8018794 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d782:	89fb      	ldrh	r3, [r7, #14]
 800d784:	4618      	mov	r0, r3
 800d786:	f7ff fd4f 	bl	800d228 <ptr_to_mem>
 800d78a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d78c:	4b1c      	ldr	r3, [pc, #112]	; (800d800 <mem_trim+0x210>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	429a      	cmp	r2, r3
 800d794:	d202      	bcs.n	800d79c <mem_trim+0x1ac>
      lfree = mem2;
 800d796:	4a1a      	ldr	r2, [pc, #104]	; (800d800 <mem_trim+0x210>)
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	881a      	ldrh	r2, [r3, #0]
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	8afa      	ldrh	r2, [r7, #22]
 800d7ae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	89fa      	ldrh	r2, [r7, #14]
 800d7b4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7be:	d007      	beq.n	800d7d0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff fd2f 	bl	800d228 <ptr_to_mem>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	89fb      	ldrh	r3, [r7, #14]
 800d7ce:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d7d0:	4809      	ldr	r0, [pc, #36]	; (800d7f8 <mem_trim+0x208>)
 800d7d2:	f00a fd4c 	bl	801826e <sys_mutex_unlock>
  return rmem;
 800d7d6:	687b      	ldr	r3, [r7, #4]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3720      	adds	r7, #32
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	2000a7e0 	.word	0x2000a7e0
 800d7e4:	2000a7e4 	.word	0x2000a7e4
 800d7e8:	0801a538 	.word	0x0801a538
 800d7ec:	0801a6c4 	.word	0x0801a6c4
 800d7f0:	0801a580 	.word	0x0801a580
 800d7f4:	0801a6dc 	.word	0x0801a6dc
 800d7f8:	2000a7e8 	.word	0x2000a7e8
 800d7fc:	0801a6fc 	.word	0x0801a6fc
 800d800:	2000a7ec 	.word	0x2000a7ec

0800d804 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d80e:	88fb      	ldrh	r3, [r7, #6]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <mem_malloc+0x14>
    return NULL;
 800d814:	2300      	movs	r3, #0
 800d816:	e0e2      	b.n	800d9de <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d818:	88fb      	ldrh	r3, [r7, #6]
 800d81a:	3303      	adds	r3, #3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	f023 0303 	bic.w	r3, r3, #3
 800d822:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d824:	8bbb      	ldrh	r3, [r7, #28]
 800d826:	2b0b      	cmp	r3, #11
 800d828:	d801      	bhi.n	800d82e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d82a:	230c      	movs	r3, #12
 800d82c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d82e:	8bbb      	ldrh	r3, [r7, #28]
 800d830:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d834:	d803      	bhi.n	800d83e <mem_malloc+0x3a>
 800d836:	8bba      	ldrh	r2, [r7, #28]
 800d838:	88fb      	ldrh	r3, [r7, #6]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d201      	bcs.n	800d842 <mem_malloc+0x3e>
    return NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	e0cd      	b.n	800d9de <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d842:	4869      	ldr	r0, [pc, #420]	; (800d9e8 <mem_malloc+0x1e4>)
 800d844:	f00a fd04 	bl	8018250 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d848:	4b68      	ldr	r3, [pc, #416]	; (800d9ec <mem_malloc+0x1e8>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fcfd 	bl	800d24c <mem_to_ptr>
 800d852:	4603      	mov	r3, r0
 800d854:	83fb      	strh	r3, [r7, #30]
 800d856:	e0b7      	b.n	800d9c8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d858:	8bfb      	ldrh	r3, [r7, #30]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff fce4 	bl	800d228 <ptr_to_mem>
 800d860:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	791b      	ldrb	r3, [r3, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	f040 80a7 	bne.w	800d9ba <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	461a      	mov	r2, r3
 800d872:	8bfb      	ldrh	r3, [r7, #30]
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	f1a3 0208 	sub.w	r2, r3, #8
 800d87a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d87c:	429a      	cmp	r2, r3
 800d87e:	f0c0 809c 	bcc.w	800d9ba <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	461a      	mov	r2, r3
 800d888:	8bfb      	ldrh	r3, [r7, #30]
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	f1a3 0208 	sub.w	r2, r3, #8
 800d890:	8bbb      	ldrh	r3, [r7, #28]
 800d892:	3314      	adds	r3, #20
 800d894:	429a      	cmp	r2, r3
 800d896:	d333      	bcc.n	800d900 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d898:	8bfa      	ldrh	r2, [r7, #30]
 800d89a:	8bbb      	ldrh	r3, [r7, #28]
 800d89c:	4413      	add	r3, r2
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	3308      	adds	r3, #8
 800d8a2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8aa:	d106      	bne.n	800d8ba <mem_malloc+0xb6>
 800d8ac:	4b50      	ldr	r3, [pc, #320]	; (800d9f0 <mem_malloc+0x1ec>)
 800d8ae:	f240 3287 	movw	r2, #903	; 0x387
 800d8b2:	4950      	ldr	r1, [pc, #320]	; (800d9f4 <mem_malloc+0x1f0>)
 800d8b4:	4850      	ldr	r0, [pc, #320]	; (800d9f8 <mem_malloc+0x1f4>)
 800d8b6:	f00a ff6d 	bl	8018794 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d8ba:	8a7b      	ldrh	r3, [r7, #18]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fcb3 	bl	800d228 <ptr_to_mem>
 800d8c2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	881a      	ldrh	r2, [r3, #0]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	8bfa      	ldrh	r2, [r7, #30]
 800d8d6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	8a7a      	ldrh	r2, [r7, #18]
 800d8dc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8ec:	d00b      	beq.n	800d906 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff fc98 	bl	800d228 <ptr_to_mem>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	8a7b      	ldrh	r3, [r7, #18]
 800d8fc:	8053      	strh	r3, [r2, #2]
 800d8fe:	e002      	b.n	800d906 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	2201      	movs	r2, #1
 800d904:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d906:	4b39      	ldr	r3, [pc, #228]	; (800d9ec <mem_malloc+0x1e8>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d127      	bne.n	800d960 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d910:	4b36      	ldr	r3, [pc, #216]	; (800d9ec <mem_malloc+0x1e8>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d916:	e005      	b.n	800d924 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7ff fc83 	bl	800d228 <ptr_to_mem>
 800d922:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	791b      	ldrb	r3, [r3, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d004      	beq.n	800d936 <mem_malloc+0x132>
 800d92c:	4b33      	ldr	r3, [pc, #204]	; (800d9fc <mem_malloc+0x1f8>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	69ba      	ldr	r2, [r7, #24]
 800d932:	429a      	cmp	r2, r3
 800d934:	d1f0      	bne.n	800d918 <mem_malloc+0x114>
          }
          lfree = cur;
 800d936:	4a2d      	ldr	r2, [pc, #180]	; (800d9ec <mem_malloc+0x1e8>)
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d93c:	4b2b      	ldr	r3, [pc, #172]	; (800d9ec <mem_malloc+0x1e8>)
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	4b2e      	ldr	r3, [pc, #184]	; (800d9fc <mem_malloc+0x1f8>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	429a      	cmp	r2, r3
 800d946:	d00b      	beq.n	800d960 <mem_malloc+0x15c>
 800d948:	4b28      	ldr	r3, [pc, #160]	; (800d9ec <mem_malloc+0x1e8>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	791b      	ldrb	r3, [r3, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d006      	beq.n	800d960 <mem_malloc+0x15c>
 800d952:	4b27      	ldr	r3, [pc, #156]	; (800d9f0 <mem_malloc+0x1ec>)
 800d954:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d958:	4929      	ldr	r1, [pc, #164]	; (800da00 <mem_malloc+0x1fc>)
 800d95a:	4827      	ldr	r0, [pc, #156]	; (800d9f8 <mem_malloc+0x1f4>)
 800d95c:	f00a ff1a 	bl	8018794 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d960:	4821      	ldr	r0, [pc, #132]	; (800d9e8 <mem_malloc+0x1e4>)
 800d962:	f00a fc84 	bl	801826e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d966:	8bba      	ldrh	r2, [r7, #28]
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	4413      	add	r3, r2
 800d96c:	3308      	adds	r3, #8
 800d96e:	4a23      	ldr	r2, [pc, #140]	; (800d9fc <mem_malloc+0x1f8>)
 800d970:	6812      	ldr	r2, [r2, #0]
 800d972:	4293      	cmp	r3, r2
 800d974:	d906      	bls.n	800d984 <mem_malloc+0x180>
 800d976:	4b1e      	ldr	r3, [pc, #120]	; (800d9f0 <mem_malloc+0x1ec>)
 800d978:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d97c:	4921      	ldr	r1, [pc, #132]	; (800da04 <mem_malloc+0x200>)
 800d97e:	481e      	ldr	r0, [pc, #120]	; (800d9f8 <mem_malloc+0x1f4>)
 800d980:	f00a ff08 	bl	8018794 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f003 0303 	and.w	r3, r3, #3
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d006      	beq.n	800d99c <mem_malloc+0x198>
 800d98e:	4b18      	ldr	r3, [pc, #96]	; (800d9f0 <mem_malloc+0x1ec>)
 800d990:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d994:	491c      	ldr	r1, [pc, #112]	; (800da08 <mem_malloc+0x204>)
 800d996:	4818      	ldr	r0, [pc, #96]	; (800d9f8 <mem_malloc+0x1f4>)
 800d998:	f00a fefc 	bl	8018794 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	f003 0303 	and.w	r3, r3, #3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d006      	beq.n	800d9b4 <mem_malloc+0x1b0>
 800d9a6:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <mem_malloc+0x1ec>)
 800d9a8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d9ac:	4917      	ldr	r1, [pc, #92]	; (800da0c <mem_malloc+0x208>)
 800d9ae:	4812      	ldr	r0, [pc, #72]	; (800d9f8 <mem_malloc+0x1f4>)
 800d9b0:	f00a fef0 	bl	8018794 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	e011      	b.n	800d9de <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d9ba:	8bfb      	ldrh	r3, [r7, #30]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fc33 	bl	800d228 <ptr_to_mem>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d9c8:	8bfa      	ldrh	r2, [r7, #30]
 800d9ca:	8bbb      	ldrh	r3, [r7, #28]
 800d9cc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	f4ff af41 	bcc.w	800d858 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d9d6:	4804      	ldr	r0, [pc, #16]	; (800d9e8 <mem_malloc+0x1e4>)
 800d9d8:	f00a fc49 	bl	801826e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3720      	adds	r7, #32
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	2000a7e8 	.word	0x2000a7e8
 800d9ec:	2000a7ec 	.word	0x2000a7ec
 800d9f0:	0801a538 	.word	0x0801a538
 800d9f4:	0801a6fc 	.word	0x0801a6fc
 800d9f8:	0801a580 	.word	0x0801a580
 800d9fc:	2000a7e4 	.word	0x2000a7e4
 800da00:	0801a710 	.word	0x0801a710
 800da04:	0801a72c 	.word	0x0801a72c
 800da08:	0801a75c 	.word	0x0801a75c
 800da0c:	0801a78c 	.word	0x0801a78c

0800da10 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	2200      	movs	r2, #0
 800da1e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	3303      	adds	r3, #3
 800da26:	f023 0303 	bic.w	r3, r3, #3
 800da2a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	e011      	b.n	800da56 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	461a      	mov	r2, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	4413      	add	r3, r2
 800da4e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	3301      	adds	r3, #1
 800da54:	60fb      	str	r3, [r7, #12]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	885b      	ldrh	r3, [r3, #2]
 800da5a:	461a      	mov	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4293      	cmp	r3, r2
 800da60:	dbe7      	blt.n	800da32 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800da62:	bf00      	nop
 800da64:	bf00      	nop
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da76:	2300      	movs	r3, #0
 800da78:	80fb      	strh	r3, [r7, #6]
 800da7a:	e009      	b.n	800da90 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800da7c:	88fb      	ldrh	r3, [r7, #6]
 800da7e:	4a08      	ldr	r2, [pc, #32]	; (800daa0 <memp_init+0x30>)
 800da80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da84:	4618      	mov	r0, r3
 800da86:	f7ff ffc3 	bl	800da10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da8a:	88fb      	ldrh	r3, [r7, #6]
 800da8c:	3301      	adds	r3, #1
 800da8e:	80fb      	strh	r3, [r7, #6]
 800da90:	88fb      	ldrh	r3, [r7, #6]
 800da92:	2b0c      	cmp	r3, #12
 800da94:	d9f2      	bls.n	800da7c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800da96:	bf00      	nop
 800da98:	bf00      	nop
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	0801cfa0 	.word	0x0801cfa0

0800daa4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800daac:	f00a fc12 	bl	80182d4 <sys_arch_protect>
 800dab0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d015      	beq.n	800daec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	6812      	ldr	r2, [r2, #0]
 800dac8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f003 0303 	and.w	r3, r3, #3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d006      	beq.n	800dae2 <do_memp_malloc_pool+0x3e>
 800dad4:	4b09      	ldr	r3, [pc, #36]	; (800dafc <do_memp_malloc_pool+0x58>)
 800dad6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800dada:	4909      	ldr	r1, [pc, #36]	; (800db00 <do_memp_malloc_pool+0x5c>)
 800dadc:	4809      	ldr	r0, [pc, #36]	; (800db04 <do_memp_malloc_pool+0x60>)
 800dade:	f00a fe59 	bl	8018794 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f00a fc04 	bl	80182f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	e003      	b.n	800daf4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f00a fbff 	bl	80182f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	0801a7b0 	.word	0x0801a7b0
 800db00:	0801a7e0 	.word	0x0801a7e0
 800db04:	0801a804 	.word	0x0801a804

0800db08 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	4603      	mov	r3, r0
 800db10:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	2b0c      	cmp	r3, #12
 800db16:	d908      	bls.n	800db2a <memp_malloc+0x22>
 800db18:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <memp_malloc+0x3c>)
 800db1a:	f240 1257 	movw	r2, #343	; 0x157
 800db1e:	490a      	ldr	r1, [pc, #40]	; (800db48 <memp_malloc+0x40>)
 800db20:	480a      	ldr	r0, [pc, #40]	; (800db4c <memp_malloc+0x44>)
 800db22:	f00a fe37 	bl	8018794 <iprintf>
 800db26:	2300      	movs	r3, #0
 800db28:	e008      	b.n	800db3c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	4a08      	ldr	r2, [pc, #32]	; (800db50 <memp_malloc+0x48>)
 800db2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff ffb6 	bl	800daa4 <do_memp_malloc_pool>
 800db38:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800db3a:	68fb      	ldr	r3, [r7, #12]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	0801a7b0 	.word	0x0801a7b0
 800db48:	0801a840 	.word	0x0801a840
 800db4c:	0801a804 	.word	0x0801a804
 800db50:	0801cfa0 	.word	0x0801cfa0

0800db54 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	f003 0303 	and.w	r3, r3, #3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d006      	beq.n	800db76 <do_memp_free_pool+0x22>
 800db68:	4b0d      	ldr	r3, [pc, #52]	; (800dba0 <do_memp_free_pool+0x4c>)
 800db6a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800db6e:	490d      	ldr	r1, [pc, #52]	; (800dba4 <do_memp_free_pool+0x50>)
 800db70:	480d      	ldr	r0, [pc, #52]	; (800dba8 <do_memp_free_pool+0x54>)
 800db72:	f00a fe0f 	bl	8018794 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800db7a:	f00a fbab 	bl	80182d4 <sys_arch_protect>
 800db7e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800db92:	68b8      	ldr	r0, [r7, #8]
 800db94:	f00a fbac 	bl	80182f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800db98:	bf00      	nop
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	0801a7b0 	.word	0x0801a7b0
 800dba4:	0801a860 	.word	0x0801a860
 800dba8:	0801a804 	.word	0x0801a804

0800dbac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	6039      	str	r1, [r7, #0]
 800dbb6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	2b0c      	cmp	r3, #12
 800dbbc:	d907      	bls.n	800dbce <memp_free+0x22>
 800dbbe:	4b0c      	ldr	r3, [pc, #48]	; (800dbf0 <memp_free+0x44>)
 800dbc0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dbc4:	490b      	ldr	r1, [pc, #44]	; (800dbf4 <memp_free+0x48>)
 800dbc6:	480c      	ldr	r0, [pc, #48]	; (800dbf8 <memp_free+0x4c>)
 800dbc8:	f00a fde4 	bl	8018794 <iprintf>
 800dbcc:	e00c      	b.n	800dbe8 <memp_free+0x3c>

  if (mem == NULL) {
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d008      	beq.n	800dbe6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dbd4:	79fb      	ldrb	r3, [r7, #7]
 800dbd6:	4a09      	ldr	r2, [pc, #36]	; (800dbfc <memp_free+0x50>)
 800dbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff ffb8 	bl	800db54 <do_memp_free_pool>
 800dbe4:	e000      	b.n	800dbe8 <memp_free+0x3c>
    return;
 800dbe6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dbe8:	3708      	adds	r7, #8
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	0801a7b0 	.word	0x0801a7b0
 800dbf4:	0801a880 	.word	0x0801a880
 800dbf8:	0801a804 	.word	0x0801a804
 800dbfc:	0801cfa0 	.word	0x0801cfa0

0800dc00 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dc00:	b480      	push	{r7}
 800dc02:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dc04:	bf00      	nop
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
	...

0800dc10 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d108      	bne.n	800dc36 <netif_add+0x26>
 800dc24:	4b57      	ldr	r3, [pc, #348]	; (800dd84 <netif_add+0x174>)
 800dc26:	f240 1227 	movw	r2, #295	; 0x127
 800dc2a:	4957      	ldr	r1, [pc, #348]	; (800dd88 <netif_add+0x178>)
 800dc2c:	4857      	ldr	r0, [pc, #348]	; (800dd8c <netif_add+0x17c>)
 800dc2e:	f00a fdb1 	bl	8018794 <iprintf>
 800dc32:	2300      	movs	r3, #0
 800dc34:	e0a2      	b.n	800dd7c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d108      	bne.n	800dc4e <netif_add+0x3e>
 800dc3c:	4b51      	ldr	r3, [pc, #324]	; (800dd84 <netif_add+0x174>)
 800dc3e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dc42:	4953      	ldr	r1, [pc, #332]	; (800dd90 <netif_add+0x180>)
 800dc44:	4851      	ldr	r0, [pc, #324]	; (800dd8c <netif_add+0x17c>)
 800dc46:	f00a fda5 	bl	8018794 <iprintf>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e096      	b.n	800dd7c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dc54:	4b4f      	ldr	r3, [pc, #316]	; (800dd94 <netif_add+0x184>)
 800dc56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dc5e:	4b4d      	ldr	r3, [pc, #308]	; (800dd94 <netif_add+0x184>)
 800dc60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dc68:	4b4a      	ldr	r3, [pc, #296]	; (800dd94 <netif_add+0x184>)
 800dc6a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	4a45      	ldr	r2, [pc, #276]	; (800dd98 <netif_add+0x188>)
 800dc82:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6a3a      	ldr	r2, [r7, #32]
 800dc9c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dc9e:	4b3f      	ldr	r3, [pc, #252]	; (800dd9c <netif_add+0x18c>)
 800dca0:	781a      	ldrb	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 f913 	bl	800dee0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	4798      	blx	r3
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <netif_add+0xba>
    return NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e058      	b.n	800dd7c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcd0:	2bff      	cmp	r3, #255	; 0xff
 800dcd2:	d103      	bne.n	800dcdc <netif_add+0xcc>
        netif->num = 0;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dce0:	4b2f      	ldr	r3, [pc, #188]	; (800dda0 <netif_add+0x190>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	e02b      	b.n	800dd40 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d106      	bne.n	800dcfe <netif_add+0xee>
 800dcf0:	4b24      	ldr	r3, [pc, #144]	; (800dd84 <netif_add+0x174>)
 800dcf2:	f240 128b 	movw	r2, #395	; 0x18b
 800dcf6:	492b      	ldr	r1, [pc, #172]	; (800dda4 <netif_add+0x194>)
 800dcf8:	4824      	ldr	r0, [pc, #144]	; (800dd8c <netif_add+0x17c>)
 800dcfa:	f00a fd4b 	bl	8018794 <iprintf>
        num_netifs++;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	3301      	adds	r3, #1
 800dd02:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2bff      	cmp	r3, #255	; 0xff
 800dd08:	dd06      	ble.n	800dd18 <netif_add+0x108>
 800dd0a:	4b1e      	ldr	r3, [pc, #120]	; (800dd84 <netif_add+0x174>)
 800dd0c:	f240 128d 	movw	r2, #397	; 0x18d
 800dd10:	4925      	ldr	r1, [pc, #148]	; (800dda8 <netif_add+0x198>)
 800dd12:	481e      	ldr	r0, [pc, #120]	; (800dd8c <netif_add+0x17c>)
 800dd14:	f00a fd3e 	bl	8018794 <iprintf>
        if (netif2->num == netif->num) {
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d108      	bne.n	800dd3a <netif_add+0x12a>
          netif->num++;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd2e:	3301      	adds	r3, #1
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dd38:	e005      	b.n	800dd46 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	617b      	str	r3, [r7, #20]
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1d0      	bne.n	800dce8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1be      	bne.n	800dcca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd52:	2bfe      	cmp	r3, #254	; 0xfe
 800dd54:	d103      	bne.n	800dd5e <netif_add+0x14e>
    netif_num = 0;
 800dd56:	4b11      	ldr	r3, [pc, #68]	; (800dd9c <netif_add+0x18c>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	701a      	strb	r2, [r3, #0]
 800dd5c:	e006      	b.n	800dd6c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd64:	3301      	adds	r3, #1
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <netif_add+0x18c>)
 800dd6a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dd6c:	4b0c      	ldr	r3, [pc, #48]	; (800dda0 <netif_add+0x190>)
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dd74:	4a0a      	ldr	r2, [pc, #40]	; (800dda0 <netif_add+0x190>)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0801a89c 	.word	0x0801a89c
 800dd88:	0801a930 	.word	0x0801a930
 800dd8c:	0801a8ec 	.word	0x0801a8ec
 800dd90:	0801a94c 	.word	0x0801a94c
 800dd94:	0801d014 	.word	0x0801d014
 800dd98:	0800e0f3 	.word	0x0800e0f3
 800dd9c:	2000d8c4 	.word	0x2000d8c4
 800dda0:	2000d8bc 	.word	0x2000d8bc
 800dda4:	0801a970 	.word	0x0801a970
 800dda8:	0801a984 	.word	0x0801a984

0800ddac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ddb6:	6839      	ldr	r1, [r7, #0]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f002 fd31 	bl	8010820 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f007 fdcd 	bl	8015960 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
	...

0800ddd0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d106      	bne.n	800ddf0 <netif_do_set_ipaddr+0x20>
 800dde2:	4b1d      	ldr	r3, [pc, #116]	; (800de58 <netif_do_set_ipaddr+0x88>)
 800dde4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dde8:	491c      	ldr	r1, [pc, #112]	; (800de5c <netif_do_set_ipaddr+0x8c>)
 800ddea:	481d      	ldr	r0, [pc, #116]	; (800de60 <netif_do_set_ipaddr+0x90>)
 800ddec:	f00a fcd2 	bl	8018794 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <netif_do_set_ipaddr+0x34>
 800ddf6:	4b18      	ldr	r3, [pc, #96]	; (800de58 <netif_do_set_ipaddr+0x88>)
 800ddf8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ddfc:	4917      	ldr	r1, [pc, #92]	; (800de5c <netif_do_set_ipaddr+0x8c>)
 800ddfe:	4818      	ldr	r0, [pc, #96]	; (800de60 <netif_do_set_ipaddr+0x90>)
 800de00:	f00a fcc8 	bl	8018794 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3304      	adds	r3, #4
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d01c      	beq.n	800de4c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3304      	adds	r3, #4
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800de22:	f107 0314 	add.w	r3, r7, #20
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7ff ffbf 	bl	800ddac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <netif_do_set_ipaddr+0x6a>
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	e000      	b.n	800de3c <netif_do_set_ipaddr+0x6c>
 800de3a:	2300      	movs	r3, #0
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800de40:	2101      	movs	r1, #1
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f000 f8d2 	bl	800dfec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800de48:	2301      	movs	r3, #1
 800de4a:	e000      	b.n	800de4e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3718      	adds	r7, #24
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	0801a89c 	.word	0x0801a89c
 800de5c:	0801a9b4 	.word	0x0801a9b4
 800de60:	0801a8ec 	.word	0x0801a8ec

0800de64 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3308      	adds	r3, #8
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d00a      	beq.n	800de94 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <netif_do_set_netmask+0x26>
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	e000      	b.n	800de8c <netif_do_set_netmask+0x28>
 800de8a:	2300      	movs	r3, #0
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800de90:	2301      	movs	r3, #1
 800de92:	e000      	b.n	800de96 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3714      	adds	r7, #20
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr

0800dea2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dea2:	b480      	push	{r7}
 800dea4:	b085      	sub	sp, #20
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60f8      	str	r0, [r7, #12]
 800deaa:	60b9      	str	r1, [r7, #8]
 800deac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	330c      	adds	r3, #12
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d00a      	beq.n	800ded2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <netif_do_set_gw+0x26>
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	e000      	b.n	800deca <netif_do_set_gw+0x28>
 800dec8:	2300      	movs	r3, #0
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dece:	2301      	movs	r3, #1
 800ded0:	e000      	b.n	800ded4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d101      	bne.n	800df00 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800defc:	4b1c      	ldr	r3, [pc, #112]	; (800df70 <netif_set_addr+0x90>)
 800defe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800df06:	4b1a      	ldr	r3, [pc, #104]	; (800df70 <netif_set_addr+0x90>)
 800df08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800df10:	4b17      	ldr	r3, [pc, #92]	; (800df70 <netif_set_addr+0x90>)
 800df12:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <netif_set_addr+0x42>
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <netif_set_addr+0x46>
 800df22:	2301      	movs	r3, #1
 800df24:	e000      	b.n	800df28 <netif_set_addr+0x48>
 800df26:	2300      	movs	r3, #0
 800df28:	617b      	str	r3, [r7, #20]
  if (remove) {
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d006      	beq.n	800df3e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	461a      	mov	r2, r3
 800df36:	68b9      	ldr	r1, [r7, #8]
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7ff ff49 	bl	800ddd0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7ff ff8e 	bl	800de64 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800df48:	69ba      	ldr	r2, [r7, #24]
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f7ff ffa8 	bl	800dea2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d106      	bne.n	800df66 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df58:	f107 0310 	add.w	r3, r7, #16
 800df5c:	461a      	mov	r2, r3
 800df5e:	68b9      	ldr	r1, [r7, #8]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7ff ff35 	bl	800ddd0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800df66:	bf00      	nop
 800df68:	3720      	adds	r7, #32
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	0801d014 	.word	0x0801d014

0800df74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800df7c:	4a04      	ldr	r2, [pc, #16]	; (800df90 <netif_set_default+0x1c>)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800df82:	bf00      	nop
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	2000d8c0 	.word	0x2000d8c0

0800df94 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d107      	bne.n	800dfb2 <netif_set_up+0x1e>
 800dfa2:	4b0f      	ldr	r3, [pc, #60]	; (800dfe0 <netif_set_up+0x4c>)
 800dfa4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dfa8:	490e      	ldr	r1, [pc, #56]	; (800dfe4 <netif_set_up+0x50>)
 800dfaa:	480f      	ldr	r0, [pc, #60]	; (800dfe8 <netif_set_up+0x54>)
 800dfac:	f00a fbf2 	bl	8018794 <iprintf>
 800dfb0:	e013      	b.n	800dfda <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfc6:	f043 0301 	orr.w	r3, r3, #1
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dfd2:	2103      	movs	r1, #3
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f809 	bl	800dfec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	0801a89c 	.word	0x0801a89c
 800dfe4:	0801aa24 	.word	0x0801aa24
 800dfe8:	0801a8ec 	.word	0x0801a8ec

0800dfec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d106      	bne.n	800e00c <netif_issue_reports+0x20>
 800dffe:	4b18      	ldr	r3, [pc, #96]	; (800e060 <netif_issue_reports+0x74>)
 800e000:	f240 326d 	movw	r2, #877	; 0x36d
 800e004:	4917      	ldr	r1, [pc, #92]	; (800e064 <netif_issue_reports+0x78>)
 800e006:	4818      	ldr	r0, [pc, #96]	; (800e068 <netif_issue_reports+0x7c>)
 800e008:	f00a fbc4 	bl	8018794 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e012:	f003 0304 	and.w	r3, r3, #4
 800e016:	2b00      	cmp	r3, #0
 800e018:	d01e      	beq.n	800e058 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e020:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e024:	2b00      	cmp	r3, #0
 800e026:	d017      	beq.n	800e058 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	f003 0301 	and.w	r3, r3, #1
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d013      	beq.n	800e05a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	3304      	adds	r3, #4
 800e036:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00e      	beq.n	800e05a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e042:	f003 0308 	and.w	r3, r3, #8
 800e046:	2b00      	cmp	r3, #0
 800e048:	d007      	beq.n	800e05a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3304      	adds	r3, #4
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f008 fbef 	bl	8016834 <etharp_request>
 800e056:	e000      	b.n	800e05a <netif_issue_reports+0x6e>
    return;
 800e058:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	0801a89c 	.word	0x0801a89c
 800e064:	0801aa40 	.word	0x0801aa40
 800e068:	0801a8ec 	.word	0x0801a8ec

0800e06c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d107      	bne.n	800e08a <netif_set_down+0x1e>
 800e07a:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <netif_set_down+0x58>)
 800e07c:	f240 329b 	movw	r2, #923	; 0x39b
 800e080:	4911      	ldr	r1, [pc, #68]	; (800e0c8 <netif_set_down+0x5c>)
 800e082:	4812      	ldr	r0, [pc, #72]	; (800e0cc <netif_set_down+0x60>)
 800e084:	f00a fb86 	bl	8018794 <iprintf>
 800e088:	e019      	b.n	800e0be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	2b00      	cmp	r3, #0
 800e096:	d012      	beq.n	800e0be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e09e:	f023 0301 	bic.w	r3, r3, #1
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0b0:	f003 0308 	and.w	r3, r3, #8
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f007 ff79 	bl	8015fb0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	0801a89c 	.word	0x0801a89c
 800e0c8:	0801aa64 	.word	0x0801aa64
 800e0cc:	0801a8ec 	.word	0x0801a8ec

0800e0d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	683a      	ldr	r2, [r7, #0]
 800e0e4:	61da      	str	r2, [r3, #28]
  }
}
 800e0e6:	bf00      	nop
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e0fe:	f06f 030b 	mvn.w	r3, #11
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
	...

0800e110 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e11a:	79fb      	ldrb	r3, [r7, #7]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d013      	beq.n	800e148 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e120:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <netif_get_by_index+0x48>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	60fb      	str	r3, [r7, #12]
 800e126:	e00c      	b.n	800e142 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e12e:	3301      	adds	r3, #1
 800e130:	b2db      	uxtb	r3, r3
 800e132:	79fa      	ldrb	r2, [r7, #7]
 800e134:	429a      	cmp	r2, r3
 800e136:	d101      	bne.n	800e13c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	e006      	b.n	800e14a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1ef      	bne.n	800e128 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	2000d8bc 	.word	0x2000d8bc

0800e15c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e162:	f00a f8b7 	bl	80182d4 <sys_arch_protect>
 800e166:	6038      	str	r0, [r7, #0]
 800e168:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <pbuf_free_ooseq+0x44>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	6838      	ldr	r0, [r7, #0]
 800e170:	f00a f8be 	bl	80182f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e174:	4b0b      	ldr	r3, [pc, #44]	; (800e1a4 <pbuf_free_ooseq+0x48>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	607b      	str	r3, [r7, #4]
 800e17a:	e00a      	b.n	800e192 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f002 fb89 	bl	801089c <tcp_free_ooseq>
      return;
 800e18a:	e005      	b.n	800e198 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f1      	bne.n	800e17c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	2000d8c5 	.word	0x2000d8c5
 800e1a4:	2000d8d4 	.word	0x2000d8d4

0800e1a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e1b0:	f7ff ffd4 	bl	800e15c <pbuf_free_ooseq>
}
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e1c2:	f00a f887 	bl	80182d4 <sys_arch_protect>
 800e1c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e1c8:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <pbuf_pool_is_empty+0x4c>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e1ce:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <pbuf_pool_is_empty+0x4c>)
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f00a f88b 	bl	80182f0 <sys_arch_unprotect>

  if (!queued) {
 800e1da:	78fb      	ldrb	r3, [r7, #3]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10f      	bne.n	800e200 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	480a      	ldr	r0, [pc, #40]	; (800e20c <pbuf_pool_is_empty+0x50>)
 800e1e4:	f7fe ff3a 	bl	800d05c <tcpip_try_callback>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d008      	beq.n	800e200 <pbuf_pool_is_empty+0x44>
 800e1ee:	f00a f871 	bl	80182d4 <sys_arch_protect>
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <pbuf_pool_is_empty+0x4c>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f00a f878 	bl	80182f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	2000d8c5 	.word	0x2000d8c5
 800e20c:	0800e1a9 	.word	0x0800e1a9

0800e210 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	4611      	mov	r1, r2
 800e21c:	461a      	mov	r2, r3
 800e21e:	460b      	mov	r3, r1
 800e220:	80fb      	strh	r3, [r7, #6]
 800e222:	4613      	mov	r3, r2
 800e224:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	88ba      	ldrh	r2, [r7, #4]
 800e23c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e23e:	8b3b      	ldrh	r3, [r7, #24]
 800e240:	b2da      	uxtb	r2, r3
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	7f3a      	ldrb	r2, [r7, #28]
 800e24a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2201      	movs	r2, #1
 800e250:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	73da      	strb	r2, [r3, #15]
}
 800e258:	bf00      	nop
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	; 0x30
 800e268:	af02      	add	r7, sp, #8
 800e26a:	4603      	mov	r3, r0
 800e26c:	71fb      	strb	r3, [r7, #7]
 800e26e:	460b      	mov	r3, r1
 800e270:	80bb      	strh	r3, [r7, #4]
 800e272:	4613      	mov	r3, r2
 800e274:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e27a:	887b      	ldrh	r3, [r7, #2]
 800e27c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e280:	d07f      	beq.n	800e382 <pbuf_alloc+0x11e>
 800e282:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e286:	f300 80c8 	bgt.w	800e41a <pbuf_alloc+0x1b6>
 800e28a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e28e:	d010      	beq.n	800e2b2 <pbuf_alloc+0x4e>
 800e290:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e294:	f300 80c1 	bgt.w	800e41a <pbuf_alloc+0x1b6>
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d002      	beq.n	800e2a2 <pbuf_alloc+0x3e>
 800e29c:	2b41      	cmp	r3, #65	; 0x41
 800e29e:	f040 80bc 	bne.w	800e41a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e2a2:	887a      	ldrh	r2, [r7, #2]
 800e2a4:	88bb      	ldrh	r3, [r7, #4]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	f000 f8d1 	bl	800e450 <pbuf_alloc_reference>
 800e2ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e2b0:	e0bd      	b.n	800e42e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e2ba:	88bb      	ldrh	r3, [r7, #4]
 800e2bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e2be:	200c      	movs	r0, #12
 800e2c0:	f7ff fc22 	bl	800db08 <memp_malloc>
 800e2c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d109      	bne.n	800e2e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e2cc:	f7ff ff76 	bl	800e1bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800e2d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2d8:	f000 faa8 	bl	800e82c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	e0a7      	b.n	800e430 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e2e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2e2:	3303      	adds	r3, #3
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	8b7a      	ldrh	r2, [r7, #26]
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	bf28      	it	cs
 800e2f8:	4613      	movcs	r3, r2
 800e2fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e2fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2fe:	3310      	adds	r3, #16
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	4413      	add	r3, r2
 800e304:	3303      	adds	r3, #3
 800e306:	f023 0303 	bic.w	r3, r3, #3
 800e30a:	4618      	mov	r0, r3
 800e30c:	89f9      	ldrh	r1, [r7, #14]
 800e30e:	8b7a      	ldrh	r2, [r7, #26]
 800e310:	2300      	movs	r3, #0
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	887b      	ldrh	r3, [r7, #2]
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	460b      	mov	r3, r1
 800e31a:	4601      	mov	r1, r0
 800e31c:	6938      	ldr	r0, [r7, #16]
 800e31e:	f7ff ff77 	bl	800e210 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	f003 0303 	and.w	r3, r3, #3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d006      	beq.n	800e33c <pbuf_alloc+0xd8>
 800e32e:	4b42      	ldr	r3, [pc, #264]	; (800e438 <pbuf_alloc+0x1d4>)
 800e330:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e334:	4941      	ldr	r1, [pc, #260]	; (800e43c <pbuf_alloc+0x1d8>)
 800e336:	4842      	ldr	r0, [pc, #264]	; (800e440 <pbuf_alloc+0x1dc>)
 800e338:	f00a fa2c 	bl	8018794 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e33c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e33e:	3303      	adds	r3, #3
 800e340:	f023 0303 	bic.w	r3, r3, #3
 800e344:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e348:	d106      	bne.n	800e358 <pbuf_alloc+0xf4>
 800e34a:	4b3b      	ldr	r3, [pc, #236]	; (800e438 <pbuf_alloc+0x1d4>)
 800e34c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e350:	493c      	ldr	r1, [pc, #240]	; (800e444 <pbuf_alloc+0x1e0>)
 800e352:	483b      	ldr	r0, [pc, #236]	; (800e440 <pbuf_alloc+0x1dc>)
 800e354:	f00a fa1e 	bl	8018794 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d102      	bne.n	800e364 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	627b      	str	r3, [r7, #36]	; 0x24
 800e362:	e002      	b.n	800e36a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	693a      	ldr	r2, [r7, #16]
 800e368:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e36e:	8b7a      	ldrh	r2, [r7, #26]
 800e370:	89fb      	ldrh	r3, [r7, #14]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e376:	2300      	movs	r3, #0
 800e378:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e37a:	8b7b      	ldrh	r3, [r7, #26]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d19e      	bne.n	800e2be <pbuf_alloc+0x5a>
      break;
 800e380:	e055      	b.n	800e42e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e384:	3303      	adds	r3, #3
 800e386:	b29b      	uxth	r3, r3
 800e388:	f023 0303 	bic.w	r3, r3, #3
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	88bb      	ldrh	r3, [r7, #4]
 800e390:	3303      	adds	r3, #3
 800e392:	b29b      	uxth	r3, r3
 800e394:	f023 0303 	bic.w	r3, r3, #3
 800e398:	b29b      	uxth	r3, r3
 800e39a:	4413      	add	r3, r2
 800e39c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e39e:	8b3b      	ldrh	r3, [r7, #24]
 800e3a0:	3310      	adds	r3, #16
 800e3a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3a4:	8b3a      	ldrh	r2, [r7, #24]
 800e3a6:	88bb      	ldrh	r3, [r7, #4]
 800e3a8:	3303      	adds	r3, #3
 800e3aa:	f023 0303 	bic.w	r3, r3, #3
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d306      	bcc.n	800e3c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e3b2:	8afa      	ldrh	r2, [r7, #22]
 800e3b4:	88bb      	ldrh	r3, [r7, #4]
 800e3b6:	3303      	adds	r3, #3
 800e3b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d201      	bcs.n	800e3c4 <pbuf_alloc+0x160>
        return NULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	e035      	b.n	800e430 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e3c4:	8afb      	ldrh	r3, [r7, #22]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff fa1c 	bl	800d804 <mem_malloc>
 800e3cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <pbuf_alloc+0x174>
        return NULL;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e02b      	b.n	800e430 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3da:	3310      	adds	r3, #16
 800e3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3de:	4413      	add	r3, r2
 800e3e0:	3303      	adds	r3, #3
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	88b9      	ldrh	r1, [r7, #4]
 800e3ea:	88ba      	ldrh	r2, [r7, #4]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	887b      	ldrh	r3, [r7, #2]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3fa:	f7ff ff09 	bl	800e210 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	f003 0303 	and.w	r3, r3, #3
 800e406:	2b00      	cmp	r3, #0
 800e408:	d010      	beq.n	800e42c <pbuf_alloc+0x1c8>
 800e40a:	4b0b      	ldr	r3, [pc, #44]	; (800e438 <pbuf_alloc+0x1d4>)
 800e40c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e410:	490d      	ldr	r1, [pc, #52]	; (800e448 <pbuf_alloc+0x1e4>)
 800e412:	480b      	ldr	r0, [pc, #44]	; (800e440 <pbuf_alloc+0x1dc>)
 800e414:	f00a f9be 	bl	8018794 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e418:	e008      	b.n	800e42c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <pbuf_alloc+0x1d4>)
 800e41c:	f240 1227 	movw	r2, #295	; 0x127
 800e420:	490a      	ldr	r1, [pc, #40]	; (800e44c <pbuf_alloc+0x1e8>)
 800e422:	4807      	ldr	r0, [pc, #28]	; (800e440 <pbuf_alloc+0x1dc>)
 800e424:	f00a f9b6 	bl	8018794 <iprintf>
      return NULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	e001      	b.n	800e430 <pbuf_alloc+0x1cc>
      break;
 800e42c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e430:	4618      	mov	r0, r3
 800e432:	3728      	adds	r7, #40	; 0x28
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	0801aacc 	.word	0x0801aacc
 800e43c:	0801aafc 	.word	0x0801aafc
 800e440:	0801ab2c 	.word	0x0801ab2c
 800e444:	0801ab54 	.word	0x0801ab54
 800e448:	0801ab88 	.word	0x0801ab88
 800e44c:	0801abb4 	.word	0x0801abb4

0800e450 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af02      	add	r7, sp, #8
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	807b      	strh	r3, [r7, #2]
 800e45c:	4613      	mov	r3, r2
 800e45e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e460:	883b      	ldrh	r3, [r7, #0]
 800e462:	2b41      	cmp	r3, #65	; 0x41
 800e464:	d009      	beq.n	800e47a <pbuf_alloc_reference+0x2a>
 800e466:	883b      	ldrh	r3, [r7, #0]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d006      	beq.n	800e47a <pbuf_alloc_reference+0x2a>
 800e46c:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <pbuf_alloc_reference+0x5c>)
 800e46e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e472:	490f      	ldr	r1, [pc, #60]	; (800e4b0 <pbuf_alloc_reference+0x60>)
 800e474:	480f      	ldr	r0, [pc, #60]	; (800e4b4 <pbuf_alloc_reference+0x64>)
 800e476:	f00a f98d 	bl	8018794 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e47a:	200b      	movs	r0, #11
 800e47c:	f7ff fb44 	bl	800db08 <memp_malloc>
 800e480:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e488:	2300      	movs	r3, #0
 800e48a:	e00b      	b.n	800e4a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e48c:	8879      	ldrh	r1, [r7, #2]
 800e48e:	887a      	ldrh	r2, [r7, #2]
 800e490:	2300      	movs	r3, #0
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	883b      	ldrh	r3, [r7, #0]
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	460b      	mov	r3, r1
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7ff feb7 	bl	800e210 <pbuf_init_alloced_pbuf>
  return p;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	0801aacc 	.word	0x0801aacc
 800e4b0:	0801abd0 	.word	0x0801abd0
 800e4b4:	0801ab2c 	.word	0x0801ab2c

0800e4b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b088      	sub	sp, #32
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	81bb      	strh	r3, [r7, #12]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e4d0:	8a7b      	ldrh	r3, [r7, #18]
 800e4d2:	3303      	adds	r3, #3
 800e4d4:	f023 0203 	bic.w	r2, r3, #3
 800e4d8:	89bb      	ldrh	r3, [r7, #12]
 800e4da:	441a      	add	r2, r3
 800e4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d901      	bls.n	800e4e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e018      	b.n	800e518 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d007      	beq.n	800e4fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e4ec:	8a7b      	ldrh	r3, [r7, #18]
 800e4ee:	3303      	adds	r3, #3
 800e4f0:	f023 0303 	bic.w	r3, r3, #3
 800e4f4:	6a3a      	ldr	r2, [r7, #32]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	e001      	b.n	800e500 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	89b9      	ldrh	r1, [r7, #12]
 800e504:	89ba      	ldrh	r2, [r7, #12]
 800e506:	2302      	movs	r3, #2
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	897b      	ldrh	r3, [r7, #10]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	460b      	mov	r3, r1
 800e510:	6979      	ldr	r1, [r7, #20]
 800e512:	f7ff fe7d 	bl	800e210 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e516:	687b      	ldr	r3, [r7, #4]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <pbuf_realloc+0x20>
 800e532:	4b3a      	ldr	r3, [pc, #232]	; (800e61c <pbuf_realloc+0xfc>)
 800e534:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e538:	4939      	ldr	r1, [pc, #228]	; (800e620 <pbuf_realloc+0x100>)
 800e53a:	483a      	ldr	r0, [pc, #232]	; (800e624 <pbuf_realloc+0x104>)
 800e53c:	f00a f92a 	bl	8018794 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	891b      	ldrh	r3, [r3, #8]
 800e544:	887a      	ldrh	r2, [r7, #2]
 800e546:	429a      	cmp	r2, r3
 800e548:	d263      	bcs.n	800e612 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	891a      	ldrh	r2, [r3, #8]
 800e54e:	887b      	ldrh	r3, [r7, #2]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e554:	887b      	ldrh	r3, [r7, #2]
 800e556:	817b      	strh	r3, [r7, #10]
  q = p;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e55c:	e018      	b.n	800e590 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	895b      	ldrh	r3, [r3, #10]
 800e562:	897a      	ldrh	r2, [r7, #10]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	891a      	ldrh	r2, [r3, #8]
 800e56c:	893b      	ldrh	r3, [r7, #8]
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	b29a      	uxth	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <pbuf_realloc+0x70>
 800e582:	4b26      	ldr	r3, [pc, #152]	; (800e61c <pbuf_realloc+0xfc>)
 800e584:	f240 12af 	movw	r2, #431	; 0x1af
 800e588:	4927      	ldr	r1, [pc, #156]	; (800e628 <pbuf_realloc+0x108>)
 800e58a:	4826      	ldr	r0, [pc, #152]	; (800e624 <pbuf_realloc+0x104>)
 800e58c:	f00a f902 	bl	8018794 <iprintf>
  while (rem_len > q->len) {
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	895b      	ldrh	r3, [r3, #10]
 800e594:	897a      	ldrh	r2, [r7, #10]
 800e596:	429a      	cmp	r2, r3
 800e598:	d8e1      	bhi.n	800e55e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	7b1b      	ldrb	r3, [r3, #12]
 800e59e:	f003 030f 	and.w	r3, r3, #15
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d121      	bne.n	800e5ea <pbuf_realloc+0xca>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	895b      	ldrh	r3, [r3, #10]
 800e5aa:	897a      	ldrh	r2, [r7, #10]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d01c      	beq.n	800e5ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	7b5b      	ldrb	r3, [r3, #13]
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d116      	bne.n	800e5ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	897b      	ldrh	r3, [r7, #10]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7ff f80e 	bl	800d5f0 <mem_trim>
 800e5d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d106      	bne.n	800e5ea <pbuf_realloc+0xca>
 800e5dc:	4b0f      	ldr	r3, [pc, #60]	; (800e61c <pbuf_realloc+0xfc>)
 800e5de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e5e2:	4912      	ldr	r1, [pc, #72]	; (800e62c <pbuf_realloc+0x10c>)
 800e5e4:	480f      	ldr	r0, [pc, #60]	; (800e624 <pbuf_realloc+0x104>)
 800e5e6:	f00a f8d5 	bl	8018794 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	897a      	ldrh	r2, [r7, #10]
 800e5ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	895a      	ldrh	r2, [r3, #10]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4618      	mov	r0, r3
 800e606:	f000 f911 	bl	800e82c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	e000      	b.n	800e614 <pbuf_realloc+0xf4>
    return;
 800e612:	bf00      	nop

}
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	0801aacc 	.word	0x0801aacc
 800e620:	0801abe4 	.word	0x0801abe4
 800e624:	0801ab2c 	.word	0x0801ab2c
 800e628:	0801abfc 	.word	0x0801abfc
 800e62c:	0801ac14 	.word	0x0801ac14

0800e630 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	4613      	mov	r3, r2
 800e63c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <pbuf_add_header_impl+0x22>
 800e644:	4b2b      	ldr	r3, [pc, #172]	; (800e6f4 <pbuf_add_header_impl+0xc4>)
 800e646:	f240 12df 	movw	r2, #479	; 0x1df
 800e64a:	492b      	ldr	r1, [pc, #172]	; (800e6f8 <pbuf_add_header_impl+0xc8>)
 800e64c:	482b      	ldr	r0, [pc, #172]	; (800e6fc <pbuf_add_header_impl+0xcc>)
 800e64e:	f00a f8a1 	bl	8018794 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <pbuf_add_header_impl+0x30>
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e65e:	d301      	bcc.n	800e664 <pbuf_add_header_impl+0x34>
    return 1;
 800e660:	2301      	movs	r3, #1
 800e662:	e043      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <pbuf_add_header_impl+0x3e>
    return 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	e03e      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	891a      	ldrh	r2, [r3, #8]
 800e676:	8a7b      	ldrh	r3, [r7, #18]
 800e678:	4413      	add	r3, r2
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	8a7a      	ldrh	r2, [r7, #18]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d901      	bls.n	800e686 <pbuf_add_header_impl+0x56>
    return 1;
 800e682:	2301      	movs	r3, #1
 800e684:	e032      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	7b1b      	ldrb	r3, [r3, #12]
 800e68a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e68c:	8a3b      	ldrh	r3, [r7, #16]
 800e68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00c      	beq.n	800e6b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	425b      	negs	r3, r3
 800e69e:	4413      	add	r3, r2
 800e6a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3310      	adds	r3, #16
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d20d      	bcs.n	800e6c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e01d      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d006      	beq.n	800e6c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	425b      	negs	r3, r3
 800e6be:	4413      	add	r3, r2
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	e001      	b.n	800e6c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e011      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	895a      	ldrh	r2, [r3, #10]
 800e6d2:	8a7b      	ldrh	r3, [r7, #18]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	891a      	ldrh	r2, [r3, #8]
 800e6e0:	8a7b      	ldrh	r3, [r7, #18]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3718      	adds	r7, #24
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	0801aacc 	.word	0x0801aacc
 800e6f8:	0801ac30 	.word	0x0801ac30
 800e6fc:	0801ab2c 	.word	0x0801ab2c

0800e700 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e70a:	2200      	movs	r2, #0
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff ff8e 	bl	800e630 <pbuf_add_header_impl>
 800e714:	4603      	mov	r3, r0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d106      	bne.n	800e73e <pbuf_remove_header+0x1e>
 800e730:	4b20      	ldr	r3, [pc, #128]	; (800e7b4 <pbuf_remove_header+0x94>)
 800e732:	f240 224b 	movw	r2, #587	; 0x24b
 800e736:	4920      	ldr	r1, [pc, #128]	; (800e7b8 <pbuf_remove_header+0x98>)
 800e738:	4820      	ldr	r0, [pc, #128]	; (800e7bc <pbuf_remove_header+0x9c>)
 800e73a:	f00a f82b 	bl	8018794 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d003      	beq.n	800e74c <pbuf_remove_header+0x2c>
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e74a:	d301      	bcc.n	800e750 <pbuf_remove_header+0x30>
    return 1;
 800e74c:	2301      	movs	r3, #1
 800e74e:	e02c      	b.n	800e7aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <pbuf_remove_header+0x3a>
    return 0;
 800e756:	2300      	movs	r3, #0
 800e758:	e027      	b.n	800e7aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	895b      	ldrh	r3, [r3, #10]
 800e762:	89fa      	ldrh	r2, [r7, #14]
 800e764:	429a      	cmp	r2, r3
 800e766:	d908      	bls.n	800e77a <pbuf_remove_header+0x5a>
 800e768:	4b12      	ldr	r3, [pc, #72]	; (800e7b4 <pbuf_remove_header+0x94>)
 800e76a:	f240 2255 	movw	r2, #597	; 0x255
 800e76e:	4914      	ldr	r1, [pc, #80]	; (800e7c0 <pbuf_remove_header+0xa0>)
 800e770:	4812      	ldr	r0, [pc, #72]	; (800e7bc <pbuf_remove_header+0x9c>)
 800e772:	f00a f80f 	bl	8018794 <iprintf>
 800e776:	2301      	movs	r3, #1
 800e778:	e017      	b.n	800e7aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	441a      	add	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	895a      	ldrh	r2, [r3, #10]
 800e790:	89fb      	ldrh	r3, [r7, #14]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	891a      	ldrh	r2, [r3, #8]
 800e79e:	89fb      	ldrh	r3, [r7, #14]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0801aacc 	.word	0x0801aacc
 800e7b8:	0801ac30 	.word	0x0801ac30
 800e7bc:	0801ab2c 	.word	0x0801ab2c
 800e7c0:	0801ac3c 	.word	0x0801ac3c

0800e7c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	807b      	strh	r3, [r7, #2]
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e7d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da08      	bge.n	800e7ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e7dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7e0:	425b      	negs	r3, r3
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7ff ff9b 	bl	800e720 <pbuf_remove_header>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	e007      	b.n	800e7fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e7ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7f2:	787a      	ldrb	r2, [r7, #1]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff ff1a 	bl	800e630 <pbuf_add_header_impl>
 800e7fc:	4603      	mov	r3, r0
  }
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	460b      	mov	r3, r1
 800e810:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e816:	2201      	movs	r2, #1
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff ffd2 	bl	800e7c4 <pbuf_header_impl>
 800e820:	4603      	mov	r3, r0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
	...

0800e82c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10b      	bne.n	800e852 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d106      	bne.n	800e84e <pbuf_free+0x22>
 800e840:	4b3b      	ldr	r3, [pc, #236]	; (800e930 <pbuf_free+0x104>)
 800e842:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e846:	493b      	ldr	r1, [pc, #236]	; (800e934 <pbuf_free+0x108>)
 800e848:	483b      	ldr	r0, [pc, #236]	; (800e938 <pbuf_free+0x10c>)
 800e84a:	f009 ffa3 	bl	8018794 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	e069      	b.n	800e926 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e856:	e062      	b.n	800e91e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e858:	f009 fd3c 	bl	80182d4 <sys_arch_protect>
 800e85c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	7b9b      	ldrb	r3, [r3, #14]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d106      	bne.n	800e874 <pbuf_free+0x48>
 800e866:	4b32      	ldr	r3, [pc, #200]	; (800e930 <pbuf_free+0x104>)
 800e868:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e86c:	4933      	ldr	r1, [pc, #204]	; (800e93c <pbuf_free+0x110>)
 800e86e:	4832      	ldr	r0, [pc, #200]	; (800e938 <pbuf_free+0x10c>)
 800e870:	f009 ff90 	bl	8018794 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7b9b      	ldrb	r3, [r3, #14]
 800e878:	3b01      	subs	r3, #1
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	739a      	strb	r2, [r3, #14]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	7b9b      	ldrb	r3, [r3, #14]
 800e884:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e886:	69b8      	ldr	r0, [r7, #24]
 800e888:	f009 fd32 	bl	80182f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d143      	bne.n	800e91a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	7b1b      	ldrb	r3, [r3, #12]
 800e89c:	f003 030f 	and.w	r3, r3, #15
 800e8a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7b5b      	ldrb	r3, [r3, #13]
 800e8a6:	f003 0302 	and.w	r3, r3, #2
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d011      	beq.n	800e8d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <pbuf_free+0x9c>
 800e8ba:	4b1d      	ldr	r3, [pc, #116]	; (800e930 <pbuf_free+0x104>)
 800e8bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e8c0:	491f      	ldr	r1, [pc, #124]	; (800e940 <pbuf_free+0x114>)
 800e8c2:	481d      	ldr	r0, [pc, #116]	; (800e938 <pbuf_free+0x10c>)
 800e8c4:	f009 ff66 	bl	8018794 <iprintf>
        pc->custom_free_function(p);
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	4798      	blx	r3
 800e8d0:	e01d      	b.n	800e90e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d104      	bne.n	800e8e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	200c      	movs	r0, #12
 800e8dc:	f7ff f966 	bl	800dbac <memp_free>
 800e8e0:	e015      	b.n	800e90e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d104      	bne.n	800e8f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e8e8:	6879      	ldr	r1, [r7, #4]
 800e8ea:	200b      	movs	r0, #11
 800e8ec:	f7ff f95e 	bl	800dbac <memp_free>
 800e8f0:	e00d      	b.n	800e90e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d103      	bne.n	800e900 <pbuf_free+0xd4>
          mem_free(p);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7fe fde9 	bl	800d4d0 <mem_free>
 800e8fe:	e006      	b.n	800e90e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e900:	4b0b      	ldr	r3, [pc, #44]	; (800e930 <pbuf_free+0x104>)
 800e902:	f240 320f 	movw	r2, #783	; 0x30f
 800e906:	490f      	ldr	r1, [pc, #60]	; (800e944 <pbuf_free+0x118>)
 800e908:	480b      	ldr	r0, [pc, #44]	; (800e938 <pbuf_free+0x10c>)
 800e90a:	f009 ff43 	bl	8018794 <iprintf>
        }
      }
      count++;
 800e90e:	7ffb      	ldrb	r3, [r7, #31]
 800e910:	3301      	adds	r3, #1
 800e912:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	607b      	str	r3, [r7, #4]
 800e918:	e001      	b.n	800e91e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d199      	bne.n	800e858 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e924:	7ffb      	ldrb	r3, [r7, #31]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3720      	adds	r7, #32
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	0801aacc 	.word	0x0801aacc
 800e934:	0801ac30 	.word	0x0801ac30
 800e938:	0801ab2c 	.word	0x0801ab2c
 800e93c:	0801ac5c 	.word	0x0801ac5c
 800e940:	0801ac74 	.word	0x0801ac74
 800e944:	0801ac98 	.word	0x0801ac98

0800e948 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e954:	e005      	b.n	800e962 <pbuf_clen+0x1a>
    ++len;
 800e956:	89fb      	ldrh	r3, [r7, #14]
 800e958:	3301      	adds	r3, #1
 800e95a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1f6      	bne.n	800e956 <pbuf_clen+0xe>
  }
  return len;
 800e968:	89fb      	ldrh	r3, [r7, #14]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
	...

0800e978 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d016      	beq.n	800e9b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e986:	f009 fca5 	bl	80182d4 <sys_arch_protect>
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	7b9b      	ldrb	r3, [r3, #14]
 800e990:	3301      	adds	r3, #1
 800e992:	b2da      	uxtb	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	739a      	strb	r2, [r3, #14]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f009 fca9 	bl	80182f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	7b9b      	ldrb	r3, [r3, #14]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <pbuf_ref+0x3c>
 800e9a6:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <pbuf_ref+0x44>)
 800e9a8:	f240 3242 	movw	r2, #834	; 0x342
 800e9ac:	4904      	ldr	r1, [pc, #16]	; (800e9c0 <pbuf_ref+0x48>)
 800e9ae:	4805      	ldr	r0, [pc, #20]	; (800e9c4 <pbuf_ref+0x4c>)
 800e9b0:	f009 fef0 	bl	8018794 <iprintf>
  }
}
 800e9b4:	bf00      	nop
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	0801aacc 	.word	0x0801aacc
 800e9c0:	0801acac 	.word	0x0801acac
 800e9c4:	0801ab2c 	.word	0x0801ab2c

0800e9c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <pbuf_cat+0x16>
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d107      	bne.n	800e9ee <pbuf_cat+0x26>
 800e9de:	4b20      	ldr	r3, [pc, #128]	; (800ea60 <pbuf_cat+0x98>)
 800e9e0:	f240 3259 	movw	r2, #857	; 0x359
 800e9e4:	491f      	ldr	r1, [pc, #124]	; (800ea64 <pbuf_cat+0x9c>)
 800e9e6:	4820      	ldr	r0, [pc, #128]	; (800ea68 <pbuf_cat+0xa0>)
 800e9e8:	f009 fed4 	bl	8018794 <iprintf>
 800e9ec:	e034      	b.n	800ea58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	e00a      	b.n	800ea0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	891a      	ldrh	r2, [r3, #8]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	891b      	ldrh	r3, [r3, #8]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f0      	bne.n	800e9f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	891a      	ldrh	r2, [r3, #8]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	895b      	ldrh	r3, [r3, #10]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d006      	beq.n	800ea2c <pbuf_cat+0x64>
 800ea1e:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <pbuf_cat+0x98>)
 800ea20:	f240 3262 	movw	r2, #866	; 0x362
 800ea24:	4911      	ldr	r1, [pc, #68]	; (800ea6c <pbuf_cat+0xa4>)
 800ea26:	4810      	ldr	r0, [pc, #64]	; (800ea68 <pbuf_cat+0xa0>)
 800ea28:	f009 feb4 	bl	8018794 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d006      	beq.n	800ea42 <pbuf_cat+0x7a>
 800ea34:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <pbuf_cat+0x98>)
 800ea36:	f240 3263 	movw	r2, #867	; 0x363
 800ea3a:	490d      	ldr	r1, [pc, #52]	; (800ea70 <pbuf_cat+0xa8>)
 800ea3c:	480a      	ldr	r0, [pc, #40]	; (800ea68 <pbuf_cat+0xa0>)
 800ea3e:	f009 fea9 	bl	8018794 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	891a      	ldrh	r2, [r3, #8]
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	891b      	ldrh	r3, [r3, #8]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	0801aacc 	.word	0x0801aacc
 800ea64:	0801acc0 	.word	0x0801acc0
 800ea68:	0801ab2c 	.word	0x0801ab2c
 800ea6c:	0801acf8 	.word	0x0801acf8
 800ea70:	0801ad28 	.word	0x0801ad28

0800ea74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff ffa1 	bl	800e9c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ea86:	6838      	ldr	r0, [r7, #0]
 800ea88:	f7ff ff76 	bl	800e978 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ea8c:	bf00      	nop
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d008      	beq.n	800eabe <pbuf_copy+0x2a>
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d005      	beq.n	800eabe <pbuf_copy+0x2a>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	891a      	ldrh	r2, [r3, #8]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	891b      	ldrh	r3, [r3, #8]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d209      	bcs.n	800ead2 <pbuf_copy+0x3e>
 800eabe:	4b57      	ldr	r3, [pc, #348]	; (800ec1c <pbuf_copy+0x188>)
 800eac0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eac4:	4956      	ldr	r1, [pc, #344]	; (800ec20 <pbuf_copy+0x18c>)
 800eac6:	4857      	ldr	r0, [pc, #348]	; (800ec24 <pbuf_copy+0x190>)
 800eac8:	f009 fe64 	bl	8018794 <iprintf>
 800eacc:	f06f 030f 	mvn.w	r3, #15
 800ead0:	e09f      	b.n	800ec12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	895b      	ldrh	r3, [r3, #10]
 800ead6:	461a      	mov	r2, r3
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	1ad2      	subs	r2, r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	895b      	ldrh	r3, [r3, #10]
 800eae0:	4619      	mov	r1, r3
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	1acb      	subs	r3, r1, r3
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d306      	bcc.n	800eaf8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	895b      	ldrh	r3, [r3, #10]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	60fb      	str	r3, [r7, #12]
 800eaf6:	e005      	b.n	800eb04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	895b      	ldrh	r3, [r3, #10]
 800eafc:	461a      	mov	r2, r3
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685a      	ldr	r2, [r3, #4]
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	18d0      	adds	r0, r2, r3
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	4413      	add	r3, r2
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	4619      	mov	r1, r3
 800eb18:	f009 fd2c 	bl	8018574 <memcpy>
    offset_to += len;
 800eb1c:	697a      	ldr	r2, [r7, #20]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	4413      	add	r3, r2
 800eb22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	4413      	add	r3, r2
 800eb2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	895b      	ldrh	r3, [r3, #10]
 800eb30:	461a      	mov	r2, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d906      	bls.n	800eb46 <pbuf_copy+0xb2>
 800eb38:	4b38      	ldr	r3, [pc, #224]	; (800ec1c <pbuf_copy+0x188>)
 800eb3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb3e:	493a      	ldr	r1, [pc, #232]	; (800ec28 <pbuf_copy+0x194>)
 800eb40:	4838      	ldr	r0, [pc, #224]	; (800ec24 <pbuf_copy+0x190>)
 800eb42:	f009 fe27 	bl	8018794 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	895b      	ldrh	r3, [r3, #10]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d906      	bls.n	800eb60 <pbuf_copy+0xcc>
 800eb52:	4b32      	ldr	r3, [pc, #200]	; (800ec1c <pbuf_copy+0x188>)
 800eb54:	f240 32da 	movw	r2, #986	; 0x3da
 800eb58:	4934      	ldr	r1, [pc, #208]	; (800ec2c <pbuf_copy+0x198>)
 800eb5a:	4832      	ldr	r0, [pc, #200]	; (800ec24 <pbuf_copy+0x190>)
 800eb5c:	f009 fe1a 	bl	8018794 <iprintf>
    if (offset_from >= p_from->len) {
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	895b      	ldrh	r3, [r3, #10]
 800eb64:	461a      	mov	r2, r3
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d304      	bcc.n	800eb76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	895b      	ldrh	r3, [r3, #10]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d114      	bne.n	800ebac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10c      	bne.n	800ebac <pbuf_copy+0x118>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d009      	beq.n	800ebac <pbuf_copy+0x118>
 800eb98:	4b20      	ldr	r3, [pc, #128]	; (800ec1c <pbuf_copy+0x188>)
 800eb9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800eb9e:	4924      	ldr	r1, [pc, #144]	; (800ec30 <pbuf_copy+0x19c>)
 800eba0:	4820      	ldr	r0, [pc, #128]	; (800ec24 <pbuf_copy+0x190>)
 800eba2:	f009 fdf7 	bl	8018794 <iprintf>
 800eba6:	f06f 030f 	mvn.w	r3, #15
 800ebaa:	e032      	b.n	800ec12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d013      	beq.n	800ebda <pbuf_copy+0x146>
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	895a      	ldrh	r2, [r3, #10]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	891b      	ldrh	r3, [r3, #8]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d10d      	bne.n	800ebda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d009      	beq.n	800ebda <pbuf_copy+0x146>
 800ebc6:	4b15      	ldr	r3, [pc, #84]	; (800ec1c <pbuf_copy+0x188>)
 800ebc8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ebcc:	4919      	ldr	r1, [pc, #100]	; (800ec34 <pbuf_copy+0x1a0>)
 800ebce:	4815      	ldr	r0, [pc, #84]	; (800ec24 <pbuf_copy+0x190>)
 800ebd0:	f009 fde0 	bl	8018794 <iprintf>
 800ebd4:	f06f 0305 	mvn.w	r3, #5
 800ebd8:	e01b      	b.n	800ec12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d013      	beq.n	800ec08 <pbuf_copy+0x174>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	895a      	ldrh	r2, [r3, #10]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d10d      	bne.n	800ec08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d009      	beq.n	800ec08 <pbuf_copy+0x174>
 800ebf4:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <pbuf_copy+0x188>)
 800ebf6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ebfa:	490e      	ldr	r1, [pc, #56]	; (800ec34 <pbuf_copy+0x1a0>)
 800ebfc:	4809      	ldr	r0, [pc, #36]	; (800ec24 <pbuf_copy+0x190>)
 800ebfe:	f009 fdc9 	bl	8018794 <iprintf>
 800ec02:	f06f 0305 	mvn.w	r3, #5
 800ec06:	e004      	b.n	800ec12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f47f af61 	bne.w	800ead2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3718      	adds	r7, #24
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0801aacc 	.word	0x0801aacc
 800ec20:	0801ad74 	.word	0x0801ad74
 800ec24:	0801ab2c 	.word	0x0801ab2c
 800ec28:	0801ada4 	.word	0x0801ada4
 800ec2c:	0801adbc 	.word	0x0801adbc
 800ec30:	0801add8 	.word	0x0801add8
 800ec34:	0801ade8 	.word	0x0801ade8

0800ec38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	4611      	mov	r1, r2
 800ec44:	461a      	mov	r2, r3
 800ec46:	460b      	mov	r3, r1
 800ec48:	80fb      	strh	r3, [r7, #6]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d108      	bne.n	800ec6e <pbuf_copy_partial+0x36>
 800ec5c:	4b2b      	ldr	r3, [pc, #172]	; (800ed0c <pbuf_copy_partial+0xd4>)
 800ec5e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec62:	492b      	ldr	r1, [pc, #172]	; (800ed10 <pbuf_copy_partial+0xd8>)
 800ec64:	482b      	ldr	r0, [pc, #172]	; (800ed14 <pbuf_copy_partial+0xdc>)
 800ec66:	f009 fd95 	bl	8018794 <iprintf>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e04a      	b.n	800ed04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d108      	bne.n	800ec86 <pbuf_copy_partial+0x4e>
 800ec74:	4b25      	ldr	r3, [pc, #148]	; (800ed0c <pbuf_copy_partial+0xd4>)
 800ec76:	f240 420b 	movw	r2, #1035	; 0x40b
 800ec7a:	4927      	ldr	r1, [pc, #156]	; (800ed18 <pbuf_copy_partial+0xe0>)
 800ec7c:	4825      	ldr	r0, [pc, #148]	; (800ed14 <pbuf_copy_partial+0xdc>)
 800ec7e:	f009 fd89 	bl	8018794 <iprintf>
 800ec82:	2300      	movs	r3, #0
 800ec84:	e03e      	b.n	800ed04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	61fb      	str	r3, [r7, #28]
 800ec8a:	e034      	b.n	800ecf6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ec8c:	88bb      	ldrh	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00a      	beq.n	800eca8 <pbuf_copy_partial+0x70>
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	895b      	ldrh	r3, [r3, #10]
 800ec96:	88ba      	ldrh	r2, [r7, #4]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d305      	bcc.n	800eca8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	895b      	ldrh	r3, [r3, #10]
 800eca0:	88ba      	ldrh	r2, [r7, #4]
 800eca2:	1ad3      	subs	r3, r2, r3
 800eca4:	80bb      	strh	r3, [r7, #4]
 800eca6:	e023      	b.n	800ecf0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	895a      	ldrh	r2, [r3, #10]
 800ecac:	88bb      	ldrh	r3, [r7, #4]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ecb2:	8b3a      	ldrh	r2, [r7, #24]
 800ecb4:	88fb      	ldrh	r3, [r7, #6]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d901      	bls.n	800ecbe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ecbe:	8b7b      	ldrh	r3, [r7, #26]
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	18d0      	adds	r0, r2, r3
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	685a      	ldr	r2, [r3, #4]
 800ecc8:	88bb      	ldrh	r3, [r7, #4]
 800ecca:	4413      	add	r3, r2
 800eccc:	8b3a      	ldrh	r2, [r7, #24]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	f009 fc50 	bl	8018574 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ecd4:	8afa      	ldrh	r2, [r7, #22]
 800ecd6:	8b3b      	ldrh	r3, [r7, #24]
 800ecd8:	4413      	add	r3, r2
 800ecda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ecdc:	8b7a      	ldrh	r2, [r7, #26]
 800ecde:	8b3b      	ldrh	r3, [r7, #24]
 800ece0:	4413      	add	r3, r2
 800ece2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ece4:	88fa      	ldrh	r2, [r7, #6]
 800ece6:	8b3b      	ldrh	r3, [r7, #24]
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	61fb      	str	r3, [r7, #28]
 800ecf6:	88fb      	ldrh	r3, [r7, #6]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <pbuf_copy_partial+0xca>
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1c4      	bne.n	800ec8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ed02:	8afb      	ldrh	r3, [r7, #22]
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3720      	adds	r7, #32
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	0801aacc 	.word	0x0801aacc
 800ed10:	0801ae14 	.word	0x0801ae14
 800ed14:	0801ab2c 	.word	0x0801ab2c
 800ed18:	0801ae34 	.word	0x0801ae34

0800ed1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	603a      	str	r2, [r7, #0]
 800ed26:	71fb      	strb	r3, [r7, #7]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	8919      	ldrh	r1, [r3, #8]
 800ed30:	88ba      	ldrh	r2, [r7, #4]
 800ed32:	79fb      	ldrb	r3, [r7, #7]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff fa95 	bl	800e264 <pbuf_alloc>
 800ed3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <pbuf_clone+0x2a>
    return NULL;
 800ed42:	2300      	movs	r3, #0
 800ed44:	e011      	b.n	800ed6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed46:	6839      	ldr	r1, [r7, #0]
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f7ff fea3 	bl	800ea94 <pbuf_copy>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d006      	beq.n	800ed68 <pbuf_clone+0x4c>
 800ed5a:	4b06      	ldr	r3, [pc, #24]	; (800ed74 <pbuf_clone+0x58>)
 800ed5c:	f240 5224 	movw	r2, #1316	; 0x524
 800ed60:	4905      	ldr	r1, [pc, #20]	; (800ed78 <pbuf_clone+0x5c>)
 800ed62:	4806      	ldr	r0, [pc, #24]	; (800ed7c <pbuf_clone+0x60>)
 800ed64:	f009 fd16 	bl	8018794 <iprintf>
  return q;
 800ed68:	68fb      	ldr	r3, [r7, #12]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	0801aacc 	.word	0x0801aacc
 800ed78:	0801af40 	.word	0x0801af40
 800ed7c:	0801ab2c 	.word	0x0801ab2c

0800ed80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed84:	f009 fd1e 	bl	80187c4 <rand>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	4b01      	ldr	r3, [pc, #4]	; (800eda0 <tcp_init+0x20>)
 800ed9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed9c:	bf00      	nop
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	200000a4 	.word	0x200000a4

0800eda4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	7d1b      	ldrb	r3, [r3, #20]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d105      	bne.n	800edc0 <tcp_free+0x1c>
 800edb4:	4b06      	ldr	r3, [pc, #24]	; (800edd0 <tcp_free+0x2c>)
 800edb6:	22d4      	movs	r2, #212	; 0xd4
 800edb8:	4906      	ldr	r1, [pc, #24]	; (800edd4 <tcp_free+0x30>)
 800edba:	4807      	ldr	r0, [pc, #28]	; (800edd8 <tcp_free+0x34>)
 800edbc:	f009 fcea 	bl	8018794 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	2001      	movs	r0, #1
 800edc4:	f7fe fef2 	bl	800dbac <memp_free>
}
 800edc8:	bf00      	nop
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	0801afcc 	.word	0x0801afcc
 800edd4:	0801affc 	.word	0x0801affc
 800edd8:	0801b010 	.word	0x0801b010

0800eddc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	7d1b      	ldrb	r3, [r3, #20]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d105      	bne.n	800edf8 <tcp_free_listen+0x1c>
 800edec:	4b06      	ldr	r3, [pc, #24]	; (800ee08 <tcp_free_listen+0x2c>)
 800edee:	22df      	movs	r2, #223	; 0xdf
 800edf0:	4906      	ldr	r1, [pc, #24]	; (800ee0c <tcp_free_listen+0x30>)
 800edf2:	4807      	ldr	r0, [pc, #28]	; (800ee10 <tcp_free_listen+0x34>)
 800edf4:	f009 fcce 	bl	8018794 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800edf8:	6879      	ldr	r1, [r7, #4]
 800edfa:	2002      	movs	r0, #2
 800edfc:	f7fe fed6 	bl	800dbac <memp_free>
}
 800ee00:	bf00      	nop
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	0801afcc 	.word	0x0801afcc
 800ee0c:	0801b038 	.word	0x0801b038
 800ee10:	0801b010 	.word	0x0801b010

0800ee14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee18:	f000 ffdc 	bl	800fdd4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee1c:	4b07      	ldr	r3, [pc, #28]	; (800ee3c <tcp_tmr+0x28>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	3301      	adds	r3, #1
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	4b05      	ldr	r3, [pc, #20]	; (800ee3c <tcp_tmr+0x28>)
 800ee26:	701a      	strb	r2, [r3, #0]
 800ee28:	4b04      	ldr	r3, [pc, #16]	; (800ee3c <tcp_tmr+0x28>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 0301 	and.w	r3, r3, #1
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee34:	f000 fc8e 	bl	800f754 <tcp_slowtmr>
  }
}
 800ee38:	bf00      	nop
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	2000d8dd 	.word	0x2000d8dd

0800ee40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d105      	bne.n	800ee5c <tcp_remove_listener+0x1c>
 800ee50:	4b0d      	ldr	r3, [pc, #52]	; (800ee88 <tcp_remove_listener+0x48>)
 800ee52:	22ff      	movs	r2, #255	; 0xff
 800ee54:	490d      	ldr	r1, [pc, #52]	; (800ee8c <tcp_remove_listener+0x4c>)
 800ee56:	480e      	ldr	r0, [pc, #56]	; (800ee90 <tcp_remove_listener+0x50>)
 800ee58:	f009 fc9c 	bl	8018794 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	e00a      	b.n	800ee78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee66:	683a      	ldr	r2, [r7, #0]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d102      	bne.n	800ee72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1f1      	bne.n	800ee62 <tcp_remove_listener+0x22>
    }
  }
}
 800ee7e:	bf00      	nop
 800ee80:	bf00      	nop
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801afcc 	.word	0x0801afcc
 800ee8c:	0801b054 	.word	0x0801b054
 800ee90:	0801b010 	.word	0x0801b010

0800ee94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <tcp_listen_closed+0x1c>
 800eea2:	4b14      	ldr	r3, [pc, #80]	; (800eef4 <tcp_listen_closed+0x60>)
 800eea4:	f240 1211 	movw	r2, #273	; 0x111
 800eea8:	4913      	ldr	r1, [pc, #76]	; (800eef8 <tcp_listen_closed+0x64>)
 800eeaa:	4814      	ldr	r0, [pc, #80]	; (800eefc <tcp_listen_closed+0x68>)
 800eeac:	f009 fc72 	bl	8018794 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	7d1b      	ldrb	r3, [r3, #20]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d006      	beq.n	800eec6 <tcp_listen_closed+0x32>
 800eeb8:	4b0e      	ldr	r3, [pc, #56]	; (800eef4 <tcp_listen_closed+0x60>)
 800eeba:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eebe:	4910      	ldr	r1, [pc, #64]	; (800ef00 <tcp_listen_closed+0x6c>)
 800eec0:	480e      	ldr	r0, [pc, #56]	; (800eefc <tcp_listen_closed+0x68>)
 800eec2:	f009 fc67 	bl	8018794 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eec6:	2301      	movs	r3, #1
 800eec8:	60fb      	str	r3, [r7, #12]
 800eeca:	e00b      	b.n	800eee4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eecc:	4a0d      	ldr	r2, [pc, #52]	; (800ef04 <tcp_listen_closed+0x70>)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6879      	ldr	r1, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff ffb1 	bl	800ee40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	3301      	adds	r3, #1
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d9f0      	bls.n	800eecc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eeea:	bf00      	nop
 800eeec:	bf00      	nop
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	0801afcc 	.word	0x0801afcc
 800eef8:	0801b07c 	.word	0x0801b07c
 800eefc:	0801b010 	.word	0x0801b010
 800ef00:	0801b088 	.word	0x0801b088
 800ef04:	0801cfec 	.word	0x0801cfec

0800ef08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef08:	b5b0      	push	{r4, r5, r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af04      	add	r7, sp, #16
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d106      	bne.n	800ef28 <tcp_close_shutdown+0x20>
 800ef1a:	4b63      	ldr	r3, [pc, #396]	; (800f0a8 <tcp_close_shutdown+0x1a0>)
 800ef1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef20:	4962      	ldr	r1, [pc, #392]	; (800f0ac <tcp_close_shutdown+0x1a4>)
 800ef22:	4863      	ldr	r0, [pc, #396]	; (800f0b0 <tcp_close_shutdown+0x1a8>)
 800ef24:	f009 fc36 	bl	8018794 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef28:	78fb      	ldrb	r3, [r7, #3]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d066      	beq.n	800effc <tcp_close_shutdown+0xf4>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	7d1b      	ldrb	r3, [r3, #20]
 800ef32:	2b04      	cmp	r3, #4
 800ef34:	d003      	beq.n	800ef3e <tcp_close_shutdown+0x36>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	7d1b      	ldrb	r3, [r3, #20]
 800ef3a:	2b07      	cmp	r3, #7
 800ef3c:	d15e      	bne.n	800effc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d104      	bne.n	800ef50 <tcp_close_shutdown+0x48>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef4e:	d055      	beq.n	800effc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	8b5b      	ldrh	r3, [r3, #26]
 800ef54:	f003 0310 	and.w	r3, r3, #16
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d106      	bne.n	800ef6a <tcp_close_shutdown+0x62>
 800ef5c:	4b52      	ldr	r3, [pc, #328]	; (800f0a8 <tcp_close_shutdown+0x1a0>)
 800ef5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ef62:	4954      	ldr	r1, [pc, #336]	; (800f0b4 <tcp_close_shutdown+0x1ac>)
 800ef64:	4852      	ldr	r0, [pc, #328]	; (800f0b0 <tcp_close_shutdown+0x1a8>)
 800ef66:	f009 fc15 	bl	8018794 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef72:	687d      	ldr	r5, [r7, #4]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3304      	adds	r3, #4
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	8ad2      	ldrh	r2, [r2, #22]
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	8b09      	ldrh	r1, [r1, #24]
 800ef80:	9102      	str	r1, [sp, #8]
 800ef82:	9201      	str	r2, [sp, #4]
 800ef84:	9300      	str	r3, [sp, #0]
 800ef86:	462b      	mov	r3, r5
 800ef88:	4622      	mov	r2, r4
 800ef8a:	4601      	mov	r1, r0
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f005 fcf1 	bl	8014974 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f001 face 	bl	8010534 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ef98:	4b47      	ldr	r3, [pc, #284]	; (800f0b8 <tcp_close_shutdown+0x1b0>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d105      	bne.n	800efae <tcp_close_shutdown+0xa6>
 800efa2:	4b45      	ldr	r3, [pc, #276]	; (800f0b8 <tcp_close_shutdown+0x1b0>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	4a43      	ldr	r2, [pc, #268]	; (800f0b8 <tcp_close_shutdown+0x1b0>)
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	e013      	b.n	800efd6 <tcp_close_shutdown+0xce>
 800efae:	4b42      	ldr	r3, [pc, #264]	; (800f0b8 <tcp_close_shutdown+0x1b0>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e00c      	b.n	800efd0 <tcp_close_shutdown+0xc8>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d104      	bne.n	800efca <tcp_close_shutdown+0xc2>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	68da      	ldr	r2, [r3, #12]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	60da      	str	r2, [r3, #12]
 800efc8:	e005      	b.n	800efd6 <tcp_close_shutdown+0xce>
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	60fb      	str	r3, [r7, #12]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1ef      	bne.n	800efb6 <tcp_close_shutdown+0xae>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	60da      	str	r2, [r3, #12]
 800efdc:	4b37      	ldr	r3, [pc, #220]	; (800f0bc <tcp_close_shutdown+0x1b4>)
 800efde:	2201      	movs	r2, #1
 800efe0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800efe2:	4b37      	ldr	r3, [pc, #220]	; (800f0c0 <tcp_close_shutdown+0x1b8>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d102      	bne.n	800eff2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800efec:	f003 ff66 	bl	8012ebc <tcp_trigger_input_pcb_close>
 800eff0:	e002      	b.n	800eff8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff fed6 	bl	800eda4 <tcp_free>
      }
      return ERR_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	e050      	b.n	800f09e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	7d1b      	ldrb	r3, [r3, #20]
 800f000:	2b02      	cmp	r3, #2
 800f002:	d03b      	beq.n	800f07c <tcp_close_shutdown+0x174>
 800f004:	2b02      	cmp	r3, #2
 800f006:	dc44      	bgt.n	800f092 <tcp_close_shutdown+0x18a>
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d002      	beq.n	800f012 <tcp_close_shutdown+0x10a>
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d02a      	beq.n	800f066 <tcp_close_shutdown+0x15e>
 800f010:	e03f      	b.n	800f092 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	8adb      	ldrh	r3, [r3, #22]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d021      	beq.n	800f05e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f01a:	4b2a      	ldr	r3, [pc, #168]	; (800f0c4 <tcp_close_shutdown+0x1bc>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d105      	bne.n	800f030 <tcp_close_shutdown+0x128>
 800f024:	4b27      	ldr	r3, [pc, #156]	; (800f0c4 <tcp_close_shutdown+0x1bc>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	4a26      	ldr	r2, [pc, #152]	; (800f0c4 <tcp_close_shutdown+0x1bc>)
 800f02c:	6013      	str	r3, [r2, #0]
 800f02e:	e013      	b.n	800f058 <tcp_close_shutdown+0x150>
 800f030:	4b24      	ldr	r3, [pc, #144]	; (800f0c4 <tcp_close_shutdown+0x1bc>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	60bb      	str	r3, [r7, #8]
 800f036:	e00c      	b.n	800f052 <tcp_close_shutdown+0x14a>
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d104      	bne.n	800f04c <tcp_close_shutdown+0x144>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	68da      	ldr	r2, [r3, #12]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	60da      	str	r2, [r3, #12]
 800f04a:	e005      	b.n	800f058 <tcp_close_shutdown+0x150>
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	60bb      	str	r3, [r7, #8]
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d1ef      	bne.n	800f038 <tcp_close_shutdown+0x130>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff fea0 	bl	800eda4 <tcp_free>
      break;
 800f064:	e01a      	b.n	800f09c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7ff ff14 	bl	800ee94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f06c:	6879      	ldr	r1, [r7, #4]
 800f06e:	4816      	ldr	r0, [pc, #88]	; (800f0c8 <tcp_close_shutdown+0x1c0>)
 800f070:	f001 fab0 	bl	80105d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7ff feb1 	bl	800eddc <tcp_free_listen>
      break;
 800f07a:	e00f      	b.n	800f09c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f07c:	6879      	ldr	r1, [r7, #4]
 800f07e:	480e      	ldr	r0, [pc, #56]	; (800f0b8 <tcp_close_shutdown+0x1b0>)
 800f080:	f001 faa8 	bl	80105d4 <tcp_pcb_remove>
 800f084:	4b0d      	ldr	r3, [pc, #52]	; (800f0bc <tcp_close_shutdown+0x1b4>)
 800f086:	2201      	movs	r2, #1
 800f088:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff fe8a 	bl	800eda4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f090:	e004      	b.n	800f09c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f81a 	bl	800f0cc <tcp_close_shutdown_fin>
 800f098:	4603      	mov	r3, r0
 800f09a:	e000      	b.n	800f09e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	0801afcc 	.word	0x0801afcc
 800f0ac:	0801b0a0 	.word	0x0801b0a0
 800f0b0:	0801b010 	.word	0x0801b010
 800f0b4:	0801b0c0 	.word	0x0801b0c0
 800f0b8:	2000d8d4 	.word	0x2000d8d4
 800f0bc:	2000d8dc 	.word	0x2000d8dc
 800f0c0:	2000d914 	.word	0x2000d914
 800f0c4:	2000d8cc 	.word	0x2000d8cc
 800f0c8:	2000d8d0 	.word	0x2000d8d0

0800f0cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <tcp_close_shutdown_fin+0x1c>
 800f0da:	4b2e      	ldr	r3, [pc, #184]	; (800f194 <tcp_close_shutdown_fin+0xc8>)
 800f0dc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f0e0:	492d      	ldr	r1, [pc, #180]	; (800f198 <tcp_close_shutdown_fin+0xcc>)
 800f0e2:	482e      	ldr	r0, [pc, #184]	; (800f19c <tcp_close_shutdown_fin+0xd0>)
 800f0e4:	f009 fb56 	bl	8018794 <iprintf>

  switch (pcb->state) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7d1b      	ldrb	r3, [r3, #20]
 800f0ec:	2b07      	cmp	r3, #7
 800f0ee:	d020      	beq.n	800f132 <tcp_close_shutdown_fin+0x66>
 800f0f0:	2b07      	cmp	r3, #7
 800f0f2:	dc2b      	bgt.n	800f14c <tcp_close_shutdown_fin+0x80>
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d002      	beq.n	800f0fe <tcp_close_shutdown_fin+0x32>
 800f0f8:	2b04      	cmp	r3, #4
 800f0fa:	d00d      	beq.n	800f118 <tcp_close_shutdown_fin+0x4c>
 800f0fc:	e026      	b.n	800f14c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f004 fd46 	bl	8013b90 <tcp_send_fin>
 800f104:	4603      	mov	r3, r0
 800f106:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d11f      	bne.n	800f150 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2205      	movs	r2, #5
 800f114:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f116:	e01b      	b.n	800f150 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f004 fd39 	bl	8013b90 <tcp_send_fin>
 800f11e:	4603      	mov	r3, r0
 800f120:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d114      	bne.n	800f154 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2205      	movs	r2, #5
 800f12e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f130:	e010      	b.n	800f154 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f004 fd2c 	bl	8013b90 <tcp_send_fin>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d109      	bne.n	800f158 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2209      	movs	r2, #9
 800f148:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f14a:	e005      	b.n	800f158 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	e01c      	b.n	800f18a <tcp_close_shutdown_fin+0xbe>
      break;
 800f150:	bf00      	nop
 800f152:	e002      	b.n	800f15a <tcp_close_shutdown_fin+0x8e>
      break;
 800f154:	bf00      	nop
 800f156:	e000      	b.n	800f15a <tcp_close_shutdown_fin+0x8e>
      break;
 800f158:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d103      	bne.n	800f16a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f004 fe52 	bl	8013e0c <tcp_output>
 800f168:	e00d      	b.n	800f186 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f172:	d108      	bne.n	800f186 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	8b5b      	ldrh	r3, [r3, #26]
 800f178:	f043 0308 	orr.w	r3, r3, #8
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f182:	2300      	movs	r3, #0
 800f184:	e001      	b.n	800f18a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	0801afcc 	.word	0x0801afcc
 800f198:	0801b07c 	.word	0x0801b07c
 800f19c:	0801b010 	.word	0x0801b010

0800f1a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d109      	bne.n	800f1c2 <tcp_close+0x22>
 800f1ae:	4b0f      	ldr	r3, [pc, #60]	; (800f1ec <tcp_close+0x4c>)
 800f1b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f1b4:	490e      	ldr	r1, [pc, #56]	; (800f1f0 <tcp_close+0x50>)
 800f1b6:	480f      	ldr	r0, [pc, #60]	; (800f1f4 <tcp_close+0x54>)
 800f1b8:	f009 faec 	bl	8018794 <iprintf>
 800f1bc:	f06f 030f 	mvn.w	r3, #15
 800f1c0:	e00f      	b.n	800f1e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d006      	beq.n	800f1d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	8b5b      	ldrh	r3, [r3, #26]
 800f1ce:	f043 0310 	orr.w	r3, r3, #16
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f1d8:	2101      	movs	r1, #1
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7ff fe94 	bl	800ef08 <tcp_close_shutdown>
 800f1e0:	4603      	mov	r3, r0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	0801afcc 	.word	0x0801afcc
 800f1f0:	0801b0dc 	.word	0x0801b0dc
 800f1f4:	0801b010 	.word	0x0801b010

0800f1f8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d109      	bne.n	800f21e <tcp_shutdown+0x26>
 800f20a:	4b26      	ldr	r3, [pc, #152]	; (800f2a4 <tcp_shutdown+0xac>)
 800f20c:	f240 2207 	movw	r2, #519	; 0x207
 800f210:	4925      	ldr	r1, [pc, #148]	; (800f2a8 <tcp_shutdown+0xb0>)
 800f212:	4826      	ldr	r0, [pc, #152]	; (800f2ac <tcp_shutdown+0xb4>)
 800f214:	f009 fabe 	bl	8018794 <iprintf>
 800f218:	f06f 030f 	mvn.w	r3, #15
 800f21c:	e03d      	b.n	800f29a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	7d1b      	ldrb	r3, [r3, #20]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d102      	bne.n	800f22c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f226:	f06f 030a 	mvn.w	r3, #10
 800f22a:	e036      	b.n	800f29a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d01b      	beq.n	800f26a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	8b5b      	ldrh	r3, [r3, #26]
 800f236:	f043 0310 	orr.w	r3, r3, #16
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d005      	beq.n	800f252 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f246:	2101      	movs	r1, #1
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f7ff fe5d 	bl	800ef08 <tcp_close_shutdown>
 800f24e:	4603      	mov	r3, r0
 800f250:	e023      	b.n	800f29a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f256:	2b00      	cmp	r3, #0
 800f258:	d007      	beq.n	800f26a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f25e:	4618      	mov	r0, r3
 800f260:	f7ff fae4 	bl	800e82c <pbuf_free>
      pcb->refused_data = NULL;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d013      	beq.n	800f298 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	7d1b      	ldrb	r3, [r3, #20]
 800f274:	2b04      	cmp	r3, #4
 800f276:	dc02      	bgt.n	800f27e <tcp_shutdown+0x86>
 800f278:	2b03      	cmp	r3, #3
 800f27a:	da02      	bge.n	800f282 <tcp_shutdown+0x8a>
 800f27c:	e009      	b.n	800f292 <tcp_shutdown+0x9a>
 800f27e:	2b07      	cmp	r3, #7
 800f280:	d107      	bne.n	800f292 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	b2db      	uxtb	r3, r3
 800f286:	4619      	mov	r1, r3
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f7ff fe3d 	bl	800ef08 <tcp_close_shutdown>
 800f28e:	4603      	mov	r3, r0
 800f290:	e003      	b.n	800f29a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f292:	f06f 030a 	mvn.w	r3, #10
 800f296:	e000      	b.n	800f29a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	0801afcc 	.word	0x0801afcc
 800f2a8:	0801b0f4 	.word	0x0801b0f4
 800f2ac:	0801b010 	.word	0x0801b010

0800f2b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08e      	sub	sp, #56	; 0x38
 800f2b4:	af04      	add	r7, sp, #16
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d107      	bne.n	800f2d0 <tcp_abandon+0x20>
 800f2c0:	4b52      	ldr	r3, [pc, #328]	; (800f40c <tcp_abandon+0x15c>)
 800f2c2:	f240 223d 	movw	r2, #573	; 0x23d
 800f2c6:	4952      	ldr	r1, [pc, #328]	; (800f410 <tcp_abandon+0x160>)
 800f2c8:	4852      	ldr	r0, [pc, #328]	; (800f414 <tcp_abandon+0x164>)
 800f2ca:	f009 fa63 	bl	8018794 <iprintf>
 800f2ce:	e099      	b.n	800f404 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d106      	bne.n	800f2e6 <tcp_abandon+0x36>
 800f2d8:	4b4c      	ldr	r3, [pc, #304]	; (800f40c <tcp_abandon+0x15c>)
 800f2da:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f2de:	494e      	ldr	r1, [pc, #312]	; (800f418 <tcp_abandon+0x168>)
 800f2e0:	484c      	ldr	r0, [pc, #304]	; (800f414 <tcp_abandon+0x164>)
 800f2e2:	f009 fa57 	bl	8018794 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ea:	2b0a      	cmp	r3, #10
 800f2ec:	d107      	bne.n	800f2fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	484a      	ldr	r0, [pc, #296]	; (800f41c <tcp_abandon+0x16c>)
 800f2f2:	f001 f96f 	bl	80105d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7ff fd54 	bl	800eda4 <tcp_free>
 800f2fc:	e082      	b.n	800f404 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f30a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f310:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f318:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	691b      	ldr	r3, [r3, #16]
 800f31e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	7d1b      	ldrb	r3, [r3, #20]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d126      	bne.n	800f376 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	8adb      	ldrh	r3, [r3, #22]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d02e      	beq.n	800f38e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f330:	4b3b      	ldr	r3, [pc, #236]	; (800f420 <tcp_abandon+0x170>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	429a      	cmp	r2, r3
 800f338:	d105      	bne.n	800f346 <tcp_abandon+0x96>
 800f33a:	4b39      	ldr	r3, [pc, #228]	; (800f420 <tcp_abandon+0x170>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	4a37      	ldr	r2, [pc, #220]	; (800f420 <tcp_abandon+0x170>)
 800f342:	6013      	str	r3, [r2, #0]
 800f344:	e013      	b.n	800f36e <tcp_abandon+0xbe>
 800f346:	4b36      	ldr	r3, [pc, #216]	; (800f420 <tcp_abandon+0x170>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	61fb      	str	r3, [r7, #28]
 800f34c:	e00c      	b.n	800f368 <tcp_abandon+0xb8>
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	429a      	cmp	r2, r3
 800f356:	d104      	bne.n	800f362 <tcp_abandon+0xb2>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68da      	ldr	r2, [r3, #12]
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	60da      	str	r2, [r3, #12]
 800f360:	e005      	b.n	800f36e <tcp_abandon+0xbe>
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1ef      	bne.n	800f34e <tcp_abandon+0x9e>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	60da      	str	r2, [r3, #12]
 800f374:	e00b      	b.n	800f38e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	8adb      	ldrh	r3, [r3, #22]
 800f37e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4828      	ldr	r0, [pc, #160]	; (800f424 <tcp_abandon+0x174>)
 800f384:	f001 f926 	bl	80105d4 <tcp_pcb_remove>
 800f388:	4b27      	ldr	r3, [pc, #156]	; (800f428 <tcp_abandon+0x178>)
 800f38a:	2201      	movs	r2, #1
 800f38c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f392:	2b00      	cmp	r3, #0
 800f394:	d004      	beq.n	800f3a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 fdfa 	bl	800ff94 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d004      	beq.n	800f3b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f000 fdf1 	bl	800ff94 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d004      	beq.n	800f3c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fde8 	bl	800ff94 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00e      	beq.n	800f3e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f3ca:	6879      	ldr	r1, [r7, #4]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	8b12      	ldrh	r2, [r2, #24]
 800f3d4:	9202      	str	r2, [sp, #8]
 800f3d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f3d8:	9201      	str	r2, [sp, #4]
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	460b      	mov	r3, r1
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	69b9      	ldr	r1, [r7, #24]
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f005 fac6 	bl	8014974 <tcp_rst>
    }
    last_state = pcb->state;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	7d1b      	ldrb	r3, [r3, #20]
 800f3ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff fcd8 	bl	800eda4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <tcp_abandon+0x154>
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	f06f 010c 	mvn.w	r1, #12
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	4798      	blx	r3
  }
}
 800f404:	3728      	adds	r7, #40	; 0x28
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	0801afcc 	.word	0x0801afcc
 800f410:	0801b110 	.word	0x0801b110
 800f414:	0801b010 	.word	0x0801b010
 800f418:	0801b12c 	.word	0x0801b12c
 800f41c:	2000d8d8 	.word	0x2000d8d8
 800f420:	2000d8cc 	.word	0x2000d8cc
 800f424:	2000d8d4 	.word	0x2000d8d4
 800f428:	2000d8dc 	.word	0x2000d8dc

0800f42c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f434:	2101      	movs	r1, #1
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff ff3a 	bl	800f2b0 <tcp_abandon>
}
 800f43c:	bf00      	nop
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b088      	sub	sp, #32
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4613      	mov	r3, r2
 800f450:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f452:	2304      	movs	r3, #4
 800f454:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d101      	bne.n	800f460 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f45c:	4b3e      	ldr	r3, [pc, #248]	; (800f558 <tcp_bind+0x114>)
 800f45e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <tcp_bind+0x36>
 800f466:	4b3d      	ldr	r3, [pc, #244]	; (800f55c <tcp_bind+0x118>)
 800f468:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f46c:	493c      	ldr	r1, [pc, #240]	; (800f560 <tcp_bind+0x11c>)
 800f46e:	483d      	ldr	r0, [pc, #244]	; (800f564 <tcp_bind+0x120>)
 800f470:	f009 f990 	bl	8018794 <iprintf>
 800f474:	f06f 030f 	mvn.w	r3, #15
 800f478:	e06a      	b.n	800f550 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	7d1b      	ldrb	r3, [r3, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d009      	beq.n	800f496 <tcp_bind+0x52>
 800f482:	4b36      	ldr	r3, [pc, #216]	; (800f55c <tcp_bind+0x118>)
 800f484:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f488:	4937      	ldr	r1, [pc, #220]	; (800f568 <tcp_bind+0x124>)
 800f48a:	4836      	ldr	r0, [pc, #216]	; (800f564 <tcp_bind+0x120>)
 800f48c:	f009 f982 	bl	8018794 <iprintf>
 800f490:	f06f 0305 	mvn.w	r3, #5
 800f494:	e05c      	b.n	800f550 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f496:	88fb      	ldrh	r3, [r7, #6]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d109      	bne.n	800f4b0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f49c:	f000 f914 	bl	800f6c8 <tcp_new_port>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d135      	bne.n	800f516 <tcp_bind+0xd2>
      return ERR_BUF;
 800f4aa:	f06f 0301 	mvn.w	r3, #1
 800f4ae:	e04f      	b.n	800f550 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61fb      	str	r3, [r7, #28]
 800f4b4:	e02b      	b.n	800f50e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4b6:	4a2d      	ldr	r2, [pc, #180]	; (800f56c <tcp_bind+0x128>)
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	61bb      	str	r3, [r7, #24]
 800f4c2:	e01e      	b.n	800f502 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	8adb      	ldrh	r3, [r3, #22]
 800f4c8:	88fa      	ldrh	r2, [r7, #6]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d116      	bne.n	800f4fc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d010      	beq.n	800f4f6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00c      	beq.n	800f4f6 <tcp_bind+0xb2>
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d005      	beq.n	800f4f6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d102      	bne.n	800f4fc <tcp_bind+0xb8>
              return ERR_USE;
 800f4f6:	f06f 0307 	mvn.w	r3, #7
 800f4fa:	e029      	b.n	800f550 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	61bb      	str	r3, [r7, #24]
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1dd      	bne.n	800f4c4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	3301      	adds	r3, #1
 800f50c:	61fb      	str	r3, [r7, #28]
 800f50e:	69fa      	ldr	r2, [r7, #28]
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	429a      	cmp	r2, r3
 800f514:	dbcf      	blt.n	800f4b6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00c      	beq.n	800f536 <tcp_bind+0xf2>
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d008      	beq.n	800f536 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <tcp_bind+0xec>
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	e000      	b.n	800f532 <tcp_bind+0xee>
 800f530:	2300      	movs	r3, #0
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	88fa      	ldrh	r2, [r7, #6]
 800f53a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f53c:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <tcp_bind+0x12c>)
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	60da      	str	r2, [r3, #12]
 800f544:	4a0a      	ldr	r2, [pc, #40]	; (800f570 <tcp_bind+0x12c>)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6013      	str	r3, [r2, #0]
 800f54a:	f005 fbd5 	bl	8014cf8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	4618      	mov	r0, r3
 800f552:	3720      	adds	r7, #32
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	0801d014 	.word	0x0801d014
 800f55c:	0801afcc 	.word	0x0801afcc
 800f560:	0801b160 	.word	0x0801b160
 800f564:	0801b010 	.word	0x0801b010
 800f568:	0801b178 	.word	0x0801b178
 800f56c:	0801cfec 	.word	0x0801cfec
 800f570:	2000d8cc 	.word	0x2000d8cc

0800f574 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <tcp_update_rcv_ann_wnd+0x1c>
 800f582:	4b25      	ldr	r3, [pc, #148]	; (800f618 <tcp_update_rcv_ann_wnd+0xa4>)
 800f584:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f588:	4924      	ldr	r1, [pc, #144]	; (800f61c <tcp_update_rcv_ann_wnd+0xa8>)
 800f58a:	4825      	ldr	r0, [pc, #148]	; (800f620 <tcp_update_rcv_ann_wnd+0xac>)
 800f58c:	f009 f902 	bl	8018794 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f598:	4413      	add	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f5a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f5a8:	bf28      	it	cs
 800f5aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f5ae:	b292      	uxth	r2, r2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	db08      	blt.n	800f5cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	e020      	b.n	800f60e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dd03      	ble.n	800f5e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5e0:	e014      	b.n	800f60c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f4:	d306      	bcc.n	800f604 <tcp_update_rcv_ann_wnd+0x90>
 800f5f6:	4b08      	ldr	r3, [pc, #32]	; (800f618 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f5fc:	4909      	ldr	r1, [pc, #36]	; (800f624 <tcp_update_rcv_ann_wnd+0xb0>)
 800f5fe:	4808      	ldr	r0, [pc, #32]	; (800f620 <tcp_update_rcv_ann_wnd+0xac>)
 800f600:	f009 f8c8 	bl	8018794 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	b29a      	uxth	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f60c:	2300      	movs	r3, #0
  }
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	0801afcc 	.word	0x0801afcc
 800f61c:	0801b228 	.word	0x0801b228
 800f620:	0801b010 	.word	0x0801b010
 800f624:	0801b24c 	.word	0x0801b24c

0800f628 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d107      	bne.n	800f64a <tcp_recved+0x22>
 800f63a:	4b1f      	ldr	r3, [pc, #124]	; (800f6b8 <tcp_recved+0x90>)
 800f63c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f640:	491e      	ldr	r1, [pc, #120]	; (800f6bc <tcp_recved+0x94>)
 800f642:	481f      	ldr	r0, [pc, #124]	; (800f6c0 <tcp_recved+0x98>)
 800f644:	f009 f8a6 	bl	8018794 <iprintf>
 800f648:	e032      	b.n	800f6b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	7d1b      	ldrb	r3, [r3, #20]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d106      	bne.n	800f660 <tcp_recved+0x38>
 800f652:	4b19      	ldr	r3, [pc, #100]	; (800f6b8 <tcp_recved+0x90>)
 800f654:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f658:	491a      	ldr	r1, [pc, #104]	; (800f6c4 <tcp_recved+0x9c>)
 800f65a:	4819      	ldr	r0, [pc, #100]	; (800f6c0 <tcp_recved+0x98>)
 800f65c:	f009 f89a 	bl	8018794 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f664:	887b      	ldrh	r3, [r7, #2]
 800f666:	4413      	add	r3, r2
 800f668:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f66a:	89fb      	ldrh	r3, [r7, #14]
 800f66c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f670:	d804      	bhi.n	800f67c <tcp_recved+0x54>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f676:	89fa      	ldrh	r2, [r7, #14]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d204      	bcs.n	800f686 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f682:	851a      	strh	r2, [r3, #40]	; 0x28
 800f684:	e002      	b.n	800f68c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	89fa      	ldrh	r2, [r7, #14]
 800f68a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff ff71 	bl	800f574 <tcp_update_rcv_ann_wnd>
 800f692:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f69a:	d309      	bcc.n	800f6b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	8b5b      	ldrh	r3, [r3, #26]
 800f6a0:	f043 0302 	orr.w	r3, r3, #2
 800f6a4:	b29a      	uxth	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f004 fbae 	bl	8013e0c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	0801afcc 	.word	0x0801afcc
 800f6bc:	0801b268 	.word	0x0801b268
 800f6c0:	0801b010 	.word	0x0801b010
 800f6c4:	0801b280 	.word	0x0801b280

0800f6c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f6d2:	4b1e      	ldr	r3, [pc, #120]	; (800f74c <tcp_new_port+0x84>)
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	4b1c      	ldr	r3, [pc, #112]	; (800f74c <tcp_new_port+0x84>)
 800f6dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f6de:	4b1b      	ldr	r3, [pc, #108]	; (800f74c <tcp_new_port+0x84>)
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d103      	bne.n	800f6f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f6ea:	4b18      	ldr	r3, [pc, #96]	; (800f74c <tcp_new_port+0x84>)
 800f6ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f6f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	71fb      	strb	r3, [r7, #7]
 800f6f6:	e01e      	b.n	800f736 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6f8:	79fb      	ldrb	r3, [r7, #7]
 800f6fa:	4a15      	ldr	r2, [pc, #84]	; (800f750 <tcp_new_port+0x88>)
 800f6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	603b      	str	r3, [r7, #0]
 800f704:	e011      	b.n	800f72a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	8ada      	ldrh	r2, [r3, #22]
 800f70a:	4b10      	ldr	r3, [pc, #64]	; (800f74c <tcp_new_port+0x84>)
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d108      	bne.n	800f724 <tcp_new_port+0x5c>
        n++;
 800f712:	88bb      	ldrh	r3, [r7, #4]
 800f714:	3301      	adds	r3, #1
 800f716:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f718:	88bb      	ldrh	r3, [r7, #4]
 800f71a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f71e:	d3d8      	bcc.n	800f6d2 <tcp_new_port+0xa>
          return 0;
 800f720:	2300      	movs	r3, #0
 800f722:	e00d      	b.n	800f740 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	603b      	str	r3, [r7, #0]
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d1ea      	bne.n	800f706 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	3301      	adds	r3, #1
 800f734:	71fb      	strb	r3, [r7, #7]
 800f736:	79fb      	ldrb	r3, [r7, #7]
 800f738:	2b03      	cmp	r3, #3
 800f73a:	d9dd      	bls.n	800f6f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f73c:	4b03      	ldr	r3, [pc, #12]	; (800f74c <tcp_new_port+0x84>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
}
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr
 800f74c:	200000a4 	.word	0x200000a4
 800f750:	0801cfec 	.word	0x0801cfec

0800f754 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f754:	b5b0      	push	{r4, r5, r7, lr}
 800f756:	b090      	sub	sp, #64	; 0x40
 800f758:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f75a:	2300      	movs	r3, #0
 800f75c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f760:	4b94      	ldr	r3, [pc, #592]	; (800f9b4 <tcp_slowtmr+0x260>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	3301      	adds	r3, #1
 800f766:	4a93      	ldr	r2, [pc, #588]	; (800f9b4 <tcp_slowtmr+0x260>)
 800f768:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f76a:	4b93      	ldr	r3, [pc, #588]	; (800f9b8 <tcp_slowtmr+0x264>)
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	3301      	adds	r3, #1
 800f770:	b2da      	uxtb	r2, r3
 800f772:	4b91      	ldr	r3, [pc, #580]	; (800f9b8 <tcp_slowtmr+0x264>)
 800f774:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f77a:	4b90      	ldr	r3, [pc, #576]	; (800f9bc <tcp_slowtmr+0x268>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f780:	e29f      	b.n	800fcc2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f784:	7d1b      	ldrb	r3, [r3, #20]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d106      	bne.n	800f798 <tcp_slowtmr+0x44>
 800f78a:	4b8d      	ldr	r3, [pc, #564]	; (800f9c0 <tcp_slowtmr+0x26c>)
 800f78c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f790:	498c      	ldr	r1, [pc, #560]	; (800f9c4 <tcp_slowtmr+0x270>)
 800f792:	488d      	ldr	r0, [pc, #564]	; (800f9c8 <tcp_slowtmr+0x274>)
 800f794:	f008 fffe 	bl	8018794 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79a:	7d1b      	ldrb	r3, [r3, #20]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d106      	bne.n	800f7ae <tcp_slowtmr+0x5a>
 800f7a0:	4b87      	ldr	r3, [pc, #540]	; (800f9c0 <tcp_slowtmr+0x26c>)
 800f7a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f7a6:	4989      	ldr	r1, [pc, #548]	; (800f9cc <tcp_slowtmr+0x278>)
 800f7a8:	4887      	ldr	r0, [pc, #540]	; (800f9c8 <tcp_slowtmr+0x274>)
 800f7aa:	f008 fff3 	bl	8018794 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b0:	7d1b      	ldrb	r3, [r3, #20]
 800f7b2:	2b0a      	cmp	r3, #10
 800f7b4:	d106      	bne.n	800f7c4 <tcp_slowtmr+0x70>
 800f7b6:	4b82      	ldr	r3, [pc, #520]	; (800f9c0 <tcp_slowtmr+0x26c>)
 800f7b8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f7bc:	4984      	ldr	r1, [pc, #528]	; (800f9d0 <tcp_slowtmr+0x27c>)
 800f7be:	4882      	ldr	r0, [pc, #520]	; (800f9c8 <tcp_slowtmr+0x274>)
 800f7c0:	f008 ffe8 	bl	8018794 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c6:	7f9a      	ldrb	r2, [r3, #30]
 800f7c8:	4b7b      	ldr	r3, [pc, #492]	; (800f9b8 <tcp_slowtmr+0x264>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d105      	bne.n	800f7dc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f7da:	e272      	b.n	800fcc2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f7dc:	4b76      	ldr	r3, [pc, #472]	; (800f9b8 <tcp_slowtmr+0x264>)
 800f7de:	781a      	ldrb	r2, [r3, #0]
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	7d1b      	ldrb	r3, [r3, #20]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d10a      	bne.n	800f80e <tcp_slowtmr+0xba>
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7fe:	2b05      	cmp	r3, #5
 800f800:	d905      	bls.n	800f80e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f806:	3301      	adds	r3, #1
 800f808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f80c:	e11e      	b.n	800fa4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f814:	2b0b      	cmp	r3, #11
 800f816:	d905      	bls.n	800f824 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f81c:	3301      	adds	r3, #1
 800f81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f822:	e113      	b.n	800fa4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d075      	beq.n	800f91a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f832:	2b00      	cmp	r3, #0
 800f834:	d006      	beq.n	800f844 <tcp_slowtmr+0xf0>
 800f836:	4b62      	ldr	r3, [pc, #392]	; (800f9c0 <tcp_slowtmr+0x26c>)
 800f838:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f83c:	4965      	ldr	r1, [pc, #404]	; (800f9d4 <tcp_slowtmr+0x280>)
 800f83e:	4862      	ldr	r0, [pc, #392]	; (800f9c8 <tcp_slowtmr+0x274>)
 800f840:	f008 ffa8 	bl	8018794 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d106      	bne.n	800f85a <tcp_slowtmr+0x106>
 800f84c:	4b5c      	ldr	r3, [pc, #368]	; (800f9c0 <tcp_slowtmr+0x26c>)
 800f84e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f852:	4961      	ldr	r1, [pc, #388]	; (800f9d8 <tcp_slowtmr+0x284>)
 800f854:	485c      	ldr	r0, [pc, #368]	; (800f9c8 <tcp_slowtmr+0x274>)
 800f856:	f008 ff9d 	bl	8018794 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f860:	2b0b      	cmp	r3, #11
 800f862:	d905      	bls.n	800f870 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f868:	3301      	adds	r3, #1
 800f86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f86e:	e0ed      	b.n	800fa4c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f876:	3b01      	subs	r3, #1
 800f878:	4a58      	ldr	r2, [pc, #352]	; (800f9dc <tcp_slowtmr+0x288>)
 800f87a:	5cd3      	ldrb	r3, [r2, r3]
 800f87c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f884:	7c7a      	ldrb	r2, [r7, #17]
 800f886:	429a      	cmp	r2, r3
 800f888:	d907      	bls.n	800f89a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f890:	3301      	adds	r3, #1
 800f892:	b2da      	uxtb	r2, r3
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8a0:	7c7a      	ldrb	r2, [r7, #17]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	f200 80d2 	bhi.w	800fa4c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d108      	bne.n	800f8c8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f8b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8b8:	f005 f950 	bl	8014b5c <tcp_zero_window_probe>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d014      	beq.n	800f8ec <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	623b      	str	r3, [r7, #32]
 800f8c6:	e011      	b.n	800f8ec <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8d2:	f004 f815 	bl	8013900 <tcp_split_unsent_seg>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d107      	bne.n	800f8ec <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8de:	f004 fa95 	bl	8013e0c <tcp_output>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f000 80ac 	beq.w	800fa4c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f902:	2b06      	cmp	r3, #6
 800f904:	f200 80a2 	bhi.w	800fa4c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f90e:	3301      	adds	r3, #1
 800f910:	b2da      	uxtb	r2, r3
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f918:	e098      	b.n	800fa4c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f920:	2b00      	cmp	r3, #0
 800f922:	db0f      	blt.n	800f944 <tcp_slowtmr+0x1f0>
 800f924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f926:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f92a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f92e:	4293      	cmp	r3, r2
 800f930:	d008      	beq.n	800f944 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f934:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f938:	b29b      	uxth	r3, r3
 800f93a:	3301      	adds	r3, #1
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	b21a      	sxth	r2, r3
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f946:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f950:	429a      	cmp	r2, r3
 800f952:	db7b      	blt.n	800fa4c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f956:	f004 fd4b 	bl	80143f0 <tcp_rexmit_rto_prepare>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d007      	beq.n	800f970 <tcp_slowtmr+0x21c>
 800f960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f964:	2b00      	cmp	r3, #0
 800f966:	d171      	bne.n	800fa4c <tcp_slowtmr+0x2f8>
 800f968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d06d      	beq.n	800fa4c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b02      	cmp	r3, #2
 800f976:	d03a      	beq.n	800f9ee <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f97e:	2b0c      	cmp	r3, #12
 800f980:	bf28      	it	cs
 800f982:	230c      	movcs	r3, #12
 800f984:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f988:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f98c:	10db      	asrs	r3, r3, #3
 800f98e:	b21b      	sxth	r3, r3
 800f990:	461a      	mov	r2, r3
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f998:	4413      	add	r3, r2
 800f99a:	7efa      	ldrb	r2, [r7, #27]
 800f99c:	4910      	ldr	r1, [pc, #64]	; (800f9e0 <tcp_slowtmr+0x28c>)
 800f99e:	5c8a      	ldrb	r2, [r1, r2]
 800f9a0:	4093      	lsls	r3, r2
 800f9a2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	dc1a      	bgt.n	800f9e4 <tcp_slowtmr+0x290>
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	b21a      	sxth	r2, r3
 800f9b2:	e019      	b.n	800f9e8 <tcp_slowtmr+0x294>
 800f9b4:	2000d8c8 	.word	0x2000d8c8
 800f9b8:	2000d8de 	.word	0x2000d8de
 800f9bc:	2000d8d4 	.word	0x2000d8d4
 800f9c0:	0801afcc 	.word	0x0801afcc
 800f9c4:	0801b310 	.word	0x0801b310
 800f9c8:	0801b010 	.word	0x0801b010
 800f9cc:	0801b33c 	.word	0x0801b33c
 800f9d0:	0801b368 	.word	0x0801b368
 800f9d4:	0801b398 	.word	0x0801b398
 800f9d8:	0801b3cc 	.word	0x0801b3cc
 800f9dc:	0801cfe4 	.word	0x0801cfe4
 800f9e0:	0801cfd4 	.word	0x0801cfd4
 800f9e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa00:	4293      	cmp	r3, r2
 800fa02:	bf28      	it	cs
 800fa04:	4613      	movcs	r3, r2
 800fa06:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fa08:	8a7b      	ldrh	r3, [r7, #18]
 800fa0a:	085b      	lsrs	r3, r3, #1
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d206      	bcs.n	800fa34 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa36:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	2200      	movs	r2, #0
 800fa42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fa46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa48:	f004 fd42 	bl	80144d0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4e:	7d1b      	ldrb	r3, [r3, #20]
 800fa50:	2b06      	cmp	r3, #6
 800fa52:	d111      	bne.n	800fa78 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	8b5b      	ldrh	r3, [r3, #26]
 800fa58:	f003 0310 	and.w	r3, r3, #16
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d00b      	beq.n	800fa78 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa60:	4b9d      	ldr	r3, [pc, #628]	; (800fcd8 <tcp_slowtmr+0x584>)
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	6a1b      	ldr	r3, [r3, #32]
 800fa68:	1ad3      	subs	r3, r2, r3
 800fa6a:	2b28      	cmp	r3, #40	; 0x28
 800fa6c:	d904      	bls.n	800fa78 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fa6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa72:	3301      	adds	r3, #1
 800fa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	7a5b      	ldrb	r3, [r3, #9]
 800fa7c:	f003 0308 	and.w	r3, r3, #8
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d04c      	beq.n	800fb1e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa86:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa88:	2b04      	cmp	r3, #4
 800fa8a:	d003      	beq.n	800fa94 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fa90:	2b07      	cmp	r3, #7
 800fa92:	d144      	bne.n	800fb1e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa94:	4b90      	ldr	r3, [pc, #576]	; (800fcd8 <tcp_slowtmr+0x584>)
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
 800fa9c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800faa4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800faa8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800faac:	498b      	ldr	r1, [pc, #556]	; (800fcdc <tcp_slowtmr+0x588>)
 800faae:	fba1 1303 	umull	r1, r3, r1, r3
 800fab2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d90a      	bls.n	800face <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fabc:	3301      	adds	r3, #1
 800fabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fac6:	3301      	adds	r3, #1
 800fac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800facc:	e027      	b.n	800fb1e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800face:	4b82      	ldr	r3, [pc, #520]	; (800fcd8 <tcp_slowtmr+0x584>)
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad4:	6a1b      	ldr	r3, [r3, #32]
 800fad6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fae4:	4618      	mov	r0, r3
 800fae6:	4b7e      	ldr	r3, [pc, #504]	; (800fce0 <tcp_slowtmr+0x58c>)
 800fae8:	fb00 f303 	mul.w	r3, r0, r3
 800faec:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800faee:	497b      	ldr	r1, [pc, #492]	; (800fcdc <tcp_slowtmr+0x588>)
 800faf0:	fba1 1303 	umull	r1, r3, r1, r3
 800faf4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d911      	bls.n	800fb1e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fafa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fafc:	f004 ffee 	bl	8014adc <tcp_keepalive>
 800fb00:	4603      	mov	r3, r0
 800fb02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fb06:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d107      	bne.n	800fb1e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb14:	3301      	adds	r3, #1
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d011      	beq.n	800fb4a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fb26:	4b6c      	ldr	r3, [pc, #432]	; (800fcd8 <tcp_slowtmr+0x584>)
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	1ad2      	subs	r2, r2, r3
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb36:	4619      	mov	r1, r3
 800fb38:	460b      	mov	r3, r1
 800fb3a:	005b      	lsls	r3, r3, #1
 800fb3c:	440b      	add	r3, r1
 800fb3e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d302      	bcc.n	800fb4a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fb44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb46:	f000 fea9 	bl	801089c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	7d1b      	ldrb	r3, [r3, #20]
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d10b      	bne.n	800fb6a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb52:	4b61      	ldr	r3, [pc, #388]	; (800fcd8 <tcp_slowtmr+0x584>)
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	2b28      	cmp	r3, #40	; 0x28
 800fb5e:	d904      	bls.n	800fb6a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fb60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb64:	3301      	adds	r3, #1
 800fb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6c:	7d1b      	ldrb	r3, [r3, #20]
 800fb6e:	2b09      	cmp	r3, #9
 800fb70:	d10b      	bne.n	800fb8a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fb72:	4b59      	ldr	r3, [pc, #356]	; (800fcd8 <tcp_slowtmr+0x584>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	2bf0      	cmp	r3, #240	; 0xf0
 800fb7e:	d904      	bls.n	800fb8a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb84:	3301      	adds	r3, #1
 800fb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fb8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d060      	beq.n	800fc54 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb98:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fb9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb9c:	f000 fcca 	bl	8010534 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d010      	beq.n	800fbc8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fba6:	4b4f      	ldr	r3, [pc, #316]	; (800fce4 <tcp_slowtmr+0x590>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d106      	bne.n	800fbbe <tcp_slowtmr+0x46a>
 800fbb0:	4b4d      	ldr	r3, [pc, #308]	; (800fce8 <tcp_slowtmr+0x594>)
 800fbb2:	f240 526d 	movw	r2, #1389	; 0x56d
 800fbb6:	494d      	ldr	r1, [pc, #308]	; (800fcec <tcp_slowtmr+0x598>)
 800fbb8:	484d      	ldr	r0, [pc, #308]	; (800fcf0 <tcp_slowtmr+0x59c>)
 800fbba:	f008 fdeb 	bl	8018794 <iprintf>
        prev->next = pcb->next;
 800fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc0:	68da      	ldr	r2, [r3, #12]
 800fbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc4:	60da      	str	r2, [r3, #12]
 800fbc6:	e00f      	b.n	800fbe8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fbc8:	4b46      	ldr	r3, [pc, #280]	; (800fce4 <tcp_slowtmr+0x590>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d006      	beq.n	800fbe0 <tcp_slowtmr+0x48c>
 800fbd2:	4b45      	ldr	r3, [pc, #276]	; (800fce8 <tcp_slowtmr+0x594>)
 800fbd4:	f240 5271 	movw	r2, #1393	; 0x571
 800fbd8:	4946      	ldr	r1, [pc, #280]	; (800fcf4 <tcp_slowtmr+0x5a0>)
 800fbda:	4845      	ldr	r0, [pc, #276]	; (800fcf0 <tcp_slowtmr+0x59c>)
 800fbdc:	f008 fdda 	bl	8018794 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	4a3f      	ldr	r2, [pc, #252]	; (800fce4 <tcp_slowtmr+0x590>)
 800fbe6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fbe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d013      	beq.n	800fc18 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fbf8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfc:	3304      	adds	r3, #4
 800fbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc00:	8ad2      	ldrh	r2, [r2, #22]
 800fc02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc04:	8b09      	ldrh	r1, [r1, #24]
 800fc06:	9102      	str	r1, [sp, #8]
 800fc08:	9201      	str	r2, [sp, #4]
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	462b      	mov	r3, r5
 800fc0e:	4622      	mov	r2, r4
 800fc10:	4601      	mov	r1, r0
 800fc12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc14:	f004 feae 	bl	8014974 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	7d1b      	ldrb	r3, [r3, #20]
 800fc22:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc26:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc2e:	6838      	ldr	r0, [r7, #0]
 800fc30:	f7ff f8b8 	bl	800eda4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fc34:	4b30      	ldr	r3, [pc, #192]	; (800fcf8 <tcp_slowtmr+0x5a4>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d004      	beq.n	800fc4a <tcp_slowtmr+0x4f6>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f06f 010c 	mvn.w	r1, #12
 800fc46:	68b8      	ldr	r0, [r7, #8]
 800fc48:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fc4a:	4b2b      	ldr	r3, [pc, #172]	; (800fcf8 <tcp_slowtmr+0x5a4>)
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d037      	beq.n	800fcc2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fc52:	e590      	b.n	800f776 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	7f1b      	ldrb	r3, [r3, #28]
 800fc62:	3301      	adds	r3, #1
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc68:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6c:	7f1a      	ldrb	r2, [r3, #28]
 800fc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc70:	7f5b      	ldrb	r3, [r3, #29]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d325      	bcc.n	800fcc2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	2200      	movs	r2, #0
 800fc7a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fc7c:	4b1e      	ldr	r3, [pc, #120]	; (800fcf8 <tcp_slowtmr+0x5a4>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <tcp_slowtmr+0x550>
 800fc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc94:	6912      	ldr	r2, [r2, #16]
 800fc96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc98:	4610      	mov	r0, r2
 800fc9a:	4798      	blx	r3
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fca2:	e002      	b.n	800fcaa <tcp_slowtmr+0x556>
 800fca4:	2300      	movs	r3, #0
 800fca6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fcaa:	4b13      	ldr	r3, [pc, #76]	; (800fcf8 <tcp_slowtmr+0x5a4>)
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d000      	beq.n	800fcb4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fcb2:	e560      	b.n	800f776 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fcb4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d102      	bne.n	800fcc2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fcbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcbe:	f004 f8a5 	bl	8013e0c <tcp_output>
  while (pcb != NULL) {
 800fcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f47f ad5c 	bne.w	800f782 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fcca:	2300      	movs	r3, #0
 800fccc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fcce:	4b0b      	ldr	r3, [pc, #44]	; (800fcfc <tcp_slowtmr+0x5a8>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fcd4:	e067      	b.n	800fda6 <tcp_slowtmr+0x652>
 800fcd6:	bf00      	nop
 800fcd8:	2000d8c8 	.word	0x2000d8c8
 800fcdc:	10624dd3 	.word	0x10624dd3
 800fce0:	000124f8 	.word	0x000124f8
 800fce4:	2000d8d4 	.word	0x2000d8d4
 800fce8:	0801afcc 	.word	0x0801afcc
 800fcec:	0801b404 	.word	0x0801b404
 800fcf0:	0801b010 	.word	0x0801b010
 800fcf4:	0801b430 	.word	0x0801b430
 800fcf8:	2000d8dc 	.word	0x2000d8dc
 800fcfc:	2000d8d8 	.word	0x2000d8d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	7d1b      	ldrb	r3, [r3, #20]
 800fd04:	2b0a      	cmp	r3, #10
 800fd06:	d006      	beq.n	800fd16 <tcp_slowtmr+0x5c2>
 800fd08:	4b2b      	ldr	r3, [pc, #172]	; (800fdb8 <tcp_slowtmr+0x664>)
 800fd0a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fd0e:	492b      	ldr	r1, [pc, #172]	; (800fdbc <tcp_slowtmr+0x668>)
 800fd10:	482b      	ldr	r0, [pc, #172]	; (800fdc0 <tcp_slowtmr+0x66c>)
 800fd12:	f008 fd3f 	bl	8018794 <iprintf>
    pcb_remove = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd1c:	4b29      	ldr	r3, [pc, #164]	; (800fdc4 <tcp_slowtmr+0x670>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd22:	6a1b      	ldr	r3, [r3, #32]
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	2bf0      	cmp	r3, #240	; 0xf0
 800fd28:	d904      	bls.n	800fd34 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fd2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd2e:	3301      	adds	r3, #1
 800fd30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d02f      	beq.n	800fd9c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fd3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd3e:	f000 fbf9 	bl	8010534 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d010      	beq.n	800fd6a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fd48:	4b1f      	ldr	r3, [pc, #124]	; (800fdc8 <tcp_slowtmr+0x674>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d106      	bne.n	800fd60 <tcp_slowtmr+0x60c>
 800fd52:	4b19      	ldr	r3, [pc, #100]	; (800fdb8 <tcp_slowtmr+0x664>)
 800fd54:	f240 52af 	movw	r2, #1455	; 0x5af
 800fd58:	491c      	ldr	r1, [pc, #112]	; (800fdcc <tcp_slowtmr+0x678>)
 800fd5a:	4819      	ldr	r0, [pc, #100]	; (800fdc0 <tcp_slowtmr+0x66c>)
 800fd5c:	f008 fd1a 	bl	8018794 <iprintf>
        prev->next = pcb->next;
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	68da      	ldr	r2, [r3, #12]
 800fd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd66:	60da      	str	r2, [r3, #12]
 800fd68:	e00f      	b.n	800fd8a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fd6a:	4b17      	ldr	r3, [pc, #92]	; (800fdc8 <tcp_slowtmr+0x674>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d006      	beq.n	800fd82 <tcp_slowtmr+0x62e>
 800fd74:	4b10      	ldr	r3, [pc, #64]	; (800fdb8 <tcp_slowtmr+0x664>)
 800fd76:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fd7a:	4915      	ldr	r1, [pc, #84]	; (800fdd0 <tcp_slowtmr+0x67c>)
 800fd7c:	4810      	ldr	r0, [pc, #64]	; (800fdc0 <tcp_slowtmr+0x66c>)
 800fd7e:	f008 fd09 	bl	8018794 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	4a10      	ldr	r2, [pc, #64]	; (800fdc8 <tcp_slowtmr+0x674>)
 800fd88:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd94:	69f8      	ldr	r0, [r7, #28]
 800fd96:	f7ff f805 	bl	800eda4 <tcp_free>
 800fd9a:	e004      	b.n	800fda6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d1a9      	bne.n	800fd00 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fdac:	bf00      	nop
 800fdae:	bf00      	nop
 800fdb0:	3730      	adds	r7, #48	; 0x30
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bdb0      	pop	{r4, r5, r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	0801afcc 	.word	0x0801afcc
 800fdbc:	0801b45c 	.word	0x0801b45c
 800fdc0:	0801b010 	.word	0x0801b010
 800fdc4:	2000d8c8 	.word	0x2000d8c8
 800fdc8:	2000d8d8 	.word	0x2000d8d8
 800fdcc:	0801b48c 	.word	0x0801b48c
 800fdd0:	0801b4b4 	.word	0x0801b4b4

0800fdd4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fdda:	4b2d      	ldr	r3, [pc, #180]	; (800fe90 <tcp_fasttmr+0xbc>)
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	3301      	adds	r3, #1
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	4b2b      	ldr	r3, [pc, #172]	; (800fe90 <tcp_fasttmr+0xbc>)
 800fde4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fde6:	4b2b      	ldr	r3, [pc, #172]	; (800fe94 <tcp_fasttmr+0xc0>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fdec:	e048      	b.n	800fe80 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	7f9a      	ldrb	r2, [r3, #30]
 800fdf2:	4b27      	ldr	r3, [pc, #156]	; (800fe90 <tcp_fasttmr+0xbc>)
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d03f      	beq.n	800fe7a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fdfa:	4b25      	ldr	r3, [pc, #148]	; (800fe90 <tcp_fasttmr+0xbc>)
 800fdfc:	781a      	ldrb	r2, [r3, #0]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8b5b      	ldrh	r3, [r3, #26]
 800fe06:	f003 0301 	and.w	r3, r3, #1
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d010      	beq.n	800fe30 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	8b5b      	ldrh	r3, [r3, #26]
 800fe12:	f043 0302 	orr.w	r3, r3, #2
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f003 fff5 	bl	8013e0c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	8b5b      	ldrh	r3, [r3, #26]
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	8b5b      	ldrh	r3, [r3, #26]
 800fe34:	f003 0308 	and.w	r3, r3, #8
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d009      	beq.n	800fe50 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	8b5b      	ldrh	r3, [r3, #26]
 800fe40:	f023 0308 	bic.w	r3, r3, #8
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff f93e 	bl	800f0cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00a      	beq.n	800fe74 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	; (800fe98 <tcp_fasttmr+0xc4>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f819 	bl	800fe9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fe6a:	4b0b      	ldr	r3, [pc, #44]	; (800fe98 <tcp_fasttmr+0xc4>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d000      	beq.n	800fe74 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fe72:	e7b8      	b.n	800fde6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	607b      	str	r3, [r7, #4]
 800fe78:	e002      	b.n	800fe80 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1b3      	bne.n	800fdee <tcp_fasttmr+0x1a>
    }
  }
}
 800fe86:	bf00      	nop
 800fe88:	bf00      	nop
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	2000d8de 	.word	0x2000d8de
 800fe94:	2000d8d4 	.word	0x2000d8d4
 800fe98:	2000d8dc 	.word	0x2000d8dc

0800fe9c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fe9c:	b590      	push	{r4, r7, lr}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d109      	bne.n	800febe <tcp_process_refused_data+0x22>
 800feaa:	4b37      	ldr	r3, [pc, #220]	; (800ff88 <tcp_process_refused_data+0xec>)
 800feac:	f240 6209 	movw	r2, #1545	; 0x609
 800feb0:	4936      	ldr	r1, [pc, #216]	; (800ff8c <tcp_process_refused_data+0xf0>)
 800feb2:	4837      	ldr	r0, [pc, #220]	; (800ff90 <tcp_process_refused_data+0xf4>)
 800feb4:	f008 fc6e 	bl	8018794 <iprintf>
 800feb8:	f06f 030f 	mvn.w	r3, #15
 800febc:	e060      	b.n	800ff80 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec2:	7b5b      	ldrb	r3, [r3, #13]
 800fec4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2200      	movs	r2, #0
 800fed0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00b      	beq.n	800fef4 <tcp_process_refused_data+0x58>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6918      	ldr	r0, [r3, #16]
 800fee6:	2300      	movs	r3, #0
 800fee8:	68ba      	ldr	r2, [r7, #8]
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	47a0      	blx	r4
 800feee:	4603      	mov	r3, r0
 800fef0:	73fb      	strb	r3, [r7, #15]
 800fef2:	e007      	b.n	800ff04 <tcp_process_refused_data+0x68>
 800fef4:	2300      	movs	r3, #0
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	6879      	ldr	r1, [r7, #4]
 800fefa:	2000      	movs	r0, #0
 800fefc:	f000 f8a4 	bl	8010048 <tcp_recv_null>
 800ff00:	4603      	mov	r3, r0
 800ff02:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d12a      	bne.n	800ff62 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
 800ff0e:	f003 0320 	and.w	r3, r3, #32
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d033      	beq.n	800ff7e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ff1e:	d005      	beq.n	800ff2c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff24:	3301      	adds	r3, #1
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00b      	beq.n	800ff4e <tcp_process_refused_data+0xb2>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6918      	ldr	r0, [r3, #16]
 800ff40:	2300      	movs	r3, #0
 800ff42:	2200      	movs	r2, #0
 800ff44:	6879      	ldr	r1, [r7, #4]
 800ff46:	47a0      	blx	r4
 800ff48:	4603      	mov	r3, r0
 800ff4a:	73fb      	strb	r3, [r7, #15]
 800ff4c:	e001      	b.n	800ff52 <tcp_process_refused_data+0xb6>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ff52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff56:	f113 0f0d 	cmn.w	r3, #13
 800ff5a:	d110      	bne.n	800ff7e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ff5c:	f06f 030c 	mvn.w	r3, #12
 800ff60:	e00e      	b.n	800ff80 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ff62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff66:	f113 0f0d 	cmn.w	r3, #13
 800ff6a:	d102      	bne.n	800ff72 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ff6c:	f06f 030c 	mvn.w	r3, #12
 800ff70:	e006      	b.n	800ff80 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ff78:	f06f 0304 	mvn.w	r3, #4
 800ff7c:	e000      	b.n	800ff80 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3714      	adds	r7, #20
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd90      	pop	{r4, r7, pc}
 800ff88:	0801afcc 	.word	0x0801afcc
 800ff8c:	0801b4dc 	.word	0x0801b4dc
 800ff90:	0801b010 	.word	0x0801b010

0800ff94 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ff9c:	e007      	b.n	800ffae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f000 f80a 	bl	800ffbe <tcp_seg_free>
    seg = next;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1f4      	bne.n	800ff9e <tcp_segs_free+0xa>
  }
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00c      	beq.n	800ffe6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d004      	beq.n	800ffde <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fe fc27 	bl	800e82c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ffde:	6879      	ldr	r1, [r7, #4]
 800ffe0:	2003      	movs	r0, #3
 800ffe2:	f7fd fde3 	bl	800dbac <memp_free>
  }
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d106      	bne.n	801000c <tcp_seg_copy+0x1c>
 800fffe:	4b0f      	ldr	r3, [pc, #60]	; (801003c <tcp_seg_copy+0x4c>)
 8010000:	f240 6282 	movw	r2, #1666	; 0x682
 8010004:	490e      	ldr	r1, [pc, #56]	; (8010040 <tcp_seg_copy+0x50>)
 8010006:	480f      	ldr	r0, [pc, #60]	; (8010044 <tcp_seg_copy+0x54>)
 8010008:	f008 fbc4 	bl	8018794 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801000c:	2003      	movs	r0, #3
 801000e:	f7fd fd7b 	bl	800db08 <memp_malloc>
 8010012:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d101      	bne.n	801001e <tcp_seg_copy+0x2e>
    return NULL;
 801001a:	2300      	movs	r3, #0
 801001c:	e00a      	b.n	8010034 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801001e:	2210      	movs	r2, #16
 8010020:	6879      	ldr	r1, [r7, #4]
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	f008 faa6 	bl	8018574 <memcpy>
  pbuf_ref(cseg->p);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe fca3 	bl	800e978 <pbuf_ref>
  return cseg;
 8010032:	68fb      	ldr	r3, [r7, #12]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	0801afcc 	.word	0x0801afcc
 8010040:	0801b520 	.word	0x0801b520
 8010044:	0801b010 	.word	0x0801b010

08010048 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	60b9      	str	r1, [r7, #8]
 8010052:	607a      	str	r2, [r7, #4]
 8010054:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d109      	bne.n	8010070 <tcp_recv_null+0x28>
 801005c:	4b12      	ldr	r3, [pc, #72]	; (80100a8 <tcp_recv_null+0x60>)
 801005e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010062:	4912      	ldr	r1, [pc, #72]	; (80100ac <tcp_recv_null+0x64>)
 8010064:	4812      	ldr	r0, [pc, #72]	; (80100b0 <tcp_recv_null+0x68>)
 8010066:	f008 fb95 	bl	8018794 <iprintf>
 801006a:	f06f 030f 	mvn.w	r3, #15
 801006e:	e016      	b.n	801009e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d009      	beq.n	801008a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	891b      	ldrh	r3, [r3, #8]
 801007a:	4619      	mov	r1, r3
 801007c:	68b8      	ldr	r0, [r7, #8]
 801007e:	f7ff fad3 	bl	800f628 <tcp_recved>
    pbuf_free(p);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7fe fbd2 	bl	800e82c <pbuf_free>
 8010088:	e008      	b.n	801009c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801008a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d104      	bne.n	801009c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010092:	68b8      	ldr	r0, [r7, #8]
 8010094:	f7ff f884 	bl	800f1a0 <tcp_close>
 8010098:	4603      	mov	r3, r0
 801009a:	e000      	b.n	801009e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	0801afcc 	.word	0x0801afcc
 80100ac:	0801b53c 	.word	0x0801b53c
 80100b0:	0801b010 	.word	0x0801b010

080100b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b086      	sub	sp, #24
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	4603      	mov	r3, r0
 80100bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80100be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	db01      	blt.n	80100ca <tcp_kill_prio+0x16>
 80100c6:	79fb      	ldrb	r3, [r7, #7]
 80100c8:	e000      	b.n	80100cc <tcp_kill_prio+0x18>
 80100ca:	237f      	movs	r3, #127	; 0x7f
 80100cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80100ce:	7afb      	ldrb	r3, [r7, #11]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d034      	beq.n	801013e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80100d4:	7afb      	ldrb	r3, [r7, #11]
 80100d6:	3b01      	subs	r3, #1
 80100d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100e2:	4b19      	ldr	r3, [pc, #100]	; (8010148 <tcp_kill_prio+0x94>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	617b      	str	r3, [r7, #20]
 80100e8:	e01f      	b.n	801012a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	7d5b      	ldrb	r3, [r3, #21]
 80100ee:	7afa      	ldrb	r2, [r7, #11]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d80c      	bhi.n	801010e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80100f8:	7afa      	ldrb	r2, [r7, #11]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d112      	bne.n	8010124 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80100fe:	4b13      	ldr	r3, [pc, #76]	; (801014c <tcp_kill_prio+0x98>)
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	6a1b      	ldr	r3, [r3, #32]
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	429a      	cmp	r2, r3
 801010c:	d80a      	bhi.n	8010124 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801010e:	4b0f      	ldr	r3, [pc, #60]	; (801014c <tcp_kill_prio+0x98>)
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	7d5b      	ldrb	r3, [r3, #21]
 8010122:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	617b      	str	r3, [r7, #20]
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d1dc      	bne.n	80100ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d004      	beq.n	8010140 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010136:	6938      	ldr	r0, [r7, #16]
 8010138:	f7ff f978 	bl	800f42c <tcp_abort>
 801013c:	e000      	b.n	8010140 <tcp_kill_prio+0x8c>
    return;
 801013e:	bf00      	nop
  }
}
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	2000d8d4 	.word	0x2000d8d4
 801014c:	2000d8c8 	.word	0x2000d8c8

08010150 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	4603      	mov	r3, r0
 8010158:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801015a:	79fb      	ldrb	r3, [r7, #7]
 801015c:	2b08      	cmp	r3, #8
 801015e:	d009      	beq.n	8010174 <tcp_kill_state+0x24>
 8010160:	79fb      	ldrb	r3, [r7, #7]
 8010162:	2b09      	cmp	r3, #9
 8010164:	d006      	beq.n	8010174 <tcp_kill_state+0x24>
 8010166:	4b1a      	ldr	r3, [pc, #104]	; (80101d0 <tcp_kill_state+0x80>)
 8010168:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801016c:	4919      	ldr	r1, [pc, #100]	; (80101d4 <tcp_kill_state+0x84>)
 801016e:	481a      	ldr	r0, [pc, #104]	; (80101d8 <tcp_kill_state+0x88>)
 8010170:	f008 fb10 	bl	8018794 <iprintf>

  inactivity = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010178:	2300      	movs	r3, #0
 801017a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801017c:	4b17      	ldr	r3, [pc, #92]	; (80101dc <tcp_kill_state+0x8c>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	617b      	str	r3, [r7, #20]
 8010182:	e017      	b.n	80101b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	7d1b      	ldrb	r3, [r3, #20]
 8010188:	79fa      	ldrb	r2, [r7, #7]
 801018a:	429a      	cmp	r2, r3
 801018c:	d10f      	bne.n	80101ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801018e:	4b14      	ldr	r3, [pc, #80]	; (80101e0 <tcp_kill_state+0x90>)
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	6a1b      	ldr	r3, [r3, #32]
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	429a      	cmp	r2, r3
 801019c:	d807      	bhi.n	80101ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801019e:	4b10      	ldr	r3, [pc, #64]	; (80101e0 <tcp_kill_state+0x90>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	6a1b      	ldr	r3, [r3, #32]
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	617b      	str	r3, [r7, #20]
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1e4      	bne.n	8010184 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d003      	beq.n	80101c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80101c0:	2100      	movs	r1, #0
 80101c2:	6938      	ldr	r0, [r7, #16]
 80101c4:	f7ff f874 	bl	800f2b0 <tcp_abandon>
  }
}
 80101c8:	bf00      	nop
 80101ca:	3718      	adds	r7, #24
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	0801afcc 	.word	0x0801afcc
 80101d4:	0801b558 	.word	0x0801b558
 80101d8:	0801b010 	.word	0x0801b010
 80101dc:	2000d8d4 	.word	0x2000d8d4
 80101e0:	2000d8c8 	.word	0x2000d8c8

080101e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80101ee:	2300      	movs	r3, #0
 80101f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101f2:	4b12      	ldr	r3, [pc, #72]	; (801023c <tcp_kill_timewait+0x58>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	60fb      	str	r3, [r7, #12]
 80101f8:	e012      	b.n	8010220 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80101fa:	4b11      	ldr	r3, [pc, #68]	; (8010240 <tcp_kill_timewait+0x5c>)
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	6a1b      	ldr	r3, [r3, #32]
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	429a      	cmp	r2, r3
 8010208:	d807      	bhi.n	801021a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801020a:	4b0d      	ldr	r3, [pc, #52]	; (8010240 <tcp_kill_timewait+0x5c>)
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	1ad3      	subs	r3, r2, r3
 8010214:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	68db      	ldr	r3, [r3, #12]
 801021e:	60fb      	str	r3, [r7, #12]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1e9      	bne.n	80101fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801022c:	68b8      	ldr	r0, [r7, #8]
 801022e:	f7ff f8fd 	bl	800f42c <tcp_abort>
  }
}
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	2000d8d8 	.word	0x2000d8d8
 8010240:	2000d8c8 	.word	0x2000d8c8

08010244 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801024a:	4b10      	ldr	r3, [pc, #64]	; (801028c <tcp_handle_closepend+0x48>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010250:	e014      	b.n	801027c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	8b5b      	ldrh	r3, [r3, #26]
 801025c:	f003 0308 	and.w	r3, r3, #8
 8010260:	2b00      	cmp	r3, #0
 8010262:	d009      	beq.n	8010278 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8b5b      	ldrh	r3, [r3, #26]
 8010268:	f023 0308 	bic.w	r3, r3, #8
 801026c:	b29a      	uxth	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7fe ff2a 	bl	800f0cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1e7      	bne.n	8010252 <tcp_handle_closepend+0xe>
  }
}
 8010282:	bf00      	nop
 8010284:	bf00      	nop
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	2000d8d4 	.word	0x2000d8d4

08010290 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801029a:	2001      	movs	r0, #1
 801029c:	f7fd fc34 	bl	800db08 <memp_malloc>
 80102a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d126      	bne.n	80102f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80102a8:	f7ff ffcc 	bl	8010244 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80102ac:	f7ff ff9a 	bl	80101e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102b0:	2001      	movs	r0, #1
 80102b2:	f7fd fc29 	bl	800db08 <memp_malloc>
 80102b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d11b      	bne.n	80102f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80102be:	2009      	movs	r0, #9
 80102c0:	f7ff ff46 	bl	8010150 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102c4:	2001      	movs	r0, #1
 80102c6:	f7fd fc1f 	bl	800db08 <memp_malloc>
 80102ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d111      	bne.n	80102f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80102d2:	2008      	movs	r0, #8
 80102d4:	f7ff ff3c 	bl	8010150 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102d8:	2001      	movs	r0, #1
 80102da:	f7fd fc15 	bl	800db08 <memp_malloc>
 80102de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d107      	bne.n	80102f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80102e6:	79fb      	ldrb	r3, [r7, #7]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7ff fee3 	bl	80100b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102ee:	2001      	movs	r0, #1
 80102f0:	f7fd fc0a 	bl	800db08 <memp_malloc>
 80102f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d03f      	beq.n	801037c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80102fc:	229c      	movs	r2, #156	; 0x9c
 80102fe:	2100      	movs	r1, #0
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f008 f95f 	bl	80185c4 <memset>
    pcb->prio = prio;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	79fa      	ldrb	r2, [r7, #7]
 801030a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010312:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801031c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	22ff      	movs	r2, #255	; 0xff
 801032a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010332:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2206      	movs	r2, #6
 8010338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2206      	movs	r2, #6
 8010340:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010348:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2201      	movs	r2, #1
 801034e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010352:	4b0d      	ldr	r3, [pc, #52]	; (8010388 <tcp_alloc+0xf8>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801035a:	4b0c      	ldr	r3, [pc, #48]	; (801038c <tcp_alloc+0xfc>)
 801035c:	781a      	ldrb	r2, [r3, #0]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010368:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	4a08      	ldr	r2, [pc, #32]	; (8010390 <tcp_alloc+0x100>)
 8010370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	4a07      	ldr	r2, [pc, #28]	; (8010394 <tcp_alloc+0x104>)
 8010378:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801037c:	68fb      	ldr	r3, [r7, #12]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	2000d8c8 	.word	0x2000d8c8
 801038c:	2000d8de 	.word	0x2000d8de
 8010390:	08010049 	.word	0x08010049
 8010394:	006ddd00 	.word	0x006ddd00

08010398 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	4603      	mov	r3, r0
 80103a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80103a2:	2040      	movs	r0, #64	; 0x40
 80103a4:	f7ff ff74 	bl	8010290 <tcp_alloc>
 80103a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80103aa:	68fb      	ldr	r3, [r7, #12]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	611a      	str	r2, [r3, #16]
  }
}
 80103ca:	bf00      	nop
 80103cc:	370c      	adds	r7, #12
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
	...

080103d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00e      	beq.n	8010406 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	7d1b      	ldrb	r3, [r3, #20]
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d106      	bne.n	80103fe <tcp_recv+0x26>
 80103f0:	4b07      	ldr	r3, [pc, #28]	; (8010410 <tcp_recv+0x38>)
 80103f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80103f6:	4907      	ldr	r1, [pc, #28]	; (8010414 <tcp_recv+0x3c>)
 80103f8:	4807      	ldr	r0, [pc, #28]	; (8010418 <tcp_recv+0x40>)
 80103fa:	f008 f9cb 	bl	8018794 <iprintf>
    pcb->recv = recv;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	683a      	ldr	r2, [r7, #0]
 8010402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	0801afcc 	.word	0x0801afcc
 8010414:	0801b568 	.word	0x0801b568
 8010418:	0801b010 	.word	0x0801b010

0801041c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d00e      	beq.n	801044a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	7d1b      	ldrb	r3, [r3, #20]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d106      	bne.n	8010442 <tcp_sent+0x26>
 8010434:	4b07      	ldr	r3, [pc, #28]	; (8010454 <tcp_sent+0x38>)
 8010436:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801043a:	4907      	ldr	r1, [pc, #28]	; (8010458 <tcp_sent+0x3c>)
 801043c:	4807      	ldr	r0, [pc, #28]	; (801045c <tcp_sent+0x40>)
 801043e:	f008 f9a9 	bl	8018794 <iprintf>
    pcb->sent = sent;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801044a:	bf00      	nop
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	0801afcc 	.word	0x0801afcc
 8010458:	0801b590 	.word	0x0801b590
 801045c:	0801b010 	.word	0x0801b010

08010460 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00e      	beq.n	801048e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	7d1b      	ldrb	r3, [r3, #20]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d106      	bne.n	8010486 <tcp_err+0x26>
 8010478:	4b07      	ldr	r3, [pc, #28]	; (8010498 <tcp_err+0x38>)
 801047a:	f640 020d 	movw	r2, #2061	; 0x80d
 801047e:	4907      	ldr	r1, [pc, #28]	; (801049c <tcp_err+0x3c>)
 8010480:	4807      	ldr	r0, [pc, #28]	; (80104a0 <tcp_err+0x40>)
 8010482:	f008 f987 	bl	8018794 <iprintf>
    pcb->errf = err;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	683a      	ldr	r2, [r7, #0]
 801048a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801048e:	bf00      	nop
 8010490:	3708      	adds	r7, #8
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	0801afcc 	.word	0x0801afcc
 801049c:	0801b5b8 	.word	0x0801b5b8
 80104a0:	0801b010 	.word	0x0801b010

080104a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d008      	beq.n	80104c6 <tcp_accept+0x22>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	7d1b      	ldrb	r3, [r3, #20]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d104      	bne.n	80104c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	683a      	ldr	r2, [r7, #0]
 80104c4:	619a      	str	r2, [r3, #24]
  }
}
 80104c6:	bf00      	nop
 80104c8:	3714      	adds	r7, #20
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr
	...

080104d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	4613      	mov	r3, r2
 80104e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d107      	bne.n	80104f8 <tcp_poll+0x24>
 80104e8:	4b0e      	ldr	r3, [pc, #56]	; (8010524 <tcp_poll+0x50>)
 80104ea:	f640 023d 	movw	r2, #2109	; 0x83d
 80104ee:	490e      	ldr	r1, [pc, #56]	; (8010528 <tcp_poll+0x54>)
 80104f0:	480e      	ldr	r0, [pc, #56]	; (801052c <tcp_poll+0x58>)
 80104f2:	f008 f94f 	bl	8018794 <iprintf>
 80104f6:	e011      	b.n	801051c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	7d1b      	ldrb	r3, [r3, #20]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d106      	bne.n	801050e <tcp_poll+0x3a>
 8010500:	4b08      	ldr	r3, [pc, #32]	; (8010524 <tcp_poll+0x50>)
 8010502:	f640 023e 	movw	r2, #2110	; 0x83e
 8010506:	490a      	ldr	r1, [pc, #40]	; (8010530 <tcp_poll+0x5c>)
 8010508:	4808      	ldr	r0, [pc, #32]	; (801052c <tcp_poll+0x58>)
 801050a:	f008 f943 	bl	8018794 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	79fa      	ldrb	r2, [r7, #7]
 801051a:	775a      	strb	r2, [r3, #29]
}
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	0801afcc 	.word	0x0801afcc
 8010528:	0801b5e0 	.word	0x0801b5e0
 801052c:	0801b010 	.word	0x0801b010
 8010530:	0801b5f8 	.word	0x0801b5f8

08010534 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d107      	bne.n	8010552 <tcp_pcb_purge+0x1e>
 8010542:	4b21      	ldr	r3, [pc, #132]	; (80105c8 <tcp_pcb_purge+0x94>)
 8010544:	f640 0251 	movw	r2, #2129	; 0x851
 8010548:	4920      	ldr	r1, [pc, #128]	; (80105cc <tcp_pcb_purge+0x98>)
 801054a:	4821      	ldr	r0, [pc, #132]	; (80105d0 <tcp_pcb_purge+0x9c>)
 801054c:	f008 f922 	bl	8018794 <iprintf>
 8010550:	e037      	b.n	80105c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	7d1b      	ldrb	r3, [r3, #20]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d033      	beq.n	80105c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801055e:	2b0a      	cmp	r3, #10
 8010560:	d02f      	beq.n	80105c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010566:	2b01      	cmp	r3, #1
 8010568:	d02b      	beq.n	80105c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801056e:	2b00      	cmp	r3, #0
 8010570:	d007      	beq.n	8010582 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe f958 	bl	800e82c <pbuf_free>
      pcb->refused_data = NULL;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f986 	bl	801089c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010596:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801059c:	4618      	mov	r0, r3
 801059e:	f7ff fcf9 	bl	800ff94 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7ff fcf4 	bl	800ff94 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	0801afcc 	.word	0x0801afcc
 80105cc:	0801b618 	.word	0x0801b618
 80105d0:	0801b010 	.word	0x0801b010

080105d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d106      	bne.n	80105f2 <tcp_pcb_remove+0x1e>
 80105e4:	4b3e      	ldr	r3, [pc, #248]	; (80106e0 <tcp_pcb_remove+0x10c>)
 80105e6:	f640 0283 	movw	r2, #2179	; 0x883
 80105ea:	493e      	ldr	r1, [pc, #248]	; (80106e4 <tcp_pcb_remove+0x110>)
 80105ec:	483e      	ldr	r0, [pc, #248]	; (80106e8 <tcp_pcb_remove+0x114>)
 80105ee:	f008 f8d1 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d106      	bne.n	8010606 <tcp_pcb_remove+0x32>
 80105f8:	4b39      	ldr	r3, [pc, #228]	; (80106e0 <tcp_pcb_remove+0x10c>)
 80105fa:	f640 0284 	movw	r2, #2180	; 0x884
 80105fe:	493b      	ldr	r1, [pc, #236]	; (80106ec <tcp_pcb_remove+0x118>)
 8010600:	4839      	ldr	r0, [pc, #228]	; (80106e8 <tcp_pcb_remove+0x114>)
 8010602:	f008 f8c7 	bl	8018794 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	683a      	ldr	r2, [r7, #0]
 801060c:	429a      	cmp	r2, r3
 801060e:	d105      	bne.n	801061c <tcp_pcb_remove+0x48>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	68da      	ldr	r2, [r3, #12]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	601a      	str	r2, [r3, #0]
 801061a:	e013      	b.n	8010644 <tcp_pcb_remove+0x70>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	60fb      	str	r3, [r7, #12]
 8010622:	e00c      	b.n	801063e <tcp_pcb_remove+0x6a>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	429a      	cmp	r2, r3
 801062c:	d104      	bne.n	8010638 <tcp_pcb_remove+0x64>
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	68da      	ldr	r2, [r3, #12]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	60da      	str	r2, [r3, #12]
 8010636:	e005      	b.n	8010644 <tcp_pcb_remove+0x70>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	60fb      	str	r3, [r7, #12]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d1ef      	bne.n	8010624 <tcp_pcb_remove+0x50>
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2200      	movs	r2, #0
 8010648:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801064a:	6838      	ldr	r0, [r7, #0]
 801064c:	f7ff ff72 	bl	8010534 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	7d1b      	ldrb	r3, [r3, #20]
 8010654:	2b0a      	cmp	r3, #10
 8010656:	d013      	beq.n	8010680 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801065c:	2b01      	cmp	r3, #1
 801065e:	d00f      	beq.n	8010680 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	8b5b      	ldrh	r3, [r3, #26]
 8010664:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010668:	2b00      	cmp	r3, #0
 801066a:	d009      	beq.n	8010680 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	8b5b      	ldrh	r3, [r3, #26]
 8010670:	f043 0302 	orr.w	r3, r3, #2
 8010674:	b29a      	uxth	r2, r3
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801067a:	6838      	ldr	r0, [r7, #0]
 801067c:	f003 fbc6 	bl	8013e0c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	7d1b      	ldrb	r3, [r3, #20]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d020      	beq.n	80106ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801068c:	2b00      	cmp	r3, #0
 801068e:	d006      	beq.n	801069e <tcp_pcb_remove+0xca>
 8010690:	4b13      	ldr	r3, [pc, #76]	; (80106e0 <tcp_pcb_remove+0x10c>)
 8010692:	f640 0293 	movw	r2, #2195	; 0x893
 8010696:	4916      	ldr	r1, [pc, #88]	; (80106f0 <tcp_pcb_remove+0x11c>)
 8010698:	4813      	ldr	r0, [pc, #76]	; (80106e8 <tcp_pcb_remove+0x114>)
 801069a:	f008 f87b 	bl	8018794 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d006      	beq.n	80106b4 <tcp_pcb_remove+0xe0>
 80106a6:	4b0e      	ldr	r3, [pc, #56]	; (80106e0 <tcp_pcb_remove+0x10c>)
 80106a8:	f640 0294 	movw	r2, #2196	; 0x894
 80106ac:	4911      	ldr	r1, [pc, #68]	; (80106f4 <tcp_pcb_remove+0x120>)
 80106ae:	480e      	ldr	r0, [pc, #56]	; (80106e8 <tcp_pcb_remove+0x114>)
 80106b0:	f008 f870 	bl	8018794 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d006      	beq.n	80106ca <tcp_pcb_remove+0xf6>
 80106bc:	4b08      	ldr	r3, [pc, #32]	; (80106e0 <tcp_pcb_remove+0x10c>)
 80106be:	f640 0296 	movw	r2, #2198	; 0x896
 80106c2:	490d      	ldr	r1, [pc, #52]	; (80106f8 <tcp_pcb_remove+0x124>)
 80106c4:	4808      	ldr	r0, [pc, #32]	; (80106e8 <tcp_pcb_remove+0x114>)
 80106c6:	f008 f865 	bl	8018794 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2200      	movs	r2, #0
 80106ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	2200      	movs	r2, #0
 80106d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80106d6:	bf00      	nop
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	0801afcc 	.word	0x0801afcc
 80106e4:	0801b634 	.word	0x0801b634
 80106e8:	0801b010 	.word	0x0801b010
 80106ec:	0801b650 	.word	0x0801b650
 80106f0:	0801b670 	.word	0x0801b670
 80106f4:	0801b688 	.word	0x0801b688
 80106f8:	0801b6a4 	.word	0x0801b6a4

080106fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d106      	bne.n	8010718 <tcp_next_iss+0x1c>
 801070a:	4b0a      	ldr	r3, [pc, #40]	; (8010734 <tcp_next_iss+0x38>)
 801070c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010710:	4909      	ldr	r1, [pc, #36]	; (8010738 <tcp_next_iss+0x3c>)
 8010712:	480a      	ldr	r0, [pc, #40]	; (801073c <tcp_next_iss+0x40>)
 8010714:	f008 f83e 	bl	8018794 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010718:	4b09      	ldr	r3, [pc, #36]	; (8010740 <tcp_next_iss+0x44>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	4b09      	ldr	r3, [pc, #36]	; (8010744 <tcp_next_iss+0x48>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4413      	add	r3, r2
 8010722:	4a07      	ldr	r2, [pc, #28]	; (8010740 <tcp_next_iss+0x44>)
 8010724:	6013      	str	r3, [r2, #0]
  return iss;
 8010726:	4b06      	ldr	r3, [pc, #24]	; (8010740 <tcp_next_iss+0x44>)
 8010728:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801072a:	4618      	mov	r0, r3
 801072c:	3708      	adds	r7, #8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	0801afcc 	.word	0x0801afcc
 8010738:	0801b6bc 	.word	0x0801b6bc
 801073c:	0801b010 	.word	0x0801b010
 8010740:	200000a8 	.word	0x200000a8
 8010744:	2000d8c8 	.word	0x2000d8c8

08010748 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d106      	bne.n	801076a <tcp_eff_send_mss_netif+0x22>
 801075c:	4b14      	ldr	r3, [pc, #80]	; (80107b0 <tcp_eff_send_mss_netif+0x68>)
 801075e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010762:	4914      	ldr	r1, [pc, #80]	; (80107b4 <tcp_eff_send_mss_netif+0x6c>)
 8010764:	4814      	ldr	r0, [pc, #80]	; (80107b8 <tcp_eff_send_mss_netif+0x70>)
 8010766:	f008 f815 	bl	8018794 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010770:	89fb      	ldrh	r3, [r7, #14]
 8010772:	e019      	b.n	80107a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010778:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801077a:	8afb      	ldrh	r3, [r7, #22]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d012      	beq.n	80107a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010780:	2328      	movs	r3, #40	; 0x28
 8010782:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010784:	8afa      	ldrh	r2, [r7, #22]
 8010786:	8abb      	ldrh	r3, [r7, #20]
 8010788:	429a      	cmp	r2, r3
 801078a:	d904      	bls.n	8010796 <tcp_eff_send_mss_netif+0x4e>
 801078c:	8afa      	ldrh	r2, [r7, #22]
 801078e:	8abb      	ldrh	r3, [r7, #20]
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	b29b      	uxth	r3, r3
 8010794:	e000      	b.n	8010798 <tcp_eff_send_mss_netif+0x50>
 8010796:	2300      	movs	r3, #0
 8010798:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801079a:	8a7a      	ldrh	r2, [r7, #18]
 801079c:	89fb      	ldrh	r3, [r7, #14]
 801079e:	4293      	cmp	r3, r2
 80107a0:	bf28      	it	cs
 80107a2:	4613      	movcs	r3, r2
 80107a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80107a6:	89fb      	ldrh	r3, [r7, #14]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3718      	adds	r7, #24
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	0801afcc 	.word	0x0801afcc
 80107b4:	0801b6d8 	.word	0x0801b6d8
 80107b8:	0801b010 	.word	0x0801b010

080107bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d119      	bne.n	8010804 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80107d0:	4b10      	ldr	r3, [pc, #64]	; (8010814 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80107d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80107d6:	4910      	ldr	r1, [pc, #64]	; (8010818 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80107d8:	4810      	ldr	r0, [pc, #64]	; (801081c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80107da:	f007 ffdb 	bl	8018794 <iprintf>

  while (pcb != NULL) {
 80107de:	e011      	b.n	8010804 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d108      	bne.n	80107fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7fe fe1a 	bl	800f42c <tcp_abort>
      pcb = next;
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	60fb      	str	r3, [r7, #12]
 80107fc:	e002      	b.n	8010804 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1ea      	bne.n	80107e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801080a:	bf00      	nop
 801080c:	bf00      	nop
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	0801afcc 	.word	0x0801afcc
 8010818:	0801b700 	.word	0x0801b700
 801081c:	0801b010 	.word	0x0801b010

08010820 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d02a      	beq.n	8010886 <tcp_netif_ip_addr_changed+0x66>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d026      	beq.n	8010886 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010838:	4b15      	ldr	r3, [pc, #84]	; (8010890 <tcp_netif_ip_addr_changed+0x70>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff ffbc 	bl	80107bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010844:	4b13      	ldr	r3, [pc, #76]	; (8010894 <tcp_netif_ip_addr_changed+0x74>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff ffb6 	bl	80107bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d017      	beq.n	8010886 <tcp_netif_ip_addr_changed+0x66>
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d013      	beq.n	8010886 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801085e:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <tcp_netif_ip_addr_changed+0x78>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	60fb      	str	r3, [r7, #12]
 8010864:	e00c      	b.n	8010880 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	429a      	cmp	r2, r3
 8010870:	d103      	bne.n	801087a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	60fb      	str	r3, [r7, #12]
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d1ef      	bne.n	8010866 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010886:	bf00      	nop
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	2000d8d4 	.word	0x2000d8d4
 8010894:	2000d8cc 	.word	0x2000d8cc
 8010898:	2000d8d0 	.word	0x2000d8d0

0801089c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d007      	beq.n	80108bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff fb6f 	bl	800ff94 <tcp_segs_free>
    pcb->ooseq = NULL;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80108bc:	bf00      	nop
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80108c4:	b590      	push	{r4, r7, lr}
 80108c6:	b08d      	sub	sp, #52	; 0x34
 80108c8:	af04      	add	r7, sp, #16
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d105      	bne.n	80108e0 <tcp_input+0x1c>
 80108d4:	4b9b      	ldr	r3, [pc, #620]	; (8010b44 <tcp_input+0x280>)
 80108d6:	2283      	movs	r2, #131	; 0x83
 80108d8:	499b      	ldr	r1, [pc, #620]	; (8010b48 <tcp_input+0x284>)
 80108da:	489c      	ldr	r0, [pc, #624]	; (8010b4c <tcp_input+0x288>)
 80108dc:	f007 ff5a 	bl	8018794 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	4a9a      	ldr	r2, [pc, #616]	; (8010b50 <tcp_input+0x28c>)
 80108e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	895b      	ldrh	r3, [r3, #10]
 80108ec:	2b13      	cmp	r3, #19
 80108ee:	f240 83d1 	bls.w	8011094 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80108f2:	4b98      	ldr	r3, [pc, #608]	; (8010b54 <tcp_input+0x290>)
 80108f4:	695b      	ldr	r3, [r3, #20]
 80108f6:	4a97      	ldr	r2, [pc, #604]	; (8010b54 <tcp_input+0x290>)
 80108f8:	6812      	ldr	r2, [r2, #0]
 80108fa:	4611      	mov	r1, r2
 80108fc:	4618      	mov	r0, r3
 80108fe:	f006 fbcf 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	f040 83c7 	bne.w	8011098 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801090a:	4b92      	ldr	r3, [pc, #584]	; (8010b54 <tcp_input+0x290>)
 801090c:	695b      	ldr	r3, [r3, #20]
 801090e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010912:	2be0      	cmp	r3, #224	; 0xe0
 8010914:	f000 83c0 	beq.w	8011098 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010918:	4b8d      	ldr	r3, [pc, #564]	; (8010b50 <tcp_input+0x28c>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	899b      	ldrh	r3, [r3, #12]
 801091e:	b29b      	uxth	r3, r3
 8010920:	4618      	mov	r0, r3
 8010922:	f7fc fc3b 	bl	800d19c <lwip_htons>
 8010926:	4603      	mov	r3, r0
 8010928:	0b1b      	lsrs	r3, r3, #12
 801092a:	b29b      	uxth	r3, r3
 801092c:	b2db      	uxtb	r3, r3
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010932:	7cbb      	ldrb	r3, [r7, #18]
 8010934:	2b13      	cmp	r3, #19
 8010936:	f240 83b1 	bls.w	801109c <tcp_input+0x7d8>
 801093a:	7cbb      	ldrb	r3, [r7, #18]
 801093c:	b29a      	uxth	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	891b      	ldrh	r3, [r3, #8]
 8010942:	429a      	cmp	r2, r3
 8010944:	f200 83aa 	bhi.w	801109c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010948:	7cbb      	ldrb	r3, [r7, #18]
 801094a:	b29b      	uxth	r3, r3
 801094c:	3b14      	subs	r3, #20
 801094e:	b29a      	uxth	r2, r3
 8010950:	4b81      	ldr	r3, [pc, #516]	; (8010b58 <tcp_input+0x294>)
 8010952:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010954:	4b81      	ldr	r3, [pc, #516]	; (8010b5c <tcp_input+0x298>)
 8010956:	2200      	movs	r2, #0
 8010958:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	895a      	ldrh	r2, [r3, #10]
 801095e:	7cbb      	ldrb	r3, [r7, #18]
 8010960:	b29b      	uxth	r3, r3
 8010962:	429a      	cmp	r2, r3
 8010964:	d309      	bcc.n	801097a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010966:	4b7c      	ldr	r3, [pc, #496]	; (8010b58 <tcp_input+0x294>)
 8010968:	881a      	ldrh	r2, [r3, #0]
 801096a:	4b7d      	ldr	r3, [pc, #500]	; (8010b60 <tcp_input+0x29c>)
 801096c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801096e:	7cbb      	ldrb	r3, [r7, #18]
 8010970:	4619      	mov	r1, r3
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7fd fed4 	bl	800e720 <pbuf_remove_header>
 8010978:	e04e      	b.n	8010a18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d105      	bne.n	801098e <tcp_input+0xca>
 8010982:	4b70      	ldr	r3, [pc, #448]	; (8010b44 <tcp_input+0x280>)
 8010984:	22c2      	movs	r2, #194	; 0xc2
 8010986:	4977      	ldr	r1, [pc, #476]	; (8010b64 <tcp_input+0x2a0>)
 8010988:	4870      	ldr	r0, [pc, #448]	; (8010b4c <tcp_input+0x288>)
 801098a:	f007 ff03 	bl	8018794 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801098e:	2114      	movs	r1, #20
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7fd fec5 	bl	800e720 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	895a      	ldrh	r2, [r3, #10]
 801099a:	4b71      	ldr	r3, [pc, #452]	; (8010b60 <tcp_input+0x29c>)
 801099c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801099e:	4b6e      	ldr	r3, [pc, #440]	; (8010b58 <tcp_input+0x294>)
 80109a0:	881a      	ldrh	r2, [r3, #0]
 80109a2:	4b6f      	ldr	r3, [pc, #444]	; (8010b60 <tcp_input+0x29c>)
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80109aa:	4b6d      	ldr	r3, [pc, #436]	; (8010b60 <tcp_input+0x29c>)
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7fd feb5 	bl	800e720 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	895b      	ldrh	r3, [r3, #10]
 80109bc:	8a3a      	ldrh	r2, [r7, #16]
 80109be:	429a      	cmp	r2, r3
 80109c0:	f200 836e 	bhi.w	80110a0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	4a64      	ldr	r2, [pc, #400]	; (8010b5c <tcp_input+0x298>)
 80109cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	8a3a      	ldrh	r2, [r7, #16]
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fd fea2 	bl	800e720 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	891a      	ldrh	r2, [r3, #8]
 80109e0:	8a3b      	ldrh	r3, [r7, #16]
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	895b      	ldrh	r3, [r3, #10]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d005      	beq.n	80109fe <tcp_input+0x13a>
 80109f2:	4b54      	ldr	r3, [pc, #336]	; (8010b44 <tcp_input+0x280>)
 80109f4:	22df      	movs	r2, #223	; 0xdf
 80109f6:	495c      	ldr	r1, [pc, #368]	; (8010b68 <tcp_input+0x2a4>)
 80109f8:	4854      	ldr	r0, [pc, #336]	; (8010b4c <tcp_input+0x288>)
 80109fa:	f007 fecb 	bl	8018794 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	891a      	ldrh	r2, [r3, #8]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	891b      	ldrh	r3, [r3, #8]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d005      	beq.n	8010a18 <tcp_input+0x154>
 8010a0c:	4b4d      	ldr	r3, [pc, #308]	; (8010b44 <tcp_input+0x280>)
 8010a0e:	22e0      	movs	r2, #224	; 0xe0
 8010a10:	4956      	ldr	r1, [pc, #344]	; (8010b6c <tcp_input+0x2a8>)
 8010a12:	484e      	ldr	r0, [pc, #312]	; (8010b4c <tcp_input+0x288>)
 8010a14:	f007 febe 	bl	8018794 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010a18:	4b4d      	ldr	r3, [pc, #308]	; (8010b50 <tcp_input+0x28c>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	4a4b      	ldr	r2, [pc, #300]	; (8010b50 <tcp_input+0x28c>)
 8010a22:	6814      	ldr	r4, [r2, #0]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fc fbb9 	bl	800d19c <lwip_htons>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010a2e:	4b48      	ldr	r3, [pc, #288]	; (8010b50 <tcp_input+0x28c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	885b      	ldrh	r3, [r3, #2]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4a46      	ldr	r2, [pc, #280]	; (8010b50 <tcp_input+0x28c>)
 8010a38:	6814      	ldr	r4, [r2, #0]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fc fbae 	bl	800d19c <lwip_htons>
 8010a40:	4603      	mov	r3, r0
 8010a42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010a44:	4b42      	ldr	r3, [pc, #264]	; (8010b50 <tcp_input+0x28c>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	4a41      	ldr	r2, [pc, #260]	; (8010b50 <tcp_input+0x28c>)
 8010a4c:	6814      	ldr	r4, [r2, #0]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fc fbb9 	bl	800d1c6 <lwip_htonl>
 8010a54:	4603      	mov	r3, r0
 8010a56:	6063      	str	r3, [r4, #4]
 8010a58:	6863      	ldr	r3, [r4, #4]
 8010a5a:	4a45      	ldr	r2, [pc, #276]	; (8010b70 <tcp_input+0x2ac>)
 8010a5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010a5e:	4b3c      	ldr	r3, [pc, #240]	; (8010b50 <tcp_input+0x28c>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	4a3a      	ldr	r2, [pc, #232]	; (8010b50 <tcp_input+0x28c>)
 8010a66:	6814      	ldr	r4, [r2, #0]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fc fbac 	bl	800d1c6 <lwip_htonl>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	60a3      	str	r3, [r4, #8]
 8010a72:	68a3      	ldr	r3, [r4, #8]
 8010a74:	4a3f      	ldr	r2, [pc, #252]	; (8010b74 <tcp_input+0x2b0>)
 8010a76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010a78:	4b35      	ldr	r3, [pc, #212]	; (8010b50 <tcp_input+0x28c>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	89db      	ldrh	r3, [r3, #14]
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	4a33      	ldr	r2, [pc, #204]	; (8010b50 <tcp_input+0x28c>)
 8010a82:	6814      	ldr	r4, [r2, #0]
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fc fb89 	bl	800d19c <lwip_htons>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010a8e:	4b30      	ldr	r3, [pc, #192]	; (8010b50 <tcp_input+0x28c>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	899b      	ldrh	r3, [r3, #12]
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fc fb80 	bl	800d19c <lwip_htons>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	4b34      	ldr	r3, [pc, #208]	; (8010b78 <tcp_input+0x2b4>)
 8010aa8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	891a      	ldrh	r2, [r3, #8]
 8010aae:	4b33      	ldr	r3, [pc, #204]	; (8010b7c <tcp_input+0x2b8>)
 8010ab0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010ab2:	4b31      	ldr	r3, [pc, #196]	; (8010b78 <tcp_input+0x2b4>)
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	f003 0303 	and.w	r3, r3, #3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d00c      	beq.n	8010ad8 <tcp_input+0x214>
    tcplen++;
 8010abe:	4b2f      	ldr	r3, [pc, #188]	; (8010b7c <tcp_input+0x2b8>)
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	4b2d      	ldr	r3, [pc, #180]	; (8010b7c <tcp_input+0x2b8>)
 8010ac8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	891a      	ldrh	r2, [r3, #8]
 8010ace:	4b2b      	ldr	r3, [pc, #172]	; (8010b7c <tcp_input+0x2b8>)
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	f200 82e6 	bhi.w	80110a4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010adc:	4b28      	ldr	r3, [pc, #160]	; (8010b80 <tcp_input+0x2bc>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	61fb      	str	r3, [r7, #28]
 8010ae2:	e09d      	b.n	8010c20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	7d1b      	ldrb	r3, [r3, #20]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d105      	bne.n	8010af8 <tcp_input+0x234>
 8010aec:	4b15      	ldr	r3, [pc, #84]	; (8010b44 <tcp_input+0x280>)
 8010aee:	22fb      	movs	r2, #251	; 0xfb
 8010af0:	4924      	ldr	r1, [pc, #144]	; (8010b84 <tcp_input+0x2c0>)
 8010af2:	4816      	ldr	r0, [pc, #88]	; (8010b4c <tcp_input+0x288>)
 8010af4:	f007 fe4e 	bl	8018794 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	7d1b      	ldrb	r3, [r3, #20]
 8010afc:	2b0a      	cmp	r3, #10
 8010afe:	d105      	bne.n	8010b0c <tcp_input+0x248>
 8010b00:	4b10      	ldr	r3, [pc, #64]	; (8010b44 <tcp_input+0x280>)
 8010b02:	22fc      	movs	r2, #252	; 0xfc
 8010b04:	4920      	ldr	r1, [pc, #128]	; (8010b88 <tcp_input+0x2c4>)
 8010b06:	4811      	ldr	r0, [pc, #68]	; (8010b4c <tcp_input+0x288>)
 8010b08:	f007 fe44 	bl	8018794 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	7d1b      	ldrb	r3, [r3, #20]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d105      	bne.n	8010b20 <tcp_input+0x25c>
 8010b14:	4b0b      	ldr	r3, [pc, #44]	; (8010b44 <tcp_input+0x280>)
 8010b16:	22fd      	movs	r2, #253	; 0xfd
 8010b18:	491c      	ldr	r1, [pc, #112]	; (8010b8c <tcp_input+0x2c8>)
 8010b1a:	480c      	ldr	r0, [pc, #48]	; (8010b4c <tcp_input+0x288>)
 8010b1c:	f007 fe3a 	bl	8018794 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	7a1b      	ldrb	r3, [r3, #8]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d033      	beq.n	8010b90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	7a1a      	ldrb	r2, [r3, #8]
 8010b2c:	4b09      	ldr	r3, [pc, #36]	; (8010b54 <tcp_input+0x290>)
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b34:	3301      	adds	r3, #1
 8010b36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d029      	beq.n	8010b90 <tcp_input+0x2cc>
      prev = pcb;
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	61bb      	str	r3, [r7, #24]
      continue;
 8010b40:	e06b      	b.n	8010c1a <tcp_input+0x356>
 8010b42:	bf00      	nop
 8010b44:	0801b734 	.word	0x0801b734
 8010b48:	0801b768 	.word	0x0801b768
 8010b4c:	0801b780 	.word	0x0801b780
 8010b50:	2000d8f0 	.word	0x2000d8f0
 8010b54:	2000a174 	.word	0x2000a174
 8010b58:	2000d8f4 	.word	0x2000d8f4
 8010b5c:	2000d8f8 	.word	0x2000d8f8
 8010b60:	2000d8f6 	.word	0x2000d8f6
 8010b64:	0801b7a8 	.word	0x0801b7a8
 8010b68:	0801b7b8 	.word	0x0801b7b8
 8010b6c:	0801b7c4 	.word	0x0801b7c4
 8010b70:	2000d900 	.word	0x2000d900
 8010b74:	2000d904 	.word	0x2000d904
 8010b78:	2000d90c 	.word	0x2000d90c
 8010b7c:	2000d90a 	.word	0x2000d90a
 8010b80:	2000d8d4 	.word	0x2000d8d4
 8010b84:	0801b7e4 	.word	0x0801b7e4
 8010b88:	0801b80c 	.word	0x0801b80c
 8010b8c:	0801b838 	.word	0x0801b838
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	8b1a      	ldrh	r2, [r3, #24]
 8010b94:	4b72      	ldr	r3, [pc, #456]	; (8010d60 <tcp_input+0x49c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d13a      	bne.n	8010c16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	8ada      	ldrh	r2, [r3, #22]
 8010ba4:	4b6e      	ldr	r3, [pc, #440]	; (8010d60 <tcp_input+0x49c>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	885b      	ldrh	r3, [r3, #2]
 8010baa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d132      	bne.n	8010c16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	685a      	ldr	r2, [r3, #4]
 8010bb4:	4b6b      	ldr	r3, [pc, #428]	; (8010d64 <tcp_input+0x4a0>)
 8010bb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d12c      	bne.n	8010c16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	4b68      	ldr	r3, [pc, #416]	; (8010d64 <tcp_input+0x4a0>)
 8010bc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d126      	bne.n	8010c16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	69fa      	ldr	r2, [r7, #28]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d106      	bne.n	8010be0 <tcp_input+0x31c>
 8010bd2:	4b65      	ldr	r3, [pc, #404]	; (8010d68 <tcp_input+0x4a4>)
 8010bd4:	f240 120d 	movw	r2, #269	; 0x10d
 8010bd8:	4964      	ldr	r1, [pc, #400]	; (8010d6c <tcp_input+0x4a8>)
 8010bda:	4865      	ldr	r0, [pc, #404]	; (8010d70 <tcp_input+0x4ac>)
 8010bdc:	f007 fdda 	bl	8018794 <iprintf>
      if (prev != NULL) {
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00a      	beq.n	8010bfc <tcp_input+0x338>
        prev->next = pcb->next;
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	68da      	ldr	r2, [r3, #12]
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010bee:	4b61      	ldr	r3, [pc, #388]	; (8010d74 <tcp_input+0x4b0>)
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010bf6:	4a5f      	ldr	r2, [pc, #380]	; (8010d74 <tcp_input+0x4b0>)
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	69fa      	ldr	r2, [r7, #28]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d111      	bne.n	8010c2a <tcp_input+0x366>
 8010c06:	4b58      	ldr	r3, [pc, #352]	; (8010d68 <tcp_input+0x4a4>)
 8010c08:	f240 1215 	movw	r2, #277	; 0x115
 8010c0c:	495a      	ldr	r1, [pc, #360]	; (8010d78 <tcp_input+0x4b4>)
 8010c0e:	4858      	ldr	r0, [pc, #352]	; (8010d70 <tcp_input+0x4ac>)
 8010c10:	f007 fdc0 	bl	8018794 <iprintf>
      break;
 8010c14:	e009      	b.n	8010c2a <tcp_input+0x366>
    }
    prev = pcb;
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	61fb      	str	r3, [r7, #28]
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f47f af5e 	bne.w	8010ae4 <tcp_input+0x220>
 8010c28:	e000      	b.n	8010c2c <tcp_input+0x368>
      break;
 8010c2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f040 80aa 	bne.w	8010d88 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c34:	4b51      	ldr	r3, [pc, #324]	; (8010d7c <tcp_input+0x4b8>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	61fb      	str	r3, [r7, #28]
 8010c3a:	e03f      	b.n	8010cbc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	7d1b      	ldrb	r3, [r3, #20]
 8010c40:	2b0a      	cmp	r3, #10
 8010c42:	d006      	beq.n	8010c52 <tcp_input+0x38e>
 8010c44:	4b48      	ldr	r3, [pc, #288]	; (8010d68 <tcp_input+0x4a4>)
 8010c46:	f240 121f 	movw	r2, #287	; 0x11f
 8010c4a:	494d      	ldr	r1, [pc, #308]	; (8010d80 <tcp_input+0x4bc>)
 8010c4c:	4848      	ldr	r0, [pc, #288]	; (8010d70 <tcp_input+0x4ac>)
 8010c4e:	f007 fda1 	bl	8018794 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	7a1b      	ldrb	r3, [r3, #8]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d009      	beq.n	8010c6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	7a1a      	ldrb	r2, [r3, #8]
 8010c5e:	4b41      	ldr	r3, [pc, #260]	; (8010d64 <tcp_input+0x4a0>)
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c66:	3301      	adds	r3, #1
 8010c68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d122      	bne.n	8010cb4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	8b1a      	ldrh	r2, [r3, #24]
 8010c72:	4b3b      	ldr	r3, [pc, #236]	; (8010d60 <tcp_input+0x49c>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d11b      	bne.n	8010cb6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	8ada      	ldrh	r2, [r3, #22]
 8010c82:	4b37      	ldr	r3, [pc, #220]	; (8010d60 <tcp_input+0x49c>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	885b      	ldrh	r3, [r3, #2]
 8010c88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d113      	bne.n	8010cb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c8e:	69fb      	ldr	r3, [r7, #28]
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	4b34      	ldr	r3, [pc, #208]	; (8010d64 <tcp_input+0x4a0>)
 8010c94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d10d      	bne.n	8010cb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	4b31      	ldr	r3, [pc, #196]	; (8010d64 <tcp_input+0x4a0>)
 8010ca0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d107      	bne.n	8010cb6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010ca6:	69f8      	ldr	r0, [r7, #28]
 8010ca8:	f000 fb56 	bl	8011358 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7fd fdbd 	bl	800e82c <pbuf_free>
        return;
 8010cb2:	e1fd      	b.n	80110b0 <tcp_input+0x7ec>
        continue;
 8010cb4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	61fb      	str	r3, [r7, #28]
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1bc      	bne.n	8010c3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010cc6:	4b2f      	ldr	r3, [pc, #188]	; (8010d84 <tcp_input+0x4c0>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	617b      	str	r3, [r7, #20]
 8010ccc:	e02a      	b.n	8010d24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	7a1b      	ldrb	r3, [r3, #8]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00c      	beq.n	8010cf0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	7a1a      	ldrb	r2, [r3, #8]
 8010cda:	4b22      	ldr	r3, [pc, #136]	; (8010d64 <tcp_input+0x4a0>)
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d002      	beq.n	8010cf0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	61bb      	str	r3, [r7, #24]
        continue;
 8010cee:	e016      	b.n	8010d1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	8ada      	ldrh	r2, [r3, #22]
 8010cf4:	4b1a      	ldr	r3, [pc, #104]	; (8010d60 <tcp_input+0x49c>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	885b      	ldrh	r3, [r3, #2]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d10c      	bne.n	8010d1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	4b17      	ldr	r3, [pc, #92]	; (8010d64 <tcp_input+0x4a0>)
 8010d06:	695b      	ldr	r3, [r3, #20]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d00f      	beq.n	8010d2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00d      	beq.n	8010d2e <tcp_input+0x46a>
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d009      	beq.n	8010d2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	617b      	str	r3, [r7, #20]
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1d1      	bne.n	8010cce <tcp_input+0x40a>
 8010d2a:	e000      	b.n	8010d2e <tcp_input+0x46a>
            break;
 8010d2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d029      	beq.n	8010d88 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00a      	beq.n	8010d50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	68da      	ldr	r2, [r3, #12]
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010d42:	4b10      	ldr	r3, [pc, #64]	; (8010d84 <tcp_input+0x4c0>)
 8010d44:	681a      	ldr	r2, [r3, #0]
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010d4a:	4a0e      	ldr	r2, [pc, #56]	; (8010d84 <tcp_input+0x4c0>)
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010d50:	6978      	ldr	r0, [r7, #20]
 8010d52:	f000 fa03 	bl	801115c <tcp_listen_input>
      }
      pbuf_free(p);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7fd fd68 	bl	800e82c <pbuf_free>
      return;
 8010d5c:	e1a8      	b.n	80110b0 <tcp_input+0x7ec>
 8010d5e:	bf00      	nop
 8010d60:	2000d8f0 	.word	0x2000d8f0
 8010d64:	2000a174 	.word	0x2000a174
 8010d68:	0801b734 	.word	0x0801b734
 8010d6c:	0801b860 	.word	0x0801b860
 8010d70:	0801b780 	.word	0x0801b780
 8010d74:	2000d8d4 	.word	0x2000d8d4
 8010d78:	0801b88c 	.word	0x0801b88c
 8010d7c:	2000d8d8 	.word	0x2000d8d8
 8010d80:	0801b8b8 	.word	0x0801b8b8
 8010d84:	2000d8d0 	.word	0x2000d8d0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f000 8158 	beq.w	8011040 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d90:	4b95      	ldr	r3, [pc, #596]	; (8010fe8 <tcp_input+0x724>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	891a      	ldrh	r2, [r3, #8]
 8010d9a:	4b93      	ldr	r3, [pc, #588]	; (8010fe8 <tcp_input+0x724>)
 8010d9c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d9e:	4a92      	ldr	r2, [pc, #584]	; (8010fe8 <tcp_input+0x724>)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010da4:	4b91      	ldr	r3, [pc, #580]	; (8010fec <tcp_input+0x728>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4a8f      	ldr	r2, [pc, #572]	; (8010fe8 <tcp_input+0x724>)
 8010daa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010dac:	4b90      	ldr	r3, [pc, #576]	; (8010ff0 <tcp_input+0x72c>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010db2:	4b90      	ldr	r3, [pc, #576]	; (8010ff4 <tcp_input+0x730>)
 8010db4:	2200      	movs	r2, #0
 8010db6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010db8:	4b8f      	ldr	r3, [pc, #572]	; (8010ff8 <tcp_input+0x734>)
 8010dba:	2200      	movs	r2, #0
 8010dbc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010dbe:	4b8f      	ldr	r3, [pc, #572]	; (8010ffc <tcp_input+0x738>)
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 0308 	and.w	r3, r3, #8
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d006      	beq.n	8010dd8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	7b5b      	ldrb	r3, [r3, #13]
 8010dce:	f043 0301 	orr.w	r3, r3, #1
 8010dd2:	b2da      	uxtb	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d017      	beq.n	8010e10 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010de0:	69f8      	ldr	r0, [r7, #28]
 8010de2:	f7ff f85b 	bl	800fe9c <tcp_process_refused_data>
 8010de6:	4603      	mov	r3, r0
 8010de8:	f113 0f0d 	cmn.w	r3, #13
 8010dec:	d007      	beq.n	8010dfe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00c      	beq.n	8010e10 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010df6:	4b82      	ldr	r3, [pc, #520]	; (8011000 <tcp_input+0x73c>)
 8010df8:	881b      	ldrh	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d008      	beq.n	8010e10 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f040 80e3 	bne.w	8010fce <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010e08:	69f8      	ldr	r0, [r7, #28]
 8010e0a:	f003 fe05 	bl	8014a18 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010e0e:	e0de      	b.n	8010fce <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010e10:	4a7c      	ldr	r2, [pc, #496]	; (8011004 <tcp_input+0x740>)
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010e16:	69f8      	ldr	r0, [r7, #28]
 8010e18:	f000 fb18 	bl	801144c <tcp_process>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010e20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e24:	f113 0f0d 	cmn.w	r3, #13
 8010e28:	f000 80d3 	beq.w	8010fd2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010e2c:	4b71      	ldr	r3, [pc, #452]	; (8010ff4 <tcp_input+0x730>)
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	f003 0308 	and.w	r3, r3, #8
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d015      	beq.n	8010e64 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010e38:	69fb      	ldr	r3, [r7, #28]
 8010e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d008      	beq.n	8010e54 <tcp_input+0x590>
 8010e42:	69fb      	ldr	r3, [r7, #28]
 8010e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e48:	69fa      	ldr	r2, [r7, #28]
 8010e4a:	6912      	ldr	r2, [r2, #16]
 8010e4c:	f06f 010d 	mvn.w	r1, #13
 8010e50:	4610      	mov	r0, r2
 8010e52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e54:	69f9      	ldr	r1, [r7, #28]
 8010e56:	486c      	ldr	r0, [pc, #432]	; (8011008 <tcp_input+0x744>)
 8010e58:	f7ff fbbc 	bl	80105d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8010e5c:	69f8      	ldr	r0, [r7, #28]
 8010e5e:	f7fd ffa1 	bl	800eda4 <tcp_free>
 8010e62:	e0da      	b.n	801101a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010e68:	4b63      	ldr	r3, [pc, #396]	; (8010ff8 <tcp_input+0x734>)
 8010e6a:	881b      	ldrh	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d01d      	beq.n	8010eac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010e70:	4b61      	ldr	r3, [pc, #388]	; (8010ff8 <tcp_input+0x734>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00a      	beq.n	8010e96 <tcp_input+0x5d2>
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e86:	69fa      	ldr	r2, [r7, #28]
 8010e88:	6910      	ldr	r0, [r2, #16]
 8010e8a:	89fa      	ldrh	r2, [r7, #14]
 8010e8c:	69f9      	ldr	r1, [r7, #28]
 8010e8e:	4798      	blx	r3
 8010e90:	4603      	mov	r3, r0
 8010e92:	74fb      	strb	r3, [r7, #19]
 8010e94:	e001      	b.n	8010e9a <tcp_input+0x5d6>
 8010e96:	2300      	movs	r3, #0
 8010e98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e9e:	f113 0f0d 	cmn.w	r3, #13
 8010ea2:	f000 8098 	beq.w	8010fd6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010ea6:	4b54      	ldr	r3, [pc, #336]	; (8010ff8 <tcp_input+0x734>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010eac:	69f8      	ldr	r0, [r7, #28]
 8010eae:	f000 f915 	bl	80110dc <tcp_input_delayed_close>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f040 8090 	bne.w	8010fda <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010eba:	4b4d      	ldr	r3, [pc, #308]	; (8010ff0 <tcp_input+0x72c>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d041      	beq.n	8010f46 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d006      	beq.n	8010ed8 <tcp_input+0x614>
 8010eca:	4b50      	ldr	r3, [pc, #320]	; (801100c <tcp_input+0x748>)
 8010ecc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010ed0:	494f      	ldr	r1, [pc, #316]	; (8011010 <tcp_input+0x74c>)
 8010ed2:	4850      	ldr	r0, [pc, #320]	; (8011014 <tcp_input+0x750>)
 8010ed4:	f007 fc5e 	bl	8018794 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	8b5b      	ldrh	r3, [r3, #26]
 8010edc:	f003 0310 	and.w	r3, r3, #16
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d008      	beq.n	8010ef6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010ee4:	4b42      	ldr	r3, [pc, #264]	; (8010ff0 <tcp_input+0x72c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fd fc9f 	bl	800e82c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010eee:	69f8      	ldr	r0, [r7, #28]
 8010ef0:	f7fe fa9c 	bl	800f42c <tcp_abort>
            goto aborted;
 8010ef4:	e091      	b.n	801101a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00c      	beq.n	8010f1a <tcp_input+0x656>
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	6918      	ldr	r0, [r3, #16]
 8010f0a:	4b39      	ldr	r3, [pc, #228]	; (8010ff0 <tcp_input+0x72c>)
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	69f9      	ldr	r1, [r7, #28]
 8010f12:	47a0      	blx	r4
 8010f14:	4603      	mov	r3, r0
 8010f16:	74fb      	strb	r3, [r7, #19]
 8010f18:	e008      	b.n	8010f2c <tcp_input+0x668>
 8010f1a:	4b35      	ldr	r3, [pc, #212]	; (8010ff0 <tcp_input+0x72c>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	2300      	movs	r3, #0
 8010f20:	69f9      	ldr	r1, [r7, #28]
 8010f22:	2000      	movs	r0, #0
 8010f24:	f7ff f890 	bl	8010048 <tcp_recv_null>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010f2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f30:	f113 0f0d 	cmn.w	r3, #13
 8010f34:	d053      	beq.n	8010fde <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010f36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d003      	beq.n	8010f46 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010f3e:	4b2c      	ldr	r3, [pc, #176]	; (8010ff0 <tcp_input+0x72c>)
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010f46:	4b2b      	ldr	r3, [pc, #172]	; (8010ff4 <tcp_input+0x730>)
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	f003 0320 	and.w	r3, r3, #32
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d030      	beq.n	8010fb4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d009      	beq.n	8010f6e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f5e:	7b5a      	ldrb	r2, [r3, #13]
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f64:	f042 0220 	orr.w	r2, r2, #32
 8010f68:	b2d2      	uxtb	r2, r2
 8010f6a:	735a      	strb	r2, [r3, #13]
 8010f6c:	e022      	b.n	8010fb4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f76:	d005      	beq.n	8010f84 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00b      	beq.n	8010fa6 <tcp_input+0x6e2>
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	6918      	ldr	r0, [r3, #16]
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	69f9      	ldr	r1, [r7, #28]
 8010f9e:	47a0      	blx	r4
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	74fb      	strb	r3, [r7, #19]
 8010fa4:	e001      	b.n	8010faa <tcp_input+0x6e6>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010faa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fae:	f113 0f0d 	cmn.w	r3, #13
 8010fb2:	d016      	beq.n	8010fe2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010fb4:	4b13      	ldr	r3, [pc, #76]	; (8011004 <tcp_input+0x740>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010fba:	69f8      	ldr	r0, [r7, #28]
 8010fbc:	f000 f88e 	bl	80110dc <tcp_input_delayed_close>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d128      	bne.n	8011018 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010fc6:	69f8      	ldr	r0, [r7, #28]
 8010fc8:	f002 ff20 	bl	8013e0c <tcp_output>
 8010fcc:	e025      	b.n	801101a <tcp_input+0x756>
        goto aborted;
 8010fce:	bf00      	nop
 8010fd0:	e023      	b.n	801101a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010fd2:	bf00      	nop
 8010fd4:	e021      	b.n	801101a <tcp_input+0x756>
              goto aborted;
 8010fd6:	bf00      	nop
 8010fd8:	e01f      	b.n	801101a <tcp_input+0x756>
          goto aborted;
 8010fda:	bf00      	nop
 8010fdc:	e01d      	b.n	801101a <tcp_input+0x756>
            goto aborted;
 8010fde:	bf00      	nop
 8010fe0:	e01b      	b.n	801101a <tcp_input+0x756>
              goto aborted;
 8010fe2:	bf00      	nop
 8010fe4:	e019      	b.n	801101a <tcp_input+0x756>
 8010fe6:	bf00      	nop
 8010fe8:	2000d8e0 	.word	0x2000d8e0
 8010fec:	2000d8f0 	.word	0x2000d8f0
 8010ff0:	2000d910 	.word	0x2000d910
 8010ff4:	2000d90d 	.word	0x2000d90d
 8010ff8:	2000d908 	.word	0x2000d908
 8010ffc:	2000d90c 	.word	0x2000d90c
 8011000:	2000d90a 	.word	0x2000d90a
 8011004:	2000d914 	.word	0x2000d914
 8011008:	2000d8d4 	.word	0x2000d8d4
 801100c:	0801b734 	.word	0x0801b734
 8011010:	0801b8e8 	.word	0x0801b8e8
 8011014:	0801b780 	.word	0x0801b780
          goto aborted;
 8011018:	bf00      	nop
    tcp_input_pcb = NULL;
 801101a:	4b27      	ldr	r3, [pc, #156]	; (80110b8 <tcp_input+0x7f4>)
 801101c:	2200      	movs	r2, #0
 801101e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011020:	4b26      	ldr	r3, [pc, #152]	; (80110bc <tcp_input+0x7f8>)
 8011022:	2200      	movs	r2, #0
 8011024:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011026:	4b26      	ldr	r3, [pc, #152]	; (80110c0 <tcp_input+0x7fc>)
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d03f      	beq.n	80110ae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801102e:	4b24      	ldr	r3, [pc, #144]	; (80110c0 <tcp_input+0x7fc>)
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	4618      	mov	r0, r3
 8011034:	f7fd fbfa 	bl	800e82c <pbuf_free>
      inseg.p = NULL;
 8011038:	4b21      	ldr	r3, [pc, #132]	; (80110c0 <tcp_input+0x7fc>)
 801103a:	2200      	movs	r2, #0
 801103c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801103e:	e036      	b.n	80110ae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011040:	4b20      	ldr	r3, [pc, #128]	; (80110c4 <tcp_input+0x800>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	899b      	ldrh	r3, [r3, #12]
 8011046:	b29b      	uxth	r3, r3
 8011048:	4618      	mov	r0, r3
 801104a:	f7fc f8a7 	bl	800d19c <lwip_htons>
 801104e:	4603      	mov	r3, r0
 8011050:	b2db      	uxtb	r3, r3
 8011052:	f003 0304 	and.w	r3, r3, #4
 8011056:	2b00      	cmp	r3, #0
 8011058:	d118      	bne.n	801108c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801105a:	4b1b      	ldr	r3, [pc, #108]	; (80110c8 <tcp_input+0x804>)
 801105c:	6819      	ldr	r1, [r3, #0]
 801105e:	4b1b      	ldr	r3, [pc, #108]	; (80110cc <tcp_input+0x808>)
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	461a      	mov	r2, r3
 8011064:	4b1a      	ldr	r3, [pc, #104]	; (80110d0 <tcp_input+0x80c>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801106a:	4b16      	ldr	r3, [pc, #88]	; (80110c4 <tcp_input+0x800>)
 801106c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801106e:	885b      	ldrh	r3, [r3, #2]
 8011070:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011072:	4a14      	ldr	r2, [pc, #80]	; (80110c4 <tcp_input+0x800>)
 8011074:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011076:	8812      	ldrh	r2, [r2, #0]
 8011078:	b292      	uxth	r2, r2
 801107a:	9202      	str	r2, [sp, #8]
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	4b15      	ldr	r3, [pc, #84]	; (80110d4 <tcp_input+0x810>)
 8011080:	9300      	str	r3, [sp, #0]
 8011082:	4b15      	ldr	r3, [pc, #84]	; (80110d8 <tcp_input+0x814>)
 8011084:	4602      	mov	r2, r0
 8011086:	2000      	movs	r0, #0
 8011088:	f003 fc74 	bl	8014974 <tcp_rst>
    pbuf_free(p);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7fd fbcd 	bl	800e82c <pbuf_free>
  return;
 8011092:	e00c      	b.n	80110ae <tcp_input+0x7ea>
    goto dropped;
 8011094:	bf00      	nop
 8011096:	e006      	b.n	80110a6 <tcp_input+0x7e2>
    goto dropped;
 8011098:	bf00      	nop
 801109a:	e004      	b.n	80110a6 <tcp_input+0x7e2>
    goto dropped;
 801109c:	bf00      	nop
 801109e:	e002      	b.n	80110a6 <tcp_input+0x7e2>
      goto dropped;
 80110a0:	bf00      	nop
 80110a2:	e000      	b.n	80110a6 <tcp_input+0x7e2>
      goto dropped;
 80110a4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7fd fbc0 	bl	800e82c <pbuf_free>
 80110ac:	e000      	b.n	80110b0 <tcp_input+0x7ec>
  return;
 80110ae:	bf00      	nop
}
 80110b0:	3724      	adds	r7, #36	; 0x24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd90      	pop	{r4, r7, pc}
 80110b6:	bf00      	nop
 80110b8:	2000d914 	.word	0x2000d914
 80110bc:	2000d910 	.word	0x2000d910
 80110c0:	2000d8e0 	.word	0x2000d8e0
 80110c4:	2000d8f0 	.word	0x2000d8f0
 80110c8:	2000d904 	.word	0x2000d904
 80110cc:	2000d90a 	.word	0x2000d90a
 80110d0:	2000d900 	.word	0x2000d900
 80110d4:	2000a184 	.word	0x2000a184
 80110d8:	2000a188 	.word	0x2000a188

080110dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <tcp_input_delayed_close+0x1c>
 80110ea:	4b17      	ldr	r3, [pc, #92]	; (8011148 <tcp_input_delayed_close+0x6c>)
 80110ec:	f240 225a 	movw	r2, #602	; 0x25a
 80110f0:	4916      	ldr	r1, [pc, #88]	; (801114c <tcp_input_delayed_close+0x70>)
 80110f2:	4817      	ldr	r0, [pc, #92]	; (8011150 <tcp_input_delayed_close+0x74>)
 80110f4:	f007 fb4e 	bl	8018794 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80110f8:	4b16      	ldr	r3, [pc, #88]	; (8011154 <tcp_input_delayed_close+0x78>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	f003 0310 	and.w	r3, r3, #16
 8011100:	2b00      	cmp	r3, #0
 8011102:	d01c      	beq.n	801113e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	8b5b      	ldrh	r3, [r3, #26]
 8011108:	f003 0310 	and.w	r3, r3, #16
 801110c:	2b00      	cmp	r3, #0
 801110e:	d10d      	bne.n	801112c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011116:	2b00      	cmp	r3, #0
 8011118:	d008      	beq.n	801112c <tcp_input_delayed_close+0x50>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	6912      	ldr	r2, [r2, #16]
 8011124:	f06f 010e 	mvn.w	r1, #14
 8011128:	4610      	mov	r0, r2
 801112a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801112c:	6879      	ldr	r1, [r7, #4]
 801112e:	480a      	ldr	r0, [pc, #40]	; (8011158 <tcp_input_delayed_close+0x7c>)
 8011130:	f7ff fa50 	bl	80105d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f7fd fe35 	bl	800eda4 <tcp_free>
    return 1;
 801113a:	2301      	movs	r3, #1
 801113c:	e000      	b.n	8011140 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801113e:	2300      	movs	r3, #0
}
 8011140:	4618      	mov	r0, r3
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	0801b734 	.word	0x0801b734
 801114c:	0801b904 	.word	0x0801b904
 8011150:	0801b780 	.word	0x0801b780
 8011154:	2000d90d 	.word	0x2000d90d
 8011158:	2000d8d4 	.word	0x2000d8d4

0801115c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801115c:	b590      	push	{r4, r7, lr}
 801115e:	b08b      	sub	sp, #44	; 0x2c
 8011160:	af04      	add	r7, sp, #16
 8011162:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011164:	4b6f      	ldr	r3, [pc, #444]	; (8011324 <tcp_listen_input+0x1c8>)
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	f003 0304 	and.w	r3, r3, #4
 801116c:	2b00      	cmp	r3, #0
 801116e:	f040 80d2 	bne.w	8011316 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d106      	bne.n	8011186 <tcp_listen_input+0x2a>
 8011178:	4b6b      	ldr	r3, [pc, #428]	; (8011328 <tcp_listen_input+0x1cc>)
 801117a:	f240 2281 	movw	r2, #641	; 0x281
 801117e:	496b      	ldr	r1, [pc, #428]	; (801132c <tcp_listen_input+0x1d0>)
 8011180:	486b      	ldr	r0, [pc, #428]	; (8011330 <tcp_listen_input+0x1d4>)
 8011182:	f007 fb07 	bl	8018794 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011186:	4b67      	ldr	r3, [pc, #412]	; (8011324 <tcp_listen_input+0x1c8>)
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	f003 0310 	and.w	r3, r3, #16
 801118e:	2b00      	cmp	r3, #0
 8011190:	d019      	beq.n	80111c6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011192:	4b68      	ldr	r3, [pc, #416]	; (8011334 <tcp_listen_input+0x1d8>)
 8011194:	6819      	ldr	r1, [r3, #0]
 8011196:	4b68      	ldr	r3, [pc, #416]	; (8011338 <tcp_listen_input+0x1dc>)
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	461a      	mov	r2, r3
 801119c:	4b67      	ldr	r3, [pc, #412]	; (801133c <tcp_listen_input+0x1e0>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111a2:	4b67      	ldr	r3, [pc, #412]	; (8011340 <tcp_listen_input+0x1e4>)
 80111a4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111a6:	885b      	ldrh	r3, [r3, #2]
 80111a8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111aa:	4a65      	ldr	r2, [pc, #404]	; (8011340 <tcp_listen_input+0x1e4>)
 80111ac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111ae:	8812      	ldrh	r2, [r2, #0]
 80111b0:	b292      	uxth	r2, r2
 80111b2:	9202      	str	r2, [sp, #8]
 80111b4:	9301      	str	r3, [sp, #4]
 80111b6:	4b63      	ldr	r3, [pc, #396]	; (8011344 <tcp_listen_input+0x1e8>)
 80111b8:	9300      	str	r3, [sp, #0]
 80111ba:	4b63      	ldr	r3, [pc, #396]	; (8011348 <tcp_listen_input+0x1ec>)
 80111bc:	4602      	mov	r2, r0
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f003 fbd8 	bl	8014974 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80111c4:	e0a9      	b.n	801131a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80111c6:	4b57      	ldr	r3, [pc, #348]	; (8011324 <tcp_listen_input+0x1c8>)
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	f003 0302 	and.w	r3, r3, #2
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 80a3 	beq.w	801131a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	7d5b      	ldrb	r3, [r3, #21]
 80111d8:	4618      	mov	r0, r3
 80111da:	f7ff f859 	bl	8010290 <tcp_alloc>
 80111de:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d111      	bne.n	801120a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	699b      	ldr	r3, [r3, #24]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00a      	beq.n	8011204 <tcp_listen_input+0xa8>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	699b      	ldr	r3, [r3, #24]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	6910      	ldr	r0, [r2, #16]
 80111f6:	f04f 32ff 	mov.w	r2, #4294967295
 80111fa:	2100      	movs	r1, #0
 80111fc:	4798      	blx	r3
 80111fe:	4603      	mov	r3, r0
 8011200:	73bb      	strb	r3, [r7, #14]
      return;
 8011202:	e08b      	b.n	801131c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011204:	23f0      	movs	r3, #240	; 0xf0
 8011206:	73bb      	strb	r3, [r7, #14]
      return;
 8011208:	e088      	b.n	801131c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801120a:	4b50      	ldr	r3, [pc, #320]	; (801134c <tcp_listen_input+0x1f0>)
 801120c:	695a      	ldr	r2, [r3, #20]
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011212:	4b4e      	ldr	r3, [pc, #312]	; (801134c <tcp_listen_input+0x1f0>)
 8011214:	691a      	ldr	r2, [r3, #16]
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	8ada      	ldrh	r2, [r3, #22]
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011222:	4b47      	ldr	r3, [pc, #284]	; (8011340 <tcp_listen_input+0x1e4>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	881b      	ldrh	r3, [r3, #0]
 8011228:	b29a      	uxth	r2, r3
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	2203      	movs	r2, #3
 8011232:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011234:	4b41      	ldr	r3, [pc, #260]	; (801133c <tcp_listen_input+0x1e0>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	1c5a      	adds	r2, r3, #1
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011246:	6978      	ldr	r0, [r7, #20]
 8011248:	f7ff fa58 	bl	80106fc <tcp_next_iss>
 801124c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	693a      	ldr	r2, [r7, #16]
 8011252:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	693a      	ldr	r2, [r7, #16]
 8011258:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	693a      	ldr	r2, [r7, #16]
 801125e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	693a      	ldr	r2, [r7, #16]
 8011264:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011266:	4b35      	ldr	r3, [pc, #212]	; (801133c <tcp_listen_input+0x1e0>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	1e5a      	subs	r2, r3, #1
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	691a      	ldr	r2, [r3, #16]
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	7a5b      	ldrb	r3, [r3, #9]
 8011282:	f003 030c 	and.w	r3, r3, #12
 8011286:	b2da      	uxtb	r2, r3
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	7a1a      	ldrb	r2, [r3, #8]
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011294:	4b2e      	ldr	r3, [pc, #184]	; (8011350 <tcp_listen_input+0x1f4>)
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	60da      	str	r2, [r3, #12]
 801129c:	4a2c      	ldr	r2, [pc, #176]	; (8011350 <tcp_listen_input+0x1f4>)
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	6013      	str	r3, [r2, #0]
 80112a2:	f003 fd29 	bl	8014cf8 <tcp_timer_needed>
 80112a6:	4b2b      	ldr	r3, [pc, #172]	; (8011354 <tcp_listen_input+0x1f8>)
 80112a8:	2201      	movs	r2, #1
 80112aa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80112ac:	6978      	ldr	r0, [r7, #20]
 80112ae:	f001 fd8f 	bl	8012dd0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80112b2:	4b23      	ldr	r3, [pc, #140]	; (8011340 <tcp_listen_input+0x1e4>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	89db      	ldrh	r3, [r3, #14]
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	3304      	adds	r3, #4
 80112d4:	4618      	mov	r0, r3
 80112d6:	f005 fc4d 	bl	8016b74 <ip4_route>
 80112da:	4601      	mov	r1, r0
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	3304      	adds	r3, #4
 80112e0:	461a      	mov	r2, r3
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7ff fa30 	bl	8010748 <tcp_eff_send_mss_netif>
 80112e8:	4603      	mov	r3, r0
 80112ea:	461a      	mov	r2, r3
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80112f0:	2112      	movs	r1, #18
 80112f2:	6978      	ldr	r0, [r7, #20]
 80112f4:	f002 fc9c 	bl	8013c30 <tcp_enqueue_flags>
 80112f8:	4603      	mov	r3, r0
 80112fa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80112fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d004      	beq.n	801130e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011304:	2100      	movs	r1, #0
 8011306:	6978      	ldr	r0, [r7, #20]
 8011308:	f7fd ffd2 	bl	800f2b0 <tcp_abandon>
      return;
 801130c:	e006      	b.n	801131c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801130e:	6978      	ldr	r0, [r7, #20]
 8011310:	f002 fd7c 	bl	8013e0c <tcp_output>
  return;
 8011314:	e001      	b.n	801131a <tcp_listen_input+0x1be>
    return;
 8011316:	bf00      	nop
 8011318:	e000      	b.n	801131c <tcp_listen_input+0x1c0>
  return;
 801131a:	bf00      	nop
}
 801131c:	371c      	adds	r7, #28
 801131e:	46bd      	mov	sp, r7
 8011320:	bd90      	pop	{r4, r7, pc}
 8011322:	bf00      	nop
 8011324:	2000d90c 	.word	0x2000d90c
 8011328:	0801b734 	.word	0x0801b734
 801132c:	0801b92c 	.word	0x0801b92c
 8011330:	0801b780 	.word	0x0801b780
 8011334:	2000d904 	.word	0x2000d904
 8011338:	2000d90a 	.word	0x2000d90a
 801133c:	2000d900 	.word	0x2000d900
 8011340:	2000d8f0 	.word	0x2000d8f0
 8011344:	2000a184 	.word	0x2000a184
 8011348:	2000a188 	.word	0x2000a188
 801134c:	2000a174 	.word	0x2000a174
 8011350:	2000d8d4 	.word	0x2000d8d4
 8011354:	2000d8dc 	.word	0x2000d8dc

08011358 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b086      	sub	sp, #24
 801135c:	af04      	add	r7, sp, #16
 801135e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011360:	4b2f      	ldr	r3, [pc, #188]	; (8011420 <tcp_timewait_input+0xc8>)
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	f003 0304 	and.w	r3, r3, #4
 8011368:	2b00      	cmp	r3, #0
 801136a:	d153      	bne.n	8011414 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <tcp_timewait_input+0x28>
 8011372:	4b2c      	ldr	r3, [pc, #176]	; (8011424 <tcp_timewait_input+0xcc>)
 8011374:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011378:	492b      	ldr	r1, [pc, #172]	; (8011428 <tcp_timewait_input+0xd0>)
 801137a:	482c      	ldr	r0, [pc, #176]	; (801142c <tcp_timewait_input+0xd4>)
 801137c:	f007 fa0a 	bl	8018794 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011380:	4b27      	ldr	r3, [pc, #156]	; (8011420 <tcp_timewait_input+0xc8>)
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	f003 0302 	and.w	r3, r3, #2
 8011388:	2b00      	cmp	r3, #0
 801138a:	d02a      	beq.n	80113e2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801138c:	4b28      	ldr	r3, [pc, #160]	; (8011430 <tcp_timewait_input+0xd8>)
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011394:	1ad3      	subs	r3, r2, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	db2d      	blt.n	80113f6 <tcp_timewait_input+0x9e>
 801139a:	4b25      	ldr	r3, [pc, #148]	; (8011430 <tcp_timewait_input+0xd8>)
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a2:	6879      	ldr	r1, [r7, #4]
 80113a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113a6:	440b      	add	r3, r1
 80113a8:	1ad3      	subs	r3, r2, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dc23      	bgt.n	80113f6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113ae:	4b21      	ldr	r3, [pc, #132]	; (8011434 <tcp_timewait_input+0xdc>)
 80113b0:	6819      	ldr	r1, [r3, #0]
 80113b2:	4b21      	ldr	r3, [pc, #132]	; (8011438 <tcp_timewait_input+0xe0>)
 80113b4:	881b      	ldrh	r3, [r3, #0]
 80113b6:	461a      	mov	r2, r3
 80113b8:	4b1d      	ldr	r3, [pc, #116]	; (8011430 <tcp_timewait_input+0xd8>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113be:	4b1f      	ldr	r3, [pc, #124]	; (801143c <tcp_timewait_input+0xe4>)
 80113c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113c2:	885b      	ldrh	r3, [r3, #2]
 80113c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113c6:	4a1d      	ldr	r2, [pc, #116]	; (801143c <tcp_timewait_input+0xe4>)
 80113c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113ca:	8812      	ldrh	r2, [r2, #0]
 80113cc:	b292      	uxth	r2, r2
 80113ce:	9202      	str	r2, [sp, #8]
 80113d0:	9301      	str	r3, [sp, #4]
 80113d2:	4b1b      	ldr	r3, [pc, #108]	; (8011440 <tcp_timewait_input+0xe8>)
 80113d4:	9300      	str	r3, [sp, #0]
 80113d6:	4b1b      	ldr	r3, [pc, #108]	; (8011444 <tcp_timewait_input+0xec>)
 80113d8:	4602      	mov	r2, r0
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f003 faca 	bl	8014974 <tcp_rst>
      return;
 80113e0:	e01b      	b.n	801141a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80113e2:	4b0f      	ldr	r3, [pc, #60]	; (8011420 <tcp_timewait_input+0xc8>)
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	f003 0301 	and.w	r3, r3, #1
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d003      	beq.n	80113f6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80113ee:	4b16      	ldr	r3, [pc, #88]	; (8011448 <tcp_timewait_input+0xf0>)
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80113f6:	4b10      	ldr	r3, [pc, #64]	; (8011438 <tcp_timewait_input+0xe0>)
 80113f8:	881b      	ldrh	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00c      	beq.n	8011418 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8b5b      	ldrh	r3, [r3, #26]
 8011402:	f043 0302 	orr.w	r3, r3, #2
 8011406:	b29a      	uxth	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f002 fcfd 	bl	8013e0c <tcp_output>
  }
  return;
 8011412:	e001      	b.n	8011418 <tcp_timewait_input+0xc0>
    return;
 8011414:	bf00      	nop
 8011416:	e000      	b.n	801141a <tcp_timewait_input+0xc2>
  return;
 8011418:	bf00      	nop
}
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	2000d90c 	.word	0x2000d90c
 8011424:	0801b734 	.word	0x0801b734
 8011428:	0801b94c 	.word	0x0801b94c
 801142c:	0801b780 	.word	0x0801b780
 8011430:	2000d900 	.word	0x2000d900
 8011434:	2000d904 	.word	0x2000d904
 8011438:	2000d90a 	.word	0x2000d90a
 801143c:	2000d8f0 	.word	0x2000d8f0
 8011440:	2000a184 	.word	0x2000a184
 8011444:	2000a188 	.word	0x2000a188
 8011448:	2000d8c8 	.word	0x2000d8c8

0801144c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801144c:	b590      	push	{r4, r7, lr}
 801144e:	b08d      	sub	sp, #52	; 0x34
 8011450:	af04      	add	r7, sp, #16
 8011452:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d106      	bne.n	8011470 <tcp_process+0x24>
 8011462:	4b9d      	ldr	r3, [pc, #628]	; (80116d8 <tcp_process+0x28c>)
 8011464:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011468:	499c      	ldr	r1, [pc, #624]	; (80116dc <tcp_process+0x290>)
 801146a:	489d      	ldr	r0, [pc, #628]	; (80116e0 <tcp_process+0x294>)
 801146c:	f007 f992 	bl	8018794 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011470:	4b9c      	ldr	r3, [pc, #624]	; (80116e4 <tcp_process+0x298>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	f003 0304 	and.w	r3, r3, #4
 8011478:	2b00      	cmp	r3, #0
 801147a:	d04e      	beq.n	801151a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	7d1b      	ldrb	r3, [r3, #20]
 8011480:	2b02      	cmp	r3, #2
 8011482:	d108      	bne.n	8011496 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011488:	4b97      	ldr	r3, [pc, #604]	; (80116e8 <tcp_process+0x29c>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	429a      	cmp	r2, r3
 801148e:	d123      	bne.n	80114d8 <tcp_process+0x8c>
        acceptable = 1;
 8011490:	2301      	movs	r3, #1
 8011492:	76fb      	strb	r3, [r7, #27]
 8011494:	e020      	b.n	80114d8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801149a:	4b94      	ldr	r3, [pc, #592]	; (80116ec <tcp_process+0x2a0>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d102      	bne.n	80114a8 <tcp_process+0x5c>
        acceptable = 1;
 80114a2:	2301      	movs	r3, #1
 80114a4:	76fb      	strb	r3, [r7, #27]
 80114a6:	e017      	b.n	80114d8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80114a8:	4b90      	ldr	r3, [pc, #576]	; (80116ec <tcp_process+0x2a0>)
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	db10      	blt.n	80114d8 <tcp_process+0x8c>
 80114b6:	4b8d      	ldr	r3, [pc, #564]	; (80116ec <tcp_process+0x2a0>)
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114be:	6879      	ldr	r1, [r7, #4]
 80114c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114c2:	440b      	add	r3, r1
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dc06      	bgt.n	80114d8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	8b5b      	ldrh	r3, [r3, #26]
 80114ce:	f043 0302 	orr.w	r3, r3, #2
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80114d8:	7efb      	ldrb	r3, [r7, #27]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d01b      	beq.n	8011516 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	7d1b      	ldrb	r3, [r3, #20]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d106      	bne.n	80114f4 <tcp_process+0xa8>
 80114e6:	4b7c      	ldr	r3, [pc, #496]	; (80116d8 <tcp_process+0x28c>)
 80114e8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80114ec:	4980      	ldr	r1, [pc, #512]	; (80116f0 <tcp_process+0x2a4>)
 80114ee:	487c      	ldr	r0, [pc, #496]	; (80116e0 <tcp_process+0x294>)
 80114f0:	f007 f950 	bl	8018794 <iprintf>
      recv_flags |= TF_RESET;
 80114f4:	4b7f      	ldr	r3, [pc, #508]	; (80116f4 <tcp_process+0x2a8>)
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f043 0308 	orr.w	r3, r3, #8
 80114fc:	b2da      	uxtb	r2, r3
 80114fe:	4b7d      	ldr	r3, [pc, #500]	; (80116f4 <tcp_process+0x2a8>)
 8011500:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	8b5b      	ldrh	r3, [r3, #26]
 8011506:	f023 0301 	bic.w	r3, r3, #1
 801150a:	b29a      	uxth	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011510:	f06f 030d 	mvn.w	r3, #13
 8011514:	e37a      	b.n	8011c0c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011516:	2300      	movs	r3, #0
 8011518:	e378      	b.n	8011c0c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801151a:	4b72      	ldr	r3, [pc, #456]	; (80116e4 <tcp_process+0x298>)
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	f003 0302 	and.w	r3, r3, #2
 8011522:	2b00      	cmp	r3, #0
 8011524:	d010      	beq.n	8011548 <tcp_process+0xfc>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	7d1b      	ldrb	r3, [r3, #20]
 801152a:	2b02      	cmp	r3, #2
 801152c:	d00c      	beq.n	8011548 <tcp_process+0xfc>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	7d1b      	ldrb	r3, [r3, #20]
 8011532:	2b03      	cmp	r3, #3
 8011534:	d008      	beq.n	8011548 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8b5b      	ldrh	r3, [r3, #26]
 801153a:	f043 0302 	orr.w	r3, r3, #2
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011544:	2300      	movs	r3, #0
 8011546:	e361      	b.n	8011c0c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	8b5b      	ldrh	r3, [r3, #26]
 801154c:	f003 0310 	and.w	r3, r3, #16
 8011550:	2b00      	cmp	r3, #0
 8011552:	d103      	bne.n	801155c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011554:	4b68      	ldr	r3, [pc, #416]	; (80116f8 <tcp_process+0x2ac>)
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2200      	movs	r2, #0
 8011560:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f001 fc2f 	bl	8012dd0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	7d1b      	ldrb	r3, [r3, #20]
 8011576:	3b02      	subs	r3, #2
 8011578:	2b07      	cmp	r3, #7
 801157a:	f200 8337 	bhi.w	8011bec <tcp_process+0x7a0>
 801157e:	a201      	add	r2, pc, #4	; (adr r2, 8011584 <tcp_process+0x138>)
 8011580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011584:	080115a5 	.word	0x080115a5
 8011588:	080117d5 	.word	0x080117d5
 801158c:	0801194d 	.word	0x0801194d
 8011590:	08011977 	.word	0x08011977
 8011594:	08011a9b 	.word	0x08011a9b
 8011598:	0801194d 	.word	0x0801194d
 801159c:	08011b27 	.word	0x08011b27
 80115a0:	08011bb7 	.word	0x08011bb7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80115a4:	4b4f      	ldr	r3, [pc, #316]	; (80116e4 <tcp_process+0x298>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	f003 0310 	and.w	r3, r3, #16
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	f000 80e4 	beq.w	801177a <tcp_process+0x32e>
 80115b2:	4b4c      	ldr	r3, [pc, #304]	; (80116e4 <tcp_process+0x298>)
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	f003 0302 	and.w	r3, r3, #2
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	f000 80dd 	beq.w	801177a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115c4:	1c5a      	adds	r2, r3, #1
 80115c6:	4b48      	ldr	r3, [pc, #288]	; (80116e8 <tcp_process+0x29c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	f040 80d5 	bne.w	801177a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80115d0:	4b46      	ldr	r3, [pc, #280]	; (80116ec <tcp_process+0x2a0>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	1c5a      	adds	r2, r3, #1
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80115e2:	4b41      	ldr	r3, [pc, #260]	; (80116e8 <tcp_process+0x29c>)
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80115ea:	4b44      	ldr	r3, [pc, #272]	; (80116fc <tcp_process+0x2b0>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	89db      	ldrh	r3, [r3, #14]
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011604:	4b39      	ldr	r3, [pc, #228]	; (80116ec <tcp_process+0x2a0>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	1e5a      	subs	r2, r3, #1
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2204      	movs	r2, #4
 8011612:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	3304      	adds	r3, #4
 801161c:	4618      	mov	r0, r3
 801161e:	f005 faa9 	bl	8016b74 <ip4_route>
 8011622:	4601      	mov	r1, r0
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	3304      	adds	r3, #4
 8011628:	461a      	mov	r2, r3
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff f88c 	bl	8010748 <tcp_eff_send_mss_netif>
 8011630:	4603      	mov	r3, r0
 8011632:	461a      	mov	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801163c:	009a      	lsls	r2, r3, #2
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011642:	005b      	lsls	r3, r3, #1
 8011644:	f241 111c 	movw	r1, #4380	; 0x111c
 8011648:	428b      	cmp	r3, r1
 801164a:	bf38      	it	cc
 801164c:	460b      	movcc	r3, r1
 801164e:	429a      	cmp	r2, r3
 8011650:	d204      	bcs.n	801165c <tcp_process+0x210>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	b29b      	uxth	r3, r3
 801165a:	e00d      	b.n	8011678 <tcp_process+0x22c>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011660:	005b      	lsls	r3, r3, #1
 8011662:	f241 121c 	movw	r2, #4380	; 0x111c
 8011666:	4293      	cmp	r3, r2
 8011668:	d904      	bls.n	8011674 <tcp_process+0x228>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801166e:	005b      	lsls	r3, r3, #1
 8011670:	b29b      	uxth	r3, r3
 8011672:	e001      	b.n	8011678 <tcp_process+0x22c>
 8011674:	f241 131c 	movw	r3, #4380	; 0x111c
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011684:	2b00      	cmp	r3, #0
 8011686:	d106      	bne.n	8011696 <tcp_process+0x24a>
 8011688:	4b13      	ldr	r3, [pc, #76]	; (80116d8 <tcp_process+0x28c>)
 801168a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801168e:	491c      	ldr	r1, [pc, #112]	; (8011700 <tcp_process+0x2b4>)
 8011690:	4813      	ldr	r0, [pc, #76]	; (80116e0 <tcp_process+0x294>)
 8011692:	f007 f87f 	bl	8018794 <iprintf>
        --pcb->snd_queuelen;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801169c:	3b01      	subs	r3, #1
 801169e:	b29a      	uxth	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116aa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d12a      	bne.n	8011708 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d106      	bne.n	80116cc <tcp_process+0x280>
 80116be:	4b06      	ldr	r3, [pc, #24]	; (80116d8 <tcp_process+0x28c>)
 80116c0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80116c4:	490f      	ldr	r1, [pc, #60]	; (8011704 <tcp_process+0x2b8>)
 80116c6:	4806      	ldr	r0, [pc, #24]	; (80116e0 <tcp_process+0x294>)
 80116c8:	f007 f864 	bl	8018794 <iprintf>
          pcb->unsent = rseg->next;
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	66da      	str	r2, [r3, #108]	; 0x6c
 80116d4:	e01c      	b.n	8011710 <tcp_process+0x2c4>
 80116d6:	bf00      	nop
 80116d8:	0801b734 	.word	0x0801b734
 80116dc:	0801b96c 	.word	0x0801b96c
 80116e0:	0801b780 	.word	0x0801b780
 80116e4:	2000d90c 	.word	0x2000d90c
 80116e8:	2000d904 	.word	0x2000d904
 80116ec:	2000d900 	.word	0x2000d900
 80116f0:	0801b988 	.word	0x0801b988
 80116f4:	2000d90d 	.word	0x2000d90d
 80116f8:	2000d8c8 	.word	0x2000d8c8
 80116fc:	2000d8f0 	.word	0x2000d8f0
 8011700:	0801b9a8 	.word	0x0801b9a8
 8011704:	0801b9c0 	.word	0x0801b9c0
        } else {
          pcb->unacked = rseg->next;
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011710:	69f8      	ldr	r0, [r7, #28]
 8011712:	f7fe fc54 	bl	800ffbe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801171a:	2b00      	cmp	r3, #0
 801171c:	d104      	bne.n	8011728 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011724:	861a      	strh	r2, [r3, #48]	; 0x30
 8011726:	e006      	b.n	8011736 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2200      	movs	r2, #0
 801172c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2200      	movs	r2, #0
 8011732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801173c:	2b00      	cmp	r3, #0
 801173e:	d00a      	beq.n	8011756 <tcp_process+0x30a>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	6910      	ldr	r0, [r2, #16]
 801174a:	2200      	movs	r2, #0
 801174c:	6879      	ldr	r1, [r7, #4]
 801174e:	4798      	blx	r3
 8011750:	4603      	mov	r3, r0
 8011752:	76bb      	strb	r3, [r7, #26]
 8011754:	e001      	b.n	801175a <tcp_process+0x30e>
 8011756:	2300      	movs	r3, #0
 8011758:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801175a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801175e:	f113 0f0d 	cmn.w	r3, #13
 8011762:	d102      	bne.n	801176a <tcp_process+0x31e>
          return ERR_ABRT;
 8011764:	f06f 030c 	mvn.w	r3, #12
 8011768:	e250      	b.n	8011c0c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	8b5b      	ldrh	r3, [r3, #26]
 801176e:	f043 0302 	orr.w	r3, r3, #2
 8011772:	b29a      	uxth	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011778:	e23a      	b.n	8011bf0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801177a:	4b98      	ldr	r3, [pc, #608]	; (80119dc <tcp_process+0x590>)
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	f003 0310 	and.w	r3, r3, #16
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 8234 	beq.w	8011bf0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011788:	4b95      	ldr	r3, [pc, #596]	; (80119e0 <tcp_process+0x594>)
 801178a:	6819      	ldr	r1, [r3, #0]
 801178c:	4b95      	ldr	r3, [pc, #596]	; (80119e4 <tcp_process+0x598>)
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	461a      	mov	r2, r3
 8011792:	4b95      	ldr	r3, [pc, #596]	; (80119e8 <tcp_process+0x59c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011798:	4b94      	ldr	r3, [pc, #592]	; (80119ec <tcp_process+0x5a0>)
 801179a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801179c:	885b      	ldrh	r3, [r3, #2]
 801179e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117a0:	4a92      	ldr	r2, [pc, #584]	; (80119ec <tcp_process+0x5a0>)
 80117a2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117a4:	8812      	ldrh	r2, [r2, #0]
 80117a6:	b292      	uxth	r2, r2
 80117a8:	9202      	str	r2, [sp, #8]
 80117aa:	9301      	str	r3, [sp, #4]
 80117ac:	4b90      	ldr	r3, [pc, #576]	; (80119f0 <tcp_process+0x5a4>)
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	4b90      	ldr	r3, [pc, #576]	; (80119f4 <tcp_process+0x5a8>)
 80117b2:	4602      	mov	r2, r0
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f003 f8dd 	bl	8014974 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117c0:	2b05      	cmp	r3, #5
 80117c2:	f200 8215 	bhi.w	8011bf0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f002 fea7 	bl	8014520 <tcp_rexmit_rto>
      break;
 80117d2:	e20d      	b.n	8011bf0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80117d4:	4b81      	ldr	r3, [pc, #516]	; (80119dc <tcp_process+0x590>)
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	f003 0310 	and.w	r3, r3, #16
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 80a1 	beq.w	8011924 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117e2:	4b7f      	ldr	r3, [pc, #508]	; (80119e0 <tcp_process+0x594>)
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	3b01      	subs	r3, #1
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	db7e      	blt.n	80118f0 <tcp_process+0x4a4>
 80117f2:	4b7b      	ldr	r3, [pc, #492]	; (80119e0 <tcp_process+0x594>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	dc77      	bgt.n	80118f0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2204      	movs	r2, #4
 8011804:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801180a:	2b00      	cmp	r3, #0
 801180c:	d102      	bne.n	8011814 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801180e:	23fa      	movs	r3, #250	; 0xfa
 8011810:	76bb      	strb	r3, [r7, #26]
 8011812:	e01d      	b.n	8011850 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011818:	699b      	ldr	r3, [r3, #24]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d106      	bne.n	801182c <tcp_process+0x3e0>
 801181e:	4b76      	ldr	r3, [pc, #472]	; (80119f8 <tcp_process+0x5ac>)
 8011820:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011824:	4975      	ldr	r1, [pc, #468]	; (80119fc <tcp_process+0x5b0>)
 8011826:	4876      	ldr	r0, [pc, #472]	; (8011a00 <tcp_process+0x5b4>)
 8011828:	f006 ffb4 	bl	8018794 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011830:	699b      	ldr	r3, [r3, #24]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <tcp_process+0x400>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	6910      	ldr	r0, [r2, #16]
 8011840:	2200      	movs	r2, #0
 8011842:	6879      	ldr	r1, [r7, #4]
 8011844:	4798      	blx	r3
 8011846:	4603      	mov	r3, r0
 8011848:	76bb      	strb	r3, [r7, #26]
 801184a:	e001      	b.n	8011850 <tcp_process+0x404>
 801184c:	23f0      	movs	r3, #240	; 0xf0
 801184e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011850:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00a      	beq.n	801186e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011858:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801185c:	f113 0f0d 	cmn.w	r3, #13
 8011860:	d002      	beq.n	8011868 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7fd fde2 	bl	800f42c <tcp_abort>
            }
            return ERR_ABRT;
 8011868:	f06f 030c 	mvn.w	r3, #12
 801186c:	e1ce      	b.n	8011c0c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 fae0 	bl	8011e34 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011874:	4b63      	ldr	r3, [pc, #396]	; (8011a04 <tcp_process+0x5b8>)
 8011876:	881b      	ldrh	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d005      	beq.n	8011888 <tcp_process+0x43c>
            recv_acked--;
 801187c:	4b61      	ldr	r3, [pc, #388]	; (8011a04 <tcp_process+0x5b8>)
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	3b01      	subs	r3, #1
 8011882:	b29a      	uxth	r2, r3
 8011884:	4b5f      	ldr	r3, [pc, #380]	; (8011a04 <tcp_process+0x5b8>)
 8011886:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801188c:	009a      	lsls	r2, r3, #2
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	f241 111c 	movw	r1, #4380	; 0x111c
 8011898:	428b      	cmp	r3, r1
 801189a:	bf38      	it	cc
 801189c:	460b      	movcc	r3, r1
 801189e:	429a      	cmp	r2, r3
 80118a0:	d204      	bcs.n	80118ac <tcp_process+0x460>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	e00d      	b.n	80118c8 <tcp_process+0x47c>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	f241 121c 	movw	r2, #4380	; 0x111c
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d904      	bls.n	80118c4 <tcp_process+0x478>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	e001      	b.n	80118c8 <tcp_process+0x47c>
 80118c4:	f241 131c 	movw	r3, #4380	; 0x111c
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80118ce:	4b4e      	ldr	r3, [pc, #312]	; (8011a08 <tcp_process+0x5bc>)
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	f003 0320 	and.w	r3, r3, #32
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d037      	beq.n	801194a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	8b5b      	ldrh	r3, [r3, #26]
 80118de:	f043 0302 	orr.w	r3, r3, #2
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2207      	movs	r2, #7
 80118ec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80118ee:	e02c      	b.n	801194a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118f0:	4b3b      	ldr	r3, [pc, #236]	; (80119e0 <tcp_process+0x594>)
 80118f2:	6819      	ldr	r1, [r3, #0]
 80118f4:	4b3b      	ldr	r3, [pc, #236]	; (80119e4 <tcp_process+0x598>)
 80118f6:	881b      	ldrh	r3, [r3, #0]
 80118f8:	461a      	mov	r2, r3
 80118fa:	4b3b      	ldr	r3, [pc, #236]	; (80119e8 <tcp_process+0x59c>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011900:	4b3a      	ldr	r3, [pc, #232]	; (80119ec <tcp_process+0x5a0>)
 8011902:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011904:	885b      	ldrh	r3, [r3, #2]
 8011906:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011908:	4a38      	ldr	r2, [pc, #224]	; (80119ec <tcp_process+0x5a0>)
 801190a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801190c:	8812      	ldrh	r2, [r2, #0]
 801190e:	b292      	uxth	r2, r2
 8011910:	9202      	str	r2, [sp, #8]
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	4b36      	ldr	r3, [pc, #216]	; (80119f0 <tcp_process+0x5a4>)
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	4b36      	ldr	r3, [pc, #216]	; (80119f4 <tcp_process+0x5a8>)
 801191a:	4602      	mov	r2, r0
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f003 f829 	bl	8014974 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011922:	e167      	b.n	8011bf4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011924:	4b2d      	ldr	r3, [pc, #180]	; (80119dc <tcp_process+0x590>)
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	f003 0302 	and.w	r3, r3, #2
 801192c:	2b00      	cmp	r3, #0
 801192e:	f000 8161 	beq.w	8011bf4 <tcp_process+0x7a8>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011936:	1e5a      	subs	r2, r3, #1
 8011938:	4b2b      	ldr	r3, [pc, #172]	; (80119e8 <tcp_process+0x59c>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	f040 8159 	bne.w	8011bf4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f002 fe0e 	bl	8014564 <tcp_rexmit>
      break;
 8011948:	e154      	b.n	8011bf4 <tcp_process+0x7a8>
 801194a:	e153      	b.n	8011bf4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f000 fa71 	bl	8011e34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011952:	4b2d      	ldr	r3, [pc, #180]	; (8011a08 <tcp_process+0x5bc>)
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	f003 0320 	and.w	r3, r3, #32
 801195a:	2b00      	cmp	r3, #0
 801195c:	f000 814c 	beq.w	8011bf8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	8b5b      	ldrh	r3, [r3, #26]
 8011964:	f043 0302 	orr.w	r3, r3, #2
 8011968:	b29a      	uxth	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2207      	movs	r2, #7
 8011972:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011974:	e140      	b.n	8011bf8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 fa5c 	bl	8011e34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801197c:	4b22      	ldr	r3, [pc, #136]	; (8011a08 <tcp_process+0x5bc>)
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	f003 0320 	and.w	r3, r3, #32
 8011984:	2b00      	cmp	r3, #0
 8011986:	d071      	beq.n	8011a6c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011988:	4b14      	ldr	r3, [pc, #80]	; (80119dc <tcp_process+0x590>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	f003 0310 	and.w	r3, r3, #16
 8011990:	2b00      	cmp	r3, #0
 8011992:	d060      	beq.n	8011a56 <tcp_process+0x60a>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011998:	4b11      	ldr	r3, [pc, #68]	; (80119e0 <tcp_process+0x594>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	429a      	cmp	r2, r3
 801199e:	d15a      	bne.n	8011a56 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d156      	bne.n	8011a56 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	8b5b      	ldrh	r3, [r3, #26]
 80119ac:	f043 0302 	orr.w	r3, r3, #2
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7fe fdbc 	bl	8010534 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80119bc:	4b13      	ldr	r3, [pc, #76]	; (8011a0c <tcp_process+0x5c0>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d105      	bne.n	80119d2 <tcp_process+0x586>
 80119c6:	4b11      	ldr	r3, [pc, #68]	; (8011a0c <tcp_process+0x5c0>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	4a0f      	ldr	r2, [pc, #60]	; (8011a0c <tcp_process+0x5c0>)
 80119ce:	6013      	str	r3, [r2, #0]
 80119d0:	e02e      	b.n	8011a30 <tcp_process+0x5e4>
 80119d2:	4b0e      	ldr	r3, [pc, #56]	; (8011a0c <tcp_process+0x5c0>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	617b      	str	r3, [r7, #20]
 80119d8:	e027      	b.n	8011a2a <tcp_process+0x5de>
 80119da:	bf00      	nop
 80119dc:	2000d90c 	.word	0x2000d90c
 80119e0:	2000d904 	.word	0x2000d904
 80119e4:	2000d90a 	.word	0x2000d90a
 80119e8:	2000d900 	.word	0x2000d900
 80119ec:	2000d8f0 	.word	0x2000d8f0
 80119f0:	2000a184 	.word	0x2000a184
 80119f4:	2000a188 	.word	0x2000a188
 80119f8:	0801b734 	.word	0x0801b734
 80119fc:	0801b9d4 	.word	0x0801b9d4
 8011a00:	0801b780 	.word	0x0801b780
 8011a04:	2000d908 	.word	0x2000d908
 8011a08:	2000d90d 	.word	0x2000d90d
 8011a0c:	2000d8d4 	.word	0x2000d8d4
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d104      	bne.n	8011a24 <tcp_process+0x5d8>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	68da      	ldr	r2, [r3, #12]
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	60da      	str	r2, [r3, #12]
 8011a22:	e005      	b.n	8011a30 <tcp_process+0x5e4>
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	617b      	str	r3, [r7, #20]
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d1ef      	bne.n	8011a10 <tcp_process+0x5c4>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2200      	movs	r2, #0
 8011a34:	60da      	str	r2, [r3, #12]
 8011a36:	4b77      	ldr	r3, [pc, #476]	; (8011c14 <tcp_process+0x7c8>)
 8011a38:	2201      	movs	r2, #1
 8011a3a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	220a      	movs	r2, #10
 8011a40:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011a42:	4b75      	ldr	r3, [pc, #468]	; (8011c18 <tcp_process+0x7cc>)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	60da      	str	r2, [r3, #12]
 8011a4a:	4a73      	ldr	r2, [pc, #460]	; (8011c18 <tcp_process+0x7cc>)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6013      	str	r3, [r2, #0]
 8011a50:	f003 f952 	bl	8014cf8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011a54:	e0d2      	b.n	8011bfc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8b5b      	ldrh	r3, [r3, #26]
 8011a5a:	f043 0302 	orr.w	r3, r3, #2
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2208      	movs	r2, #8
 8011a68:	751a      	strb	r2, [r3, #20]
      break;
 8011a6a:	e0c7      	b.n	8011bfc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a6c:	4b6b      	ldr	r3, [pc, #428]	; (8011c1c <tcp_process+0x7d0>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	f003 0310 	and.w	r3, r3, #16
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	f000 80c1 	beq.w	8011bfc <tcp_process+0x7b0>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a7e:	4b68      	ldr	r3, [pc, #416]	; (8011c20 <tcp_process+0x7d4>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	f040 80ba 	bne.w	8011bfc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f040 80b5 	bne.w	8011bfc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2206      	movs	r2, #6
 8011a96:	751a      	strb	r2, [r3, #20]
      break;
 8011a98:	e0b0      	b.n	8011bfc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 f9ca 	bl	8011e34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011aa0:	4b60      	ldr	r3, [pc, #384]	; (8011c24 <tcp_process+0x7d8>)
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	f003 0320 	and.w	r3, r3, #32
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f000 80a9 	beq.w	8011c00 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	8b5b      	ldrh	r3, [r3, #26]
 8011ab2:	f043 0302 	orr.w	r3, r3, #2
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7fe fd39 	bl	8010534 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011ac2:	4b59      	ldr	r3, [pc, #356]	; (8011c28 <tcp_process+0x7dc>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d105      	bne.n	8011ad8 <tcp_process+0x68c>
 8011acc:	4b56      	ldr	r3, [pc, #344]	; (8011c28 <tcp_process+0x7dc>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	4a55      	ldr	r2, [pc, #340]	; (8011c28 <tcp_process+0x7dc>)
 8011ad4:	6013      	str	r3, [r2, #0]
 8011ad6:	e013      	b.n	8011b00 <tcp_process+0x6b4>
 8011ad8:	4b53      	ldr	r3, [pc, #332]	; (8011c28 <tcp_process+0x7dc>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	613b      	str	r3, [r7, #16]
 8011ade:	e00c      	b.n	8011afa <tcp_process+0x6ae>
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	68db      	ldr	r3, [r3, #12]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d104      	bne.n	8011af4 <tcp_process+0x6a8>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	68da      	ldr	r2, [r3, #12]
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	60da      	str	r2, [r3, #12]
 8011af2:	e005      	b.n	8011b00 <tcp_process+0x6b4>
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	613b      	str	r3, [r7, #16]
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d1ef      	bne.n	8011ae0 <tcp_process+0x694>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	60da      	str	r2, [r3, #12]
 8011b06:	4b43      	ldr	r3, [pc, #268]	; (8011c14 <tcp_process+0x7c8>)
 8011b08:	2201      	movs	r2, #1
 8011b0a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	220a      	movs	r2, #10
 8011b10:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b12:	4b41      	ldr	r3, [pc, #260]	; (8011c18 <tcp_process+0x7cc>)
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	60da      	str	r2, [r3, #12]
 8011b1a:	4a3f      	ldr	r2, [pc, #252]	; (8011c18 <tcp_process+0x7cc>)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6013      	str	r3, [r2, #0]
 8011b20:	f003 f8ea 	bl	8014cf8 <tcp_timer_needed>
      }
      break;
 8011b24:	e06c      	b.n	8011c00 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 f984 	bl	8011e34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b2c:	4b3b      	ldr	r3, [pc, #236]	; (8011c1c <tcp_process+0x7d0>)
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	f003 0310 	and.w	r3, r3, #16
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d065      	beq.n	8011c04 <tcp_process+0x7b8>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b3c:	4b38      	ldr	r3, [pc, #224]	; (8011c20 <tcp_process+0x7d4>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d15f      	bne.n	8011c04 <tcp_process+0x7b8>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d15b      	bne.n	8011c04 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7fe fcf1 	bl	8010534 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011b52:	4b35      	ldr	r3, [pc, #212]	; (8011c28 <tcp_process+0x7dc>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d105      	bne.n	8011b68 <tcp_process+0x71c>
 8011b5c:	4b32      	ldr	r3, [pc, #200]	; (8011c28 <tcp_process+0x7dc>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	4a31      	ldr	r2, [pc, #196]	; (8011c28 <tcp_process+0x7dc>)
 8011b64:	6013      	str	r3, [r2, #0]
 8011b66:	e013      	b.n	8011b90 <tcp_process+0x744>
 8011b68:	4b2f      	ldr	r3, [pc, #188]	; (8011c28 <tcp_process+0x7dc>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	e00c      	b.n	8011b8a <tcp_process+0x73e>
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d104      	bne.n	8011b84 <tcp_process+0x738>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	68da      	ldr	r2, [r3, #12]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	60da      	str	r2, [r3, #12]
 8011b82:	e005      	b.n	8011b90 <tcp_process+0x744>
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	60fb      	str	r3, [r7, #12]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1ef      	bne.n	8011b70 <tcp_process+0x724>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	60da      	str	r2, [r3, #12]
 8011b96:	4b1f      	ldr	r3, [pc, #124]	; (8011c14 <tcp_process+0x7c8>)
 8011b98:	2201      	movs	r2, #1
 8011b9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	220a      	movs	r2, #10
 8011ba0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011ba2:	4b1d      	ldr	r3, [pc, #116]	; (8011c18 <tcp_process+0x7cc>)
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	60da      	str	r2, [r3, #12]
 8011baa:	4a1b      	ldr	r2, [pc, #108]	; (8011c18 <tcp_process+0x7cc>)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	f003 f8a2 	bl	8014cf8 <tcp_timer_needed>
      }
      break;
 8011bb4:	e026      	b.n	8011c04 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f000 f93c 	bl	8011e34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011bbc:	4b17      	ldr	r3, [pc, #92]	; (8011c1c <tcp_process+0x7d0>)
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	f003 0310 	and.w	r3, r3, #16
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d01f      	beq.n	8011c08 <tcp_process+0x7bc>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bcc:	4b14      	ldr	r3, [pc, #80]	; (8011c20 <tcp_process+0x7d4>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d119      	bne.n	8011c08 <tcp_process+0x7bc>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d115      	bne.n	8011c08 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011bdc:	4b11      	ldr	r3, [pc, #68]	; (8011c24 <tcp_process+0x7d8>)
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	f043 0310 	orr.w	r3, r3, #16
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	4b0f      	ldr	r3, [pc, #60]	; (8011c24 <tcp_process+0x7d8>)
 8011be8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011bea:	e00d      	b.n	8011c08 <tcp_process+0x7bc>
    default:
      break;
 8011bec:	bf00      	nop
 8011bee:	e00c      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011bf0:	bf00      	nop
 8011bf2:	e00a      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011bf4:	bf00      	nop
 8011bf6:	e008      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011bf8:	bf00      	nop
 8011bfa:	e006      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011bfc:	bf00      	nop
 8011bfe:	e004      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011c00:	bf00      	nop
 8011c02:	e002      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011c04:	bf00      	nop
 8011c06:	e000      	b.n	8011c0a <tcp_process+0x7be>
      break;
 8011c08:	bf00      	nop
  }
  return ERR_OK;
 8011c0a:	2300      	movs	r3, #0
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3724      	adds	r7, #36	; 0x24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd90      	pop	{r4, r7, pc}
 8011c14:	2000d8dc 	.word	0x2000d8dc
 8011c18:	2000d8d8 	.word	0x2000d8d8
 8011c1c:	2000d90c 	.word	0x2000d90c
 8011c20:	2000d904 	.word	0x2000d904
 8011c24:	2000d90d 	.word	0x2000d90d
 8011c28:	2000d8d4 	.word	0x2000d8d4

08011c2c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011c2c:	b590      	push	{r4, r7, lr}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d106      	bne.n	8011c4a <tcp_oos_insert_segment+0x1e>
 8011c3c:	4b3b      	ldr	r3, [pc, #236]	; (8011d2c <tcp_oos_insert_segment+0x100>)
 8011c3e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011c42:	493b      	ldr	r1, [pc, #236]	; (8011d30 <tcp_oos_insert_segment+0x104>)
 8011c44:	483b      	ldr	r0, [pc, #236]	; (8011d34 <tcp_oos_insert_segment+0x108>)
 8011c46:	f006 fda5 	bl	8018794 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	899b      	ldrh	r3, [r3, #12]
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fb faa2 	bl	800d19c <lwip_htons>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	f003 0301 	and.w	r3, r3, #1
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d028      	beq.n	8011cb6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011c64:	6838      	ldr	r0, [r7, #0]
 8011c66:	f7fe f995 	bl	800ff94 <tcp_segs_free>
    next = NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	603b      	str	r3, [r7, #0]
 8011c6e:	e056      	b.n	8011d1e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	899b      	ldrh	r3, [r3, #12]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fb fa8f 	bl	800d19c <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	f003 0301 	and.w	r3, r3, #1
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d00d      	beq.n	8011ca6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	899b      	ldrh	r3, [r3, #12]
 8011c90:	b29c      	uxth	r4, r3
 8011c92:	2001      	movs	r0, #1
 8011c94:	f7fb fa82 	bl	800d19c <lwip_htons>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	4322      	orrs	r2, r4
 8011ca2:	b292      	uxth	r2, r2
 8011ca4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f7fe f984 	bl	800ffbe <tcp_seg_free>
    while (next &&
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00e      	beq.n	8011cda <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	891b      	ldrh	r3, [r3, #8]
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	4b1d      	ldr	r3, [pc, #116]	; (8011d38 <tcp_oos_insert_segment+0x10c>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	441a      	add	r2, r3
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	6839      	ldr	r1, [r7, #0]
 8011cd0:	8909      	ldrh	r1, [r1, #8]
 8011cd2:	440b      	add	r3, r1
 8011cd4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	daca      	bge.n	8011c70 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d01e      	beq.n	8011d1e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	891b      	ldrh	r3, [r3, #8]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	4b14      	ldr	r3, [pc, #80]	; (8011d38 <tcp_oos_insert_segment+0x10c>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	441a      	add	r2, r3
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	dd12      	ble.n	8011d1e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	4b0d      	ldr	r3, [pc, #52]	; (8011d38 <tcp_oos_insert_segment+0x10c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	1ad3      	subs	r3, r2, r3
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	685a      	ldr	r2, [r3, #4]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	891b      	ldrh	r3, [r3, #8]
 8011d16:	4619      	mov	r1, r3
 8011d18:	4610      	mov	r0, r2
 8011d1a:	f7fc fc01 	bl	800e520 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	683a      	ldr	r2, [r7, #0]
 8011d22:	601a      	str	r2, [r3, #0]
}
 8011d24:	bf00      	nop
 8011d26:	3714      	adds	r7, #20
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd90      	pop	{r4, r7, pc}
 8011d2c:	0801b734 	.word	0x0801b734
 8011d30:	0801b9f4 	.word	0x0801b9f4
 8011d34:	0801b780 	.word	0x0801b780
 8011d38:	2000d900 	.word	0x2000d900

08011d3c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011d3c:	b5b0      	push	{r4, r5, r7, lr}
 8011d3e:	b086      	sub	sp, #24
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
 8011d48:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011d4a:	e03e      	b.n	8011dca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fc fdf4 	bl	800e948 <pbuf_clen>
 8011d60:	4603      	mov	r3, r0
 8011d62:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d6a:	8a7a      	ldrh	r2, [r7, #18]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d906      	bls.n	8011d7e <tcp_free_acked_segments+0x42>
 8011d70:	4b2a      	ldr	r3, [pc, #168]	; (8011e1c <tcp_free_acked_segments+0xe0>)
 8011d72:	f240 4257 	movw	r2, #1111	; 0x457
 8011d76:	492a      	ldr	r1, [pc, #168]	; (8011e20 <tcp_free_acked_segments+0xe4>)
 8011d78:	482a      	ldr	r0, [pc, #168]	; (8011e24 <tcp_free_acked_segments+0xe8>)
 8011d7a:	f006 fd0b 	bl	8018794 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011d84:	8a7b      	ldrh	r3, [r7, #18]
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	891a      	ldrh	r2, [r3, #8]
 8011d94:	4b24      	ldr	r3, [pc, #144]	; (8011e28 <tcp_free_acked_segments+0xec>)
 8011d96:	881b      	ldrh	r3, [r3, #0]
 8011d98:	4413      	add	r3, r2
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	4b22      	ldr	r3, [pc, #136]	; (8011e28 <tcp_free_acked_segments+0xec>)
 8011d9e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011da0:	6978      	ldr	r0, [r7, #20]
 8011da2:	f7fe f90c 	bl	800ffbe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d00c      	beq.n	8011dca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d109      	bne.n	8011dca <tcp_free_acked_segments+0x8e>
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d106      	bne.n	8011dca <tcp_free_acked_segments+0x8e>
 8011dbc:	4b17      	ldr	r3, [pc, #92]	; (8011e1c <tcp_free_acked_segments+0xe0>)
 8011dbe:	f240 4261 	movw	r2, #1121	; 0x461
 8011dc2:	491a      	ldr	r1, [pc, #104]	; (8011e2c <tcp_free_acked_segments+0xf0>)
 8011dc4:	4817      	ldr	r0, [pc, #92]	; (8011e24 <tcp_free_acked_segments+0xe8>)
 8011dc6:	f006 fce5 	bl	8018794 <iprintf>
  while (seg_list != NULL &&
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d020      	beq.n	8011e12 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fb f9f5 	bl	800d1c6 <lwip_htonl>
 8011ddc:	4604      	mov	r4, r0
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	891b      	ldrh	r3, [r3, #8]
 8011de2:	461d      	mov	r5, r3
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	899b      	ldrh	r3, [r3, #12]
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fb f9d5 	bl	800d19c <lwip_htons>
 8011df2:	4603      	mov	r3, r0
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	f003 0303 	and.w	r3, r3, #3
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d001      	beq.n	8011e02 <tcp_free_acked_segments+0xc6>
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e000      	b.n	8011e04 <tcp_free_acked_segments+0xc8>
 8011e02:	2300      	movs	r3, #0
 8011e04:	442b      	add	r3, r5
 8011e06:	18e2      	adds	r2, r4, r3
 8011e08:	4b09      	ldr	r3, [pc, #36]	; (8011e30 <tcp_free_acked_segments+0xf4>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	dd9c      	ble.n	8011d4c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011e12:	68bb      	ldr	r3, [r7, #8]
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3718      	adds	r7, #24
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8011e1c:	0801b734 	.word	0x0801b734
 8011e20:	0801ba1c 	.word	0x0801ba1c
 8011e24:	0801b780 	.word	0x0801b780
 8011e28:	2000d908 	.word	0x2000d908
 8011e2c:	0801ba44 	.word	0x0801ba44
 8011e30:	2000d904 	.word	0x2000d904

08011e34 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011e34:	b5b0      	push	{r4, r5, r7, lr}
 8011e36:	b094      	sub	sp, #80	; 0x50
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d106      	bne.n	8011e54 <tcp_receive+0x20>
 8011e46:	4b91      	ldr	r3, [pc, #580]	; (801208c <tcp_receive+0x258>)
 8011e48:	f240 427b 	movw	r2, #1147	; 0x47b
 8011e4c:	4990      	ldr	r1, [pc, #576]	; (8012090 <tcp_receive+0x25c>)
 8011e4e:	4891      	ldr	r0, [pc, #580]	; (8012094 <tcp_receive+0x260>)
 8011e50:	f006 fca0 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	7d1b      	ldrb	r3, [r3, #20]
 8011e58:	2b03      	cmp	r3, #3
 8011e5a:	d806      	bhi.n	8011e6a <tcp_receive+0x36>
 8011e5c:	4b8b      	ldr	r3, [pc, #556]	; (801208c <tcp_receive+0x258>)
 8011e5e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011e62:	498d      	ldr	r1, [pc, #564]	; (8012098 <tcp_receive+0x264>)
 8011e64:	488b      	ldr	r0, [pc, #556]	; (8012094 <tcp_receive+0x260>)
 8011e66:	f006 fc95 	bl	8018794 <iprintf>

  if (flags & TCP_ACK) {
 8011e6a:	4b8c      	ldr	r3, [pc, #560]	; (801209c <tcp_receive+0x268>)
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	f003 0310 	and.w	r3, r3, #16
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f000 8264 	beq.w	8012340 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e7e:	461a      	mov	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e84:	4413      	add	r3, r2
 8011e86:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e8c:	4b84      	ldr	r3, [pc, #528]	; (80120a0 <tcp_receive+0x26c>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	db1b      	blt.n	8011ece <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e9a:	4b81      	ldr	r3, [pc, #516]	; (80120a0 <tcp_receive+0x26c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d106      	bne.n	8011eb0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011ea6:	4b7f      	ldr	r3, [pc, #508]	; (80120a4 <tcp_receive+0x270>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	db0e      	blt.n	8011ece <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011eb4:	4b7b      	ldr	r3, [pc, #492]	; (80120a4 <tcp_receive+0x270>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d125      	bne.n	8011f08 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011ebc:	4b7a      	ldr	r3, [pc, #488]	; (80120a8 <tcp_receive+0x274>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	89db      	ldrh	r3, [r3, #14]
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d91c      	bls.n	8011f08 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011ece:	4b76      	ldr	r3, [pc, #472]	; (80120a8 <tcp_receive+0x274>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	89db      	ldrh	r3, [r3, #14]
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d205      	bcs.n	8011ef8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011ef8:	4b69      	ldr	r3, [pc, #420]	; (80120a0 <tcp_receive+0x26c>)
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011f00:	4b68      	ldr	r3, [pc, #416]	; (80120a4 <tcp_receive+0x270>)
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011f08:	4b66      	ldr	r3, [pc, #408]	; (80120a4 <tcp_receive+0x270>)
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f10:	1ad3      	subs	r3, r2, r3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	dc58      	bgt.n	8011fc8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011f16:	4b65      	ldr	r3, [pc, #404]	; (80120ac <tcp_receive+0x278>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d14b      	bne.n	8011fb6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011f28:	4413      	add	r3, r2
 8011f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d142      	bne.n	8011fb6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	db3d      	blt.n	8011fb6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f3e:	4b59      	ldr	r3, [pc, #356]	; (80120a4 <tcp_receive+0x270>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d137      	bne.n	8011fb6 <tcp_receive+0x182>
              found_dupack = 1;
 8011f46:	2301      	movs	r3, #1
 8011f48:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f50:	2bff      	cmp	r3, #255	; 0xff
 8011f52:	d007      	beq.n	8011f64 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	b2da      	uxtb	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d91b      	bls.n	8011fa6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f78:	4413      	add	r3, r2
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d30a      	bcc.n	8011f9c <tcp_receive+0x168>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f90:	4413      	add	r3, r2
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f9a:	e004      	b.n	8011fa6 <tcp_receive+0x172>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	d902      	bls.n	8011fb6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f002 fb43 	bl	801463c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f040 8161 	bne.w	8012280 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011fc6:	e15b      	b.n	8012280 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fc8:	4b36      	ldr	r3, [pc, #216]	; (80120a4 <tcp_receive+0x270>)
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fd0:	1ad3      	subs	r3, r2, r3
 8011fd2:	3b01      	subs	r3, #1
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f2c0 814e 	blt.w	8012276 <tcp_receive+0x442>
 8011fda:	4b32      	ldr	r3, [pc, #200]	; (80120a4 <tcp_receive+0x270>)
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fe2:	1ad3      	subs	r3, r2, r3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f300 8146 	bgt.w	8012276 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8b5b      	ldrh	r3, [r3, #26]
 8011fee:	f003 0304 	and.w	r3, r3, #4
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d010      	beq.n	8012018 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	8b5b      	ldrh	r3, [r3, #26]
 8011ffa:	f023 0304 	bic.w	r3, r3, #4
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2200      	movs	r2, #0
 8012014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012026:	10db      	asrs	r3, r3, #3
 8012028:	b21b      	sxth	r3, r3
 801202a:	b29a      	uxth	r2, r3
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012032:	b29b      	uxth	r3, r3
 8012034:	4413      	add	r3, r2
 8012036:	b29b      	uxth	r3, r3
 8012038:	b21a      	sxth	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012040:	4b18      	ldr	r3, [pc, #96]	; (80120a4 <tcp_receive+0x270>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	b29a      	uxth	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801204a:	b29b      	uxth	r3, r3
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012058:	4b12      	ldr	r3, [pc, #72]	; (80120a4 <tcp_receive+0x270>)
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	7d1b      	ldrb	r3, [r3, #20]
 8012064:	2b03      	cmp	r3, #3
 8012066:	f240 8097 	bls.w	8012198 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012076:	429a      	cmp	r2, r3
 8012078:	d245      	bcs.n	8012106 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8b5b      	ldrh	r3, [r3, #26]
 801207e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012082:	2b00      	cmp	r3, #0
 8012084:	d014      	beq.n	80120b0 <tcp_receive+0x27c>
 8012086:	2301      	movs	r3, #1
 8012088:	e013      	b.n	80120b2 <tcp_receive+0x27e>
 801208a:	bf00      	nop
 801208c:	0801b734 	.word	0x0801b734
 8012090:	0801ba64 	.word	0x0801ba64
 8012094:	0801b780 	.word	0x0801b780
 8012098:	0801ba80 	.word	0x0801ba80
 801209c:	2000d90c 	.word	0x2000d90c
 80120a0:	2000d900 	.word	0x2000d900
 80120a4:	2000d904 	.word	0x2000d904
 80120a8:	2000d8f0 	.word	0x2000d8f0
 80120ac:	2000d90a 	.word	0x2000d90a
 80120b0:	2302      	movs	r3, #2
 80120b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80120b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c0:	fb12 f303 	smulbb	r3, r2, r3
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120c8:	4293      	cmp	r3, r2
 80120ca:	bf28      	it	cs
 80120cc:	4613      	movcs	r3, r2
 80120ce:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120d8:	4413      	add	r3, r2
 80120da:	b29a      	uxth	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d309      	bcc.n	80120fa <tcp_receive+0x2c6>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120ee:	4413      	add	r3, r2
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80120f8:	e04e      	b.n	8012198 <tcp_receive+0x364>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012100:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012104:	e048      	b.n	8012198 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801210c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801210e:	4413      	add	r3, r2
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012118:	429a      	cmp	r2, r3
 801211a:	d309      	bcc.n	8012130 <tcp_receive+0x2fc>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012124:	4413      	add	r3, r2
 8012126:	b29a      	uxth	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801212e:	e004      	b.n	801213a <tcp_receive+0x306>
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012136:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012146:	429a      	cmp	r2, r3
 8012148:	d326      	bcc.n	8012198 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	b29a      	uxth	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801216a:	4413      	add	r3, r2
 801216c:	b29a      	uxth	r2, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012174:	429a      	cmp	r2, r3
 8012176:	d30a      	bcc.n	801218e <tcp_receive+0x35a>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012182:	4413      	add	r3, r2
 8012184:	b29a      	uxth	r2, r3
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801218c:	e004      	b.n	8012198 <tcp_receive+0x364>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012194:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a0:	4a98      	ldr	r2, [pc, #608]	; (8012404 <tcp_receive+0x5d0>)
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7ff fdca 	bl	8011d3c <tcp_free_acked_segments>
 80121a8:	4602      	mov	r2, r0
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b6:	4a94      	ldr	r2, [pc, #592]	; (8012408 <tcp_receive+0x5d4>)
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff fdbf 	bl	8011d3c <tcp_free_acked_segments>
 80121be:	4602      	mov	r2, r0
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d104      	bne.n	80121d6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121d2:	861a      	strh	r2, [r3, #48]	; 0x30
 80121d4:	e002      	b.n	80121dc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2200      	movs	r2, #0
 80121da:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d103      	bne.n	80121f2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2200      	movs	r2, #0
 80121ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80121f8:	4b84      	ldr	r3, [pc, #528]	; (801240c <tcp_receive+0x5d8>)
 80121fa:	881b      	ldrh	r3, [r3, #0]
 80121fc:	4413      	add	r3, r2
 80121fe:	b29a      	uxth	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8b5b      	ldrh	r3, [r3, #26]
 801220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801220e:	2b00      	cmp	r3, #0
 8012210:	d035      	beq.n	801227e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012216:	2b00      	cmp	r3, #0
 8012218:	d118      	bne.n	801224c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00c      	beq.n	801223c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801222a:	68db      	ldr	r3, [r3, #12]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	4618      	mov	r0, r3
 8012230:	f7fa ffc9 	bl	800d1c6 <lwip_htonl>
 8012234:	4603      	mov	r3, r0
 8012236:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012238:	2b00      	cmp	r3, #0
 801223a:	dc20      	bgt.n	801227e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	8b5b      	ldrh	r3, [r3, #26]
 8012240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012244:	b29a      	uxth	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801224a:	e018      	b.n	801227e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	f7fa ffb4 	bl	800d1c6 <lwip_htonl>
 801225e:	4603      	mov	r3, r0
 8012260:	1ae3      	subs	r3, r4, r3
 8012262:	2b00      	cmp	r3, #0
 8012264:	dc0b      	bgt.n	801227e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	8b5b      	ldrh	r3, [r3, #26]
 801226a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801226e:	b29a      	uxth	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012274:	e003      	b.n	801227e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f002 fbce 	bl	8014a18 <tcp_send_empty_ack>
 801227c:	e000      	b.n	8012280 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801227e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012284:	2b00      	cmp	r3, #0
 8012286:	d05b      	beq.n	8012340 <tcp_receive+0x50c>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801228c:	4b60      	ldr	r3, [pc, #384]	; (8012410 <tcp_receive+0x5dc>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	2b00      	cmp	r3, #0
 8012294:	da54      	bge.n	8012340 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012296:	4b5f      	ldr	r3, [pc, #380]	; (8012414 <tcp_receive+0x5e0>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	b29a      	uxth	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80122aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122b4:	10db      	asrs	r3, r3, #3
 80122b6:	b21b      	sxth	r3, r3
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	1ad3      	subs	r3, r2, r3
 80122bc:	b29b      	uxth	r3, r3
 80122be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80122ce:	4413      	add	r3, r2
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	b21a      	sxth	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80122d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80122dc:	2b00      	cmp	r3, #0
 80122de:	da05      	bge.n	80122ec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80122e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80122e4:	425b      	negs	r3, r3
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80122ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122f6:	109b      	asrs	r3, r3, #2
 80122f8:	b21b      	sxth	r3, r3
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	1ad3      	subs	r3, r2, r3
 80122fe:	b29b      	uxth	r3, r3
 8012300:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801230a:	b29a      	uxth	r2, r3
 801230c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012310:	4413      	add	r3, r2
 8012312:	b29b      	uxth	r3, r3
 8012314:	b21a      	sxth	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012320:	10db      	asrs	r3, r3, #3
 8012322:	b21b      	sxth	r3, r3
 8012324:	b29a      	uxth	r2, r3
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801232c:	b29b      	uxth	r3, r3
 801232e:	4413      	add	r3, r2
 8012330:	b29b      	uxth	r3, r3
 8012332:	b21a      	sxth	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2200      	movs	r2, #0
 801233e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012340:	4b35      	ldr	r3, [pc, #212]	; (8012418 <tcp_receive+0x5e4>)
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	f000 84e2 	beq.w	8012d0e <tcp_receive+0xeda>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	7d1b      	ldrb	r3, [r3, #20]
 801234e:	2b06      	cmp	r3, #6
 8012350:	f200 84dd 	bhi.w	8012d0e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012358:	4b30      	ldr	r3, [pc, #192]	; (801241c <tcp_receive+0x5e8>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	3b01      	subs	r3, #1
 8012360:	2b00      	cmp	r3, #0
 8012362:	f2c0 808f 	blt.w	8012484 <tcp_receive+0x650>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801236a:	4b2b      	ldr	r3, [pc, #172]	; (8012418 <tcp_receive+0x5e4>)
 801236c:	881b      	ldrh	r3, [r3, #0]
 801236e:	4619      	mov	r1, r3
 8012370:	4b2a      	ldr	r3, [pc, #168]	; (801241c <tcp_receive+0x5e8>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	440b      	add	r3, r1
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	3301      	adds	r3, #1
 801237a:	2b00      	cmp	r3, #0
 801237c:	f300 8082 	bgt.w	8012484 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012380:	4b27      	ldr	r3, [pc, #156]	; (8012420 <tcp_receive+0x5ec>)
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801238a:	4b24      	ldr	r3, [pc, #144]	; (801241c <tcp_receive+0x5e8>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012392:	4b23      	ldr	r3, [pc, #140]	; (8012420 <tcp_receive+0x5ec>)
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d106      	bne.n	80123a8 <tcp_receive+0x574>
 801239a:	4b22      	ldr	r3, [pc, #136]	; (8012424 <tcp_receive+0x5f0>)
 801239c:	f240 5294 	movw	r2, #1428	; 0x594
 80123a0:	4921      	ldr	r1, [pc, #132]	; (8012428 <tcp_receive+0x5f4>)
 80123a2:	4822      	ldr	r0, [pc, #136]	; (801242c <tcp_receive+0x5f8>)
 80123a4:	f006 f9f6 	bl	8018794 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d906      	bls.n	80123c0 <tcp_receive+0x58c>
 80123b2:	4b1c      	ldr	r3, [pc, #112]	; (8012424 <tcp_receive+0x5f0>)
 80123b4:	f240 5295 	movw	r2, #1429	; 0x595
 80123b8:	491d      	ldr	r1, [pc, #116]	; (8012430 <tcp_receive+0x5fc>)
 80123ba:	481c      	ldr	r0, [pc, #112]	; (801242c <tcp_receive+0x5f8>)
 80123bc:	f006 f9ea 	bl	8018794 <iprintf>
      off = (u16_t)off32;
 80123c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80123c6:	4b16      	ldr	r3, [pc, #88]	; (8012420 <tcp_receive+0x5ec>)
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	891b      	ldrh	r3, [r3, #8]
 80123cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d906      	bls.n	80123e2 <tcp_receive+0x5ae>
 80123d4:	4b13      	ldr	r3, [pc, #76]	; (8012424 <tcp_receive+0x5f0>)
 80123d6:	f240 5297 	movw	r2, #1431	; 0x597
 80123da:	4916      	ldr	r1, [pc, #88]	; (8012434 <tcp_receive+0x600>)
 80123dc:	4813      	ldr	r0, [pc, #76]	; (801242c <tcp_receive+0x5f8>)
 80123de:	f006 f9d9 	bl	8018794 <iprintf>
      inseg.len -= off;
 80123e2:	4b0f      	ldr	r3, [pc, #60]	; (8012420 <tcp_receive+0x5ec>)
 80123e4:	891a      	ldrh	r2, [r3, #8]
 80123e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	4b0c      	ldr	r3, [pc, #48]	; (8012420 <tcp_receive+0x5ec>)
 80123f0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80123f2:	4b0b      	ldr	r3, [pc, #44]	; (8012420 <tcp_receive+0x5ec>)
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	891a      	ldrh	r2, [r3, #8]
 80123f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123fc:	1ad3      	subs	r3, r2, r3
 80123fe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012400:	e02a      	b.n	8012458 <tcp_receive+0x624>
 8012402:	bf00      	nop
 8012404:	0801ba9c 	.word	0x0801ba9c
 8012408:	0801baa4 	.word	0x0801baa4
 801240c:	2000d908 	.word	0x2000d908
 8012410:	2000d904 	.word	0x2000d904
 8012414:	2000d8c8 	.word	0x2000d8c8
 8012418:	2000d90a 	.word	0x2000d90a
 801241c:	2000d900 	.word	0x2000d900
 8012420:	2000d8e0 	.word	0x2000d8e0
 8012424:	0801b734 	.word	0x0801b734
 8012428:	0801baac 	.word	0x0801baac
 801242c:	0801b780 	.word	0x0801b780
 8012430:	0801babc 	.word	0x0801babc
 8012434:	0801bacc 	.word	0x0801bacc
        off -= p->len;
 8012438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801243a:	895b      	ldrh	r3, [r3, #10]
 801243c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012448:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801244a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801244c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801244e:	2200      	movs	r2, #0
 8012450:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801245a:	895b      	ldrh	r3, [r3, #10]
 801245c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012460:	429a      	cmp	r2, r3
 8012462:	d8e9      	bhi.n	8012438 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012468:	4619      	mov	r1, r3
 801246a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801246c:	f7fc f958 	bl	800e720 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012474:	4a91      	ldr	r2, [pc, #580]	; (80126bc <tcp_receive+0x888>)
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	4b91      	ldr	r3, [pc, #580]	; (80126c0 <tcp_receive+0x88c>)
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	4a8f      	ldr	r2, [pc, #572]	; (80126bc <tcp_receive+0x888>)
 801247e:	6812      	ldr	r2, [r2, #0]
 8012480:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012482:	e00d      	b.n	80124a0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012484:	4b8d      	ldr	r3, [pc, #564]	; (80126bc <tcp_receive+0x888>)
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	2b00      	cmp	r3, #0
 8012490:	da06      	bge.n	80124a0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	8b5b      	ldrh	r3, [r3, #26]
 8012496:	f043 0302 	orr.w	r3, r3, #2
 801249a:	b29a      	uxth	r2, r3
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80124a0:	4b86      	ldr	r3, [pc, #536]	; (80126bc <tcp_receive+0x888>)
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f2c0 842a 	blt.w	8012d04 <tcp_receive+0xed0>
 80124b0:	4b82      	ldr	r3, [pc, #520]	; (80126bc <tcp_receive+0x888>)
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b8:	6879      	ldr	r1, [r7, #4]
 80124ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124bc:	440b      	add	r3, r1
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	3301      	adds	r3, #1
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	f300 841e 	bgt.w	8012d04 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124cc:	4b7b      	ldr	r3, [pc, #492]	; (80126bc <tcp_receive+0x888>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	f040 829a 	bne.w	8012a0a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80124d6:	4b7a      	ldr	r3, [pc, #488]	; (80126c0 <tcp_receive+0x88c>)
 80124d8:	891c      	ldrh	r4, [r3, #8]
 80124da:	4b79      	ldr	r3, [pc, #484]	; (80126c0 <tcp_receive+0x88c>)
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	899b      	ldrh	r3, [r3, #12]
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7fa fe5a 	bl	800d19c <lwip_htons>
 80124e8:	4603      	mov	r3, r0
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	f003 0303 	and.w	r3, r3, #3
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d001      	beq.n	80124f8 <tcp_receive+0x6c4>
 80124f4:	2301      	movs	r3, #1
 80124f6:	e000      	b.n	80124fa <tcp_receive+0x6c6>
 80124f8:	2300      	movs	r3, #0
 80124fa:	4423      	add	r3, r4
 80124fc:	b29a      	uxth	r2, r3
 80124fe:	4b71      	ldr	r3, [pc, #452]	; (80126c4 <tcp_receive+0x890>)
 8012500:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012506:	4b6f      	ldr	r3, [pc, #444]	; (80126c4 <tcp_receive+0x890>)
 8012508:	881b      	ldrh	r3, [r3, #0]
 801250a:	429a      	cmp	r2, r3
 801250c:	d275      	bcs.n	80125fa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801250e:	4b6c      	ldr	r3, [pc, #432]	; (80126c0 <tcp_receive+0x88c>)
 8012510:	68db      	ldr	r3, [r3, #12]
 8012512:	899b      	ldrh	r3, [r3, #12]
 8012514:	b29b      	uxth	r3, r3
 8012516:	4618      	mov	r0, r3
 8012518:	f7fa fe40 	bl	800d19c <lwip_htons>
 801251c:	4603      	mov	r3, r0
 801251e:	b2db      	uxtb	r3, r3
 8012520:	f003 0301 	and.w	r3, r3, #1
 8012524:	2b00      	cmp	r3, #0
 8012526:	d01f      	beq.n	8012568 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012528:	4b65      	ldr	r3, [pc, #404]	; (80126c0 <tcp_receive+0x88c>)
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	899b      	ldrh	r3, [r3, #12]
 801252e:	b29b      	uxth	r3, r3
 8012530:	b21b      	sxth	r3, r3
 8012532:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012536:	b21c      	sxth	r4, r3
 8012538:	4b61      	ldr	r3, [pc, #388]	; (80126c0 <tcp_receive+0x88c>)
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	899b      	ldrh	r3, [r3, #12]
 801253e:	b29b      	uxth	r3, r3
 8012540:	4618      	mov	r0, r3
 8012542:	f7fa fe2b 	bl	800d19c <lwip_htons>
 8012546:	4603      	mov	r3, r0
 8012548:	b2db      	uxtb	r3, r3
 801254a:	b29b      	uxth	r3, r3
 801254c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012550:	b29b      	uxth	r3, r3
 8012552:	4618      	mov	r0, r3
 8012554:	f7fa fe22 	bl	800d19c <lwip_htons>
 8012558:	4603      	mov	r3, r0
 801255a:	b21b      	sxth	r3, r3
 801255c:	4323      	orrs	r3, r4
 801255e:	b21a      	sxth	r2, r3
 8012560:	4b57      	ldr	r3, [pc, #348]	; (80126c0 <tcp_receive+0x88c>)
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	b292      	uxth	r2, r2
 8012566:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801256c:	4b54      	ldr	r3, [pc, #336]	; (80126c0 <tcp_receive+0x88c>)
 801256e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012570:	4b53      	ldr	r3, [pc, #332]	; (80126c0 <tcp_receive+0x88c>)
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	899b      	ldrh	r3, [r3, #12]
 8012576:	b29b      	uxth	r3, r3
 8012578:	4618      	mov	r0, r3
 801257a:	f7fa fe0f 	bl	800d19c <lwip_htons>
 801257e:	4603      	mov	r3, r0
 8012580:	b2db      	uxtb	r3, r3
 8012582:	f003 0302 	and.w	r3, r3, #2
 8012586:	2b00      	cmp	r3, #0
 8012588:	d005      	beq.n	8012596 <tcp_receive+0x762>
            inseg.len -= 1;
 801258a:	4b4d      	ldr	r3, [pc, #308]	; (80126c0 <tcp_receive+0x88c>)
 801258c:	891b      	ldrh	r3, [r3, #8]
 801258e:	3b01      	subs	r3, #1
 8012590:	b29a      	uxth	r2, r3
 8012592:	4b4b      	ldr	r3, [pc, #300]	; (80126c0 <tcp_receive+0x88c>)
 8012594:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012596:	4b4a      	ldr	r3, [pc, #296]	; (80126c0 <tcp_receive+0x88c>)
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	4a49      	ldr	r2, [pc, #292]	; (80126c0 <tcp_receive+0x88c>)
 801259c:	8912      	ldrh	r2, [r2, #8]
 801259e:	4611      	mov	r1, r2
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fb ffbd 	bl	800e520 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80125a6:	4b46      	ldr	r3, [pc, #280]	; (80126c0 <tcp_receive+0x88c>)
 80125a8:	891c      	ldrh	r4, [r3, #8]
 80125aa:	4b45      	ldr	r3, [pc, #276]	; (80126c0 <tcp_receive+0x88c>)
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	899b      	ldrh	r3, [r3, #12]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fa fdf2 	bl	800d19c <lwip_htons>
 80125b8:	4603      	mov	r3, r0
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	f003 0303 	and.w	r3, r3, #3
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <tcp_receive+0x794>
 80125c4:	2301      	movs	r3, #1
 80125c6:	e000      	b.n	80125ca <tcp_receive+0x796>
 80125c8:	2300      	movs	r3, #0
 80125ca:	4423      	add	r3, r4
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	4b3d      	ldr	r3, [pc, #244]	; (80126c4 <tcp_receive+0x890>)
 80125d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80125d2:	4b3c      	ldr	r3, [pc, #240]	; (80126c4 <tcp_receive+0x890>)
 80125d4:	881b      	ldrh	r3, [r3, #0]
 80125d6:	461a      	mov	r2, r3
 80125d8:	4b38      	ldr	r3, [pc, #224]	; (80126bc <tcp_receive+0x888>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	441a      	add	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e2:	6879      	ldr	r1, [r7, #4]
 80125e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125e6:	440b      	add	r3, r1
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d006      	beq.n	80125fa <tcp_receive+0x7c6>
 80125ec:	4b36      	ldr	r3, [pc, #216]	; (80126c8 <tcp_receive+0x894>)
 80125ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80125f2:	4936      	ldr	r1, [pc, #216]	; (80126cc <tcp_receive+0x898>)
 80125f4:	4836      	ldr	r0, [pc, #216]	; (80126d0 <tcp_receive+0x89c>)
 80125f6:	f006 f8cd 	bl	8018794 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f000 80e7 	beq.w	80127d2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012604:	4b2e      	ldr	r3, [pc, #184]	; (80126c0 <tcp_receive+0x88c>)
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	899b      	ldrh	r3, [r3, #12]
 801260a:	b29b      	uxth	r3, r3
 801260c:	4618      	mov	r0, r3
 801260e:	f7fa fdc5 	bl	800d19c <lwip_htons>
 8012612:	4603      	mov	r3, r0
 8012614:	b2db      	uxtb	r3, r3
 8012616:	f003 0301 	and.w	r3, r3, #1
 801261a:	2b00      	cmp	r3, #0
 801261c:	d010      	beq.n	8012640 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801261e:	e00a      	b.n	8012636 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012624:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f7fd fcc4 	bl	800ffbe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1f0      	bne.n	8012620 <tcp_receive+0x7ec>
 801263e:	e0c8      	b.n	80127d2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012644:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012646:	e052      	b.n	80126ee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	899b      	ldrh	r3, [r3, #12]
 801264e:	b29b      	uxth	r3, r3
 8012650:	4618      	mov	r0, r3
 8012652:	f7fa fda3 	bl	800d19c <lwip_htons>
 8012656:	4603      	mov	r3, r0
 8012658:	b2db      	uxtb	r3, r3
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	2b00      	cmp	r3, #0
 8012660:	d03d      	beq.n	80126de <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012662:	4b17      	ldr	r3, [pc, #92]	; (80126c0 <tcp_receive+0x88c>)
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	899b      	ldrh	r3, [r3, #12]
 8012668:	b29b      	uxth	r3, r3
 801266a:	4618      	mov	r0, r3
 801266c:	f7fa fd96 	bl	800d19c <lwip_htons>
 8012670:	4603      	mov	r3, r0
 8012672:	b2db      	uxtb	r3, r3
 8012674:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012678:	2b00      	cmp	r3, #0
 801267a:	d130      	bne.n	80126de <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801267c:	4b10      	ldr	r3, [pc, #64]	; (80126c0 <tcp_receive+0x88c>)
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	899b      	ldrh	r3, [r3, #12]
 8012682:	b29c      	uxth	r4, r3
 8012684:	2001      	movs	r0, #1
 8012686:	f7fa fd89 	bl	800d19c <lwip_htons>
 801268a:	4603      	mov	r3, r0
 801268c:	461a      	mov	r2, r3
 801268e:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <tcp_receive+0x88c>)
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	4322      	orrs	r2, r4
 8012694:	b292      	uxth	r2, r2
 8012696:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012698:	4b09      	ldr	r3, [pc, #36]	; (80126c0 <tcp_receive+0x88c>)
 801269a:	891c      	ldrh	r4, [r3, #8]
 801269c:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <tcp_receive+0x88c>)
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	899b      	ldrh	r3, [r3, #12]
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fa fd79 	bl	800d19c <lwip_htons>
 80126aa:	4603      	mov	r3, r0
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	f003 0303 	and.w	r3, r3, #3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d00e      	beq.n	80126d4 <tcp_receive+0x8a0>
 80126b6:	2301      	movs	r3, #1
 80126b8:	e00d      	b.n	80126d6 <tcp_receive+0x8a2>
 80126ba:	bf00      	nop
 80126bc:	2000d900 	.word	0x2000d900
 80126c0:	2000d8e0 	.word	0x2000d8e0
 80126c4:	2000d90a 	.word	0x2000d90a
 80126c8:	0801b734 	.word	0x0801b734
 80126cc:	0801badc 	.word	0x0801badc
 80126d0:	0801b780 	.word	0x0801b780
 80126d4:	2300      	movs	r3, #0
 80126d6:	4423      	add	r3, r4
 80126d8:	b29a      	uxth	r2, r3
 80126da:	4b98      	ldr	r3, [pc, #608]	; (801293c <tcp_receive+0xb08>)
 80126dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80126de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80126e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80126e8:	6938      	ldr	r0, [r7, #16]
 80126ea:	f7fd fc68 	bl	800ffbe <tcp_seg_free>
            while (next &&
 80126ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00e      	beq.n	8012712 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80126f4:	4b91      	ldr	r3, [pc, #580]	; (801293c <tcp_receive+0xb08>)
 80126f6:	881b      	ldrh	r3, [r3, #0]
 80126f8:	461a      	mov	r2, r3
 80126fa:	4b91      	ldr	r3, [pc, #580]	; (8012940 <tcp_receive+0xb0c>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	441a      	add	r2, r3
 8012700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012708:	8909      	ldrh	r1, [r1, #8]
 801270a:	440b      	add	r3, r1
 801270c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801270e:	2b00      	cmp	r3, #0
 8012710:	da9a      	bge.n	8012648 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012714:	2b00      	cmp	r3, #0
 8012716:	d059      	beq.n	80127cc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012718:	4b88      	ldr	r3, [pc, #544]	; (801293c <tcp_receive+0xb08>)
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	461a      	mov	r2, r3
 801271e:	4b88      	ldr	r3, [pc, #544]	; (8012940 <tcp_receive+0xb0c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	441a      	add	r2, r3
 8012724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801272c:	2b00      	cmp	r3, #0
 801272e:	dd4d      	ble.n	80127cc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	b29a      	uxth	r2, r3
 8012738:	4b81      	ldr	r3, [pc, #516]	; (8012940 <tcp_receive+0xb0c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	b29b      	uxth	r3, r3
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	b29a      	uxth	r2, r3
 8012742:	4b80      	ldr	r3, [pc, #512]	; (8012944 <tcp_receive+0xb10>)
 8012744:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012746:	4b7f      	ldr	r3, [pc, #508]	; (8012944 <tcp_receive+0xb10>)
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	899b      	ldrh	r3, [r3, #12]
 801274c:	b29b      	uxth	r3, r3
 801274e:	4618      	mov	r0, r3
 8012750:	f7fa fd24 	bl	800d19c <lwip_htons>
 8012754:	4603      	mov	r3, r0
 8012756:	b2db      	uxtb	r3, r3
 8012758:	f003 0302 	and.w	r3, r3, #2
 801275c:	2b00      	cmp	r3, #0
 801275e:	d005      	beq.n	801276c <tcp_receive+0x938>
                inseg.len -= 1;
 8012760:	4b78      	ldr	r3, [pc, #480]	; (8012944 <tcp_receive+0xb10>)
 8012762:	891b      	ldrh	r3, [r3, #8]
 8012764:	3b01      	subs	r3, #1
 8012766:	b29a      	uxth	r2, r3
 8012768:	4b76      	ldr	r3, [pc, #472]	; (8012944 <tcp_receive+0xb10>)
 801276a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801276c:	4b75      	ldr	r3, [pc, #468]	; (8012944 <tcp_receive+0xb10>)
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4a74      	ldr	r2, [pc, #464]	; (8012944 <tcp_receive+0xb10>)
 8012772:	8912      	ldrh	r2, [r2, #8]
 8012774:	4611      	mov	r1, r2
 8012776:	4618      	mov	r0, r3
 8012778:	f7fb fed2 	bl	800e520 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801277c:	4b71      	ldr	r3, [pc, #452]	; (8012944 <tcp_receive+0xb10>)
 801277e:	891c      	ldrh	r4, [r3, #8]
 8012780:	4b70      	ldr	r3, [pc, #448]	; (8012944 <tcp_receive+0xb10>)
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7fa fd07 	bl	800d19c <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	b2db      	uxtb	r3, r3
 8012792:	f003 0303 	and.w	r3, r3, #3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <tcp_receive+0x96a>
 801279a:	2301      	movs	r3, #1
 801279c:	e000      	b.n	80127a0 <tcp_receive+0x96c>
 801279e:	2300      	movs	r3, #0
 80127a0:	4423      	add	r3, r4
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	4b65      	ldr	r3, [pc, #404]	; (801293c <tcp_receive+0xb08>)
 80127a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80127a8:	4b64      	ldr	r3, [pc, #400]	; (801293c <tcp_receive+0xb08>)
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	461a      	mov	r2, r3
 80127ae:	4b64      	ldr	r3, [pc, #400]	; (8012940 <tcp_receive+0xb0c>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	441a      	add	r2, r3
 80127b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d006      	beq.n	80127cc <tcp_receive+0x998>
 80127be:	4b62      	ldr	r3, [pc, #392]	; (8012948 <tcp_receive+0xb14>)
 80127c0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80127c4:	4961      	ldr	r1, [pc, #388]	; (801294c <tcp_receive+0xb18>)
 80127c6:	4862      	ldr	r0, [pc, #392]	; (8012950 <tcp_receive+0xb1c>)
 80127c8:	f005 ffe4 	bl	8018794 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127d0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80127d2:	4b5a      	ldr	r3, [pc, #360]	; (801293c <tcp_receive+0xb08>)
 80127d4:	881b      	ldrh	r3, [r3, #0]
 80127d6:	461a      	mov	r2, r3
 80127d8:	4b59      	ldr	r3, [pc, #356]	; (8012940 <tcp_receive+0xb0c>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	441a      	add	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127e6:	4b55      	ldr	r3, [pc, #340]	; (801293c <tcp_receive+0xb08>)
 80127e8:	881b      	ldrh	r3, [r3, #0]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d206      	bcs.n	80127fc <tcp_receive+0x9c8>
 80127ee:	4b56      	ldr	r3, [pc, #344]	; (8012948 <tcp_receive+0xb14>)
 80127f0:	f240 6207 	movw	r2, #1543	; 0x607
 80127f4:	4957      	ldr	r1, [pc, #348]	; (8012954 <tcp_receive+0xb20>)
 80127f6:	4856      	ldr	r0, [pc, #344]	; (8012950 <tcp_receive+0xb1c>)
 80127f8:	f005 ffcc 	bl	8018794 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012800:	4b4e      	ldr	r3, [pc, #312]	; (801293c <tcp_receive+0xb08>)
 8012802:	881b      	ldrh	r3, [r3, #0]
 8012804:	1ad3      	subs	r3, r2, r3
 8012806:	b29a      	uxth	r2, r3
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7fc feb1 	bl	800f574 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012812:	4b4c      	ldr	r3, [pc, #304]	; (8012944 <tcp_receive+0xb10>)
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	891b      	ldrh	r3, [r3, #8]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d006      	beq.n	801282a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801281c:	4b49      	ldr	r3, [pc, #292]	; (8012944 <tcp_receive+0xb10>)
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	4a4d      	ldr	r2, [pc, #308]	; (8012958 <tcp_receive+0xb24>)
 8012822:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012824:	4b47      	ldr	r3, [pc, #284]	; (8012944 <tcp_receive+0xb10>)
 8012826:	2200      	movs	r2, #0
 8012828:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801282a:	4b46      	ldr	r3, [pc, #280]	; (8012944 <tcp_receive+0xb10>)
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	899b      	ldrh	r3, [r3, #12]
 8012830:	b29b      	uxth	r3, r3
 8012832:	4618      	mov	r0, r3
 8012834:	f7fa fcb2 	bl	800d19c <lwip_htons>
 8012838:	4603      	mov	r3, r0
 801283a:	b2db      	uxtb	r3, r3
 801283c:	f003 0301 	and.w	r3, r3, #1
 8012840:	2b00      	cmp	r3, #0
 8012842:	f000 80b8 	beq.w	80129b6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012846:	4b45      	ldr	r3, [pc, #276]	; (801295c <tcp_receive+0xb28>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	f043 0320 	orr.w	r3, r3, #32
 801284e:	b2da      	uxtb	r2, r3
 8012850:	4b42      	ldr	r3, [pc, #264]	; (801295c <tcp_receive+0xb28>)
 8012852:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012854:	e0af      	b.n	80129b6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	4a36      	ldr	r2, [pc, #216]	; (8012940 <tcp_receive+0xb0c>)
 8012866:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	891b      	ldrh	r3, [r3, #8]
 801286c:	461c      	mov	r4, r3
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	68db      	ldr	r3, [r3, #12]
 8012872:	899b      	ldrh	r3, [r3, #12]
 8012874:	b29b      	uxth	r3, r3
 8012876:	4618      	mov	r0, r3
 8012878:	f7fa fc90 	bl	800d19c <lwip_htons>
 801287c:	4603      	mov	r3, r0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	f003 0303 	and.w	r3, r3, #3
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <tcp_receive+0xa58>
 8012888:	2301      	movs	r3, #1
 801288a:	e000      	b.n	801288e <tcp_receive+0xa5a>
 801288c:	2300      	movs	r3, #0
 801288e:	191a      	adds	r2, r3, r4
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012894:	441a      	add	r2, r3
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801289e:	461c      	mov	r4, r3
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	891b      	ldrh	r3, [r3, #8]
 80128a4:	461d      	mov	r5, r3
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	899b      	ldrh	r3, [r3, #12]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fa fc74 	bl	800d19c <lwip_htons>
 80128b4:	4603      	mov	r3, r0
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	f003 0303 	and.w	r3, r3, #3
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d001      	beq.n	80128c4 <tcp_receive+0xa90>
 80128c0:	2301      	movs	r3, #1
 80128c2:	e000      	b.n	80128c6 <tcp_receive+0xa92>
 80128c4:	2300      	movs	r3, #0
 80128c6:	442b      	add	r3, r5
 80128c8:	429c      	cmp	r4, r3
 80128ca:	d206      	bcs.n	80128da <tcp_receive+0xaa6>
 80128cc:	4b1e      	ldr	r3, [pc, #120]	; (8012948 <tcp_receive+0xb14>)
 80128ce:	f240 622b 	movw	r2, #1579	; 0x62b
 80128d2:	4923      	ldr	r1, [pc, #140]	; (8012960 <tcp_receive+0xb2c>)
 80128d4:	481e      	ldr	r0, [pc, #120]	; (8012950 <tcp_receive+0xb1c>)
 80128d6:	f005 ff5d 	bl	8018794 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	891b      	ldrh	r3, [r3, #8]
 80128de:	461c      	mov	r4, r3
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	899b      	ldrh	r3, [r3, #12]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fa fc57 	bl	800d19c <lwip_htons>
 80128ee:	4603      	mov	r3, r0
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	f003 0303 	and.w	r3, r3, #3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d001      	beq.n	80128fe <tcp_receive+0xaca>
 80128fa:	2301      	movs	r3, #1
 80128fc:	e000      	b.n	8012900 <tcp_receive+0xacc>
 80128fe:	2300      	movs	r3, #0
 8012900:	1919      	adds	r1, r3, r4
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012906:	b28b      	uxth	r3, r1
 8012908:	1ad3      	subs	r3, r2, r3
 801290a:	b29a      	uxth	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7fc fe2f 	bl	800f574 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	891b      	ldrh	r3, [r3, #8]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d028      	beq.n	8012972 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012920:	4b0d      	ldr	r3, [pc, #52]	; (8012958 <tcp_receive+0xb24>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d01d      	beq.n	8012964 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012928:	4b0b      	ldr	r3, [pc, #44]	; (8012958 <tcp_receive+0xb24>)
 801292a:	681a      	ldr	r2, [r3, #0]
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	4619      	mov	r1, r3
 8012932:	4610      	mov	r0, r2
 8012934:	f7fc f848 	bl	800e9c8 <pbuf_cat>
 8012938:	e018      	b.n	801296c <tcp_receive+0xb38>
 801293a:	bf00      	nop
 801293c:	2000d90a 	.word	0x2000d90a
 8012940:	2000d900 	.word	0x2000d900
 8012944:	2000d8e0 	.word	0x2000d8e0
 8012948:	0801b734 	.word	0x0801b734
 801294c:	0801bb14 	.word	0x0801bb14
 8012950:	0801b780 	.word	0x0801b780
 8012954:	0801bb50 	.word	0x0801bb50
 8012958:	2000d910 	.word	0x2000d910
 801295c:	2000d90d 	.word	0x2000d90d
 8012960:	0801bb70 	.word	0x0801bb70
            } else {
              recv_data = cseg->p;
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	4a70      	ldr	r2, [pc, #448]	; (8012b2c <tcp_receive+0xcf8>)
 801296a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	2200      	movs	r2, #0
 8012970:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	68db      	ldr	r3, [r3, #12]
 8012976:	899b      	ldrh	r3, [r3, #12]
 8012978:	b29b      	uxth	r3, r3
 801297a:	4618      	mov	r0, r3
 801297c:	f7fa fc0e 	bl	800d19c <lwip_htons>
 8012980:	4603      	mov	r3, r0
 8012982:	b2db      	uxtb	r3, r3
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00d      	beq.n	80129a8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801298c:	4b68      	ldr	r3, [pc, #416]	; (8012b30 <tcp_receive+0xcfc>)
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	f043 0320 	orr.w	r3, r3, #32
 8012994:	b2da      	uxtb	r2, r3
 8012996:	4b66      	ldr	r3, [pc, #408]	; (8012b30 <tcp_receive+0xcfc>)
 8012998:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	7d1b      	ldrb	r3, [r3, #20]
 801299e:	2b04      	cmp	r3, #4
 80129a0:	d102      	bne.n	80129a8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2207      	movs	r2, #7
 80129a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80129b0:	68b8      	ldr	r0, [r7, #8]
 80129b2:	f7fd fb04 	bl	800ffbe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d008      	beq.n	80129d0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	685a      	ldr	r2, [r3, #4]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80129ca:	429a      	cmp	r2, r3
 80129cc:	f43f af43 	beq.w	8012856 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	8b5b      	ldrh	r3, [r3, #26]
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d00e      	beq.n	80129fa <tcp_receive+0xbc6>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	8b5b      	ldrh	r3, [r3, #26]
 80129e0:	f023 0301 	bic.w	r3, r3, #1
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	835a      	strh	r2, [r3, #26]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	8b5b      	ldrh	r3, [r3, #26]
 80129ee:	f043 0302 	orr.w	r3, r3, #2
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80129f8:	e188      	b.n	8012d0c <tcp_receive+0xed8>
        tcp_ack(pcb);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	8b5b      	ldrh	r3, [r3, #26]
 80129fe:	f043 0301 	orr.w	r3, r3, #1
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012a08:	e180      	b.n	8012d0c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d106      	bne.n	8012a20 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012a12:	4848      	ldr	r0, [pc, #288]	; (8012b34 <tcp_receive+0xd00>)
 8012a14:	f7fd faec 	bl	800fff0 <tcp_seg_copy>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	675a      	str	r2, [r3, #116]	; 0x74
 8012a1e:	e16d      	b.n	8012cfc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012a20:	2300      	movs	r3, #0
 8012a22:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a2a:	e157      	b.n	8012cdc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	4b41      	ldr	r3, [pc, #260]	; (8012b38 <tcp_receive+0xd04>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d11d      	bne.n	8012a76 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012a3a:	4b3e      	ldr	r3, [pc, #248]	; (8012b34 <tcp_receive+0xd00>)
 8012a3c:	891a      	ldrh	r2, [r3, #8]
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a40:	891b      	ldrh	r3, [r3, #8]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	f240 814f 	bls.w	8012ce6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a48:	483a      	ldr	r0, [pc, #232]	; (8012b34 <tcp_receive+0xd00>)
 8012a4a:	f7fd fad1 	bl	800fff0 <tcp_seg_copy>
 8012a4e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f000 8149 	beq.w	8012cea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d003      	beq.n	8012a66 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a60:	697a      	ldr	r2, [r7, #20]
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	e002      	b.n	8012a6c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	697a      	ldr	r2, [r7, #20]
 8012a6a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012a6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a6e:	6978      	ldr	r0, [r7, #20]
 8012a70:	f7ff f8dc 	bl	8011c2c <tcp_oos_insert_segment>
                }
                break;
 8012a74:	e139      	b.n	8012cea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d117      	bne.n	8012aac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012a7c:	4b2e      	ldr	r3, [pc, #184]	; (8012b38 <tcp_receive+0xd04>)
 8012a7e:	681a      	ldr	r2, [r3, #0]
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	da57      	bge.n	8012b3c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a8c:	4829      	ldr	r0, [pc, #164]	; (8012b34 <tcp_receive+0xd00>)
 8012a8e:	f7fd faaf 	bl	800fff0 <tcp_seg_copy>
 8012a92:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 8129 	beq.w	8012cee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	69ba      	ldr	r2, [r7, #24]
 8012aa0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012aa4:	69b8      	ldr	r0, [r7, #24]
 8012aa6:	f7ff f8c1 	bl	8011c2c <tcp_oos_insert_segment>
                  }
                  break;
 8012aaa:	e120      	b.n	8012cee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012aac:	4b22      	ldr	r3, [pc, #136]	; (8012b38 <tcp_receive+0xd04>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	3b01      	subs	r3, #1
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	db3e      	blt.n	8012b3c <tcp_receive+0xd08>
 8012abe:	4b1e      	ldr	r3, [pc, #120]	; (8012b38 <tcp_receive+0xd04>)
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	1ad3      	subs	r3, r2, r3
 8012aca:	3301      	adds	r3, #1
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	dc35      	bgt.n	8012b3c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ad0:	4818      	ldr	r0, [pc, #96]	; (8012b34 <tcp_receive+0xd00>)
 8012ad2:	f7fd fa8d 	bl	800fff0 <tcp_seg_copy>
 8012ad6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f000 8109 	beq.w	8012cf2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ae8:	8912      	ldrh	r2, [r2, #8]
 8012aea:	441a      	add	r2, r3
 8012aec:	4b12      	ldr	r3, [pc, #72]	; (8012b38 <tcp_receive+0xd04>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	dd12      	ble.n	8012b1c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012af6:	4b10      	ldr	r3, [pc, #64]	; (8012b38 <tcp_receive+0xd04>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afe:	68db      	ldr	r3, [r3, #12]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	b29b      	uxth	r3, r3
 8012b04:	1ad3      	subs	r3, r2, r3
 8012b06:	b29a      	uxth	r2, r3
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0e:	685a      	ldr	r2, [r3, #4]
 8012b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b12:	891b      	ldrh	r3, [r3, #8]
 8012b14:	4619      	mov	r1, r3
 8012b16:	4610      	mov	r0, r2
 8012b18:	f7fb fd02 	bl	800e520 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1e:	69fa      	ldr	r2, [r7, #28]
 8012b20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b24:	69f8      	ldr	r0, [r7, #28]
 8012b26:	f7ff f881 	bl	8011c2c <tcp_oos_insert_segment>
                  }
                  break;
 8012b2a:	e0e2      	b.n	8012cf2 <tcp_receive+0xebe>
 8012b2c:	2000d910 	.word	0x2000d910
 8012b30:	2000d90d 	.word	0x2000d90d
 8012b34:	2000d8e0 	.word	0x2000d8e0
 8012b38:	2000d900 	.word	0x2000d900
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	f040 80c6 	bne.w	8012cd6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012b4a:	4b80      	ldr	r3, [pc, #512]	; (8012d4c <tcp_receive+0xf18>)
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b50:	68db      	ldr	r3, [r3, #12]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f340 80bd 	ble.w	8012cd6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	899b      	ldrh	r3, [r3, #12]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7fa fb19 	bl	800d19c <lwip_htons>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	b2db      	uxtb	r3, r3
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f040 80bf 	bne.w	8012cf6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012b78:	4875      	ldr	r0, [pc, #468]	; (8012d50 <tcp_receive+0xf1c>)
 8012b7a:	f7fd fa39 	bl	800fff0 <tcp_seg_copy>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 80b6 	beq.w	8012cfa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b96:	8912      	ldrh	r2, [r2, #8]
 8012b98:	441a      	add	r2, r3
 8012b9a:	4b6c      	ldr	r3, [pc, #432]	; (8012d4c <tcp_receive+0xf18>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	1ad3      	subs	r3, r2, r3
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	dd12      	ble.n	8012bca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012ba4:	4b69      	ldr	r3, [pc, #420]	; (8012d4c <tcp_receive+0xf18>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc0:	891b      	ldrh	r3, [r3, #8]
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	f7fb fcab 	bl	800e520 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012bca:	4b62      	ldr	r3, [pc, #392]	; (8012d54 <tcp_receive+0xf20>)
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	4b5e      	ldr	r3, [pc, #376]	; (8012d4c <tcp_receive+0xf18>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	441a      	add	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bda:	6879      	ldr	r1, [r7, #4]
 8012bdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bde:	440b      	add	r3, r1
 8012be0:	1ad3      	subs	r3, r2, r3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f340 8089 	ble.w	8012cfa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	899b      	ldrh	r3, [r3, #12]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fa fad2 	bl	800d19c <lwip_htons>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d022      	beq.n	8012c4a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	68db      	ldr	r3, [r3, #12]
 8012c0a:	899b      	ldrh	r3, [r3, #12]
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	b21b      	sxth	r3, r3
 8012c10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c14:	b21c      	sxth	r4, r3
 8012c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	899b      	ldrh	r3, [r3, #12]
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fa fabb 	bl	800d19c <lwip_htons>
 8012c26:	4603      	mov	r3, r0
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7fa fab2 	bl	800d19c <lwip_htons>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	b21b      	sxth	r3, r3
 8012c3c:	4323      	orrs	r3, r4
 8012c3e:	b21a      	sxth	r2, r3
 8012c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	b292      	uxth	r2, r2
 8012c48:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c54:	4413      	add	r3, r2
 8012c56:	b299      	uxth	r1, r3
 8012c58:	4b3c      	ldr	r3, [pc, #240]	; (8012d4c <tcp_receive+0xf18>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	1a8a      	subs	r2, r1, r2
 8012c64:	b292      	uxth	r2, r2
 8012c66:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	891b      	ldrh	r3, [r3, #8]
 8012c74:	4619      	mov	r1, r3
 8012c76:	4610      	mov	r0, r2
 8012c78:	f7fb fc52 	bl	800e520 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	891c      	ldrh	r4, [r3, #8]
 8012c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	899b      	ldrh	r3, [r3, #12]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7fa fa85 	bl	800d19c <lwip_htons>
 8012c92:	4603      	mov	r3, r0
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	f003 0303 	and.w	r3, r3, #3
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <tcp_receive+0xe6e>
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e000      	b.n	8012ca4 <tcp_receive+0xe70>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	4423      	add	r3, r4
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	4b2a      	ldr	r3, [pc, #168]	; (8012d54 <tcp_receive+0xf20>)
 8012caa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012cac:	4b29      	ldr	r3, [pc, #164]	; (8012d54 <tcp_receive+0xf20>)
 8012cae:	881b      	ldrh	r3, [r3, #0]
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	4b26      	ldr	r3, [pc, #152]	; (8012d4c <tcp_receive+0xf18>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	441a      	add	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cbc:	6879      	ldr	r1, [r7, #4]
 8012cbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cc0:	440b      	add	r3, r1
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d019      	beq.n	8012cfa <tcp_receive+0xec6>
 8012cc6:	4b24      	ldr	r3, [pc, #144]	; (8012d58 <tcp_receive+0xf24>)
 8012cc8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012ccc:	4923      	ldr	r1, [pc, #140]	; (8012d5c <tcp_receive+0xf28>)
 8012cce:	4824      	ldr	r0, [pc, #144]	; (8012d60 <tcp_receive+0xf2c>)
 8012cd0:	f005 fd60 	bl	8018794 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012cd4:	e011      	b.n	8012cfa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	f47f aea4 	bne.w	8012a2c <tcp_receive+0xbf8>
 8012ce4:	e00a      	b.n	8012cfc <tcp_receive+0xec8>
                break;
 8012ce6:	bf00      	nop
 8012ce8:	e008      	b.n	8012cfc <tcp_receive+0xec8>
                break;
 8012cea:	bf00      	nop
 8012cec:	e006      	b.n	8012cfc <tcp_receive+0xec8>
                  break;
 8012cee:	bf00      	nop
 8012cf0:	e004      	b.n	8012cfc <tcp_receive+0xec8>
                  break;
 8012cf2:	bf00      	nop
 8012cf4:	e002      	b.n	8012cfc <tcp_receive+0xec8>
                  break;
 8012cf6:	bf00      	nop
 8012cf8:	e000      	b.n	8012cfc <tcp_receive+0xec8>
                break;
 8012cfa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f001 fe8b 	bl	8014a18 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012d02:	e003      	b.n	8012d0c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f001 fe87 	bl	8014a18 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d0a:	e01a      	b.n	8012d42 <tcp_receive+0xf0e>
 8012d0c:	e019      	b.n	8012d42 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012d0e:	4b0f      	ldr	r3, [pc, #60]	; (8012d4c <tcp_receive+0xf18>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	db0a      	blt.n	8012d32 <tcp_receive+0xefe>
 8012d1c:	4b0b      	ldr	r3, [pc, #44]	; (8012d4c <tcp_receive+0xf18>)
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d24:	6879      	ldr	r1, [r7, #4]
 8012d26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d28:	440b      	add	r3, r1
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	dd07      	ble.n	8012d42 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	8b5b      	ldrh	r3, [r3, #26]
 8012d36:	f043 0302 	orr.w	r3, r3, #2
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012d40:	e7ff      	b.n	8012d42 <tcp_receive+0xf0e>
 8012d42:	bf00      	nop
 8012d44:	3750      	adds	r7, #80	; 0x50
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bdb0      	pop	{r4, r5, r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	2000d900 	.word	0x2000d900
 8012d50:	2000d8e0 	.word	0x2000d8e0
 8012d54:	2000d90a 	.word	0x2000d90a
 8012d58:	0801b734 	.word	0x0801b734
 8012d5c:	0801badc 	.word	0x0801badc
 8012d60:	0801b780 	.word	0x0801b780

08012d64 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012d6a:	4b15      	ldr	r3, [pc, #84]	; (8012dc0 <tcp_get_next_optbyte+0x5c>)
 8012d6c:	881b      	ldrh	r3, [r3, #0]
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	b291      	uxth	r1, r2
 8012d72:	4a13      	ldr	r2, [pc, #76]	; (8012dc0 <tcp_get_next_optbyte+0x5c>)
 8012d74:	8011      	strh	r1, [r2, #0]
 8012d76:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d78:	4b12      	ldr	r3, [pc, #72]	; (8012dc4 <tcp_get_next_optbyte+0x60>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d004      	beq.n	8012d8a <tcp_get_next_optbyte+0x26>
 8012d80:	4b11      	ldr	r3, [pc, #68]	; (8012dc8 <tcp_get_next_optbyte+0x64>)
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	88fa      	ldrh	r2, [r7, #6]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d208      	bcs.n	8012d9c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d8a:	4b10      	ldr	r3, [pc, #64]	; (8012dcc <tcp_get_next_optbyte+0x68>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	3314      	adds	r3, #20
 8012d90:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012d92:	88fb      	ldrh	r3, [r7, #6]
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	4413      	add	r3, r2
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	e00b      	b.n	8012db4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d9c:	88fb      	ldrh	r3, [r7, #6]
 8012d9e:	b2da      	uxtb	r2, r3
 8012da0:	4b09      	ldr	r3, [pc, #36]	; (8012dc8 <tcp_get_next_optbyte+0x64>)
 8012da2:	881b      	ldrh	r3, [r3, #0]
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	1ad3      	subs	r3, r2, r3
 8012da8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012daa:	4b06      	ldr	r3, [pc, #24]	; (8012dc4 <tcp_get_next_optbyte+0x60>)
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	797b      	ldrb	r3, [r7, #5]
 8012db0:	4413      	add	r3, r2
 8012db2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	2000d8fc 	.word	0x2000d8fc
 8012dc4:	2000d8f8 	.word	0x2000d8f8
 8012dc8:	2000d8f6 	.word	0x2000d8f6
 8012dcc:	2000d8f0 	.word	0x2000d8f0

08012dd0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d106      	bne.n	8012dec <tcp_parseopt+0x1c>
 8012dde:	4b32      	ldr	r3, [pc, #200]	; (8012ea8 <tcp_parseopt+0xd8>)
 8012de0:	f240 727d 	movw	r2, #1917	; 0x77d
 8012de4:	4931      	ldr	r1, [pc, #196]	; (8012eac <tcp_parseopt+0xdc>)
 8012de6:	4832      	ldr	r0, [pc, #200]	; (8012eb0 <tcp_parseopt+0xe0>)
 8012de8:	f005 fcd4 	bl	8018794 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012dec:	4b31      	ldr	r3, [pc, #196]	; (8012eb4 <tcp_parseopt+0xe4>)
 8012dee:	881b      	ldrh	r3, [r3, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d055      	beq.n	8012ea0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012df4:	4b30      	ldr	r3, [pc, #192]	; (8012eb8 <tcp_parseopt+0xe8>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	801a      	strh	r2, [r3, #0]
 8012dfa:	e045      	b.n	8012e88 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012dfc:	f7ff ffb2 	bl	8012d64 <tcp_get_next_optbyte>
 8012e00:	4603      	mov	r3, r0
 8012e02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012e04:	7bfb      	ldrb	r3, [r7, #15]
 8012e06:	2b02      	cmp	r3, #2
 8012e08:	d006      	beq.n	8012e18 <tcp_parseopt+0x48>
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	dc2b      	bgt.n	8012e66 <tcp_parseopt+0x96>
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d041      	beq.n	8012e96 <tcp_parseopt+0xc6>
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d127      	bne.n	8012e66 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012e16:	e037      	b.n	8012e88 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012e18:	f7ff ffa4 	bl	8012d64 <tcp_get_next_optbyte>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	2b04      	cmp	r3, #4
 8012e20:	d13b      	bne.n	8012e9a <tcp_parseopt+0xca>
 8012e22:	4b25      	ldr	r3, [pc, #148]	; (8012eb8 <tcp_parseopt+0xe8>)
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	3301      	adds	r3, #1
 8012e28:	4a22      	ldr	r2, [pc, #136]	; (8012eb4 <tcp_parseopt+0xe4>)
 8012e2a:	8812      	ldrh	r2, [r2, #0]
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	da34      	bge.n	8012e9a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012e30:	f7ff ff98 	bl	8012d64 <tcp_get_next_optbyte>
 8012e34:	4603      	mov	r3, r0
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	021b      	lsls	r3, r3, #8
 8012e3a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012e3c:	f7ff ff92 	bl	8012d64 <tcp_get_next_optbyte>
 8012e40:	4603      	mov	r3, r0
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	89bb      	ldrh	r3, [r7, #12]
 8012e46:	4313      	orrs	r3, r2
 8012e48:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012e4a:	89bb      	ldrh	r3, [r7, #12]
 8012e4c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012e50:	d804      	bhi.n	8012e5c <tcp_parseopt+0x8c>
 8012e52:	89bb      	ldrh	r3, [r7, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d001      	beq.n	8012e5c <tcp_parseopt+0x8c>
 8012e58:	89ba      	ldrh	r2, [r7, #12]
 8012e5a:	e001      	b.n	8012e60 <tcp_parseopt+0x90>
 8012e5c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012e64:	e010      	b.n	8012e88 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012e66:	f7ff ff7d 	bl	8012d64 <tcp_get_next_optbyte>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012e6e:	7afb      	ldrb	r3, [r7, #11]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d914      	bls.n	8012e9e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012e74:	7afb      	ldrb	r3, [r7, #11]
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	4b0f      	ldr	r3, [pc, #60]	; (8012eb8 <tcp_parseopt+0xe8>)
 8012e7a:	881b      	ldrh	r3, [r3, #0]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	3b02      	subs	r3, #2
 8012e82:	b29a      	uxth	r2, r3
 8012e84:	4b0c      	ldr	r3, [pc, #48]	; (8012eb8 <tcp_parseopt+0xe8>)
 8012e86:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e88:	4b0b      	ldr	r3, [pc, #44]	; (8012eb8 <tcp_parseopt+0xe8>)
 8012e8a:	881a      	ldrh	r2, [r3, #0]
 8012e8c:	4b09      	ldr	r3, [pc, #36]	; (8012eb4 <tcp_parseopt+0xe4>)
 8012e8e:	881b      	ldrh	r3, [r3, #0]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d3b3      	bcc.n	8012dfc <tcp_parseopt+0x2c>
 8012e94:	e004      	b.n	8012ea0 <tcp_parseopt+0xd0>
          return;
 8012e96:	bf00      	nop
 8012e98:	e002      	b.n	8012ea0 <tcp_parseopt+0xd0>
            return;
 8012e9a:	bf00      	nop
 8012e9c:	e000      	b.n	8012ea0 <tcp_parseopt+0xd0>
            return;
 8012e9e:	bf00      	nop
      }
    }
  }
}
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	0801b734 	.word	0x0801b734
 8012eac:	0801bb98 	.word	0x0801bb98
 8012eb0:	0801b780 	.word	0x0801b780
 8012eb4:	2000d8f4 	.word	0x2000d8f4
 8012eb8:	2000d8fc 	.word	0x2000d8fc

08012ebc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012ec0:	4b05      	ldr	r3, [pc, #20]	; (8012ed8 <tcp_trigger_input_pcb_close+0x1c>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	f043 0310 	orr.w	r3, r3, #16
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	4b03      	ldr	r3, [pc, #12]	; (8012ed8 <tcp_trigger_input_pcb_close+0x1c>)
 8012ecc:	701a      	strb	r2, [r3, #0]
}
 8012ece:	bf00      	nop
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr
 8012ed8:	2000d90d 	.word	0x2000d90d

08012edc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00a      	beq.n	8012f04 <tcp_route+0x28>
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	7a1b      	ldrb	r3, [r3, #8]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d006      	beq.n	8012f04 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	7a1b      	ldrb	r3, [r3, #8]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fb f908 	bl	800e110 <netif_get_by_index>
 8012f00:	4603      	mov	r3, r0
 8012f02:	e003      	b.n	8012f0c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f003 fe35 	bl	8016b74 <ip4_route>
 8012f0a:	4603      	mov	r3, r0
  }
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012f14:	b590      	push	{r4, r7, lr}
 8012f16:	b087      	sub	sp, #28
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	603b      	str	r3, [r7, #0]
 8012f20:	4613      	mov	r3, r2
 8012f22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d105      	bne.n	8012f36 <tcp_create_segment+0x22>
 8012f2a:	4b44      	ldr	r3, [pc, #272]	; (801303c <tcp_create_segment+0x128>)
 8012f2c:	22a3      	movs	r2, #163	; 0xa3
 8012f2e:	4944      	ldr	r1, [pc, #272]	; (8013040 <tcp_create_segment+0x12c>)
 8012f30:	4844      	ldr	r0, [pc, #272]	; (8013044 <tcp_create_segment+0x130>)
 8012f32:	f005 fc2f 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d105      	bne.n	8012f48 <tcp_create_segment+0x34>
 8012f3c:	4b3f      	ldr	r3, [pc, #252]	; (801303c <tcp_create_segment+0x128>)
 8012f3e:	22a4      	movs	r2, #164	; 0xa4
 8012f40:	4941      	ldr	r1, [pc, #260]	; (8013048 <tcp_create_segment+0x134>)
 8012f42:	4840      	ldr	r0, [pc, #256]	; (8013044 <tcp_create_segment+0x130>)
 8012f44:	f005 fc26 	bl	8018794 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f4c:	009b      	lsls	r3, r3, #2
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	f003 0304 	and.w	r3, r3, #4
 8012f54:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012f56:	2003      	movs	r0, #3
 8012f58:	f7fa fdd6 	bl	800db08 <memp_malloc>
 8012f5c:	6138      	str	r0, [r7, #16]
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d104      	bne.n	8012f6e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012f64:	68b8      	ldr	r0, [r7, #8]
 8012f66:	f7fb fc61 	bl	800e82c <pbuf_free>
    return NULL;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	e061      	b.n	8013032 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f74:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	891a      	ldrh	r2, [r3, #8]
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d205      	bcs.n	8012f9a <tcp_create_segment+0x86>
 8012f8e:	4b2b      	ldr	r3, [pc, #172]	; (801303c <tcp_create_segment+0x128>)
 8012f90:	22b0      	movs	r2, #176	; 0xb0
 8012f92:	492e      	ldr	r1, [pc, #184]	; (801304c <tcp_create_segment+0x138>)
 8012f94:	482b      	ldr	r0, [pc, #172]	; (8013044 <tcp_create_segment+0x130>)
 8012f96:	f005 fbfd 	bl	8018794 <iprintf>
  seg->len = p->tot_len - optlen;
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	891a      	ldrh	r2, [r3, #8]
 8012f9e:	7dfb      	ldrb	r3, [r7, #23]
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012faa:	2114      	movs	r1, #20
 8012fac:	68b8      	ldr	r0, [r7, #8]
 8012fae:	f7fb fba7 	bl	800e700 <pbuf_add_header>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d004      	beq.n	8012fc2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012fb8:	6938      	ldr	r0, [r7, #16]
 8012fba:	f7fd f800 	bl	800ffbe <tcp_seg_free>
    return NULL;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e037      	b.n	8013032 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	685a      	ldr	r2, [r3, #4]
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	8ada      	ldrh	r2, [r3, #22]
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	68dc      	ldr	r4, [r3, #12]
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	f7fa f8e1 	bl	800d19c <lwip_htons>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	8b1a      	ldrh	r2, [r3, #24]
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	68dc      	ldr	r4, [r3, #12]
 8012fe6:	4610      	mov	r0, r2
 8012fe8:	f7fa f8d8 	bl	800d19c <lwip_htons>
 8012fec:	4603      	mov	r3, r0
 8012fee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	68dc      	ldr	r4, [r3, #12]
 8012ff4:	6838      	ldr	r0, [r7, #0]
 8012ff6:	f7fa f8e6 	bl	800d1c6 <lwip_htonl>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012ffe:	7dfb      	ldrb	r3, [r7, #23]
 8013000:	089b      	lsrs	r3, r3, #2
 8013002:	b2db      	uxtb	r3, r3
 8013004:	b29b      	uxth	r3, r3
 8013006:	3305      	adds	r3, #5
 8013008:	b29b      	uxth	r3, r3
 801300a:	031b      	lsls	r3, r3, #12
 801300c:	b29a      	uxth	r2, r3
 801300e:	79fb      	ldrb	r3, [r7, #7]
 8013010:	b29b      	uxth	r3, r3
 8013012:	4313      	orrs	r3, r2
 8013014:	b29a      	uxth	r2, r3
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	68dc      	ldr	r4, [r3, #12]
 801301a:	4610      	mov	r0, r2
 801301c:	f7fa f8be 	bl	800d19c <lwip_htons>
 8013020:	4603      	mov	r3, r0
 8013022:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	2200      	movs	r2, #0
 801302a:	749a      	strb	r2, [r3, #18]
 801302c:	2200      	movs	r2, #0
 801302e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013030:	693b      	ldr	r3, [r7, #16]
}
 8013032:	4618      	mov	r0, r3
 8013034:	371c      	adds	r7, #28
 8013036:	46bd      	mov	sp, r7
 8013038:	bd90      	pop	{r4, r7, pc}
 801303a:	bf00      	nop
 801303c:	0801bbb4 	.word	0x0801bbb4
 8013040:	0801bbe8 	.word	0x0801bbe8
 8013044:	0801bc08 	.word	0x0801bc08
 8013048:	0801bc30 	.word	0x0801bc30
 801304c:	0801bc54 	.word	0x0801bc54

08013050 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	607b      	str	r3, [r7, #4]
 8013058:	4603      	mov	r3, r0
 801305a:	73fb      	strb	r3, [r7, #15]
 801305c:	460b      	mov	r3, r1
 801305e:	81bb      	strh	r3, [r7, #12]
 8013060:	4613      	mov	r3, r2
 8013062:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013064:	89bb      	ldrh	r3, [r7, #12]
 8013066:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d105      	bne.n	801307a <tcp_pbuf_prealloc+0x2a>
 801306e:	4b30      	ldr	r3, [pc, #192]	; (8013130 <tcp_pbuf_prealloc+0xe0>)
 8013070:	22e8      	movs	r2, #232	; 0xe8
 8013072:	4930      	ldr	r1, [pc, #192]	; (8013134 <tcp_pbuf_prealloc+0xe4>)
 8013074:	4830      	ldr	r0, [pc, #192]	; (8013138 <tcp_pbuf_prealloc+0xe8>)
 8013076:	f005 fb8d 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d105      	bne.n	801308c <tcp_pbuf_prealloc+0x3c>
 8013080:	4b2b      	ldr	r3, [pc, #172]	; (8013130 <tcp_pbuf_prealloc+0xe0>)
 8013082:	22e9      	movs	r2, #233	; 0xe9
 8013084:	492d      	ldr	r1, [pc, #180]	; (801313c <tcp_pbuf_prealloc+0xec>)
 8013086:	482c      	ldr	r0, [pc, #176]	; (8013138 <tcp_pbuf_prealloc+0xe8>)
 8013088:	f005 fb84 	bl	8018794 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801308c:	89ba      	ldrh	r2, [r7, #12]
 801308e:	897b      	ldrh	r3, [r7, #10]
 8013090:	429a      	cmp	r2, r3
 8013092:	d221      	bcs.n	80130d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013098:	f003 0302 	and.w	r3, r3, #2
 801309c:	2b00      	cmp	r3, #0
 801309e:	d111      	bne.n	80130c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80130a0:	6a3b      	ldr	r3, [r7, #32]
 80130a2:	8b5b      	ldrh	r3, [r3, #26]
 80130a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d115      	bne.n	80130d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80130ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d007      	beq.n	80130c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80130b4:	6a3b      	ldr	r3, [r7, #32]
 80130b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d103      	bne.n	80130c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d009      	beq.n	80130d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80130c4:	89bb      	ldrh	r3, [r7, #12]
 80130c6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80130ca:	f023 0203 	bic.w	r2, r3, #3
 80130ce:	897b      	ldrh	r3, [r7, #10]
 80130d0:	4293      	cmp	r3, r2
 80130d2:	bf28      	it	cs
 80130d4:	4613      	movcs	r3, r2
 80130d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80130d8:	8af9      	ldrh	r1, [r7, #22]
 80130da:	7bfb      	ldrb	r3, [r7, #15]
 80130dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fb f8bf 	bl	800e264 <pbuf_alloc>
 80130e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d101      	bne.n	80130f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80130ee:	2300      	movs	r3, #0
 80130f0:	e019      	b.n	8013126 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d006      	beq.n	8013108 <tcp_pbuf_prealloc+0xb8>
 80130fa:	4b0d      	ldr	r3, [pc, #52]	; (8013130 <tcp_pbuf_prealloc+0xe0>)
 80130fc:	f240 120b 	movw	r2, #267	; 0x10b
 8013100:	490f      	ldr	r1, [pc, #60]	; (8013140 <tcp_pbuf_prealloc+0xf0>)
 8013102:	480d      	ldr	r0, [pc, #52]	; (8013138 <tcp_pbuf_prealloc+0xe8>)
 8013104:	f005 fb46 	bl	8018794 <iprintf>
  *oversize = p->len - length;
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	895a      	ldrh	r2, [r3, #10]
 801310c:	89bb      	ldrh	r3, [r7, #12]
 801310e:	1ad3      	subs	r3, r2, r3
 8013110:	b29a      	uxth	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	89ba      	ldrh	r2, [r7, #12]
 801311a:	811a      	strh	r2, [r3, #8]
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	891a      	ldrh	r2, [r3, #8]
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	815a      	strh	r2, [r3, #10]
  return p;
 8013124:	693b      	ldr	r3, [r7, #16]
}
 8013126:	4618      	mov	r0, r3
 8013128:	3718      	adds	r7, #24
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	0801bbb4 	.word	0x0801bbb4
 8013134:	0801bc6c 	.word	0x0801bc6c
 8013138:	0801bc08 	.word	0x0801bc08
 801313c:	0801bc90 	.word	0x0801bc90
 8013140:	0801bcb0 	.word	0x0801bcb0

08013144 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	460b      	mov	r3, r1
 801314e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d106      	bne.n	8013164 <tcp_write_checks+0x20>
 8013156:	4b33      	ldr	r3, [pc, #204]	; (8013224 <tcp_write_checks+0xe0>)
 8013158:	f240 1233 	movw	r2, #307	; 0x133
 801315c:	4932      	ldr	r1, [pc, #200]	; (8013228 <tcp_write_checks+0xe4>)
 801315e:	4833      	ldr	r0, [pc, #204]	; (801322c <tcp_write_checks+0xe8>)
 8013160:	f005 fb18 	bl	8018794 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	7d1b      	ldrb	r3, [r3, #20]
 8013168:	2b04      	cmp	r3, #4
 801316a:	d00e      	beq.n	801318a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013170:	2b07      	cmp	r3, #7
 8013172:	d00a      	beq.n	801318a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013178:	2b02      	cmp	r3, #2
 801317a:	d006      	beq.n	801318a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013180:	2b03      	cmp	r3, #3
 8013182:	d002      	beq.n	801318a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013184:	f06f 030a 	mvn.w	r3, #10
 8013188:	e048      	b.n	801321c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801318a:	887b      	ldrh	r3, [r7, #2]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d101      	bne.n	8013194 <tcp_write_checks+0x50>
    return ERR_OK;
 8013190:	2300      	movs	r3, #0
 8013192:	e043      	b.n	801321c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801319a:	887a      	ldrh	r2, [r7, #2]
 801319c:	429a      	cmp	r2, r3
 801319e:	d909      	bls.n	80131b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	8b5b      	ldrh	r3, [r3, #26]
 80131a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80131ae:	f04f 33ff 	mov.w	r3, #4294967295
 80131b2:	e033      	b.n	801321c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131ba:	2b08      	cmp	r3, #8
 80131bc:	d909      	bls.n	80131d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	8b5b      	ldrh	r3, [r3, #26]
 80131c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131c6:	b29a      	uxth	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80131cc:	f04f 33ff 	mov.w	r3, #4294967295
 80131d0:	e024      	b.n	801321c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d00f      	beq.n	80131fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d11a      	bne.n	801321a <tcp_write_checks+0xd6>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d116      	bne.n	801321a <tcp_write_checks+0xd6>
 80131ec:	4b0d      	ldr	r3, [pc, #52]	; (8013224 <tcp_write_checks+0xe0>)
 80131ee:	f240 1255 	movw	r2, #341	; 0x155
 80131f2:	490f      	ldr	r1, [pc, #60]	; (8013230 <tcp_write_checks+0xec>)
 80131f4:	480d      	ldr	r0, [pc, #52]	; (801322c <tcp_write_checks+0xe8>)
 80131f6:	f005 facd 	bl	8018794 <iprintf>
 80131fa:	e00e      	b.n	801321a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013200:	2b00      	cmp	r3, #0
 8013202:	d103      	bne.n	801320c <tcp_write_checks+0xc8>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013208:	2b00      	cmp	r3, #0
 801320a:	d006      	beq.n	801321a <tcp_write_checks+0xd6>
 801320c:	4b05      	ldr	r3, [pc, #20]	; (8013224 <tcp_write_checks+0xe0>)
 801320e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013212:	4908      	ldr	r1, [pc, #32]	; (8013234 <tcp_write_checks+0xf0>)
 8013214:	4805      	ldr	r0, [pc, #20]	; (801322c <tcp_write_checks+0xe8>)
 8013216:	f005 fabd 	bl	8018794 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	0801bbb4 	.word	0x0801bbb4
 8013228:	0801bcc4 	.word	0x0801bcc4
 801322c:	0801bc08 	.word	0x0801bc08
 8013230:	0801bce4 	.word	0x0801bce4
 8013234:	0801bd20 	.word	0x0801bd20

08013238 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013238:	b590      	push	{r4, r7, lr}
 801323a:	b09b      	sub	sp, #108	; 0x6c
 801323c:	af04      	add	r7, sp, #16
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	4611      	mov	r1, r2
 8013244:	461a      	mov	r2, r3
 8013246:	460b      	mov	r3, r1
 8013248:	80fb      	strh	r3, [r7, #6]
 801324a:	4613      	mov	r3, r2
 801324c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801324e:	2300      	movs	r3, #0
 8013250:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	653b      	str	r3, [r7, #80]	; 0x50
 8013256:	2300      	movs	r3, #0
 8013258:	64fb      	str	r3, [r7, #76]	; 0x4c
 801325a:	2300      	movs	r3, #0
 801325c:	64bb      	str	r3, [r7, #72]	; 0x48
 801325e:	2300      	movs	r3, #0
 8013260:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013262:	2300      	movs	r3, #0
 8013264:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013268:	2300      	movs	r3, #0
 801326a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801326e:	2300      	movs	r3, #0
 8013270:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d109      	bne.n	8013294 <tcp_write+0x5c>
 8013280:	4ba4      	ldr	r3, [pc, #656]	; (8013514 <tcp_write+0x2dc>)
 8013282:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013286:	49a4      	ldr	r1, [pc, #656]	; (8013518 <tcp_write+0x2e0>)
 8013288:	48a4      	ldr	r0, [pc, #656]	; (801351c <tcp_write+0x2e4>)
 801328a:	f005 fa83 	bl	8018794 <iprintf>
 801328e:	f06f 030f 	mvn.w	r3, #15
 8013292:	e32a      	b.n	80138ea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801329a:	085b      	lsrs	r3, r3, #1
 801329c:	b29a      	uxth	r2, r3
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132a2:	4293      	cmp	r3, r2
 80132a4:	bf28      	it	cs
 80132a6:	4613      	movcs	r3, r2
 80132a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80132aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d102      	bne.n	80132b6 <tcp_write+0x7e>
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132b4:	e000      	b.n	80132b8 <tcp_write+0x80>
 80132b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d109      	bne.n	80132d4 <tcp_write+0x9c>
 80132c0:	4b94      	ldr	r3, [pc, #592]	; (8013514 <tcp_write+0x2dc>)
 80132c2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80132c6:	4996      	ldr	r1, [pc, #600]	; (8013520 <tcp_write+0x2e8>)
 80132c8:	4894      	ldr	r0, [pc, #592]	; (801351c <tcp_write+0x2e4>)
 80132ca:	f005 fa63 	bl	8018794 <iprintf>
 80132ce:	f06f 030f 	mvn.w	r3, #15
 80132d2:	e30a      	b.n	80138ea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80132d4:	88fb      	ldrh	r3, [r7, #6]
 80132d6:	4619      	mov	r1, r3
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f7ff ff33 	bl	8013144 <tcp_write_checks>
 80132de:	4603      	mov	r3, r0
 80132e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80132e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d002      	beq.n	80132f2 <tcp_write+0xba>
    return err;
 80132ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80132f0:	e2fb      	b.n	80138ea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132fc:	2300      	movs	r3, #0
 80132fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013306:	2b00      	cmp	r3, #0
 8013308:	f000 80f6 	beq.w	80134f8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013310:	653b      	str	r3, [r7, #80]	; 0x50
 8013312:	e002      	b.n	801331a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801331a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d1f8      	bne.n	8013314 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013324:	7a9b      	ldrb	r3, [r3, #10]
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	b29b      	uxth	r3, r3
 801332a:	f003 0304 	and.w	r3, r3, #4
 801332e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013334:	891b      	ldrh	r3, [r3, #8]
 8013336:	4619      	mov	r1, r3
 8013338:	8c3b      	ldrh	r3, [r7, #32]
 801333a:	440b      	add	r3, r1
 801333c:	429a      	cmp	r2, r3
 801333e:	da06      	bge.n	801334e <tcp_write+0x116>
 8013340:	4b74      	ldr	r3, [pc, #464]	; (8013514 <tcp_write+0x2dc>)
 8013342:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013346:	4977      	ldr	r1, [pc, #476]	; (8013524 <tcp_write+0x2ec>)
 8013348:	4874      	ldr	r0, [pc, #464]	; (801351c <tcp_write+0x2e4>)
 801334a:	f005 fa23 	bl	8018794 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801334e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013350:	891a      	ldrh	r2, [r3, #8]
 8013352:	8c3b      	ldrh	r3, [r7, #32]
 8013354:	4413      	add	r3, r2
 8013356:	b29b      	uxth	r3, r3
 8013358:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801335a:	1ad3      	subs	r3, r2, r3
 801335c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013364:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013366:	8a7b      	ldrh	r3, [r7, #18]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d026      	beq.n	80133ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801336c:	8a7b      	ldrh	r3, [r7, #18]
 801336e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013370:	429a      	cmp	r2, r3
 8013372:	d206      	bcs.n	8013382 <tcp_write+0x14a>
 8013374:	4b67      	ldr	r3, [pc, #412]	; (8013514 <tcp_write+0x2dc>)
 8013376:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801337a:	496b      	ldr	r1, [pc, #428]	; (8013528 <tcp_write+0x2f0>)
 801337c:	4867      	ldr	r0, [pc, #412]	; (801351c <tcp_write+0x2e4>)
 801337e:	f005 fa09 	bl	8018794 <iprintf>
      seg = last_unsent;
 8013382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013384:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013386:	8a7b      	ldrh	r3, [r7, #18]
 8013388:	88fa      	ldrh	r2, [r7, #6]
 801338a:	4293      	cmp	r3, r2
 801338c:	bf28      	it	cs
 801338e:	4613      	movcs	r3, r2
 8013390:	b29b      	uxth	r3, r3
 8013392:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013394:	4293      	cmp	r3, r2
 8013396:	bf28      	it	cs
 8013398:	4613      	movcs	r3, r2
 801339a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801339c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133a2:	4413      	add	r3, r2
 80133a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80133a8:	8a7a      	ldrh	r2, [r7, #18]
 80133aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133ac:	1ad3      	subs	r3, r2, r3
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80133b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133b6:	1ad3      	subs	r3, r2, r3
 80133b8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80133ba:	8a7b      	ldrh	r3, [r7, #18]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00b      	beq.n	80133d8 <tcp_write+0x1a0>
 80133c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133c4:	88fb      	ldrh	r3, [r7, #6]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d006      	beq.n	80133d8 <tcp_write+0x1a0>
 80133ca:	4b52      	ldr	r3, [pc, #328]	; (8013514 <tcp_write+0x2dc>)
 80133cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133d0:	4956      	ldr	r1, [pc, #344]	; (801352c <tcp_write+0x2f4>)
 80133d2:	4852      	ldr	r0, [pc, #328]	; (801351c <tcp_write+0x2e4>)
 80133d4:	f005 f9de 	bl	8018794 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80133d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133dc:	88fb      	ldrh	r3, [r7, #6]
 80133de:	429a      	cmp	r2, r3
 80133e0:	f080 8167 	bcs.w	80136b2 <tcp_write+0x47a>
 80133e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	f000 8163 	beq.w	80136b2 <tcp_write+0x47a>
 80133ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133ee:	891b      	ldrh	r3, [r3, #8]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	f000 815e 	beq.w	80136b2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80133f6:	88fa      	ldrh	r2, [r7, #6]
 80133f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133fc:	1ad2      	subs	r2, r2, r3
 80133fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013400:	4293      	cmp	r3, r2
 8013402:	bfa8      	it	ge
 8013404:	4613      	movge	r3, r2
 8013406:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801340a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801340c:	797b      	ldrb	r3, [r7, #5]
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d027      	beq.n	8013466 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013416:	f107 0012 	add.w	r0, r7, #18
 801341a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801341c:	8bf9      	ldrh	r1, [r7, #30]
 801341e:	2301      	movs	r3, #1
 8013420:	9302      	str	r3, [sp, #8]
 8013422:	797b      	ldrb	r3, [r7, #5]
 8013424:	9301      	str	r3, [sp, #4]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	4603      	mov	r3, r0
 801342c:	2000      	movs	r0, #0
 801342e:	f7ff fe0f 	bl	8013050 <tcp_pbuf_prealloc>
 8013432:	6578      	str	r0, [r7, #84]	; 0x54
 8013434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013436:	2b00      	cmp	r3, #0
 8013438:	f000 8225 	beq.w	8013886 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801343e:	6858      	ldr	r0, [r3, #4]
 8013440:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013444:	68ba      	ldr	r2, [r7, #8]
 8013446:	4413      	add	r3, r2
 8013448:	8bfa      	ldrh	r2, [r7, #30]
 801344a:	4619      	mov	r1, r3
 801344c:	f005 f892 	bl	8018574 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013450:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013452:	f7fb fa79 	bl	800e948 <pbuf_clen>
 8013456:	4603      	mov	r3, r0
 8013458:	461a      	mov	r2, r3
 801345a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801345e:	4413      	add	r3, r2
 8013460:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013464:	e041      	b.n	80134ea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	637b      	str	r3, [r7, #52]	; 0x34
 801346c:	e002      	b.n	8013474 <tcp_write+0x23c>
 801346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	637b      	str	r3, [r7, #52]	; 0x34
 8013474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d1f8      	bne.n	801346e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347e:	7b1b      	ldrb	r3, [r3, #12]
 8013480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d115      	bne.n	80134b4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801348e:	8952      	ldrh	r2, [r2, #10]
 8013490:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013492:	68ba      	ldr	r2, [r7, #8]
 8013494:	429a      	cmp	r2, r3
 8013496:	d10d      	bne.n	80134b4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801349c:	2b00      	cmp	r3, #0
 801349e:	d006      	beq.n	80134ae <tcp_write+0x276>
 80134a0:	4b1c      	ldr	r3, [pc, #112]	; (8013514 <tcp_write+0x2dc>)
 80134a2:	f240 2231 	movw	r2, #561	; 0x231
 80134a6:	4922      	ldr	r1, [pc, #136]	; (8013530 <tcp_write+0x2f8>)
 80134a8:	481c      	ldr	r0, [pc, #112]	; (801351c <tcp_write+0x2e4>)
 80134aa:	f005 f973 	bl	8018794 <iprintf>
          extendlen = seglen;
 80134ae:	8bfb      	ldrh	r3, [r7, #30]
 80134b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80134b2:	e01a      	b.n	80134ea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80134b4:	8bfb      	ldrh	r3, [r7, #30]
 80134b6:	2201      	movs	r2, #1
 80134b8:	4619      	mov	r1, r3
 80134ba:	2000      	movs	r0, #0
 80134bc:	f7fa fed2 	bl	800e264 <pbuf_alloc>
 80134c0:	6578      	str	r0, [r7, #84]	; 0x54
 80134c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	f000 81e0 	beq.w	801388a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80134ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134ce:	68ba      	ldr	r2, [r7, #8]
 80134d0:	441a      	add	r2, r3
 80134d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134d4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80134d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80134d8:	f7fb fa36 	bl	800e948 <pbuf_clen>
 80134dc:	4603      	mov	r3, r0
 80134de:	461a      	mov	r2, r3
 80134e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134e4:	4413      	add	r3, r2
 80134e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80134ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134ee:	8bfb      	ldrh	r3, [r7, #30]
 80134f0:	4413      	add	r3, r2
 80134f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80134f6:	e0dc      	b.n	80136b2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 80d7 	beq.w	80136b2 <tcp_write+0x47a>
 8013504:	4b03      	ldr	r3, [pc, #12]	; (8013514 <tcp_write+0x2dc>)
 8013506:	f240 224a 	movw	r2, #586	; 0x24a
 801350a:	490a      	ldr	r1, [pc, #40]	; (8013534 <tcp_write+0x2fc>)
 801350c:	4803      	ldr	r0, [pc, #12]	; (801351c <tcp_write+0x2e4>)
 801350e:	f005 f941 	bl	8018794 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013512:	e0ce      	b.n	80136b2 <tcp_write+0x47a>
 8013514:	0801bbb4 	.word	0x0801bbb4
 8013518:	0801bd54 	.word	0x0801bd54
 801351c:	0801bc08 	.word	0x0801bc08
 8013520:	0801bd6c 	.word	0x0801bd6c
 8013524:	0801bda0 	.word	0x0801bda0
 8013528:	0801bdb8 	.word	0x0801bdb8
 801352c:	0801bdd8 	.word	0x0801bdd8
 8013530:	0801bdf8 	.word	0x0801bdf8
 8013534:	0801be24 	.word	0x0801be24
    struct pbuf *p;
    u16_t left = len - pos;
 8013538:	88fa      	ldrh	r2, [r7, #6]
 801353a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013542:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013546:	b29b      	uxth	r3, r3
 8013548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801354a:	1ad3      	subs	r3, r2, r3
 801354c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801354e:	8b7a      	ldrh	r2, [r7, #26]
 8013550:	8bbb      	ldrh	r3, [r7, #28]
 8013552:	4293      	cmp	r3, r2
 8013554:	bf28      	it	cs
 8013556:	4613      	movcs	r3, r2
 8013558:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801355a:	797b      	ldrb	r3, [r7, #5]
 801355c:	f003 0301 	and.w	r3, r3, #1
 8013560:	2b00      	cmp	r3, #0
 8013562:	d036      	beq.n	80135d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013568:	b29a      	uxth	r2, r3
 801356a:	8b3b      	ldrh	r3, [r7, #24]
 801356c:	4413      	add	r3, r2
 801356e:	b299      	uxth	r1, r3
 8013570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013572:	2b00      	cmp	r3, #0
 8013574:	bf0c      	ite	eq
 8013576:	2301      	moveq	r3, #1
 8013578:	2300      	movne	r3, #0
 801357a:	b2db      	uxtb	r3, r3
 801357c:	f107 0012 	add.w	r0, r7, #18
 8013580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013582:	9302      	str	r3, [sp, #8]
 8013584:	797b      	ldrb	r3, [r7, #5]
 8013586:	9301      	str	r3, [sp, #4]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	9300      	str	r3, [sp, #0]
 801358c:	4603      	mov	r3, r0
 801358e:	2036      	movs	r0, #54	; 0x36
 8013590:	f7ff fd5e 	bl	8013050 <tcp_pbuf_prealloc>
 8013594:	6338      	str	r0, [r7, #48]	; 0x30
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 8178 	beq.w	801388e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	895b      	ldrh	r3, [r3, #10]
 80135a2:	8b3a      	ldrh	r2, [r7, #24]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d906      	bls.n	80135b6 <tcp_write+0x37e>
 80135a8:	4b8c      	ldr	r3, [pc, #560]	; (80137dc <tcp_write+0x5a4>)
 80135aa:	f240 2266 	movw	r2, #614	; 0x266
 80135ae:	498c      	ldr	r1, [pc, #560]	; (80137e0 <tcp_write+0x5a8>)
 80135b0:	488c      	ldr	r0, [pc, #560]	; (80137e4 <tcp_write+0x5ac>)
 80135b2:	f005 f8ef 	bl	8018794 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80135b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b8:	685a      	ldr	r2, [r3, #4]
 80135ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135be:	18d0      	adds	r0, r2, r3
 80135c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135c4:	68ba      	ldr	r2, [r7, #8]
 80135c6:	4413      	add	r3, r2
 80135c8:	8b3a      	ldrh	r2, [r7, #24]
 80135ca:	4619      	mov	r1, r3
 80135cc:	f004 ffd2 	bl	8018574 <memcpy>
 80135d0:	e02f      	b.n	8013632 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80135d2:	8a7b      	ldrh	r3, [r7, #18]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d006      	beq.n	80135e6 <tcp_write+0x3ae>
 80135d8:	4b80      	ldr	r3, [pc, #512]	; (80137dc <tcp_write+0x5a4>)
 80135da:	f240 2271 	movw	r2, #625	; 0x271
 80135de:	4982      	ldr	r1, [pc, #520]	; (80137e8 <tcp_write+0x5b0>)
 80135e0:	4880      	ldr	r0, [pc, #512]	; (80137e4 <tcp_write+0x5ac>)
 80135e2:	f005 f8d7 	bl	8018794 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80135e6:	8b3b      	ldrh	r3, [r7, #24]
 80135e8:	2201      	movs	r2, #1
 80135ea:	4619      	mov	r1, r3
 80135ec:	2036      	movs	r0, #54	; 0x36
 80135ee:	f7fa fe39 	bl	800e264 <pbuf_alloc>
 80135f2:	6178      	str	r0, [r7, #20]
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f000 814b 	beq.w	8013892 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80135fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	441a      	add	r2, r3
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013608:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801360c:	b29b      	uxth	r3, r3
 801360e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013612:	4619      	mov	r1, r3
 8013614:	2036      	movs	r0, #54	; 0x36
 8013616:	f7fa fe25 	bl	800e264 <pbuf_alloc>
 801361a:	6338      	str	r0, [r7, #48]	; 0x30
 801361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361e:	2b00      	cmp	r3, #0
 8013620:	d103      	bne.n	801362a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013622:	6978      	ldr	r0, [r7, #20]
 8013624:	f7fb f902 	bl	800e82c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013628:	e136      	b.n	8013898 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801362a:	6979      	ldr	r1, [r7, #20]
 801362c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801362e:	f7fb f9cb 	bl	800e9c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013634:	f7fb f988 	bl	800e948 <pbuf_clen>
 8013638:	4603      	mov	r3, r0
 801363a:	461a      	mov	r2, r3
 801363c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013640:	4413      	add	r3, r2
 8013642:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801364a:	2b09      	cmp	r3, #9
 801364c:	d903      	bls.n	8013656 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801364e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013650:	f7fb f8ec 	bl	800e82c <pbuf_free>
      goto memerr;
 8013654:	e120      	b.n	8013898 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801365a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801365e:	441a      	add	r2, r3
 8013660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	4613      	mov	r3, r2
 8013668:	2200      	movs	r2, #0
 801366a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801366c:	68f8      	ldr	r0, [r7, #12]
 801366e:	f7ff fc51 	bl	8012f14 <tcp_create_segment>
 8013672:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 810d 	beq.w	8013896 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801367c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801367e:	2b00      	cmp	r3, #0
 8013680:	d102      	bne.n	8013688 <tcp_write+0x450>
      queue = seg;
 8013682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013684:	647b      	str	r3, [r7, #68]	; 0x44
 8013686:	e00c      	b.n	80136a2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801368a:	2b00      	cmp	r3, #0
 801368c:	d106      	bne.n	801369c <tcp_write+0x464>
 801368e:	4b53      	ldr	r3, [pc, #332]	; (80137dc <tcp_write+0x5a4>)
 8013690:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013694:	4955      	ldr	r1, [pc, #340]	; (80137ec <tcp_write+0x5b4>)
 8013696:	4853      	ldr	r0, [pc, #332]	; (80137e4 <tcp_write+0x5ac>)
 8013698:	f005 f87c 	bl	8018794 <iprintf>
      prev_seg->next = seg;
 801369c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801369e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80136a0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80136a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136a4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80136a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136aa:	8b3b      	ldrh	r3, [r7, #24]
 80136ac:	4413      	add	r3, r2
 80136ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80136b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136b6:	88fb      	ldrh	r3, [r7, #6]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	f4ff af3d 	bcc.w	8013538 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80136be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d02c      	beq.n	801371e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80136c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136ca:	e01e      	b.n	801370a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80136cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ce:	891a      	ldrh	r2, [r3, #8]
 80136d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136d2:	4413      	add	r3, r2
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80136da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d110      	bne.n	8013704 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80136e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136e8:	8952      	ldrh	r2, [r2, #10]
 80136ea:	4413      	add	r3, r2
 80136ec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80136ee:	68b9      	ldr	r1, [r7, #8]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f004 ff3f 	bl	8018574 <memcpy>
        p->len += oversize_used;
 80136f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f8:	895a      	ldrh	r2, [r3, #10]
 80136fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136fc:	4413      	add	r3, r2
 80136fe:	b29a      	uxth	r2, r3
 8013700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013702:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370c:	2b00      	cmp	r3, #0
 801370e:	d1dd      	bne.n	80136cc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013712:	891a      	ldrh	r2, [r3, #8]
 8013714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013716:	4413      	add	r3, r2
 8013718:	b29a      	uxth	r2, r3
 801371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801371c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801371e:	8a7a      	ldrh	r2, [r7, #18]
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013728:	2b00      	cmp	r3, #0
 801372a:	d018      	beq.n	801375e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801372e:	2b00      	cmp	r3, #0
 8013730:	d106      	bne.n	8013740 <tcp_write+0x508>
 8013732:	4b2a      	ldr	r3, [pc, #168]	; (80137dc <tcp_write+0x5a4>)
 8013734:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013738:	492d      	ldr	r1, [pc, #180]	; (80137f0 <tcp_write+0x5b8>)
 801373a:	482a      	ldr	r0, [pc, #168]	; (80137e4 <tcp_write+0x5ac>)
 801373c:	f005 f82a 	bl	8018794 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013746:	4618      	mov	r0, r3
 8013748:	f7fb f93e 	bl	800e9c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801374c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801374e:	891a      	ldrh	r2, [r3, #8]
 8013750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013752:	891b      	ldrh	r3, [r3, #8]
 8013754:	4413      	add	r3, r2
 8013756:	b29a      	uxth	r2, r3
 8013758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801375a:	811a      	strh	r2, [r3, #8]
 801375c:	e037      	b.n	80137ce <tcp_write+0x596>
  } else if (extendlen > 0) {
 801375e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013760:	2b00      	cmp	r3, #0
 8013762:	d034      	beq.n	80137ce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013766:	2b00      	cmp	r3, #0
 8013768:	d003      	beq.n	8013772 <tcp_write+0x53a>
 801376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d106      	bne.n	8013780 <tcp_write+0x548>
 8013772:	4b1a      	ldr	r3, [pc, #104]	; (80137dc <tcp_write+0x5a4>)
 8013774:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013778:	491e      	ldr	r1, [pc, #120]	; (80137f4 <tcp_write+0x5bc>)
 801377a:	481a      	ldr	r0, [pc, #104]	; (80137e4 <tcp_write+0x5ac>)
 801377c:	f005 f80a 	bl	8018794 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	62bb      	str	r3, [r7, #40]	; 0x28
 8013786:	e009      	b.n	801379c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378a:	891a      	ldrh	r2, [r3, #8]
 801378c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801378e:	4413      	add	r3, r2
 8013790:	b29a      	uxth	r2, r3
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	62bb      	str	r3, [r7, #40]	; 0x28
 801379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d1f1      	bne.n	8013788 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80137a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a6:	891a      	ldrh	r2, [r3, #8]
 80137a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137aa:	4413      	add	r3, r2
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80137b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b4:	895a      	ldrh	r2, [r3, #10]
 80137b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137b8:	4413      	add	r3, r2
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80137c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137c2:	891a      	ldrh	r2, [r3, #8]
 80137c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137c6:	4413      	add	r3, r2
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137cc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80137ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d111      	bne.n	80137f8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80137da:	e010      	b.n	80137fe <tcp_write+0x5c6>
 80137dc:	0801bbb4 	.word	0x0801bbb4
 80137e0:	0801be54 	.word	0x0801be54
 80137e4:	0801bc08 	.word	0x0801bc08
 80137e8:	0801be94 	.word	0x0801be94
 80137ec:	0801bea4 	.word	0x0801bea4
 80137f0:	0801beb8 	.word	0x0801beb8
 80137f4:	0801bef0 	.word	0x0801bef0
  } else {
    last_unsent->next = queue;
 80137f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137fc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013802:	88fb      	ldrh	r3, [r7, #6]
 8013804:	441a      	add	r2, r3
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013810:	88fb      	ldrh	r3, [r7, #6]
 8013812:	1ad3      	subs	r3, r2, r3
 8013814:	b29a      	uxth	r2, r3
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013822:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00e      	beq.n	801384e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013834:	2b00      	cmp	r3, #0
 8013836:	d10a      	bne.n	801384e <tcp_write+0x616>
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d106      	bne.n	801384e <tcp_write+0x616>
 8013840:	4b2c      	ldr	r3, [pc, #176]	; (80138f4 <tcp_write+0x6bc>)
 8013842:	f240 3212 	movw	r2, #786	; 0x312
 8013846:	492c      	ldr	r1, [pc, #176]	; (80138f8 <tcp_write+0x6c0>)
 8013848:	482c      	ldr	r0, [pc, #176]	; (80138fc <tcp_write+0x6c4>)
 801384a:	f004 ffa3 	bl	8018794 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801384e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013850:	2b00      	cmp	r3, #0
 8013852:	d016      	beq.n	8013882 <tcp_write+0x64a>
 8013854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d012      	beq.n	8013882 <tcp_write+0x64a>
 801385c:	797b      	ldrb	r3, [r7, #5]
 801385e:	f003 0302 	and.w	r3, r3, #2
 8013862:	2b00      	cmp	r3, #0
 8013864:	d10d      	bne.n	8013882 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	899b      	ldrh	r3, [r3, #12]
 801386c:	b29c      	uxth	r4, r3
 801386e:	2008      	movs	r0, #8
 8013870:	f7f9 fc94 	bl	800d19c <lwip_htons>
 8013874:	4603      	mov	r3, r0
 8013876:	461a      	mov	r2, r3
 8013878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	4322      	orrs	r2, r4
 801387e:	b292      	uxth	r2, r2
 8013880:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013882:	2300      	movs	r3, #0
 8013884:	e031      	b.n	80138ea <tcp_write+0x6b2>
          goto memerr;
 8013886:	bf00      	nop
 8013888:	e006      	b.n	8013898 <tcp_write+0x660>
            goto memerr;
 801388a:	bf00      	nop
 801388c:	e004      	b.n	8013898 <tcp_write+0x660>
        goto memerr;
 801388e:	bf00      	nop
 8013890:	e002      	b.n	8013898 <tcp_write+0x660>
        goto memerr;
 8013892:	bf00      	nop
 8013894:	e000      	b.n	8013898 <tcp_write+0x660>
      goto memerr;
 8013896:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	8b5b      	ldrh	r3, [r3, #26]
 801389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80138a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d002      	beq.n	80138b2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80138ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80138ae:	f7fa ffbd 	bl	800e82c <pbuf_free>
  }
  if (queue != NULL) {
 80138b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d002      	beq.n	80138be <tcp_write+0x686>
    tcp_segs_free(queue);
 80138b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138ba:	f7fc fb6b 	bl	800ff94 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00e      	beq.n	80138e6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d10a      	bne.n	80138e6 <tcp_write+0x6ae>
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d106      	bne.n	80138e6 <tcp_write+0x6ae>
 80138d8:	4b06      	ldr	r3, [pc, #24]	; (80138f4 <tcp_write+0x6bc>)
 80138da:	f240 3227 	movw	r2, #807	; 0x327
 80138de:	4906      	ldr	r1, [pc, #24]	; (80138f8 <tcp_write+0x6c0>)
 80138e0:	4806      	ldr	r0, [pc, #24]	; (80138fc <tcp_write+0x6c4>)
 80138e2:	f004 ff57 	bl	8018794 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80138e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	375c      	adds	r7, #92	; 0x5c
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd90      	pop	{r4, r7, pc}
 80138f2:	bf00      	nop
 80138f4:	0801bbb4 	.word	0x0801bbb4
 80138f8:	0801bf28 	.word	0x0801bf28
 80138fc:	0801bc08 	.word	0x0801bc08

08013900 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013900:	b590      	push	{r4, r7, lr}
 8013902:	b08b      	sub	sp, #44	; 0x2c
 8013904:	af02      	add	r7, sp, #8
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	460b      	mov	r3, r1
 801390a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801390c:	2300      	movs	r3, #0
 801390e:	61fb      	str	r3, [r7, #28]
 8013910:	2300      	movs	r3, #0
 8013912:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013914:	2300      	movs	r3, #0
 8013916:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d106      	bne.n	801392c <tcp_split_unsent_seg+0x2c>
 801391e:	4b95      	ldr	r3, [pc, #596]	; (8013b74 <tcp_split_unsent_seg+0x274>)
 8013920:	f240 324b 	movw	r2, #843	; 0x34b
 8013924:	4994      	ldr	r1, [pc, #592]	; (8013b78 <tcp_split_unsent_seg+0x278>)
 8013926:	4895      	ldr	r0, [pc, #596]	; (8013b7c <tcp_split_unsent_seg+0x27c>)
 8013928:	f004 ff34 	bl	8018794 <iprintf>

  useg = pcb->unsent;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013930:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d102      	bne.n	801393e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013938:	f04f 33ff 	mov.w	r3, #4294967295
 801393c:	e116      	b.n	8013b6c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801393e:	887b      	ldrh	r3, [r7, #2]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d109      	bne.n	8013958 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013944:	4b8b      	ldr	r3, [pc, #556]	; (8013b74 <tcp_split_unsent_seg+0x274>)
 8013946:	f240 3253 	movw	r2, #851	; 0x353
 801394a:	498d      	ldr	r1, [pc, #564]	; (8013b80 <tcp_split_unsent_seg+0x280>)
 801394c:	488b      	ldr	r0, [pc, #556]	; (8013b7c <tcp_split_unsent_seg+0x27c>)
 801394e:	f004 ff21 	bl	8018794 <iprintf>
    return ERR_VAL;
 8013952:	f06f 0305 	mvn.w	r3, #5
 8013956:	e109      	b.n	8013b6c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	891b      	ldrh	r3, [r3, #8]
 801395c:	887a      	ldrh	r2, [r7, #2]
 801395e:	429a      	cmp	r2, r3
 8013960:	d301      	bcc.n	8013966 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013962:	2300      	movs	r3, #0
 8013964:	e102      	b.n	8013b6c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801396a:	887a      	ldrh	r2, [r7, #2]
 801396c:	429a      	cmp	r2, r3
 801396e:	d906      	bls.n	801397e <tcp_split_unsent_seg+0x7e>
 8013970:	4b80      	ldr	r3, [pc, #512]	; (8013b74 <tcp_split_unsent_seg+0x274>)
 8013972:	f240 325b 	movw	r2, #859	; 0x35b
 8013976:	4983      	ldr	r1, [pc, #524]	; (8013b84 <tcp_split_unsent_seg+0x284>)
 8013978:	4880      	ldr	r0, [pc, #512]	; (8013b7c <tcp_split_unsent_seg+0x27c>)
 801397a:	f004 ff0b 	bl	8018794 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	891b      	ldrh	r3, [r3, #8]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d106      	bne.n	8013994 <tcp_split_unsent_seg+0x94>
 8013986:	4b7b      	ldr	r3, [pc, #492]	; (8013b74 <tcp_split_unsent_seg+0x274>)
 8013988:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801398c:	497e      	ldr	r1, [pc, #504]	; (8013b88 <tcp_split_unsent_seg+0x288>)
 801398e:	487b      	ldr	r0, [pc, #492]	; (8013b7c <tcp_split_unsent_seg+0x27c>)
 8013990:	f004 ff00 	bl	8018794 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	7a9b      	ldrb	r3, [r3, #10]
 8013998:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801399a:	7bfb      	ldrb	r3, [r7, #15]
 801399c:	009b      	lsls	r3, r3, #2
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	f003 0304 	and.w	r3, r3, #4
 80139a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	891a      	ldrh	r2, [r3, #8]
 80139aa:	887b      	ldrh	r3, [r7, #2]
 80139ac:	1ad3      	subs	r3, r2, r3
 80139ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80139b0:	7bbb      	ldrb	r3, [r7, #14]
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	89bb      	ldrh	r3, [r7, #12]
 80139b6:	4413      	add	r3, r2
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139be:	4619      	mov	r1, r3
 80139c0:	2036      	movs	r0, #54	; 0x36
 80139c2:	f7fa fc4f 	bl	800e264 <pbuf_alloc>
 80139c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	f000 80b7 	beq.w	8013b3e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	891a      	ldrh	r2, [r3, #8]
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	891b      	ldrh	r3, [r3, #8]
 80139da:	1ad3      	subs	r3, r2, r3
 80139dc:	b29a      	uxth	r2, r3
 80139de:	887b      	ldrh	r3, [r7, #2]
 80139e0:	4413      	add	r3, r2
 80139e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	6858      	ldr	r0, [r3, #4]
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	685a      	ldr	r2, [r3, #4]
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
 80139ee:	18d1      	adds	r1, r2, r3
 80139f0:	897b      	ldrh	r3, [r7, #10]
 80139f2:	89ba      	ldrh	r2, [r7, #12]
 80139f4:	f7fb f920 	bl	800ec38 <pbuf_copy_partial>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	89bb      	ldrh	r3, [r7, #12]
 80139fe:	4293      	cmp	r3, r2
 8013a00:	f040 809f 	bne.w	8013b42 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	899b      	ldrh	r3, [r3, #12]
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7f9 fbc5 	bl	800d19c <lwip_htons>
 8013a12:	4603      	mov	r3, r0
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a1a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013a20:	7efb      	ldrb	r3, [r7, #27]
 8013a22:	f003 0308 	and.w	r3, r3, #8
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d007      	beq.n	8013a3a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013a2a:	7efb      	ldrb	r3, [r7, #27]
 8013a2c:	f023 0308 	bic.w	r3, r3, #8
 8013a30:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013a32:	7ebb      	ldrb	r3, [r7, #26]
 8013a34:	f043 0308 	orr.w	r3, r3, #8
 8013a38:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013a3a:	7efb      	ldrb	r3, [r7, #27]
 8013a3c:	f003 0301 	and.w	r3, r3, #1
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d007      	beq.n	8013a54 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013a44:	7efb      	ldrb	r3, [r7, #27]
 8013a46:	f023 0301 	bic.w	r3, r3, #1
 8013a4a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013a4c:	7ebb      	ldrb	r3, [r7, #26]
 8013a4e:	f043 0301 	orr.w	r3, r3, #1
 8013a52:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	68db      	ldr	r3, [r3, #12]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7f9 fbb3 	bl	800d1c6 <lwip_htonl>
 8013a60:	4602      	mov	r2, r0
 8013a62:	887b      	ldrh	r3, [r7, #2]
 8013a64:	18d1      	adds	r1, r2, r3
 8013a66:	7eba      	ldrb	r2, [r7, #26]
 8013a68:	7bfb      	ldrb	r3, [r7, #15]
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	6939      	ldr	r1, [r7, #16]
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7ff fa4f 	bl	8012f14 <tcp_create_segment>
 8013a76:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d063      	beq.n	8013b46 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7fa ff60 	bl	800e948 <pbuf_clen>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a92:	1a9b      	subs	r3, r3, r2
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	6858      	ldr	r0, [r3, #4]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	891a      	ldrh	r2, [r3, #8]
 8013aa6:	89bb      	ldrh	r3, [r7, #12]
 8013aa8:	1ad3      	subs	r3, r2, r3
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	4619      	mov	r1, r3
 8013aae:	f7fa fd37 	bl	800e520 <pbuf_realloc>
  useg->len -= remainder;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	891a      	ldrh	r2, [r3, #8]
 8013ab6:	89bb      	ldrh	r3, [r7, #12]
 8013ab8:	1ad3      	subs	r3, r2, r3
 8013aba:	b29a      	uxth	r2, r3
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	899b      	ldrh	r3, [r3, #12]
 8013ac6:	b29c      	uxth	r4, r3
 8013ac8:	7efb      	ldrb	r3, [r7, #27]
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7f9 fb65 	bl	800d19c <lwip_htons>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	4322      	orrs	r2, r4
 8013adc:	b292      	uxth	r2, r2
 8013ade:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fa ff2f 	bl	800e948 <pbuf_clen>
 8013aea:	4603      	mov	r3, r0
 8013aec:	461a      	mov	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013af4:	4413      	add	r3, r2
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fa ff20 	bl	800e948 <pbuf_clen>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b12:	4413      	add	r3, r2
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	69fa      	ldr	r2, [r7, #28]
 8013b28:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d103      	bne.n	8013b3a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2200      	movs	r2, #0
 8013b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	e016      	b.n	8013b6c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013b3e:	bf00      	nop
 8013b40:	e002      	b.n	8013b48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b42:	bf00      	nop
 8013b44:	e000      	b.n	8013b48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b46:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d006      	beq.n	8013b5c <tcp_split_unsent_seg+0x25c>
 8013b4e:	4b09      	ldr	r3, [pc, #36]	; (8013b74 <tcp_split_unsent_seg+0x274>)
 8013b50:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013b54:	490d      	ldr	r1, [pc, #52]	; (8013b8c <tcp_split_unsent_seg+0x28c>)
 8013b56:	4809      	ldr	r0, [pc, #36]	; (8013b7c <tcp_split_unsent_seg+0x27c>)
 8013b58:	f004 fe1c 	bl	8018794 <iprintf>
  if (p != NULL) {
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d002      	beq.n	8013b68 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013b62:	6938      	ldr	r0, [r7, #16]
 8013b64:	f7fa fe62 	bl	800e82c <pbuf_free>
  }

  return ERR_MEM;
 8013b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3724      	adds	r7, #36	; 0x24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd90      	pop	{r4, r7, pc}
 8013b74:	0801bbb4 	.word	0x0801bbb4
 8013b78:	0801bf48 	.word	0x0801bf48
 8013b7c:	0801bc08 	.word	0x0801bc08
 8013b80:	0801bf6c 	.word	0x0801bf6c
 8013b84:	0801bf90 	.word	0x0801bf90
 8013b88:	0801bfa0 	.word	0x0801bfa0
 8013b8c:	0801bfb0 	.word	0x0801bfb0

08013b90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013b90:	b590      	push	{r4, r7, lr}
 8013b92:	b085      	sub	sp, #20
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d106      	bne.n	8013bac <tcp_send_fin+0x1c>
 8013b9e:	4b21      	ldr	r3, [pc, #132]	; (8013c24 <tcp_send_fin+0x94>)
 8013ba0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013ba4:	4920      	ldr	r1, [pc, #128]	; (8013c28 <tcp_send_fin+0x98>)
 8013ba6:	4821      	ldr	r0, [pc, #132]	; (8013c2c <tcp_send_fin+0x9c>)
 8013ba8:	f004 fdf4 	bl	8018794 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d02e      	beq.n	8013c12 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	e002      	b.n	8013bc2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d1f8      	bne.n	8013bbc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	68db      	ldr	r3, [r3, #12]
 8013bce:	899b      	ldrh	r3, [r3, #12]
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7f9 fae2 	bl	800d19c <lwip_htons>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	b2db      	uxtb	r3, r3
 8013bdc:	f003 0307 	and.w	r3, r3, #7
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d116      	bne.n	8013c12 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	68db      	ldr	r3, [r3, #12]
 8013be8:	899b      	ldrh	r3, [r3, #12]
 8013bea:	b29c      	uxth	r4, r3
 8013bec:	2001      	movs	r0, #1
 8013bee:	f7f9 fad5 	bl	800d19c <lwip_htons>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	4322      	orrs	r2, r4
 8013bfc:	b292      	uxth	r2, r2
 8013bfe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	8b5b      	ldrh	r3, [r3, #26]
 8013c04:	f043 0320 	orr.w	r3, r3, #32
 8013c08:	b29a      	uxth	r2, r3
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	e004      	b.n	8013c1c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013c12:	2101      	movs	r1, #1
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f000 f80b 	bl	8013c30 <tcp_enqueue_flags>
 8013c1a:	4603      	mov	r3, r0
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3714      	adds	r7, #20
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd90      	pop	{r4, r7, pc}
 8013c24:	0801bbb4 	.word	0x0801bbb4
 8013c28:	0801bfbc 	.word	0x0801bfbc
 8013c2c:	0801bc08 	.word	0x0801bc08

08013c30 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b08a      	sub	sp, #40	; 0x28
 8013c34:	af02      	add	r7, sp, #8
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	460b      	mov	r3, r1
 8013c3a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013c40:	2300      	movs	r3, #0
 8013c42:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013c44:	78fb      	ldrb	r3, [r7, #3]
 8013c46:	f003 0303 	and.w	r3, r3, #3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d106      	bne.n	8013c5c <tcp_enqueue_flags+0x2c>
 8013c4e:	4b67      	ldr	r3, [pc, #412]	; (8013dec <tcp_enqueue_flags+0x1bc>)
 8013c50:	f240 4211 	movw	r2, #1041	; 0x411
 8013c54:	4966      	ldr	r1, [pc, #408]	; (8013df0 <tcp_enqueue_flags+0x1c0>)
 8013c56:	4867      	ldr	r0, [pc, #412]	; (8013df4 <tcp_enqueue_flags+0x1c4>)
 8013c58:	f004 fd9c 	bl	8018794 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d106      	bne.n	8013c70 <tcp_enqueue_flags+0x40>
 8013c62:	4b62      	ldr	r3, [pc, #392]	; (8013dec <tcp_enqueue_flags+0x1bc>)
 8013c64:	f240 4213 	movw	r2, #1043	; 0x413
 8013c68:	4963      	ldr	r1, [pc, #396]	; (8013df8 <tcp_enqueue_flags+0x1c8>)
 8013c6a:	4862      	ldr	r0, [pc, #392]	; (8013df4 <tcp_enqueue_flags+0x1c4>)
 8013c6c:	f004 fd92 	bl	8018794 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013c70:	78fb      	ldrb	r3, [r7, #3]
 8013c72:	f003 0302 	and.w	r3, r3, #2
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d001      	beq.n	8013c7e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013c7e:	7ffb      	ldrb	r3, [r7, #31]
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	b2db      	uxtb	r3, r3
 8013c84:	f003 0304 	and.w	r3, r3, #4
 8013c88:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c8a:	7dfb      	ldrb	r3, [r7, #23]
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c92:	4619      	mov	r1, r3
 8013c94:	2036      	movs	r0, #54	; 0x36
 8013c96:	f7fa fae5 	bl	800e264 <pbuf_alloc>
 8013c9a:	6138      	str	r0, [r7, #16]
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d109      	bne.n	8013cb6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	8b5b      	ldrh	r3, [r3, #26]
 8013ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013cb4:	e095      	b.n	8013de2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	895a      	ldrh	r2, [r3, #10]
 8013cba:	7dfb      	ldrb	r3, [r7, #23]
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d206      	bcs.n	8013cd0 <tcp_enqueue_flags+0xa0>
 8013cc2:	4b4a      	ldr	r3, [pc, #296]	; (8013dec <tcp_enqueue_flags+0x1bc>)
 8013cc4:	f240 4239 	movw	r2, #1081	; 0x439
 8013cc8:	494c      	ldr	r1, [pc, #304]	; (8013dfc <tcp_enqueue_flags+0x1cc>)
 8013cca:	484a      	ldr	r0, [pc, #296]	; (8013df4 <tcp_enqueue_flags+0x1c4>)
 8013ccc:	f004 fd62 	bl	8018794 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013cd4:	78fa      	ldrb	r2, [r7, #3]
 8013cd6:	7ffb      	ldrb	r3, [r7, #31]
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	460b      	mov	r3, r1
 8013cdc:	6939      	ldr	r1, [r7, #16]
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7ff f918 	bl	8012f14 <tcp_create_segment>
 8013ce4:	60f8      	str	r0, [r7, #12]
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d109      	bne.n	8013d00 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	8b5b      	ldrh	r3, [r3, #26]
 8013cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cf4:	b29a      	uxth	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8013cfe:	e070      	b.n	8013de2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	f003 0303 	and.w	r3, r3, #3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d006      	beq.n	8013d1a <tcp_enqueue_flags+0xea>
 8013d0c:	4b37      	ldr	r3, [pc, #220]	; (8013dec <tcp_enqueue_flags+0x1bc>)
 8013d0e:	f240 4242 	movw	r2, #1090	; 0x442
 8013d12:	493b      	ldr	r1, [pc, #236]	; (8013e00 <tcp_enqueue_flags+0x1d0>)
 8013d14:	4837      	ldr	r0, [pc, #220]	; (8013df4 <tcp_enqueue_flags+0x1c4>)
 8013d16:	f004 fd3d 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	891b      	ldrh	r3, [r3, #8]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d006      	beq.n	8013d30 <tcp_enqueue_flags+0x100>
 8013d22:	4b32      	ldr	r3, [pc, #200]	; (8013dec <tcp_enqueue_flags+0x1bc>)
 8013d24:	f240 4243 	movw	r2, #1091	; 0x443
 8013d28:	4936      	ldr	r1, [pc, #216]	; (8013e04 <tcp_enqueue_flags+0x1d4>)
 8013d2a:	4832      	ldr	r0, [pc, #200]	; (8013df4 <tcp_enqueue_flags+0x1c4>)
 8013d2c:	f004 fd32 	bl	8018794 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d103      	bne.n	8013d40 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	68fa      	ldr	r2, [r7, #12]
 8013d3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d3e:	e00d      	b.n	8013d5c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d44:	61bb      	str	r3, [r7, #24]
 8013d46:	e002      	b.n	8013d4e <tcp_enqueue_flags+0x11e>
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	61bb      	str	r3, [r7, #24]
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d1f8      	bne.n	8013d48 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013d56:	69bb      	ldr	r3, [r7, #24]
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013d64:	78fb      	ldrb	r3, [r7, #3]
 8013d66:	f003 0302 	and.w	r3, r3, #2
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d104      	bne.n	8013d78 <tcp_enqueue_flags+0x148>
 8013d6e:	78fb      	ldrb	r3, [r7, #3]
 8013d70:	f003 0301 	and.w	r3, r3, #1
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d004      	beq.n	8013d82 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013d7c:	1c5a      	adds	r2, r3, #1
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013d82:	78fb      	ldrb	r3, [r7, #3]
 8013d84:	f003 0301 	and.w	r3, r3, #1
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d006      	beq.n	8013d9a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	8b5b      	ldrh	r3, [r3, #26]
 8013d90:	f043 0320 	orr.w	r3, r3, #32
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	685b      	ldr	r3, [r3, #4]
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fa fdd2 	bl	800e948 <pbuf_clen>
 8013da4:	4603      	mov	r3, r0
 8013da6:	461a      	mov	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dae:	4413      	add	r3, r2
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d00e      	beq.n	8013de0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d10a      	bne.n	8013de0 <tcp_enqueue_flags+0x1b0>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d106      	bne.n	8013de0 <tcp_enqueue_flags+0x1b0>
 8013dd2:	4b06      	ldr	r3, [pc, #24]	; (8013dec <tcp_enqueue_flags+0x1bc>)
 8013dd4:	f240 4265 	movw	r2, #1125	; 0x465
 8013dd8:	490b      	ldr	r1, [pc, #44]	; (8013e08 <tcp_enqueue_flags+0x1d8>)
 8013dda:	4806      	ldr	r0, [pc, #24]	; (8013df4 <tcp_enqueue_flags+0x1c4>)
 8013ddc:	f004 fcda 	bl	8018794 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3720      	adds	r7, #32
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	0801bbb4 	.word	0x0801bbb4
 8013df0:	0801bfd8 	.word	0x0801bfd8
 8013df4:	0801bc08 	.word	0x0801bc08
 8013df8:	0801c030 	.word	0x0801c030
 8013dfc:	0801c050 	.word	0x0801c050
 8013e00:	0801c08c 	.word	0x0801c08c
 8013e04:	0801c0a4 	.word	0x0801c0a4
 8013e08:	0801c0d0 	.word	0x0801c0d0

08013e0c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013e0c:	b5b0      	push	{r4, r5, r7, lr}
 8013e0e:	b08a      	sub	sp, #40	; 0x28
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d106      	bne.n	8013e28 <tcp_output+0x1c>
 8013e1a:	4b8a      	ldr	r3, [pc, #552]	; (8014044 <tcp_output+0x238>)
 8013e1c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013e20:	4989      	ldr	r1, [pc, #548]	; (8014048 <tcp_output+0x23c>)
 8013e22:	488a      	ldr	r0, [pc, #552]	; (801404c <tcp_output+0x240>)
 8013e24:	f004 fcb6 	bl	8018794 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	7d1b      	ldrb	r3, [r3, #20]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d106      	bne.n	8013e3e <tcp_output+0x32>
 8013e30:	4b84      	ldr	r3, [pc, #528]	; (8014044 <tcp_output+0x238>)
 8013e32:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013e36:	4986      	ldr	r1, [pc, #536]	; (8014050 <tcp_output+0x244>)
 8013e38:	4884      	ldr	r0, [pc, #528]	; (801404c <tcp_output+0x240>)
 8013e3a:	f004 fcab 	bl	8018794 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013e3e:	4b85      	ldr	r3, [pc, #532]	; (8014054 <tcp_output+0x248>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d101      	bne.n	8013e4c <tcp_output+0x40>
    return ERR_OK;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	e1ce      	b.n	80141ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	bf28      	it	cs
 8013e5c:	4613      	movcs	r3, r2
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e66:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d10b      	bne.n	8013e86 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	8b5b      	ldrh	r3, [r3, #26]
 8013e72:	f003 0302 	and.w	r3, r3, #2
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f000 81aa 	beq.w	80141d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f000 fdcb 	bl	8014a18 <tcp_send_empty_ack>
 8013e82:	4603      	mov	r3, r0
 8013e84:	e1b1      	b.n	80141ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013e86:	6879      	ldr	r1, [r7, #4]
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3304      	adds	r3, #4
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f7ff f824 	bl	8012edc <tcp_route>
 8013e94:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d102      	bne.n	8013ea2 <tcp_output+0x96>
    return ERR_RTE;
 8013e9c:	f06f 0303 	mvn.w	r3, #3
 8013ea0:	e1a3      	b.n	80141ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d003      	beq.n	8013eb0 <tcp_output+0xa4>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d111      	bne.n	8013ed4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d002      	beq.n	8013ebc <tcp_output+0xb0>
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	3304      	adds	r3, #4
 8013eba:	e000      	b.n	8013ebe <tcp_output+0xb2>
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d102      	bne.n	8013ecc <tcp_output+0xc0>
      return ERR_RTE;
 8013ec6:	f06f 0303 	mvn.w	r3, #3
 8013eca:	e18e      	b.n	80141ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed6:	68db      	ldr	r3, [r3, #12]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7f9 f973 	bl	800d1c6 <lwip_htonl>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ee6:	1ad3      	subs	r3, r2, r3
 8013ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eea:	8912      	ldrh	r2, [r2, #8]
 8013eec:	4413      	add	r3, r2
 8013eee:	69ba      	ldr	r2, [r7, #24]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d227      	bcs.n	8013f44 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013efa:	461a      	mov	r2, r3
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d114      	bne.n	8013f2c <tcp_output+0x120>
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d110      	bne.n	8013f2c <tcp_output+0x120>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d10b      	bne.n	8013f2c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2200      	movs	r2, #0
 8013f28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	8b5b      	ldrh	r3, [r3, #26]
 8013f30:	f003 0302 	and.w	r3, r3, #2
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	f000 814d 	beq.w	80141d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f000 fd6c 	bl	8014a18 <tcp_send_empty_ack>
 8013f40:	4603      	mov	r3, r0
 8013f42:	e152      	b.n	80141ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f50:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013f52:	6a3b      	ldr	r3, [r7, #32]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f000 811c 	beq.w	8014192 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013f5a:	e002      	b.n	8013f62 <tcp_output+0x156>
 8013f5c:	6a3b      	ldr	r3, [r7, #32]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	623b      	str	r3, [r7, #32]
 8013f62:	6a3b      	ldr	r3, [r7, #32]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d1f8      	bne.n	8013f5c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013f6a:	e112      	b.n	8014192 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	899b      	ldrh	r3, [r3, #12]
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f9 f911 	bl	800d19c <lwip_htons>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	f003 0304 	and.w	r3, r3, #4
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d006      	beq.n	8013f94 <tcp_output+0x188>
 8013f86:	4b2f      	ldr	r3, [pc, #188]	; (8014044 <tcp_output+0x238>)
 8013f88:	f240 5236 	movw	r2, #1334	; 0x536
 8013f8c:	4932      	ldr	r1, [pc, #200]	; (8014058 <tcp_output+0x24c>)
 8013f8e:	482f      	ldr	r0, [pc, #188]	; (801404c <tcp_output+0x240>)
 8013f90:	f004 fc00 	bl	8018794 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d01f      	beq.n	8013fdc <tcp_output+0x1d0>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	8b5b      	ldrh	r3, [r3, #26]
 8013fa0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d119      	bne.n	8013fdc <tcp_output+0x1d0>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d00b      	beq.n	8013fc8 <tcp_output+0x1bc>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d110      	bne.n	8013fdc <tcp_output+0x1d0>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fbe:	891a      	ldrh	r2, [r3, #8]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d209      	bcs.n	8013fdc <tcp_output+0x1d0>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d004      	beq.n	8013fdc <tcp_output+0x1d0>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fd8:	2b08      	cmp	r3, #8
 8013fda:	d901      	bls.n	8013fe0 <tcp_output+0x1d4>
 8013fdc:	2301      	movs	r3, #1
 8013fde:	e000      	b.n	8013fe2 <tcp_output+0x1d6>
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d106      	bne.n	8013ff4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8b5b      	ldrh	r3, [r3, #26]
 8013fea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	f000 80e4 	beq.w	80141bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	7d1b      	ldrb	r3, [r3, #20]
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d00d      	beq.n	8014018 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	899b      	ldrh	r3, [r3, #12]
 8014002:	b29c      	uxth	r4, r3
 8014004:	2010      	movs	r0, #16
 8014006:	f7f9 f8c9 	bl	800d19c <lwip_htons>
 801400a:	4603      	mov	r3, r0
 801400c:	461a      	mov	r2, r3
 801400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	4322      	orrs	r2, r4
 8014014:	b292      	uxth	r2, r2
 8014016:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014018:	697a      	ldr	r2, [r7, #20]
 801401a:	6879      	ldr	r1, [r7, #4]
 801401c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801401e:	f000 f909 	bl	8014234 <tcp_output_segment>
 8014022:	4603      	mov	r3, r0
 8014024:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d016      	beq.n	801405c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	8b5b      	ldrh	r3, [r3, #26]
 8014032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014036:	b29a      	uxth	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	835a      	strh	r2, [r3, #26]
      return err;
 801403c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014040:	e0d3      	b.n	80141ea <tcp_output+0x3de>
 8014042:	bf00      	nop
 8014044:	0801bbb4 	.word	0x0801bbb4
 8014048:	0801c0f8 	.word	0x0801c0f8
 801404c:	0801bc08 	.word	0x0801bc08
 8014050:	0801c110 	.word	0x0801c110
 8014054:	2000d914 	.word	0x2000d914
 8014058:	0801c138 	.word	0x0801c138
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	7d1b      	ldrb	r3, [r3, #20]
 8014068:	2b02      	cmp	r3, #2
 801406a:	d006      	beq.n	801407a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	8b5b      	ldrh	r3, [r3, #26]
 8014070:	f023 0303 	bic.w	r3, r3, #3
 8014074:	b29a      	uxth	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	4618      	mov	r0, r3
 8014082:	f7f9 f8a0 	bl	800d1c6 <lwip_htonl>
 8014086:	4604      	mov	r4, r0
 8014088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408a:	891b      	ldrh	r3, [r3, #8]
 801408c:	461d      	mov	r5, r3
 801408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	899b      	ldrh	r3, [r3, #12]
 8014094:	b29b      	uxth	r3, r3
 8014096:	4618      	mov	r0, r3
 8014098:	f7f9 f880 	bl	800d19c <lwip_htons>
 801409c:	4603      	mov	r3, r0
 801409e:	b2db      	uxtb	r3, r3
 80140a0:	f003 0303 	and.w	r3, r3, #3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d001      	beq.n	80140ac <tcp_output+0x2a0>
 80140a8:	2301      	movs	r3, #1
 80140aa:	e000      	b.n	80140ae <tcp_output+0x2a2>
 80140ac:	2300      	movs	r3, #0
 80140ae:	442b      	add	r3, r5
 80140b0:	4423      	add	r3, r4
 80140b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	1ad3      	subs	r3, r2, r3
 80140bc:	2b00      	cmp	r3, #0
 80140be:	da02      	bge.n	80140c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	68ba      	ldr	r2, [r7, #8]
 80140c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80140c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c8:	891b      	ldrh	r3, [r3, #8]
 80140ca:	461c      	mov	r4, r3
 80140cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	899b      	ldrh	r3, [r3, #12]
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7f9 f861 	bl	800d19c <lwip_htons>
 80140da:	4603      	mov	r3, r0
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	f003 0303 	and.w	r3, r3, #3
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d001      	beq.n	80140ea <tcp_output+0x2de>
 80140e6:	2301      	movs	r3, #1
 80140e8:	e000      	b.n	80140ec <tcp_output+0x2e0>
 80140ea:	2300      	movs	r3, #0
 80140ec:	4423      	add	r3, r4
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d049      	beq.n	8014186 <tcp_output+0x37a>
      seg->next = NULL;
 80140f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f4:	2200      	movs	r2, #0
 80140f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d105      	bne.n	801410c <tcp_output+0x300>
        pcb->unacked = seg;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014104:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014108:	623b      	str	r3, [r7, #32]
 801410a:	e03f      	b.n	801418c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410e:	68db      	ldr	r3, [r3, #12]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	4618      	mov	r0, r3
 8014114:	f7f9 f857 	bl	800d1c6 <lwip_htonl>
 8014118:	4604      	mov	r4, r0
 801411a:	6a3b      	ldr	r3, [r7, #32]
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	4618      	mov	r0, r3
 8014122:	f7f9 f850 	bl	800d1c6 <lwip_htonl>
 8014126:	4603      	mov	r3, r0
 8014128:	1ae3      	subs	r3, r4, r3
 801412a:	2b00      	cmp	r3, #0
 801412c:	da24      	bge.n	8014178 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	3370      	adds	r3, #112	; 0x70
 8014132:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014134:	e002      	b.n	801413c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014136:	69fb      	ldr	r3, [r7, #28]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d011      	beq.n	8014168 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	68db      	ldr	r3, [r3, #12]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	4618      	mov	r0, r3
 801414e:	f7f9 f83a 	bl	800d1c6 <lwip_htonl>
 8014152:	4604      	mov	r4, r0
 8014154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014156:	68db      	ldr	r3, [r3, #12]
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	4618      	mov	r0, r3
 801415c:	f7f9 f833 	bl	800d1c6 <lwip_htonl>
 8014160:	4603      	mov	r3, r0
 8014162:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014164:	2b00      	cmp	r3, #0
 8014166:	dbe6      	blt.n	8014136 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014174:	601a      	str	r2, [r3, #0]
 8014176:	e009      	b.n	801418c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014178:	6a3b      	ldr	r3, [r7, #32]
 801417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801417c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801417e:	6a3b      	ldr	r3, [r7, #32]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	623b      	str	r3, [r7, #32]
 8014184:	e002      	b.n	801418c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014188:	f7fb ff19 	bl	800ffbe <tcp_seg_free>
    }
    seg = pcb->unsent;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014190:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014194:	2b00      	cmp	r3, #0
 8014196:	d012      	beq.n	80141be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7f9 f811 	bl	800d1c6 <lwip_htonl>
 80141a4:	4602      	mov	r2, r0
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141aa:	1ad3      	subs	r3, r2, r3
 80141ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ae:	8912      	ldrh	r2, [r2, #8]
 80141b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80141b2:	69ba      	ldr	r2, [r7, #24]
 80141b4:	429a      	cmp	r2, r3
 80141b6:	f4bf aed9 	bcs.w	8013f6c <tcp_output+0x160>
 80141ba:	e000      	b.n	80141be <tcp_output+0x3b2>
      break;
 80141bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d108      	bne.n	80141d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2200      	movs	r2, #0
 80141ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80141ce:	e004      	b.n	80141da <tcp_output+0x3ce>
    goto output_done;
 80141d0:	bf00      	nop
 80141d2:	e002      	b.n	80141da <tcp_output+0x3ce>
    goto output_done;
 80141d4:	bf00      	nop
 80141d6:	e000      	b.n	80141da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80141d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	8b5b      	ldrh	r3, [r3, #26]
 80141de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141e2:	b29a      	uxth	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3728      	adds	r7, #40	; 0x28
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bdb0      	pop	{r4, r5, r7, pc}
 80141f2:	bf00      	nop

080141f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d106      	bne.n	8014210 <tcp_output_segment_busy+0x1c>
 8014202:	4b09      	ldr	r3, [pc, #36]	; (8014228 <tcp_output_segment_busy+0x34>)
 8014204:	f240 529a 	movw	r2, #1434	; 0x59a
 8014208:	4908      	ldr	r1, [pc, #32]	; (801422c <tcp_output_segment_busy+0x38>)
 801420a:	4809      	ldr	r0, [pc, #36]	; (8014230 <tcp_output_segment_busy+0x3c>)
 801420c:	f004 fac2 	bl	8018794 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	7b9b      	ldrb	r3, [r3, #14]
 8014216:	2b01      	cmp	r3, #1
 8014218:	d001      	beq.n	801421e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801421a:	2301      	movs	r3, #1
 801421c:	e000      	b.n	8014220 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801421e:	2300      	movs	r3, #0
}
 8014220:	4618      	mov	r0, r3
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	0801bbb4 	.word	0x0801bbb4
 801422c:	0801c150 	.word	0x0801c150
 8014230:	0801bc08 	.word	0x0801bc08

08014234 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014234:	b5b0      	push	{r4, r5, r7, lr}
 8014236:	b08c      	sub	sp, #48	; 0x30
 8014238:	af04      	add	r7, sp, #16
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d106      	bne.n	8014254 <tcp_output_segment+0x20>
 8014246:	4b63      	ldr	r3, [pc, #396]	; (80143d4 <tcp_output_segment+0x1a0>)
 8014248:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801424c:	4962      	ldr	r1, [pc, #392]	; (80143d8 <tcp_output_segment+0x1a4>)
 801424e:	4863      	ldr	r0, [pc, #396]	; (80143dc <tcp_output_segment+0x1a8>)
 8014250:	f004 faa0 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d106      	bne.n	8014268 <tcp_output_segment+0x34>
 801425a:	4b5e      	ldr	r3, [pc, #376]	; (80143d4 <tcp_output_segment+0x1a0>)
 801425c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014260:	495f      	ldr	r1, [pc, #380]	; (80143e0 <tcp_output_segment+0x1ac>)
 8014262:	485e      	ldr	r0, [pc, #376]	; (80143dc <tcp_output_segment+0x1a8>)
 8014264:	f004 fa96 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d106      	bne.n	801427c <tcp_output_segment+0x48>
 801426e:	4b59      	ldr	r3, [pc, #356]	; (80143d4 <tcp_output_segment+0x1a0>)
 8014270:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014274:	495b      	ldr	r1, [pc, #364]	; (80143e4 <tcp_output_segment+0x1b0>)
 8014276:	4859      	ldr	r0, [pc, #356]	; (80143dc <tcp_output_segment+0x1a8>)
 8014278:	f004 fa8c 	bl	8018794 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801427c:	68f8      	ldr	r0, [r7, #12]
 801427e:	f7ff ffb9 	bl	80141f4 <tcp_output_segment_busy>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014288:	2300      	movs	r3, #0
 801428a:	e09f      	b.n	80143cc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	68dc      	ldr	r4, [r3, #12]
 8014294:	4610      	mov	r0, r2
 8014296:	f7f8 ff96 	bl	800d1c6 <lwip_htonl>
 801429a:	4603      	mov	r3, r0
 801429c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	68dc      	ldr	r4, [r3, #12]
 80142a6:	4610      	mov	r0, r2
 80142a8:	f7f8 ff78 	bl	800d19c <lwip_htons>
 80142ac:	4603      	mov	r3, r0
 80142ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b4:	68ba      	ldr	r2, [r7, #8]
 80142b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80142b8:	441a      	add	r2, r3
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	3314      	adds	r3, #20
 80142c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	7a9b      	ldrb	r3, [r3, #10]
 80142ca:	f003 0301 	and.w	r3, r3, #1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d015      	beq.n	80142fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	3304      	adds	r3, #4
 80142d6:	461a      	mov	r2, r3
 80142d8:	6879      	ldr	r1, [r7, #4]
 80142da:	f44f 7006 	mov.w	r0, #536	; 0x218
 80142de:	f7fc fa33 	bl	8010748 <tcp_eff_send_mss_netif>
 80142e2:	4603      	mov	r3, r0
 80142e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80142e6:	8b7b      	ldrh	r3, [r7, #26]
 80142e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7f8 ff6a 	bl	800d1c6 <lwip_htonl>
 80142f2:	4602      	mov	r2, r0
 80142f4:	69fb      	ldr	r3, [r7, #28]
 80142f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	3304      	adds	r3, #4
 80142fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014304:	2b00      	cmp	r3, #0
 8014306:	da02      	bge.n	801430e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	2200      	movs	r2, #0
 801430c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10c      	bne.n	8014330 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014316:	4b34      	ldr	r3, [pc, #208]	; (80143e8 <tcp_output_segment+0x1b4>)
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	4618      	mov	r0, r3
 8014326:	f7f8 ff4e 	bl	800d1c6 <lwip_htonl>
 801432a:	4602      	mov	r2, r0
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	68da      	ldr	r2, [r3, #12]
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	8959      	ldrh	r1, [r3, #10]
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	8b3a      	ldrh	r2, [r7, #24]
 801434a:	1a8a      	subs	r2, r1, r2
 801434c:	b292      	uxth	r2, r2
 801434e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	685b      	ldr	r3, [r3, #4]
 8014354:	8919      	ldrh	r1, [r3, #8]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	8b3a      	ldrh	r2, [r7, #24]
 801435c:	1a8a      	subs	r2, r1, r2
 801435e:	b292      	uxth	r2, r2
 8014360:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	68d2      	ldr	r2, [r2, #12]
 801436a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	2200      	movs	r2, #0
 8014372:	741a      	strb	r2, [r3, #16]
 8014374:	2200      	movs	r2, #0
 8014376:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	f103 0214 	add.w	r2, r3, #20
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	7a9b      	ldrb	r3, [r3, #10]
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	f003 0304 	and.w	r3, r3, #4
 801438a:	4413      	add	r3, r2
 801438c:	69fa      	ldr	r2, [r7, #28]
 801438e:	429a      	cmp	r2, r3
 8014390:	d006      	beq.n	80143a0 <tcp_output_segment+0x16c>
 8014392:	4b10      	ldr	r3, [pc, #64]	; (80143d4 <tcp_output_segment+0x1a0>)
 8014394:	f240 621c 	movw	r2, #1564	; 0x61c
 8014398:	4914      	ldr	r1, [pc, #80]	; (80143ec <tcp_output_segment+0x1b8>)
 801439a:	4810      	ldr	r0, [pc, #64]	; (80143dc <tcp_output_segment+0x1a8>)
 801439c:	f004 f9fa 	bl	8018794 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	6858      	ldr	r0, [r3, #4]
 80143a4:	68b9      	ldr	r1, [r7, #8]
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	1d1c      	adds	r4, r3, #4
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	7add      	ldrb	r5, [r3, #11]
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	7a9b      	ldrb	r3, [r3, #10]
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	9202      	str	r2, [sp, #8]
 80143b6:	2206      	movs	r2, #6
 80143b8:	9201      	str	r2, [sp, #4]
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	462b      	mov	r3, r5
 80143be:	4622      	mov	r2, r4
 80143c0:	f002 fd96 	bl	8016ef0 <ip4_output_if>
 80143c4:	4603      	mov	r3, r0
 80143c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80143c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3720      	adds	r7, #32
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bdb0      	pop	{r4, r5, r7, pc}
 80143d4:	0801bbb4 	.word	0x0801bbb4
 80143d8:	0801c178 	.word	0x0801c178
 80143dc:	0801bc08 	.word	0x0801bc08
 80143e0:	0801c198 	.word	0x0801c198
 80143e4:	0801c1b8 	.word	0x0801c1b8
 80143e8:	2000d8c8 	.word	0x2000d8c8
 80143ec:	0801c1dc 	.word	0x0801c1dc

080143f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80143f0:	b5b0      	push	{r4, r5, r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <tcp_rexmit_rto_prepare+0x1c>
 80143fe:	4b31      	ldr	r3, [pc, #196]	; (80144c4 <tcp_rexmit_rto_prepare+0xd4>)
 8014400:	f240 6263 	movw	r2, #1635	; 0x663
 8014404:	4930      	ldr	r1, [pc, #192]	; (80144c8 <tcp_rexmit_rto_prepare+0xd8>)
 8014406:	4831      	ldr	r0, [pc, #196]	; (80144cc <tcp_rexmit_rto_prepare+0xdc>)
 8014408:	f004 f9c4 	bl	8018794 <iprintf>

  if (pcb->unacked == NULL) {
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014410:	2b00      	cmp	r3, #0
 8014412:	d102      	bne.n	801441a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014414:	f06f 0305 	mvn.w	r3, #5
 8014418:	e050      	b.n	80144bc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801441e:	60fb      	str	r3, [r7, #12]
 8014420:	e00b      	b.n	801443a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014422:	68f8      	ldr	r0, [r7, #12]
 8014424:	f7ff fee6 	bl	80141f4 <tcp_output_segment_busy>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801442e:	f06f 0305 	mvn.w	r3, #5
 8014432:	e043      	b.n	80144bc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	60fb      	str	r3, [r7, #12]
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d1ef      	bne.n	8014422 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014442:	68f8      	ldr	r0, [r7, #12]
 8014444:	f7ff fed6 	bl	80141f4 <tcp_output_segment_busy>
 8014448:	4603      	mov	r3, r0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d002      	beq.n	8014454 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801444e:	f06f 0305 	mvn.w	r3, #5
 8014452:	e033      	b.n	80144bc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2200      	movs	r2, #0
 8014468:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	8b5b      	ldrh	r3, [r3, #26]
 801446e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014472:	b29a      	uxth	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	68db      	ldr	r3, [r3, #12]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	4618      	mov	r0, r3
 8014480:	f7f8 fea1 	bl	800d1c6 <lwip_htonl>
 8014484:	4604      	mov	r4, r0
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	891b      	ldrh	r3, [r3, #8]
 801448a:	461d      	mov	r5, r3
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	899b      	ldrh	r3, [r3, #12]
 8014492:	b29b      	uxth	r3, r3
 8014494:	4618      	mov	r0, r3
 8014496:	f7f8 fe81 	bl	800d19c <lwip_htons>
 801449a:	4603      	mov	r3, r0
 801449c:	b2db      	uxtb	r3, r3
 801449e:	f003 0303 	and.w	r3, r3, #3
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d001      	beq.n	80144aa <tcp_rexmit_rto_prepare+0xba>
 80144a6:	2301      	movs	r3, #1
 80144a8:	e000      	b.n	80144ac <tcp_rexmit_rto_prepare+0xbc>
 80144aa:	2300      	movs	r3, #0
 80144ac:	442b      	add	r3, r5
 80144ae:	18e2      	adds	r2, r4, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2200      	movs	r2, #0
 80144b8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80144ba:	2300      	movs	r3, #0
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3710      	adds	r7, #16
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bdb0      	pop	{r4, r5, r7, pc}
 80144c4:	0801bbb4 	.word	0x0801bbb4
 80144c8:	0801c1f0 	.word	0x0801c1f0
 80144cc:	0801bc08 	.word	0x0801bc08

080144d0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d106      	bne.n	80144ec <tcp_rexmit_rto_commit+0x1c>
 80144de:	4b0d      	ldr	r3, [pc, #52]	; (8014514 <tcp_rexmit_rto_commit+0x44>)
 80144e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80144e4:	490c      	ldr	r1, [pc, #48]	; (8014518 <tcp_rexmit_rto_commit+0x48>)
 80144e6:	480d      	ldr	r0, [pc, #52]	; (801451c <tcp_rexmit_rto_commit+0x4c>)
 80144e8:	f004 f954 	bl	8018794 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144f2:	2bff      	cmp	r3, #255	; 0xff
 80144f4:	d007      	beq.n	8014506 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144fc:	3301      	adds	r3, #1
 80144fe:	b2da      	uxtb	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f7ff fc80 	bl	8013e0c <tcp_output>
}
 801450c:	bf00      	nop
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	0801bbb4 	.word	0x0801bbb4
 8014518:	0801c214 	.word	0x0801c214
 801451c:	0801bc08 	.word	0x0801bc08

08014520 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d106      	bne.n	801453c <tcp_rexmit_rto+0x1c>
 801452e:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <tcp_rexmit_rto+0x38>)
 8014530:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014534:	4909      	ldr	r1, [pc, #36]	; (801455c <tcp_rexmit_rto+0x3c>)
 8014536:	480a      	ldr	r0, [pc, #40]	; (8014560 <tcp_rexmit_rto+0x40>)
 8014538:	f004 f92c 	bl	8018794 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7ff ff57 	bl	80143f0 <tcp_rexmit_rto_prepare>
 8014542:	4603      	mov	r3, r0
 8014544:	2b00      	cmp	r3, #0
 8014546:	d102      	bne.n	801454e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f7ff ffc1 	bl	80144d0 <tcp_rexmit_rto_commit>
  }
}
 801454e:	bf00      	nop
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	0801bbb4 	.word	0x0801bbb4
 801455c:	0801c238 	.word	0x0801c238
 8014560:	0801bc08 	.word	0x0801bc08

08014564 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014564:	b590      	push	{r4, r7, lr}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d106      	bne.n	8014580 <tcp_rexmit+0x1c>
 8014572:	4b2f      	ldr	r3, [pc, #188]	; (8014630 <tcp_rexmit+0xcc>)
 8014574:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014578:	492e      	ldr	r1, [pc, #184]	; (8014634 <tcp_rexmit+0xd0>)
 801457a:	482f      	ldr	r0, [pc, #188]	; (8014638 <tcp_rexmit+0xd4>)
 801457c:	f004 f90a 	bl	8018794 <iprintf>

  if (pcb->unacked == NULL) {
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014584:	2b00      	cmp	r3, #0
 8014586:	d102      	bne.n	801458e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014588:	f06f 0305 	mvn.w	r3, #5
 801458c:	e04c      	b.n	8014628 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014592:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014594:	68b8      	ldr	r0, [r7, #8]
 8014596:	f7ff fe2d 	bl	80141f4 <tcp_output_segment_busy>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d002      	beq.n	80145a6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80145a0:	f06f 0305 	mvn.w	r3, #5
 80145a4:	e040      	b.n	8014628 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	336c      	adds	r3, #108	; 0x6c
 80145b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80145b4:	e002      	b.n	80145bc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d011      	beq.n	80145e8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	68db      	ldr	r3, [r3, #12]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7f8 fdfa 	bl	800d1c6 <lwip_htonl>
 80145d2:	4604      	mov	r4, r0
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	4618      	mov	r0, r3
 80145dc:	f7f8 fdf3 	bl	800d1c6 <lwip_htonl>
 80145e0:	4603      	mov	r3, r0
 80145e2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	dbe6      	blt.n	80145b6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	68ba      	ldr	r2, [r7, #8]
 80145f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d103      	bne.n	8014606 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801460c:	2bff      	cmp	r3, #255	; 0xff
 801460e:	d007      	beq.n	8014620 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014616:	3301      	adds	r3, #1
 8014618:	b2da      	uxtb	r2, r3
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014626:	2300      	movs	r3, #0
}
 8014628:	4618      	mov	r0, r3
 801462a:	3714      	adds	r7, #20
 801462c:	46bd      	mov	sp, r7
 801462e:	bd90      	pop	{r4, r7, pc}
 8014630:	0801bbb4 	.word	0x0801bbb4
 8014634:	0801c254 	.word	0x0801c254
 8014638:	0801bc08 	.word	0x0801bc08

0801463c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d106      	bne.n	8014658 <tcp_rexmit_fast+0x1c>
 801464a:	4b2a      	ldr	r3, [pc, #168]	; (80146f4 <tcp_rexmit_fast+0xb8>)
 801464c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014650:	4929      	ldr	r1, [pc, #164]	; (80146f8 <tcp_rexmit_fast+0xbc>)
 8014652:	482a      	ldr	r0, [pc, #168]	; (80146fc <tcp_rexmit_fast+0xc0>)
 8014654:	f004 f89e 	bl	8018794 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801465c:	2b00      	cmp	r3, #0
 801465e:	d044      	beq.n	80146ea <tcp_rexmit_fast+0xae>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	8b5b      	ldrh	r3, [r3, #26]
 8014664:	f003 0304 	and.w	r3, r3, #4
 8014668:	2b00      	cmp	r3, #0
 801466a:	d13e      	bne.n	80146ea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7ff ff79 	bl	8014564 <tcp_rexmit>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d138      	bne.n	80146ea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014684:	4293      	cmp	r3, r2
 8014686:	bf28      	it	cs
 8014688:	4613      	movcs	r3, r2
 801468a:	b29b      	uxth	r3, r3
 801468c:	0fda      	lsrs	r2, r3, #31
 801468e:	4413      	add	r3, r2
 8014690:	105b      	asrs	r3, r3, #1
 8014692:	b29a      	uxth	r2, r3
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80146a0:	461a      	mov	r2, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a6:	005b      	lsls	r3, r3, #1
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d206      	bcs.n	80146ba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146b0:	005b      	lsls	r3, r3, #1
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146c4:	4619      	mov	r1, r3
 80146c6:	0049      	lsls	r1, r1, #1
 80146c8:	440b      	add	r3, r1
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	4413      	add	r3, r2
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	8b5b      	ldrh	r3, [r3, #26]
 80146da:	f043 0304 	orr.w	r3, r3, #4
 80146de:	b29a      	uxth	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2200      	movs	r2, #0
 80146e8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80146ea:	bf00      	nop
 80146ec:	3708      	adds	r7, #8
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	0801bbb4 	.word	0x0801bbb4
 80146f8:	0801c26c 	.word	0x0801c26c
 80146fc:	0801bc08 	.word	0x0801bc08

08014700 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	607b      	str	r3, [r7, #4]
 801470a:	460b      	mov	r3, r1
 801470c:	817b      	strh	r3, [r7, #10]
 801470e:	4613      	mov	r3, r2
 8014710:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014712:	897a      	ldrh	r2, [r7, #10]
 8014714:	893b      	ldrh	r3, [r7, #8]
 8014716:	4413      	add	r3, r2
 8014718:	b29b      	uxth	r3, r3
 801471a:	3314      	adds	r3, #20
 801471c:	b29b      	uxth	r3, r3
 801471e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014722:	4619      	mov	r1, r3
 8014724:	2022      	movs	r0, #34	; 0x22
 8014726:	f7f9 fd9d 	bl	800e264 <pbuf_alloc>
 801472a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d04d      	beq.n	80147ce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014732:	897b      	ldrh	r3, [r7, #10]
 8014734:	3313      	adds	r3, #19
 8014736:	697a      	ldr	r2, [r7, #20]
 8014738:	8952      	ldrh	r2, [r2, #10]
 801473a:	4293      	cmp	r3, r2
 801473c:	db06      	blt.n	801474c <tcp_output_alloc_header_common+0x4c>
 801473e:	4b26      	ldr	r3, [pc, #152]	; (80147d8 <tcp_output_alloc_header_common+0xd8>)
 8014740:	f240 7223 	movw	r2, #1827	; 0x723
 8014744:	4925      	ldr	r1, [pc, #148]	; (80147dc <tcp_output_alloc_header_common+0xdc>)
 8014746:	4826      	ldr	r0, [pc, #152]	; (80147e0 <tcp_output_alloc_header_common+0xe0>)
 8014748:	f004 f824 	bl	8018794 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014752:	8c3b      	ldrh	r3, [r7, #32]
 8014754:	4618      	mov	r0, r3
 8014756:	f7f8 fd21 	bl	800d19c <lwip_htons>
 801475a:	4603      	mov	r3, r0
 801475c:	461a      	mov	r2, r3
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014764:	4618      	mov	r0, r3
 8014766:	f7f8 fd19 	bl	800d19c <lwip_htons>
 801476a:	4603      	mov	r3, r0
 801476c:	461a      	mov	r2, r3
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014778:	68f8      	ldr	r0, [r7, #12]
 801477a:	f7f8 fd24 	bl	800d1c6 <lwip_htonl>
 801477e:	4602      	mov	r2, r0
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014784:	897b      	ldrh	r3, [r7, #10]
 8014786:	089b      	lsrs	r3, r3, #2
 8014788:	b29b      	uxth	r3, r3
 801478a:	3305      	adds	r3, #5
 801478c:	b29b      	uxth	r3, r3
 801478e:	031b      	lsls	r3, r3, #12
 8014790:	b29a      	uxth	r2, r3
 8014792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014796:	b29b      	uxth	r3, r3
 8014798:	4313      	orrs	r3, r2
 801479a:	b29b      	uxth	r3, r3
 801479c:	4618      	mov	r0, r3
 801479e:	f7f8 fcfd 	bl	800d19c <lwip_htons>
 80147a2:	4603      	mov	r3, r0
 80147a4:	461a      	mov	r2, r3
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80147aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f8 fcf5 	bl	800d19c <lwip_htons>
 80147b2:	4603      	mov	r3, r0
 80147b4:	461a      	mov	r2, r3
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	2200      	movs	r2, #0
 80147be:	741a      	strb	r2, [r3, #16]
 80147c0:	2200      	movs	r2, #0
 80147c2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	2200      	movs	r2, #0
 80147c8:	749a      	strb	r2, [r3, #18]
 80147ca:	2200      	movs	r2, #0
 80147cc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80147ce:	697b      	ldr	r3, [r7, #20]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3718      	adds	r7, #24
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	0801bbb4 	.word	0x0801bbb4
 80147dc:	0801c28c 	.word	0x0801c28c
 80147e0:	0801bc08 	.word	0x0801bc08

080147e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80147e4:	b5b0      	push	{r4, r5, r7, lr}
 80147e6:	b08a      	sub	sp, #40	; 0x28
 80147e8:	af04      	add	r7, sp, #16
 80147ea:	60f8      	str	r0, [r7, #12]
 80147ec:	607b      	str	r3, [r7, #4]
 80147ee:	460b      	mov	r3, r1
 80147f0:	817b      	strh	r3, [r7, #10]
 80147f2:	4613      	mov	r3, r2
 80147f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d106      	bne.n	801480a <tcp_output_alloc_header+0x26>
 80147fc:	4b15      	ldr	r3, [pc, #84]	; (8014854 <tcp_output_alloc_header+0x70>)
 80147fe:	f240 7242 	movw	r2, #1858	; 0x742
 8014802:	4915      	ldr	r1, [pc, #84]	; (8014858 <tcp_output_alloc_header+0x74>)
 8014804:	4815      	ldr	r0, [pc, #84]	; (801485c <tcp_output_alloc_header+0x78>)
 8014806:	f003 ffc5 	bl	8018794 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	8adb      	ldrh	r3, [r3, #22]
 8014812:	68fa      	ldr	r2, [r7, #12]
 8014814:	8b12      	ldrh	r2, [r2, #24]
 8014816:	68f9      	ldr	r1, [r7, #12]
 8014818:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801481a:	893d      	ldrh	r5, [r7, #8]
 801481c:	897c      	ldrh	r4, [r7, #10]
 801481e:	9103      	str	r1, [sp, #12]
 8014820:	2110      	movs	r1, #16
 8014822:	9102      	str	r1, [sp, #8]
 8014824:	9201      	str	r2, [sp, #4]
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	462a      	mov	r2, r5
 801482c:	4621      	mov	r1, r4
 801482e:	f7ff ff67 	bl	8014700 <tcp_output_alloc_header_common>
 8014832:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d006      	beq.n	8014848 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014842:	441a      	add	r2, r3
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014848:	697b      	ldr	r3, [r7, #20]
}
 801484a:	4618      	mov	r0, r3
 801484c:	3718      	adds	r7, #24
 801484e:	46bd      	mov	sp, r7
 8014850:	bdb0      	pop	{r4, r5, r7, pc}
 8014852:	bf00      	nop
 8014854:	0801bbb4 	.word	0x0801bbb4
 8014858:	0801c2bc 	.word	0x0801c2bc
 801485c:	0801bc08 	.word	0x0801bc08

08014860 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b088      	sub	sp, #32
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	4611      	mov	r1, r2
 801486c:	461a      	mov	r2, r3
 801486e:	460b      	mov	r3, r1
 8014870:	71fb      	strb	r3, [r7, #7]
 8014872:	4613      	mov	r3, r2
 8014874:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014876:	2300      	movs	r3, #0
 8014878:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d106      	bne.n	801488e <tcp_output_fill_options+0x2e>
 8014880:	4b13      	ldr	r3, [pc, #76]	; (80148d0 <tcp_output_fill_options+0x70>)
 8014882:	f240 7256 	movw	r2, #1878	; 0x756
 8014886:	4913      	ldr	r1, [pc, #76]	; (80148d4 <tcp_output_fill_options+0x74>)
 8014888:	4813      	ldr	r0, [pc, #76]	; (80148d8 <tcp_output_fill_options+0x78>)
 801488a:	f003 ff83 	bl	8018794 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014894:	69bb      	ldr	r3, [r7, #24]
 8014896:	3314      	adds	r3, #20
 8014898:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	f103 0214 	add.w	r2, r3, #20
 80148a0:	8bfb      	ldrh	r3, [r7, #30]
 80148a2:	009b      	lsls	r3, r3, #2
 80148a4:	4619      	mov	r1, r3
 80148a6:	79fb      	ldrb	r3, [r7, #7]
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	f003 0304 	and.w	r3, r3, #4
 80148ae:	440b      	add	r3, r1
 80148b0:	4413      	add	r3, r2
 80148b2:	697a      	ldr	r2, [r7, #20]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d006      	beq.n	80148c6 <tcp_output_fill_options+0x66>
 80148b8:	4b05      	ldr	r3, [pc, #20]	; (80148d0 <tcp_output_fill_options+0x70>)
 80148ba:	f240 7275 	movw	r2, #1909	; 0x775
 80148be:	4907      	ldr	r1, [pc, #28]	; (80148dc <tcp_output_fill_options+0x7c>)
 80148c0:	4805      	ldr	r0, [pc, #20]	; (80148d8 <tcp_output_fill_options+0x78>)
 80148c2:	f003 ff67 	bl	8018794 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80148c6:	bf00      	nop
 80148c8:	3720      	adds	r7, #32
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	0801bbb4 	.word	0x0801bbb4
 80148d4:	0801c2e4 	.word	0x0801c2e4
 80148d8:	0801bc08 	.word	0x0801bc08
 80148dc:	0801c1dc 	.word	0x0801c1dc

080148e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b08a      	sub	sp, #40	; 0x28
 80148e4:	af04      	add	r7, sp, #16
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	607a      	str	r2, [r7, #4]
 80148ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d106      	bne.n	8014902 <tcp_output_control_segment+0x22>
 80148f4:	4b1c      	ldr	r3, [pc, #112]	; (8014968 <tcp_output_control_segment+0x88>)
 80148f6:	f240 7287 	movw	r2, #1927	; 0x787
 80148fa:	491c      	ldr	r1, [pc, #112]	; (801496c <tcp_output_control_segment+0x8c>)
 80148fc:	481c      	ldr	r0, [pc, #112]	; (8014970 <tcp_output_control_segment+0x90>)
 80148fe:	f003 ff49 	bl	8018794 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014902:	683a      	ldr	r2, [r7, #0]
 8014904:	6879      	ldr	r1, [r7, #4]
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	f7fe fae8 	bl	8012edc <tcp_route>
 801490c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d102      	bne.n	801491a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014914:	23fc      	movs	r3, #252	; 0xfc
 8014916:	75fb      	strb	r3, [r7, #23]
 8014918:	e01c      	b.n	8014954 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d006      	beq.n	801492e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	7adb      	ldrb	r3, [r3, #11]
 8014924:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	7a9b      	ldrb	r3, [r3, #10]
 801492a:	757b      	strb	r3, [r7, #21]
 801492c:	e003      	b.n	8014936 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801492e:	23ff      	movs	r3, #255	; 0xff
 8014930:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014932:	2300      	movs	r3, #0
 8014934:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014936:	7dba      	ldrb	r2, [r7, #22]
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	9302      	str	r3, [sp, #8]
 801493c:	2306      	movs	r3, #6
 801493e:	9301      	str	r3, [sp, #4]
 8014940:	7d7b      	ldrb	r3, [r7, #21]
 8014942:	9300      	str	r3, [sp, #0]
 8014944:	4613      	mov	r3, r2
 8014946:	683a      	ldr	r2, [r7, #0]
 8014948:	6879      	ldr	r1, [r7, #4]
 801494a:	68b8      	ldr	r0, [r7, #8]
 801494c:	f002 fad0 	bl	8016ef0 <ip4_output_if>
 8014950:	4603      	mov	r3, r0
 8014952:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014954:	68b8      	ldr	r0, [r7, #8]
 8014956:	f7f9 ff69 	bl	800e82c <pbuf_free>
  return err;
 801495a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801495e:	4618      	mov	r0, r3
 8014960:	3718      	adds	r7, #24
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	0801bbb4 	.word	0x0801bbb4
 801496c:	0801c30c 	.word	0x0801c30c
 8014970:	0801bc08 	.word	0x0801bc08

08014974 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014974:	b590      	push	{r4, r7, lr}
 8014976:	b08b      	sub	sp, #44	; 0x2c
 8014978:	af04      	add	r7, sp, #16
 801497a:	60f8      	str	r0, [r7, #12]
 801497c:	60b9      	str	r1, [r7, #8]
 801497e:	607a      	str	r2, [r7, #4]
 8014980:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d106      	bne.n	8014996 <tcp_rst+0x22>
 8014988:	4b1f      	ldr	r3, [pc, #124]	; (8014a08 <tcp_rst+0x94>)
 801498a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801498e:	491f      	ldr	r1, [pc, #124]	; (8014a0c <tcp_rst+0x98>)
 8014990:	481f      	ldr	r0, [pc, #124]	; (8014a10 <tcp_rst+0x9c>)
 8014992:	f003 feff 	bl	8018794 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014998:	2b00      	cmp	r3, #0
 801499a:	d106      	bne.n	80149aa <tcp_rst+0x36>
 801499c:	4b1a      	ldr	r3, [pc, #104]	; (8014a08 <tcp_rst+0x94>)
 801499e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80149a2:	491c      	ldr	r1, [pc, #112]	; (8014a14 <tcp_rst+0xa0>)
 80149a4:	481a      	ldr	r0, [pc, #104]	; (8014a10 <tcp_rst+0x9c>)
 80149a6:	f003 fef5 	bl	8018794 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149aa:	2300      	movs	r3, #0
 80149ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80149ae:	f246 0308 	movw	r3, #24584	; 0x6008
 80149b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	b29c      	uxth	r4, r3
 80149b8:	68b8      	ldr	r0, [r7, #8]
 80149ba:	f7f8 fc04 	bl	800d1c6 <lwip_htonl>
 80149be:	4602      	mov	r2, r0
 80149c0:	8abb      	ldrh	r3, [r7, #20]
 80149c2:	9303      	str	r3, [sp, #12]
 80149c4:	2314      	movs	r3, #20
 80149c6:	9302      	str	r3, [sp, #8]
 80149c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80149ca:	9301      	str	r3, [sp, #4]
 80149cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149ce:	9300      	str	r3, [sp, #0]
 80149d0:	4613      	mov	r3, r2
 80149d2:	2200      	movs	r2, #0
 80149d4:	4621      	mov	r1, r4
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7ff fe92 	bl	8014700 <tcp_output_alloc_header_common>
 80149dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d00c      	beq.n	80149fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149e4:	7dfb      	ldrb	r3, [r7, #23]
 80149e6:	2200      	movs	r2, #0
 80149e8:	6939      	ldr	r1, [r7, #16]
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f7ff ff38 	bl	8014860 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80149f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f2:	683a      	ldr	r2, [r7, #0]
 80149f4:	6939      	ldr	r1, [r7, #16]
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f7ff ff72 	bl	80148e0 <tcp_output_control_segment>
 80149fc:	e000      	b.n	8014a00 <tcp_rst+0x8c>
    return;
 80149fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014a00:	371c      	adds	r7, #28
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd90      	pop	{r4, r7, pc}
 8014a06:	bf00      	nop
 8014a08:	0801bbb4 	.word	0x0801bbb4
 8014a0c:	0801c338 	.word	0x0801c338
 8014a10:	0801bc08 	.word	0x0801bc08
 8014a14:	0801c354 	.word	0x0801c354

08014a18 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014a18:	b590      	push	{r4, r7, lr}
 8014a1a:	b087      	sub	sp, #28
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014a20:	2300      	movs	r3, #0
 8014a22:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d106      	bne.n	8014a3c <tcp_send_empty_ack+0x24>
 8014a2e:	4b28      	ldr	r3, [pc, #160]	; (8014ad0 <tcp_send_empty_ack+0xb8>)
 8014a30:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014a34:	4927      	ldr	r1, [pc, #156]	; (8014ad4 <tcp_send_empty_ack+0xbc>)
 8014a36:	4828      	ldr	r0, [pc, #160]	; (8014ad8 <tcp_send_empty_ack+0xc0>)
 8014a38:	f003 feac 	bl	8018794 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a3c:	7dfb      	ldrb	r3, [r7, #23]
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	f003 0304 	and.w	r3, r3, #4
 8014a46:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014a48:	7d7b      	ldrb	r3, [r7, #21]
 8014a4a:	b29c      	uxth	r4, r3
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7f8 fbb8 	bl	800d1c6 <lwip_htonl>
 8014a56:	4603      	mov	r3, r0
 8014a58:	2200      	movs	r2, #0
 8014a5a:	4621      	mov	r1, r4
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f7ff fec1 	bl	80147e4 <tcp_output_alloc_header>
 8014a62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d109      	bne.n	8014a7e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	8b5b      	ldrh	r3, [r3, #26]
 8014a6e:	f043 0303 	orr.w	r3, r3, #3
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014a78:	f06f 0301 	mvn.w	r3, #1
 8014a7c:	e023      	b.n	8014ac6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014a7e:	7dbb      	ldrb	r3, [r7, #22]
 8014a80:	7dfa      	ldrb	r2, [r7, #23]
 8014a82:	6939      	ldr	r1, [r7, #16]
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f7ff feeb 	bl	8014860 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	3304      	adds	r3, #4
 8014a90:	6939      	ldr	r1, [r7, #16]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7ff ff24 	bl	80148e0 <tcp_output_control_segment>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d007      	beq.n	8014ab4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	8b5b      	ldrh	r3, [r3, #26]
 8014aa8:	f043 0303 	orr.w	r3, r3, #3
 8014aac:	b29a      	uxth	r2, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	835a      	strh	r2, [r3, #26]
 8014ab2:	e006      	b.n	8014ac2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	8b5b      	ldrh	r3, [r3, #26]
 8014ab8:	f023 0303 	bic.w	r3, r3, #3
 8014abc:	b29a      	uxth	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	371c      	adds	r7, #28
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd90      	pop	{r4, r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	0801bbb4 	.word	0x0801bbb4
 8014ad4:	0801c370 	.word	0x0801c370
 8014ad8:	0801bc08 	.word	0x0801bc08

08014adc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014adc:	b590      	push	{r4, r7, lr}
 8014ade:	b087      	sub	sp, #28
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d106      	bne.n	8014afc <tcp_keepalive+0x20>
 8014aee:	4b18      	ldr	r3, [pc, #96]	; (8014b50 <tcp_keepalive+0x74>)
 8014af0:	f640 0224 	movw	r2, #2084	; 0x824
 8014af4:	4917      	ldr	r1, [pc, #92]	; (8014b54 <tcp_keepalive+0x78>)
 8014af6:	4818      	ldr	r0, [pc, #96]	; (8014b58 <tcp_keepalive+0x7c>)
 8014af8:	f003 fe4c 	bl	8018794 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014afc:	7dfb      	ldrb	r3, [r7, #23]
 8014afe:	b29c      	uxth	r4, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b04:	3b01      	subs	r3, #1
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7f8 fb5d 	bl	800d1c6 <lwip_htonl>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2200      	movs	r2, #0
 8014b10:	4621      	mov	r1, r4
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f7ff fe66 	bl	80147e4 <tcp_output_alloc_header>
 8014b18:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d102      	bne.n	8014b26 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014b20:	f04f 33ff 	mov.w	r3, #4294967295
 8014b24:	e010      	b.n	8014b48 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b26:	7dfb      	ldrb	r3, [r7, #23]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	6939      	ldr	r1, [r7, #16]
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f7ff fe97 	bl	8014860 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	3304      	adds	r3, #4
 8014b38:	6939      	ldr	r1, [r7, #16]
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f7ff fed0 	bl	80148e0 <tcp_output_control_segment>
 8014b40:	4603      	mov	r3, r0
 8014b42:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	371c      	adds	r7, #28
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd90      	pop	{r4, r7, pc}
 8014b50:	0801bbb4 	.word	0x0801bbb4
 8014b54:	0801c390 	.word	0x0801c390
 8014b58:	0801bc08 	.word	0x0801bc08

08014b5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014b5c:	b590      	push	{r4, r7, lr}
 8014b5e:	b08b      	sub	sp, #44	; 0x2c
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b64:	2300      	movs	r3, #0
 8014b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d106      	bne.n	8014b7e <tcp_zero_window_probe+0x22>
 8014b70:	4b4c      	ldr	r3, [pc, #304]	; (8014ca4 <tcp_zero_window_probe+0x148>)
 8014b72:	f640 024f 	movw	r2, #2127	; 0x84f
 8014b76:	494c      	ldr	r1, [pc, #304]	; (8014ca8 <tcp_zero_window_probe+0x14c>)
 8014b78:	484c      	ldr	r0, [pc, #304]	; (8014cac <tcp_zero_window_probe+0x150>)
 8014b7a:	f003 fe0b 	bl	8018794 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b82:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014b84:	6a3b      	ldr	r3, [r7, #32]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d101      	bne.n	8014b8e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	e086      	b.n	8014c9c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b94:	2bff      	cmp	r3, #255	; 0xff
 8014b96:	d007      	beq.n	8014ba8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	b2da      	uxtb	r2, r3
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	899b      	ldrh	r3, [r3, #12]
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7f8 faf3 	bl	800d19c <lwip_htons>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	f003 0301 	and.w	r3, r3, #1
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d005      	beq.n	8014bce <tcp_zero_window_probe+0x72>
 8014bc2:	6a3b      	ldr	r3, [r7, #32]
 8014bc4:	891b      	ldrh	r3, [r3, #8]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d101      	bne.n	8014bce <tcp_zero_window_probe+0x72>
 8014bca:	2301      	movs	r3, #1
 8014bcc:	e000      	b.n	8014bd0 <tcp_zero_window_probe+0x74>
 8014bce:	2300      	movs	r3, #0
 8014bd0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014bd2:	7ffb      	ldrb	r3, [r7, #31]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	bf0c      	ite	eq
 8014bd8:	2301      	moveq	r3, #1
 8014bda:	2300      	movne	r3, #0
 8014bdc:	b2db      	uxtb	r3, r3
 8014bde:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be4:	b299      	uxth	r1, r3
 8014be6:	6a3b      	ldr	r3, [r7, #32]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	8bba      	ldrh	r2, [r7, #28]
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f7ff fdf8 	bl	80147e4 <tcp_output_alloc_header>
 8014bf4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014bf6:	69bb      	ldr	r3, [r7, #24]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d102      	bne.n	8014c02 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014c00:	e04c      	b.n	8014c9c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014c08:	7ffb      	ldrb	r3, [r7, #31]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d011      	beq.n	8014c32 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	899b      	ldrh	r3, [r3, #12]
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	b21b      	sxth	r3, r3
 8014c16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014c1a:	b21c      	sxth	r4, r3
 8014c1c:	2011      	movs	r0, #17
 8014c1e:	f7f8 fabd 	bl	800d19c <lwip_htons>
 8014c22:	4603      	mov	r3, r0
 8014c24:	b21b      	sxth	r3, r3
 8014c26:	4323      	orrs	r3, r4
 8014c28:	b21b      	sxth	r3, r3
 8014c2a:	b29a      	uxth	r2, r3
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	819a      	strh	r2, [r3, #12]
 8014c30:	e010      	b.n	8014c54 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	3314      	adds	r3, #20
 8014c38:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014c3a:	6a3b      	ldr	r3, [r7, #32]
 8014c3c:	6858      	ldr	r0, [r3, #4]
 8014c3e:	6a3b      	ldr	r3, [r7, #32]
 8014c40:	685b      	ldr	r3, [r3, #4]
 8014c42:	891a      	ldrh	r2, [r3, #8]
 8014c44:	6a3b      	ldr	r3, [r7, #32]
 8014c46:	891b      	ldrh	r3, [r3, #8]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	2201      	movs	r2, #1
 8014c4e:	6939      	ldr	r1, [r7, #16]
 8014c50:	f7f9 fff2 	bl	800ec38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014c54:	6a3b      	ldr	r3, [r7, #32]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7f8 fab3 	bl	800d1c6 <lwip_htonl>
 8014c60:	4603      	mov	r3, r0
 8014c62:	3301      	adds	r3, #1
 8014c64:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	1ad3      	subs	r3, r2, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	da02      	bge.n	8014c78 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	69b9      	ldr	r1, [r7, #24]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7ff fded 	bl	8014860 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	69b9      	ldr	r1, [r7, #24]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7ff fe26 	bl	80148e0 <tcp_output_control_segment>
 8014c94:	4603      	mov	r3, r0
 8014c96:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014c98:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	372c      	adds	r7, #44	; 0x2c
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd90      	pop	{r4, r7, pc}
 8014ca4:	0801bbb4 	.word	0x0801bbb4
 8014ca8:	0801c3ac 	.word	0x0801c3ac
 8014cac:	0801bc08 	.word	0x0801bc08

08014cb0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014cb8:	f7fa f8ac 	bl	800ee14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014cbc:	4b0a      	ldr	r3, [pc, #40]	; (8014ce8 <tcpip_tcp_timer+0x38>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d103      	bne.n	8014ccc <tcpip_tcp_timer+0x1c>
 8014cc4:	4b09      	ldr	r3, [pc, #36]	; (8014cec <tcpip_tcp_timer+0x3c>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d005      	beq.n	8014cd8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014ccc:	2200      	movs	r2, #0
 8014cce:	4908      	ldr	r1, [pc, #32]	; (8014cf0 <tcpip_tcp_timer+0x40>)
 8014cd0:	20fa      	movs	r0, #250	; 0xfa
 8014cd2:	f000 f8f3 	bl	8014ebc <sys_timeout>
 8014cd6:	e003      	b.n	8014ce0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014cd8:	4b06      	ldr	r3, [pc, #24]	; (8014cf4 <tcpip_tcp_timer+0x44>)
 8014cda:	2200      	movs	r2, #0
 8014cdc:	601a      	str	r2, [r3, #0]
  }
}
 8014cde:	bf00      	nop
 8014ce0:	bf00      	nop
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	2000d8d4 	.word	0x2000d8d4
 8014cec:	2000d8d8 	.word	0x2000d8d8
 8014cf0:	08014cb1 	.word	0x08014cb1
 8014cf4:	2000d920 	.word	0x2000d920

08014cf8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014cfc:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <tcp_timer_needed+0x30>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d10f      	bne.n	8014d24 <tcp_timer_needed+0x2c>
 8014d04:	4b09      	ldr	r3, [pc, #36]	; (8014d2c <tcp_timer_needed+0x34>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d103      	bne.n	8014d14 <tcp_timer_needed+0x1c>
 8014d0c:	4b08      	ldr	r3, [pc, #32]	; (8014d30 <tcp_timer_needed+0x38>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d007      	beq.n	8014d24 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014d14:	4b04      	ldr	r3, [pc, #16]	; (8014d28 <tcp_timer_needed+0x30>)
 8014d16:	2201      	movs	r2, #1
 8014d18:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	4905      	ldr	r1, [pc, #20]	; (8014d34 <tcp_timer_needed+0x3c>)
 8014d1e:	20fa      	movs	r0, #250	; 0xfa
 8014d20:	f000 f8cc 	bl	8014ebc <sys_timeout>
  }
}
 8014d24:	bf00      	nop
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	2000d920 	.word	0x2000d920
 8014d2c:	2000d8d4 	.word	0x2000d8d4
 8014d30:	2000d8d8 	.word	0x2000d8d8
 8014d34:	08014cb1 	.word	0x08014cb1

08014d38 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014d44:	200a      	movs	r0, #10
 8014d46:	f7f8 fedf 	bl	800db08 <memp_malloc>
 8014d4a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d109      	bne.n	8014d66 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d151      	bne.n	8014dfc <sys_timeout_abs+0xc4>
 8014d58:	4b2a      	ldr	r3, [pc, #168]	; (8014e04 <sys_timeout_abs+0xcc>)
 8014d5a:	22be      	movs	r2, #190	; 0xbe
 8014d5c:	492a      	ldr	r1, [pc, #168]	; (8014e08 <sys_timeout_abs+0xd0>)
 8014d5e:	482b      	ldr	r0, [pc, #172]	; (8014e0c <sys_timeout_abs+0xd4>)
 8014d60:	f003 fd18 	bl	8018794 <iprintf>
    return;
 8014d64:	e04a      	b.n	8014dfc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	68ba      	ldr	r2, [r7, #8]
 8014d70:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	68fa      	ldr	r2, [r7, #12]
 8014d7c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d7e:	4b24      	ldr	r3, [pc, #144]	; (8014e10 <sys_timeout_abs+0xd8>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d103      	bne.n	8014d8e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014d86:	4a22      	ldr	r2, [pc, #136]	; (8014e10 <sys_timeout_abs+0xd8>)
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	6013      	str	r3, [r2, #0]
    return;
 8014d8c:	e037      	b.n	8014dfe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	685a      	ldr	r2, [r3, #4]
 8014d92:	4b1f      	ldr	r3, [pc, #124]	; (8014e10 <sys_timeout_abs+0xd8>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	0fdb      	lsrs	r3, r3, #31
 8014d9c:	f003 0301 	and.w	r3, r3, #1
 8014da0:	b2db      	uxtb	r3, r3
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d007      	beq.n	8014db6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014da6:	4b1a      	ldr	r3, [pc, #104]	; (8014e10 <sys_timeout_abs+0xd8>)
 8014da8:	681a      	ldr	r2, [r3, #0]
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014dae:	4a18      	ldr	r2, [pc, #96]	; (8014e10 <sys_timeout_abs+0xd8>)
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	6013      	str	r3, [r2, #0]
 8014db4:	e023      	b.n	8014dfe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014db6:	4b16      	ldr	r3, [pc, #88]	; (8014e10 <sys_timeout_abs+0xd8>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	617b      	str	r3, [r7, #20]
 8014dbc:	e01a      	b.n	8014df4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00b      	beq.n	8014dde <sys_timeout_abs+0xa6>
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	1ad3      	subs	r3, r2, r3
 8014dd2:	0fdb      	lsrs	r3, r3, #31
 8014dd4:	f003 0301 	and.w	r3, r3, #1
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d007      	beq.n	8014dee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	693a      	ldr	r2, [r7, #16]
 8014dea:	601a      	str	r2, [r3, #0]
        break;
 8014dec:	e007      	b.n	8014dfe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	617b      	str	r3, [r7, #20]
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1e1      	bne.n	8014dbe <sys_timeout_abs+0x86>
 8014dfa:	e000      	b.n	8014dfe <sys_timeout_abs+0xc6>
    return;
 8014dfc:	bf00      	nop
      }
    }
  }
}
 8014dfe:	3718      	adds	r7, #24
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	0801c3d0 	.word	0x0801c3d0
 8014e08:	0801c404 	.word	0x0801c404
 8014e0c:	0801c444 	.word	0x0801c444
 8014e10:	2000d918 	.word	0x2000d918

08014e14 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b086      	sub	sp, #24
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	4798      	blx	r3

  now = sys_now();
 8014e26:	f7f2 fe91 	bl	8007b4c <sys_now>
 8014e2a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	4b0f      	ldr	r3, [pc, #60]	; (8014e70 <lwip_cyclic_timer+0x5c>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4413      	add	r3, r2
 8014e36:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014e38:	68fa      	ldr	r2, [r7, #12]
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	0fdb      	lsrs	r3, r3, #31
 8014e40:	f003 0301 	and.w	r3, r3, #1
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d009      	beq.n	8014e5e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	693b      	ldr	r3, [r7, #16]
 8014e50:	4413      	add	r3, r2
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	4907      	ldr	r1, [pc, #28]	; (8014e74 <lwip_cyclic_timer+0x60>)
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7ff ff6e 	bl	8014d38 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014e5c:	e004      	b.n	8014e68 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	4904      	ldr	r1, [pc, #16]	; (8014e74 <lwip_cyclic_timer+0x60>)
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f7ff ff68 	bl	8014d38 <sys_timeout_abs>
}
 8014e68:	bf00      	nop
 8014e6a:	3718      	adds	r7, #24
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	2000d91c 	.word	0x2000d91c
 8014e74:	08014e15 	.word	0x08014e15

08014e78 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e7e:	2301      	movs	r3, #1
 8014e80:	607b      	str	r3, [r7, #4]
 8014e82:	e00e      	b.n	8014ea2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e84:	4a0b      	ldr	r2, [pc, #44]	; (8014eb4 <sys_timeouts_init+0x3c>)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	00db      	lsls	r3, r3, #3
 8014e90:	4a08      	ldr	r2, [pc, #32]	; (8014eb4 <sys_timeouts_init+0x3c>)
 8014e92:	4413      	add	r3, r2
 8014e94:	461a      	mov	r2, r3
 8014e96:	4908      	ldr	r1, [pc, #32]	; (8014eb8 <sys_timeouts_init+0x40>)
 8014e98:	f000 f810 	bl	8014ebc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	607b      	str	r3, [r7, #4]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2b02      	cmp	r3, #2
 8014ea6:	d9ed      	bls.n	8014e84 <sys_timeouts_init+0xc>
  }
}
 8014ea8:	bf00      	nop
 8014eaa:	bf00      	nop
 8014eac:	3708      	adds	r7, #8
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	0801cffc 	.word	0x0801cffc
 8014eb8:	08014e15 	.word	0x08014e15

08014ebc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b086      	sub	sp, #24
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ece:	d306      	bcc.n	8014ede <sys_timeout+0x22>
 8014ed0:	4b0a      	ldr	r3, [pc, #40]	; (8014efc <sys_timeout+0x40>)
 8014ed2:	f240 1229 	movw	r2, #297	; 0x129
 8014ed6:	490a      	ldr	r1, [pc, #40]	; (8014f00 <sys_timeout+0x44>)
 8014ed8:	480a      	ldr	r0, [pc, #40]	; (8014f04 <sys_timeout+0x48>)
 8014eda:	f003 fc5b 	bl	8018794 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014ede:	f7f2 fe35 	bl	8007b4c <sys_now>
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	4413      	add	r3, r2
 8014ee8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	68b9      	ldr	r1, [r7, #8]
 8014eee:	6978      	ldr	r0, [r7, #20]
 8014ef0:	f7ff ff22 	bl	8014d38 <sys_timeout_abs>
#endif
}
 8014ef4:	bf00      	nop
 8014ef6:	3718      	adds	r7, #24
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	0801c3d0 	.word	0x0801c3d0
 8014f00:	0801c46c 	.word	0x0801c46c
 8014f04:	0801c444 	.word	0x0801c444

08014f08 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014f0e:	f7f2 fe1d 	bl	8007b4c <sys_now>
 8014f12:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014f14:	4b17      	ldr	r3, [pc, #92]	; (8014f74 <sys_check_timeouts+0x6c>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d022      	beq.n	8014f66 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	685b      	ldr	r3, [r3, #4]
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	0fdb      	lsrs	r3, r3, #31
 8014f2a:	f003 0301 	and.w	r3, r3, #1
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d11a      	bne.n	8014f6a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	4a0e      	ldr	r2, [pc, #56]	; (8014f74 <sys_check_timeouts+0x6c>)
 8014f3a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	689b      	ldr	r3, [r3, #8]
 8014f40:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	4a0a      	ldr	r2, [pc, #40]	; (8014f78 <sys_check_timeouts+0x70>)
 8014f4e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014f50:	68b9      	ldr	r1, [r7, #8]
 8014f52:	200a      	movs	r0, #10
 8014f54:	f7f8 fe2a 	bl	800dbac <memp_free>
    if (handler != NULL) {
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d0da      	beq.n	8014f14 <sys_check_timeouts+0xc>
      handler(arg);
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6838      	ldr	r0, [r7, #0]
 8014f62:	4798      	blx	r3
  do {
 8014f64:	e7d6      	b.n	8014f14 <sys_check_timeouts+0xc>
      return;
 8014f66:	bf00      	nop
 8014f68:	e000      	b.n	8014f6c <sys_check_timeouts+0x64>
      return;
 8014f6a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014f6c:	3710      	adds	r7, #16
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	2000d918 	.word	0x2000d918
 8014f78:	2000d91c 	.word	0x2000d91c

08014f7c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f82:	4b16      	ldr	r3, [pc, #88]	; (8014fdc <sys_timeouts_sleeptime+0x60>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d102      	bne.n	8014f90 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8e:	e020      	b.n	8014fd2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014f90:	f7f2 fddc 	bl	8007b4c <sys_now>
 8014f94:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f96:	4b11      	ldr	r3, [pc, #68]	; (8014fdc <sys_timeouts_sleeptime+0x60>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	1ad3      	subs	r3, r2, r3
 8014fa0:	0fdb      	lsrs	r3, r3, #31
 8014fa2:	f003 0301 	and.w	r3, r3, #1
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d001      	beq.n	8014fb0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014fac:	2300      	movs	r3, #0
 8014fae:	e010      	b.n	8014fd2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014fb0:	4b0a      	ldr	r3, [pc, #40]	; (8014fdc <sys_timeouts_sleeptime+0x60>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	685a      	ldr	r2, [r3, #4]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	1ad3      	subs	r3, r2, r3
 8014fba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	da06      	bge.n	8014fd0 <sys_timeouts_sleeptime+0x54>
 8014fc2:	4b07      	ldr	r3, [pc, #28]	; (8014fe0 <sys_timeouts_sleeptime+0x64>)
 8014fc4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014fc8:	4906      	ldr	r1, [pc, #24]	; (8014fe4 <sys_timeouts_sleeptime+0x68>)
 8014fca:	4807      	ldr	r0, [pc, #28]	; (8014fe8 <sys_timeouts_sleeptime+0x6c>)
 8014fcc:	f003 fbe2 	bl	8018794 <iprintf>
    return ret;
 8014fd0:	683b      	ldr	r3, [r7, #0]
  }
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3708      	adds	r7, #8
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	2000d918 	.word	0x2000d918
 8014fe0:	0801c3d0 	.word	0x0801c3d0
 8014fe4:	0801c4a4 	.word	0x0801c4a4
 8014fe8:	0801c444 	.word	0x0801c444

08014fec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014ff0:	f003 fbe8 	bl	80187c4 <rand>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015002:	b29a      	uxth	r2, r3
 8015004:	4b01      	ldr	r3, [pc, #4]	; (801500c <udp_init+0x20>)
 8015006:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015008:	bf00      	nop
 801500a:	bd80      	pop	{r7, pc}
 801500c:	200000ac 	.word	0x200000ac

08015010 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015016:	2300      	movs	r3, #0
 8015018:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801501a:	4b17      	ldr	r3, [pc, #92]	; (8015078 <udp_new_port+0x68>)
 801501c:	881b      	ldrh	r3, [r3, #0]
 801501e:	1c5a      	adds	r2, r3, #1
 8015020:	b291      	uxth	r1, r2
 8015022:	4a15      	ldr	r2, [pc, #84]	; (8015078 <udp_new_port+0x68>)
 8015024:	8011      	strh	r1, [r2, #0]
 8015026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801502a:	4293      	cmp	r3, r2
 801502c:	d103      	bne.n	8015036 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801502e:	4b12      	ldr	r3, [pc, #72]	; (8015078 <udp_new_port+0x68>)
 8015030:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015034:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015036:	4b11      	ldr	r3, [pc, #68]	; (801507c <udp_new_port+0x6c>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	603b      	str	r3, [r7, #0]
 801503c:	e011      	b.n	8015062 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	8a5a      	ldrh	r2, [r3, #18]
 8015042:	4b0d      	ldr	r3, [pc, #52]	; (8015078 <udp_new_port+0x68>)
 8015044:	881b      	ldrh	r3, [r3, #0]
 8015046:	429a      	cmp	r2, r3
 8015048:	d108      	bne.n	801505c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801504a:	88fb      	ldrh	r3, [r7, #6]
 801504c:	3301      	adds	r3, #1
 801504e:	80fb      	strh	r3, [r7, #6]
 8015050:	88fb      	ldrh	r3, [r7, #6]
 8015052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015056:	d3e0      	bcc.n	801501a <udp_new_port+0xa>
        return 0;
 8015058:	2300      	movs	r3, #0
 801505a:	e007      	b.n	801506c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	603b      	str	r3, [r7, #0]
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d1ea      	bne.n	801503e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015068:	4b03      	ldr	r3, [pc, #12]	; (8015078 <udp_new_port+0x68>)
 801506a:	881b      	ldrh	r3, [r3, #0]
}
 801506c:	4618      	mov	r0, r3
 801506e:	370c      	adds	r7, #12
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr
 8015078:	200000ac 	.word	0x200000ac
 801507c:	2000d924 	.word	0x2000d924

08015080 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	4613      	mov	r3, r2
 801508c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d105      	bne.n	80150a0 <udp_input_local_match+0x20>
 8015094:	4b27      	ldr	r3, [pc, #156]	; (8015134 <udp_input_local_match+0xb4>)
 8015096:	2287      	movs	r2, #135	; 0x87
 8015098:	4927      	ldr	r1, [pc, #156]	; (8015138 <udp_input_local_match+0xb8>)
 801509a:	4828      	ldr	r0, [pc, #160]	; (801513c <udp_input_local_match+0xbc>)
 801509c:	f003 fb7a 	bl	8018794 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d105      	bne.n	80150b2 <udp_input_local_match+0x32>
 80150a6:	4b23      	ldr	r3, [pc, #140]	; (8015134 <udp_input_local_match+0xb4>)
 80150a8:	2288      	movs	r2, #136	; 0x88
 80150aa:	4925      	ldr	r1, [pc, #148]	; (8015140 <udp_input_local_match+0xc0>)
 80150ac:	4823      	ldr	r0, [pc, #140]	; (801513c <udp_input_local_match+0xbc>)
 80150ae:	f003 fb71 	bl	8018794 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	7a1b      	ldrb	r3, [r3, #8]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d00b      	beq.n	80150d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	7a1a      	ldrb	r2, [r3, #8]
 80150be:	4b21      	ldr	r3, [pc, #132]	; (8015144 <udp_input_local_match+0xc4>)
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150c6:	3301      	adds	r3, #1
 80150c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d001      	beq.n	80150d2 <udp_input_local_match+0x52>
    return 0;
 80150ce:	2300      	movs	r3, #0
 80150d0:	e02b      	b.n	801512a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80150d2:	79fb      	ldrb	r3, [r7, #7]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d018      	beq.n	801510a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d013      	beq.n	8015106 <udp_input_local_match+0x86>
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d00f      	beq.n	8015106 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80150e6:	4b17      	ldr	r3, [pc, #92]	; (8015144 <udp_input_local_match+0xc4>)
 80150e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ee:	d00a      	beq.n	8015106 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681a      	ldr	r2, [r3, #0]
 80150f4:	4b13      	ldr	r3, [pc, #76]	; (8015144 <udp_input_local_match+0xc4>)
 80150f6:	695b      	ldr	r3, [r3, #20]
 80150f8:	405a      	eors	r2, r3
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	3308      	adds	r3, #8
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015102:	2b00      	cmp	r3, #0
 8015104:	d110      	bne.n	8015128 <udp_input_local_match+0xa8>
          return 1;
 8015106:	2301      	movs	r3, #1
 8015108:	e00f      	b.n	801512a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d009      	beq.n	8015124 <udp_input_local_match+0xa4>
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d005      	beq.n	8015124 <udp_input_local_match+0xa4>
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	4b09      	ldr	r3, [pc, #36]	; (8015144 <udp_input_local_match+0xc4>)
 801511e:	695b      	ldr	r3, [r3, #20]
 8015120:	429a      	cmp	r2, r3
 8015122:	d101      	bne.n	8015128 <udp_input_local_match+0xa8>
        return 1;
 8015124:	2301      	movs	r3, #1
 8015126:	e000      	b.n	801512a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015128:	2300      	movs	r3, #0
}
 801512a:	4618      	mov	r0, r3
 801512c:	3710      	adds	r7, #16
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	bf00      	nop
 8015134:	0801c4b8 	.word	0x0801c4b8
 8015138:	0801c4e8 	.word	0x0801c4e8
 801513c:	0801c50c 	.word	0x0801c50c
 8015140:	0801c534 	.word	0x0801c534
 8015144:	2000a174 	.word	0x2000a174

08015148 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015148:	b590      	push	{r4, r7, lr}
 801514a:	b08d      	sub	sp, #52	; 0x34
 801514c:	af02      	add	r7, sp, #8
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015152:	2300      	movs	r3, #0
 8015154:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d105      	bne.n	8015168 <udp_input+0x20>
 801515c:	4b7c      	ldr	r3, [pc, #496]	; (8015350 <udp_input+0x208>)
 801515e:	22cf      	movs	r2, #207	; 0xcf
 8015160:	497c      	ldr	r1, [pc, #496]	; (8015354 <udp_input+0x20c>)
 8015162:	487d      	ldr	r0, [pc, #500]	; (8015358 <udp_input+0x210>)
 8015164:	f003 fb16 	bl	8018794 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d105      	bne.n	801517a <udp_input+0x32>
 801516e:	4b78      	ldr	r3, [pc, #480]	; (8015350 <udp_input+0x208>)
 8015170:	22d0      	movs	r2, #208	; 0xd0
 8015172:	497a      	ldr	r1, [pc, #488]	; (801535c <udp_input+0x214>)
 8015174:	4878      	ldr	r0, [pc, #480]	; (8015358 <udp_input+0x210>)
 8015176:	f003 fb0d 	bl	8018794 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	895b      	ldrh	r3, [r3, #10]
 801517e:	2b07      	cmp	r3, #7
 8015180:	d803      	bhi.n	801518a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015182:	6878      	ldr	r0, [r7, #4]
 8015184:	f7f9 fb52 	bl	800e82c <pbuf_free>
    goto end;
 8015188:	e0de      	b.n	8015348 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015190:	4b73      	ldr	r3, [pc, #460]	; (8015360 <udp_input+0x218>)
 8015192:	695b      	ldr	r3, [r3, #20]
 8015194:	4a72      	ldr	r2, [pc, #456]	; (8015360 <udp_input+0x218>)
 8015196:	6812      	ldr	r2, [r2, #0]
 8015198:	4611      	mov	r1, r2
 801519a:	4618      	mov	r0, r3
 801519c:	f001 ff80 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 80151a0:	4603      	mov	r3, r0
 80151a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	881b      	ldrh	r3, [r3, #0]
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f7 fff6 	bl	800d19c <lwip_htons>
 80151b0:	4603      	mov	r3, r0
 80151b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	885b      	ldrh	r3, [r3, #2]
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7f7 ffee 	bl	800d19c <lwip_htons>
 80151c0:	4603      	mov	r3, r0
 80151c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80151c4:	2300      	movs	r3, #0
 80151c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80151c8:	2300      	movs	r3, #0
 80151ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80151cc:	2300      	movs	r3, #0
 80151ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151d0:	4b64      	ldr	r3, [pc, #400]	; (8015364 <udp_input+0x21c>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	627b      	str	r3, [r7, #36]	; 0x24
 80151d6:	e054      	b.n	8015282 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80151d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151da:	8a5b      	ldrh	r3, [r3, #18]
 80151dc:	89fa      	ldrh	r2, [r7, #14]
 80151de:	429a      	cmp	r2, r3
 80151e0:	d14a      	bne.n	8015278 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80151e2:	7cfb      	ldrb	r3, [r7, #19]
 80151e4:	461a      	mov	r2, r3
 80151e6:	6839      	ldr	r1, [r7, #0]
 80151e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151ea:	f7ff ff49 	bl	8015080 <udp_input_local_match>
 80151ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d041      	beq.n	8015278 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80151f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f6:	7c1b      	ldrb	r3, [r3, #16]
 80151f8:	f003 0304 	and.w	r3, r3, #4
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d11d      	bne.n	801523c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d102      	bne.n	801520c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015208:	61fb      	str	r3, [r7, #28]
 801520a:	e017      	b.n	801523c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801520c:	7cfb      	ldrb	r3, [r7, #19]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d014      	beq.n	801523c <udp_input+0xf4>
 8015212:	4b53      	ldr	r3, [pc, #332]	; (8015360 <udp_input+0x218>)
 8015214:	695b      	ldr	r3, [r3, #20]
 8015216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801521a:	d10f      	bne.n	801523c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	3304      	adds	r3, #4
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	429a      	cmp	r2, r3
 8015228:	d008      	beq.n	801523c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	3304      	adds	r3, #4
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	429a      	cmp	r2, r3
 8015236:	d101      	bne.n	801523c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523e:	8a9b      	ldrh	r3, [r3, #20]
 8015240:	8a3a      	ldrh	r2, [r7, #16]
 8015242:	429a      	cmp	r2, r3
 8015244:	d118      	bne.n	8015278 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015248:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801524a:	2b00      	cmp	r3, #0
 801524c:	d005      	beq.n	801525a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015250:	685a      	ldr	r2, [r3, #4]
 8015252:	4b43      	ldr	r3, [pc, #268]	; (8015360 <udp_input+0x218>)
 8015254:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015256:	429a      	cmp	r2, r3
 8015258:	d10e      	bne.n	8015278 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801525a:	6a3b      	ldr	r3, [r7, #32]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d014      	beq.n	801528a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015262:	68da      	ldr	r2, [r3, #12]
 8015264:	6a3b      	ldr	r3, [r7, #32]
 8015266:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015268:	4b3e      	ldr	r3, [pc, #248]	; (8015364 <udp_input+0x21c>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015270:	4a3c      	ldr	r2, [pc, #240]	; (8015364 <udp_input+0x21c>)
 8015272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015274:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015276:	e008      	b.n	801528a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	627b      	str	r3, [r7, #36]	; 0x24
 8015282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015284:	2b00      	cmp	r3, #0
 8015286:	d1a7      	bne.n	80151d8 <udp_input+0x90>
 8015288:	e000      	b.n	801528c <udp_input+0x144>
        break;
 801528a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528e:	2b00      	cmp	r3, #0
 8015290:	d101      	bne.n	8015296 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015298:	2b00      	cmp	r3, #0
 801529a:	d002      	beq.n	80152a2 <udp_input+0x15a>
    for_us = 1;
 801529c:	2301      	movs	r3, #1
 801529e:	76fb      	strb	r3, [r7, #27]
 80152a0:	e00a      	b.n	80152b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	3304      	adds	r3, #4
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	4b2d      	ldr	r3, [pc, #180]	; (8015360 <udp_input+0x218>)
 80152aa:	695b      	ldr	r3, [r3, #20]
 80152ac:	429a      	cmp	r2, r3
 80152ae:	bf0c      	ite	eq
 80152b0:	2301      	moveq	r3, #1
 80152b2:	2300      	movne	r3, #0
 80152b4:	b2db      	uxtb	r3, r3
 80152b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80152b8:	7efb      	ldrb	r3, [r7, #27]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d041      	beq.n	8015342 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80152be:	2108      	movs	r1, #8
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f7f9 fa2d 	bl	800e720 <pbuf_remove_header>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d00a      	beq.n	80152e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80152cc:	4b20      	ldr	r3, [pc, #128]	; (8015350 <udp_input+0x208>)
 80152ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80152d2:	4925      	ldr	r1, [pc, #148]	; (8015368 <udp_input+0x220>)
 80152d4:	4820      	ldr	r0, [pc, #128]	; (8015358 <udp_input+0x210>)
 80152d6:	f003 fa5d 	bl	8018794 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f7f9 faa6 	bl	800e82c <pbuf_free>
      goto end;
 80152e0:	e032      	b.n	8015348 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80152e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d012      	beq.n	801530e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80152e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ea:	699b      	ldr	r3, [r3, #24]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00a      	beq.n	8015306 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80152f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f2:	699c      	ldr	r4, [r3, #24]
 80152f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f6:	69d8      	ldr	r0, [r3, #28]
 80152f8:	8a3b      	ldrh	r3, [r7, #16]
 80152fa:	9300      	str	r3, [sp, #0]
 80152fc:	4b1b      	ldr	r3, [pc, #108]	; (801536c <udp_input+0x224>)
 80152fe:	687a      	ldr	r2, [r7, #4]
 8015300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015302:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015304:	e021      	b.n	801534a <udp_input+0x202>
        pbuf_free(p);
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7f9 fa90 	bl	800e82c <pbuf_free>
        goto end;
 801530c:	e01c      	b.n	8015348 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801530e:	7cfb      	ldrb	r3, [r7, #19]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d112      	bne.n	801533a <udp_input+0x1f2>
 8015314:	4b12      	ldr	r3, [pc, #72]	; (8015360 <udp_input+0x218>)
 8015316:	695b      	ldr	r3, [r3, #20]
 8015318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801531c:	2be0      	cmp	r3, #224	; 0xe0
 801531e:	d00c      	beq.n	801533a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015320:	4b0f      	ldr	r3, [pc, #60]	; (8015360 <udp_input+0x218>)
 8015322:	899b      	ldrh	r3, [r3, #12]
 8015324:	3308      	adds	r3, #8
 8015326:	b29b      	uxth	r3, r3
 8015328:	b21b      	sxth	r3, r3
 801532a:	4619      	mov	r1, r3
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	f7f9 fa6a 	bl	800e806 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015332:	2103      	movs	r1, #3
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f001 fb93 	bl	8016a60 <icmp_dest_unreach>
      pbuf_free(p);
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f7f9 fa76 	bl	800e82c <pbuf_free>
  return;
 8015340:	e003      	b.n	801534a <udp_input+0x202>
    pbuf_free(p);
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f7f9 fa72 	bl	800e82c <pbuf_free>
  return;
 8015348:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801534a:	372c      	adds	r7, #44	; 0x2c
 801534c:	46bd      	mov	sp, r7
 801534e:	bd90      	pop	{r4, r7, pc}
 8015350:	0801c4b8 	.word	0x0801c4b8
 8015354:	0801c55c 	.word	0x0801c55c
 8015358:	0801c50c 	.word	0x0801c50c
 801535c:	0801c574 	.word	0x0801c574
 8015360:	2000a174 	.word	0x2000a174
 8015364:	2000d924 	.word	0x2000d924
 8015368:	0801c590 	.word	0x0801c590
 801536c:	2000a184 	.word	0x2000a184

08015370 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d109      	bne.n	8015394 <udp_send+0x24>
 8015380:	4b11      	ldr	r3, [pc, #68]	; (80153c8 <udp_send+0x58>)
 8015382:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015386:	4911      	ldr	r1, [pc, #68]	; (80153cc <udp_send+0x5c>)
 8015388:	4811      	ldr	r0, [pc, #68]	; (80153d0 <udp_send+0x60>)
 801538a:	f003 fa03 	bl	8018794 <iprintf>
 801538e:	f06f 030f 	mvn.w	r3, #15
 8015392:	e015      	b.n	80153c0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d109      	bne.n	80153ae <udp_send+0x3e>
 801539a:	4b0b      	ldr	r3, [pc, #44]	; (80153c8 <udp_send+0x58>)
 801539c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80153a0:	490c      	ldr	r1, [pc, #48]	; (80153d4 <udp_send+0x64>)
 80153a2:	480b      	ldr	r0, [pc, #44]	; (80153d0 <udp_send+0x60>)
 80153a4:	f003 f9f6 	bl	8018794 <iprintf>
 80153a8:	f06f 030f 	mvn.w	r3, #15
 80153ac:	e008      	b.n	80153c0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	1d1a      	adds	r2, r3, #4
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	8a9b      	ldrh	r3, [r3, #20]
 80153b6:	6839      	ldr	r1, [r7, #0]
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 f80d 	bl	80153d8 <udp_sendto>
 80153be:	4603      	mov	r3, r0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	0801c4b8 	.word	0x0801c4b8
 80153cc:	0801c5ac 	.word	0x0801c5ac
 80153d0:	0801c50c 	.word	0x0801c50c
 80153d4:	0801c5c4 	.word	0x0801c5c4

080153d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b088      	sub	sp, #32
 80153dc:	af02      	add	r7, sp, #8
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	607a      	str	r2, [r7, #4]
 80153e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d109      	bne.n	8015400 <udp_sendto+0x28>
 80153ec:	4b23      	ldr	r3, [pc, #140]	; (801547c <udp_sendto+0xa4>)
 80153ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 80153f2:	4923      	ldr	r1, [pc, #140]	; (8015480 <udp_sendto+0xa8>)
 80153f4:	4823      	ldr	r0, [pc, #140]	; (8015484 <udp_sendto+0xac>)
 80153f6:	f003 f9cd 	bl	8018794 <iprintf>
 80153fa:	f06f 030f 	mvn.w	r3, #15
 80153fe:	e038      	b.n	8015472 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d109      	bne.n	801541a <udp_sendto+0x42>
 8015406:	4b1d      	ldr	r3, [pc, #116]	; (801547c <udp_sendto+0xa4>)
 8015408:	f240 2219 	movw	r2, #537	; 0x219
 801540c:	491e      	ldr	r1, [pc, #120]	; (8015488 <udp_sendto+0xb0>)
 801540e:	481d      	ldr	r0, [pc, #116]	; (8015484 <udp_sendto+0xac>)
 8015410:	f003 f9c0 	bl	8018794 <iprintf>
 8015414:	f06f 030f 	mvn.w	r3, #15
 8015418:	e02b      	b.n	8015472 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d109      	bne.n	8015434 <udp_sendto+0x5c>
 8015420:	4b16      	ldr	r3, [pc, #88]	; (801547c <udp_sendto+0xa4>)
 8015422:	f240 221a 	movw	r2, #538	; 0x21a
 8015426:	4919      	ldr	r1, [pc, #100]	; (801548c <udp_sendto+0xb4>)
 8015428:	4816      	ldr	r0, [pc, #88]	; (8015484 <udp_sendto+0xac>)
 801542a:	f003 f9b3 	bl	8018794 <iprintf>
 801542e:	f06f 030f 	mvn.w	r3, #15
 8015432:	e01e      	b.n	8015472 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	7a1b      	ldrb	r3, [r3, #8]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d006      	beq.n	801544a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	7a1b      	ldrb	r3, [r3, #8]
 8015440:	4618      	mov	r0, r3
 8015442:	f7f8 fe65 	bl	800e110 <netif_get_by_index>
 8015446:	6178      	str	r0, [r7, #20]
 8015448:	e003      	b.n	8015452 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f001 fb92 	bl	8016b74 <ip4_route>
 8015450:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d102      	bne.n	801545e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015458:	f06f 0303 	mvn.w	r3, #3
 801545c:	e009      	b.n	8015472 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801545e:	887a      	ldrh	r2, [r7, #2]
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	9300      	str	r3, [sp, #0]
 8015464:	4613      	mov	r3, r2
 8015466:	687a      	ldr	r2, [r7, #4]
 8015468:	68b9      	ldr	r1, [r7, #8]
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f000 f810 	bl	8015490 <udp_sendto_if>
 8015470:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015472:	4618      	mov	r0, r3
 8015474:	3718      	adds	r7, #24
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	0801c4b8 	.word	0x0801c4b8
 8015480:	0801c5dc 	.word	0x0801c5dc
 8015484:	0801c50c 	.word	0x0801c50c
 8015488:	0801c5f4 	.word	0x0801c5f4
 801548c:	0801c610 	.word	0x0801c610

08015490 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b088      	sub	sp, #32
 8015494:	af02      	add	r7, sp, #8
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
 801549c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d109      	bne.n	80154b8 <udp_sendto_if+0x28>
 80154a4:	4b2e      	ldr	r3, [pc, #184]	; (8015560 <udp_sendto_if+0xd0>)
 80154a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154aa:	492e      	ldr	r1, [pc, #184]	; (8015564 <udp_sendto_if+0xd4>)
 80154ac:	482e      	ldr	r0, [pc, #184]	; (8015568 <udp_sendto_if+0xd8>)
 80154ae:	f003 f971 	bl	8018794 <iprintf>
 80154b2:	f06f 030f 	mvn.w	r3, #15
 80154b6:	e04f      	b.n	8015558 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d109      	bne.n	80154d2 <udp_sendto_if+0x42>
 80154be:	4b28      	ldr	r3, [pc, #160]	; (8015560 <udp_sendto_if+0xd0>)
 80154c0:	f240 2281 	movw	r2, #641	; 0x281
 80154c4:	4929      	ldr	r1, [pc, #164]	; (801556c <udp_sendto_if+0xdc>)
 80154c6:	4828      	ldr	r0, [pc, #160]	; (8015568 <udp_sendto_if+0xd8>)
 80154c8:	f003 f964 	bl	8018794 <iprintf>
 80154cc:	f06f 030f 	mvn.w	r3, #15
 80154d0:	e042      	b.n	8015558 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d109      	bne.n	80154ec <udp_sendto_if+0x5c>
 80154d8:	4b21      	ldr	r3, [pc, #132]	; (8015560 <udp_sendto_if+0xd0>)
 80154da:	f240 2282 	movw	r2, #642	; 0x282
 80154de:	4924      	ldr	r1, [pc, #144]	; (8015570 <udp_sendto_if+0xe0>)
 80154e0:	4821      	ldr	r0, [pc, #132]	; (8015568 <udp_sendto_if+0xd8>)
 80154e2:	f003 f957 	bl	8018794 <iprintf>
 80154e6:	f06f 030f 	mvn.w	r3, #15
 80154ea:	e035      	b.n	8015558 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80154ec:	6a3b      	ldr	r3, [r7, #32]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d109      	bne.n	8015506 <udp_sendto_if+0x76>
 80154f2:	4b1b      	ldr	r3, [pc, #108]	; (8015560 <udp_sendto_if+0xd0>)
 80154f4:	f240 2283 	movw	r2, #643	; 0x283
 80154f8:	491e      	ldr	r1, [pc, #120]	; (8015574 <udp_sendto_if+0xe4>)
 80154fa:	481b      	ldr	r0, [pc, #108]	; (8015568 <udp_sendto_if+0xd8>)
 80154fc:	f003 f94a 	bl	8018794 <iprintf>
 8015500:	f06f 030f 	mvn.w	r3, #15
 8015504:	e028      	b.n	8015558 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d009      	beq.n	8015520 <udp_sendto_if+0x90>
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d005      	beq.n	8015520 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801551c:	2be0      	cmp	r3, #224	; 0xe0
 801551e:	d103      	bne.n	8015528 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015520:	6a3b      	ldr	r3, [r7, #32]
 8015522:	3304      	adds	r3, #4
 8015524:	617b      	str	r3, [r7, #20]
 8015526:	e00b      	b.n	8015540 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	6a3b      	ldr	r3, [r7, #32]
 801552e:	3304      	adds	r3, #4
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	429a      	cmp	r2, r3
 8015534:	d002      	beq.n	801553c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015536:	f06f 0303 	mvn.w	r3, #3
 801553a:	e00d      	b.n	8015558 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015540:	887a      	ldrh	r2, [r7, #2]
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	9301      	str	r3, [sp, #4]
 8015546:	6a3b      	ldr	r3, [r7, #32]
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	4613      	mov	r3, r2
 801554c:	687a      	ldr	r2, [r7, #4]
 801554e:	68b9      	ldr	r1, [r7, #8]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f000 f811 	bl	8015578 <udp_sendto_if_src>
 8015556:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015558:	4618      	mov	r0, r3
 801555a:	3718      	adds	r7, #24
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}
 8015560:	0801c4b8 	.word	0x0801c4b8
 8015564:	0801c62c 	.word	0x0801c62c
 8015568:	0801c50c 	.word	0x0801c50c
 801556c:	0801c648 	.word	0x0801c648
 8015570:	0801c664 	.word	0x0801c664
 8015574:	0801c684 	.word	0x0801c684

08015578 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b08c      	sub	sp, #48	; 0x30
 801557c:	af04      	add	r7, sp, #16
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
 8015584:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d109      	bne.n	80155a0 <udp_sendto_if_src+0x28>
 801558c:	4b65      	ldr	r3, [pc, #404]	; (8015724 <udp_sendto_if_src+0x1ac>)
 801558e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015592:	4965      	ldr	r1, [pc, #404]	; (8015728 <udp_sendto_if_src+0x1b0>)
 8015594:	4865      	ldr	r0, [pc, #404]	; (801572c <udp_sendto_if_src+0x1b4>)
 8015596:	f003 f8fd 	bl	8018794 <iprintf>
 801559a:	f06f 030f 	mvn.w	r3, #15
 801559e:	e0bc      	b.n	801571a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d109      	bne.n	80155ba <udp_sendto_if_src+0x42>
 80155a6:	4b5f      	ldr	r3, [pc, #380]	; (8015724 <udp_sendto_if_src+0x1ac>)
 80155a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80155ac:	4960      	ldr	r1, [pc, #384]	; (8015730 <udp_sendto_if_src+0x1b8>)
 80155ae:	485f      	ldr	r0, [pc, #380]	; (801572c <udp_sendto_if_src+0x1b4>)
 80155b0:	f003 f8f0 	bl	8018794 <iprintf>
 80155b4:	f06f 030f 	mvn.w	r3, #15
 80155b8:	e0af      	b.n	801571a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d109      	bne.n	80155d4 <udp_sendto_if_src+0x5c>
 80155c0:	4b58      	ldr	r3, [pc, #352]	; (8015724 <udp_sendto_if_src+0x1ac>)
 80155c2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80155c6:	495b      	ldr	r1, [pc, #364]	; (8015734 <udp_sendto_if_src+0x1bc>)
 80155c8:	4858      	ldr	r0, [pc, #352]	; (801572c <udp_sendto_if_src+0x1b4>)
 80155ca:	f003 f8e3 	bl	8018794 <iprintf>
 80155ce:	f06f 030f 	mvn.w	r3, #15
 80155d2:	e0a2      	b.n	801571a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80155d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d109      	bne.n	80155ee <udp_sendto_if_src+0x76>
 80155da:	4b52      	ldr	r3, [pc, #328]	; (8015724 <udp_sendto_if_src+0x1ac>)
 80155dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80155e0:	4955      	ldr	r1, [pc, #340]	; (8015738 <udp_sendto_if_src+0x1c0>)
 80155e2:	4852      	ldr	r0, [pc, #328]	; (801572c <udp_sendto_if_src+0x1b4>)
 80155e4:	f003 f8d6 	bl	8018794 <iprintf>
 80155e8:	f06f 030f 	mvn.w	r3, #15
 80155ec:	e095      	b.n	801571a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80155ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d109      	bne.n	8015608 <udp_sendto_if_src+0x90>
 80155f4:	4b4b      	ldr	r3, [pc, #300]	; (8015724 <udp_sendto_if_src+0x1ac>)
 80155f6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80155fa:	4950      	ldr	r1, [pc, #320]	; (801573c <udp_sendto_if_src+0x1c4>)
 80155fc:	484b      	ldr	r0, [pc, #300]	; (801572c <udp_sendto_if_src+0x1b4>)
 80155fe:	f003 f8c9 	bl	8018794 <iprintf>
 8015602:	f06f 030f 	mvn.w	r3, #15
 8015606:	e088      	b.n	801571a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	8a5b      	ldrh	r3, [r3, #18]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d10f      	bne.n	8015630 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015610:	68f9      	ldr	r1, [r7, #12]
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	8a5b      	ldrh	r3, [r3, #18]
 8015616:	461a      	mov	r2, r3
 8015618:	68f8      	ldr	r0, [r7, #12]
 801561a:	f000 f893 	bl	8015744 <udp_bind>
 801561e:	4603      	mov	r3, r0
 8015620:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015622:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d002      	beq.n	8015630 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801562a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801562e:	e074      	b.n	801571a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	891b      	ldrh	r3, [r3, #8]
 8015634:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015638:	4293      	cmp	r3, r2
 801563a:	d902      	bls.n	8015642 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801563c:	f04f 33ff 	mov.w	r3, #4294967295
 8015640:	e06b      	b.n	801571a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015642:	2108      	movs	r1, #8
 8015644:	68b8      	ldr	r0, [r7, #8]
 8015646:	f7f9 f85b 	bl	800e700 <pbuf_add_header>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d015      	beq.n	801567c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015650:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015654:	2108      	movs	r1, #8
 8015656:	2022      	movs	r0, #34	; 0x22
 8015658:	f7f8 fe04 	bl	800e264 <pbuf_alloc>
 801565c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d102      	bne.n	801566a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015664:	f04f 33ff 	mov.w	r3, #4294967295
 8015668:	e057      	b.n	801571a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	891b      	ldrh	r3, [r3, #8]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d006      	beq.n	8015680 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015672:	68b9      	ldr	r1, [r7, #8]
 8015674:	69f8      	ldr	r0, [r7, #28]
 8015676:	f7f9 f9fd 	bl	800ea74 <pbuf_chain>
 801567a:	e001      	b.n	8015680 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	895b      	ldrh	r3, [r3, #10]
 8015684:	2b07      	cmp	r3, #7
 8015686:	d806      	bhi.n	8015696 <udp_sendto_if_src+0x11e>
 8015688:	4b26      	ldr	r3, [pc, #152]	; (8015724 <udp_sendto_if_src+0x1ac>)
 801568a:	f240 320d 	movw	r2, #781	; 0x30d
 801568e:	492c      	ldr	r1, [pc, #176]	; (8015740 <udp_sendto_if_src+0x1c8>)
 8015690:	4826      	ldr	r0, [pc, #152]	; (801572c <udp_sendto_if_src+0x1b4>)
 8015692:	f003 f87f 	bl	8018794 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	8a5b      	ldrh	r3, [r3, #18]
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7f7 fd7b 	bl	800d19c <lwip_htons>
 80156a6:	4603      	mov	r3, r0
 80156a8:	461a      	mov	r2, r3
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80156ae:	887b      	ldrh	r3, [r7, #2]
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7f7 fd73 	bl	800d19c <lwip_htons>
 80156b6:	4603      	mov	r3, r0
 80156b8:	461a      	mov	r2, r3
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	2200      	movs	r2, #0
 80156c2:	719a      	strb	r2, [r3, #6]
 80156c4:	2200      	movs	r2, #0
 80156c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	891b      	ldrh	r3, [r3, #8]
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7f7 fd65 	bl	800d19c <lwip_htons>
 80156d2:	4603      	mov	r3, r0
 80156d4:	461a      	mov	r2, r3
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80156da:	2311      	movs	r3, #17
 80156dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	7adb      	ldrb	r3, [r3, #11]
 80156e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	7a9b      	ldrb	r3, [r3, #10]
 80156e8:	7cb9      	ldrb	r1, [r7, #18]
 80156ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ec:	9202      	str	r2, [sp, #8]
 80156ee:	7cfa      	ldrb	r2, [r7, #19]
 80156f0:	9201      	str	r2, [sp, #4]
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	460b      	mov	r3, r1
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156fa:	69f8      	ldr	r0, [r7, #28]
 80156fc:	f001 fc22 	bl	8016f44 <ip4_output_if_src>
 8015700:	4603      	mov	r3, r0
 8015702:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015704:	69fa      	ldr	r2, [r7, #28]
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	429a      	cmp	r2, r3
 801570a:	d004      	beq.n	8015716 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801570c:	69f8      	ldr	r0, [r7, #28]
 801570e:	f7f9 f88d 	bl	800e82c <pbuf_free>
    q = NULL;
 8015712:	2300      	movs	r3, #0
 8015714:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015716:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3720      	adds	r7, #32
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop
 8015724:	0801c4b8 	.word	0x0801c4b8
 8015728:	0801c6a4 	.word	0x0801c6a4
 801572c:	0801c50c 	.word	0x0801c50c
 8015730:	0801c6c4 	.word	0x0801c6c4
 8015734:	0801c6e4 	.word	0x0801c6e4
 8015738:	0801c708 	.word	0x0801c708
 801573c:	0801c72c 	.word	0x0801c72c
 8015740:	0801c750 	.word	0x0801c750

08015744 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b086      	sub	sp, #24
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	4613      	mov	r3, r2
 8015750:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d101      	bne.n	801575c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015758:	4b39      	ldr	r3, [pc, #228]	; (8015840 <udp_bind+0xfc>)
 801575a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d109      	bne.n	8015776 <udp_bind+0x32>
 8015762:	4b38      	ldr	r3, [pc, #224]	; (8015844 <udp_bind+0x100>)
 8015764:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015768:	4937      	ldr	r1, [pc, #220]	; (8015848 <udp_bind+0x104>)
 801576a:	4838      	ldr	r0, [pc, #224]	; (801584c <udp_bind+0x108>)
 801576c:	f003 f812 	bl	8018794 <iprintf>
 8015770:	f06f 030f 	mvn.w	r3, #15
 8015774:	e060      	b.n	8015838 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015776:	2300      	movs	r3, #0
 8015778:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801577a:	4b35      	ldr	r3, [pc, #212]	; (8015850 <udp_bind+0x10c>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	617b      	str	r3, [r7, #20]
 8015780:	e009      	b.n	8015796 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	429a      	cmp	r2, r3
 8015788:	d102      	bne.n	8015790 <udp_bind+0x4c>
      rebind = 1;
 801578a:	2301      	movs	r3, #1
 801578c:	74fb      	strb	r3, [r7, #19]
      break;
 801578e:	e005      	b.n	801579c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	68db      	ldr	r3, [r3, #12]
 8015794:	617b      	str	r3, [r7, #20]
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d1f2      	bne.n	8015782 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801579c:	88fb      	ldrh	r3, [r7, #6]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d109      	bne.n	80157b6 <udp_bind+0x72>
    port = udp_new_port();
 80157a2:	f7ff fc35 	bl	8015010 <udp_new_port>
 80157a6:	4603      	mov	r3, r0
 80157a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80157aa:	88fb      	ldrh	r3, [r7, #6]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d12c      	bne.n	801580a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80157b0:	f06f 0307 	mvn.w	r3, #7
 80157b4:	e040      	b.n	8015838 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157b6:	4b26      	ldr	r3, [pc, #152]	; (8015850 <udp_bind+0x10c>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	617b      	str	r3, [r7, #20]
 80157bc:	e022      	b.n	8015804 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d01b      	beq.n	80157fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	8a5b      	ldrh	r3, [r3, #18]
 80157ca:	88fa      	ldrh	r2, [r7, #6]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d116      	bne.n	80157fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80157d8:	429a      	cmp	r2, r3
 80157da:	d00d      	beq.n	80157f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d00a      	beq.n	80157f8 <udp_bind+0xb4>
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d006      	beq.n	80157f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80157ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d003      	beq.n	80157f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d102      	bne.n	80157fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80157f8:	f06f 0307 	mvn.w	r3, #7
 80157fc:	e01c      	b.n	8015838 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	617b      	str	r3, [r7, #20]
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1d9      	bne.n	80157be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d002      	beq.n	8015816 <udp_bind+0xd2>
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	e000      	b.n	8015818 <udp_bind+0xd4>
 8015816:	2300      	movs	r3, #0
 8015818:	68fa      	ldr	r2, [r7, #12]
 801581a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	88fa      	ldrh	r2, [r7, #6]
 8015820:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015822:	7cfb      	ldrb	r3, [r7, #19]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d106      	bne.n	8015836 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015828:	4b09      	ldr	r3, [pc, #36]	; (8015850 <udp_bind+0x10c>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015830:	4a07      	ldr	r2, [pc, #28]	; (8015850 <udp_bind+0x10c>)
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015836:	2300      	movs	r3, #0
}
 8015838:	4618      	mov	r0, r3
 801583a:	3718      	adds	r7, #24
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	0801d014 	.word	0x0801d014
 8015844:	0801c4b8 	.word	0x0801c4b8
 8015848:	0801c780 	.word	0x0801c780
 801584c:	0801c50c 	.word	0x0801c50c
 8015850:	2000d924 	.word	0x2000d924

08015854 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b084      	sub	sp, #16
 8015858:	af00      	add	r7, sp, #0
 801585a:	60f8      	str	r0, [r7, #12]
 801585c:	60b9      	str	r1, [r7, #8]
 801585e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d107      	bne.n	8015876 <udp_recv+0x22>
 8015866:	4b08      	ldr	r3, [pc, #32]	; (8015888 <udp_recv+0x34>)
 8015868:	f240 428a 	movw	r2, #1162	; 0x48a
 801586c:	4907      	ldr	r1, [pc, #28]	; (801588c <udp_recv+0x38>)
 801586e:	4808      	ldr	r0, [pc, #32]	; (8015890 <udp_recv+0x3c>)
 8015870:	f002 ff90 	bl	8018794 <iprintf>
 8015874:	e005      	b.n	8015882 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	68ba      	ldr	r2, [r7, #8]
 801587a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	687a      	ldr	r2, [r7, #4]
 8015880:	61da      	str	r2, [r3, #28]
}
 8015882:	3710      	adds	r7, #16
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}
 8015888:	0801c4b8 	.word	0x0801c4b8
 801588c:	0801c7ec 	.word	0x0801c7ec
 8015890:	0801c50c 	.word	0x0801c50c

08015894 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d107      	bne.n	80158b2 <udp_remove+0x1e>
 80158a2:	4b19      	ldr	r3, [pc, #100]	; (8015908 <udp_remove+0x74>)
 80158a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80158a8:	4918      	ldr	r1, [pc, #96]	; (801590c <udp_remove+0x78>)
 80158aa:	4819      	ldr	r0, [pc, #100]	; (8015910 <udp_remove+0x7c>)
 80158ac:	f002 ff72 	bl	8018794 <iprintf>
 80158b0:	e026      	b.n	8015900 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80158b2:	4b18      	ldr	r3, [pc, #96]	; (8015914 <udp_remove+0x80>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d105      	bne.n	80158c8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80158bc:	4b15      	ldr	r3, [pc, #84]	; (8015914 <udp_remove+0x80>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	4a14      	ldr	r2, [pc, #80]	; (8015914 <udp_remove+0x80>)
 80158c4:	6013      	str	r3, [r2, #0]
 80158c6:	e017      	b.n	80158f8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80158c8:	4b12      	ldr	r3, [pc, #72]	; (8015914 <udp_remove+0x80>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	60fb      	str	r3, [r7, #12]
 80158ce:	e010      	b.n	80158f2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	68db      	ldr	r3, [r3, #12]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d009      	beq.n	80158ec <udp_remove+0x58>
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d104      	bne.n	80158ec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	68da      	ldr	r2, [r3, #12]
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	60da      	str	r2, [r3, #12]
        break;
 80158ea:	e005      	b.n	80158f8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	60fb      	str	r3, [r7, #12]
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d1eb      	bne.n	80158d0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80158f8:	6879      	ldr	r1, [r7, #4]
 80158fa:	2000      	movs	r0, #0
 80158fc:	f7f8 f956 	bl	800dbac <memp_free>
}
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	0801c4b8 	.word	0x0801c4b8
 801590c:	0801c804 	.word	0x0801c804
 8015910:	0801c50c 	.word	0x0801c50c
 8015914:	2000d924 	.word	0x2000d924

08015918 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801591e:	2000      	movs	r0, #0
 8015920:	f7f8 f8f2 	bl	800db08 <memp_malloc>
 8015924:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d007      	beq.n	801593c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801592c:	2220      	movs	r2, #32
 801592e:	2100      	movs	r1, #0
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f002 fe47 	bl	80185c4 <memset>
    pcb->ttl = UDP_TTL;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	22ff      	movs	r2, #255	; 0xff
 801593a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801593c:	687b      	ldr	r3, [r7, #4]
}
 801593e:	4618      	mov	r0, r3
 8015940:	3708      	adds	r7, #8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015946:	b580      	push	{r7, lr}
 8015948:	b084      	sub	sp, #16
 801594a:	af00      	add	r7, sp, #0
 801594c:	4603      	mov	r3, r0
 801594e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015950:	f7ff ffe2 	bl	8015918 <udp_new>
 8015954:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015956:	68fb      	ldr	r3, [r7, #12]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015960:	b480      	push	{r7}
 8015962:	b085      	sub	sp, #20
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d01e      	beq.n	80159ae <udp_netif_ip_addr_changed+0x4e>
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d01a      	beq.n	80159ae <udp_netif_ip_addr_changed+0x4e>
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d017      	beq.n	80159ae <udp_netif_ip_addr_changed+0x4e>
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d013      	beq.n	80159ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015986:	4b0d      	ldr	r3, [pc, #52]	; (80159bc <udp_netif_ip_addr_changed+0x5c>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	60fb      	str	r3, [r7, #12]
 801598c:	e00c      	b.n	80159a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	429a      	cmp	r2, r3
 8015998:	d103      	bne.n	80159a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	60fb      	str	r3, [r7, #12]
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d1ef      	bne.n	801598e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159ae:	bf00      	nop
 80159b0:	3714      	adds	r7, #20
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr
 80159ba:	bf00      	nop
 80159bc:	2000d924 	.word	0x2000d924

080159c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80159c8:	4915      	ldr	r1, [pc, #84]	; (8015a20 <etharp_free_entry+0x60>)
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	4613      	mov	r3, r2
 80159ce:	005b      	lsls	r3, r3, #1
 80159d0:	4413      	add	r3, r2
 80159d2:	00db      	lsls	r3, r3, #3
 80159d4:	440b      	add	r3, r1
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d013      	beq.n	8015a04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80159dc:	4910      	ldr	r1, [pc, #64]	; (8015a20 <etharp_free_entry+0x60>)
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	4613      	mov	r3, r2
 80159e2:	005b      	lsls	r3, r3, #1
 80159e4:	4413      	add	r3, r2
 80159e6:	00db      	lsls	r3, r3, #3
 80159e8:	440b      	add	r3, r1
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7f8 ff1d 	bl	800e82c <pbuf_free>
    arp_table[i].q = NULL;
 80159f2:	490b      	ldr	r1, [pc, #44]	; (8015a20 <etharp_free_entry+0x60>)
 80159f4:	687a      	ldr	r2, [r7, #4]
 80159f6:	4613      	mov	r3, r2
 80159f8:	005b      	lsls	r3, r3, #1
 80159fa:	4413      	add	r3, r2
 80159fc:	00db      	lsls	r3, r3, #3
 80159fe:	440b      	add	r3, r1
 8015a00:	2200      	movs	r2, #0
 8015a02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a04:	4906      	ldr	r1, [pc, #24]	; (8015a20 <etharp_free_entry+0x60>)
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	3314      	adds	r3, #20
 8015a14:	2200      	movs	r2, #0
 8015a16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015a18:	bf00      	nop
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	2000d928 	.word	0x2000d928

08015a24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	607b      	str	r3, [r7, #4]
 8015a2e:	e096      	b.n	8015b5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a30:	494f      	ldr	r1, [pc, #316]	; (8015b70 <etharp_tmr+0x14c>)
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	4613      	mov	r3, r2
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	4413      	add	r3, r2
 8015a3a:	00db      	lsls	r3, r3, #3
 8015a3c:	440b      	add	r3, r1
 8015a3e:	3314      	adds	r3, #20
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a44:	78fb      	ldrb	r3, [r7, #3]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	f000 8086 	beq.w	8015b58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a4c:	4948      	ldr	r1, [pc, #288]	; (8015b70 <etharp_tmr+0x14c>)
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	4613      	mov	r3, r2
 8015a52:	005b      	lsls	r3, r3, #1
 8015a54:	4413      	add	r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	440b      	add	r3, r1
 8015a5a:	3312      	adds	r3, #18
 8015a5c:	881b      	ldrh	r3, [r3, #0]
 8015a5e:	3301      	adds	r3, #1
 8015a60:	b298      	uxth	r0, r3
 8015a62:	4943      	ldr	r1, [pc, #268]	; (8015b70 <etharp_tmr+0x14c>)
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	4613      	mov	r3, r2
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	4413      	add	r3, r2
 8015a6c:	00db      	lsls	r3, r3, #3
 8015a6e:	440b      	add	r3, r1
 8015a70:	3312      	adds	r3, #18
 8015a72:	4602      	mov	r2, r0
 8015a74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a76:	493e      	ldr	r1, [pc, #248]	; (8015b70 <etharp_tmr+0x14c>)
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	4613      	mov	r3, r2
 8015a7c:	005b      	lsls	r3, r3, #1
 8015a7e:	4413      	add	r3, r2
 8015a80:	00db      	lsls	r3, r3, #3
 8015a82:	440b      	add	r3, r1
 8015a84:	3312      	adds	r3, #18
 8015a86:	881b      	ldrh	r3, [r3, #0]
 8015a88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015a8c:	d215      	bcs.n	8015aba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a8e:	4938      	ldr	r1, [pc, #224]	; (8015b70 <etharp_tmr+0x14c>)
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	4613      	mov	r3, r2
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	4413      	add	r3, r2
 8015a98:	00db      	lsls	r3, r3, #3
 8015a9a:	440b      	add	r3, r1
 8015a9c:	3314      	adds	r3, #20
 8015a9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015aa0:	2b01      	cmp	r3, #1
 8015aa2:	d10e      	bne.n	8015ac2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015aa4:	4932      	ldr	r1, [pc, #200]	; (8015b70 <etharp_tmr+0x14c>)
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	005b      	lsls	r3, r3, #1
 8015aac:	4413      	add	r3, r2
 8015aae:	00db      	lsls	r3, r3, #3
 8015ab0:	440b      	add	r3, r1
 8015ab2:	3312      	adds	r3, #18
 8015ab4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ab6:	2b04      	cmp	r3, #4
 8015ab8:	d903      	bls.n	8015ac2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f7ff ff80 	bl	80159c0 <etharp_free_entry>
 8015ac0:	e04a      	b.n	8015b58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015ac2:	492b      	ldr	r1, [pc, #172]	; (8015b70 <etharp_tmr+0x14c>)
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	005b      	lsls	r3, r3, #1
 8015aca:	4413      	add	r3, r2
 8015acc:	00db      	lsls	r3, r3, #3
 8015ace:	440b      	add	r3, r1
 8015ad0:	3314      	adds	r3, #20
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	2b03      	cmp	r3, #3
 8015ad6:	d10a      	bne.n	8015aee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015ad8:	4925      	ldr	r1, [pc, #148]	; (8015b70 <etharp_tmr+0x14c>)
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	4613      	mov	r3, r2
 8015ade:	005b      	lsls	r3, r3, #1
 8015ae0:	4413      	add	r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	440b      	add	r3, r1
 8015ae6:	3314      	adds	r3, #20
 8015ae8:	2204      	movs	r2, #4
 8015aea:	701a      	strb	r2, [r3, #0]
 8015aec:	e034      	b.n	8015b58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015aee:	4920      	ldr	r1, [pc, #128]	; (8015b70 <etharp_tmr+0x14c>)
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	4613      	mov	r3, r2
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	4413      	add	r3, r2
 8015af8:	00db      	lsls	r3, r3, #3
 8015afa:	440b      	add	r3, r1
 8015afc:	3314      	adds	r3, #20
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	2b04      	cmp	r3, #4
 8015b02:	d10a      	bne.n	8015b1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b04:	491a      	ldr	r1, [pc, #104]	; (8015b70 <etharp_tmr+0x14c>)
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	3314      	adds	r3, #20
 8015b14:	2202      	movs	r2, #2
 8015b16:	701a      	strb	r2, [r3, #0]
 8015b18:	e01e      	b.n	8015b58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b1a:	4915      	ldr	r1, [pc, #84]	; (8015b70 <etharp_tmr+0x14c>)
 8015b1c:	687a      	ldr	r2, [r7, #4]
 8015b1e:	4613      	mov	r3, r2
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	4413      	add	r3, r2
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	440b      	add	r3, r1
 8015b28:	3314      	adds	r3, #20
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d113      	bne.n	8015b58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b30:	490f      	ldr	r1, [pc, #60]	; (8015b70 <etharp_tmr+0x14c>)
 8015b32:	687a      	ldr	r2, [r7, #4]
 8015b34:	4613      	mov	r3, r2
 8015b36:	005b      	lsls	r3, r3, #1
 8015b38:	4413      	add	r3, r2
 8015b3a:	00db      	lsls	r3, r3, #3
 8015b3c:	440b      	add	r3, r1
 8015b3e:	3308      	adds	r3, #8
 8015b40:	6818      	ldr	r0, [r3, #0]
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	4613      	mov	r3, r2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	4413      	add	r3, r2
 8015b4a:	00db      	lsls	r3, r3, #3
 8015b4c:	4a08      	ldr	r2, [pc, #32]	; (8015b70 <etharp_tmr+0x14c>)
 8015b4e:	4413      	add	r3, r2
 8015b50:	3304      	adds	r3, #4
 8015b52:	4619      	mov	r1, r3
 8015b54:	f000 fe6e 	bl	8016834 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	607b      	str	r3, [r7, #4]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2b09      	cmp	r3, #9
 8015b62:	f77f af65 	ble.w	8015a30 <etharp_tmr+0xc>
      }
    }
  }
}
 8015b66:	bf00      	nop
 8015b68:	bf00      	nop
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}
 8015b70:	2000d928 	.word	0x2000d928

08015b74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b08a      	sub	sp, #40	; 0x28
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	60f8      	str	r0, [r7, #12]
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	607a      	str	r2, [r7, #4]
 8015b80:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015b82:	230a      	movs	r3, #10
 8015b84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015b86:	230a      	movs	r3, #10
 8015b88:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015b8a:	230a      	movs	r3, #10
 8015b8c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015b92:	230a      	movs	r3, #10
 8015b94:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015b96:	2300      	movs	r3, #0
 8015b98:	83bb      	strh	r3, [r7, #28]
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	837b      	strh	r3, [r7, #26]
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	843b      	strh	r3, [r7, #32]
 8015ba6:	e0ae      	b.n	8015d06 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bac:	49a6      	ldr	r1, [pc, #664]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015bae:	4613      	mov	r3, r2
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	4413      	add	r3, r2
 8015bb4:	00db      	lsls	r3, r3, #3
 8015bb6:	440b      	add	r3, r1
 8015bb8:	3314      	adds	r3, #20
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015bbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bc2:	2b0a      	cmp	r3, #10
 8015bc4:	d105      	bne.n	8015bd2 <etharp_find_entry+0x5e>
 8015bc6:	7dfb      	ldrb	r3, [r7, #23]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d102      	bne.n	8015bd2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015bcc:	8c3b      	ldrh	r3, [r7, #32]
 8015bce:	847b      	strh	r3, [r7, #34]	; 0x22
 8015bd0:	e095      	b.n	8015cfe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015bd2:	7dfb      	ldrb	r3, [r7, #23]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	f000 8092 	beq.w	8015cfe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015bda:	7dfb      	ldrb	r3, [r7, #23]
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d009      	beq.n	8015bf4 <etharp_find_entry+0x80>
 8015be0:	7dfb      	ldrb	r3, [r7, #23]
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	d806      	bhi.n	8015bf4 <etharp_find_entry+0x80>
 8015be6:	4b99      	ldr	r3, [pc, #612]	; (8015e4c <etharp_find_entry+0x2d8>)
 8015be8:	f240 1223 	movw	r2, #291	; 0x123
 8015bec:	4998      	ldr	r1, [pc, #608]	; (8015e50 <etharp_find_entry+0x2dc>)
 8015bee:	4899      	ldr	r0, [pc, #612]	; (8015e54 <etharp_find_entry+0x2e0>)
 8015bf0:	f002 fdd0 	bl	8018794 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d020      	beq.n	8015c3c <etharp_find_entry+0xc8>
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	6819      	ldr	r1, [r3, #0]
 8015bfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c02:	4891      	ldr	r0, [pc, #580]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015c04:	4613      	mov	r3, r2
 8015c06:	005b      	lsls	r3, r3, #1
 8015c08:	4413      	add	r3, r2
 8015c0a:	00db      	lsls	r3, r3, #3
 8015c0c:	4403      	add	r3, r0
 8015c0e:	3304      	adds	r3, #4
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	4299      	cmp	r1, r3
 8015c14:	d112      	bne.n	8015c3c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d00c      	beq.n	8015c36 <etharp_find_entry+0xc2>
 8015c1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c20:	4989      	ldr	r1, [pc, #548]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015c22:	4613      	mov	r3, r2
 8015c24:	005b      	lsls	r3, r3, #1
 8015c26:	4413      	add	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	440b      	add	r3, r1
 8015c2c:	3308      	adds	r3, #8
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d102      	bne.n	8015c3c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c3a:	e100      	b.n	8015e3e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c3c:	7dfb      	ldrb	r3, [r7, #23]
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d140      	bne.n	8015cc4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c46:	4980      	ldr	r1, [pc, #512]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015c48:	4613      	mov	r3, r2
 8015c4a:	005b      	lsls	r3, r3, #1
 8015c4c:	4413      	add	r3, r2
 8015c4e:	00db      	lsls	r3, r3, #3
 8015c50:	440b      	add	r3, r1
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d01a      	beq.n	8015c8e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c5c:	497a      	ldr	r1, [pc, #488]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015c5e:	4613      	mov	r3, r2
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	4413      	add	r3, r2
 8015c64:	00db      	lsls	r3, r3, #3
 8015c66:	440b      	add	r3, r1
 8015c68:	3312      	adds	r3, #18
 8015c6a:	881b      	ldrh	r3, [r3, #0]
 8015c6c:	8bba      	ldrh	r2, [r7, #28]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d845      	bhi.n	8015cfe <etharp_find_entry+0x18a>
            old_queue = i;
 8015c72:	8c3b      	ldrh	r3, [r7, #32]
 8015c74:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c7a:	4973      	ldr	r1, [pc, #460]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	005b      	lsls	r3, r3, #1
 8015c80:	4413      	add	r3, r2
 8015c82:	00db      	lsls	r3, r3, #3
 8015c84:	440b      	add	r3, r1
 8015c86:	3312      	adds	r3, #18
 8015c88:	881b      	ldrh	r3, [r3, #0]
 8015c8a:	83bb      	strh	r3, [r7, #28]
 8015c8c:	e037      	b.n	8015cfe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c92:	496d      	ldr	r1, [pc, #436]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015c94:	4613      	mov	r3, r2
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	4413      	add	r3, r2
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	440b      	add	r3, r1
 8015c9e:	3312      	adds	r3, #18
 8015ca0:	881b      	ldrh	r3, [r3, #0]
 8015ca2:	8b7a      	ldrh	r2, [r7, #26]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d82a      	bhi.n	8015cfe <etharp_find_entry+0x18a>
            old_pending = i;
 8015ca8:	8c3b      	ldrh	r3, [r7, #32]
 8015caa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015cac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb0:	4965      	ldr	r1, [pc, #404]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	4413      	add	r3, r2
 8015cb8:	00db      	lsls	r3, r3, #3
 8015cba:	440b      	add	r3, r1
 8015cbc:	3312      	adds	r3, #18
 8015cbe:	881b      	ldrh	r3, [r3, #0]
 8015cc0:	837b      	strh	r3, [r7, #26]
 8015cc2:	e01c      	b.n	8015cfe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015cc4:	7dfb      	ldrb	r3, [r7, #23]
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d919      	bls.n	8015cfe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015cca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cce:	495e      	ldr	r1, [pc, #376]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	005b      	lsls	r3, r3, #1
 8015cd4:	4413      	add	r3, r2
 8015cd6:	00db      	lsls	r3, r3, #3
 8015cd8:	440b      	add	r3, r1
 8015cda:	3312      	adds	r3, #18
 8015cdc:	881b      	ldrh	r3, [r3, #0]
 8015cde:	8b3a      	ldrh	r2, [r7, #24]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d80c      	bhi.n	8015cfe <etharp_find_entry+0x18a>
            old_stable = i;
 8015ce4:	8c3b      	ldrh	r3, [r7, #32]
 8015ce6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cec:	4956      	ldr	r1, [pc, #344]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015cee:	4613      	mov	r3, r2
 8015cf0:	005b      	lsls	r3, r3, #1
 8015cf2:	4413      	add	r3, r2
 8015cf4:	00db      	lsls	r3, r3, #3
 8015cf6:	440b      	add	r3, r1
 8015cf8:	3312      	adds	r3, #18
 8015cfa:	881b      	ldrh	r3, [r3, #0]
 8015cfc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cfe:	8c3b      	ldrh	r3, [r7, #32]
 8015d00:	3301      	adds	r3, #1
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	843b      	strh	r3, [r7, #32]
 8015d06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d0a:	2b09      	cmp	r3, #9
 8015d0c:	f77f af4c 	ble.w	8015ba8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015d10:	7afb      	ldrb	r3, [r7, #11]
 8015d12:	f003 0302 	and.w	r3, r3, #2
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d108      	bne.n	8015d2c <etharp_find_entry+0x1b8>
 8015d1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d1e:	2b0a      	cmp	r3, #10
 8015d20:	d107      	bne.n	8015d32 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d22:	7afb      	ldrb	r3, [r7, #11]
 8015d24:	f003 0301 	and.w	r3, r3, #1
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d102      	bne.n	8015d32 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d30:	e085      	b.n	8015e3e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d36:	2b09      	cmp	r3, #9
 8015d38:	dc02      	bgt.n	8015d40 <etharp_find_entry+0x1cc>
    i = empty;
 8015d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d3c:	843b      	strh	r3, [r7, #32]
 8015d3e:	e039      	b.n	8015db4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d40:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015d44:	2b09      	cmp	r3, #9
 8015d46:	dc14      	bgt.n	8015d72 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d4a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d50:	493d      	ldr	r1, [pc, #244]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015d52:	4613      	mov	r3, r2
 8015d54:	005b      	lsls	r3, r3, #1
 8015d56:	4413      	add	r3, r2
 8015d58:	00db      	lsls	r3, r3, #3
 8015d5a:	440b      	add	r3, r1
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d018      	beq.n	8015d94 <etharp_find_entry+0x220>
 8015d62:	4b3a      	ldr	r3, [pc, #232]	; (8015e4c <etharp_find_entry+0x2d8>)
 8015d64:	f240 126d 	movw	r2, #365	; 0x16d
 8015d68:	493b      	ldr	r1, [pc, #236]	; (8015e58 <etharp_find_entry+0x2e4>)
 8015d6a:	483a      	ldr	r0, [pc, #232]	; (8015e54 <etharp_find_entry+0x2e0>)
 8015d6c:	f002 fd12 	bl	8018794 <iprintf>
 8015d70:	e010      	b.n	8015d94 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015d72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015d76:	2b09      	cmp	r3, #9
 8015d78:	dc02      	bgt.n	8015d80 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015d7c:	843b      	strh	r3, [r7, #32]
 8015d7e:	e009      	b.n	8015d94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015d80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015d84:	2b09      	cmp	r3, #9
 8015d86:	dc02      	bgt.n	8015d8e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015d88:	8bfb      	ldrh	r3, [r7, #30]
 8015d8a:	843b      	strh	r3, [r7, #32]
 8015d8c:	e002      	b.n	8015d94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d92:	e054      	b.n	8015e3e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d98:	2b09      	cmp	r3, #9
 8015d9a:	dd06      	ble.n	8015daa <etharp_find_entry+0x236>
 8015d9c:	4b2b      	ldr	r3, [pc, #172]	; (8015e4c <etharp_find_entry+0x2d8>)
 8015d9e:	f240 127f 	movw	r2, #383	; 0x17f
 8015da2:	492e      	ldr	r1, [pc, #184]	; (8015e5c <etharp_find_entry+0x2e8>)
 8015da4:	482b      	ldr	r0, [pc, #172]	; (8015e54 <etharp_find_entry+0x2e0>)
 8015da6:	f002 fcf5 	bl	8018794 <iprintf>
    etharp_free_entry(i);
 8015daa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7ff fe06 	bl	80159c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015db4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015db8:	2b09      	cmp	r3, #9
 8015dba:	dd06      	ble.n	8015dca <etharp_find_entry+0x256>
 8015dbc:	4b23      	ldr	r3, [pc, #140]	; (8015e4c <etharp_find_entry+0x2d8>)
 8015dbe:	f240 1283 	movw	r2, #387	; 0x183
 8015dc2:	4926      	ldr	r1, [pc, #152]	; (8015e5c <etharp_find_entry+0x2e8>)
 8015dc4:	4823      	ldr	r0, [pc, #140]	; (8015e54 <etharp_find_entry+0x2e0>)
 8015dc6:	f002 fce5 	bl	8018794 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015dca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dce:	491e      	ldr	r1, [pc, #120]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015dd0:	4613      	mov	r3, r2
 8015dd2:	005b      	lsls	r3, r3, #1
 8015dd4:	4413      	add	r3, r2
 8015dd6:	00db      	lsls	r3, r3, #3
 8015dd8:	440b      	add	r3, r1
 8015dda:	3314      	adds	r3, #20
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d006      	beq.n	8015df0 <etharp_find_entry+0x27c>
 8015de2:	4b1a      	ldr	r3, [pc, #104]	; (8015e4c <etharp_find_entry+0x2d8>)
 8015de4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015de8:	491d      	ldr	r1, [pc, #116]	; (8015e60 <etharp_find_entry+0x2ec>)
 8015dea:	481a      	ldr	r0, [pc, #104]	; (8015e54 <etharp_find_entry+0x2e0>)
 8015dec:	f002 fcd2 	bl	8018794 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d00b      	beq.n	8015e0e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	6819      	ldr	r1, [r3, #0]
 8015dfe:	4812      	ldr	r0, [pc, #72]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015e00:	4613      	mov	r3, r2
 8015e02:	005b      	lsls	r3, r3, #1
 8015e04:	4413      	add	r3, r2
 8015e06:	00db      	lsls	r3, r3, #3
 8015e08:	4403      	add	r3, r0
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e12:	490d      	ldr	r1, [pc, #52]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015e14:	4613      	mov	r3, r2
 8015e16:	005b      	lsls	r3, r3, #1
 8015e18:	4413      	add	r3, r2
 8015e1a:	00db      	lsls	r3, r3, #3
 8015e1c:	440b      	add	r3, r1
 8015e1e:	3312      	adds	r3, #18
 8015e20:	2200      	movs	r2, #0
 8015e22:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e28:	4907      	ldr	r1, [pc, #28]	; (8015e48 <etharp_find_entry+0x2d4>)
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	005b      	lsls	r3, r3, #1
 8015e2e:	4413      	add	r3, r2
 8015e30:	00db      	lsls	r3, r3, #3
 8015e32:	440b      	add	r3, r1
 8015e34:	3308      	adds	r3, #8
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3728      	adds	r7, #40	; 0x28
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	2000d928 	.word	0x2000d928
 8015e4c:	0801c81c 	.word	0x0801c81c
 8015e50:	0801c854 	.word	0x0801c854
 8015e54:	0801c894 	.word	0x0801c894
 8015e58:	0801c8bc 	.word	0x0801c8bc
 8015e5c:	0801c8d4 	.word	0x0801c8d4
 8015e60:	0801c8e8 	.word	0x0801c8e8

08015e64 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b088      	sub	sp, #32
 8015e68:	af02      	add	r7, sp, #8
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	607a      	str	r2, [r7, #4]
 8015e70:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015e78:	2b06      	cmp	r3, #6
 8015e7a:	d006      	beq.n	8015e8a <etharp_update_arp_entry+0x26>
 8015e7c:	4b48      	ldr	r3, [pc, #288]	; (8015fa0 <etharp_update_arp_entry+0x13c>)
 8015e7e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015e82:	4948      	ldr	r1, [pc, #288]	; (8015fa4 <etharp_update_arp_entry+0x140>)
 8015e84:	4848      	ldr	r0, [pc, #288]	; (8015fa8 <etharp_update_arp_entry+0x144>)
 8015e86:	f002 fc85 	bl	8018794 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d012      	beq.n	8015eb6 <etharp_update_arp_entry+0x52>
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d00e      	beq.n	8015eb6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	68f9      	ldr	r1, [r7, #12]
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f001 f8fe 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8015ea4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d105      	bne.n	8015eb6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015eb2:	2be0      	cmp	r3, #224	; 0xe0
 8015eb4:	d102      	bne.n	8015ebc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015eb6:	f06f 030f 	mvn.w	r3, #15
 8015eba:	e06c      	b.n	8015f96 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015ebc:	78fb      	ldrb	r3, [r7, #3]
 8015ebe:	68fa      	ldr	r2, [r7, #12]
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	68b8      	ldr	r0, [r7, #8]
 8015ec4:	f7ff fe56 	bl	8015b74 <etharp_find_entry>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015ecc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	da02      	bge.n	8015eda <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015ed4:	8afb      	ldrh	r3, [r7, #22]
 8015ed6:	b25b      	sxtb	r3, r3
 8015ed8:	e05d      	b.n	8015f96 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015eda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ede:	4933      	ldr	r1, [pc, #204]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	005b      	lsls	r3, r3, #1
 8015ee4:	4413      	add	r3, r2
 8015ee6:	00db      	lsls	r3, r3, #3
 8015ee8:	440b      	add	r3, r1
 8015eea:	3314      	adds	r3, #20
 8015eec:	2202      	movs	r2, #2
 8015eee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015ef0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ef4:	492d      	ldr	r1, [pc, #180]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	005b      	lsls	r3, r3, #1
 8015efa:	4413      	add	r3, r2
 8015efc:	00db      	lsls	r3, r3, #3
 8015efe:	440b      	add	r3, r1
 8015f00:	3308      	adds	r3, #8
 8015f02:	68fa      	ldr	r2, [r7, #12]
 8015f04:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f0a:	4613      	mov	r3, r2
 8015f0c:	005b      	lsls	r3, r3, #1
 8015f0e:	4413      	add	r3, r2
 8015f10:	00db      	lsls	r3, r3, #3
 8015f12:	3308      	adds	r3, #8
 8015f14:	4a25      	ldr	r2, [pc, #148]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015f16:	4413      	add	r3, r2
 8015f18:	3304      	adds	r3, #4
 8015f1a:	2206      	movs	r2, #6
 8015f1c:	6879      	ldr	r1, [r7, #4]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f002 fb28 	bl	8018574 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f28:	4920      	ldr	r1, [pc, #128]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	4413      	add	r3, r2
 8015f30:	00db      	lsls	r3, r3, #3
 8015f32:	440b      	add	r3, r1
 8015f34:	3312      	adds	r3, #18
 8015f36:	2200      	movs	r2, #0
 8015f38:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f3e:	491b      	ldr	r1, [pc, #108]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015f40:	4613      	mov	r3, r2
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	4413      	add	r3, r2
 8015f46:	00db      	lsls	r3, r3, #3
 8015f48:	440b      	add	r3, r1
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d021      	beq.n	8015f94 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f54:	4915      	ldr	r1, [pc, #84]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015f56:	4613      	mov	r3, r2
 8015f58:	005b      	lsls	r3, r3, #1
 8015f5a:	4413      	add	r3, r2
 8015f5c:	00db      	lsls	r3, r3, #3
 8015f5e:	440b      	add	r3, r1
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015f64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f68:	4910      	ldr	r1, [pc, #64]	; (8015fac <etharp_update_arp_entry+0x148>)
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	005b      	lsls	r3, r3, #1
 8015f6e:	4413      	add	r3, r2
 8015f70:	00db      	lsls	r3, r3, #3
 8015f72:	440b      	add	r3, r1
 8015f74:	2200      	movs	r2, #0
 8015f76:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f82:	9300      	str	r3, [sp, #0]
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6939      	ldr	r1, [r7, #16]
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	f001 ff97 	bl	8017ebc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015f8e:	6938      	ldr	r0, [r7, #16]
 8015f90:	f7f8 fc4c 	bl	800e82c <pbuf_free>
  }
  return ERR_OK;
 8015f94:	2300      	movs	r3, #0
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3718      	adds	r7, #24
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	0801c81c 	.word	0x0801c81c
 8015fa4:	0801c914 	.word	0x0801c914
 8015fa8:	0801c894 	.word	0x0801c894
 8015fac:	2000d928 	.word	0x2000d928

08015fb0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b084      	sub	sp, #16
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fb8:	2300      	movs	r3, #0
 8015fba:	60fb      	str	r3, [r7, #12]
 8015fbc:	e01e      	b.n	8015ffc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015fbe:	4913      	ldr	r1, [pc, #76]	; (801600c <etharp_cleanup_netif+0x5c>)
 8015fc0:	68fa      	ldr	r2, [r7, #12]
 8015fc2:	4613      	mov	r3, r2
 8015fc4:	005b      	lsls	r3, r3, #1
 8015fc6:	4413      	add	r3, r2
 8015fc8:	00db      	lsls	r3, r3, #3
 8015fca:	440b      	add	r3, r1
 8015fcc:	3314      	adds	r3, #20
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015fd2:	7afb      	ldrb	r3, [r7, #11]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d00e      	beq.n	8015ff6 <etharp_cleanup_netif+0x46>
 8015fd8:	490c      	ldr	r1, [pc, #48]	; (801600c <etharp_cleanup_netif+0x5c>)
 8015fda:	68fa      	ldr	r2, [r7, #12]
 8015fdc:	4613      	mov	r3, r2
 8015fde:	005b      	lsls	r3, r3, #1
 8015fe0:	4413      	add	r3, r2
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	440b      	add	r3, r1
 8015fe6:	3308      	adds	r3, #8
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d102      	bne.n	8015ff6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015ff0:	68f8      	ldr	r0, [r7, #12]
 8015ff2:	f7ff fce5 	bl	80159c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	60fb      	str	r3, [r7, #12]
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2b09      	cmp	r3, #9
 8016000:	dddd      	ble.n	8015fbe <etharp_cleanup_netif+0xe>
    }
  }
}
 8016002:	bf00      	nop
 8016004:	bf00      	nop
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	2000d928 	.word	0x2000d928

08016010 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016010:	b5b0      	push	{r4, r5, r7, lr}
 8016012:	b08a      	sub	sp, #40	; 0x28
 8016014:	af04      	add	r7, sp, #16
 8016016:	6078      	str	r0, [r7, #4]
 8016018:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d107      	bne.n	8016030 <etharp_input+0x20>
 8016020:	4b3d      	ldr	r3, [pc, #244]	; (8016118 <etharp_input+0x108>)
 8016022:	f240 228a 	movw	r2, #650	; 0x28a
 8016026:	493d      	ldr	r1, [pc, #244]	; (801611c <etharp_input+0x10c>)
 8016028:	483d      	ldr	r0, [pc, #244]	; (8016120 <etharp_input+0x110>)
 801602a:	f002 fbb3 	bl	8018794 <iprintf>
 801602e:	e06f      	b.n	8016110 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	685b      	ldr	r3, [r3, #4]
 8016034:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	881b      	ldrh	r3, [r3, #0]
 801603a:	b29b      	uxth	r3, r3
 801603c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016040:	d10c      	bne.n	801605c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016046:	2b06      	cmp	r3, #6
 8016048:	d108      	bne.n	801605c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801604e:	2b04      	cmp	r3, #4
 8016050:	d104      	bne.n	801605c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	885b      	ldrh	r3, [r3, #2]
 8016056:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016058:	2b08      	cmp	r3, #8
 801605a:	d003      	beq.n	8016064 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f7f8 fbe5 	bl	800e82c <pbuf_free>
    return;
 8016062:	e055      	b.n	8016110 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	330e      	adds	r3, #14
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	3318      	adds	r3, #24
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	3304      	adds	r3, #4
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d102      	bne.n	8016084 <etharp_input+0x74>
    for_us = 0;
 801607e:	2300      	movs	r3, #0
 8016080:	75fb      	strb	r3, [r7, #23]
 8016082:	e009      	b.n	8016098 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016084:	68ba      	ldr	r2, [r7, #8]
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	3304      	adds	r3, #4
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	429a      	cmp	r2, r3
 801608e:	bf0c      	ite	eq
 8016090:	2301      	moveq	r3, #1
 8016092:	2300      	movne	r3, #0
 8016094:	b2db      	uxtb	r3, r3
 8016096:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	f103 0208 	add.w	r2, r3, #8
 801609e:	7dfb      	ldrb	r3, [r7, #23]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d001      	beq.n	80160a8 <etharp_input+0x98>
 80160a4:	2301      	movs	r3, #1
 80160a6:	e000      	b.n	80160aa <etharp_input+0x9a>
 80160a8:	2302      	movs	r3, #2
 80160aa:	f107 010c 	add.w	r1, r7, #12
 80160ae:	6838      	ldr	r0, [r7, #0]
 80160b0:	f7ff fed8 	bl	8015e64 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	88db      	ldrh	r3, [r3, #6]
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160be:	d003      	beq.n	80160c8 <etharp_input+0xb8>
 80160c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160c4:	d01e      	beq.n	8016104 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80160c6:	e020      	b.n	801610a <etharp_input+0xfa>
      if (for_us) {
 80160c8:	7dfb      	ldrb	r3, [r7, #23]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d01c      	beq.n	8016108 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80160e4:	693a      	ldr	r2, [r7, #16]
 80160e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80160e8:	2102      	movs	r1, #2
 80160ea:	9103      	str	r1, [sp, #12]
 80160ec:	f107 010c 	add.w	r1, r7, #12
 80160f0:	9102      	str	r1, [sp, #8]
 80160f2:	9201      	str	r2, [sp, #4]
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	462b      	mov	r3, r5
 80160f8:	4622      	mov	r2, r4
 80160fa:	4601      	mov	r1, r0
 80160fc:	6838      	ldr	r0, [r7, #0]
 80160fe:	f000 faeb 	bl	80166d8 <etharp_raw>
      break;
 8016102:	e001      	b.n	8016108 <etharp_input+0xf8>
      break;
 8016104:	bf00      	nop
 8016106:	e000      	b.n	801610a <etharp_input+0xfa>
      break;
 8016108:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7f8 fb8e 	bl	800e82c <pbuf_free>
}
 8016110:	3718      	adds	r7, #24
 8016112:	46bd      	mov	sp, r7
 8016114:	bdb0      	pop	{r4, r5, r7, pc}
 8016116:	bf00      	nop
 8016118:	0801c81c 	.word	0x0801c81c
 801611c:	0801c96c 	.word	0x0801c96c
 8016120:	0801c894 	.word	0x0801c894

08016124 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af02      	add	r7, sp, #8
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	4613      	mov	r3, r2
 8016130:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016132:	79fa      	ldrb	r2, [r7, #7]
 8016134:	4944      	ldr	r1, [pc, #272]	; (8016248 <etharp_output_to_arp_index+0x124>)
 8016136:	4613      	mov	r3, r2
 8016138:	005b      	lsls	r3, r3, #1
 801613a:	4413      	add	r3, r2
 801613c:	00db      	lsls	r3, r3, #3
 801613e:	440b      	add	r3, r1
 8016140:	3314      	adds	r3, #20
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	2b01      	cmp	r3, #1
 8016146:	d806      	bhi.n	8016156 <etharp_output_to_arp_index+0x32>
 8016148:	4b40      	ldr	r3, [pc, #256]	; (801624c <etharp_output_to_arp_index+0x128>)
 801614a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801614e:	4940      	ldr	r1, [pc, #256]	; (8016250 <etharp_output_to_arp_index+0x12c>)
 8016150:	4840      	ldr	r0, [pc, #256]	; (8016254 <etharp_output_to_arp_index+0x130>)
 8016152:	f002 fb1f 	bl	8018794 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016156:	79fa      	ldrb	r2, [r7, #7]
 8016158:	493b      	ldr	r1, [pc, #236]	; (8016248 <etharp_output_to_arp_index+0x124>)
 801615a:	4613      	mov	r3, r2
 801615c:	005b      	lsls	r3, r3, #1
 801615e:	4413      	add	r3, r2
 8016160:	00db      	lsls	r3, r3, #3
 8016162:	440b      	add	r3, r1
 8016164:	3314      	adds	r3, #20
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	2b02      	cmp	r3, #2
 801616a:	d153      	bne.n	8016214 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801616c:	79fa      	ldrb	r2, [r7, #7]
 801616e:	4936      	ldr	r1, [pc, #216]	; (8016248 <etharp_output_to_arp_index+0x124>)
 8016170:	4613      	mov	r3, r2
 8016172:	005b      	lsls	r3, r3, #1
 8016174:	4413      	add	r3, r2
 8016176:	00db      	lsls	r3, r3, #3
 8016178:	440b      	add	r3, r1
 801617a:	3312      	adds	r3, #18
 801617c:	881b      	ldrh	r3, [r3, #0]
 801617e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016182:	d919      	bls.n	80161b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016184:	79fa      	ldrb	r2, [r7, #7]
 8016186:	4613      	mov	r3, r2
 8016188:	005b      	lsls	r3, r3, #1
 801618a:	4413      	add	r3, r2
 801618c:	00db      	lsls	r3, r3, #3
 801618e:	4a2e      	ldr	r2, [pc, #184]	; (8016248 <etharp_output_to_arp_index+0x124>)
 8016190:	4413      	add	r3, r2
 8016192:	3304      	adds	r3, #4
 8016194:	4619      	mov	r1, r3
 8016196:	68f8      	ldr	r0, [r7, #12]
 8016198:	f000 fb4c 	bl	8016834 <etharp_request>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d138      	bne.n	8016214 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161a2:	79fa      	ldrb	r2, [r7, #7]
 80161a4:	4928      	ldr	r1, [pc, #160]	; (8016248 <etharp_output_to_arp_index+0x124>)
 80161a6:	4613      	mov	r3, r2
 80161a8:	005b      	lsls	r3, r3, #1
 80161aa:	4413      	add	r3, r2
 80161ac:	00db      	lsls	r3, r3, #3
 80161ae:	440b      	add	r3, r1
 80161b0:	3314      	adds	r3, #20
 80161b2:	2203      	movs	r2, #3
 80161b4:	701a      	strb	r2, [r3, #0]
 80161b6:	e02d      	b.n	8016214 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80161b8:	79fa      	ldrb	r2, [r7, #7]
 80161ba:	4923      	ldr	r1, [pc, #140]	; (8016248 <etharp_output_to_arp_index+0x124>)
 80161bc:	4613      	mov	r3, r2
 80161be:	005b      	lsls	r3, r3, #1
 80161c0:	4413      	add	r3, r2
 80161c2:	00db      	lsls	r3, r3, #3
 80161c4:	440b      	add	r3, r1
 80161c6:	3312      	adds	r3, #18
 80161c8:	881b      	ldrh	r3, [r3, #0]
 80161ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80161ce:	d321      	bcc.n	8016214 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80161d0:	79fa      	ldrb	r2, [r7, #7]
 80161d2:	4613      	mov	r3, r2
 80161d4:	005b      	lsls	r3, r3, #1
 80161d6:	4413      	add	r3, r2
 80161d8:	00db      	lsls	r3, r3, #3
 80161da:	4a1b      	ldr	r2, [pc, #108]	; (8016248 <etharp_output_to_arp_index+0x124>)
 80161dc:	4413      	add	r3, r2
 80161de:	1d19      	adds	r1, r3, #4
 80161e0:	79fa      	ldrb	r2, [r7, #7]
 80161e2:	4613      	mov	r3, r2
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	4413      	add	r3, r2
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	3308      	adds	r3, #8
 80161ec:	4a16      	ldr	r2, [pc, #88]	; (8016248 <etharp_output_to_arp_index+0x124>)
 80161ee:	4413      	add	r3, r2
 80161f0:	3304      	adds	r3, #4
 80161f2:	461a      	mov	r2, r3
 80161f4:	68f8      	ldr	r0, [r7, #12]
 80161f6:	f000 fafb 	bl	80167f0 <etharp_request_dst>
 80161fa:	4603      	mov	r3, r0
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d109      	bne.n	8016214 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016200:	79fa      	ldrb	r2, [r7, #7]
 8016202:	4911      	ldr	r1, [pc, #68]	; (8016248 <etharp_output_to_arp_index+0x124>)
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	440b      	add	r3, r1
 801620e:	3314      	adds	r3, #20
 8016210:	2203      	movs	r2, #3
 8016212:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801621a:	79fa      	ldrb	r2, [r7, #7]
 801621c:	4613      	mov	r3, r2
 801621e:	005b      	lsls	r3, r3, #1
 8016220:	4413      	add	r3, r2
 8016222:	00db      	lsls	r3, r3, #3
 8016224:	3308      	adds	r3, #8
 8016226:	4a08      	ldr	r2, [pc, #32]	; (8016248 <etharp_output_to_arp_index+0x124>)
 8016228:	4413      	add	r3, r2
 801622a:	3304      	adds	r3, #4
 801622c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016230:	9200      	str	r2, [sp, #0]
 8016232:	460a      	mov	r2, r1
 8016234:	68b9      	ldr	r1, [r7, #8]
 8016236:	68f8      	ldr	r0, [r7, #12]
 8016238:	f001 fe40 	bl	8017ebc <ethernet_output>
 801623c:	4603      	mov	r3, r0
}
 801623e:	4618      	mov	r0, r3
 8016240:	3710      	adds	r7, #16
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}
 8016246:	bf00      	nop
 8016248:	2000d928 	.word	0x2000d928
 801624c:	0801c81c 	.word	0x0801c81c
 8016250:	0801c98c 	.word	0x0801c98c
 8016254:	0801c894 	.word	0x0801c894

08016258 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b08a      	sub	sp, #40	; 0x28
 801625c:	af02      	add	r7, sp, #8
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d106      	bne.n	801627c <etharp_output+0x24>
 801626e:	4b73      	ldr	r3, [pc, #460]	; (801643c <etharp_output+0x1e4>)
 8016270:	f240 321e 	movw	r2, #798	; 0x31e
 8016274:	4972      	ldr	r1, [pc, #456]	; (8016440 <etharp_output+0x1e8>)
 8016276:	4873      	ldr	r0, [pc, #460]	; (8016444 <etharp_output+0x1ec>)
 8016278:	f002 fa8c 	bl	8018794 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d106      	bne.n	8016290 <etharp_output+0x38>
 8016282:	4b6e      	ldr	r3, [pc, #440]	; (801643c <etharp_output+0x1e4>)
 8016284:	f240 321f 	movw	r2, #799	; 0x31f
 8016288:	496f      	ldr	r1, [pc, #444]	; (8016448 <etharp_output+0x1f0>)
 801628a:	486e      	ldr	r0, [pc, #440]	; (8016444 <etharp_output+0x1ec>)
 801628c:	f002 fa82 	bl	8018794 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d106      	bne.n	80162a4 <etharp_output+0x4c>
 8016296:	4b69      	ldr	r3, [pc, #420]	; (801643c <etharp_output+0x1e4>)
 8016298:	f44f 7248 	mov.w	r2, #800	; 0x320
 801629c:	496b      	ldr	r1, [pc, #428]	; (801644c <etharp_output+0x1f4>)
 801629e:	4869      	ldr	r0, [pc, #420]	; (8016444 <etharp_output+0x1ec>)
 80162a0:	f002 fa78 	bl	8018794 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	68f9      	ldr	r1, [r7, #12]
 80162aa:	4618      	mov	r0, r3
 80162ac:	f000 fef8 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 80162b0:	4603      	mov	r3, r0
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d002      	beq.n	80162bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80162b6:	4b66      	ldr	r3, [pc, #408]	; (8016450 <etharp_output+0x1f8>)
 80162b8:	61fb      	str	r3, [r7, #28]
 80162ba:	e0af      	b.n	801641c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162c4:	2be0      	cmp	r3, #224	; 0xe0
 80162c6:	d118      	bne.n	80162fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80162c8:	2301      	movs	r3, #1
 80162ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80162cc:	2300      	movs	r3, #0
 80162ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80162d0:	235e      	movs	r3, #94	; 0x5e
 80162d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	3301      	adds	r3, #1
 80162d8:	781b      	ldrb	r3, [r3, #0]
 80162da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162de:	b2db      	uxtb	r3, r3
 80162e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	3302      	adds	r3, #2
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	3303      	adds	r3, #3
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80162f2:	f107 0310 	add.w	r3, r7, #16
 80162f6:	61fb      	str	r3, [r7, #28]
 80162f8:	e090      	b.n	801641c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	3304      	adds	r3, #4
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	405a      	eors	r2, r3
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	3308      	adds	r3, #8
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	4013      	ands	r3, r2
 801630e:	2b00      	cmp	r3, #0
 8016310:	d012      	beq.n	8016338 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016318:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801631c:	4293      	cmp	r3, r2
 801631e:	d00b      	beq.n	8016338 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	330c      	adds	r3, #12
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d003      	beq.n	8016332 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	330c      	adds	r3, #12
 801632e:	61bb      	str	r3, [r7, #24]
 8016330:	e002      	b.n	8016338 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016332:	f06f 0303 	mvn.w	r3, #3
 8016336:	e07d      	b.n	8016434 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016338:	4b46      	ldr	r3, [pc, #280]	; (8016454 <etharp_output+0x1fc>)
 801633a:	781b      	ldrb	r3, [r3, #0]
 801633c:	4619      	mov	r1, r3
 801633e:	4a46      	ldr	r2, [pc, #280]	; (8016458 <etharp_output+0x200>)
 8016340:	460b      	mov	r3, r1
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	440b      	add	r3, r1
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	4413      	add	r3, r2
 801634a:	3314      	adds	r3, #20
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	2b01      	cmp	r3, #1
 8016350:	d925      	bls.n	801639e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016352:	4b40      	ldr	r3, [pc, #256]	; (8016454 <etharp_output+0x1fc>)
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	4619      	mov	r1, r3
 8016358:	4a3f      	ldr	r2, [pc, #252]	; (8016458 <etharp_output+0x200>)
 801635a:	460b      	mov	r3, r1
 801635c:	005b      	lsls	r3, r3, #1
 801635e:	440b      	add	r3, r1
 8016360:	00db      	lsls	r3, r3, #3
 8016362:	4413      	add	r3, r2
 8016364:	3308      	adds	r3, #8
 8016366:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	429a      	cmp	r2, r3
 801636c:	d117      	bne.n	801639e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	4b38      	ldr	r3, [pc, #224]	; (8016454 <etharp_output+0x1fc>)
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	4618      	mov	r0, r3
 8016378:	4937      	ldr	r1, [pc, #220]	; (8016458 <etharp_output+0x200>)
 801637a:	4603      	mov	r3, r0
 801637c:	005b      	lsls	r3, r3, #1
 801637e:	4403      	add	r3, r0
 8016380:	00db      	lsls	r3, r3, #3
 8016382:	440b      	add	r3, r1
 8016384:	3304      	adds	r3, #4
 8016386:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016388:	429a      	cmp	r2, r3
 801638a:	d108      	bne.n	801639e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801638c:	4b31      	ldr	r3, [pc, #196]	; (8016454 <etharp_output+0x1fc>)
 801638e:	781b      	ldrb	r3, [r3, #0]
 8016390:	461a      	mov	r2, r3
 8016392:	68b9      	ldr	r1, [r7, #8]
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f7ff fec5 	bl	8016124 <etharp_output_to_arp_index>
 801639a:	4603      	mov	r3, r0
 801639c:	e04a      	b.n	8016434 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801639e:	2300      	movs	r3, #0
 80163a0:	75fb      	strb	r3, [r7, #23]
 80163a2:	e031      	b.n	8016408 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163a4:	7dfa      	ldrb	r2, [r7, #23]
 80163a6:	492c      	ldr	r1, [pc, #176]	; (8016458 <etharp_output+0x200>)
 80163a8:	4613      	mov	r3, r2
 80163aa:	005b      	lsls	r3, r3, #1
 80163ac:	4413      	add	r3, r2
 80163ae:	00db      	lsls	r3, r3, #3
 80163b0:	440b      	add	r3, r1
 80163b2:	3314      	adds	r3, #20
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	2b01      	cmp	r3, #1
 80163b8:	d923      	bls.n	8016402 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80163ba:	7dfa      	ldrb	r2, [r7, #23]
 80163bc:	4926      	ldr	r1, [pc, #152]	; (8016458 <etharp_output+0x200>)
 80163be:	4613      	mov	r3, r2
 80163c0:	005b      	lsls	r3, r3, #1
 80163c2:	4413      	add	r3, r2
 80163c4:	00db      	lsls	r3, r3, #3
 80163c6:	440b      	add	r3, r1
 80163c8:	3308      	adds	r3, #8
 80163ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163cc:	68fa      	ldr	r2, [r7, #12]
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d117      	bne.n	8016402 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80163d2:	69bb      	ldr	r3, [r7, #24]
 80163d4:	6819      	ldr	r1, [r3, #0]
 80163d6:	7dfa      	ldrb	r2, [r7, #23]
 80163d8:	481f      	ldr	r0, [pc, #124]	; (8016458 <etharp_output+0x200>)
 80163da:	4613      	mov	r3, r2
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	4413      	add	r3, r2
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	4403      	add	r3, r0
 80163e4:	3304      	adds	r3, #4
 80163e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80163e8:	4299      	cmp	r1, r3
 80163ea:	d10a      	bne.n	8016402 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80163ec:	4a19      	ldr	r2, [pc, #100]	; (8016454 <etharp_output+0x1fc>)
 80163ee:	7dfb      	ldrb	r3, [r7, #23]
 80163f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
 80163f4:	461a      	mov	r2, r3
 80163f6:	68b9      	ldr	r1, [r7, #8]
 80163f8:	68f8      	ldr	r0, [r7, #12]
 80163fa:	f7ff fe93 	bl	8016124 <etharp_output_to_arp_index>
 80163fe:	4603      	mov	r3, r0
 8016400:	e018      	b.n	8016434 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016402:	7dfb      	ldrb	r3, [r7, #23]
 8016404:	3301      	adds	r3, #1
 8016406:	75fb      	strb	r3, [r7, #23]
 8016408:	7dfb      	ldrb	r3, [r7, #23]
 801640a:	2b09      	cmp	r3, #9
 801640c:	d9ca      	bls.n	80163a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801640e:	68ba      	ldr	r2, [r7, #8]
 8016410:	69b9      	ldr	r1, [r7, #24]
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	f000 f822 	bl	801645c <etharp_query>
 8016418:	4603      	mov	r3, r0
 801641a:	e00b      	b.n	8016434 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016426:	9300      	str	r3, [sp, #0]
 8016428:	69fb      	ldr	r3, [r7, #28]
 801642a:	68b9      	ldr	r1, [r7, #8]
 801642c:	68f8      	ldr	r0, [r7, #12]
 801642e:	f001 fd45 	bl	8017ebc <ethernet_output>
 8016432:	4603      	mov	r3, r0
}
 8016434:	4618      	mov	r0, r3
 8016436:	3720      	adds	r7, #32
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}
 801643c:	0801c81c 	.word	0x0801c81c
 8016440:	0801c96c 	.word	0x0801c96c
 8016444:	0801c894 	.word	0x0801c894
 8016448:	0801c9bc 	.word	0x0801c9bc
 801644c:	0801c95c 	.word	0x0801c95c
 8016450:	0801d018 	.word	0x0801d018
 8016454:	2000da18 	.word	0x2000da18
 8016458:	2000d928 	.word	0x2000d928

0801645c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b08c      	sub	sp, #48	; 0x30
 8016460:	af02      	add	r7, sp, #8
 8016462:	60f8      	str	r0, [r7, #12]
 8016464:	60b9      	str	r1, [r7, #8]
 8016466:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	3326      	adds	r3, #38	; 0x26
 801646c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801646e:	23ff      	movs	r3, #255	; 0xff
 8016470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016474:	2300      	movs	r3, #0
 8016476:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	68f9      	ldr	r1, [r7, #12]
 801647e:	4618      	mov	r0, r3
 8016480:	f000 fe0e 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	d10c      	bne.n	80164a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016492:	2be0      	cmp	r3, #224	; 0xe0
 8016494:	d006      	beq.n	80164a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d003      	beq.n	80164a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d102      	bne.n	80164aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164a4:	f06f 030f 	mvn.w	r3, #15
 80164a8:	e101      	b.n	80166ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80164aa:	68fa      	ldr	r2, [r7, #12]
 80164ac:	2101      	movs	r1, #1
 80164ae:	68b8      	ldr	r0, [r7, #8]
 80164b0:	f7ff fb60 	bl	8015b74 <etharp_find_entry>
 80164b4:	4603      	mov	r3, r0
 80164b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80164b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	da02      	bge.n	80164c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80164c0:	8a7b      	ldrh	r3, [r7, #18]
 80164c2:	b25b      	sxtb	r3, r3
 80164c4:	e0f3      	b.n	80166ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80164c6:	8a7b      	ldrh	r3, [r7, #18]
 80164c8:	2b7e      	cmp	r3, #126	; 0x7e
 80164ca:	d906      	bls.n	80164da <etharp_query+0x7e>
 80164cc:	4b7a      	ldr	r3, [pc, #488]	; (80166b8 <etharp_query+0x25c>)
 80164ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 80164d2:	497a      	ldr	r1, [pc, #488]	; (80166bc <etharp_query+0x260>)
 80164d4:	487a      	ldr	r0, [pc, #488]	; (80166c0 <etharp_query+0x264>)
 80164d6:	f002 f95d 	bl	8018794 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80164da:	8a7b      	ldrh	r3, [r7, #18]
 80164dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80164de:	7c7a      	ldrb	r2, [r7, #17]
 80164e0:	4978      	ldr	r1, [pc, #480]	; (80166c4 <etharp_query+0x268>)
 80164e2:	4613      	mov	r3, r2
 80164e4:	005b      	lsls	r3, r3, #1
 80164e6:	4413      	add	r3, r2
 80164e8:	00db      	lsls	r3, r3, #3
 80164ea:	440b      	add	r3, r1
 80164ec:	3314      	adds	r3, #20
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d115      	bne.n	8016520 <etharp_query+0xc4>
    is_new_entry = 1;
 80164f4:	2301      	movs	r3, #1
 80164f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80164f8:	7c7a      	ldrb	r2, [r7, #17]
 80164fa:	4972      	ldr	r1, [pc, #456]	; (80166c4 <etharp_query+0x268>)
 80164fc:	4613      	mov	r3, r2
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	4413      	add	r3, r2
 8016502:	00db      	lsls	r3, r3, #3
 8016504:	440b      	add	r3, r1
 8016506:	3314      	adds	r3, #20
 8016508:	2201      	movs	r2, #1
 801650a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801650c:	7c7a      	ldrb	r2, [r7, #17]
 801650e:	496d      	ldr	r1, [pc, #436]	; (80166c4 <etharp_query+0x268>)
 8016510:	4613      	mov	r3, r2
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	4413      	add	r3, r2
 8016516:	00db      	lsls	r3, r3, #3
 8016518:	440b      	add	r3, r1
 801651a:	3308      	adds	r3, #8
 801651c:	68fa      	ldr	r2, [r7, #12]
 801651e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016520:	7c7a      	ldrb	r2, [r7, #17]
 8016522:	4968      	ldr	r1, [pc, #416]	; (80166c4 <etharp_query+0x268>)
 8016524:	4613      	mov	r3, r2
 8016526:	005b      	lsls	r3, r3, #1
 8016528:	4413      	add	r3, r2
 801652a:	00db      	lsls	r3, r3, #3
 801652c:	440b      	add	r3, r1
 801652e:	3314      	adds	r3, #20
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	2b01      	cmp	r3, #1
 8016534:	d011      	beq.n	801655a <etharp_query+0xfe>
 8016536:	7c7a      	ldrb	r2, [r7, #17]
 8016538:	4962      	ldr	r1, [pc, #392]	; (80166c4 <etharp_query+0x268>)
 801653a:	4613      	mov	r3, r2
 801653c:	005b      	lsls	r3, r3, #1
 801653e:	4413      	add	r3, r2
 8016540:	00db      	lsls	r3, r3, #3
 8016542:	440b      	add	r3, r1
 8016544:	3314      	adds	r3, #20
 8016546:	781b      	ldrb	r3, [r3, #0]
 8016548:	2b01      	cmp	r3, #1
 801654a:	d806      	bhi.n	801655a <etharp_query+0xfe>
 801654c:	4b5a      	ldr	r3, [pc, #360]	; (80166b8 <etharp_query+0x25c>)
 801654e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016552:	495d      	ldr	r1, [pc, #372]	; (80166c8 <etharp_query+0x26c>)
 8016554:	485a      	ldr	r0, [pc, #360]	; (80166c0 <etharp_query+0x264>)
 8016556:	f002 f91d 	bl	8018794 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801655a:	6a3b      	ldr	r3, [r7, #32]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d102      	bne.n	8016566 <etharp_query+0x10a>
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d10c      	bne.n	8016580 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016566:	68b9      	ldr	r1, [r7, #8]
 8016568:	68f8      	ldr	r0, [r7, #12]
 801656a:	f000 f963 	bl	8016834 <etharp_request>
 801656e:	4603      	mov	r3, r0
 8016570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d102      	bne.n	8016580 <etharp_query+0x124>
      return result;
 801657a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801657e:	e096      	b.n	80166ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d106      	bne.n	8016594 <etharp_query+0x138>
 8016586:	4b4c      	ldr	r3, [pc, #304]	; (80166b8 <etharp_query+0x25c>)
 8016588:	f240 32e1 	movw	r2, #993	; 0x3e1
 801658c:	494f      	ldr	r1, [pc, #316]	; (80166cc <etharp_query+0x270>)
 801658e:	484c      	ldr	r0, [pc, #304]	; (80166c0 <etharp_query+0x264>)
 8016590:	f002 f900 	bl	8018794 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016594:	7c7a      	ldrb	r2, [r7, #17]
 8016596:	494b      	ldr	r1, [pc, #300]	; (80166c4 <etharp_query+0x268>)
 8016598:	4613      	mov	r3, r2
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	4413      	add	r3, r2
 801659e:	00db      	lsls	r3, r3, #3
 80165a0:	440b      	add	r3, r1
 80165a2:	3314      	adds	r3, #20
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d917      	bls.n	80165da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80165aa:	4a49      	ldr	r2, [pc, #292]	; (80166d0 <etharp_query+0x274>)
 80165ac:	7c7b      	ldrb	r3, [r7, #17]
 80165ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80165b0:	7c7a      	ldrb	r2, [r7, #17]
 80165b2:	4613      	mov	r3, r2
 80165b4:	005b      	lsls	r3, r3, #1
 80165b6:	4413      	add	r3, r2
 80165b8:	00db      	lsls	r3, r3, #3
 80165ba:	3308      	adds	r3, #8
 80165bc:	4a41      	ldr	r2, [pc, #260]	; (80166c4 <etharp_query+0x268>)
 80165be:	4413      	add	r3, r2
 80165c0:	3304      	adds	r3, #4
 80165c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165c6:	9200      	str	r2, [sp, #0]
 80165c8:	697a      	ldr	r2, [r7, #20]
 80165ca:	6879      	ldr	r1, [r7, #4]
 80165cc:	68f8      	ldr	r0, [r7, #12]
 80165ce:	f001 fc75 	bl	8017ebc <ethernet_output>
 80165d2:	4603      	mov	r3, r0
 80165d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80165d8:	e067      	b.n	80166aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80165da:	7c7a      	ldrb	r2, [r7, #17]
 80165dc:	4939      	ldr	r1, [pc, #228]	; (80166c4 <etharp_query+0x268>)
 80165de:	4613      	mov	r3, r2
 80165e0:	005b      	lsls	r3, r3, #1
 80165e2:	4413      	add	r3, r2
 80165e4:	00db      	lsls	r3, r3, #3
 80165e6:	440b      	add	r3, r1
 80165e8:	3314      	adds	r3, #20
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	2b01      	cmp	r3, #1
 80165ee:	d15c      	bne.n	80166aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80165f0:	2300      	movs	r3, #0
 80165f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80165f8:	e01c      	b.n	8016634 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80165fa:	69fb      	ldr	r3, [r7, #28]
 80165fc:	895a      	ldrh	r2, [r3, #10]
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	891b      	ldrh	r3, [r3, #8]
 8016602:	429a      	cmp	r2, r3
 8016604:	d10a      	bne.n	801661c <etharp_query+0x1c0>
 8016606:	69fb      	ldr	r3, [r7, #28]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d006      	beq.n	801661c <etharp_query+0x1c0>
 801660e:	4b2a      	ldr	r3, [pc, #168]	; (80166b8 <etharp_query+0x25c>)
 8016610:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016614:	492f      	ldr	r1, [pc, #188]	; (80166d4 <etharp_query+0x278>)
 8016616:	482a      	ldr	r0, [pc, #168]	; (80166c0 <etharp_query+0x264>)
 8016618:	f002 f8bc 	bl	8018794 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	7b1b      	ldrb	r3, [r3, #12]
 8016620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016624:	2b00      	cmp	r3, #0
 8016626:	d002      	beq.n	801662e <etharp_query+0x1d2>
        copy_needed = 1;
 8016628:	2301      	movs	r3, #1
 801662a:	61bb      	str	r3, [r7, #24]
        break;
 801662c:	e005      	b.n	801663a <etharp_query+0x1de>
      }
      p = p->next;
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016634:	69fb      	ldr	r3, [r7, #28]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d1df      	bne.n	80165fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801663a:	69bb      	ldr	r3, [r7, #24]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d007      	beq.n	8016650 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016640:	687a      	ldr	r2, [r7, #4]
 8016642:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016646:	200e      	movs	r0, #14
 8016648:	f7f8 fb68 	bl	800ed1c <pbuf_clone>
 801664c:	61f8      	str	r0, [r7, #28]
 801664e:	e004      	b.n	801665a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016654:	69f8      	ldr	r0, [r7, #28]
 8016656:	f7f8 f98f 	bl	800e978 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801665a:	69fb      	ldr	r3, [r7, #28]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d021      	beq.n	80166a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016660:	7c7a      	ldrb	r2, [r7, #17]
 8016662:	4918      	ldr	r1, [pc, #96]	; (80166c4 <etharp_query+0x268>)
 8016664:	4613      	mov	r3, r2
 8016666:	005b      	lsls	r3, r3, #1
 8016668:	4413      	add	r3, r2
 801666a:	00db      	lsls	r3, r3, #3
 801666c:	440b      	add	r3, r1
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d00a      	beq.n	801668a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016674:	7c7a      	ldrb	r2, [r7, #17]
 8016676:	4913      	ldr	r1, [pc, #76]	; (80166c4 <etharp_query+0x268>)
 8016678:	4613      	mov	r3, r2
 801667a:	005b      	lsls	r3, r3, #1
 801667c:	4413      	add	r3, r2
 801667e:	00db      	lsls	r3, r3, #3
 8016680:	440b      	add	r3, r1
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	4618      	mov	r0, r3
 8016686:	f7f8 f8d1 	bl	800e82c <pbuf_free>
      }
      arp_table[i].q = p;
 801668a:	7c7a      	ldrb	r2, [r7, #17]
 801668c:	490d      	ldr	r1, [pc, #52]	; (80166c4 <etharp_query+0x268>)
 801668e:	4613      	mov	r3, r2
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	4413      	add	r3, r2
 8016694:	00db      	lsls	r3, r3, #3
 8016696:	440b      	add	r3, r1
 8016698:	69fa      	ldr	r2, [r7, #28]
 801669a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801669c:	2300      	movs	r3, #0
 801669e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166a2:	e002      	b.n	80166aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80166a4:	23ff      	movs	r3, #255	; 0xff
 80166a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80166aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3728      	adds	r7, #40	; 0x28
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	0801c81c 	.word	0x0801c81c
 80166bc:	0801c9c8 	.word	0x0801c9c8
 80166c0:	0801c894 	.word	0x0801c894
 80166c4:	2000d928 	.word	0x2000d928
 80166c8:	0801c9d8 	.word	0x0801c9d8
 80166cc:	0801c9bc 	.word	0x0801c9bc
 80166d0:	2000da18 	.word	0x2000da18
 80166d4:	0801ca00 	.word	0x0801ca00

080166d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b08a      	sub	sp, #40	; 0x28
 80166dc:	af02      	add	r7, sp, #8
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	607a      	str	r2, [r7, #4]
 80166e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80166e6:	2300      	movs	r3, #0
 80166e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d106      	bne.n	80166fe <etharp_raw+0x26>
 80166f0:	4b3a      	ldr	r3, [pc, #232]	; (80167dc <etharp_raw+0x104>)
 80166f2:	f240 4257 	movw	r2, #1111	; 0x457
 80166f6:	493a      	ldr	r1, [pc, #232]	; (80167e0 <etharp_raw+0x108>)
 80166f8:	483a      	ldr	r0, [pc, #232]	; (80167e4 <etharp_raw+0x10c>)
 80166fa:	f002 f84b 	bl	8018794 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80166fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016702:	211c      	movs	r1, #28
 8016704:	200e      	movs	r0, #14
 8016706:	f7f7 fdad 	bl	800e264 <pbuf_alloc>
 801670a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d102      	bne.n	8016718 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016712:	f04f 33ff 	mov.w	r3, #4294967295
 8016716:	e05d      	b.n	80167d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	895b      	ldrh	r3, [r3, #10]
 801671c:	2b1b      	cmp	r3, #27
 801671e:	d806      	bhi.n	801672e <etharp_raw+0x56>
 8016720:	4b2e      	ldr	r3, [pc, #184]	; (80167dc <etharp_raw+0x104>)
 8016722:	f240 4262 	movw	r2, #1122	; 0x462
 8016726:	4930      	ldr	r1, [pc, #192]	; (80167e8 <etharp_raw+0x110>)
 8016728:	482e      	ldr	r0, [pc, #184]	; (80167e4 <etharp_raw+0x10c>)
 801672a:	f002 f833 	bl	8018794 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801672e:	69bb      	ldr	r3, [r7, #24]
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016734:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016736:	4618      	mov	r0, r3
 8016738:	f7f6 fd30 	bl	800d19c <lwip_htons>
 801673c:	4603      	mov	r3, r0
 801673e:	461a      	mov	r2, r3
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801674a:	2b06      	cmp	r3, #6
 801674c:	d006      	beq.n	801675c <etharp_raw+0x84>
 801674e:	4b23      	ldr	r3, [pc, #140]	; (80167dc <etharp_raw+0x104>)
 8016750:	f240 4269 	movw	r2, #1129	; 0x469
 8016754:	4925      	ldr	r1, [pc, #148]	; (80167ec <etharp_raw+0x114>)
 8016756:	4823      	ldr	r0, [pc, #140]	; (80167e4 <etharp_raw+0x10c>)
 8016758:	f002 f81c 	bl	8018794 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	3308      	adds	r3, #8
 8016760:	2206      	movs	r2, #6
 8016762:	6839      	ldr	r1, [r7, #0]
 8016764:	4618      	mov	r0, r3
 8016766:	f001 ff05 	bl	8018574 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	3312      	adds	r3, #18
 801676e:	2206      	movs	r2, #6
 8016770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016772:	4618      	mov	r0, r3
 8016774:	f001 fefe 	bl	8018574 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	330e      	adds	r3, #14
 801677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801677e:	6812      	ldr	r2, [r2, #0]
 8016780:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	3318      	adds	r3, #24
 8016786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016788:	6812      	ldr	r2, [r2, #0]
 801678a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	2200      	movs	r2, #0
 8016790:	701a      	strb	r2, [r3, #0]
 8016792:	2200      	movs	r2, #0
 8016794:	f042 0201 	orr.w	r2, r2, #1
 8016798:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	2200      	movs	r2, #0
 801679e:	f042 0208 	orr.w	r2, r2, #8
 80167a2:	709a      	strb	r2, [r3, #2]
 80167a4:	2200      	movs	r2, #0
 80167a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	2206      	movs	r2, #6
 80167ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80167ae:	697b      	ldr	r3, [r7, #20]
 80167b0:	2204      	movs	r2, #4
 80167b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80167b4:	f640 0306 	movw	r3, #2054	; 0x806
 80167b8:	9300      	str	r3, [sp, #0]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	69b9      	ldr	r1, [r7, #24]
 80167c0:	68f8      	ldr	r0, [r7, #12]
 80167c2:	f001 fb7b 	bl	8017ebc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80167c6:	69b8      	ldr	r0, [r7, #24]
 80167c8:	f7f8 f830 	bl	800e82c <pbuf_free>
  p = NULL;
 80167cc:	2300      	movs	r3, #0
 80167ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80167d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3720      	adds	r7, #32
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	0801c81c 	.word	0x0801c81c
 80167e0:	0801c96c 	.word	0x0801c96c
 80167e4:	0801c894 	.word	0x0801c894
 80167e8:	0801ca1c 	.word	0x0801ca1c
 80167ec:	0801ca50 	.word	0x0801ca50

080167f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b088      	sub	sp, #32
 80167f4:	af04      	add	r7, sp, #16
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801680c:	2201      	movs	r2, #1
 801680e:	9203      	str	r2, [sp, #12]
 8016810:	68ba      	ldr	r2, [r7, #8]
 8016812:	9202      	str	r2, [sp, #8]
 8016814:	4a06      	ldr	r2, [pc, #24]	; (8016830 <etharp_request_dst+0x40>)
 8016816:	9201      	str	r2, [sp, #4]
 8016818:	9300      	str	r3, [sp, #0]
 801681a:	4603      	mov	r3, r0
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	68f8      	ldr	r0, [r7, #12]
 8016820:	f7ff ff5a 	bl	80166d8 <etharp_raw>
 8016824:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016826:	4618      	mov	r0, r3
 8016828:	3710      	adds	r7, #16
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	0801d020 	.word	0x0801d020

08016834 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b082      	sub	sp, #8
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801683e:	4a05      	ldr	r2, [pc, #20]	; (8016854 <etharp_request+0x20>)
 8016840:	6839      	ldr	r1, [r7, #0]
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7ff ffd4 	bl	80167f0 <etharp_request_dst>
 8016848:	4603      	mov	r3, r0
}
 801684a:	4618      	mov	r0, r3
 801684c:	3708      	adds	r7, #8
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
 8016852:	bf00      	nop
 8016854:	0801d018 	.word	0x0801d018

08016858 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b08e      	sub	sp, #56	; 0x38
 801685c:	af04      	add	r7, sp, #16
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016862:	4b79      	ldr	r3, [pc, #484]	; (8016a48 <icmp_input+0x1f0>)
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	f003 030f 	and.w	r3, r3, #15
 8016870:	b2db      	uxtb	r3, r3
 8016872:	009b      	lsls	r3, r3, #2
 8016874:	b2db      	uxtb	r3, r3
 8016876:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801687a:	2b13      	cmp	r3, #19
 801687c:	f240 80cd 	bls.w	8016a1a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	895b      	ldrh	r3, [r3, #10]
 8016884:	2b03      	cmp	r3, #3
 8016886:	f240 80ca 	bls.w	8016a1e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	781b      	ldrb	r3, [r3, #0]
 8016890:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016894:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016898:	2b00      	cmp	r3, #0
 801689a:	f000 80b7 	beq.w	8016a0c <icmp_input+0x1b4>
 801689e:	2b08      	cmp	r3, #8
 80168a0:	f040 80b7 	bne.w	8016a12 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80168a4:	4b69      	ldr	r3, [pc, #420]	; (8016a4c <icmp_input+0x1f4>)
 80168a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168a8:	4b67      	ldr	r3, [pc, #412]	; (8016a48 <icmp_input+0x1f0>)
 80168aa:	695b      	ldr	r3, [r3, #20]
 80168ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168b0:	2be0      	cmp	r3, #224	; 0xe0
 80168b2:	f000 80bb 	beq.w	8016a2c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80168b6:	4b64      	ldr	r3, [pc, #400]	; (8016a48 <icmp_input+0x1f0>)
 80168b8:	695b      	ldr	r3, [r3, #20]
 80168ba:	4a63      	ldr	r2, [pc, #396]	; (8016a48 <icmp_input+0x1f0>)
 80168bc:	6812      	ldr	r2, [r2, #0]
 80168be:	4611      	mov	r1, r2
 80168c0:	4618      	mov	r0, r3
 80168c2:	f000 fbed 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	f040 80b1 	bne.w	8016a30 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	891b      	ldrh	r3, [r3, #8]
 80168d2:	2b07      	cmp	r3, #7
 80168d4:	f240 80a5 	bls.w	8016a22 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80168d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168da:	330e      	adds	r3, #14
 80168dc:	4619      	mov	r1, r3
 80168de:	6878      	ldr	r0, [r7, #4]
 80168e0:	f7f7 ff0e 	bl	800e700 <pbuf_add_header>
 80168e4:	4603      	mov	r3, r0
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d04b      	beq.n	8016982 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	891a      	ldrh	r2, [r3, #8]
 80168ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168f0:	4413      	add	r3, r2
 80168f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	891b      	ldrh	r3, [r3, #8]
 80168f8:	8b7a      	ldrh	r2, [r7, #26]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	f0c0 809a 	bcc.w	8016a34 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016900:	8b7b      	ldrh	r3, [r7, #26]
 8016902:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016906:	4619      	mov	r1, r3
 8016908:	200e      	movs	r0, #14
 801690a:	f7f7 fcab 	bl	800e264 <pbuf_alloc>
 801690e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	2b00      	cmp	r3, #0
 8016914:	f000 8090 	beq.w	8016a38 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	895b      	ldrh	r3, [r3, #10]
 801691c:	461a      	mov	r2, r3
 801691e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016920:	3308      	adds	r3, #8
 8016922:	429a      	cmp	r2, r3
 8016924:	d203      	bcs.n	801692e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016926:	6978      	ldr	r0, [r7, #20]
 8016928:	f7f7 ff80 	bl	800e82c <pbuf_free>
          goto icmperr;
 801692c:	e085      	b.n	8016a3a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	685b      	ldr	r3, [r3, #4]
 8016932:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016936:	4618      	mov	r0, r3
 8016938:	f001 fe1c 	bl	8018574 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801693c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801693e:	4619      	mov	r1, r3
 8016940:	6978      	ldr	r0, [r7, #20]
 8016942:	f7f7 feed 	bl	800e720 <pbuf_remove_header>
 8016946:	4603      	mov	r3, r0
 8016948:	2b00      	cmp	r3, #0
 801694a:	d009      	beq.n	8016960 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801694c:	4b40      	ldr	r3, [pc, #256]	; (8016a50 <icmp_input+0x1f8>)
 801694e:	22b6      	movs	r2, #182	; 0xb6
 8016950:	4940      	ldr	r1, [pc, #256]	; (8016a54 <icmp_input+0x1fc>)
 8016952:	4841      	ldr	r0, [pc, #260]	; (8016a58 <icmp_input+0x200>)
 8016954:	f001 ff1e 	bl	8018794 <iprintf>
          pbuf_free(r);
 8016958:	6978      	ldr	r0, [r7, #20]
 801695a:	f7f7 ff67 	bl	800e82c <pbuf_free>
          goto icmperr;
 801695e:	e06c      	b.n	8016a3a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016960:	6879      	ldr	r1, [r7, #4]
 8016962:	6978      	ldr	r0, [r7, #20]
 8016964:	f7f8 f896 	bl	800ea94 <pbuf_copy>
 8016968:	4603      	mov	r3, r0
 801696a:	2b00      	cmp	r3, #0
 801696c:	d003      	beq.n	8016976 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801696e:	6978      	ldr	r0, [r7, #20]
 8016970:	f7f7 ff5c 	bl	800e82c <pbuf_free>
          goto icmperr;
 8016974:	e061      	b.n	8016a3a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f7f7 ff58 	bl	800e82c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	607b      	str	r3, [r7, #4]
 8016980:	e00f      	b.n	80169a2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016982:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016984:	330e      	adds	r3, #14
 8016986:	4619      	mov	r1, r3
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	f7f7 fec9 	bl	800e720 <pbuf_remove_header>
 801698e:	4603      	mov	r3, r0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d006      	beq.n	80169a2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016994:	4b2e      	ldr	r3, [pc, #184]	; (8016a50 <icmp_input+0x1f8>)
 8016996:	22c7      	movs	r2, #199	; 0xc7
 8016998:	4930      	ldr	r1, [pc, #192]	; (8016a5c <icmp_input+0x204>)
 801699a:	482f      	ldr	r0, [pc, #188]	; (8016a58 <icmp_input+0x200>)
 801699c:	f001 fefa 	bl	8018794 <iprintf>
          goto icmperr;
 80169a0:	e04b      	b.n	8016a3a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80169a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169aa:	4619      	mov	r1, r3
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f7f7 fea7 	bl	800e700 <pbuf_add_header>
 80169b2:	4603      	mov	r3, r0
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d12b      	bne.n	8016a10 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80169be:	69fb      	ldr	r3, [r7, #28]
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80169c6:	4b20      	ldr	r3, [pc, #128]	; (8016a48 <icmp_input+0x1f0>)
 80169c8:	691a      	ldr	r2, [r3, #16]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	2200      	movs	r2, #0
 80169d2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80169d4:	693b      	ldr	r3, [r7, #16]
 80169d6:	2200      	movs	r2, #0
 80169d8:	709a      	strb	r2, [r3, #2]
 80169da:	2200      	movs	r2, #0
 80169dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	22ff      	movs	r2, #255	; 0xff
 80169e2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2200      	movs	r2, #0
 80169e8:	729a      	strb	r2, [r3, #10]
 80169ea:	2200      	movs	r2, #0
 80169ec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	9302      	str	r3, [sp, #8]
 80169f2:	2301      	movs	r3, #1
 80169f4:	9301      	str	r3, [sp, #4]
 80169f6:	2300      	movs	r3, #0
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	23ff      	movs	r3, #255	; 0xff
 80169fc:	2200      	movs	r2, #0
 80169fe:	69f9      	ldr	r1, [r7, #28]
 8016a00:	6878      	ldr	r0, [r7, #4]
 8016a02:	f000 fa75 	bl	8016ef0 <ip4_output_if>
 8016a06:	4603      	mov	r3, r0
 8016a08:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a0a:	e001      	b.n	8016a10 <icmp_input+0x1b8>
      break;
 8016a0c:	bf00      	nop
 8016a0e:	e000      	b.n	8016a12 <icmp_input+0x1ba>
      break;
 8016a10:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7f7 ff0a 	bl	800e82c <pbuf_free>
  return;
 8016a18:	e013      	b.n	8016a42 <icmp_input+0x1ea>
    goto lenerr;
 8016a1a:	bf00      	nop
 8016a1c:	e002      	b.n	8016a24 <icmp_input+0x1cc>
    goto lenerr;
 8016a1e:	bf00      	nop
 8016a20:	e000      	b.n	8016a24 <icmp_input+0x1cc>
        goto lenerr;
 8016a22:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7f7 ff01 	bl	800e82c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a2a:	e00a      	b.n	8016a42 <icmp_input+0x1ea>
        goto icmperr;
 8016a2c:	bf00      	nop
 8016a2e:	e004      	b.n	8016a3a <icmp_input+0x1e2>
        goto icmperr;
 8016a30:	bf00      	nop
 8016a32:	e002      	b.n	8016a3a <icmp_input+0x1e2>
          goto icmperr;
 8016a34:	bf00      	nop
 8016a36:	e000      	b.n	8016a3a <icmp_input+0x1e2>
          goto icmperr;
 8016a38:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016a3a:	6878      	ldr	r0, [r7, #4]
 8016a3c:	f7f7 fef6 	bl	800e82c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a40:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016a42:	3728      	adds	r7, #40	; 0x28
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	2000a174 	.word	0x2000a174
 8016a4c:	2000a188 	.word	0x2000a188
 8016a50:	0801ca94 	.word	0x0801ca94
 8016a54:	0801cacc 	.word	0x0801cacc
 8016a58:	0801cb04 	.word	0x0801cb04
 8016a5c:	0801cb2c 	.word	0x0801cb2c

08016a60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	460b      	mov	r3, r1
 8016a6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016a6c:	78fb      	ldrb	r3, [r7, #3]
 8016a6e:	461a      	mov	r2, r3
 8016a70:	2103      	movs	r1, #3
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f000 f814 	bl	8016aa0 <icmp_send_response>
}
 8016a78:	bf00      	nop
 8016a7a:	3708      	adds	r7, #8
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	460b      	mov	r3, r1
 8016a8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016a8c:	78fb      	ldrb	r3, [r7, #3]
 8016a8e:	461a      	mov	r2, r3
 8016a90:	210b      	movs	r1, #11
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f000 f804 	bl	8016aa0 <icmp_send_response>
}
 8016a98:	bf00      	nop
 8016a9a:	3708      	adds	r7, #8
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b08c      	sub	sp, #48	; 0x30
 8016aa4:	af04      	add	r7, sp, #16
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	460b      	mov	r3, r1
 8016aaa:	70fb      	strb	r3, [r7, #3]
 8016aac:	4613      	mov	r3, r2
 8016aae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016ab0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ab4:	2124      	movs	r1, #36	; 0x24
 8016ab6:	2022      	movs	r0, #34	; 0x22
 8016ab8:	f7f7 fbd4 	bl	800e264 <pbuf_alloc>
 8016abc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016abe:	69fb      	ldr	r3, [r7, #28]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d04c      	beq.n	8016b5e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	895b      	ldrh	r3, [r3, #10]
 8016ac8:	2b23      	cmp	r3, #35	; 0x23
 8016aca:	d806      	bhi.n	8016ada <icmp_send_response+0x3a>
 8016acc:	4b26      	ldr	r3, [pc, #152]	; (8016b68 <icmp_send_response+0xc8>)
 8016ace:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016ad2:	4926      	ldr	r1, [pc, #152]	; (8016b6c <icmp_send_response+0xcc>)
 8016ad4:	4826      	ldr	r0, [pc, #152]	; (8016b70 <icmp_send_response+0xd0>)
 8016ad6:	f001 fe5d 	bl	8018794 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	685b      	ldr	r3, [r3, #4]
 8016ade:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	78fa      	ldrb	r2, [r7, #3]
 8016aea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	78ba      	ldrb	r2, [r7, #2]
 8016af0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	2200      	movs	r2, #0
 8016af6:	711a      	strb	r2, [r3, #4]
 8016af8:	2200      	movs	r2, #0
 8016afa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	2200      	movs	r2, #0
 8016b00:	719a      	strb	r2, [r3, #6]
 8016b02:	2200      	movs	r2, #0
 8016b04:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	f103 0008 	add.w	r0, r3, #8
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	221c      	movs	r2, #28
 8016b14:	4619      	mov	r1, r3
 8016b16:	f001 fd2d 	bl	8018574 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b20:	f107 030c 	add.w	r3, r7, #12
 8016b24:	4618      	mov	r0, r3
 8016b26:	f000 f825 	bl	8016b74 <ip4_route>
 8016b2a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d011      	beq.n	8016b56 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	2200      	movs	r2, #0
 8016b36:	709a      	strb	r2, [r3, #2]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b3c:	f107 020c 	add.w	r2, r7, #12
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	9302      	str	r3, [sp, #8]
 8016b44:	2301      	movs	r3, #1
 8016b46:	9301      	str	r3, [sp, #4]
 8016b48:	2300      	movs	r3, #0
 8016b4a:	9300      	str	r3, [sp, #0]
 8016b4c:	23ff      	movs	r3, #255	; 0xff
 8016b4e:	2100      	movs	r1, #0
 8016b50:	69f8      	ldr	r0, [r7, #28]
 8016b52:	f000 f9cd 	bl	8016ef0 <ip4_output_if>
  }
  pbuf_free(q);
 8016b56:	69f8      	ldr	r0, [r7, #28]
 8016b58:	f7f7 fe68 	bl	800e82c <pbuf_free>
 8016b5c:	e000      	b.n	8016b60 <icmp_send_response+0xc0>
    return;
 8016b5e:	bf00      	nop
}
 8016b60:	3720      	adds	r7, #32
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	0801ca94 	.word	0x0801ca94
 8016b6c:	0801cb60 	.word	0x0801cb60
 8016b70:	0801cb04 	.word	0x0801cb04

08016b74 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016b74:	b480      	push	{r7}
 8016b76:	b085      	sub	sp, #20
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016b7c:	4b33      	ldr	r3, [pc, #204]	; (8016c4c <ip4_route+0xd8>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	60fb      	str	r3, [r7, #12]
 8016b82:	e036      	b.n	8016bf2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b8a:	f003 0301 	and.w	r3, r3, #1
 8016b8e:	b2db      	uxtb	r3, r3
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d02b      	beq.n	8016bec <ip4_route+0x78>
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b9a:	089b      	lsrs	r3, r3, #2
 8016b9c:	f003 0301 	and.w	r3, r3, #1
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d022      	beq.n	8016bec <ip4_route+0x78>
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	3304      	adds	r3, #4
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d01d      	beq.n	8016bec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681a      	ldr	r2, [r3, #0]
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	3304      	adds	r3, #4
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	405a      	eors	r2, r3
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	3308      	adds	r3, #8
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	4013      	ands	r3, r2
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d101      	bne.n	8016bcc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	e038      	b.n	8016c3e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bd2:	f003 0302 	and.w	r3, r3, #2
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d108      	bne.n	8016bec <ip4_route+0x78>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	330c      	adds	r3, #12
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d101      	bne.n	8016bec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	e028      	b.n	8016c3e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	60fb      	str	r3, [r7, #12]
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1c5      	bne.n	8016b84 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016bf8:	4b15      	ldr	r3, [pc, #84]	; (8016c50 <ip4_route+0xdc>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d01a      	beq.n	8016c36 <ip4_route+0xc2>
 8016c00:	4b13      	ldr	r3, [pc, #76]	; (8016c50 <ip4_route+0xdc>)
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c08:	f003 0301 	and.w	r3, r3, #1
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d012      	beq.n	8016c36 <ip4_route+0xc2>
 8016c10:	4b0f      	ldr	r3, [pc, #60]	; (8016c50 <ip4_route+0xdc>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c18:	f003 0304 	and.w	r3, r3, #4
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d00a      	beq.n	8016c36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c20:	4b0b      	ldr	r3, [pc, #44]	; (8016c50 <ip4_route+0xdc>)
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	3304      	adds	r3, #4
 8016c26:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d004      	beq.n	8016c36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	b2db      	uxtb	r3, r3
 8016c32:	2b7f      	cmp	r3, #127	; 0x7f
 8016c34:	d101      	bne.n	8016c3a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016c36:	2300      	movs	r3, #0
 8016c38:	e001      	b.n	8016c3e <ip4_route+0xca>
  }

  return netif_default;
 8016c3a:	4b05      	ldr	r3, [pc, #20]	; (8016c50 <ip4_route+0xdc>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3714      	adds	r7, #20
 8016c42:	46bd      	mov	sp, r7
 8016c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	2000d8bc 	.word	0x2000d8bc
 8016c50:	2000d8c0 	.word	0x2000d8c0

08016c54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c62:	f003 0301 	and.w	r3, r3, #1
 8016c66:	b2db      	uxtb	r3, r3
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d016      	beq.n	8016c9a <ip4_input_accept+0x46>
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	3304      	adds	r3, #4
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d011      	beq.n	8016c9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c76:	4b0b      	ldr	r3, [pc, #44]	; (8016ca4 <ip4_input_accept+0x50>)
 8016c78:	695a      	ldr	r2, [r3, #20]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	3304      	adds	r3, #4
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d008      	beq.n	8016c96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016c84:	4b07      	ldr	r3, [pc, #28]	; (8016ca4 <ip4_input_accept+0x50>)
 8016c86:	695b      	ldr	r3, [r3, #20]
 8016c88:	6879      	ldr	r1, [r7, #4]
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f000 fa08 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016c90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d001      	beq.n	8016c9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016c96:	2301      	movs	r3, #1
 8016c98:	e000      	b.n	8016c9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016c9a:	2300      	movs	r3, #0
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3708      	adds	r7, #8
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}
 8016ca4:	2000a174 	.word	0x2000a174

08016ca8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b086      	sub	sp, #24
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	685b      	ldr	r3, [r3, #4]
 8016cb6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	091b      	lsrs	r3, r3, #4
 8016cbe:	b2db      	uxtb	r3, r3
 8016cc0:	2b04      	cmp	r3, #4
 8016cc2:	d004      	beq.n	8016cce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f7f7 fdb1 	bl	800e82c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e107      	b.n	8016ede <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	f003 030f 	and.w	r3, r3, #15
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	009b      	lsls	r3, r3, #2
 8016cda:	b2db      	uxtb	r3, r3
 8016cdc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	885b      	ldrh	r3, [r3, #2]
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7f6 fa59 	bl	800d19c <lwip_htons>
 8016cea:	4603      	mov	r3, r0
 8016cec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	891b      	ldrh	r3, [r3, #8]
 8016cf2:	89ba      	ldrh	r2, [r7, #12]
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d204      	bcs.n	8016d02 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016cf8:	89bb      	ldrh	r3, [r7, #12]
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f7f7 fc0f 	bl	800e520 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	895b      	ldrh	r3, [r3, #10]
 8016d06:	89fa      	ldrh	r2, [r7, #14]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d807      	bhi.n	8016d1c <ip4_input+0x74>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	891b      	ldrh	r3, [r3, #8]
 8016d10:	89ba      	ldrh	r2, [r7, #12]
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d802      	bhi.n	8016d1c <ip4_input+0x74>
 8016d16:	89fb      	ldrh	r3, [r7, #14]
 8016d18:	2b13      	cmp	r3, #19
 8016d1a:	d804      	bhi.n	8016d26 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f7f7 fd85 	bl	800e82c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016d22:	2300      	movs	r3, #0
 8016d24:	e0db      	b.n	8016ede <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	691b      	ldr	r3, [r3, #16]
 8016d2a:	4a6f      	ldr	r2, [pc, #444]	; (8016ee8 <ip4_input+0x240>)
 8016d2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	4a6d      	ldr	r2, [pc, #436]	; (8016ee8 <ip4_input+0x240>)
 8016d34:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d36:	4b6c      	ldr	r3, [pc, #432]	; (8016ee8 <ip4_input+0x240>)
 8016d38:	695b      	ldr	r3, [r3, #20]
 8016d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d3e:	2be0      	cmp	r3, #224	; 0xe0
 8016d40:	d112      	bne.n	8016d68 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d48:	f003 0301 	and.w	r3, r3, #1
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d007      	beq.n	8016d62 <ip4_input+0xba>
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	3304      	adds	r3, #4
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d002      	beq.n	8016d62 <ip4_input+0xba>
      netif = inp;
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	613b      	str	r3, [r7, #16]
 8016d60:	e02a      	b.n	8016db8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d62:	2300      	movs	r3, #0
 8016d64:	613b      	str	r3, [r7, #16]
 8016d66:	e027      	b.n	8016db8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016d68:	6838      	ldr	r0, [r7, #0]
 8016d6a:	f7ff ff73 	bl	8016c54 <ip4_input_accept>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d002      	beq.n	8016d7a <ip4_input+0xd2>
      netif = inp;
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	613b      	str	r3, [r7, #16]
 8016d78:	e01e      	b.n	8016db8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016d7e:	4b5a      	ldr	r3, [pc, #360]	; (8016ee8 <ip4_input+0x240>)
 8016d80:	695b      	ldr	r3, [r3, #20]
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	2b7f      	cmp	r3, #127	; 0x7f
 8016d86:	d017      	beq.n	8016db8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016d88:	4b58      	ldr	r3, [pc, #352]	; (8016eec <ip4_input+0x244>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	613b      	str	r3, [r7, #16]
 8016d8e:	e00e      	b.n	8016dae <ip4_input+0x106>
          if (netif == inp) {
 8016d90:	693a      	ldr	r2, [r7, #16]
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d006      	beq.n	8016da6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016d98:	6938      	ldr	r0, [r7, #16]
 8016d9a:	f7ff ff5b 	bl	8016c54 <ip4_input_accept>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d108      	bne.n	8016db6 <ip4_input+0x10e>
 8016da4:	e000      	b.n	8016da8 <ip4_input+0x100>
            continue;
 8016da6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016da8:	693b      	ldr	r3, [r7, #16]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	613b      	str	r3, [r7, #16]
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d1ed      	bne.n	8016d90 <ip4_input+0xe8>
 8016db4:	e000      	b.n	8016db8 <ip4_input+0x110>
            break;
 8016db6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016db8:	4b4b      	ldr	r3, [pc, #300]	; (8016ee8 <ip4_input+0x240>)
 8016dba:	691b      	ldr	r3, [r3, #16]
 8016dbc:	6839      	ldr	r1, [r7, #0]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f000 f96e 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d105      	bne.n	8016dd6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016dca:	4b47      	ldr	r3, [pc, #284]	; (8016ee8 <ip4_input+0x240>)
 8016dcc:	691b      	ldr	r3, [r3, #16]
 8016dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016dd2:	2be0      	cmp	r3, #224	; 0xe0
 8016dd4:	d104      	bne.n	8016de0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f7f7 fd28 	bl	800e82c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	e07e      	b.n	8016ede <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d104      	bne.n	8016df0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7f7 fd20 	bl	800e82c <pbuf_free>
    return ERR_OK;
 8016dec:	2300      	movs	r3, #0
 8016dee:	e076      	b.n	8016ede <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	88db      	ldrh	r3, [r3, #6]
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	461a      	mov	r2, r3
 8016df8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016dfc:	4013      	ands	r3, r2
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d00b      	beq.n	8016e1a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f000 fc92 	bl	801772c <ip4_reass>
 8016e08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d101      	bne.n	8016e14 <ip4_input+0x16c>
      return ERR_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	e064      	b.n	8016ede <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	685b      	ldr	r3, [r3, #4]
 8016e18:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016e1a:	4a33      	ldr	r2, [pc, #204]	; (8016ee8 <ip4_input+0x240>)
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016e20:	4a31      	ldr	r2, [pc, #196]	; (8016ee8 <ip4_input+0x240>)
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016e26:	4a30      	ldr	r2, [pc, #192]	; (8016ee8 <ip4_input+0x240>)
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	f003 030f 	and.w	r3, r3, #15
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	b2db      	uxtb	r3, r3
 8016e3a:	b29a      	uxth	r2, r3
 8016e3c:	4b2a      	ldr	r3, [pc, #168]	; (8016ee8 <ip4_input+0x240>)
 8016e3e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016e40:	89fb      	ldrh	r3, [r7, #14]
 8016e42:	4619      	mov	r1, r3
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f7f7 fc6b 	bl	800e720 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016e4a:	697b      	ldr	r3, [r7, #20]
 8016e4c:	7a5b      	ldrb	r3, [r3, #9]
 8016e4e:	2b11      	cmp	r3, #17
 8016e50:	d006      	beq.n	8016e60 <ip4_input+0x1b8>
 8016e52:	2b11      	cmp	r3, #17
 8016e54:	dc13      	bgt.n	8016e7e <ip4_input+0x1d6>
 8016e56:	2b01      	cmp	r3, #1
 8016e58:	d00c      	beq.n	8016e74 <ip4_input+0x1cc>
 8016e5a:	2b06      	cmp	r3, #6
 8016e5c:	d005      	beq.n	8016e6a <ip4_input+0x1c2>
 8016e5e:	e00e      	b.n	8016e7e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016e60:	6839      	ldr	r1, [r7, #0]
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f7fe f970 	bl	8015148 <udp_input>
        break;
 8016e68:	e026      	b.n	8016eb8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016e6a:	6839      	ldr	r1, [r7, #0]
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7f9 fd29 	bl	80108c4 <tcp_input>
        break;
 8016e72:	e021      	b.n	8016eb8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016e74:	6839      	ldr	r1, [r7, #0]
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f7ff fcee 	bl	8016858 <icmp_input>
        break;
 8016e7c:	e01c      	b.n	8016eb8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e7e:	4b1a      	ldr	r3, [pc, #104]	; (8016ee8 <ip4_input+0x240>)
 8016e80:	695b      	ldr	r3, [r3, #20]
 8016e82:	6939      	ldr	r1, [r7, #16]
 8016e84:	4618      	mov	r0, r3
 8016e86:	f000 f90b 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d10f      	bne.n	8016eb0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e90:	4b15      	ldr	r3, [pc, #84]	; (8016ee8 <ip4_input+0x240>)
 8016e92:	695b      	ldr	r3, [r3, #20]
 8016e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e98:	2be0      	cmp	r3, #224	; 0xe0
 8016e9a:	d009      	beq.n	8016eb0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f7f7 fcaf 	bl	800e806 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016ea8:	2102      	movs	r1, #2
 8016eaa:	6878      	ldr	r0, [r7, #4]
 8016eac:	f7ff fdd8 	bl	8016a60 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f7f7 fcbb 	bl	800e82c <pbuf_free>
        break;
 8016eb6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016eb8:	4b0b      	ldr	r3, [pc, #44]	; (8016ee8 <ip4_input+0x240>)
 8016eba:	2200      	movs	r2, #0
 8016ebc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016ebe:	4b0a      	ldr	r3, [pc, #40]	; (8016ee8 <ip4_input+0x240>)
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016ec4:	4b08      	ldr	r3, [pc, #32]	; (8016ee8 <ip4_input+0x240>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016eca:	4b07      	ldr	r3, [pc, #28]	; (8016ee8 <ip4_input+0x240>)
 8016ecc:	2200      	movs	r2, #0
 8016ece:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016ed0:	4b05      	ldr	r3, [pc, #20]	; (8016ee8 <ip4_input+0x240>)
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016ed6:	4b04      	ldr	r3, [pc, #16]	; (8016ee8 <ip4_input+0x240>)
 8016ed8:	2200      	movs	r2, #0
 8016eda:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016edc:	2300      	movs	r3, #0
}
 8016ede:	4618      	mov	r0, r3
 8016ee0:	3718      	adds	r7, #24
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	bf00      	nop
 8016ee8:	2000a174 	.word	0x2000a174
 8016eec:	2000d8bc 	.word	0x2000d8bc

08016ef0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b08a      	sub	sp, #40	; 0x28
 8016ef4:	af04      	add	r7, sp, #16
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	607a      	str	r2, [r7, #4]
 8016efc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d009      	beq.n	8016f1c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d003      	beq.n	8016f16 <ip4_output_if+0x26>
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d102      	bne.n	8016f1c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f18:	3304      	adds	r3, #4
 8016f1a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f1c:	78fa      	ldrb	r2, [r7, #3]
 8016f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f20:	9302      	str	r3, [sp, #8]
 8016f22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f26:	9301      	str	r3, [sp, #4]
 8016f28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016f2c:	9300      	str	r3, [sp, #0]
 8016f2e:	4613      	mov	r3, r2
 8016f30:	687a      	ldr	r2, [r7, #4]
 8016f32:	6979      	ldr	r1, [r7, #20]
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f000 f805 	bl	8016f44 <ip4_output_if_src>
 8016f3a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3718      	adds	r7, #24
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}

08016f44 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b088      	sub	sp, #32
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	60f8      	str	r0, [r7, #12]
 8016f4c:	60b9      	str	r1, [r7, #8]
 8016f4e:	607a      	str	r2, [r7, #4]
 8016f50:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	7b9b      	ldrb	r3, [r3, #14]
 8016f56:	2b01      	cmp	r3, #1
 8016f58:	d006      	beq.n	8016f68 <ip4_output_if_src+0x24>
 8016f5a:	4b4b      	ldr	r3, [pc, #300]	; (8017088 <ip4_output_if_src+0x144>)
 8016f5c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016f60:	494a      	ldr	r1, [pc, #296]	; (801708c <ip4_output_if_src+0x148>)
 8016f62:	484b      	ldr	r0, [pc, #300]	; (8017090 <ip4_output_if_src+0x14c>)
 8016f64:	f001 fc16 	bl	8018794 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d060      	beq.n	8017030 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016f6e:	2314      	movs	r3, #20
 8016f70:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016f72:	2114      	movs	r1, #20
 8016f74:	68f8      	ldr	r0, [r7, #12]
 8016f76:	f7f7 fbc3 	bl	800e700 <pbuf_add_header>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d002      	beq.n	8016f86 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f80:	f06f 0301 	mvn.w	r3, #1
 8016f84:	e07c      	b.n	8017080 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	895b      	ldrh	r3, [r3, #10]
 8016f90:	2b13      	cmp	r3, #19
 8016f92:	d806      	bhi.n	8016fa2 <ip4_output_if_src+0x5e>
 8016f94:	4b3c      	ldr	r3, [pc, #240]	; (8017088 <ip4_output_if_src+0x144>)
 8016f96:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016f9a:	493e      	ldr	r1, [pc, #248]	; (8017094 <ip4_output_if_src+0x150>)
 8016f9c:	483c      	ldr	r0, [pc, #240]	; (8017090 <ip4_output_if_src+0x14c>)
 8016f9e:	f001 fbf9 	bl	8018794 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016fa2:	69fb      	ldr	r3, [r7, #28]
 8016fa4:	78fa      	ldrb	r2, [r7, #3]
 8016fa6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016fa8:	69fb      	ldr	r3, [r7, #28]
 8016faa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016fae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	69fb      	ldr	r3, [r7, #28]
 8016fb6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016fb8:	8b7b      	ldrh	r3, [r7, #26]
 8016fba:	089b      	lsrs	r3, r3, #2
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fc4:	b2da      	uxtb	r2, r3
 8016fc6:	69fb      	ldr	r3, [r7, #28]
 8016fc8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016fd0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	891b      	ldrh	r3, [r3, #8]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7f6 f8e0 	bl	800d19c <lwip_htons>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	461a      	mov	r2, r3
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016fe4:	69fb      	ldr	r3, [r7, #28]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	719a      	strb	r2, [r3, #6]
 8016fea:	2200      	movs	r2, #0
 8016fec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016fee:	4b2a      	ldr	r3, [pc, #168]	; (8017098 <ip4_output_if_src+0x154>)
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7f6 f8d2 	bl	800d19c <lwip_htons>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	69fb      	ldr	r3, [r7, #28]
 8016ffe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017000:	4b25      	ldr	r3, [pc, #148]	; (8017098 <ip4_output_if_src+0x154>)
 8017002:	881b      	ldrh	r3, [r3, #0]
 8017004:	3301      	adds	r3, #1
 8017006:	b29a      	uxth	r2, r3
 8017008:	4b23      	ldr	r3, [pc, #140]	; (8017098 <ip4_output_if_src+0x154>)
 801700a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d104      	bne.n	801701c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017012:	4b22      	ldr	r3, [pc, #136]	; (801709c <ip4_output_if_src+0x158>)
 8017014:	681a      	ldr	r2, [r3, #0]
 8017016:	69fb      	ldr	r3, [r7, #28]
 8017018:	60da      	str	r2, [r3, #12]
 801701a:	e003      	b.n	8017024 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	681a      	ldr	r2, [r3, #0]
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	2200      	movs	r2, #0
 8017028:	729a      	strb	r2, [r3, #10]
 801702a:	2200      	movs	r2, #0
 801702c:	72da      	strb	r2, [r3, #11]
 801702e:	e00f      	b.n	8017050 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	895b      	ldrh	r3, [r3, #10]
 8017034:	2b13      	cmp	r3, #19
 8017036:	d802      	bhi.n	801703e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017038:	f06f 0301 	mvn.w	r3, #1
 801703c:	e020      	b.n	8017080 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	685b      	ldr	r3, [r3, #4]
 8017042:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	691b      	ldr	r3, [r3, #16]
 8017048:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801704a:	f107 0314 	add.w	r3, r7, #20
 801704e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017054:	2b00      	cmp	r3, #0
 8017056:	d00c      	beq.n	8017072 <ip4_output_if_src+0x12e>
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	891a      	ldrh	r2, [r3, #8]
 801705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017060:	429a      	cmp	r2, r3
 8017062:	d906      	bls.n	8017072 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f000 fd53 	bl	8017b14 <ip4_frag>
 801706e:	4603      	mov	r3, r0
 8017070:	e006      	b.n	8017080 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017074:	695b      	ldr	r3, [r3, #20]
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	68f9      	ldr	r1, [r7, #12]
 801707a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801707c:	4798      	blx	r3
 801707e:	4603      	mov	r3, r0
}
 8017080:	4618      	mov	r0, r3
 8017082:	3720      	adds	r7, #32
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}
 8017088:	0801cb8c 	.word	0x0801cb8c
 801708c:	0801cbc0 	.word	0x0801cbc0
 8017090:	0801cbcc 	.word	0x0801cbcc
 8017094:	0801cbf4 	.word	0x0801cbf4
 8017098:	2000da1a 	.word	0x2000da1a
 801709c:	0801d014 	.word	0x0801d014

080170a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b085      	sub	sp, #20
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170b4:	d002      	beq.n	80170bc <ip4_addr_isbroadcast_u32+0x1c>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d101      	bne.n	80170c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80170bc:	2301      	movs	r3, #1
 80170be:	e02a      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170c6:	f003 0302 	and.w	r3, r3, #2
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d101      	bne.n	80170d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80170ce:	2300      	movs	r3, #0
 80170d0:	e021      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	3304      	adds	r3, #4
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	687a      	ldr	r2, [r7, #4]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d101      	bne.n	80170e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	e019      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80170e2:	68fa      	ldr	r2, [r7, #12]
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	3304      	adds	r3, #4
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	405a      	eors	r2, r3
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	3308      	adds	r3, #8
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	4013      	ands	r3, r2
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d10d      	bne.n	8017114 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	3308      	adds	r3, #8
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	43da      	mvns	r2, r3
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	3308      	adds	r3, #8
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801710c:	429a      	cmp	r2, r3
 801710e:	d101      	bne.n	8017114 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017110:	2301      	movs	r3, #1
 8017112:	e000      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017114:	2300      	movs	r3, #0
  }
}
 8017116:	4618      	mov	r0, r3
 8017118:	3714      	adds	r7, #20
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
	...

08017124 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801712e:	4b12      	ldr	r3, [pc, #72]	; (8017178 <ip_reass_tmr+0x54>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017134:	e018      	b.n	8017168 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	7fdb      	ldrb	r3, [r3, #31]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d00b      	beq.n	8017156 <ip_reass_tmr+0x32>
      r->timer--;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	7fdb      	ldrb	r3, [r3, #31]
 8017142:	3b01      	subs	r3, #1
 8017144:	b2da      	uxtb	r2, r3
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	60fb      	str	r3, [r7, #12]
 8017154:	e008      	b.n	8017168 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f000 f80a 	bl	801717c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d1e3      	bne.n	8017136 <ip_reass_tmr+0x12>
    }
  }
}
 801716e:	bf00      	nop
 8017170:	bf00      	nop
 8017172:	3710      	adds	r7, #16
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}
 8017178:	2000da1c 	.word	0x2000da1c

0801717c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b088      	sub	sp, #32
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017186:	2300      	movs	r3, #0
 8017188:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801718a:	683a      	ldr	r2, [r7, #0]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	429a      	cmp	r2, r3
 8017190:	d105      	bne.n	801719e <ip_reass_free_complete_datagram+0x22>
 8017192:	4b45      	ldr	r3, [pc, #276]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 8017194:	22ab      	movs	r2, #171	; 0xab
 8017196:	4945      	ldr	r1, [pc, #276]	; (80172ac <ip_reass_free_complete_datagram+0x130>)
 8017198:	4845      	ldr	r0, [pc, #276]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 801719a:	f001 fafb 	bl	8018794 <iprintf>
  if (prev != NULL) {
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d00a      	beq.n	80171ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	687a      	ldr	r2, [r7, #4]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d005      	beq.n	80171ba <ip_reass_free_complete_datagram+0x3e>
 80171ae:	4b3e      	ldr	r3, [pc, #248]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 80171b0:	22ad      	movs	r2, #173	; 0xad
 80171b2:	4940      	ldr	r1, [pc, #256]	; (80172b4 <ip_reass_free_complete_datagram+0x138>)
 80171b4:	483e      	ldr	r0, [pc, #248]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 80171b6:	f001 faed 	bl	8018794 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	889b      	ldrh	r3, [r3, #4]
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d12a      	bne.n	8017222 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	685b      	ldr	r3, [r3, #4]
 80171d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80171d2:	697b      	ldr	r3, [r7, #20]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	6858      	ldr	r0, [r3, #4]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	3308      	adds	r3, #8
 80171e2:	2214      	movs	r2, #20
 80171e4:	4619      	mov	r1, r3
 80171e6:	f001 f9c5 	bl	8018574 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80171ea:	2101      	movs	r1, #1
 80171ec:	69b8      	ldr	r0, [r7, #24]
 80171ee:	f7ff fc47 	bl	8016a80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80171f2:	69b8      	ldr	r0, [r7, #24]
 80171f4:	f7f7 fba8 	bl	800e948 <pbuf_clen>
 80171f8:	4603      	mov	r3, r0
 80171fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171fc:	8bfa      	ldrh	r2, [r7, #30]
 80171fe:	8a7b      	ldrh	r3, [r7, #18]
 8017200:	4413      	add	r3, r2
 8017202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017206:	db05      	blt.n	8017214 <ip_reass_free_complete_datagram+0x98>
 8017208:	4b27      	ldr	r3, [pc, #156]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 801720a:	22bc      	movs	r2, #188	; 0xbc
 801720c:	492a      	ldr	r1, [pc, #168]	; (80172b8 <ip_reass_free_complete_datagram+0x13c>)
 801720e:	4828      	ldr	r0, [pc, #160]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 8017210:	f001 fac0 	bl	8018794 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017214:	8bfa      	ldrh	r2, [r7, #30]
 8017216:	8a7b      	ldrh	r3, [r7, #18]
 8017218:	4413      	add	r3, r2
 801721a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801721c:	69b8      	ldr	r0, [r7, #24]
 801721e:	f7f7 fb05 	bl	800e82c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017228:	e01f      	b.n	801726a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801722a:	69bb      	ldr	r3, [r7, #24]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017230:	69bb      	ldr	r3, [r7, #24]
 8017232:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801723a:	68f8      	ldr	r0, [r7, #12]
 801723c:	f7f7 fb84 	bl	800e948 <pbuf_clen>
 8017240:	4603      	mov	r3, r0
 8017242:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017244:	8bfa      	ldrh	r2, [r7, #30]
 8017246:	8a7b      	ldrh	r3, [r7, #18]
 8017248:	4413      	add	r3, r2
 801724a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801724e:	db05      	blt.n	801725c <ip_reass_free_complete_datagram+0xe0>
 8017250:	4b15      	ldr	r3, [pc, #84]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 8017252:	22cc      	movs	r2, #204	; 0xcc
 8017254:	4918      	ldr	r1, [pc, #96]	; (80172b8 <ip_reass_free_complete_datagram+0x13c>)
 8017256:	4816      	ldr	r0, [pc, #88]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 8017258:	f001 fa9c 	bl	8018794 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801725c:	8bfa      	ldrh	r2, [r7, #30]
 801725e:	8a7b      	ldrh	r3, [r7, #18]
 8017260:	4413      	add	r3, r2
 8017262:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017264:	68f8      	ldr	r0, [r7, #12]
 8017266:	f7f7 fae1 	bl	800e82c <pbuf_free>
  while (p != NULL) {
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d1dc      	bne.n	801722a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 f8c2 	bl	80173fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017278:	4b10      	ldr	r3, [pc, #64]	; (80172bc <ip_reass_free_complete_datagram+0x140>)
 801727a:	881b      	ldrh	r3, [r3, #0]
 801727c:	8bfa      	ldrh	r2, [r7, #30]
 801727e:	429a      	cmp	r2, r3
 8017280:	d905      	bls.n	801728e <ip_reass_free_complete_datagram+0x112>
 8017282:	4b09      	ldr	r3, [pc, #36]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 8017284:	22d2      	movs	r2, #210	; 0xd2
 8017286:	490e      	ldr	r1, [pc, #56]	; (80172c0 <ip_reass_free_complete_datagram+0x144>)
 8017288:	4809      	ldr	r0, [pc, #36]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 801728a:	f001 fa83 	bl	8018794 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801728e:	4b0b      	ldr	r3, [pc, #44]	; (80172bc <ip_reass_free_complete_datagram+0x140>)
 8017290:	881a      	ldrh	r2, [r3, #0]
 8017292:	8bfb      	ldrh	r3, [r7, #30]
 8017294:	1ad3      	subs	r3, r2, r3
 8017296:	b29a      	uxth	r2, r3
 8017298:	4b08      	ldr	r3, [pc, #32]	; (80172bc <ip_reass_free_complete_datagram+0x140>)
 801729a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801729c:	8bfb      	ldrh	r3, [r7, #30]
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3720      	adds	r7, #32
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	0801cc24 	.word	0x0801cc24
 80172ac:	0801cc60 	.word	0x0801cc60
 80172b0:	0801cc6c 	.word	0x0801cc6c
 80172b4:	0801cc94 	.word	0x0801cc94
 80172b8:	0801cca8 	.word	0x0801cca8
 80172bc:	2000da20 	.word	0x2000da20
 80172c0:	0801ccc8 	.word	0x0801ccc8

080172c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b08a      	sub	sp, #40	; 0x28
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
 80172cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80172ce:	2300      	movs	r3, #0
 80172d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80172d2:	2300      	movs	r3, #0
 80172d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80172d6:	2300      	movs	r3, #0
 80172d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80172da:	2300      	movs	r3, #0
 80172dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80172de:	2300      	movs	r3, #0
 80172e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80172e2:	4b28      	ldr	r3, [pc, #160]	; (8017384 <ip_reass_remove_oldest_datagram+0xc0>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80172e8:	e030      	b.n	801734c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80172ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ec:	695a      	ldr	r2, [r3, #20]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d10c      	bne.n	8017310 <ip_reass_remove_oldest_datagram+0x4c>
 80172f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f8:	699a      	ldr	r2, [r3, #24]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	691b      	ldr	r3, [r3, #16]
 80172fe:	429a      	cmp	r2, r3
 8017300:	d106      	bne.n	8017310 <ip_reass_remove_oldest_datagram+0x4c>
 8017302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017304:	899a      	ldrh	r2, [r3, #12]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	889b      	ldrh	r3, [r3, #4]
 801730a:	b29b      	uxth	r3, r3
 801730c:	429a      	cmp	r2, r3
 801730e:	d014      	beq.n	801733a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	3301      	adds	r3, #1
 8017314:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017316:	6a3b      	ldr	r3, [r7, #32]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d104      	bne.n	8017326 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	61bb      	str	r3, [r7, #24]
 8017324:	e009      	b.n	801733a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017328:	7fda      	ldrb	r2, [r3, #31]
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	7fdb      	ldrb	r3, [r3, #31]
 801732e:	429a      	cmp	r2, r3
 8017330:	d803      	bhi.n	801733a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017334:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017344:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734e:	2b00      	cmp	r3, #0
 8017350:	d1cb      	bne.n	80172ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017352:	6a3b      	ldr	r3, [r7, #32]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d008      	beq.n	801736a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017358:	69b9      	ldr	r1, [r7, #24]
 801735a:	6a38      	ldr	r0, [r7, #32]
 801735c:	f7ff ff0e 	bl	801717c <ip_reass_free_complete_datagram>
 8017360:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017362:	697a      	ldr	r2, [r7, #20]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	4413      	add	r3, r2
 8017368:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801736a:	697a      	ldr	r2, [r7, #20]
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	429a      	cmp	r2, r3
 8017370:	da02      	bge.n	8017378 <ip_reass_remove_oldest_datagram+0xb4>
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	2b01      	cmp	r3, #1
 8017376:	dcac      	bgt.n	80172d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017378:	697b      	ldr	r3, [r7, #20]
}
 801737a:	4618      	mov	r0, r3
 801737c:	3728      	adds	r7, #40	; 0x28
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	2000da1c 	.word	0x2000da1c

08017388 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017392:	2004      	movs	r0, #4
 8017394:	f7f6 fbb8 	bl	800db08 <memp_malloc>
 8017398:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d110      	bne.n	80173c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80173a0:	6839      	ldr	r1, [r7, #0]
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f7ff ff8e 	bl	80172c4 <ip_reass_remove_oldest_datagram>
 80173a8:	4602      	mov	r2, r0
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	4293      	cmp	r3, r2
 80173ae:	dc03      	bgt.n	80173b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80173b0:	2004      	movs	r0, #4
 80173b2:	f7f6 fba9 	bl	800db08 <memp_malloc>
 80173b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80173be:	2300      	movs	r3, #0
 80173c0:	e016      	b.n	80173f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80173c2:	2220      	movs	r2, #32
 80173c4:	2100      	movs	r1, #0
 80173c6:	68f8      	ldr	r0, [r7, #12]
 80173c8:	f001 f8fc 	bl	80185c4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	220f      	movs	r2, #15
 80173d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80173d2:	4b09      	ldr	r3, [pc, #36]	; (80173f8 <ip_reass_enqueue_new_datagram+0x70>)
 80173d4:	681a      	ldr	r2, [r3, #0]
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80173da:	4a07      	ldr	r2, [pc, #28]	; (80173f8 <ip_reass_enqueue_new_datagram+0x70>)
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	3308      	adds	r3, #8
 80173e4:	2214      	movs	r2, #20
 80173e6:	6879      	ldr	r1, [r7, #4]
 80173e8:	4618      	mov	r0, r3
 80173ea:	f001 f8c3 	bl	8018574 <memcpy>
  return ipr;
 80173ee:	68fb      	ldr	r3, [r7, #12]
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3710      	adds	r7, #16
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	2000da1c 	.word	0x2000da1c

080173fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017406:	4b10      	ldr	r3, [pc, #64]	; (8017448 <ip_reass_dequeue_datagram+0x4c>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	429a      	cmp	r2, r3
 801740e:	d104      	bne.n	801741a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	4a0c      	ldr	r2, [pc, #48]	; (8017448 <ip_reass_dequeue_datagram+0x4c>)
 8017416:	6013      	str	r3, [r2, #0]
 8017418:	e00d      	b.n	8017436 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d106      	bne.n	801742e <ip_reass_dequeue_datagram+0x32>
 8017420:	4b0a      	ldr	r3, [pc, #40]	; (801744c <ip_reass_dequeue_datagram+0x50>)
 8017422:	f240 1245 	movw	r2, #325	; 0x145
 8017426:	490a      	ldr	r1, [pc, #40]	; (8017450 <ip_reass_dequeue_datagram+0x54>)
 8017428:	480a      	ldr	r0, [pc, #40]	; (8017454 <ip_reass_dequeue_datagram+0x58>)
 801742a:	f001 f9b3 	bl	8018794 <iprintf>
    prev->next = ipr->next;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681a      	ldr	r2, [r3, #0]
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017436:	6879      	ldr	r1, [r7, #4]
 8017438:	2004      	movs	r0, #4
 801743a:	f7f6 fbb7 	bl	800dbac <memp_free>
}
 801743e:	bf00      	nop
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	2000da1c 	.word	0x2000da1c
 801744c:	0801cc24 	.word	0x0801cc24
 8017450:	0801ccec 	.word	0x0801ccec
 8017454:	0801cc6c 	.word	0x0801cc6c

08017458 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08c      	sub	sp, #48	; 0x30
 801745c:	af00      	add	r7, sp, #0
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	60b9      	str	r1, [r7, #8]
 8017462:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017464:	2300      	movs	r3, #0
 8017466:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017468:	2301      	movs	r3, #1
 801746a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	885b      	ldrh	r3, [r3, #2]
 8017476:	b29b      	uxth	r3, r3
 8017478:	4618      	mov	r0, r3
 801747a:	f7f5 fe8f 	bl	800d19c <lwip_htons>
 801747e:	4603      	mov	r3, r0
 8017480:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	f003 030f 	and.w	r3, r3, #15
 801748a:	b2db      	uxtb	r3, r3
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017490:	7e7b      	ldrb	r3, [r7, #25]
 8017492:	b29b      	uxth	r3, r3
 8017494:	8b7a      	ldrh	r2, [r7, #26]
 8017496:	429a      	cmp	r2, r3
 8017498:	d202      	bcs.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801749a:	f04f 33ff 	mov.w	r3, #4294967295
 801749e:	e135      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80174a0:	7e7b      	ldrb	r3, [r7, #25]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	8b7a      	ldrh	r2, [r7, #26]
 80174a6:	1ad3      	subs	r3, r2, r3
 80174a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80174aa:	69fb      	ldr	r3, [r7, #28]
 80174ac:	88db      	ldrh	r3, [r3, #6]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f5 fe73 	bl	800d19c <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174bc:	b29b      	uxth	r3, r3
 80174be:	00db      	lsls	r3, r3, #3
 80174c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80174c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ca:	2200      	movs	r2, #0
 80174cc:	701a      	strb	r2, [r3, #0]
 80174ce:	2200      	movs	r2, #0
 80174d0:	705a      	strb	r2, [r3, #1]
 80174d2:	2200      	movs	r2, #0
 80174d4:	709a      	strb	r2, [r3, #2]
 80174d6:	2200      	movs	r2, #0
 80174d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	8afa      	ldrh	r2, [r7, #22]
 80174de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80174e0:	8afa      	ldrh	r2, [r7, #22]
 80174e2:	8b7b      	ldrh	r3, [r7, #26]
 80174e4:	4413      	add	r3, r2
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80174ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ee:	88db      	ldrh	r3, [r3, #6]
 80174f0:	b29b      	uxth	r3, r3
 80174f2:	8afa      	ldrh	r2, [r7, #22]
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d902      	bls.n	80174fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174f8:	f04f 33ff 	mov.w	r3, #4294967295
 80174fc:	e106      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	685b      	ldr	r3, [r3, #4]
 8017502:	627b      	str	r3, [r7, #36]	; 0x24
 8017504:	e068      	b.n	80175d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750e:	889b      	ldrh	r3, [r3, #4]
 8017510:	b29a      	uxth	r2, r3
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	889b      	ldrh	r3, [r3, #4]
 8017516:	b29b      	uxth	r3, r3
 8017518:	429a      	cmp	r2, r3
 801751a:	d235      	bcs.n	8017588 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017520:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017524:	2b00      	cmp	r3, #0
 8017526:	d020      	beq.n	801756a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752a:	889b      	ldrh	r3, [r3, #4]
 801752c:	b29a      	uxth	r2, r3
 801752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017530:	88db      	ldrh	r3, [r3, #6]
 8017532:	b29b      	uxth	r3, r3
 8017534:	429a      	cmp	r2, r3
 8017536:	d307      	bcc.n	8017548 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	88db      	ldrh	r3, [r3, #6]
 801753c:	b29a      	uxth	r2, r3
 801753e:	693b      	ldr	r3, [r7, #16]
 8017540:	889b      	ldrh	r3, [r3, #4]
 8017542:	b29b      	uxth	r3, r3
 8017544:	429a      	cmp	r2, r3
 8017546:	d902      	bls.n	801754e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017548:	f04f 33ff 	mov.w	r3, #4294967295
 801754c:	e0de      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017550:	68ba      	ldr	r2, [r7, #8]
 8017552:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017556:	88db      	ldrh	r3, [r3, #6]
 8017558:	b29a      	uxth	r2, r3
 801755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801755c:	889b      	ldrh	r3, [r3, #4]
 801755e:	b29b      	uxth	r3, r3
 8017560:	429a      	cmp	r2, r3
 8017562:	d03d      	beq.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017564:	2300      	movs	r3, #0
 8017566:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017568:	e03a      	b.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756c:	88db      	ldrh	r3, [r3, #6]
 801756e:	b29a      	uxth	r2, r3
 8017570:	693b      	ldr	r3, [r7, #16]
 8017572:	889b      	ldrh	r3, [r3, #4]
 8017574:	b29b      	uxth	r3, r3
 8017576:	429a      	cmp	r2, r3
 8017578:	d902      	bls.n	8017580 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801757a:	f04f 33ff 	mov.w	r3, #4294967295
 801757e:	e0c5      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	68ba      	ldr	r2, [r7, #8]
 8017584:	605a      	str	r2, [r3, #4]
      break;
 8017586:	e02b      	b.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	889b      	ldrh	r3, [r3, #4]
 801758c:	b29a      	uxth	r2, r3
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	889b      	ldrh	r3, [r3, #4]
 8017592:	b29b      	uxth	r3, r3
 8017594:	429a      	cmp	r2, r3
 8017596:	d102      	bne.n	801759e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017598:	f04f 33ff 	mov.w	r3, #4294967295
 801759c:	e0b6      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a0:	889b      	ldrh	r3, [r3, #4]
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	88db      	ldrh	r3, [r3, #6]
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	429a      	cmp	r2, r3
 80175ac:	d202      	bcs.n	80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175ae:	f04f 33ff 	mov.w	r3, #4294967295
 80175b2:	e0ab      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80175b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d009      	beq.n	80175ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80175ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175bc:	88db      	ldrh	r3, [r3, #6]
 80175be:	b29a      	uxth	r2, r3
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	889b      	ldrh	r3, [r3, #4]
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	429a      	cmp	r2, r3
 80175c8:	d001      	beq.n	80175ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80175ca:	2300      	movs	r3, #0
 80175cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d193      	bne.n	8017506 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80175de:	e000      	b.n	80175e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80175e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80175e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d12d      	bne.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80175e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d01c      	beq.n	8017628 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	88db      	ldrh	r3, [r3, #6]
 80175f2:	b29a      	uxth	r2, r3
 80175f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f6:	889b      	ldrh	r3, [r3, #4]
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d906      	bls.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80175fe:	4b45      	ldr	r3, [pc, #276]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017600:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017604:	4944      	ldr	r1, [pc, #272]	; (8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017606:	4845      	ldr	r0, [pc, #276]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017608:	f001 f8c4 	bl	8018794 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801760e:	68ba      	ldr	r2, [r7, #8]
 8017610:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017614:	88db      	ldrh	r3, [r3, #6]
 8017616:	b29a      	uxth	r2, r3
 8017618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761a:	889b      	ldrh	r3, [r3, #4]
 801761c:	b29b      	uxth	r3, r3
 801761e:	429a      	cmp	r2, r3
 8017620:	d010      	beq.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017622:	2300      	movs	r3, #0
 8017624:	623b      	str	r3, [r7, #32]
 8017626:	e00d      	b.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d006      	beq.n	801763e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017630:	4b38      	ldr	r3, [pc, #224]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017632:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017636:	493a      	ldr	r1, [pc, #232]	; (8017720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017638:	4838      	ldr	r0, [pc, #224]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801763a:	f001 f8ab 	bl	8018794 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d105      	bne.n	8017656 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	7f9b      	ldrb	r3, [r3, #30]
 801764e:	f003 0301 	and.w	r3, r3, #1
 8017652:	2b00      	cmp	r3, #0
 8017654:	d059      	beq.n	801770a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017656:	6a3b      	ldr	r3, [r7, #32]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d04f      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d006      	beq.n	8017672 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	685b      	ldr	r3, [r3, #4]
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	889b      	ldrh	r3, [r3, #4]
 801766c:	b29b      	uxth	r3, r3
 801766e:	2b00      	cmp	r3, #0
 8017670:	d002      	beq.n	8017678 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017672:	2300      	movs	r3, #0
 8017674:	623b      	str	r3, [r7, #32]
 8017676:	e041      	b.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017682:	e012      	b.n	80176aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017686:	685b      	ldr	r3, [r3, #4]
 8017688:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768c:	88db      	ldrh	r3, [r3, #6]
 801768e:	b29a      	uxth	r2, r3
 8017690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017692:	889b      	ldrh	r3, [r3, #4]
 8017694:	b29b      	uxth	r3, r3
 8017696:	429a      	cmp	r2, r3
 8017698:	d002      	beq.n	80176a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801769a:	2300      	movs	r3, #0
 801769c:	623b      	str	r3, [r7, #32]
            break;
 801769e:	e007      	b.n	80176b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80176a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80176a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80176aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d1e9      	bne.n	8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d022      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d106      	bne.n	80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80176be:	4b15      	ldr	r3, [pc, #84]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176c0:	f240 12df 	movw	r2, #479	; 0x1df
 80176c4:	4917      	ldr	r1, [pc, #92]	; (8017724 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80176c6:	4815      	ldr	r0, [pc, #84]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176c8:	f001 f864 	bl	8018794 <iprintf>
          LWIP_ASSERT("sanity check",
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	685b      	ldr	r3, [r3, #4]
 80176d0:	685b      	ldr	r3, [r3, #4]
 80176d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d106      	bne.n	80176e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80176d8:	4b0e      	ldr	r3, [pc, #56]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80176de:	4911      	ldr	r1, [pc, #68]	; (8017724 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80176e0:	480e      	ldr	r0, [pc, #56]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176e2:	f001 f857 	bl	8018794 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80176e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d006      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80176ee:	4b09      	ldr	r3, [pc, #36]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80176f4:	490c      	ldr	r1, [pc, #48]	; (8017728 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80176f6:	4809      	ldr	r0, [pc, #36]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176f8:	f001 f84c 	bl	8018794 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80176fc:	6a3b      	ldr	r3, [r7, #32]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	bf14      	ite	ne
 8017702:	2301      	movne	r3, #1
 8017704:	2300      	moveq	r3, #0
 8017706:	b2db      	uxtb	r3, r3
 8017708:	e000      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801770a:	2300      	movs	r3, #0
}
 801770c:	4618      	mov	r0, r3
 801770e:	3730      	adds	r7, #48	; 0x30
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}
 8017714:	0801cc24 	.word	0x0801cc24
 8017718:	0801cd08 	.word	0x0801cd08
 801771c:	0801cc6c 	.word	0x0801cc6c
 8017720:	0801cd28 	.word	0x0801cd28
 8017724:	0801cd60 	.word	0x0801cd60
 8017728:	0801cd70 	.word	0x0801cd70

0801772c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b08e      	sub	sp, #56	; 0x38
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	f003 030f 	and.w	r3, r3, #15
 8017742:	b2db      	uxtb	r3, r3
 8017744:	009b      	lsls	r3, r3, #2
 8017746:	b2db      	uxtb	r3, r3
 8017748:	2b14      	cmp	r3, #20
 801774a:	f040 8171 	bne.w	8017a30 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	88db      	ldrh	r3, [r3, #6]
 8017752:	b29b      	uxth	r3, r3
 8017754:	4618      	mov	r0, r3
 8017756:	f7f5 fd21 	bl	800d19c <lwip_htons>
 801775a:	4603      	mov	r3, r0
 801775c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017760:	b29b      	uxth	r3, r3
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017768:	885b      	ldrh	r3, [r3, #2]
 801776a:	b29b      	uxth	r3, r3
 801776c:	4618      	mov	r0, r3
 801776e:	f7f5 fd15 	bl	800d19c <lwip_htons>
 8017772:	4603      	mov	r3, r0
 8017774:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	f003 030f 	and.w	r3, r3, #15
 801777e:	b2db      	uxtb	r3, r3
 8017780:	009b      	lsls	r3, r3, #2
 8017782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801778a:	b29b      	uxth	r3, r3
 801778c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801778e:	429a      	cmp	r2, r3
 8017790:	f0c0 8150 	bcc.w	8017a34 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017798:	b29b      	uxth	r3, r3
 801779a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801779c:	1ad3      	subs	r3, r2, r3
 801779e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	f7f7 f8d1 	bl	800e948 <pbuf_clen>
 80177a6:	4603      	mov	r3, r0
 80177a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80177aa:	4b8c      	ldr	r3, [pc, #560]	; (80179dc <ip4_reass+0x2b0>)
 80177ac:	881b      	ldrh	r3, [r3, #0]
 80177ae:	461a      	mov	r2, r3
 80177b0:	8c3b      	ldrh	r3, [r7, #32]
 80177b2:	4413      	add	r3, r2
 80177b4:	2b0a      	cmp	r3, #10
 80177b6:	dd10      	ble.n	80177da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177b8:	8c3b      	ldrh	r3, [r7, #32]
 80177ba:	4619      	mov	r1, r3
 80177bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177be:	f7ff fd81 	bl	80172c4 <ip_reass_remove_oldest_datagram>
 80177c2:	4603      	mov	r3, r0
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	f000 8137 	beq.w	8017a38 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80177ca:	4b84      	ldr	r3, [pc, #528]	; (80179dc <ip4_reass+0x2b0>)
 80177cc:	881b      	ldrh	r3, [r3, #0]
 80177ce:	461a      	mov	r2, r3
 80177d0:	8c3b      	ldrh	r3, [r7, #32]
 80177d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177d4:	2b0a      	cmp	r3, #10
 80177d6:	f300 812f 	bgt.w	8017a38 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80177da:	4b81      	ldr	r3, [pc, #516]	; (80179e0 <ip4_reass+0x2b4>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	633b      	str	r3, [r7, #48]	; 0x30
 80177e0:	e015      	b.n	801780e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80177e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e4:	695a      	ldr	r2, [r3, #20]
 80177e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e8:	68db      	ldr	r3, [r3, #12]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d10c      	bne.n	8017808 <ip4_reass+0xdc>
 80177ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f0:	699a      	ldr	r2, [r3, #24]
 80177f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f4:	691b      	ldr	r3, [r3, #16]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d106      	bne.n	8017808 <ip4_reass+0xdc>
 80177fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fc:	899a      	ldrh	r2, [r3, #12]
 80177fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017800:	889b      	ldrh	r3, [r3, #4]
 8017802:	b29b      	uxth	r3, r3
 8017804:	429a      	cmp	r2, r3
 8017806:	d006      	beq.n	8017816 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	633b      	str	r3, [r7, #48]	; 0x30
 801780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017810:	2b00      	cmp	r3, #0
 8017812:	d1e6      	bne.n	80177e2 <ip4_reass+0xb6>
 8017814:	e000      	b.n	8017818 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017816:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801781a:	2b00      	cmp	r3, #0
 801781c:	d109      	bne.n	8017832 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801781e:	8c3b      	ldrh	r3, [r7, #32]
 8017820:	4619      	mov	r1, r3
 8017822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017824:	f7ff fdb0 	bl	8017388 <ip_reass_enqueue_new_datagram>
 8017828:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782c:	2b00      	cmp	r3, #0
 801782e:	d11c      	bne.n	801786a <ip4_reass+0x13e>
      goto nullreturn;
 8017830:	e105      	b.n	8017a3e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	88db      	ldrh	r3, [r3, #6]
 8017836:	b29b      	uxth	r3, r3
 8017838:	4618      	mov	r0, r3
 801783a:	f7f5 fcaf 	bl	800d19c <lwip_htons>
 801783e:	4603      	mov	r3, r0
 8017840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017844:	2b00      	cmp	r3, #0
 8017846:	d110      	bne.n	801786a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784a:	89db      	ldrh	r3, [r3, #14]
 801784c:	4618      	mov	r0, r3
 801784e:	f7f5 fca5 	bl	800d19c <lwip_htons>
 8017852:	4603      	mov	r3, r0
 8017854:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017858:	2b00      	cmp	r3, #0
 801785a:	d006      	beq.n	801786a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785e:	3308      	adds	r3, #8
 8017860:	2214      	movs	r2, #20
 8017862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017864:	4618      	mov	r0, r3
 8017866:	f000 fe85 	bl	8018574 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786c:	88db      	ldrh	r3, [r3, #6]
 801786e:	b29b      	uxth	r3, r3
 8017870:	f003 0320 	and.w	r3, r3, #32
 8017874:	2b00      	cmp	r3, #0
 8017876:	bf0c      	ite	eq
 8017878:	2301      	moveq	r3, #1
 801787a:	2300      	movne	r3, #0
 801787c:	b2db      	uxtb	r3, r3
 801787e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017880:	69fb      	ldr	r3, [r7, #28]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00e      	beq.n	80178a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801788a:	4413      	add	r3, r2
 801788c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801788e:	8b7a      	ldrh	r2, [r7, #26]
 8017890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017892:	429a      	cmp	r2, r3
 8017894:	f0c0 80a0 	bcc.w	80179d8 <ip4_reass+0x2ac>
 8017898:	8b7b      	ldrh	r3, [r7, #26]
 801789a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801789e:	4293      	cmp	r3, r2
 80178a0:	f200 809a 	bhi.w	80179d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80178a4:	69fa      	ldr	r2, [r7, #28]
 80178a6:	6879      	ldr	r1, [r7, #4]
 80178a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178aa:	f7ff fdd5 	bl	8017458 <ip_reass_chain_frag_into_datagram_and_validate>
 80178ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178b6:	f000 809b 	beq.w	80179f0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80178ba:	4b48      	ldr	r3, [pc, #288]	; (80179dc <ip4_reass+0x2b0>)
 80178bc:	881a      	ldrh	r2, [r3, #0]
 80178be:	8c3b      	ldrh	r3, [r7, #32]
 80178c0:	4413      	add	r3, r2
 80178c2:	b29a      	uxth	r2, r3
 80178c4:	4b45      	ldr	r3, [pc, #276]	; (80179dc <ip4_reass+0x2b0>)
 80178c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80178c8:	69fb      	ldr	r3, [r7, #28]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d00d      	beq.n	80178ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80178ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80178d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178d2:	4413      	add	r3, r2
 80178d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80178d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d8:	8a7a      	ldrh	r2, [r7, #18]
 80178da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80178dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178de:	7f9b      	ldrb	r3, [r3, #30]
 80178e0:	f043 0301 	orr.w	r3, r3, #1
 80178e4:	b2da      	uxtb	r2, r3
 80178e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d171      	bne.n	80179d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80178f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f2:	8b9b      	ldrh	r3, [r3, #28]
 80178f4:	3314      	adds	r3, #20
 80178f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80178f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fa:	685b      	ldr	r3, [r3, #4]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017904:	685b      	ldr	r3, [r3, #4]
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801790c:	3308      	adds	r3, #8
 801790e:	2214      	movs	r2, #20
 8017910:	4619      	mov	r1, r3
 8017912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017914:	f000 fe2e 	bl	8018574 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017918:	8a3b      	ldrh	r3, [r7, #16]
 801791a:	4618      	mov	r0, r3
 801791c:	f7f5 fc3e 	bl	800d19c <lwip_htons>
 8017920:	4603      	mov	r3, r0
 8017922:	461a      	mov	r2, r3
 8017924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017926:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801792a:	2200      	movs	r2, #0
 801792c:	719a      	strb	r2, [r3, #6]
 801792e:	2200      	movs	r2, #0
 8017930:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017934:	2200      	movs	r2, #0
 8017936:	729a      	strb	r2, [r3, #10]
 8017938:	2200      	movs	r2, #0
 801793a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017942:	e00d      	b.n	8017960 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801794a:	2114      	movs	r1, #20
 801794c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801794e:	f7f6 fee7 	bl	800e720 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017952:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f7f7 f837 	bl	800e9c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017962:	2b00      	cmp	r3, #0
 8017964:	d1ee      	bne.n	8017944 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017966:	4b1e      	ldr	r3, [pc, #120]	; (80179e0 <ip4_reass+0x2b4>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801796c:	429a      	cmp	r2, r3
 801796e:	d102      	bne.n	8017976 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017970:	2300      	movs	r3, #0
 8017972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017974:	e010      	b.n	8017998 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017976:	4b1a      	ldr	r3, [pc, #104]	; (80179e0 <ip4_reass+0x2b4>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801797c:	e007      	b.n	801798e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017984:	429a      	cmp	r2, r3
 8017986:	d006      	beq.n	8017996 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017990:	2b00      	cmp	r3, #0
 8017992:	d1f4      	bne.n	801797e <ip4_reass+0x252>
 8017994:	e000      	b.n	8017998 <ip4_reass+0x26c>
          break;
 8017996:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801799a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801799c:	f7ff fd2e 	bl	80173fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f7f6 ffd1 	bl	800e948 <pbuf_clen>
 80179a6:	4603      	mov	r3, r0
 80179a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80179aa:	4b0c      	ldr	r3, [pc, #48]	; (80179dc <ip4_reass+0x2b0>)
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	8c3a      	ldrh	r2, [r7, #32]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d906      	bls.n	80179c2 <ip4_reass+0x296>
 80179b4:	4b0b      	ldr	r3, [pc, #44]	; (80179e4 <ip4_reass+0x2b8>)
 80179b6:	f240 229b 	movw	r2, #667	; 0x29b
 80179ba:	490b      	ldr	r1, [pc, #44]	; (80179e8 <ip4_reass+0x2bc>)
 80179bc:	480b      	ldr	r0, [pc, #44]	; (80179ec <ip4_reass+0x2c0>)
 80179be:	f000 fee9 	bl	8018794 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80179c2:	4b06      	ldr	r3, [pc, #24]	; (80179dc <ip4_reass+0x2b0>)
 80179c4:	881a      	ldrh	r2, [r3, #0]
 80179c6:	8c3b      	ldrh	r3, [r7, #32]
 80179c8:	1ad3      	subs	r3, r2, r3
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	4b03      	ldr	r3, [pc, #12]	; (80179dc <ip4_reass+0x2b0>)
 80179ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	e038      	b.n	8017a46 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80179d4:	2300      	movs	r3, #0
 80179d6:	e036      	b.n	8017a46 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80179d8:	bf00      	nop
 80179da:	e00a      	b.n	80179f2 <ip4_reass+0x2c6>
 80179dc:	2000da20 	.word	0x2000da20
 80179e0:	2000da1c 	.word	0x2000da1c
 80179e4:	0801cc24 	.word	0x0801cc24
 80179e8:	0801cd94 	.word	0x0801cd94
 80179ec:	0801cc6c 	.word	0x0801cc6c
    goto nullreturn_ipr;
 80179f0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80179f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d106      	bne.n	8017a06 <ip4_reass+0x2da>
 80179f8:	4b15      	ldr	r3, [pc, #84]	; (8017a50 <ip4_reass+0x324>)
 80179fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80179fe:	4915      	ldr	r1, [pc, #84]	; (8017a54 <ip4_reass+0x328>)
 8017a00:	4815      	ldr	r0, [pc, #84]	; (8017a58 <ip4_reass+0x32c>)
 8017a02:	f000 fec7 	bl	8018794 <iprintf>
  if (ipr->p == NULL) {
 8017a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a08:	685b      	ldr	r3, [r3, #4]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d116      	bne.n	8017a3c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017a0e:	4b13      	ldr	r3, [pc, #76]	; (8017a5c <ip4_reass+0x330>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d006      	beq.n	8017a26 <ip4_reass+0x2fa>
 8017a18:	4b0d      	ldr	r3, [pc, #52]	; (8017a50 <ip4_reass+0x324>)
 8017a1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017a1e:	4910      	ldr	r1, [pc, #64]	; (8017a60 <ip4_reass+0x334>)
 8017a20:	480d      	ldr	r0, [pc, #52]	; (8017a58 <ip4_reass+0x32c>)
 8017a22:	f000 feb7 	bl	8018794 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017a26:	2100      	movs	r1, #0
 8017a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a2a:	f7ff fce7 	bl	80173fc <ip_reass_dequeue_datagram>
 8017a2e:	e006      	b.n	8017a3e <ip4_reass+0x312>
    goto nullreturn;
 8017a30:	bf00      	nop
 8017a32:	e004      	b.n	8017a3e <ip4_reass+0x312>
    goto nullreturn;
 8017a34:	bf00      	nop
 8017a36:	e002      	b.n	8017a3e <ip4_reass+0x312>
      goto nullreturn;
 8017a38:	bf00      	nop
 8017a3a:	e000      	b.n	8017a3e <ip4_reass+0x312>
  }

nullreturn:
 8017a3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f7f6 fef4 	bl	800e82c <pbuf_free>
  return NULL;
 8017a44:	2300      	movs	r3, #0
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3738      	adds	r7, #56	; 0x38
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
 8017a4e:	bf00      	nop
 8017a50:	0801cc24 	.word	0x0801cc24
 8017a54:	0801cdb0 	.word	0x0801cdb0
 8017a58:	0801cc6c 	.word	0x0801cc6c
 8017a5c:	2000da1c 	.word	0x2000da1c
 8017a60:	0801cdbc 	.word	0x0801cdbc

08017a64 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017a68:	2005      	movs	r0, #5
 8017a6a:	f7f6 f84d 	bl	800db08 <memp_malloc>
 8017a6e:	4603      	mov	r3, r0
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d106      	bne.n	8017a90 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017a82:	4b07      	ldr	r3, [pc, #28]	; (8017aa0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017a84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017a88:	4906      	ldr	r1, [pc, #24]	; (8017aa4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017a8a:	4807      	ldr	r0, [pc, #28]	; (8017aa8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017a8c:	f000 fe82 	bl	8018794 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017a90:	6879      	ldr	r1, [r7, #4]
 8017a92:	2005      	movs	r0, #5
 8017a94:	f7f6 f88a 	bl	800dbac <memp_free>
}
 8017a98:	bf00      	nop
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	0801cc24 	.word	0x0801cc24
 8017aa4:	0801cddc 	.word	0x0801cddc
 8017aa8:	0801cc6c 	.word	0x0801cc6c

08017aac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d106      	bne.n	8017acc <ipfrag_free_pbuf_custom+0x20>
 8017abe:	4b11      	ldr	r3, [pc, #68]	; (8017b04 <ipfrag_free_pbuf_custom+0x58>)
 8017ac0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017ac4:	4910      	ldr	r1, [pc, #64]	; (8017b08 <ipfrag_free_pbuf_custom+0x5c>)
 8017ac6:	4811      	ldr	r0, [pc, #68]	; (8017b0c <ipfrag_free_pbuf_custom+0x60>)
 8017ac8:	f000 fe64 	bl	8018794 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017acc:	68fa      	ldr	r2, [r7, #12]
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d006      	beq.n	8017ae2 <ipfrag_free_pbuf_custom+0x36>
 8017ad4:	4b0b      	ldr	r3, [pc, #44]	; (8017b04 <ipfrag_free_pbuf_custom+0x58>)
 8017ad6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017ada:	490d      	ldr	r1, [pc, #52]	; (8017b10 <ipfrag_free_pbuf_custom+0x64>)
 8017adc:	480b      	ldr	r0, [pc, #44]	; (8017b0c <ipfrag_free_pbuf_custom+0x60>)
 8017ade:	f000 fe59 	bl	8018794 <iprintf>
  if (pcr->original != NULL) {
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	695b      	ldr	r3, [r3, #20]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d004      	beq.n	8017af4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	695b      	ldr	r3, [r3, #20]
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7f6 fe9c 	bl	800e82c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017af4:	68f8      	ldr	r0, [r7, #12]
 8017af6:	f7ff ffbd 	bl	8017a74 <ip_frag_free_pbuf_custom_ref>
}
 8017afa:	bf00      	nop
 8017afc:	3710      	adds	r7, #16
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	0801cc24 	.word	0x0801cc24
 8017b08:	0801cde8 	.word	0x0801cde8
 8017b0c:	0801cc6c 	.word	0x0801cc6c
 8017b10:	0801cdf4 	.word	0x0801cdf4

08017b14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b094      	sub	sp, #80	; 0x50
 8017b18:	af02      	add	r7, sp, #8
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017b20:	2300      	movs	r3, #0
 8017b22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b2a:	3b14      	subs	r3, #20
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	da00      	bge.n	8017b32 <ip4_frag+0x1e>
 8017b30:	3307      	adds	r3, #7
 8017b32:	10db      	asrs	r3, r3, #3
 8017b34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017b36:	2314      	movs	r3, #20
 8017b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	685b      	ldr	r3, [r3, #4]
 8017b3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	f003 030f 	and.w	r3, r3, #15
 8017b4c:	b2db      	uxtb	r3, r3
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	b2db      	uxtb	r3, r3
 8017b52:	2b14      	cmp	r3, #20
 8017b54:	d002      	beq.n	8017b5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017b56:	f06f 0305 	mvn.w	r3, #5
 8017b5a:	e110      	b.n	8017d7e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	895b      	ldrh	r3, [r3, #10]
 8017b60:	2b13      	cmp	r3, #19
 8017b62:	d809      	bhi.n	8017b78 <ip4_frag+0x64>
 8017b64:	4b88      	ldr	r3, [pc, #544]	; (8017d88 <ip4_frag+0x274>)
 8017b66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017b6a:	4988      	ldr	r1, [pc, #544]	; (8017d8c <ip4_frag+0x278>)
 8017b6c:	4888      	ldr	r0, [pc, #544]	; (8017d90 <ip4_frag+0x27c>)
 8017b6e:	f000 fe11 	bl	8018794 <iprintf>
 8017b72:	f06f 0305 	mvn.w	r3, #5
 8017b76:	e102      	b.n	8017d7e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7a:	88db      	ldrh	r3, [r3, #6]
 8017b7c:	b29b      	uxth	r3, r3
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f5 fb0c 	bl	800d19c <lwip_htons>
 8017b84:	4603      	mov	r3, r0
 8017b86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017b88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017b92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017b98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	891b      	ldrh	r3, [r3, #8]
 8017b9e:	3b14      	subs	r3, #20
 8017ba0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017ba4:	e0e1      	b.n	8017d6a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017ba6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ba8:	00db      	lsls	r3, r3, #3
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	bf28      	it	cs
 8017bb4:	4613      	movcs	r3, r2
 8017bb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017bb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bbc:	2114      	movs	r1, #20
 8017bbe:	200e      	movs	r0, #14
 8017bc0:	f7f6 fb50 	bl	800e264 <pbuf_alloc>
 8017bc4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f000 80d5 	beq.w	8017d78 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bd0:	895b      	ldrh	r3, [r3, #10]
 8017bd2:	2b13      	cmp	r3, #19
 8017bd4:	d806      	bhi.n	8017be4 <ip4_frag+0xd0>
 8017bd6:	4b6c      	ldr	r3, [pc, #432]	; (8017d88 <ip4_frag+0x274>)
 8017bd8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017bdc:	496d      	ldr	r1, [pc, #436]	; (8017d94 <ip4_frag+0x280>)
 8017bde:	486c      	ldr	r0, [pc, #432]	; (8017d90 <ip4_frag+0x27c>)
 8017be0:	f000 fdd8 	bl	8018794 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be6:	685b      	ldr	r3, [r3, #4]
 8017be8:	2214      	movs	r2, #20
 8017bea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017bec:	4618      	mov	r0, r3
 8017bee:	f000 fcc1 	bl	8018574 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf4:	685b      	ldr	r3, [r3, #4]
 8017bf6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017bf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017bfe:	e064      	b.n	8017cca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	895a      	ldrh	r2, [r3, #10]
 8017c04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c06:	1ad3      	subs	r3, r2, r3
 8017c08:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	895b      	ldrh	r3, [r3, #10]
 8017c0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d906      	bls.n	8017c22 <ip4_frag+0x10e>
 8017c14:	4b5c      	ldr	r3, [pc, #368]	; (8017d88 <ip4_frag+0x274>)
 8017c16:	f240 322d 	movw	r2, #813	; 0x32d
 8017c1a:	495f      	ldr	r1, [pc, #380]	; (8017d98 <ip4_frag+0x284>)
 8017c1c:	485c      	ldr	r0, [pc, #368]	; (8017d90 <ip4_frag+0x27c>)
 8017c1e:	f000 fdb9 	bl	8018794 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017c22:	8bfa      	ldrh	r2, [r7, #30]
 8017c24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c28:	4293      	cmp	r3, r2
 8017c2a:	bf28      	it	cs
 8017c2c:	4613      	movcs	r3, r2
 8017c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017c32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d105      	bne.n	8017c46 <ip4_frag+0x132>
        poff = 0;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	60fb      	str	r3, [r7, #12]
        continue;
 8017c44:	e041      	b.n	8017cca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017c46:	f7ff ff0d 	bl	8017a64 <ip_frag_alloc_pbuf_custom_ref>
 8017c4a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017c4c:	69bb      	ldr	r3, [r7, #24]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d103      	bne.n	8017c5a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c54:	f7f6 fdea 	bl	800e82c <pbuf_free>
        goto memerr;
 8017c58:	e08f      	b.n	8017d7a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c5a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c62:	4413      	add	r3, r2
 8017c64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017c68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c6c:	9201      	str	r2, [sp, #4]
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	4603      	mov	r3, r0
 8017c72:	2241      	movs	r2, #65	; 0x41
 8017c74:	2000      	movs	r0, #0
 8017c76:	f7f6 fc1f 	bl	800e4b8 <pbuf_alloced_custom>
 8017c7a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d106      	bne.n	8017c90 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017c82:	69b8      	ldr	r0, [r7, #24]
 8017c84:	f7ff fef6 	bl	8017a74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c8a:	f7f6 fdcf 	bl	800e82c <pbuf_free>
        goto memerr;
 8017c8e:	e074      	b.n	8017d7a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017c90:	68f8      	ldr	r0, [r7, #12]
 8017c92:	f7f6 fe71 	bl	800e978 <pbuf_ref>
      pcr->original = p;
 8017c96:	69bb      	ldr	r3, [r7, #24]
 8017c98:	68fa      	ldr	r2, [r7, #12]
 8017c9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017c9c:	69bb      	ldr	r3, [r7, #24]
 8017c9e:	4a3f      	ldr	r2, [pc, #252]	; (8017d9c <ip4_frag+0x288>)
 8017ca0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017ca2:	6979      	ldr	r1, [r7, #20]
 8017ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ca6:	f7f6 fe8f 	bl	800e9c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017caa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017cae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017cb2:	1ad3      	subs	r3, r2, r3
 8017cb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017cb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d004      	beq.n	8017cca <ip4_frag+0x1b6>
        poff = 0;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017cca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d196      	bne.n	8017c00 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017cd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017cd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017cd8:	4413      	add	r3, r2
 8017cda:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017ce0:	f1a3 0213 	sub.w	r2, r3, #19
 8017ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	bfcc      	ite	gt
 8017cec:	2301      	movgt	r3, #1
 8017cee:	2300      	movle	r3, #0
 8017cf0:	b2db      	uxtb	r3, r3
 8017cf2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017cf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017cfe:	6a3b      	ldr	r3, [r7, #32]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d002      	beq.n	8017d0a <ip4_frag+0x1f6>
 8017d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d003      	beq.n	8017d12 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017d0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017d10:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017d12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7f5 fa41 	bl	800d19c <lwip_htons>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d20:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017d22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d24:	3314      	adds	r3, #20
 8017d26:	b29b      	uxth	r3, r3
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f7f5 fa37 	bl	800d19c <lwip_htons>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	461a      	mov	r2, r3
 8017d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d34:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d38:	2200      	movs	r2, #0
 8017d3a:	729a      	strb	r2, [r3, #10]
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	695b      	ldr	r3, [r3, #20]
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d48:	68b8      	ldr	r0, [r7, #8]
 8017d4a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d4e:	f7f6 fd6d 	bl	800e82c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017d52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d58:	1ad3      	subs	r3, r2, r3
 8017d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017d5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017d62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d64:	4413      	add	r3, r2
 8017d66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017d6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	f47f af19 	bne.w	8017ba6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017d74:	2300      	movs	r3, #0
 8017d76:	e002      	b.n	8017d7e <ip4_frag+0x26a>
      goto memerr;
 8017d78:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3748      	adds	r7, #72	; 0x48
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	0801cc24 	.word	0x0801cc24
 8017d8c:	0801ce00 	.word	0x0801ce00
 8017d90:	0801cc6c 	.word	0x0801cc6c
 8017d94:	0801ce1c 	.word	0x0801ce1c
 8017d98:	0801ce3c 	.word	0x0801ce3c
 8017d9c:	08017aad 	.word	0x08017aad

08017da0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b086      	sub	sp, #24
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
 8017da8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017daa:	230e      	movs	r3, #14
 8017dac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	895b      	ldrh	r3, [r3, #10]
 8017db2:	2b0e      	cmp	r3, #14
 8017db4:	d96e      	bls.n	8017e94 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	7bdb      	ldrb	r3, [r3, #15]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d106      	bne.n	8017dcc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	b2da      	uxtb	r2, r3
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	685b      	ldr	r3, [r3, #4]
 8017dd0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	7b1a      	ldrb	r2, [r3, #12]
 8017dd6:	7b5b      	ldrb	r3, [r3, #13]
 8017dd8:	021b      	lsls	r3, r3, #8
 8017dda:	4313      	orrs	r3, r2
 8017ddc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	f003 0301 	and.w	r3, r3, #1
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d023      	beq.n	8017e32 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017dea:	693b      	ldr	r3, [r7, #16]
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	2b01      	cmp	r3, #1
 8017df0:	d10f      	bne.n	8017e12 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	785b      	ldrb	r3, [r3, #1]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d11b      	bne.n	8017e32 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017dfe:	2b5e      	cmp	r3, #94	; 0x5e
 8017e00:	d117      	bne.n	8017e32 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	7b5b      	ldrb	r3, [r3, #13]
 8017e06:	f043 0310 	orr.w	r3, r3, #16
 8017e0a:	b2da      	uxtb	r2, r3
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	735a      	strb	r2, [r3, #13]
 8017e10:	e00f      	b.n	8017e32 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017e12:	693b      	ldr	r3, [r7, #16]
 8017e14:	2206      	movs	r2, #6
 8017e16:	4928      	ldr	r1, [pc, #160]	; (8017eb8 <ethernet_input+0x118>)
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f000 fb9b 	bl	8018554 <memcmp>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d106      	bne.n	8017e32 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	7b5b      	ldrb	r3, [r3, #13]
 8017e28:	f043 0308 	orr.w	r3, r3, #8
 8017e2c:	b2da      	uxtb	r2, r3
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017e32:	89fb      	ldrh	r3, [r7, #14]
 8017e34:	2b08      	cmp	r3, #8
 8017e36:	d003      	beq.n	8017e40 <ethernet_input+0xa0>
 8017e38:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017e3c:	d014      	beq.n	8017e68 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017e3e:	e032      	b.n	8017ea6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e46:	f003 0308 	and.w	r3, r3, #8
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d024      	beq.n	8017e98 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017e4e:	8afb      	ldrh	r3, [r7, #22]
 8017e50:	4619      	mov	r1, r3
 8017e52:	6878      	ldr	r0, [r7, #4]
 8017e54:	f7f6 fc64 	bl	800e720 <pbuf_remove_header>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d11e      	bne.n	8017e9c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017e5e:	6839      	ldr	r1, [r7, #0]
 8017e60:	6878      	ldr	r0, [r7, #4]
 8017e62:	f7fe ff21 	bl	8016ca8 <ip4_input>
      break;
 8017e66:	e013      	b.n	8017e90 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e6e:	f003 0308 	and.w	r3, r3, #8
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d014      	beq.n	8017ea0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017e76:	8afb      	ldrh	r3, [r7, #22]
 8017e78:	4619      	mov	r1, r3
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f7f6 fc50 	bl	800e720 <pbuf_remove_header>
 8017e80:	4603      	mov	r3, r0
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d10e      	bne.n	8017ea4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017e86:	6839      	ldr	r1, [r7, #0]
 8017e88:	6878      	ldr	r0, [r7, #4]
 8017e8a:	f7fe f8c1 	bl	8016010 <etharp_input>
      break;
 8017e8e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017e90:	2300      	movs	r3, #0
 8017e92:	e00c      	b.n	8017eae <ethernet_input+0x10e>
    goto free_and_return;
 8017e94:	bf00      	nop
 8017e96:	e006      	b.n	8017ea6 <ethernet_input+0x106>
        goto free_and_return;
 8017e98:	bf00      	nop
 8017e9a:	e004      	b.n	8017ea6 <ethernet_input+0x106>
        goto free_and_return;
 8017e9c:	bf00      	nop
 8017e9e:	e002      	b.n	8017ea6 <ethernet_input+0x106>
        goto free_and_return;
 8017ea0:	bf00      	nop
 8017ea2:	e000      	b.n	8017ea6 <ethernet_input+0x106>
        goto free_and_return;
 8017ea4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7f6 fcc0 	bl	800e82c <pbuf_free>
  return ERR_OK;
 8017eac:	2300      	movs	r3, #0
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3718      	adds	r7, #24
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	0801d018 	.word	0x0801d018

08017ebc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b086      	sub	sp, #24
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	60f8      	str	r0, [r7, #12]
 8017ec4:	60b9      	str	r1, [r7, #8]
 8017ec6:	607a      	str	r2, [r7, #4]
 8017ec8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017eca:	8c3b      	ldrh	r3, [r7, #32]
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f7f5 f965 	bl	800d19c <lwip_htons>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017ed6:	210e      	movs	r1, #14
 8017ed8:	68b8      	ldr	r0, [r7, #8]
 8017eda:	f7f6 fc11 	bl	800e700 <pbuf_add_header>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d125      	bne.n	8017f30 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017eea:	693b      	ldr	r3, [r7, #16]
 8017eec:	8afa      	ldrh	r2, [r7, #22]
 8017eee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	2206      	movs	r2, #6
 8017ef4:	6839      	ldr	r1, [r7, #0]
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f000 fb3c 	bl	8018574 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017efc:	693b      	ldr	r3, [r7, #16]
 8017efe:	3306      	adds	r3, #6
 8017f00:	2206      	movs	r2, #6
 8017f02:	6879      	ldr	r1, [r7, #4]
 8017f04:	4618      	mov	r0, r3
 8017f06:	f000 fb35 	bl	8018574 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017f10:	2b06      	cmp	r3, #6
 8017f12:	d006      	beq.n	8017f22 <ethernet_output+0x66>
 8017f14:	4b0a      	ldr	r3, [pc, #40]	; (8017f40 <ethernet_output+0x84>)
 8017f16:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017f1a:	490a      	ldr	r1, [pc, #40]	; (8017f44 <ethernet_output+0x88>)
 8017f1c:	480a      	ldr	r0, [pc, #40]	; (8017f48 <ethernet_output+0x8c>)
 8017f1e:	f000 fc39 	bl	8018794 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	699b      	ldr	r3, [r3, #24]
 8017f26:	68b9      	ldr	r1, [r7, #8]
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	4798      	blx	r3
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	e002      	b.n	8017f36 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017f30:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017f32:	f06f 0301 	mvn.w	r3, #1
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3718      	adds	r7, #24
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	0801ce4c 	.word	0x0801ce4c
 8017f44:	0801ce84 	.word	0x0801ce84
 8017f48:	0801ceb8 	.word	0x0801ceb8

08017f4c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b086      	sub	sp, #24
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
 8017f54:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017f56:	683b      	ldr	r3, [r7, #0]
 8017f58:	60bb      	str	r3, [r7, #8]
 8017f5a:	2304      	movs	r3, #4
 8017f5c:	60fb      	str	r3, [r7, #12]
 8017f5e:	2300      	movs	r3, #0
 8017f60:	613b      	str	r3, [r7, #16]
 8017f62:	2300      	movs	r3, #0
 8017f64:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017f66:	f107 0308 	add.w	r3, r7, #8
 8017f6a:	2100      	movs	r1, #0
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	f7f0 f982 	bl	8008276 <osMessageCreate>
 8017f72:	4602      	mov	r2, r0
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d102      	bne.n	8017f86 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017f80:	f04f 33ff 	mov.w	r3, #4294967295
 8017f84:	e000      	b.n	8017f88 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017f86:	2300      	movs	r3, #0
}
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3718      	adds	r7, #24
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}

08017f90 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7f0 fb7c 	bl	800869a <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7f0 fb8d 	bl	80086c6 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017fac:	bf00      	nop
 8017fae:	3708      	adds	r7, #8
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b084      	sub	sp, #16
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
 8017fbc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	6839      	ldr	r1, [r7, #0]
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7f0 f97e 	bl	80082c8 <osMessagePut>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d102      	bne.n	8017fd8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	73fb      	strb	r3, [r7, #15]
 8017fd6:	e001      	b.n	8017fdc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017fd8:	23ff      	movs	r3, #255	; 0xff
 8017fda:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	3710      	adds	r7, #16
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}

08017fe8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b08c      	sub	sp, #48	; 0x30
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	61f8      	str	r0, [r7, #28]
 8017ff0:	61b9      	str	r1, [r7, #24]
 8017ff2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017ff4:	f7ef fe69 	bl	8007cca <osKernelSysTick>
 8017ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d017      	beq.n	8018030 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	6819      	ldr	r1, [r3, #0]
 8018004:	f107 0320 	add.w	r3, r7, #32
 8018008:	697a      	ldr	r2, [r7, #20]
 801800a:	4618      	mov	r0, r3
 801800c:	f7f0 f99c 	bl	8008348 <osMessageGet>

    if(event.status == osEventMessage)
 8018010:	6a3b      	ldr	r3, [r7, #32]
 8018012:	2b10      	cmp	r3, #16
 8018014:	d109      	bne.n	801802a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018018:	461a      	mov	r2, r3
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801801e:	f7ef fe54 	bl	8007cca <osKernelSysTick>
 8018022:	4602      	mov	r2, r0
 8018024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018026:	1ad3      	subs	r3, r2, r3
 8018028:	e019      	b.n	801805e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801802a:	f04f 33ff 	mov.w	r3, #4294967295
 801802e:	e016      	b.n	801805e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018030:	69fb      	ldr	r3, [r7, #28]
 8018032:	6819      	ldr	r1, [r3, #0]
 8018034:	463b      	mov	r3, r7
 8018036:	f04f 32ff 	mov.w	r2, #4294967295
 801803a:	4618      	mov	r0, r3
 801803c:	f7f0 f984 	bl	8008348 <osMessageGet>
 8018040:	f107 0320 	add.w	r3, r7, #32
 8018044:	463a      	mov	r2, r7
 8018046:	ca07      	ldmia	r2, {r0, r1, r2}
 8018048:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801804e:	461a      	mov	r2, r3
 8018050:	69bb      	ldr	r3, [r7, #24]
 8018052:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018054:	f7ef fe39 	bl	8007cca <osKernelSysTick>
 8018058:	4602      	mov	r2, r0
 801805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801805e:	4618      	mov	r0, r3
 8018060:	3730      	adds	r7, #48	; 0x30
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}

08018066 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018066:	b580      	push	{r7, lr}
 8018068:	b086      	sub	sp, #24
 801806a:	af00      	add	r7, sp, #0
 801806c:	6078      	str	r0, [r7, #4]
 801806e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	6819      	ldr	r1, [r3, #0]
 8018074:	f107 030c 	add.w	r3, r7, #12
 8018078:	2200      	movs	r2, #0
 801807a:	4618      	mov	r0, r3
 801807c:	f7f0 f964 	bl	8008348 <osMessageGet>

  if(event.status == osEventMessage)
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	2b10      	cmp	r3, #16
 8018084:	d105      	bne.n	8018092 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	461a      	mov	r2, r3
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801808e:	2300      	movs	r3, #0
 8018090:	e001      	b.n	8018096 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018092:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018096:	4618      	mov	r0, r3
 8018098:	3718      	adds	r7, #24
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}

0801809e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801809e:	b480      	push	{r7}
 80180a0:	b083      	sub	sp, #12
 80180a2:	af00      	add	r7, sp, #0
 80180a4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d101      	bne.n	80180b2 <sys_mbox_valid+0x14>
    return 0;
 80180ae:	2300      	movs	r3, #0
 80180b0:	e000      	b.n	80180b4 <sys_mbox_valid+0x16>
  else
    return 1;
 80180b2:	2301      	movs	r3, #1
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	370c      	adds	r7, #12
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80180c0:	b480      	push	{r7}
 80180c2:	b083      	sub	sp, #12
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2200      	movs	r2, #0
 80180cc:	601a      	str	r2, [r3, #0]
}
 80180ce:	bf00      	nop
 80180d0:	370c      	adds	r7, #12
 80180d2:	46bd      	mov	sp, r7
 80180d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d8:	4770      	bx	lr

080180da <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80180da:	b580      	push	{r7, lr}
 80180dc:	b084      	sub	sp, #16
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
 80180e2:	460b      	mov	r3, r1
 80180e4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80180e6:	2300      	movs	r3, #0
 80180e8:	60bb      	str	r3, [r7, #8]
 80180ea:	2300      	movs	r3, #0
 80180ec:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80180ee:	f107 0308 	add.w	r3, r7, #8
 80180f2:	2101      	movs	r1, #1
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7ef fef5 	bl	8007ee4 <osSemaphoreCreate>
 80180fa:	4602      	mov	r2, r0
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d102      	bne.n	801810e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018108:	f04f 33ff 	mov.w	r3, #4294967295
 801810c:	e009      	b.n	8018122 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801810e:	78fb      	ldrb	r3, [r7, #3]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d105      	bne.n	8018120 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	2100      	movs	r1, #0
 801811a:	4618      	mov	r0, r3
 801811c:	f7ef ff14 	bl	8007f48 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018120:	2300      	movs	r3, #0
}
 8018122:	4618      	mov	r0, r3
 8018124:	3710      	adds	r7, #16
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}

0801812a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801812a:	b580      	push	{r7, lr}
 801812c:	b084      	sub	sp, #16
 801812e:	af00      	add	r7, sp, #0
 8018130:	6078      	str	r0, [r7, #4]
 8018132:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018134:	f7ef fdc9 	bl	8007cca <osKernelSysTick>
 8018138:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d011      	beq.n	8018164 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	6839      	ldr	r1, [r7, #0]
 8018146:	4618      	mov	r0, r3
 8018148:	f7ef fefe 	bl	8007f48 <osSemaphoreWait>
 801814c:	4603      	mov	r3, r0
 801814e:	2b00      	cmp	r3, #0
 8018150:	d105      	bne.n	801815e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018152:	f7ef fdba 	bl	8007cca <osKernelSysTick>
 8018156:	4602      	mov	r2, r0
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	1ad3      	subs	r3, r2, r3
 801815c:	e012      	b.n	8018184 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801815e:	f04f 33ff 	mov.w	r3, #4294967295
 8018162:	e00f      	b.n	8018184 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018164:	bf00      	nop
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f04f 31ff 	mov.w	r1, #4294967295
 801816e:	4618      	mov	r0, r3
 8018170:	f7ef feea 	bl	8007f48 <osSemaphoreWait>
 8018174:	4603      	mov	r3, r0
 8018176:	2b00      	cmp	r3, #0
 8018178:	d1f5      	bne.n	8018166 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801817a:	f7ef fda6 	bl	8007cca <osKernelSysTick>
 801817e:	4602      	mov	r2, r0
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018184:	4618      	mov	r0, r3
 8018186:	3710      	adds	r7, #16
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}

0801818c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b082      	sub	sp, #8
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4618      	mov	r0, r3
 801819a:	f7ef ff23 	bl	8007fe4 <osSemaphoreRelease>
}
 801819e:	bf00      	nop
 80181a0:	3708      	adds	r7, #8
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b082      	sub	sp, #8
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	4618      	mov	r0, r3
 80181b4:	f7ef ff4c 	bl	8008050 <osSemaphoreDelete>
}
 80181b8:	bf00      	nop
 80181ba:	3708      	adds	r7, #8
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d101      	bne.n	80181d4 <sys_sem_valid+0x14>
    return 0;
 80181d0:	2300      	movs	r3, #0
 80181d2:	e000      	b.n	80181d6 <sys_sem_valid+0x16>
  else
    return 1;
 80181d4:	2301      	movs	r3, #1
}
 80181d6:	4618      	mov	r0, r3
 80181d8:	370c      	adds	r7, #12
 80181da:	46bd      	mov	sp, r7
 80181dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e0:	4770      	bx	lr

080181e2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80181e2:	b480      	push	{r7}
 80181e4:	b083      	sub	sp, #12
 80181e6:	af00      	add	r7, sp, #0
 80181e8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2200      	movs	r2, #0
 80181ee:	601a      	str	r2, [r3, #0]
}
 80181f0:	bf00      	nop
 80181f2:	370c      	adds	r7, #12
 80181f4:	46bd      	mov	sp, r7
 80181f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fa:	4770      	bx	lr

080181fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018200:	4803      	ldr	r0, [pc, #12]	; (8018210 <sys_init+0x14>)
 8018202:	f7ef fdd2 	bl	8007daa <osMutexCreate>
 8018206:	4603      	mov	r3, r0
 8018208:	4a02      	ldr	r2, [pc, #8]	; (8018214 <sys_init+0x18>)
 801820a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801820c:	bf00      	nop
 801820e:	bd80      	pop	{r7, pc}
 8018210:	0801d028 	.word	0x0801d028
 8018214:	2000da24 	.word	0x2000da24

08018218 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018220:	2300      	movs	r3, #0
 8018222:	60bb      	str	r3, [r7, #8]
 8018224:	2300      	movs	r3, #0
 8018226:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018228:	f107 0308 	add.w	r3, r7, #8
 801822c:	4618      	mov	r0, r3
 801822e:	f7ef fdbc 	bl	8007daa <osMutexCreate>
 8018232:	4602      	mov	r2, r0
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d102      	bne.n	8018246 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018240:	f04f 33ff 	mov.w	r3, #4294967295
 8018244:	e000      	b.n	8018248 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018246:	2300      	movs	r3, #0
}
 8018248:	4618      	mov	r0, r3
 801824a:	3710      	adds	r7, #16
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}

08018250 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	f04f 31ff 	mov.w	r1, #4294967295
 8018260:	4618      	mov	r0, r3
 8018262:	f7ef fdbb 	bl	8007ddc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018266:	bf00      	nop
 8018268:	3708      	adds	r7, #8
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801826e:	b580      	push	{r7, lr}
 8018270:	b082      	sub	sp, #8
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	4618      	mov	r0, r3
 801827c:	f7ef fdfc 	bl	8007e78 <osMutexRelease>
}
 8018280:	bf00      	nop
 8018282:	3708      	adds	r7, #8
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}

08018288 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b08c      	sub	sp, #48	; 0x30
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	607a      	str	r2, [r7, #4]
 8018294:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018296:	f107 0314 	add.w	r3, r7, #20
 801829a:	2200      	movs	r2, #0
 801829c:	601a      	str	r2, [r3, #0]
 801829e:	605a      	str	r2, [r3, #4]
 80182a0:	609a      	str	r2, [r3, #8]
 80182a2:	60da      	str	r2, [r3, #12]
 80182a4:	611a      	str	r2, [r3, #16]
 80182a6:	615a      	str	r2, [r3, #20]
 80182a8:	619a      	str	r2, [r3, #24]
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	617b      	str	r3, [r7, #20]
 80182ae:	68bb      	ldr	r3, [r7, #8]
 80182b0:	61bb      	str	r3, [r7, #24]
 80182b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b4:	b21b      	sxth	r3, r3
 80182b6:	83bb      	strh	r3, [r7, #28]
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80182bc:	f107 0314 	add.w	r3, r7, #20
 80182c0:	6879      	ldr	r1, [r7, #4]
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7ef fd11 	bl	8007cea <osThreadCreate>
 80182c8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3730      	adds	r7, #48	; 0x30
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
	...

080182d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80182d8:	4b04      	ldr	r3, [pc, #16]	; (80182ec <sys_arch_protect+0x18>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	f04f 31ff 	mov.w	r1, #4294967295
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7ef fd7b 	bl	8007ddc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80182e6:	2301      	movs	r3, #1
}
 80182e8:	4618      	mov	r0, r3
 80182ea:	bd80      	pop	{r7, pc}
 80182ec:	2000da24 	.word	0x2000da24

080182f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b082      	sub	sp, #8
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80182f8:	4b04      	ldr	r3, [pc, #16]	; (801830c <sys_arch_unprotect+0x1c>)
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ef fdbb 	bl	8007e78 <osMutexRelease>
}
 8018302:	bf00      	nop
 8018304:	3708      	adds	r7, #8
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}
 801830a:	bf00      	nop
 801830c:	2000da24 	.word	0x2000da24

08018310 <std>:
 8018310:	2300      	movs	r3, #0
 8018312:	b510      	push	{r4, lr}
 8018314:	4604      	mov	r4, r0
 8018316:	e9c0 3300 	strd	r3, r3, [r0]
 801831a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801831e:	6083      	str	r3, [r0, #8]
 8018320:	8181      	strh	r1, [r0, #12]
 8018322:	6643      	str	r3, [r0, #100]	; 0x64
 8018324:	81c2      	strh	r2, [r0, #14]
 8018326:	6183      	str	r3, [r0, #24]
 8018328:	4619      	mov	r1, r3
 801832a:	2208      	movs	r2, #8
 801832c:	305c      	adds	r0, #92	; 0x5c
 801832e:	f000 f949 	bl	80185c4 <memset>
 8018332:	4b05      	ldr	r3, [pc, #20]	; (8018348 <std+0x38>)
 8018334:	6263      	str	r3, [r4, #36]	; 0x24
 8018336:	4b05      	ldr	r3, [pc, #20]	; (801834c <std+0x3c>)
 8018338:	62a3      	str	r3, [r4, #40]	; 0x28
 801833a:	4b05      	ldr	r3, [pc, #20]	; (8018350 <std+0x40>)
 801833c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801833e:	4b05      	ldr	r3, [pc, #20]	; (8018354 <std+0x44>)
 8018340:	6224      	str	r4, [r4, #32]
 8018342:	6323      	str	r3, [r4, #48]	; 0x30
 8018344:	bd10      	pop	{r4, pc}
 8018346:	bf00      	nop
 8018348:	08018975 	.word	0x08018975
 801834c:	08018997 	.word	0x08018997
 8018350:	080189cf 	.word	0x080189cf
 8018354:	080189f3 	.word	0x080189f3

08018358 <_cleanup_r>:
 8018358:	4901      	ldr	r1, [pc, #4]	; (8018360 <_cleanup_r+0x8>)
 801835a:	f000 b8af 	b.w	80184bc <_fwalk_reent>
 801835e:	bf00      	nop
 8018360:	08018b89 	.word	0x08018b89

08018364 <__sfmoreglue>:
 8018364:	b570      	push	{r4, r5, r6, lr}
 8018366:	2268      	movs	r2, #104	; 0x68
 8018368:	1e4d      	subs	r5, r1, #1
 801836a:	4355      	muls	r5, r2
 801836c:	460e      	mov	r6, r1
 801836e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018372:	f000 f99b 	bl	80186ac <_malloc_r>
 8018376:	4604      	mov	r4, r0
 8018378:	b140      	cbz	r0, 801838c <__sfmoreglue+0x28>
 801837a:	2100      	movs	r1, #0
 801837c:	e9c0 1600 	strd	r1, r6, [r0]
 8018380:	300c      	adds	r0, #12
 8018382:	60a0      	str	r0, [r4, #8]
 8018384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018388:	f000 f91c 	bl	80185c4 <memset>
 801838c:	4620      	mov	r0, r4
 801838e:	bd70      	pop	{r4, r5, r6, pc}

08018390 <__sfp_lock_acquire>:
 8018390:	4801      	ldr	r0, [pc, #4]	; (8018398 <__sfp_lock_acquire+0x8>)
 8018392:	f7ea bcaf 	b.w	8002cf4 <__retarget_lock_acquire_recursive>
 8018396:	bf00      	nop
 8018398:	20000b60 	.word	0x20000b60

0801839c <__sfp_lock_release>:
 801839c:	4801      	ldr	r0, [pc, #4]	; (80183a4 <__sfp_lock_release+0x8>)
 801839e:	f7ea bcbd 	b.w	8002d1c <__retarget_lock_release_recursive>
 80183a2:	bf00      	nop
 80183a4:	20000b60 	.word	0x20000b60

080183a8 <__sinit_lock_acquire>:
 80183a8:	4801      	ldr	r0, [pc, #4]	; (80183b0 <__sinit_lock_acquire+0x8>)
 80183aa:	f7ea bca3 	b.w	8002cf4 <__retarget_lock_acquire_recursive>
 80183ae:	bf00      	nop
 80183b0:	20000b54 	.word	0x20000b54

080183b4 <__sinit_lock_release>:
 80183b4:	4801      	ldr	r0, [pc, #4]	; (80183bc <__sinit_lock_release+0x8>)
 80183b6:	f7ea bcb1 	b.w	8002d1c <__retarget_lock_release_recursive>
 80183ba:	bf00      	nop
 80183bc:	20000b54 	.word	0x20000b54

080183c0 <__sinit>:
 80183c0:	b510      	push	{r4, lr}
 80183c2:	4604      	mov	r4, r0
 80183c4:	f7ff fff0 	bl	80183a8 <__sinit_lock_acquire>
 80183c8:	69a3      	ldr	r3, [r4, #24]
 80183ca:	b11b      	cbz	r3, 80183d4 <__sinit+0x14>
 80183cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183d0:	f7ff bff0 	b.w	80183b4 <__sinit_lock_release>
 80183d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80183d8:	6523      	str	r3, [r4, #80]	; 0x50
 80183da:	4b13      	ldr	r3, [pc, #76]	; (8018428 <__sinit+0x68>)
 80183dc:	4a13      	ldr	r2, [pc, #76]	; (801842c <__sinit+0x6c>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80183e2:	42a3      	cmp	r3, r4
 80183e4:	bf04      	itt	eq
 80183e6:	2301      	moveq	r3, #1
 80183e8:	61a3      	streq	r3, [r4, #24]
 80183ea:	4620      	mov	r0, r4
 80183ec:	f000 f820 	bl	8018430 <__sfp>
 80183f0:	6060      	str	r0, [r4, #4]
 80183f2:	4620      	mov	r0, r4
 80183f4:	f000 f81c 	bl	8018430 <__sfp>
 80183f8:	60a0      	str	r0, [r4, #8]
 80183fa:	4620      	mov	r0, r4
 80183fc:	f000 f818 	bl	8018430 <__sfp>
 8018400:	2200      	movs	r2, #0
 8018402:	60e0      	str	r0, [r4, #12]
 8018404:	2104      	movs	r1, #4
 8018406:	6860      	ldr	r0, [r4, #4]
 8018408:	f7ff ff82 	bl	8018310 <std>
 801840c:	68a0      	ldr	r0, [r4, #8]
 801840e:	2201      	movs	r2, #1
 8018410:	2109      	movs	r1, #9
 8018412:	f7ff ff7d 	bl	8018310 <std>
 8018416:	68e0      	ldr	r0, [r4, #12]
 8018418:	2202      	movs	r2, #2
 801841a:	2112      	movs	r1, #18
 801841c:	f7ff ff78 	bl	8018310 <std>
 8018420:	2301      	movs	r3, #1
 8018422:	61a3      	str	r3, [r4, #24]
 8018424:	e7d2      	b.n	80183cc <__sinit+0xc>
 8018426:	bf00      	nop
 8018428:	0801d090 	.word	0x0801d090
 801842c:	08018359 	.word	0x08018359

08018430 <__sfp>:
 8018430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018432:	4607      	mov	r7, r0
 8018434:	f7ff ffac 	bl	8018390 <__sfp_lock_acquire>
 8018438:	4b1e      	ldr	r3, [pc, #120]	; (80184b4 <__sfp+0x84>)
 801843a:	681e      	ldr	r6, [r3, #0]
 801843c:	69b3      	ldr	r3, [r6, #24]
 801843e:	b913      	cbnz	r3, 8018446 <__sfp+0x16>
 8018440:	4630      	mov	r0, r6
 8018442:	f7ff ffbd 	bl	80183c0 <__sinit>
 8018446:	3648      	adds	r6, #72	; 0x48
 8018448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801844c:	3b01      	subs	r3, #1
 801844e:	d503      	bpl.n	8018458 <__sfp+0x28>
 8018450:	6833      	ldr	r3, [r6, #0]
 8018452:	b30b      	cbz	r3, 8018498 <__sfp+0x68>
 8018454:	6836      	ldr	r6, [r6, #0]
 8018456:	e7f7      	b.n	8018448 <__sfp+0x18>
 8018458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801845c:	b9d5      	cbnz	r5, 8018494 <__sfp+0x64>
 801845e:	4b16      	ldr	r3, [pc, #88]	; (80184b8 <__sfp+0x88>)
 8018460:	60e3      	str	r3, [r4, #12]
 8018462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018466:	6665      	str	r5, [r4, #100]	; 0x64
 8018468:	f7ea fc1e 	bl	8002ca8 <__retarget_lock_init_recursive>
 801846c:	f7ff ff96 	bl	801839c <__sfp_lock_release>
 8018470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018478:	6025      	str	r5, [r4, #0]
 801847a:	61a5      	str	r5, [r4, #24]
 801847c:	2208      	movs	r2, #8
 801847e:	4629      	mov	r1, r5
 8018480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018484:	f000 f89e 	bl	80185c4 <memset>
 8018488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801848c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018490:	4620      	mov	r0, r4
 8018492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018494:	3468      	adds	r4, #104	; 0x68
 8018496:	e7d9      	b.n	801844c <__sfp+0x1c>
 8018498:	2104      	movs	r1, #4
 801849a:	4638      	mov	r0, r7
 801849c:	f7ff ff62 	bl	8018364 <__sfmoreglue>
 80184a0:	4604      	mov	r4, r0
 80184a2:	6030      	str	r0, [r6, #0]
 80184a4:	2800      	cmp	r0, #0
 80184a6:	d1d5      	bne.n	8018454 <__sfp+0x24>
 80184a8:	f7ff ff78 	bl	801839c <__sfp_lock_release>
 80184ac:	230c      	movs	r3, #12
 80184ae:	603b      	str	r3, [r7, #0]
 80184b0:	e7ee      	b.n	8018490 <__sfp+0x60>
 80184b2:	bf00      	nop
 80184b4:	0801d090 	.word	0x0801d090
 80184b8:	ffff0001 	.word	0xffff0001

080184bc <_fwalk_reent>:
 80184bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184c0:	4606      	mov	r6, r0
 80184c2:	4688      	mov	r8, r1
 80184c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80184c8:	2700      	movs	r7, #0
 80184ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80184ce:	f1b9 0901 	subs.w	r9, r9, #1
 80184d2:	d505      	bpl.n	80184e0 <_fwalk_reent+0x24>
 80184d4:	6824      	ldr	r4, [r4, #0]
 80184d6:	2c00      	cmp	r4, #0
 80184d8:	d1f7      	bne.n	80184ca <_fwalk_reent+0xe>
 80184da:	4638      	mov	r0, r7
 80184dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184e0:	89ab      	ldrh	r3, [r5, #12]
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d907      	bls.n	80184f6 <_fwalk_reent+0x3a>
 80184e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184ea:	3301      	adds	r3, #1
 80184ec:	d003      	beq.n	80184f6 <_fwalk_reent+0x3a>
 80184ee:	4629      	mov	r1, r5
 80184f0:	4630      	mov	r0, r6
 80184f2:	47c0      	blx	r8
 80184f4:	4307      	orrs	r7, r0
 80184f6:	3568      	adds	r5, #104	; 0x68
 80184f8:	e7e9      	b.n	80184ce <_fwalk_reent+0x12>
	...

080184fc <__libc_init_array>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	4d0d      	ldr	r5, [pc, #52]	; (8018534 <__libc_init_array+0x38>)
 8018500:	4c0d      	ldr	r4, [pc, #52]	; (8018538 <__libc_init_array+0x3c>)
 8018502:	1b64      	subs	r4, r4, r5
 8018504:	10a4      	asrs	r4, r4, #2
 8018506:	2600      	movs	r6, #0
 8018508:	42a6      	cmp	r6, r4
 801850a:	d109      	bne.n	8018520 <__libc_init_array+0x24>
 801850c:	4d0b      	ldr	r5, [pc, #44]	; (801853c <__libc_init_array+0x40>)
 801850e:	4c0c      	ldr	r4, [pc, #48]	; (8018540 <__libc_init_array+0x44>)
 8018510:	f001 f9cc 	bl	80198ac <_init>
 8018514:	1b64      	subs	r4, r4, r5
 8018516:	10a4      	asrs	r4, r4, #2
 8018518:	2600      	movs	r6, #0
 801851a:	42a6      	cmp	r6, r4
 801851c:	d105      	bne.n	801852a <__libc_init_array+0x2e>
 801851e:	bd70      	pop	{r4, r5, r6, pc}
 8018520:	f855 3b04 	ldr.w	r3, [r5], #4
 8018524:	4798      	blx	r3
 8018526:	3601      	adds	r6, #1
 8018528:	e7ee      	b.n	8018508 <__libc_init_array+0xc>
 801852a:	f855 3b04 	ldr.w	r3, [r5], #4
 801852e:	4798      	blx	r3
 8018530:	3601      	adds	r6, #1
 8018532:	e7f2      	b.n	801851a <__libc_init_array+0x1e>
 8018534:	0801d180 	.word	0x0801d180
 8018538:	0801d180 	.word	0x0801d180
 801853c:	0801d180 	.word	0x0801d180
 8018540:	0801d184 	.word	0x0801d184

08018544 <malloc>:
 8018544:	4b02      	ldr	r3, [pc, #8]	; (8018550 <malloc+0xc>)
 8018546:	4601      	mov	r1, r0
 8018548:	6818      	ldr	r0, [r3, #0]
 801854a:	f000 b8af 	b.w	80186ac <_malloc_r>
 801854e:	bf00      	nop
 8018550:	200000b0 	.word	0x200000b0

08018554 <memcmp>:
 8018554:	b510      	push	{r4, lr}
 8018556:	3901      	subs	r1, #1
 8018558:	4402      	add	r2, r0
 801855a:	4290      	cmp	r0, r2
 801855c:	d101      	bne.n	8018562 <memcmp+0xe>
 801855e:	2000      	movs	r0, #0
 8018560:	e005      	b.n	801856e <memcmp+0x1a>
 8018562:	7803      	ldrb	r3, [r0, #0]
 8018564:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018568:	42a3      	cmp	r3, r4
 801856a:	d001      	beq.n	8018570 <memcmp+0x1c>
 801856c:	1b18      	subs	r0, r3, r4
 801856e:	bd10      	pop	{r4, pc}
 8018570:	3001      	adds	r0, #1
 8018572:	e7f2      	b.n	801855a <memcmp+0x6>

08018574 <memcpy>:
 8018574:	440a      	add	r2, r1
 8018576:	4291      	cmp	r1, r2
 8018578:	f100 33ff 	add.w	r3, r0, #4294967295
 801857c:	d100      	bne.n	8018580 <memcpy+0xc>
 801857e:	4770      	bx	lr
 8018580:	b510      	push	{r4, lr}
 8018582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018586:	f803 4f01 	strb.w	r4, [r3, #1]!
 801858a:	4291      	cmp	r1, r2
 801858c:	d1f9      	bne.n	8018582 <memcpy+0xe>
 801858e:	bd10      	pop	{r4, pc}

08018590 <memmove>:
 8018590:	4288      	cmp	r0, r1
 8018592:	b510      	push	{r4, lr}
 8018594:	eb01 0402 	add.w	r4, r1, r2
 8018598:	d902      	bls.n	80185a0 <memmove+0x10>
 801859a:	4284      	cmp	r4, r0
 801859c:	4623      	mov	r3, r4
 801859e:	d807      	bhi.n	80185b0 <memmove+0x20>
 80185a0:	1e43      	subs	r3, r0, #1
 80185a2:	42a1      	cmp	r1, r4
 80185a4:	d008      	beq.n	80185b8 <memmove+0x28>
 80185a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185ae:	e7f8      	b.n	80185a2 <memmove+0x12>
 80185b0:	4402      	add	r2, r0
 80185b2:	4601      	mov	r1, r0
 80185b4:	428a      	cmp	r2, r1
 80185b6:	d100      	bne.n	80185ba <memmove+0x2a>
 80185b8:	bd10      	pop	{r4, pc}
 80185ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185c2:	e7f7      	b.n	80185b4 <memmove+0x24>

080185c4 <memset>:
 80185c4:	4402      	add	r2, r0
 80185c6:	4603      	mov	r3, r0
 80185c8:	4293      	cmp	r3, r2
 80185ca:	d100      	bne.n	80185ce <memset+0xa>
 80185cc:	4770      	bx	lr
 80185ce:	f803 1b01 	strb.w	r1, [r3], #1
 80185d2:	e7f9      	b.n	80185c8 <memset+0x4>

080185d4 <_free_r>:
 80185d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185d6:	2900      	cmp	r1, #0
 80185d8:	d044      	beq.n	8018664 <_free_r+0x90>
 80185da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185de:	9001      	str	r0, [sp, #4]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f1a1 0404 	sub.w	r4, r1, #4
 80185e6:	bfb8      	it	lt
 80185e8:	18e4      	addlt	r4, r4, r3
 80185ea:	f000 fb2d 	bl	8018c48 <__malloc_lock>
 80185ee:	4a1e      	ldr	r2, [pc, #120]	; (8018668 <_free_r+0x94>)
 80185f0:	9801      	ldr	r0, [sp, #4]
 80185f2:	6813      	ldr	r3, [r2, #0]
 80185f4:	b933      	cbnz	r3, 8018604 <_free_r+0x30>
 80185f6:	6063      	str	r3, [r4, #4]
 80185f8:	6014      	str	r4, [r2, #0]
 80185fa:	b003      	add	sp, #12
 80185fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018600:	f000 bb28 	b.w	8018c54 <__malloc_unlock>
 8018604:	42a3      	cmp	r3, r4
 8018606:	d908      	bls.n	801861a <_free_r+0x46>
 8018608:	6825      	ldr	r5, [r4, #0]
 801860a:	1961      	adds	r1, r4, r5
 801860c:	428b      	cmp	r3, r1
 801860e:	bf01      	itttt	eq
 8018610:	6819      	ldreq	r1, [r3, #0]
 8018612:	685b      	ldreq	r3, [r3, #4]
 8018614:	1949      	addeq	r1, r1, r5
 8018616:	6021      	streq	r1, [r4, #0]
 8018618:	e7ed      	b.n	80185f6 <_free_r+0x22>
 801861a:	461a      	mov	r2, r3
 801861c:	685b      	ldr	r3, [r3, #4]
 801861e:	b10b      	cbz	r3, 8018624 <_free_r+0x50>
 8018620:	42a3      	cmp	r3, r4
 8018622:	d9fa      	bls.n	801861a <_free_r+0x46>
 8018624:	6811      	ldr	r1, [r2, #0]
 8018626:	1855      	adds	r5, r2, r1
 8018628:	42a5      	cmp	r5, r4
 801862a:	d10b      	bne.n	8018644 <_free_r+0x70>
 801862c:	6824      	ldr	r4, [r4, #0]
 801862e:	4421      	add	r1, r4
 8018630:	1854      	adds	r4, r2, r1
 8018632:	42a3      	cmp	r3, r4
 8018634:	6011      	str	r1, [r2, #0]
 8018636:	d1e0      	bne.n	80185fa <_free_r+0x26>
 8018638:	681c      	ldr	r4, [r3, #0]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	6053      	str	r3, [r2, #4]
 801863e:	4421      	add	r1, r4
 8018640:	6011      	str	r1, [r2, #0]
 8018642:	e7da      	b.n	80185fa <_free_r+0x26>
 8018644:	d902      	bls.n	801864c <_free_r+0x78>
 8018646:	230c      	movs	r3, #12
 8018648:	6003      	str	r3, [r0, #0]
 801864a:	e7d6      	b.n	80185fa <_free_r+0x26>
 801864c:	6825      	ldr	r5, [r4, #0]
 801864e:	1961      	adds	r1, r4, r5
 8018650:	428b      	cmp	r3, r1
 8018652:	bf04      	itt	eq
 8018654:	6819      	ldreq	r1, [r3, #0]
 8018656:	685b      	ldreq	r3, [r3, #4]
 8018658:	6063      	str	r3, [r4, #4]
 801865a:	bf04      	itt	eq
 801865c:	1949      	addeq	r1, r1, r5
 801865e:	6021      	streq	r1, [r4, #0]
 8018660:	6054      	str	r4, [r2, #4]
 8018662:	e7ca      	b.n	80185fa <_free_r+0x26>
 8018664:	b003      	add	sp, #12
 8018666:	bd30      	pop	{r4, r5, pc}
 8018668:	2000da28 	.word	0x2000da28

0801866c <sbrk_aligned>:
 801866c:	b570      	push	{r4, r5, r6, lr}
 801866e:	4e0e      	ldr	r6, [pc, #56]	; (80186a8 <sbrk_aligned+0x3c>)
 8018670:	460c      	mov	r4, r1
 8018672:	6831      	ldr	r1, [r6, #0]
 8018674:	4605      	mov	r5, r0
 8018676:	b911      	cbnz	r1, 801867e <sbrk_aligned+0x12>
 8018678:	f000 f94c 	bl	8018914 <_sbrk_r>
 801867c:	6030      	str	r0, [r6, #0]
 801867e:	4621      	mov	r1, r4
 8018680:	4628      	mov	r0, r5
 8018682:	f000 f947 	bl	8018914 <_sbrk_r>
 8018686:	1c43      	adds	r3, r0, #1
 8018688:	d00a      	beq.n	80186a0 <sbrk_aligned+0x34>
 801868a:	1cc4      	adds	r4, r0, #3
 801868c:	f024 0403 	bic.w	r4, r4, #3
 8018690:	42a0      	cmp	r0, r4
 8018692:	d007      	beq.n	80186a4 <sbrk_aligned+0x38>
 8018694:	1a21      	subs	r1, r4, r0
 8018696:	4628      	mov	r0, r5
 8018698:	f000 f93c 	bl	8018914 <_sbrk_r>
 801869c:	3001      	adds	r0, #1
 801869e:	d101      	bne.n	80186a4 <sbrk_aligned+0x38>
 80186a0:	f04f 34ff 	mov.w	r4, #4294967295
 80186a4:	4620      	mov	r0, r4
 80186a6:	bd70      	pop	{r4, r5, r6, pc}
 80186a8:	2000da2c 	.word	0x2000da2c

080186ac <_malloc_r>:
 80186ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b0:	1ccd      	adds	r5, r1, #3
 80186b2:	f025 0503 	bic.w	r5, r5, #3
 80186b6:	3508      	adds	r5, #8
 80186b8:	2d0c      	cmp	r5, #12
 80186ba:	bf38      	it	cc
 80186bc:	250c      	movcc	r5, #12
 80186be:	2d00      	cmp	r5, #0
 80186c0:	4607      	mov	r7, r0
 80186c2:	db01      	blt.n	80186c8 <_malloc_r+0x1c>
 80186c4:	42a9      	cmp	r1, r5
 80186c6:	d905      	bls.n	80186d4 <_malloc_r+0x28>
 80186c8:	230c      	movs	r3, #12
 80186ca:	603b      	str	r3, [r7, #0]
 80186cc:	2600      	movs	r6, #0
 80186ce:	4630      	mov	r0, r6
 80186d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186d4:	4e2e      	ldr	r6, [pc, #184]	; (8018790 <_malloc_r+0xe4>)
 80186d6:	f000 fab7 	bl	8018c48 <__malloc_lock>
 80186da:	6833      	ldr	r3, [r6, #0]
 80186dc:	461c      	mov	r4, r3
 80186de:	bb34      	cbnz	r4, 801872e <_malloc_r+0x82>
 80186e0:	4629      	mov	r1, r5
 80186e2:	4638      	mov	r0, r7
 80186e4:	f7ff ffc2 	bl	801866c <sbrk_aligned>
 80186e8:	1c43      	adds	r3, r0, #1
 80186ea:	4604      	mov	r4, r0
 80186ec:	d14d      	bne.n	801878a <_malloc_r+0xde>
 80186ee:	6834      	ldr	r4, [r6, #0]
 80186f0:	4626      	mov	r6, r4
 80186f2:	2e00      	cmp	r6, #0
 80186f4:	d140      	bne.n	8018778 <_malloc_r+0xcc>
 80186f6:	6823      	ldr	r3, [r4, #0]
 80186f8:	4631      	mov	r1, r6
 80186fa:	4638      	mov	r0, r7
 80186fc:	eb04 0803 	add.w	r8, r4, r3
 8018700:	f000 f908 	bl	8018914 <_sbrk_r>
 8018704:	4580      	cmp	r8, r0
 8018706:	d13a      	bne.n	801877e <_malloc_r+0xd2>
 8018708:	6821      	ldr	r1, [r4, #0]
 801870a:	3503      	adds	r5, #3
 801870c:	1a6d      	subs	r5, r5, r1
 801870e:	f025 0503 	bic.w	r5, r5, #3
 8018712:	3508      	adds	r5, #8
 8018714:	2d0c      	cmp	r5, #12
 8018716:	bf38      	it	cc
 8018718:	250c      	movcc	r5, #12
 801871a:	4629      	mov	r1, r5
 801871c:	4638      	mov	r0, r7
 801871e:	f7ff ffa5 	bl	801866c <sbrk_aligned>
 8018722:	3001      	adds	r0, #1
 8018724:	d02b      	beq.n	801877e <_malloc_r+0xd2>
 8018726:	6823      	ldr	r3, [r4, #0]
 8018728:	442b      	add	r3, r5
 801872a:	6023      	str	r3, [r4, #0]
 801872c:	e00e      	b.n	801874c <_malloc_r+0xa0>
 801872e:	6822      	ldr	r2, [r4, #0]
 8018730:	1b52      	subs	r2, r2, r5
 8018732:	d41e      	bmi.n	8018772 <_malloc_r+0xc6>
 8018734:	2a0b      	cmp	r2, #11
 8018736:	d916      	bls.n	8018766 <_malloc_r+0xba>
 8018738:	1961      	adds	r1, r4, r5
 801873a:	42a3      	cmp	r3, r4
 801873c:	6025      	str	r5, [r4, #0]
 801873e:	bf18      	it	ne
 8018740:	6059      	strne	r1, [r3, #4]
 8018742:	6863      	ldr	r3, [r4, #4]
 8018744:	bf08      	it	eq
 8018746:	6031      	streq	r1, [r6, #0]
 8018748:	5162      	str	r2, [r4, r5]
 801874a:	604b      	str	r3, [r1, #4]
 801874c:	4638      	mov	r0, r7
 801874e:	f104 060b 	add.w	r6, r4, #11
 8018752:	f000 fa7f 	bl	8018c54 <__malloc_unlock>
 8018756:	f026 0607 	bic.w	r6, r6, #7
 801875a:	1d23      	adds	r3, r4, #4
 801875c:	1af2      	subs	r2, r6, r3
 801875e:	d0b6      	beq.n	80186ce <_malloc_r+0x22>
 8018760:	1b9b      	subs	r3, r3, r6
 8018762:	50a3      	str	r3, [r4, r2]
 8018764:	e7b3      	b.n	80186ce <_malloc_r+0x22>
 8018766:	6862      	ldr	r2, [r4, #4]
 8018768:	42a3      	cmp	r3, r4
 801876a:	bf0c      	ite	eq
 801876c:	6032      	streq	r2, [r6, #0]
 801876e:	605a      	strne	r2, [r3, #4]
 8018770:	e7ec      	b.n	801874c <_malloc_r+0xa0>
 8018772:	4623      	mov	r3, r4
 8018774:	6864      	ldr	r4, [r4, #4]
 8018776:	e7b2      	b.n	80186de <_malloc_r+0x32>
 8018778:	4634      	mov	r4, r6
 801877a:	6876      	ldr	r6, [r6, #4]
 801877c:	e7b9      	b.n	80186f2 <_malloc_r+0x46>
 801877e:	230c      	movs	r3, #12
 8018780:	603b      	str	r3, [r7, #0]
 8018782:	4638      	mov	r0, r7
 8018784:	f000 fa66 	bl	8018c54 <__malloc_unlock>
 8018788:	e7a1      	b.n	80186ce <_malloc_r+0x22>
 801878a:	6025      	str	r5, [r4, #0]
 801878c:	e7de      	b.n	801874c <_malloc_r+0xa0>
 801878e:	bf00      	nop
 8018790:	2000da28 	.word	0x2000da28

08018794 <iprintf>:
 8018794:	b40f      	push	{r0, r1, r2, r3}
 8018796:	4b0a      	ldr	r3, [pc, #40]	; (80187c0 <iprintf+0x2c>)
 8018798:	b513      	push	{r0, r1, r4, lr}
 801879a:	681c      	ldr	r4, [r3, #0]
 801879c:	b124      	cbz	r4, 80187a8 <iprintf+0x14>
 801879e:	69a3      	ldr	r3, [r4, #24]
 80187a0:	b913      	cbnz	r3, 80187a8 <iprintf+0x14>
 80187a2:	4620      	mov	r0, r4
 80187a4:	f7ff fe0c 	bl	80183c0 <__sinit>
 80187a8:	ab05      	add	r3, sp, #20
 80187aa:	9a04      	ldr	r2, [sp, #16]
 80187ac:	68a1      	ldr	r1, [r4, #8]
 80187ae:	9301      	str	r3, [sp, #4]
 80187b0:	4620      	mov	r0, r4
 80187b2:	f000 fbdb 	bl	8018f6c <_vfiprintf_r>
 80187b6:	b002      	add	sp, #8
 80187b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187bc:	b004      	add	sp, #16
 80187be:	4770      	bx	lr
 80187c0:	200000b0 	.word	0x200000b0

080187c4 <rand>:
 80187c4:	4b16      	ldr	r3, [pc, #88]	; (8018820 <rand+0x5c>)
 80187c6:	b510      	push	{r4, lr}
 80187c8:	681c      	ldr	r4, [r3, #0]
 80187ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80187cc:	b9b3      	cbnz	r3, 80187fc <rand+0x38>
 80187ce:	2018      	movs	r0, #24
 80187d0:	f7ff feb8 	bl	8018544 <malloc>
 80187d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80187d6:	b928      	cbnz	r0, 80187e4 <rand+0x20>
 80187d8:	4602      	mov	r2, r0
 80187da:	4b12      	ldr	r3, [pc, #72]	; (8018824 <rand+0x60>)
 80187dc:	4812      	ldr	r0, [pc, #72]	; (8018828 <rand+0x64>)
 80187de:	214e      	movs	r1, #78	; 0x4e
 80187e0:	f000 f91e 	bl	8018a20 <__assert_func>
 80187e4:	4a11      	ldr	r2, [pc, #68]	; (801882c <rand+0x68>)
 80187e6:	4b12      	ldr	r3, [pc, #72]	; (8018830 <rand+0x6c>)
 80187e8:	e9c0 2300 	strd	r2, r3, [r0]
 80187ec:	4b11      	ldr	r3, [pc, #68]	; (8018834 <rand+0x70>)
 80187ee:	6083      	str	r3, [r0, #8]
 80187f0:	230b      	movs	r3, #11
 80187f2:	8183      	strh	r3, [r0, #12]
 80187f4:	2201      	movs	r2, #1
 80187f6:	2300      	movs	r3, #0
 80187f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80187fc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80187fe:	4a0e      	ldr	r2, [pc, #56]	; (8018838 <rand+0x74>)
 8018800:	6920      	ldr	r0, [r4, #16]
 8018802:	6963      	ldr	r3, [r4, #20]
 8018804:	490d      	ldr	r1, [pc, #52]	; (801883c <rand+0x78>)
 8018806:	4342      	muls	r2, r0
 8018808:	fb01 2203 	mla	r2, r1, r3, r2
 801880c:	fba0 0101 	umull	r0, r1, r0, r1
 8018810:	1c43      	adds	r3, r0, #1
 8018812:	eb42 0001 	adc.w	r0, r2, r1
 8018816:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801881a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801881e:	bd10      	pop	{r4, pc}
 8018820:	200000b0 	.word	0x200000b0
 8018824:	0801d094 	.word	0x0801d094
 8018828:	0801d0ab 	.word	0x0801d0ab
 801882c:	abcd330e 	.word	0xabcd330e
 8018830:	e66d1234 	.word	0xe66d1234
 8018834:	0005deec 	.word	0x0005deec
 8018838:	5851f42d 	.word	0x5851f42d
 801883c:	4c957f2d 	.word	0x4c957f2d

08018840 <cleanup_glue>:
 8018840:	b538      	push	{r3, r4, r5, lr}
 8018842:	460c      	mov	r4, r1
 8018844:	6809      	ldr	r1, [r1, #0]
 8018846:	4605      	mov	r5, r0
 8018848:	b109      	cbz	r1, 801884e <cleanup_glue+0xe>
 801884a:	f7ff fff9 	bl	8018840 <cleanup_glue>
 801884e:	4621      	mov	r1, r4
 8018850:	4628      	mov	r0, r5
 8018852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018856:	f7ff bebd 	b.w	80185d4 <_free_r>
	...

0801885c <_reclaim_reent>:
 801885c:	4b2c      	ldr	r3, [pc, #176]	; (8018910 <_reclaim_reent+0xb4>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	4283      	cmp	r3, r0
 8018862:	b570      	push	{r4, r5, r6, lr}
 8018864:	4604      	mov	r4, r0
 8018866:	d051      	beq.n	801890c <_reclaim_reent+0xb0>
 8018868:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801886a:	b143      	cbz	r3, 801887e <_reclaim_reent+0x22>
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d14a      	bne.n	8018908 <_reclaim_reent+0xac>
 8018872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018874:	6819      	ldr	r1, [r3, #0]
 8018876:	b111      	cbz	r1, 801887e <_reclaim_reent+0x22>
 8018878:	4620      	mov	r0, r4
 801887a:	f7ff feab 	bl	80185d4 <_free_r>
 801887e:	6961      	ldr	r1, [r4, #20]
 8018880:	b111      	cbz	r1, 8018888 <_reclaim_reent+0x2c>
 8018882:	4620      	mov	r0, r4
 8018884:	f7ff fea6 	bl	80185d4 <_free_r>
 8018888:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801888a:	b111      	cbz	r1, 8018892 <_reclaim_reent+0x36>
 801888c:	4620      	mov	r0, r4
 801888e:	f7ff fea1 	bl	80185d4 <_free_r>
 8018892:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018894:	b111      	cbz	r1, 801889c <_reclaim_reent+0x40>
 8018896:	4620      	mov	r0, r4
 8018898:	f7ff fe9c 	bl	80185d4 <_free_r>
 801889c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801889e:	b111      	cbz	r1, 80188a6 <_reclaim_reent+0x4a>
 80188a0:	4620      	mov	r0, r4
 80188a2:	f7ff fe97 	bl	80185d4 <_free_r>
 80188a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80188a8:	b111      	cbz	r1, 80188b0 <_reclaim_reent+0x54>
 80188aa:	4620      	mov	r0, r4
 80188ac:	f7ff fe92 	bl	80185d4 <_free_r>
 80188b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80188b2:	b111      	cbz	r1, 80188ba <_reclaim_reent+0x5e>
 80188b4:	4620      	mov	r0, r4
 80188b6:	f7ff fe8d 	bl	80185d4 <_free_r>
 80188ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80188bc:	b111      	cbz	r1, 80188c4 <_reclaim_reent+0x68>
 80188be:	4620      	mov	r0, r4
 80188c0:	f7ff fe88 	bl	80185d4 <_free_r>
 80188c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80188c6:	b111      	cbz	r1, 80188ce <_reclaim_reent+0x72>
 80188c8:	4620      	mov	r0, r4
 80188ca:	f7ff fe83 	bl	80185d4 <_free_r>
 80188ce:	69a3      	ldr	r3, [r4, #24]
 80188d0:	b1e3      	cbz	r3, 801890c <_reclaim_reent+0xb0>
 80188d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80188d4:	4620      	mov	r0, r4
 80188d6:	4798      	blx	r3
 80188d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80188da:	b1b9      	cbz	r1, 801890c <_reclaim_reent+0xb0>
 80188dc:	4620      	mov	r0, r4
 80188de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188e2:	f7ff bfad 	b.w	8018840 <cleanup_glue>
 80188e6:	5949      	ldr	r1, [r1, r5]
 80188e8:	b941      	cbnz	r1, 80188fc <_reclaim_reent+0xa0>
 80188ea:	3504      	adds	r5, #4
 80188ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188ee:	2d80      	cmp	r5, #128	; 0x80
 80188f0:	68d9      	ldr	r1, [r3, #12]
 80188f2:	d1f8      	bne.n	80188e6 <_reclaim_reent+0x8a>
 80188f4:	4620      	mov	r0, r4
 80188f6:	f7ff fe6d 	bl	80185d4 <_free_r>
 80188fa:	e7ba      	b.n	8018872 <_reclaim_reent+0x16>
 80188fc:	680e      	ldr	r6, [r1, #0]
 80188fe:	4620      	mov	r0, r4
 8018900:	f7ff fe68 	bl	80185d4 <_free_r>
 8018904:	4631      	mov	r1, r6
 8018906:	e7ef      	b.n	80188e8 <_reclaim_reent+0x8c>
 8018908:	2500      	movs	r5, #0
 801890a:	e7ef      	b.n	80188ec <_reclaim_reent+0x90>
 801890c:	bd70      	pop	{r4, r5, r6, pc}
 801890e:	bf00      	nop
 8018910:	200000b0 	.word	0x200000b0

08018914 <_sbrk_r>:
 8018914:	b538      	push	{r3, r4, r5, lr}
 8018916:	4d06      	ldr	r5, [pc, #24]	; (8018930 <_sbrk_r+0x1c>)
 8018918:	2300      	movs	r3, #0
 801891a:	4604      	mov	r4, r0
 801891c:	4608      	mov	r0, r1
 801891e:	602b      	str	r3, [r5, #0]
 8018920:	f7e9 ff9a 	bl	8002858 <_sbrk>
 8018924:	1c43      	adds	r3, r0, #1
 8018926:	d102      	bne.n	801892e <_sbrk_r+0x1a>
 8018928:	682b      	ldr	r3, [r5, #0]
 801892a:	b103      	cbz	r3, 801892e <_sbrk_r+0x1a>
 801892c:	6023      	str	r3, [r4, #0]
 801892e:	bd38      	pop	{r3, r4, r5, pc}
 8018930:	2000da30 	.word	0x2000da30

08018934 <siprintf>:
 8018934:	b40e      	push	{r1, r2, r3}
 8018936:	b500      	push	{lr}
 8018938:	b09c      	sub	sp, #112	; 0x70
 801893a:	ab1d      	add	r3, sp, #116	; 0x74
 801893c:	9002      	str	r0, [sp, #8]
 801893e:	9006      	str	r0, [sp, #24]
 8018940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018944:	4809      	ldr	r0, [pc, #36]	; (801896c <siprintf+0x38>)
 8018946:	9107      	str	r1, [sp, #28]
 8018948:	9104      	str	r1, [sp, #16]
 801894a:	4909      	ldr	r1, [pc, #36]	; (8018970 <siprintf+0x3c>)
 801894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018950:	9105      	str	r1, [sp, #20]
 8018952:	6800      	ldr	r0, [r0, #0]
 8018954:	9301      	str	r3, [sp, #4]
 8018956:	a902      	add	r1, sp, #8
 8018958:	f000 f9de 	bl	8018d18 <_svfiprintf_r>
 801895c:	9b02      	ldr	r3, [sp, #8]
 801895e:	2200      	movs	r2, #0
 8018960:	701a      	strb	r2, [r3, #0]
 8018962:	b01c      	add	sp, #112	; 0x70
 8018964:	f85d eb04 	ldr.w	lr, [sp], #4
 8018968:	b003      	add	sp, #12
 801896a:	4770      	bx	lr
 801896c:	200000b0 	.word	0x200000b0
 8018970:	ffff0208 	.word	0xffff0208

08018974 <__sread>:
 8018974:	b510      	push	{r4, lr}
 8018976:	460c      	mov	r4, r1
 8018978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801897c:	f000 fdba 	bl	80194f4 <_read_r>
 8018980:	2800      	cmp	r0, #0
 8018982:	bfab      	itete	ge
 8018984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018986:	89a3      	ldrhlt	r3, [r4, #12]
 8018988:	181b      	addge	r3, r3, r0
 801898a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801898e:	bfac      	ite	ge
 8018990:	6563      	strge	r3, [r4, #84]	; 0x54
 8018992:	81a3      	strhlt	r3, [r4, #12]
 8018994:	bd10      	pop	{r4, pc}

08018996 <__swrite>:
 8018996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801899a:	461f      	mov	r7, r3
 801899c:	898b      	ldrh	r3, [r1, #12]
 801899e:	05db      	lsls	r3, r3, #23
 80189a0:	4605      	mov	r5, r0
 80189a2:	460c      	mov	r4, r1
 80189a4:	4616      	mov	r6, r2
 80189a6:	d505      	bpl.n	80189b4 <__swrite+0x1e>
 80189a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189ac:	2302      	movs	r3, #2
 80189ae:	2200      	movs	r2, #0
 80189b0:	f000 f938 	bl	8018c24 <_lseek_r>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80189be:	81a3      	strh	r3, [r4, #12]
 80189c0:	4632      	mov	r2, r6
 80189c2:	463b      	mov	r3, r7
 80189c4:	4628      	mov	r0, r5
 80189c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189ca:	f000 b817 	b.w	80189fc <_write_r>

080189ce <__sseek>:
 80189ce:	b510      	push	{r4, lr}
 80189d0:	460c      	mov	r4, r1
 80189d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189d6:	f000 f925 	bl	8018c24 <_lseek_r>
 80189da:	1c43      	adds	r3, r0, #1
 80189dc:	89a3      	ldrh	r3, [r4, #12]
 80189de:	bf15      	itete	ne
 80189e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80189e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80189e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80189ea:	81a3      	strheq	r3, [r4, #12]
 80189ec:	bf18      	it	ne
 80189ee:	81a3      	strhne	r3, [r4, #12]
 80189f0:	bd10      	pop	{r4, pc}

080189f2 <__sclose>:
 80189f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189f6:	f000 b831 	b.w	8018a5c <_close_r>
	...

080189fc <_write_r>:
 80189fc:	b538      	push	{r3, r4, r5, lr}
 80189fe:	4d07      	ldr	r5, [pc, #28]	; (8018a1c <_write_r+0x20>)
 8018a00:	4604      	mov	r4, r0
 8018a02:	4608      	mov	r0, r1
 8018a04:	4611      	mov	r1, r2
 8018a06:	2200      	movs	r2, #0
 8018a08:	602a      	str	r2, [r5, #0]
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	f7e9 fed3 	bl	80027b6 <_write>
 8018a10:	1c43      	adds	r3, r0, #1
 8018a12:	d102      	bne.n	8018a1a <_write_r+0x1e>
 8018a14:	682b      	ldr	r3, [r5, #0]
 8018a16:	b103      	cbz	r3, 8018a1a <_write_r+0x1e>
 8018a18:	6023      	str	r3, [r4, #0]
 8018a1a:	bd38      	pop	{r3, r4, r5, pc}
 8018a1c:	2000da30 	.word	0x2000da30

08018a20 <__assert_func>:
 8018a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a22:	4614      	mov	r4, r2
 8018a24:	461a      	mov	r2, r3
 8018a26:	4b09      	ldr	r3, [pc, #36]	; (8018a4c <__assert_func+0x2c>)
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	4605      	mov	r5, r0
 8018a2c:	68d8      	ldr	r0, [r3, #12]
 8018a2e:	b14c      	cbz	r4, 8018a44 <__assert_func+0x24>
 8018a30:	4b07      	ldr	r3, [pc, #28]	; (8018a50 <__assert_func+0x30>)
 8018a32:	9100      	str	r1, [sp, #0]
 8018a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a38:	4906      	ldr	r1, [pc, #24]	; (8018a54 <__assert_func+0x34>)
 8018a3a:	462b      	mov	r3, r5
 8018a3c:	f000 f8e0 	bl	8018c00 <fiprintf>
 8018a40:	f000 fe2a 	bl	8019698 <abort>
 8018a44:	4b04      	ldr	r3, [pc, #16]	; (8018a58 <__assert_func+0x38>)
 8018a46:	461c      	mov	r4, r3
 8018a48:	e7f3      	b.n	8018a32 <__assert_func+0x12>
 8018a4a:	bf00      	nop
 8018a4c:	200000b0 	.word	0x200000b0
 8018a50:	0801d106 	.word	0x0801d106
 8018a54:	0801d113 	.word	0x0801d113
 8018a58:	0801d141 	.word	0x0801d141

08018a5c <_close_r>:
 8018a5c:	b538      	push	{r3, r4, r5, lr}
 8018a5e:	4d06      	ldr	r5, [pc, #24]	; (8018a78 <_close_r+0x1c>)
 8018a60:	2300      	movs	r3, #0
 8018a62:	4604      	mov	r4, r0
 8018a64:	4608      	mov	r0, r1
 8018a66:	602b      	str	r3, [r5, #0]
 8018a68:	f7e9 fec1 	bl	80027ee <_close>
 8018a6c:	1c43      	adds	r3, r0, #1
 8018a6e:	d102      	bne.n	8018a76 <_close_r+0x1a>
 8018a70:	682b      	ldr	r3, [r5, #0]
 8018a72:	b103      	cbz	r3, 8018a76 <_close_r+0x1a>
 8018a74:	6023      	str	r3, [r4, #0]
 8018a76:	bd38      	pop	{r3, r4, r5, pc}
 8018a78:	2000da30 	.word	0x2000da30

08018a7c <__sflush_r>:
 8018a7c:	898a      	ldrh	r2, [r1, #12]
 8018a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a82:	4605      	mov	r5, r0
 8018a84:	0710      	lsls	r0, r2, #28
 8018a86:	460c      	mov	r4, r1
 8018a88:	d458      	bmi.n	8018b3c <__sflush_r+0xc0>
 8018a8a:	684b      	ldr	r3, [r1, #4]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	dc05      	bgt.n	8018a9c <__sflush_r+0x20>
 8018a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	dc02      	bgt.n	8018a9c <__sflush_r+0x20>
 8018a96:	2000      	movs	r0, #0
 8018a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a9e:	2e00      	cmp	r6, #0
 8018aa0:	d0f9      	beq.n	8018a96 <__sflush_r+0x1a>
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018aa8:	682f      	ldr	r7, [r5, #0]
 8018aaa:	602b      	str	r3, [r5, #0]
 8018aac:	d032      	beq.n	8018b14 <__sflush_r+0x98>
 8018aae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018ab0:	89a3      	ldrh	r3, [r4, #12]
 8018ab2:	075a      	lsls	r2, r3, #29
 8018ab4:	d505      	bpl.n	8018ac2 <__sflush_r+0x46>
 8018ab6:	6863      	ldr	r3, [r4, #4]
 8018ab8:	1ac0      	subs	r0, r0, r3
 8018aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018abc:	b10b      	cbz	r3, 8018ac2 <__sflush_r+0x46>
 8018abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018ac0:	1ac0      	subs	r0, r0, r3
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ac8:	6a21      	ldr	r1, [r4, #32]
 8018aca:	4628      	mov	r0, r5
 8018acc:	47b0      	blx	r6
 8018ace:	1c43      	adds	r3, r0, #1
 8018ad0:	89a3      	ldrh	r3, [r4, #12]
 8018ad2:	d106      	bne.n	8018ae2 <__sflush_r+0x66>
 8018ad4:	6829      	ldr	r1, [r5, #0]
 8018ad6:	291d      	cmp	r1, #29
 8018ad8:	d82c      	bhi.n	8018b34 <__sflush_r+0xb8>
 8018ada:	4a2a      	ldr	r2, [pc, #168]	; (8018b84 <__sflush_r+0x108>)
 8018adc:	40ca      	lsrs	r2, r1
 8018ade:	07d6      	lsls	r6, r2, #31
 8018ae0:	d528      	bpl.n	8018b34 <__sflush_r+0xb8>
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	6062      	str	r2, [r4, #4]
 8018ae6:	04d9      	lsls	r1, r3, #19
 8018ae8:	6922      	ldr	r2, [r4, #16]
 8018aea:	6022      	str	r2, [r4, #0]
 8018aec:	d504      	bpl.n	8018af8 <__sflush_r+0x7c>
 8018aee:	1c42      	adds	r2, r0, #1
 8018af0:	d101      	bne.n	8018af6 <__sflush_r+0x7a>
 8018af2:	682b      	ldr	r3, [r5, #0]
 8018af4:	b903      	cbnz	r3, 8018af8 <__sflush_r+0x7c>
 8018af6:	6560      	str	r0, [r4, #84]	; 0x54
 8018af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018afa:	602f      	str	r7, [r5, #0]
 8018afc:	2900      	cmp	r1, #0
 8018afe:	d0ca      	beq.n	8018a96 <__sflush_r+0x1a>
 8018b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b04:	4299      	cmp	r1, r3
 8018b06:	d002      	beq.n	8018b0e <__sflush_r+0x92>
 8018b08:	4628      	mov	r0, r5
 8018b0a:	f7ff fd63 	bl	80185d4 <_free_r>
 8018b0e:	2000      	movs	r0, #0
 8018b10:	6360      	str	r0, [r4, #52]	; 0x34
 8018b12:	e7c1      	b.n	8018a98 <__sflush_r+0x1c>
 8018b14:	6a21      	ldr	r1, [r4, #32]
 8018b16:	2301      	movs	r3, #1
 8018b18:	4628      	mov	r0, r5
 8018b1a:	47b0      	blx	r6
 8018b1c:	1c41      	adds	r1, r0, #1
 8018b1e:	d1c7      	bne.n	8018ab0 <__sflush_r+0x34>
 8018b20:	682b      	ldr	r3, [r5, #0]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d0c4      	beq.n	8018ab0 <__sflush_r+0x34>
 8018b26:	2b1d      	cmp	r3, #29
 8018b28:	d001      	beq.n	8018b2e <__sflush_r+0xb2>
 8018b2a:	2b16      	cmp	r3, #22
 8018b2c:	d101      	bne.n	8018b32 <__sflush_r+0xb6>
 8018b2e:	602f      	str	r7, [r5, #0]
 8018b30:	e7b1      	b.n	8018a96 <__sflush_r+0x1a>
 8018b32:	89a3      	ldrh	r3, [r4, #12]
 8018b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b38:	81a3      	strh	r3, [r4, #12]
 8018b3a:	e7ad      	b.n	8018a98 <__sflush_r+0x1c>
 8018b3c:	690f      	ldr	r7, [r1, #16]
 8018b3e:	2f00      	cmp	r7, #0
 8018b40:	d0a9      	beq.n	8018a96 <__sflush_r+0x1a>
 8018b42:	0793      	lsls	r3, r2, #30
 8018b44:	680e      	ldr	r6, [r1, #0]
 8018b46:	bf08      	it	eq
 8018b48:	694b      	ldreq	r3, [r1, #20]
 8018b4a:	600f      	str	r7, [r1, #0]
 8018b4c:	bf18      	it	ne
 8018b4e:	2300      	movne	r3, #0
 8018b50:	eba6 0807 	sub.w	r8, r6, r7
 8018b54:	608b      	str	r3, [r1, #8]
 8018b56:	f1b8 0f00 	cmp.w	r8, #0
 8018b5a:	dd9c      	ble.n	8018a96 <__sflush_r+0x1a>
 8018b5c:	6a21      	ldr	r1, [r4, #32]
 8018b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b60:	4643      	mov	r3, r8
 8018b62:	463a      	mov	r2, r7
 8018b64:	4628      	mov	r0, r5
 8018b66:	47b0      	blx	r6
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	dc06      	bgt.n	8018b7a <__sflush_r+0xfe>
 8018b6c:	89a3      	ldrh	r3, [r4, #12]
 8018b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b72:	81a3      	strh	r3, [r4, #12]
 8018b74:	f04f 30ff 	mov.w	r0, #4294967295
 8018b78:	e78e      	b.n	8018a98 <__sflush_r+0x1c>
 8018b7a:	4407      	add	r7, r0
 8018b7c:	eba8 0800 	sub.w	r8, r8, r0
 8018b80:	e7e9      	b.n	8018b56 <__sflush_r+0xda>
 8018b82:	bf00      	nop
 8018b84:	20400001 	.word	0x20400001

08018b88 <_fflush_r>:
 8018b88:	b538      	push	{r3, r4, r5, lr}
 8018b8a:	690b      	ldr	r3, [r1, #16]
 8018b8c:	4605      	mov	r5, r0
 8018b8e:	460c      	mov	r4, r1
 8018b90:	b913      	cbnz	r3, 8018b98 <_fflush_r+0x10>
 8018b92:	2500      	movs	r5, #0
 8018b94:	4628      	mov	r0, r5
 8018b96:	bd38      	pop	{r3, r4, r5, pc}
 8018b98:	b118      	cbz	r0, 8018ba2 <_fflush_r+0x1a>
 8018b9a:	6983      	ldr	r3, [r0, #24]
 8018b9c:	b90b      	cbnz	r3, 8018ba2 <_fflush_r+0x1a>
 8018b9e:	f7ff fc0f 	bl	80183c0 <__sinit>
 8018ba2:	4b14      	ldr	r3, [pc, #80]	; (8018bf4 <_fflush_r+0x6c>)
 8018ba4:	429c      	cmp	r4, r3
 8018ba6:	d11b      	bne.n	8018be0 <_fflush_r+0x58>
 8018ba8:	686c      	ldr	r4, [r5, #4]
 8018baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d0ef      	beq.n	8018b92 <_fflush_r+0xa>
 8018bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018bb4:	07d0      	lsls	r0, r2, #31
 8018bb6:	d404      	bmi.n	8018bc2 <_fflush_r+0x3a>
 8018bb8:	0599      	lsls	r1, r3, #22
 8018bba:	d402      	bmi.n	8018bc2 <_fflush_r+0x3a>
 8018bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018bbe:	f7ea f899 	bl	8002cf4 <__retarget_lock_acquire_recursive>
 8018bc2:	4628      	mov	r0, r5
 8018bc4:	4621      	mov	r1, r4
 8018bc6:	f7ff ff59 	bl	8018a7c <__sflush_r>
 8018bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018bcc:	07da      	lsls	r2, r3, #31
 8018bce:	4605      	mov	r5, r0
 8018bd0:	d4e0      	bmi.n	8018b94 <_fflush_r+0xc>
 8018bd2:	89a3      	ldrh	r3, [r4, #12]
 8018bd4:	059b      	lsls	r3, r3, #22
 8018bd6:	d4dd      	bmi.n	8018b94 <_fflush_r+0xc>
 8018bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018bda:	f7ea f89f 	bl	8002d1c <__retarget_lock_release_recursive>
 8018bde:	e7d9      	b.n	8018b94 <_fflush_r+0xc>
 8018be0:	4b05      	ldr	r3, [pc, #20]	; (8018bf8 <_fflush_r+0x70>)
 8018be2:	429c      	cmp	r4, r3
 8018be4:	d101      	bne.n	8018bea <_fflush_r+0x62>
 8018be6:	68ac      	ldr	r4, [r5, #8]
 8018be8:	e7df      	b.n	8018baa <_fflush_r+0x22>
 8018bea:	4b04      	ldr	r3, [pc, #16]	; (8018bfc <_fflush_r+0x74>)
 8018bec:	429c      	cmp	r4, r3
 8018bee:	bf08      	it	eq
 8018bf0:	68ec      	ldreq	r4, [r5, #12]
 8018bf2:	e7da      	b.n	8018baa <_fflush_r+0x22>
 8018bf4:	0801d050 	.word	0x0801d050
 8018bf8:	0801d070 	.word	0x0801d070
 8018bfc:	0801d030 	.word	0x0801d030

08018c00 <fiprintf>:
 8018c00:	b40e      	push	{r1, r2, r3}
 8018c02:	b503      	push	{r0, r1, lr}
 8018c04:	4601      	mov	r1, r0
 8018c06:	ab03      	add	r3, sp, #12
 8018c08:	4805      	ldr	r0, [pc, #20]	; (8018c20 <fiprintf+0x20>)
 8018c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c0e:	6800      	ldr	r0, [r0, #0]
 8018c10:	9301      	str	r3, [sp, #4]
 8018c12:	f000 f9ab 	bl	8018f6c <_vfiprintf_r>
 8018c16:	b002      	add	sp, #8
 8018c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c1c:	b003      	add	sp, #12
 8018c1e:	4770      	bx	lr
 8018c20:	200000b0 	.word	0x200000b0

08018c24 <_lseek_r>:
 8018c24:	b538      	push	{r3, r4, r5, lr}
 8018c26:	4d07      	ldr	r5, [pc, #28]	; (8018c44 <_lseek_r+0x20>)
 8018c28:	4604      	mov	r4, r0
 8018c2a:	4608      	mov	r0, r1
 8018c2c:	4611      	mov	r1, r2
 8018c2e:	2200      	movs	r2, #0
 8018c30:	602a      	str	r2, [r5, #0]
 8018c32:	461a      	mov	r2, r3
 8018c34:	f7e9 fe02 	bl	800283c <_lseek>
 8018c38:	1c43      	adds	r3, r0, #1
 8018c3a:	d102      	bne.n	8018c42 <_lseek_r+0x1e>
 8018c3c:	682b      	ldr	r3, [r5, #0]
 8018c3e:	b103      	cbz	r3, 8018c42 <_lseek_r+0x1e>
 8018c40:	6023      	str	r3, [r4, #0]
 8018c42:	bd38      	pop	{r3, r4, r5, pc}
 8018c44:	2000da30 	.word	0x2000da30

08018c48 <__malloc_lock>:
 8018c48:	4801      	ldr	r0, [pc, #4]	; (8018c50 <__malloc_lock+0x8>)
 8018c4a:	f7ea b853 	b.w	8002cf4 <__retarget_lock_acquire_recursive>
 8018c4e:	bf00      	nop
 8018c50:	20000b6c 	.word	0x20000b6c

08018c54 <__malloc_unlock>:
 8018c54:	4801      	ldr	r0, [pc, #4]	; (8018c5c <__malloc_unlock+0x8>)
 8018c56:	f7ea b861 	b.w	8002d1c <__retarget_lock_release_recursive>
 8018c5a:	bf00      	nop
 8018c5c:	20000b6c 	.word	0x20000b6c

08018c60 <__ssputs_r>:
 8018c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c64:	688e      	ldr	r6, [r1, #8]
 8018c66:	429e      	cmp	r6, r3
 8018c68:	4682      	mov	sl, r0
 8018c6a:	460c      	mov	r4, r1
 8018c6c:	4690      	mov	r8, r2
 8018c6e:	461f      	mov	r7, r3
 8018c70:	d838      	bhi.n	8018ce4 <__ssputs_r+0x84>
 8018c72:	898a      	ldrh	r2, [r1, #12]
 8018c74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018c78:	d032      	beq.n	8018ce0 <__ssputs_r+0x80>
 8018c7a:	6825      	ldr	r5, [r4, #0]
 8018c7c:	6909      	ldr	r1, [r1, #16]
 8018c7e:	eba5 0901 	sub.w	r9, r5, r1
 8018c82:	6965      	ldr	r5, [r4, #20]
 8018c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	444b      	add	r3, r9
 8018c90:	106d      	asrs	r5, r5, #1
 8018c92:	429d      	cmp	r5, r3
 8018c94:	bf38      	it	cc
 8018c96:	461d      	movcc	r5, r3
 8018c98:	0553      	lsls	r3, r2, #21
 8018c9a:	d531      	bpl.n	8018d00 <__ssputs_r+0xa0>
 8018c9c:	4629      	mov	r1, r5
 8018c9e:	f7ff fd05 	bl	80186ac <_malloc_r>
 8018ca2:	4606      	mov	r6, r0
 8018ca4:	b950      	cbnz	r0, 8018cbc <__ssputs_r+0x5c>
 8018ca6:	230c      	movs	r3, #12
 8018ca8:	f8ca 3000 	str.w	r3, [sl]
 8018cac:	89a3      	ldrh	r3, [r4, #12]
 8018cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cb2:	81a3      	strh	r3, [r4, #12]
 8018cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cbc:	6921      	ldr	r1, [r4, #16]
 8018cbe:	464a      	mov	r2, r9
 8018cc0:	f7ff fc58 	bl	8018574 <memcpy>
 8018cc4:	89a3      	ldrh	r3, [r4, #12]
 8018cc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cce:	81a3      	strh	r3, [r4, #12]
 8018cd0:	6126      	str	r6, [r4, #16]
 8018cd2:	6165      	str	r5, [r4, #20]
 8018cd4:	444e      	add	r6, r9
 8018cd6:	eba5 0509 	sub.w	r5, r5, r9
 8018cda:	6026      	str	r6, [r4, #0]
 8018cdc:	60a5      	str	r5, [r4, #8]
 8018cde:	463e      	mov	r6, r7
 8018ce0:	42be      	cmp	r6, r7
 8018ce2:	d900      	bls.n	8018ce6 <__ssputs_r+0x86>
 8018ce4:	463e      	mov	r6, r7
 8018ce6:	6820      	ldr	r0, [r4, #0]
 8018ce8:	4632      	mov	r2, r6
 8018cea:	4641      	mov	r1, r8
 8018cec:	f7ff fc50 	bl	8018590 <memmove>
 8018cf0:	68a3      	ldr	r3, [r4, #8]
 8018cf2:	1b9b      	subs	r3, r3, r6
 8018cf4:	60a3      	str	r3, [r4, #8]
 8018cf6:	6823      	ldr	r3, [r4, #0]
 8018cf8:	4433      	add	r3, r6
 8018cfa:	6023      	str	r3, [r4, #0]
 8018cfc:	2000      	movs	r0, #0
 8018cfe:	e7db      	b.n	8018cb8 <__ssputs_r+0x58>
 8018d00:	462a      	mov	r2, r5
 8018d02:	f000 fd35 	bl	8019770 <_realloc_r>
 8018d06:	4606      	mov	r6, r0
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	d1e1      	bne.n	8018cd0 <__ssputs_r+0x70>
 8018d0c:	6921      	ldr	r1, [r4, #16]
 8018d0e:	4650      	mov	r0, sl
 8018d10:	f7ff fc60 	bl	80185d4 <_free_r>
 8018d14:	e7c7      	b.n	8018ca6 <__ssputs_r+0x46>
	...

08018d18 <_svfiprintf_r>:
 8018d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d1c:	4698      	mov	r8, r3
 8018d1e:	898b      	ldrh	r3, [r1, #12]
 8018d20:	061b      	lsls	r3, r3, #24
 8018d22:	b09d      	sub	sp, #116	; 0x74
 8018d24:	4607      	mov	r7, r0
 8018d26:	460d      	mov	r5, r1
 8018d28:	4614      	mov	r4, r2
 8018d2a:	d50e      	bpl.n	8018d4a <_svfiprintf_r+0x32>
 8018d2c:	690b      	ldr	r3, [r1, #16]
 8018d2e:	b963      	cbnz	r3, 8018d4a <_svfiprintf_r+0x32>
 8018d30:	2140      	movs	r1, #64	; 0x40
 8018d32:	f7ff fcbb 	bl	80186ac <_malloc_r>
 8018d36:	6028      	str	r0, [r5, #0]
 8018d38:	6128      	str	r0, [r5, #16]
 8018d3a:	b920      	cbnz	r0, 8018d46 <_svfiprintf_r+0x2e>
 8018d3c:	230c      	movs	r3, #12
 8018d3e:	603b      	str	r3, [r7, #0]
 8018d40:	f04f 30ff 	mov.w	r0, #4294967295
 8018d44:	e0d1      	b.n	8018eea <_svfiprintf_r+0x1d2>
 8018d46:	2340      	movs	r3, #64	; 0x40
 8018d48:	616b      	str	r3, [r5, #20]
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8018d4e:	2320      	movs	r3, #32
 8018d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d58:	2330      	movs	r3, #48	; 0x30
 8018d5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018f04 <_svfiprintf_r+0x1ec>
 8018d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d62:	f04f 0901 	mov.w	r9, #1
 8018d66:	4623      	mov	r3, r4
 8018d68:	469a      	mov	sl, r3
 8018d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d6e:	b10a      	cbz	r2, 8018d74 <_svfiprintf_r+0x5c>
 8018d70:	2a25      	cmp	r2, #37	; 0x25
 8018d72:	d1f9      	bne.n	8018d68 <_svfiprintf_r+0x50>
 8018d74:	ebba 0b04 	subs.w	fp, sl, r4
 8018d78:	d00b      	beq.n	8018d92 <_svfiprintf_r+0x7a>
 8018d7a:	465b      	mov	r3, fp
 8018d7c:	4622      	mov	r2, r4
 8018d7e:	4629      	mov	r1, r5
 8018d80:	4638      	mov	r0, r7
 8018d82:	f7ff ff6d 	bl	8018c60 <__ssputs_r>
 8018d86:	3001      	adds	r0, #1
 8018d88:	f000 80aa 	beq.w	8018ee0 <_svfiprintf_r+0x1c8>
 8018d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d8e:	445a      	add	r2, fp
 8018d90:	9209      	str	r2, [sp, #36]	; 0x24
 8018d92:	f89a 3000 	ldrb.w	r3, [sl]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	f000 80a2 	beq.w	8018ee0 <_svfiprintf_r+0x1c8>
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8018da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018da6:	f10a 0a01 	add.w	sl, sl, #1
 8018daa:	9304      	str	r3, [sp, #16]
 8018dac:	9307      	str	r3, [sp, #28]
 8018dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018db2:	931a      	str	r3, [sp, #104]	; 0x68
 8018db4:	4654      	mov	r4, sl
 8018db6:	2205      	movs	r2, #5
 8018db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dbc:	4851      	ldr	r0, [pc, #324]	; (8018f04 <_svfiprintf_r+0x1ec>)
 8018dbe:	f7e7 fa07 	bl	80001d0 <memchr>
 8018dc2:	9a04      	ldr	r2, [sp, #16]
 8018dc4:	b9d8      	cbnz	r0, 8018dfe <_svfiprintf_r+0xe6>
 8018dc6:	06d0      	lsls	r0, r2, #27
 8018dc8:	bf44      	itt	mi
 8018dca:	2320      	movmi	r3, #32
 8018dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018dd0:	0711      	lsls	r1, r2, #28
 8018dd2:	bf44      	itt	mi
 8018dd4:	232b      	movmi	r3, #43	; 0x2b
 8018dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018dda:	f89a 3000 	ldrb.w	r3, [sl]
 8018dde:	2b2a      	cmp	r3, #42	; 0x2a
 8018de0:	d015      	beq.n	8018e0e <_svfiprintf_r+0xf6>
 8018de2:	9a07      	ldr	r2, [sp, #28]
 8018de4:	4654      	mov	r4, sl
 8018de6:	2000      	movs	r0, #0
 8018de8:	f04f 0c0a 	mov.w	ip, #10
 8018dec:	4621      	mov	r1, r4
 8018dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018df2:	3b30      	subs	r3, #48	; 0x30
 8018df4:	2b09      	cmp	r3, #9
 8018df6:	d94e      	bls.n	8018e96 <_svfiprintf_r+0x17e>
 8018df8:	b1b0      	cbz	r0, 8018e28 <_svfiprintf_r+0x110>
 8018dfa:	9207      	str	r2, [sp, #28]
 8018dfc:	e014      	b.n	8018e28 <_svfiprintf_r+0x110>
 8018dfe:	eba0 0308 	sub.w	r3, r0, r8
 8018e02:	fa09 f303 	lsl.w	r3, r9, r3
 8018e06:	4313      	orrs	r3, r2
 8018e08:	9304      	str	r3, [sp, #16]
 8018e0a:	46a2      	mov	sl, r4
 8018e0c:	e7d2      	b.n	8018db4 <_svfiprintf_r+0x9c>
 8018e0e:	9b03      	ldr	r3, [sp, #12]
 8018e10:	1d19      	adds	r1, r3, #4
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	9103      	str	r1, [sp, #12]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	bfbb      	ittet	lt
 8018e1a:	425b      	neglt	r3, r3
 8018e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8018e20:	9307      	strge	r3, [sp, #28]
 8018e22:	9307      	strlt	r3, [sp, #28]
 8018e24:	bfb8      	it	lt
 8018e26:	9204      	strlt	r2, [sp, #16]
 8018e28:	7823      	ldrb	r3, [r4, #0]
 8018e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8018e2c:	d10c      	bne.n	8018e48 <_svfiprintf_r+0x130>
 8018e2e:	7863      	ldrb	r3, [r4, #1]
 8018e30:	2b2a      	cmp	r3, #42	; 0x2a
 8018e32:	d135      	bne.n	8018ea0 <_svfiprintf_r+0x188>
 8018e34:	9b03      	ldr	r3, [sp, #12]
 8018e36:	1d1a      	adds	r2, r3, #4
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	9203      	str	r2, [sp, #12]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	bfb8      	it	lt
 8018e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8018e44:	3402      	adds	r4, #2
 8018e46:	9305      	str	r3, [sp, #20]
 8018e48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018f14 <_svfiprintf_r+0x1fc>
 8018e4c:	7821      	ldrb	r1, [r4, #0]
 8018e4e:	2203      	movs	r2, #3
 8018e50:	4650      	mov	r0, sl
 8018e52:	f7e7 f9bd 	bl	80001d0 <memchr>
 8018e56:	b140      	cbz	r0, 8018e6a <_svfiprintf_r+0x152>
 8018e58:	2340      	movs	r3, #64	; 0x40
 8018e5a:	eba0 000a 	sub.w	r0, r0, sl
 8018e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8018e62:	9b04      	ldr	r3, [sp, #16]
 8018e64:	4303      	orrs	r3, r0
 8018e66:	3401      	adds	r4, #1
 8018e68:	9304      	str	r3, [sp, #16]
 8018e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e6e:	4826      	ldr	r0, [pc, #152]	; (8018f08 <_svfiprintf_r+0x1f0>)
 8018e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e74:	2206      	movs	r2, #6
 8018e76:	f7e7 f9ab 	bl	80001d0 <memchr>
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	d038      	beq.n	8018ef0 <_svfiprintf_r+0x1d8>
 8018e7e:	4b23      	ldr	r3, [pc, #140]	; (8018f0c <_svfiprintf_r+0x1f4>)
 8018e80:	bb1b      	cbnz	r3, 8018eca <_svfiprintf_r+0x1b2>
 8018e82:	9b03      	ldr	r3, [sp, #12]
 8018e84:	3307      	adds	r3, #7
 8018e86:	f023 0307 	bic.w	r3, r3, #7
 8018e8a:	3308      	adds	r3, #8
 8018e8c:	9303      	str	r3, [sp, #12]
 8018e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e90:	4433      	add	r3, r6
 8018e92:	9309      	str	r3, [sp, #36]	; 0x24
 8018e94:	e767      	b.n	8018d66 <_svfiprintf_r+0x4e>
 8018e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e9a:	460c      	mov	r4, r1
 8018e9c:	2001      	movs	r0, #1
 8018e9e:	e7a5      	b.n	8018dec <_svfiprintf_r+0xd4>
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	3401      	adds	r4, #1
 8018ea4:	9305      	str	r3, [sp, #20]
 8018ea6:	4619      	mov	r1, r3
 8018ea8:	f04f 0c0a 	mov.w	ip, #10
 8018eac:	4620      	mov	r0, r4
 8018eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018eb2:	3a30      	subs	r2, #48	; 0x30
 8018eb4:	2a09      	cmp	r2, #9
 8018eb6:	d903      	bls.n	8018ec0 <_svfiprintf_r+0x1a8>
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d0c5      	beq.n	8018e48 <_svfiprintf_r+0x130>
 8018ebc:	9105      	str	r1, [sp, #20]
 8018ebe:	e7c3      	b.n	8018e48 <_svfiprintf_r+0x130>
 8018ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ec4:	4604      	mov	r4, r0
 8018ec6:	2301      	movs	r3, #1
 8018ec8:	e7f0      	b.n	8018eac <_svfiprintf_r+0x194>
 8018eca:	ab03      	add	r3, sp, #12
 8018ecc:	9300      	str	r3, [sp, #0]
 8018ece:	462a      	mov	r2, r5
 8018ed0:	4b0f      	ldr	r3, [pc, #60]	; (8018f10 <_svfiprintf_r+0x1f8>)
 8018ed2:	a904      	add	r1, sp, #16
 8018ed4:	4638      	mov	r0, r7
 8018ed6:	f3af 8000 	nop.w
 8018eda:	1c42      	adds	r2, r0, #1
 8018edc:	4606      	mov	r6, r0
 8018ede:	d1d6      	bne.n	8018e8e <_svfiprintf_r+0x176>
 8018ee0:	89ab      	ldrh	r3, [r5, #12]
 8018ee2:	065b      	lsls	r3, r3, #25
 8018ee4:	f53f af2c 	bmi.w	8018d40 <_svfiprintf_r+0x28>
 8018ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018eea:	b01d      	add	sp, #116	; 0x74
 8018eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ef0:	ab03      	add	r3, sp, #12
 8018ef2:	9300      	str	r3, [sp, #0]
 8018ef4:	462a      	mov	r2, r5
 8018ef6:	4b06      	ldr	r3, [pc, #24]	; (8018f10 <_svfiprintf_r+0x1f8>)
 8018ef8:	a904      	add	r1, sp, #16
 8018efa:	4638      	mov	r0, r7
 8018efc:	f000 f9d4 	bl	80192a8 <_printf_i>
 8018f00:	e7eb      	b.n	8018eda <_svfiprintf_r+0x1c2>
 8018f02:	bf00      	nop
 8018f04:	0801d142 	.word	0x0801d142
 8018f08:	0801d14c 	.word	0x0801d14c
 8018f0c:	00000000 	.word	0x00000000
 8018f10:	08018c61 	.word	0x08018c61
 8018f14:	0801d148 	.word	0x0801d148

08018f18 <__sfputc_r>:
 8018f18:	6893      	ldr	r3, [r2, #8]
 8018f1a:	3b01      	subs	r3, #1
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	b410      	push	{r4}
 8018f20:	6093      	str	r3, [r2, #8]
 8018f22:	da08      	bge.n	8018f36 <__sfputc_r+0x1e>
 8018f24:	6994      	ldr	r4, [r2, #24]
 8018f26:	42a3      	cmp	r3, r4
 8018f28:	db01      	blt.n	8018f2e <__sfputc_r+0x16>
 8018f2a:	290a      	cmp	r1, #10
 8018f2c:	d103      	bne.n	8018f36 <__sfputc_r+0x1e>
 8018f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f32:	f000 baf1 	b.w	8019518 <__swbuf_r>
 8018f36:	6813      	ldr	r3, [r2, #0]
 8018f38:	1c58      	adds	r0, r3, #1
 8018f3a:	6010      	str	r0, [r2, #0]
 8018f3c:	7019      	strb	r1, [r3, #0]
 8018f3e:	4608      	mov	r0, r1
 8018f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f44:	4770      	bx	lr

08018f46 <__sfputs_r>:
 8018f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f48:	4606      	mov	r6, r0
 8018f4a:	460f      	mov	r7, r1
 8018f4c:	4614      	mov	r4, r2
 8018f4e:	18d5      	adds	r5, r2, r3
 8018f50:	42ac      	cmp	r4, r5
 8018f52:	d101      	bne.n	8018f58 <__sfputs_r+0x12>
 8018f54:	2000      	movs	r0, #0
 8018f56:	e007      	b.n	8018f68 <__sfputs_r+0x22>
 8018f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5c:	463a      	mov	r2, r7
 8018f5e:	4630      	mov	r0, r6
 8018f60:	f7ff ffda 	bl	8018f18 <__sfputc_r>
 8018f64:	1c43      	adds	r3, r0, #1
 8018f66:	d1f3      	bne.n	8018f50 <__sfputs_r+0xa>
 8018f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018f6c <_vfiprintf_r>:
 8018f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f70:	460d      	mov	r5, r1
 8018f72:	b09d      	sub	sp, #116	; 0x74
 8018f74:	4614      	mov	r4, r2
 8018f76:	4698      	mov	r8, r3
 8018f78:	4606      	mov	r6, r0
 8018f7a:	b118      	cbz	r0, 8018f84 <_vfiprintf_r+0x18>
 8018f7c:	6983      	ldr	r3, [r0, #24]
 8018f7e:	b90b      	cbnz	r3, 8018f84 <_vfiprintf_r+0x18>
 8018f80:	f7ff fa1e 	bl	80183c0 <__sinit>
 8018f84:	4b89      	ldr	r3, [pc, #548]	; (80191ac <_vfiprintf_r+0x240>)
 8018f86:	429d      	cmp	r5, r3
 8018f88:	d11b      	bne.n	8018fc2 <_vfiprintf_r+0x56>
 8018f8a:	6875      	ldr	r5, [r6, #4]
 8018f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f8e:	07d9      	lsls	r1, r3, #31
 8018f90:	d405      	bmi.n	8018f9e <_vfiprintf_r+0x32>
 8018f92:	89ab      	ldrh	r3, [r5, #12]
 8018f94:	059a      	lsls	r2, r3, #22
 8018f96:	d402      	bmi.n	8018f9e <_vfiprintf_r+0x32>
 8018f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f9a:	f7e9 feab 	bl	8002cf4 <__retarget_lock_acquire_recursive>
 8018f9e:	89ab      	ldrh	r3, [r5, #12]
 8018fa0:	071b      	lsls	r3, r3, #28
 8018fa2:	d501      	bpl.n	8018fa8 <_vfiprintf_r+0x3c>
 8018fa4:	692b      	ldr	r3, [r5, #16]
 8018fa6:	b9eb      	cbnz	r3, 8018fe4 <_vfiprintf_r+0x78>
 8018fa8:	4629      	mov	r1, r5
 8018faa:	4630      	mov	r0, r6
 8018fac:	f000 fb06 	bl	80195bc <__swsetup_r>
 8018fb0:	b1c0      	cbz	r0, 8018fe4 <_vfiprintf_r+0x78>
 8018fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018fb4:	07dc      	lsls	r4, r3, #31
 8018fb6:	d50e      	bpl.n	8018fd6 <_vfiprintf_r+0x6a>
 8018fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8018fbc:	b01d      	add	sp, #116	; 0x74
 8018fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fc2:	4b7b      	ldr	r3, [pc, #492]	; (80191b0 <_vfiprintf_r+0x244>)
 8018fc4:	429d      	cmp	r5, r3
 8018fc6:	d101      	bne.n	8018fcc <_vfiprintf_r+0x60>
 8018fc8:	68b5      	ldr	r5, [r6, #8]
 8018fca:	e7df      	b.n	8018f8c <_vfiprintf_r+0x20>
 8018fcc:	4b79      	ldr	r3, [pc, #484]	; (80191b4 <_vfiprintf_r+0x248>)
 8018fce:	429d      	cmp	r5, r3
 8018fd0:	bf08      	it	eq
 8018fd2:	68f5      	ldreq	r5, [r6, #12]
 8018fd4:	e7da      	b.n	8018f8c <_vfiprintf_r+0x20>
 8018fd6:	89ab      	ldrh	r3, [r5, #12]
 8018fd8:	0598      	lsls	r0, r3, #22
 8018fda:	d4ed      	bmi.n	8018fb8 <_vfiprintf_r+0x4c>
 8018fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018fde:	f7e9 fe9d 	bl	8002d1c <__retarget_lock_release_recursive>
 8018fe2:	e7e9      	b.n	8018fb8 <_vfiprintf_r+0x4c>
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8018fe8:	2320      	movs	r3, #32
 8018fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ff2:	2330      	movs	r3, #48	; 0x30
 8018ff4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80191b8 <_vfiprintf_r+0x24c>
 8018ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ffc:	f04f 0901 	mov.w	r9, #1
 8019000:	4623      	mov	r3, r4
 8019002:	469a      	mov	sl, r3
 8019004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019008:	b10a      	cbz	r2, 801900e <_vfiprintf_r+0xa2>
 801900a:	2a25      	cmp	r2, #37	; 0x25
 801900c:	d1f9      	bne.n	8019002 <_vfiprintf_r+0x96>
 801900e:	ebba 0b04 	subs.w	fp, sl, r4
 8019012:	d00b      	beq.n	801902c <_vfiprintf_r+0xc0>
 8019014:	465b      	mov	r3, fp
 8019016:	4622      	mov	r2, r4
 8019018:	4629      	mov	r1, r5
 801901a:	4630      	mov	r0, r6
 801901c:	f7ff ff93 	bl	8018f46 <__sfputs_r>
 8019020:	3001      	adds	r0, #1
 8019022:	f000 80aa 	beq.w	801917a <_vfiprintf_r+0x20e>
 8019026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019028:	445a      	add	r2, fp
 801902a:	9209      	str	r2, [sp, #36]	; 0x24
 801902c:	f89a 3000 	ldrb.w	r3, [sl]
 8019030:	2b00      	cmp	r3, #0
 8019032:	f000 80a2 	beq.w	801917a <_vfiprintf_r+0x20e>
 8019036:	2300      	movs	r3, #0
 8019038:	f04f 32ff 	mov.w	r2, #4294967295
 801903c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019040:	f10a 0a01 	add.w	sl, sl, #1
 8019044:	9304      	str	r3, [sp, #16]
 8019046:	9307      	str	r3, [sp, #28]
 8019048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801904c:	931a      	str	r3, [sp, #104]	; 0x68
 801904e:	4654      	mov	r4, sl
 8019050:	2205      	movs	r2, #5
 8019052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019056:	4858      	ldr	r0, [pc, #352]	; (80191b8 <_vfiprintf_r+0x24c>)
 8019058:	f7e7 f8ba 	bl	80001d0 <memchr>
 801905c:	9a04      	ldr	r2, [sp, #16]
 801905e:	b9d8      	cbnz	r0, 8019098 <_vfiprintf_r+0x12c>
 8019060:	06d1      	lsls	r1, r2, #27
 8019062:	bf44      	itt	mi
 8019064:	2320      	movmi	r3, #32
 8019066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801906a:	0713      	lsls	r3, r2, #28
 801906c:	bf44      	itt	mi
 801906e:	232b      	movmi	r3, #43	; 0x2b
 8019070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019074:	f89a 3000 	ldrb.w	r3, [sl]
 8019078:	2b2a      	cmp	r3, #42	; 0x2a
 801907a:	d015      	beq.n	80190a8 <_vfiprintf_r+0x13c>
 801907c:	9a07      	ldr	r2, [sp, #28]
 801907e:	4654      	mov	r4, sl
 8019080:	2000      	movs	r0, #0
 8019082:	f04f 0c0a 	mov.w	ip, #10
 8019086:	4621      	mov	r1, r4
 8019088:	f811 3b01 	ldrb.w	r3, [r1], #1
 801908c:	3b30      	subs	r3, #48	; 0x30
 801908e:	2b09      	cmp	r3, #9
 8019090:	d94e      	bls.n	8019130 <_vfiprintf_r+0x1c4>
 8019092:	b1b0      	cbz	r0, 80190c2 <_vfiprintf_r+0x156>
 8019094:	9207      	str	r2, [sp, #28]
 8019096:	e014      	b.n	80190c2 <_vfiprintf_r+0x156>
 8019098:	eba0 0308 	sub.w	r3, r0, r8
 801909c:	fa09 f303 	lsl.w	r3, r9, r3
 80190a0:	4313      	orrs	r3, r2
 80190a2:	9304      	str	r3, [sp, #16]
 80190a4:	46a2      	mov	sl, r4
 80190a6:	e7d2      	b.n	801904e <_vfiprintf_r+0xe2>
 80190a8:	9b03      	ldr	r3, [sp, #12]
 80190aa:	1d19      	adds	r1, r3, #4
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	9103      	str	r1, [sp, #12]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	bfbb      	ittet	lt
 80190b4:	425b      	neglt	r3, r3
 80190b6:	f042 0202 	orrlt.w	r2, r2, #2
 80190ba:	9307      	strge	r3, [sp, #28]
 80190bc:	9307      	strlt	r3, [sp, #28]
 80190be:	bfb8      	it	lt
 80190c0:	9204      	strlt	r2, [sp, #16]
 80190c2:	7823      	ldrb	r3, [r4, #0]
 80190c4:	2b2e      	cmp	r3, #46	; 0x2e
 80190c6:	d10c      	bne.n	80190e2 <_vfiprintf_r+0x176>
 80190c8:	7863      	ldrb	r3, [r4, #1]
 80190ca:	2b2a      	cmp	r3, #42	; 0x2a
 80190cc:	d135      	bne.n	801913a <_vfiprintf_r+0x1ce>
 80190ce:	9b03      	ldr	r3, [sp, #12]
 80190d0:	1d1a      	adds	r2, r3, #4
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	9203      	str	r2, [sp, #12]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	bfb8      	it	lt
 80190da:	f04f 33ff 	movlt.w	r3, #4294967295
 80190de:	3402      	adds	r4, #2
 80190e0:	9305      	str	r3, [sp, #20]
 80190e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80191c8 <_vfiprintf_r+0x25c>
 80190e6:	7821      	ldrb	r1, [r4, #0]
 80190e8:	2203      	movs	r2, #3
 80190ea:	4650      	mov	r0, sl
 80190ec:	f7e7 f870 	bl	80001d0 <memchr>
 80190f0:	b140      	cbz	r0, 8019104 <_vfiprintf_r+0x198>
 80190f2:	2340      	movs	r3, #64	; 0x40
 80190f4:	eba0 000a 	sub.w	r0, r0, sl
 80190f8:	fa03 f000 	lsl.w	r0, r3, r0
 80190fc:	9b04      	ldr	r3, [sp, #16]
 80190fe:	4303      	orrs	r3, r0
 8019100:	3401      	adds	r4, #1
 8019102:	9304      	str	r3, [sp, #16]
 8019104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019108:	482c      	ldr	r0, [pc, #176]	; (80191bc <_vfiprintf_r+0x250>)
 801910a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801910e:	2206      	movs	r2, #6
 8019110:	f7e7 f85e 	bl	80001d0 <memchr>
 8019114:	2800      	cmp	r0, #0
 8019116:	d03f      	beq.n	8019198 <_vfiprintf_r+0x22c>
 8019118:	4b29      	ldr	r3, [pc, #164]	; (80191c0 <_vfiprintf_r+0x254>)
 801911a:	bb1b      	cbnz	r3, 8019164 <_vfiprintf_r+0x1f8>
 801911c:	9b03      	ldr	r3, [sp, #12]
 801911e:	3307      	adds	r3, #7
 8019120:	f023 0307 	bic.w	r3, r3, #7
 8019124:	3308      	adds	r3, #8
 8019126:	9303      	str	r3, [sp, #12]
 8019128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801912a:	443b      	add	r3, r7
 801912c:	9309      	str	r3, [sp, #36]	; 0x24
 801912e:	e767      	b.n	8019000 <_vfiprintf_r+0x94>
 8019130:	fb0c 3202 	mla	r2, ip, r2, r3
 8019134:	460c      	mov	r4, r1
 8019136:	2001      	movs	r0, #1
 8019138:	e7a5      	b.n	8019086 <_vfiprintf_r+0x11a>
 801913a:	2300      	movs	r3, #0
 801913c:	3401      	adds	r4, #1
 801913e:	9305      	str	r3, [sp, #20]
 8019140:	4619      	mov	r1, r3
 8019142:	f04f 0c0a 	mov.w	ip, #10
 8019146:	4620      	mov	r0, r4
 8019148:	f810 2b01 	ldrb.w	r2, [r0], #1
 801914c:	3a30      	subs	r2, #48	; 0x30
 801914e:	2a09      	cmp	r2, #9
 8019150:	d903      	bls.n	801915a <_vfiprintf_r+0x1ee>
 8019152:	2b00      	cmp	r3, #0
 8019154:	d0c5      	beq.n	80190e2 <_vfiprintf_r+0x176>
 8019156:	9105      	str	r1, [sp, #20]
 8019158:	e7c3      	b.n	80190e2 <_vfiprintf_r+0x176>
 801915a:	fb0c 2101 	mla	r1, ip, r1, r2
 801915e:	4604      	mov	r4, r0
 8019160:	2301      	movs	r3, #1
 8019162:	e7f0      	b.n	8019146 <_vfiprintf_r+0x1da>
 8019164:	ab03      	add	r3, sp, #12
 8019166:	9300      	str	r3, [sp, #0]
 8019168:	462a      	mov	r2, r5
 801916a:	4b16      	ldr	r3, [pc, #88]	; (80191c4 <_vfiprintf_r+0x258>)
 801916c:	a904      	add	r1, sp, #16
 801916e:	4630      	mov	r0, r6
 8019170:	f3af 8000 	nop.w
 8019174:	4607      	mov	r7, r0
 8019176:	1c78      	adds	r0, r7, #1
 8019178:	d1d6      	bne.n	8019128 <_vfiprintf_r+0x1bc>
 801917a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801917c:	07d9      	lsls	r1, r3, #31
 801917e:	d405      	bmi.n	801918c <_vfiprintf_r+0x220>
 8019180:	89ab      	ldrh	r3, [r5, #12]
 8019182:	059a      	lsls	r2, r3, #22
 8019184:	d402      	bmi.n	801918c <_vfiprintf_r+0x220>
 8019186:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019188:	f7e9 fdc8 	bl	8002d1c <__retarget_lock_release_recursive>
 801918c:	89ab      	ldrh	r3, [r5, #12]
 801918e:	065b      	lsls	r3, r3, #25
 8019190:	f53f af12 	bmi.w	8018fb8 <_vfiprintf_r+0x4c>
 8019194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019196:	e711      	b.n	8018fbc <_vfiprintf_r+0x50>
 8019198:	ab03      	add	r3, sp, #12
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	462a      	mov	r2, r5
 801919e:	4b09      	ldr	r3, [pc, #36]	; (80191c4 <_vfiprintf_r+0x258>)
 80191a0:	a904      	add	r1, sp, #16
 80191a2:	4630      	mov	r0, r6
 80191a4:	f000 f880 	bl	80192a8 <_printf_i>
 80191a8:	e7e4      	b.n	8019174 <_vfiprintf_r+0x208>
 80191aa:	bf00      	nop
 80191ac:	0801d050 	.word	0x0801d050
 80191b0:	0801d070 	.word	0x0801d070
 80191b4:	0801d030 	.word	0x0801d030
 80191b8:	0801d142 	.word	0x0801d142
 80191bc:	0801d14c 	.word	0x0801d14c
 80191c0:	00000000 	.word	0x00000000
 80191c4:	08018f47 	.word	0x08018f47
 80191c8:	0801d148 	.word	0x0801d148

080191cc <_printf_common>:
 80191cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191d0:	4616      	mov	r6, r2
 80191d2:	4699      	mov	r9, r3
 80191d4:	688a      	ldr	r2, [r1, #8]
 80191d6:	690b      	ldr	r3, [r1, #16]
 80191d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80191dc:	4293      	cmp	r3, r2
 80191de:	bfb8      	it	lt
 80191e0:	4613      	movlt	r3, r2
 80191e2:	6033      	str	r3, [r6, #0]
 80191e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80191e8:	4607      	mov	r7, r0
 80191ea:	460c      	mov	r4, r1
 80191ec:	b10a      	cbz	r2, 80191f2 <_printf_common+0x26>
 80191ee:	3301      	adds	r3, #1
 80191f0:	6033      	str	r3, [r6, #0]
 80191f2:	6823      	ldr	r3, [r4, #0]
 80191f4:	0699      	lsls	r1, r3, #26
 80191f6:	bf42      	ittt	mi
 80191f8:	6833      	ldrmi	r3, [r6, #0]
 80191fa:	3302      	addmi	r3, #2
 80191fc:	6033      	strmi	r3, [r6, #0]
 80191fe:	6825      	ldr	r5, [r4, #0]
 8019200:	f015 0506 	ands.w	r5, r5, #6
 8019204:	d106      	bne.n	8019214 <_printf_common+0x48>
 8019206:	f104 0a19 	add.w	sl, r4, #25
 801920a:	68e3      	ldr	r3, [r4, #12]
 801920c:	6832      	ldr	r2, [r6, #0]
 801920e:	1a9b      	subs	r3, r3, r2
 8019210:	42ab      	cmp	r3, r5
 8019212:	dc26      	bgt.n	8019262 <_printf_common+0x96>
 8019214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019218:	1e13      	subs	r3, r2, #0
 801921a:	6822      	ldr	r2, [r4, #0]
 801921c:	bf18      	it	ne
 801921e:	2301      	movne	r3, #1
 8019220:	0692      	lsls	r2, r2, #26
 8019222:	d42b      	bmi.n	801927c <_printf_common+0xb0>
 8019224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019228:	4649      	mov	r1, r9
 801922a:	4638      	mov	r0, r7
 801922c:	47c0      	blx	r8
 801922e:	3001      	adds	r0, #1
 8019230:	d01e      	beq.n	8019270 <_printf_common+0xa4>
 8019232:	6823      	ldr	r3, [r4, #0]
 8019234:	68e5      	ldr	r5, [r4, #12]
 8019236:	6832      	ldr	r2, [r6, #0]
 8019238:	f003 0306 	and.w	r3, r3, #6
 801923c:	2b04      	cmp	r3, #4
 801923e:	bf08      	it	eq
 8019240:	1aad      	subeq	r5, r5, r2
 8019242:	68a3      	ldr	r3, [r4, #8]
 8019244:	6922      	ldr	r2, [r4, #16]
 8019246:	bf0c      	ite	eq
 8019248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801924c:	2500      	movne	r5, #0
 801924e:	4293      	cmp	r3, r2
 8019250:	bfc4      	itt	gt
 8019252:	1a9b      	subgt	r3, r3, r2
 8019254:	18ed      	addgt	r5, r5, r3
 8019256:	2600      	movs	r6, #0
 8019258:	341a      	adds	r4, #26
 801925a:	42b5      	cmp	r5, r6
 801925c:	d11a      	bne.n	8019294 <_printf_common+0xc8>
 801925e:	2000      	movs	r0, #0
 8019260:	e008      	b.n	8019274 <_printf_common+0xa8>
 8019262:	2301      	movs	r3, #1
 8019264:	4652      	mov	r2, sl
 8019266:	4649      	mov	r1, r9
 8019268:	4638      	mov	r0, r7
 801926a:	47c0      	blx	r8
 801926c:	3001      	adds	r0, #1
 801926e:	d103      	bne.n	8019278 <_printf_common+0xac>
 8019270:	f04f 30ff 	mov.w	r0, #4294967295
 8019274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019278:	3501      	adds	r5, #1
 801927a:	e7c6      	b.n	801920a <_printf_common+0x3e>
 801927c:	18e1      	adds	r1, r4, r3
 801927e:	1c5a      	adds	r2, r3, #1
 8019280:	2030      	movs	r0, #48	; 0x30
 8019282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019286:	4422      	add	r2, r4
 8019288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801928c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019290:	3302      	adds	r3, #2
 8019292:	e7c7      	b.n	8019224 <_printf_common+0x58>
 8019294:	2301      	movs	r3, #1
 8019296:	4622      	mov	r2, r4
 8019298:	4649      	mov	r1, r9
 801929a:	4638      	mov	r0, r7
 801929c:	47c0      	blx	r8
 801929e:	3001      	adds	r0, #1
 80192a0:	d0e6      	beq.n	8019270 <_printf_common+0xa4>
 80192a2:	3601      	adds	r6, #1
 80192a4:	e7d9      	b.n	801925a <_printf_common+0x8e>
	...

080192a8 <_printf_i>:
 80192a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192ac:	7e0f      	ldrb	r7, [r1, #24]
 80192ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80192b0:	2f78      	cmp	r7, #120	; 0x78
 80192b2:	4691      	mov	r9, r2
 80192b4:	4680      	mov	r8, r0
 80192b6:	460c      	mov	r4, r1
 80192b8:	469a      	mov	sl, r3
 80192ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80192be:	d807      	bhi.n	80192d0 <_printf_i+0x28>
 80192c0:	2f62      	cmp	r7, #98	; 0x62
 80192c2:	d80a      	bhi.n	80192da <_printf_i+0x32>
 80192c4:	2f00      	cmp	r7, #0
 80192c6:	f000 80d8 	beq.w	801947a <_printf_i+0x1d2>
 80192ca:	2f58      	cmp	r7, #88	; 0x58
 80192cc:	f000 80a3 	beq.w	8019416 <_printf_i+0x16e>
 80192d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80192d8:	e03a      	b.n	8019350 <_printf_i+0xa8>
 80192da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80192de:	2b15      	cmp	r3, #21
 80192e0:	d8f6      	bhi.n	80192d0 <_printf_i+0x28>
 80192e2:	a101      	add	r1, pc, #4	; (adr r1, 80192e8 <_printf_i+0x40>)
 80192e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80192e8:	08019341 	.word	0x08019341
 80192ec:	08019355 	.word	0x08019355
 80192f0:	080192d1 	.word	0x080192d1
 80192f4:	080192d1 	.word	0x080192d1
 80192f8:	080192d1 	.word	0x080192d1
 80192fc:	080192d1 	.word	0x080192d1
 8019300:	08019355 	.word	0x08019355
 8019304:	080192d1 	.word	0x080192d1
 8019308:	080192d1 	.word	0x080192d1
 801930c:	080192d1 	.word	0x080192d1
 8019310:	080192d1 	.word	0x080192d1
 8019314:	08019461 	.word	0x08019461
 8019318:	08019385 	.word	0x08019385
 801931c:	08019443 	.word	0x08019443
 8019320:	080192d1 	.word	0x080192d1
 8019324:	080192d1 	.word	0x080192d1
 8019328:	08019483 	.word	0x08019483
 801932c:	080192d1 	.word	0x080192d1
 8019330:	08019385 	.word	0x08019385
 8019334:	080192d1 	.word	0x080192d1
 8019338:	080192d1 	.word	0x080192d1
 801933c:	0801944b 	.word	0x0801944b
 8019340:	682b      	ldr	r3, [r5, #0]
 8019342:	1d1a      	adds	r2, r3, #4
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	602a      	str	r2, [r5, #0]
 8019348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801934c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019350:	2301      	movs	r3, #1
 8019352:	e0a3      	b.n	801949c <_printf_i+0x1f4>
 8019354:	6820      	ldr	r0, [r4, #0]
 8019356:	6829      	ldr	r1, [r5, #0]
 8019358:	0606      	lsls	r6, r0, #24
 801935a:	f101 0304 	add.w	r3, r1, #4
 801935e:	d50a      	bpl.n	8019376 <_printf_i+0xce>
 8019360:	680e      	ldr	r6, [r1, #0]
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	2e00      	cmp	r6, #0
 8019366:	da03      	bge.n	8019370 <_printf_i+0xc8>
 8019368:	232d      	movs	r3, #45	; 0x2d
 801936a:	4276      	negs	r6, r6
 801936c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019370:	485e      	ldr	r0, [pc, #376]	; (80194ec <_printf_i+0x244>)
 8019372:	230a      	movs	r3, #10
 8019374:	e019      	b.n	80193aa <_printf_i+0x102>
 8019376:	680e      	ldr	r6, [r1, #0]
 8019378:	602b      	str	r3, [r5, #0]
 801937a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801937e:	bf18      	it	ne
 8019380:	b236      	sxthne	r6, r6
 8019382:	e7ef      	b.n	8019364 <_printf_i+0xbc>
 8019384:	682b      	ldr	r3, [r5, #0]
 8019386:	6820      	ldr	r0, [r4, #0]
 8019388:	1d19      	adds	r1, r3, #4
 801938a:	6029      	str	r1, [r5, #0]
 801938c:	0601      	lsls	r1, r0, #24
 801938e:	d501      	bpl.n	8019394 <_printf_i+0xec>
 8019390:	681e      	ldr	r6, [r3, #0]
 8019392:	e002      	b.n	801939a <_printf_i+0xf2>
 8019394:	0646      	lsls	r6, r0, #25
 8019396:	d5fb      	bpl.n	8019390 <_printf_i+0xe8>
 8019398:	881e      	ldrh	r6, [r3, #0]
 801939a:	4854      	ldr	r0, [pc, #336]	; (80194ec <_printf_i+0x244>)
 801939c:	2f6f      	cmp	r7, #111	; 0x6f
 801939e:	bf0c      	ite	eq
 80193a0:	2308      	moveq	r3, #8
 80193a2:	230a      	movne	r3, #10
 80193a4:	2100      	movs	r1, #0
 80193a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80193aa:	6865      	ldr	r5, [r4, #4]
 80193ac:	60a5      	str	r5, [r4, #8]
 80193ae:	2d00      	cmp	r5, #0
 80193b0:	bfa2      	ittt	ge
 80193b2:	6821      	ldrge	r1, [r4, #0]
 80193b4:	f021 0104 	bicge.w	r1, r1, #4
 80193b8:	6021      	strge	r1, [r4, #0]
 80193ba:	b90e      	cbnz	r6, 80193c0 <_printf_i+0x118>
 80193bc:	2d00      	cmp	r5, #0
 80193be:	d04d      	beq.n	801945c <_printf_i+0x1b4>
 80193c0:	4615      	mov	r5, r2
 80193c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80193c6:	fb03 6711 	mls	r7, r3, r1, r6
 80193ca:	5dc7      	ldrb	r7, [r0, r7]
 80193cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80193d0:	4637      	mov	r7, r6
 80193d2:	42bb      	cmp	r3, r7
 80193d4:	460e      	mov	r6, r1
 80193d6:	d9f4      	bls.n	80193c2 <_printf_i+0x11a>
 80193d8:	2b08      	cmp	r3, #8
 80193da:	d10b      	bne.n	80193f4 <_printf_i+0x14c>
 80193dc:	6823      	ldr	r3, [r4, #0]
 80193de:	07de      	lsls	r6, r3, #31
 80193e0:	d508      	bpl.n	80193f4 <_printf_i+0x14c>
 80193e2:	6923      	ldr	r3, [r4, #16]
 80193e4:	6861      	ldr	r1, [r4, #4]
 80193e6:	4299      	cmp	r1, r3
 80193e8:	bfde      	ittt	le
 80193ea:	2330      	movle	r3, #48	; 0x30
 80193ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80193f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80193f4:	1b52      	subs	r2, r2, r5
 80193f6:	6122      	str	r2, [r4, #16]
 80193f8:	f8cd a000 	str.w	sl, [sp]
 80193fc:	464b      	mov	r3, r9
 80193fe:	aa03      	add	r2, sp, #12
 8019400:	4621      	mov	r1, r4
 8019402:	4640      	mov	r0, r8
 8019404:	f7ff fee2 	bl	80191cc <_printf_common>
 8019408:	3001      	adds	r0, #1
 801940a:	d14c      	bne.n	80194a6 <_printf_i+0x1fe>
 801940c:	f04f 30ff 	mov.w	r0, #4294967295
 8019410:	b004      	add	sp, #16
 8019412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019416:	4835      	ldr	r0, [pc, #212]	; (80194ec <_printf_i+0x244>)
 8019418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801941c:	6829      	ldr	r1, [r5, #0]
 801941e:	6823      	ldr	r3, [r4, #0]
 8019420:	f851 6b04 	ldr.w	r6, [r1], #4
 8019424:	6029      	str	r1, [r5, #0]
 8019426:	061d      	lsls	r5, r3, #24
 8019428:	d514      	bpl.n	8019454 <_printf_i+0x1ac>
 801942a:	07df      	lsls	r7, r3, #31
 801942c:	bf44      	itt	mi
 801942e:	f043 0320 	orrmi.w	r3, r3, #32
 8019432:	6023      	strmi	r3, [r4, #0]
 8019434:	b91e      	cbnz	r6, 801943e <_printf_i+0x196>
 8019436:	6823      	ldr	r3, [r4, #0]
 8019438:	f023 0320 	bic.w	r3, r3, #32
 801943c:	6023      	str	r3, [r4, #0]
 801943e:	2310      	movs	r3, #16
 8019440:	e7b0      	b.n	80193a4 <_printf_i+0xfc>
 8019442:	6823      	ldr	r3, [r4, #0]
 8019444:	f043 0320 	orr.w	r3, r3, #32
 8019448:	6023      	str	r3, [r4, #0]
 801944a:	2378      	movs	r3, #120	; 0x78
 801944c:	4828      	ldr	r0, [pc, #160]	; (80194f0 <_printf_i+0x248>)
 801944e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019452:	e7e3      	b.n	801941c <_printf_i+0x174>
 8019454:	0659      	lsls	r1, r3, #25
 8019456:	bf48      	it	mi
 8019458:	b2b6      	uxthmi	r6, r6
 801945a:	e7e6      	b.n	801942a <_printf_i+0x182>
 801945c:	4615      	mov	r5, r2
 801945e:	e7bb      	b.n	80193d8 <_printf_i+0x130>
 8019460:	682b      	ldr	r3, [r5, #0]
 8019462:	6826      	ldr	r6, [r4, #0]
 8019464:	6961      	ldr	r1, [r4, #20]
 8019466:	1d18      	adds	r0, r3, #4
 8019468:	6028      	str	r0, [r5, #0]
 801946a:	0635      	lsls	r5, r6, #24
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	d501      	bpl.n	8019474 <_printf_i+0x1cc>
 8019470:	6019      	str	r1, [r3, #0]
 8019472:	e002      	b.n	801947a <_printf_i+0x1d2>
 8019474:	0670      	lsls	r0, r6, #25
 8019476:	d5fb      	bpl.n	8019470 <_printf_i+0x1c8>
 8019478:	8019      	strh	r1, [r3, #0]
 801947a:	2300      	movs	r3, #0
 801947c:	6123      	str	r3, [r4, #16]
 801947e:	4615      	mov	r5, r2
 8019480:	e7ba      	b.n	80193f8 <_printf_i+0x150>
 8019482:	682b      	ldr	r3, [r5, #0]
 8019484:	1d1a      	adds	r2, r3, #4
 8019486:	602a      	str	r2, [r5, #0]
 8019488:	681d      	ldr	r5, [r3, #0]
 801948a:	6862      	ldr	r2, [r4, #4]
 801948c:	2100      	movs	r1, #0
 801948e:	4628      	mov	r0, r5
 8019490:	f7e6 fe9e 	bl	80001d0 <memchr>
 8019494:	b108      	cbz	r0, 801949a <_printf_i+0x1f2>
 8019496:	1b40      	subs	r0, r0, r5
 8019498:	6060      	str	r0, [r4, #4]
 801949a:	6863      	ldr	r3, [r4, #4]
 801949c:	6123      	str	r3, [r4, #16]
 801949e:	2300      	movs	r3, #0
 80194a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194a4:	e7a8      	b.n	80193f8 <_printf_i+0x150>
 80194a6:	6923      	ldr	r3, [r4, #16]
 80194a8:	462a      	mov	r2, r5
 80194aa:	4649      	mov	r1, r9
 80194ac:	4640      	mov	r0, r8
 80194ae:	47d0      	blx	sl
 80194b0:	3001      	adds	r0, #1
 80194b2:	d0ab      	beq.n	801940c <_printf_i+0x164>
 80194b4:	6823      	ldr	r3, [r4, #0]
 80194b6:	079b      	lsls	r3, r3, #30
 80194b8:	d413      	bmi.n	80194e2 <_printf_i+0x23a>
 80194ba:	68e0      	ldr	r0, [r4, #12]
 80194bc:	9b03      	ldr	r3, [sp, #12]
 80194be:	4298      	cmp	r0, r3
 80194c0:	bfb8      	it	lt
 80194c2:	4618      	movlt	r0, r3
 80194c4:	e7a4      	b.n	8019410 <_printf_i+0x168>
 80194c6:	2301      	movs	r3, #1
 80194c8:	4632      	mov	r2, r6
 80194ca:	4649      	mov	r1, r9
 80194cc:	4640      	mov	r0, r8
 80194ce:	47d0      	blx	sl
 80194d0:	3001      	adds	r0, #1
 80194d2:	d09b      	beq.n	801940c <_printf_i+0x164>
 80194d4:	3501      	adds	r5, #1
 80194d6:	68e3      	ldr	r3, [r4, #12]
 80194d8:	9903      	ldr	r1, [sp, #12]
 80194da:	1a5b      	subs	r3, r3, r1
 80194dc:	42ab      	cmp	r3, r5
 80194de:	dcf2      	bgt.n	80194c6 <_printf_i+0x21e>
 80194e0:	e7eb      	b.n	80194ba <_printf_i+0x212>
 80194e2:	2500      	movs	r5, #0
 80194e4:	f104 0619 	add.w	r6, r4, #25
 80194e8:	e7f5      	b.n	80194d6 <_printf_i+0x22e>
 80194ea:	bf00      	nop
 80194ec:	0801d153 	.word	0x0801d153
 80194f0:	0801d164 	.word	0x0801d164

080194f4 <_read_r>:
 80194f4:	b538      	push	{r3, r4, r5, lr}
 80194f6:	4d07      	ldr	r5, [pc, #28]	; (8019514 <_read_r+0x20>)
 80194f8:	4604      	mov	r4, r0
 80194fa:	4608      	mov	r0, r1
 80194fc:	4611      	mov	r1, r2
 80194fe:	2200      	movs	r2, #0
 8019500:	602a      	str	r2, [r5, #0]
 8019502:	461a      	mov	r2, r3
 8019504:	f7e9 f93a 	bl	800277c <_read>
 8019508:	1c43      	adds	r3, r0, #1
 801950a:	d102      	bne.n	8019512 <_read_r+0x1e>
 801950c:	682b      	ldr	r3, [r5, #0]
 801950e:	b103      	cbz	r3, 8019512 <_read_r+0x1e>
 8019510:	6023      	str	r3, [r4, #0]
 8019512:	bd38      	pop	{r3, r4, r5, pc}
 8019514:	2000da30 	.word	0x2000da30

08019518 <__swbuf_r>:
 8019518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801951a:	460e      	mov	r6, r1
 801951c:	4614      	mov	r4, r2
 801951e:	4605      	mov	r5, r0
 8019520:	b118      	cbz	r0, 801952a <__swbuf_r+0x12>
 8019522:	6983      	ldr	r3, [r0, #24]
 8019524:	b90b      	cbnz	r3, 801952a <__swbuf_r+0x12>
 8019526:	f7fe ff4b 	bl	80183c0 <__sinit>
 801952a:	4b21      	ldr	r3, [pc, #132]	; (80195b0 <__swbuf_r+0x98>)
 801952c:	429c      	cmp	r4, r3
 801952e:	d12b      	bne.n	8019588 <__swbuf_r+0x70>
 8019530:	686c      	ldr	r4, [r5, #4]
 8019532:	69a3      	ldr	r3, [r4, #24]
 8019534:	60a3      	str	r3, [r4, #8]
 8019536:	89a3      	ldrh	r3, [r4, #12]
 8019538:	071a      	lsls	r2, r3, #28
 801953a:	d52f      	bpl.n	801959c <__swbuf_r+0x84>
 801953c:	6923      	ldr	r3, [r4, #16]
 801953e:	b36b      	cbz	r3, 801959c <__swbuf_r+0x84>
 8019540:	6923      	ldr	r3, [r4, #16]
 8019542:	6820      	ldr	r0, [r4, #0]
 8019544:	1ac0      	subs	r0, r0, r3
 8019546:	6963      	ldr	r3, [r4, #20]
 8019548:	b2f6      	uxtb	r6, r6
 801954a:	4283      	cmp	r3, r0
 801954c:	4637      	mov	r7, r6
 801954e:	dc04      	bgt.n	801955a <__swbuf_r+0x42>
 8019550:	4621      	mov	r1, r4
 8019552:	4628      	mov	r0, r5
 8019554:	f7ff fb18 	bl	8018b88 <_fflush_r>
 8019558:	bb30      	cbnz	r0, 80195a8 <__swbuf_r+0x90>
 801955a:	68a3      	ldr	r3, [r4, #8]
 801955c:	3b01      	subs	r3, #1
 801955e:	60a3      	str	r3, [r4, #8]
 8019560:	6823      	ldr	r3, [r4, #0]
 8019562:	1c5a      	adds	r2, r3, #1
 8019564:	6022      	str	r2, [r4, #0]
 8019566:	701e      	strb	r6, [r3, #0]
 8019568:	6963      	ldr	r3, [r4, #20]
 801956a:	3001      	adds	r0, #1
 801956c:	4283      	cmp	r3, r0
 801956e:	d004      	beq.n	801957a <__swbuf_r+0x62>
 8019570:	89a3      	ldrh	r3, [r4, #12]
 8019572:	07db      	lsls	r3, r3, #31
 8019574:	d506      	bpl.n	8019584 <__swbuf_r+0x6c>
 8019576:	2e0a      	cmp	r6, #10
 8019578:	d104      	bne.n	8019584 <__swbuf_r+0x6c>
 801957a:	4621      	mov	r1, r4
 801957c:	4628      	mov	r0, r5
 801957e:	f7ff fb03 	bl	8018b88 <_fflush_r>
 8019582:	b988      	cbnz	r0, 80195a8 <__swbuf_r+0x90>
 8019584:	4638      	mov	r0, r7
 8019586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019588:	4b0a      	ldr	r3, [pc, #40]	; (80195b4 <__swbuf_r+0x9c>)
 801958a:	429c      	cmp	r4, r3
 801958c:	d101      	bne.n	8019592 <__swbuf_r+0x7a>
 801958e:	68ac      	ldr	r4, [r5, #8]
 8019590:	e7cf      	b.n	8019532 <__swbuf_r+0x1a>
 8019592:	4b09      	ldr	r3, [pc, #36]	; (80195b8 <__swbuf_r+0xa0>)
 8019594:	429c      	cmp	r4, r3
 8019596:	bf08      	it	eq
 8019598:	68ec      	ldreq	r4, [r5, #12]
 801959a:	e7ca      	b.n	8019532 <__swbuf_r+0x1a>
 801959c:	4621      	mov	r1, r4
 801959e:	4628      	mov	r0, r5
 80195a0:	f000 f80c 	bl	80195bc <__swsetup_r>
 80195a4:	2800      	cmp	r0, #0
 80195a6:	d0cb      	beq.n	8019540 <__swbuf_r+0x28>
 80195a8:	f04f 37ff 	mov.w	r7, #4294967295
 80195ac:	e7ea      	b.n	8019584 <__swbuf_r+0x6c>
 80195ae:	bf00      	nop
 80195b0:	0801d050 	.word	0x0801d050
 80195b4:	0801d070 	.word	0x0801d070
 80195b8:	0801d030 	.word	0x0801d030

080195bc <__swsetup_r>:
 80195bc:	4b32      	ldr	r3, [pc, #200]	; (8019688 <__swsetup_r+0xcc>)
 80195be:	b570      	push	{r4, r5, r6, lr}
 80195c0:	681d      	ldr	r5, [r3, #0]
 80195c2:	4606      	mov	r6, r0
 80195c4:	460c      	mov	r4, r1
 80195c6:	b125      	cbz	r5, 80195d2 <__swsetup_r+0x16>
 80195c8:	69ab      	ldr	r3, [r5, #24]
 80195ca:	b913      	cbnz	r3, 80195d2 <__swsetup_r+0x16>
 80195cc:	4628      	mov	r0, r5
 80195ce:	f7fe fef7 	bl	80183c0 <__sinit>
 80195d2:	4b2e      	ldr	r3, [pc, #184]	; (801968c <__swsetup_r+0xd0>)
 80195d4:	429c      	cmp	r4, r3
 80195d6:	d10f      	bne.n	80195f8 <__swsetup_r+0x3c>
 80195d8:	686c      	ldr	r4, [r5, #4]
 80195da:	89a3      	ldrh	r3, [r4, #12]
 80195dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80195e0:	0719      	lsls	r1, r3, #28
 80195e2:	d42c      	bmi.n	801963e <__swsetup_r+0x82>
 80195e4:	06dd      	lsls	r5, r3, #27
 80195e6:	d411      	bmi.n	801960c <__swsetup_r+0x50>
 80195e8:	2309      	movs	r3, #9
 80195ea:	6033      	str	r3, [r6, #0]
 80195ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80195f0:	81a3      	strh	r3, [r4, #12]
 80195f2:	f04f 30ff 	mov.w	r0, #4294967295
 80195f6:	e03e      	b.n	8019676 <__swsetup_r+0xba>
 80195f8:	4b25      	ldr	r3, [pc, #148]	; (8019690 <__swsetup_r+0xd4>)
 80195fa:	429c      	cmp	r4, r3
 80195fc:	d101      	bne.n	8019602 <__swsetup_r+0x46>
 80195fe:	68ac      	ldr	r4, [r5, #8]
 8019600:	e7eb      	b.n	80195da <__swsetup_r+0x1e>
 8019602:	4b24      	ldr	r3, [pc, #144]	; (8019694 <__swsetup_r+0xd8>)
 8019604:	429c      	cmp	r4, r3
 8019606:	bf08      	it	eq
 8019608:	68ec      	ldreq	r4, [r5, #12]
 801960a:	e7e6      	b.n	80195da <__swsetup_r+0x1e>
 801960c:	0758      	lsls	r0, r3, #29
 801960e:	d512      	bpl.n	8019636 <__swsetup_r+0x7a>
 8019610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019612:	b141      	cbz	r1, 8019626 <__swsetup_r+0x6a>
 8019614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019618:	4299      	cmp	r1, r3
 801961a:	d002      	beq.n	8019622 <__swsetup_r+0x66>
 801961c:	4630      	mov	r0, r6
 801961e:	f7fe ffd9 	bl	80185d4 <_free_r>
 8019622:	2300      	movs	r3, #0
 8019624:	6363      	str	r3, [r4, #52]	; 0x34
 8019626:	89a3      	ldrh	r3, [r4, #12]
 8019628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801962c:	81a3      	strh	r3, [r4, #12]
 801962e:	2300      	movs	r3, #0
 8019630:	6063      	str	r3, [r4, #4]
 8019632:	6923      	ldr	r3, [r4, #16]
 8019634:	6023      	str	r3, [r4, #0]
 8019636:	89a3      	ldrh	r3, [r4, #12]
 8019638:	f043 0308 	orr.w	r3, r3, #8
 801963c:	81a3      	strh	r3, [r4, #12]
 801963e:	6923      	ldr	r3, [r4, #16]
 8019640:	b94b      	cbnz	r3, 8019656 <__swsetup_r+0x9a>
 8019642:	89a3      	ldrh	r3, [r4, #12]
 8019644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801964c:	d003      	beq.n	8019656 <__swsetup_r+0x9a>
 801964e:	4621      	mov	r1, r4
 8019650:	4630      	mov	r0, r6
 8019652:	f000 f84d 	bl	80196f0 <__smakebuf_r>
 8019656:	89a0      	ldrh	r0, [r4, #12]
 8019658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801965c:	f010 0301 	ands.w	r3, r0, #1
 8019660:	d00a      	beq.n	8019678 <__swsetup_r+0xbc>
 8019662:	2300      	movs	r3, #0
 8019664:	60a3      	str	r3, [r4, #8]
 8019666:	6963      	ldr	r3, [r4, #20]
 8019668:	425b      	negs	r3, r3
 801966a:	61a3      	str	r3, [r4, #24]
 801966c:	6923      	ldr	r3, [r4, #16]
 801966e:	b943      	cbnz	r3, 8019682 <__swsetup_r+0xc6>
 8019670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019674:	d1ba      	bne.n	80195ec <__swsetup_r+0x30>
 8019676:	bd70      	pop	{r4, r5, r6, pc}
 8019678:	0781      	lsls	r1, r0, #30
 801967a:	bf58      	it	pl
 801967c:	6963      	ldrpl	r3, [r4, #20]
 801967e:	60a3      	str	r3, [r4, #8]
 8019680:	e7f4      	b.n	801966c <__swsetup_r+0xb0>
 8019682:	2000      	movs	r0, #0
 8019684:	e7f7      	b.n	8019676 <__swsetup_r+0xba>
 8019686:	bf00      	nop
 8019688:	200000b0 	.word	0x200000b0
 801968c:	0801d050 	.word	0x0801d050
 8019690:	0801d070 	.word	0x0801d070
 8019694:	0801d030 	.word	0x0801d030

08019698 <abort>:
 8019698:	b508      	push	{r3, lr}
 801969a:	2006      	movs	r0, #6
 801969c:	f000 f8c0 	bl	8019820 <raise>
 80196a0:	2001      	movs	r0, #1
 80196a2:	f7e9 f861 	bl	8002768 <_exit>

080196a6 <__swhatbuf_r>:
 80196a6:	b570      	push	{r4, r5, r6, lr}
 80196a8:	460e      	mov	r6, r1
 80196aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196ae:	2900      	cmp	r1, #0
 80196b0:	b096      	sub	sp, #88	; 0x58
 80196b2:	4614      	mov	r4, r2
 80196b4:	461d      	mov	r5, r3
 80196b6:	da08      	bge.n	80196ca <__swhatbuf_r+0x24>
 80196b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80196bc:	2200      	movs	r2, #0
 80196be:	602a      	str	r2, [r5, #0]
 80196c0:	061a      	lsls	r2, r3, #24
 80196c2:	d410      	bmi.n	80196e6 <__swhatbuf_r+0x40>
 80196c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80196c8:	e00e      	b.n	80196e8 <__swhatbuf_r+0x42>
 80196ca:	466a      	mov	r2, sp
 80196cc:	f000 f8c4 	bl	8019858 <_fstat_r>
 80196d0:	2800      	cmp	r0, #0
 80196d2:	dbf1      	blt.n	80196b8 <__swhatbuf_r+0x12>
 80196d4:	9a01      	ldr	r2, [sp, #4]
 80196d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80196da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80196de:	425a      	negs	r2, r3
 80196e0:	415a      	adcs	r2, r3
 80196e2:	602a      	str	r2, [r5, #0]
 80196e4:	e7ee      	b.n	80196c4 <__swhatbuf_r+0x1e>
 80196e6:	2340      	movs	r3, #64	; 0x40
 80196e8:	2000      	movs	r0, #0
 80196ea:	6023      	str	r3, [r4, #0]
 80196ec:	b016      	add	sp, #88	; 0x58
 80196ee:	bd70      	pop	{r4, r5, r6, pc}

080196f0 <__smakebuf_r>:
 80196f0:	898b      	ldrh	r3, [r1, #12]
 80196f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80196f4:	079d      	lsls	r5, r3, #30
 80196f6:	4606      	mov	r6, r0
 80196f8:	460c      	mov	r4, r1
 80196fa:	d507      	bpl.n	801970c <__smakebuf_r+0x1c>
 80196fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019700:	6023      	str	r3, [r4, #0]
 8019702:	6123      	str	r3, [r4, #16]
 8019704:	2301      	movs	r3, #1
 8019706:	6163      	str	r3, [r4, #20]
 8019708:	b002      	add	sp, #8
 801970a:	bd70      	pop	{r4, r5, r6, pc}
 801970c:	ab01      	add	r3, sp, #4
 801970e:	466a      	mov	r2, sp
 8019710:	f7ff ffc9 	bl	80196a6 <__swhatbuf_r>
 8019714:	9900      	ldr	r1, [sp, #0]
 8019716:	4605      	mov	r5, r0
 8019718:	4630      	mov	r0, r6
 801971a:	f7fe ffc7 	bl	80186ac <_malloc_r>
 801971e:	b948      	cbnz	r0, 8019734 <__smakebuf_r+0x44>
 8019720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019724:	059a      	lsls	r2, r3, #22
 8019726:	d4ef      	bmi.n	8019708 <__smakebuf_r+0x18>
 8019728:	f023 0303 	bic.w	r3, r3, #3
 801972c:	f043 0302 	orr.w	r3, r3, #2
 8019730:	81a3      	strh	r3, [r4, #12]
 8019732:	e7e3      	b.n	80196fc <__smakebuf_r+0xc>
 8019734:	4b0d      	ldr	r3, [pc, #52]	; (801976c <__smakebuf_r+0x7c>)
 8019736:	62b3      	str	r3, [r6, #40]	; 0x28
 8019738:	89a3      	ldrh	r3, [r4, #12]
 801973a:	6020      	str	r0, [r4, #0]
 801973c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019740:	81a3      	strh	r3, [r4, #12]
 8019742:	9b00      	ldr	r3, [sp, #0]
 8019744:	6163      	str	r3, [r4, #20]
 8019746:	9b01      	ldr	r3, [sp, #4]
 8019748:	6120      	str	r0, [r4, #16]
 801974a:	b15b      	cbz	r3, 8019764 <__smakebuf_r+0x74>
 801974c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019750:	4630      	mov	r0, r6
 8019752:	f000 f893 	bl	801987c <_isatty_r>
 8019756:	b128      	cbz	r0, 8019764 <__smakebuf_r+0x74>
 8019758:	89a3      	ldrh	r3, [r4, #12]
 801975a:	f023 0303 	bic.w	r3, r3, #3
 801975e:	f043 0301 	orr.w	r3, r3, #1
 8019762:	81a3      	strh	r3, [r4, #12]
 8019764:	89a0      	ldrh	r0, [r4, #12]
 8019766:	4305      	orrs	r5, r0
 8019768:	81a5      	strh	r5, [r4, #12]
 801976a:	e7cd      	b.n	8019708 <__smakebuf_r+0x18>
 801976c:	08018359 	.word	0x08018359

08019770 <_realloc_r>:
 8019770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019774:	4680      	mov	r8, r0
 8019776:	4614      	mov	r4, r2
 8019778:	460e      	mov	r6, r1
 801977a:	b921      	cbnz	r1, 8019786 <_realloc_r+0x16>
 801977c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019780:	4611      	mov	r1, r2
 8019782:	f7fe bf93 	b.w	80186ac <_malloc_r>
 8019786:	b92a      	cbnz	r2, 8019794 <_realloc_r+0x24>
 8019788:	f7fe ff24 	bl	80185d4 <_free_r>
 801978c:	4625      	mov	r5, r4
 801978e:	4628      	mov	r0, r5
 8019790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019794:	f000 f882 	bl	801989c <_malloc_usable_size_r>
 8019798:	4284      	cmp	r4, r0
 801979a:	4607      	mov	r7, r0
 801979c:	d802      	bhi.n	80197a4 <_realloc_r+0x34>
 801979e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80197a2:	d812      	bhi.n	80197ca <_realloc_r+0x5a>
 80197a4:	4621      	mov	r1, r4
 80197a6:	4640      	mov	r0, r8
 80197a8:	f7fe ff80 	bl	80186ac <_malloc_r>
 80197ac:	4605      	mov	r5, r0
 80197ae:	2800      	cmp	r0, #0
 80197b0:	d0ed      	beq.n	801978e <_realloc_r+0x1e>
 80197b2:	42bc      	cmp	r4, r7
 80197b4:	4622      	mov	r2, r4
 80197b6:	4631      	mov	r1, r6
 80197b8:	bf28      	it	cs
 80197ba:	463a      	movcs	r2, r7
 80197bc:	f7fe feda 	bl	8018574 <memcpy>
 80197c0:	4631      	mov	r1, r6
 80197c2:	4640      	mov	r0, r8
 80197c4:	f7fe ff06 	bl	80185d4 <_free_r>
 80197c8:	e7e1      	b.n	801978e <_realloc_r+0x1e>
 80197ca:	4635      	mov	r5, r6
 80197cc:	e7df      	b.n	801978e <_realloc_r+0x1e>

080197ce <_raise_r>:
 80197ce:	291f      	cmp	r1, #31
 80197d0:	b538      	push	{r3, r4, r5, lr}
 80197d2:	4604      	mov	r4, r0
 80197d4:	460d      	mov	r5, r1
 80197d6:	d904      	bls.n	80197e2 <_raise_r+0x14>
 80197d8:	2316      	movs	r3, #22
 80197da:	6003      	str	r3, [r0, #0]
 80197dc:	f04f 30ff 	mov.w	r0, #4294967295
 80197e0:	bd38      	pop	{r3, r4, r5, pc}
 80197e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80197e4:	b112      	cbz	r2, 80197ec <_raise_r+0x1e>
 80197e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80197ea:	b94b      	cbnz	r3, 8019800 <_raise_r+0x32>
 80197ec:	4620      	mov	r0, r4
 80197ee:	f000 f831 	bl	8019854 <_getpid_r>
 80197f2:	462a      	mov	r2, r5
 80197f4:	4601      	mov	r1, r0
 80197f6:	4620      	mov	r0, r4
 80197f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80197fc:	f000 b818 	b.w	8019830 <_kill_r>
 8019800:	2b01      	cmp	r3, #1
 8019802:	d00a      	beq.n	801981a <_raise_r+0x4c>
 8019804:	1c59      	adds	r1, r3, #1
 8019806:	d103      	bne.n	8019810 <_raise_r+0x42>
 8019808:	2316      	movs	r3, #22
 801980a:	6003      	str	r3, [r0, #0]
 801980c:	2001      	movs	r0, #1
 801980e:	e7e7      	b.n	80197e0 <_raise_r+0x12>
 8019810:	2400      	movs	r4, #0
 8019812:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019816:	4628      	mov	r0, r5
 8019818:	4798      	blx	r3
 801981a:	2000      	movs	r0, #0
 801981c:	e7e0      	b.n	80197e0 <_raise_r+0x12>
	...

08019820 <raise>:
 8019820:	4b02      	ldr	r3, [pc, #8]	; (801982c <raise+0xc>)
 8019822:	4601      	mov	r1, r0
 8019824:	6818      	ldr	r0, [r3, #0]
 8019826:	f7ff bfd2 	b.w	80197ce <_raise_r>
 801982a:	bf00      	nop
 801982c:	200000b0 	.word	0x200000b0

08019830 <_kill_r>:
 8019830:	b538      	push	{r3, r4, r5, lr}
 8019832:	4d07      	ldr	r5, [pc, #28]	; (8019850 <_kill_r+0x20>)
 8019834:	2300      	movs	r3, #0
 8019836:	4604      	mov	r4, r0
 8019838:	4608      	mov	r0, r1
 801983a:	4611      	mov	r1, r2
 801983c:	602b      	str	r3, [r5, #0]
 801983e:	f7e8 ff81 	bl	8002744 <_kill>
 8019842:	1c43      	adds	r3, r0, #1
 8019844:	d102      	bne.n	801984c <_kill_r+0x1c>
 8019846:	682b      	ldr	r3, [r5, #0]
 8019848:	b103      	cbz	r3, 801984c <_kill_r+0x1c>
 801984a:	6023      	str	r3, [r4, #0]
 801984c:	bd38      	pop	{r3, r4, r5, pc}
 801984e:	bf00      	nop
 8019850:	2000da30 	.word	0x2000da30

08019854 <_getpid_r>:
 8019854:	f7e8 bf6e 	b.w	8002734 <_getpid>

08019858 <_fstat_r>:
 8019858:	b538      	push	{r3, r4, r5, lr}
 801985a:	4d07      	ldr	r5, [pc, #28]	; (8019878 <_fstat_r+0x20>)
 801985c:	2300      	movs	r3, #0
 801985e:	4604      	mov	r4, r0
 8019860:	4608      	mov	r0, r1
 8019862:	4611      	mov	r1, r2
 8019864:	602b      	str	r3, [r5, #0]
 8019866:	f7e8 ffce 	bl	8002806 <_fstat>
 801986a:	1c43      	adds	r3, r0, #1
 801986c:	d102      	bne.n	8019874 <_fstat_r+0x1c>
 801986e:	682b      	ldr	r3, [r5, #0]
 8019870:	b103      	cbz	r3, 8019874 <_fstat_r+0x1c>
 8019872:	6023      	str	r3, [r4, #0]
 8019874:	bd38      	pop	{r3, r4, r5, pc}
 8019876:	bf00      	nop
 8019878:	2000da30 	.word	0x2000da30

0801987c <_isatty_r>:
 801987c:	b538      	push	{r3, r4, r5, lr}
 801987e:	4d06      	ldr	r5, [pc, #24]	; (8019898 <_isatty_r+0x1c>)
 8019880:	2300      	movs	r3, #0
 8019882:	4604      	mov	r4, r0
 8019884:	4608      	mov	r0, r1
 8019886:	602b      	str	r3, [r5, #0]
 8019888:	f7e8 ffcd 	bl	8002826 <_isatty>
 801988c:	1c43      	adds	r3, r0, #1
 801988e:	d102      	bne.n	8019896 <_isatty_r+0x1a>
 8019890:	682b      	ldr	r3, [r5, #0]
 8019892:	b103      	cbz	r3, 8019896 <_isatty_r+0x1a>
 8019894:	6023      	str	r3, [r4, #0]
 8019896:	bd38      	pop	{r3, r4, r5, pc}
 8019898:	2000da30 	.word	0x2000da30

0801989c <_malloc_usable_size_r>:
 801989c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198a0:	1f18      	subs	r0, r3, #4
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	bfbc      	itt	lt
 80198a6:	580b      	ldrlt	r3, [r1, r0]
 80198a8:	18c0      	addlt	r0, r0, r3
 80198aa:	4770      	bx	lr

080198ac <_init>:
 80198ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ae:	bf00      	nop
 80198b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198b2:	bc08      	pop	{r3}
 80198b4:	469e      	mov	lr, r3
 80198b6:	4770      	bx	lr

080198b8 <_fini>:
 80198b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ba:	bf00      	nop
 80198bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198be:	bc08      	pop	{r3}
 80198c0:	469e      	mov	lr, r3
 80198c2:	4770      	bx	lr
