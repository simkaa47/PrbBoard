
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000232b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040a0  08023448  08023448  00033448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080274e8  080274e8  0004058c  2**0
                  CONTENTS
  4 .ARM          00000008  080274e8  080274e8  000374e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080274f0  080274f0  0004058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080274f0  080274f0  000374f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080274f4  080274f4  000374f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000058c  20000000  080274f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004058c  2**0
                  CONTENTS
 10 .bss          0000dc08  2000058c  2000058c  0004058c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000e194  2000e194  0004058c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004058c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a624  00000000  00000000  000405bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ac4e  00000000  00000000  0009abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029e8  00000000  00000000  000a5830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027e0  00000000  00000000  000a8218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000380eb  00000000  00000000  000aa9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045633  00000000  00000000  000e2ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001032f2  00000000  00000000  00128116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0022b408  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c05c  00000000  00000000  0022b45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000058c 	.word	0x2000058c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08023430 	.word	0x08023430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000590 	.word	0x20000590
 80001cc:	08023430 	.word	0x08023430

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <Analog_Start>:
extern Meas_Data meas_data;

static void Calc_Pt100();

void Analog_Start(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 8000ff0:	2206      	movs	r2, #6
 8000ff2:	4904      	ldr	r1, [pc, #16]	; (8001004 <Analog_Start+0x18>)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <Analog_Start+0x1c>)
 8000ff6:	f006 f895 	bl	8007124 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <Analog_Start+0x20>)
 8000ffc:	f00a f914 	bl	800b228 <HAL_TIM_Base_Start>

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20007000 	.word	0x20007000
 8001008:	200072a0 	.word	0x200072a0
 800100c:	20007200 	.word	0x20007200

08001010 <Analog_Read>:

void Analog_Read(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	Calc_Pt100();
 8001014:	f000 f802 	bl	800101c <Calc_Pt100>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <Calc_Pt100>:

static void Calc_Pt100()
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	float sum = 0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
	if(pt100_data_ready)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <Calc_Pt100+0x64>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <Calc_Pt100+0x56>
	{
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	e00e      	b.n	8001054 <Calc_Pt100+0x38>
			sum+=pt100_buf[i];
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <Calc_Pt100+0x68>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a01 	vldr	s14, [r7, #4]
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104a:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b27      	cmp	r3, #39	; 0x27
 8001058:	dded      	ble.n	8001036 <Calc_Pt100+0x1a>
		}
		meas_data.pt100 = sum/PT100_INPUT_BUFFER_SIZE;
 800105a:	ed97 7a01 	vldr	s14, [r7, #4]
 800105e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001088 <Calc_Pt100+0x6c>
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <Calc_Pt100+0x70>)
 8001068:	edc3 7a03 	vstr	s15, [r3, #12]
		pt100_data_ready = 0;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <Calc_Pt100+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20006f58 	.word	0x20006f58
 8001084:	20006f60 	.word	0x20006f60
 8001088:	42200000 	.word	0x42200000
 800108c:	2000751c 	.word	0x2000751c

08001090 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_3, vRef;
	vRef = pt100_input_buffer.V_ref;
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 800109a:	895b      	ldrh	r3, [r3, #10]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vRef = 3.3f*(float)V_REF_VALUE/vRef;
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_ADC_ConvCpltCallback+0x124>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_0 = pt100_input_buffer.Pt100_0 * 3.3f/vRef;
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_1 = pt100_input_buffer.Pt100_1 * 3.3f/vRef;
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001104:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_input_buffer.Pt100_3 * 3.3f/vRef;
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 800110a:	88db      	ldrh	r3, [r3, #6]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001114:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 8001118:	ee67 6a87 	vmul.f32	s13, s15, s14
 800111c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	edc7 7a06 	vstr	s15, [r7, #24]
	float vpt100 = pt100_3 - pt100_1;
 8001128:	ed97 7a06 	vldr	s14, [r7, #24]
 800112c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001134:	edc7 7a05 	vstr	s15, [r7, #20]
	float ref = pt100_1-pt100_0;
 8001138:	ed97 7a07 	vldr	s14, [r7, #28]
 800113c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	edc7 7a04 	vstr	s15, [r7, #16]
	float v_result = vpt100*100/ref;
 8001148:	edd7 7a05 	vldr	s15, [r7, #20]
 800114c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80011bc <HAL_ADC_ConvCpltCallback+0x12c>
 8001150:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001154:	ed97 7a04 	vldr	s14, [r7, #16]
 8001158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115c:	edc7 7a03 	vstr	s15, [r7, #12]
	pt100_buf[j] = (v_result - 100)*2.5974f;
 8001160:	edd7 7a03 	vldr	s15, [r7, #12]
 8001164:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80011bc <HAL_ADC_ConvCpltCallback+0x12c>
 8001168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011c4 <HAL_ADC_ConvCpltCallback+0x134>
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_ADC_ConvCpltCallback+0x138>)
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	edc3 7a00 	vstr	s15, [r3]
	j++;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 800118c:	701a      	strb	r2, [r3, #0]
	if(j>=PT100_INPUT_BUFFER_SIZE)j=0;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b27      	cmp	r3, #39	; 0x27
 8001194:	d902      	bls.n	800119c <HAL_ADC_ConvCpltCallback+0x10c>
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	pt100_data_ready = 1;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_ADC_ConvCpltCallback+0x13c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	372c      	adds	r7, #44	; 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20007000 	.word	0x20007000
 80011b4:	1fff7a2a 	.word	0x1fff7a2a
 80011b8:	40533333 	.word	0x40533333
 80011bc:	42c80000 	.word	0x42c80000
 80011c0:	20006f59 	.word	0x20006f59
 80011c4:	40263bcd 	.word	0x40263bcd
 80011c8:	20006f60 	.word	0x20006f60
 80011cc:	20006f58 	.word	0x20006f58

080011d0 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	4613      	mov	r3, r2
 80011de:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 80011e0:	797b      	ldrb	r3, [r7, #5]
 80011e2:	2201      	movs	r2, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <Read_Inputs>:




void Read_Inputs()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	Filter_Inputs();
 8001204:	f000 fb16 	bl	8001834 <Filter_Inputs>
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  filters_inputs[0];
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <Read_Inputs+0x21c>)
 800120a:	7a1b      	ldrb	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <Read_Inputs+0x22>
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <Read_Inputs+0x21c>)
 8001218:	7a9b      	ldrb	r3, [r3, #10]
 800121a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	e004      	b.n	800122c <Read_Inputs+0x2c>
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <Read_Inputs+0x220>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	497d      	ldr	r1, [pc, #500]	; (8001424 <Read_Inputs+0x224>)
 800122e:	788b      	ldrb	r3, [r1, #2]
 8001230:	f362 0300 	bfi	r3, r2, #0, #1
 8001234:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  filters_inputs[1];
 8001236:	4b79      	ldr	r3, [pc, #484]	; (800141c <Read_Inputs+0x21c>)
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <Read_Inputs+0x50>
 8001244:	4b75      	ldr	r3, [pc, #468]	; (800141c <Read_Inputs+0x21c>)
 8001246:	7a9b      	ldrb	r3, [r3, #10]
 8001248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	e004      	b.n	800125a <Read_Inputs+0x5a>
 8001250:	4b73      	ldr	r3, [pc, #460]	; (8001420 <Read_Inputs+0x220>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4972      	ldr	r1, [pc, #456]	; (8001424 <Read_Inputs+0x224>)
 800125c:	788b      	ldrb	r3, [r1, #2]
 800125e:	f362 0341 	bfi	r3, r2, #1, #1
 8001262:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  filters_inputs[2];
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <Read_Inputs+0x21c>)
 8001266:	7a1b      	ldrb	r3, [r3, #8]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <Read_Inputs+0x7e>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <Read_Inputs+0x21c>)
 8001274:	7a9b      	ldrb	r3, [r3, #10]
 8001276:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	e004      	b.n	8001288 <Read_Inputs+0x88>
 800127e:	4b68      	ldr	r3, [pc, #416]	; (8001420 <Read_Inputs+0x220>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4966      	ldr	r1, [pc, #408]	; (8001424 <Read_Inputs+0x224>)
 800128a:	788b      	ldrb	r3, [r1, #2]
 800128c:	f362 0382 	bfi	r3, r2, #2, #1
 8001290:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  filters_inputs[3];
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <Read_Inputs+0x21c>)
 8001294:	7a1b      	ldrb	r3, [r3, #8]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <Read_Inputs+0xac>
 80012a0:	4b5e      	ldr	r3, [pc, #376]	; (800141c <Read_Inputs+0x21c>)
 80012a2:	7a9b      	ldrb	r3, [r3, #10]
 80012a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	e004      	b.n	80012b6 <Read_Inputs+0xb6>
 80012ac:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <Read_Inputs+0x220>)
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	495b      	ldr	r1, [pc, #364]	; (8001424 <Read_Inputs+0x224>)
 80012b8:	788b      	ldrb	r3, [r1, #2]
 80012ba:	f362 03c3 	bfi	r3, r2, #3, #1
 80012be:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  filters_inputs[4];
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <Read_Inputs+0x21c>)
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <Read_Inputs+0xda>
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <Read_Inputs+0x21c>)
 80012d0:	7a9b      	ldrb	r3, [r3, #10]
 80012d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	e004      	b.n	80012e4 <Read_Inputs+0xe4>
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <Read_Inputs+0x220>)
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	494f      	ldr	r1, [pc, #316]	; (8001424 <Read_Inputs+0x224>)
 80012e6:	788b      	ldrb	r3, [r1, #2]
 80012e8:	f362 1304 	bfi	r3, r2, #4, #1
 80012ec:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  filters_inputs[5];
 80012ee:	4b4b      	ldr	r3, [pc, #300]	; (800141c <Read_Inputs+0x21c>)
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <Read_Inputs+0x108>
 80012fc:	4b47      	ldr	r3, [pc, #284]	; (800141c <Read_Inputs+0x21c>)
 80012fe:	7a9b      	ldrb	r3, [r3, #10]
 8001300:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	e004      	b.n	8001312 <Read_Inputs+0x112>
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <Read_Inputs+0x220>)
 800130a:	795b      	ldrb	r3, [r3, #5]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4944      	ldr	r1, [pc, #272]	; (8001424 <Read_Inputs+0x224>)
 8001314:	788b      	ldrb	r3, [r1, #2]
 8001316:	f362 1345 	bfi	r3, r2, #5, #1
 800131a:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  filters_inputs[6];
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <Read_Inputs+0x21c>)
 800131e:	7a1b      	ldrb	r3, [r3, #8]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <Read_Inputs+0x136>
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <Read_Inputs+0x21c>)
 800132c:	7a9b      	ldrb	r3, [r3, #10]
 800132e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	e004      	b.n	8001340 <Read_Inputs+0x140>
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <Read_Inputs+0x220>)
 8001338:	799b      	ldrb	r3, [r3, #6]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4938      	ldr	r1, [pc, #224]	; (8001424 <Read_Inputs+0x224>)
 8001342:	788b      	ldrb	r3, [r1, #2]
 8001344:	f362 1386 	bfi	r3, r2, #6, #1
 8001348:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  filters_inputs[7];
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <Read_Inputs+0x21c>)
 800134c:	7a1b      	ldrb	r3, [r3, #8]
 800134e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <Read_Inputs+0x164>
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <Read_Inputs+0x21c>)
 800135a:	7a9b      	ldrb	r3, [r3, #10]
 800135c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	e004      	b.n	800136e <Read_Inputs+0x16e>
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <Read_Inputs+0x220>)
 8001366:	79db      	ldrb	r3, [r3, #7]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	492d      	ldr	r1, [pc, #180]	; (8001424 <Read_Inputs+0x224>)
 8001370:	788b      	ldrb	r3, [r1, #2]
 8001372:	f362 13c7 	bfi	r3, r2, #7, #1
 8001376:	708b      	strb	r3, [r1, #2]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  filters_inputs[8];
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <Read_Inputs+0x21c>)
 800137a:	7a5b      	ldrb	r3, [r3, #9]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <Read_Inputs+0x192>
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <Read_Inputs+0x21c>)
 8001388:	7adb      	ldrb	r3, [r3, #11]
 800138a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	e004      	b.n	800139c <Read_Inputs+0x19c>
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <Read_Inputs+0x220>)
 8001394:	7a1b      	ldrb	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4921      	ldr	r1, [pc, #132]	; (8001424 <Read_Inputs+0x224>)
 800139e:	78cb      	ldrb	r3, [r1, #3]
 80013a0:	f362 0300 	bfi	r3, r2, #0, #1
 80013a4:	70cb      	strb	r3, [r1, #3]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  filters_inputs[9];
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <Read_Inputs+0x21c>)
 80013a8:	7a5b      	ldrb	r3, [r3, #9]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <Read_Inputs+0x1c0>
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <Read_Inputs+0x21c>)
 80013b6:	7adb      	ldrb	r3, [r3, #11]
 80013b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	e004      	b.n	80013ca <Read_Inputs+0x1ca>
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <Read_Inputs+0x220>)
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4916      	ldr	r1, [pc, #88]	; (8001424 <Read_Inputs+0x224>)
 80013cc:	78cb      	ldrb	r3, [r1, #3]
 80013ce:	f362 0341 	bfi	r3, r2, #1, #1
 80013d2:	70cb      	strb	r3, [r1, #3]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : filters_inputs[10];
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <Read_Inputs+0x21c>)
 80013d6:	7a5b      	ldrb	r3, [r3, #9]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <Read_Inputs+0x1ee>
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Read_Inputs+0x21c>)
 80013e4:	7adb      	ldrb	r3, [r3, #11]
 80013e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	e004      	b.n	80013f8 <Read_Inputs+0x1f8>
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <Read_Inputs+0x220>)
 80013f0:	7a9b      	ldrb	r3, [r3, #10]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490a      	ldr	r1, [pc, #40]	; (8001424 <Read_Inputs+0x224>)
 80013fa:	78cb      	ldrb	r3, [r1, #3]
 80013fc:	f362 0382 	bfi	r3, r2, #2, #1
 8001400:	70cb      	strb	r3, [r1, #3]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : filters_inputs[11];
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <Read_Inputs+0x21c>)
 8001404:	7a5b      	ldrb	r3, [r3, #9]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <Read_Inputs+0x228>
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <Read_Inputs+0x21c>)
 8001412:	7adb      	ldrb	r3, [r3, #11]
 8001414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	e00a      	b.n	8001432 <Read_Inputs+0x232>
 800141c:	20007474 	.word	0x20007474
 8001420:	2000700c 	.word	0x2000700c
 8001424:	2000751c 	.word	0x2000751c
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <Read_Inputs+0x31c>)
 800142a:	7adb      	ldrb	r3, [r3, #11]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	493b      	ldr	r1, [pc, #236]	; (8001520 <Read_Inputs+0x320>)
 8001434:	78cb      	ldrb	r3, [r1, #3]
 8001436:	f362 03c3 	bfi	r3, r2, #3, #1
 800143a:	70cb      	strb	r3, [r1, #3]

	d_inputs.uz_prob_fail 				= meas_data.d_inputs.in0;
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <Read_Inputs+0x320>)
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	4a37      	ldr	r2, [pc, #220]	; (8001524 <Read_Inputs+0x324>)
 8001448:	7813      	ldrb	r3, [r2, #0]
 800144a:	f361 0300 	bfi	r3, r1, #0, #1
 800144e:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_1 		= meas_data.d_inputs.in1;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <Read_Inputs+0x320>)
 8001452:	789b      	ldrb	r3, [r3, #2]
 8001454:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001458:	b2d9      	uxtb	r1, r3
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <Read_Inputs+0x324>)
 800145c:	7813      	ldrb	r3, [r2, #0]
 800145e:	f361 0341 	bfi	r3, r1, #1, #1
 8001462:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_2		= meas_data.d_inputs.in2;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <Read_Inputs+0x320>)
 8001466:	789b      	ldrb	r3, [r3, #2]
 8001468:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <Read_Inputs+0x324>)
 8001470:	7813      	ldrb	r3, [r2, #0]
 8001472:	f361 0382 	bfi	r3, r1, #2, #1
 8001476:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_1 		= meas_data.d_inputs.in3;
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <Read_Inputs+0x320>)
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <Read_Inputs+0x324>)
 8001484:	7813      	ldrb	r3, [r2, #0]
 8001486:	f361 03c3 	bfi	r3, r1, #3, #1
 800148a:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_2		= meas_data.d_inputs.in4;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <Read_Inputs+0x320>)
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <Read_Inputs+0x324>)
 8001498:	7813      	ldrb	r3, [r2, #0]
 800149a:	f361 1304 	bfi	r3, r1, #4, #1
 800149e:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_stop					= meas_data.d_inputs.in5;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <Read_Inputs+0x320>)
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <Read_Inputs+0x324>)
 80014ac:	7813      	ldrb	r3, [r2, #0]
 80014ae:	f361 1345 	bfi	r3, r1, #5, #1
 80014b2:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_make_proba				= meas_data.d_inputs.in6;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <Read_Inputs+0x320>)
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <Read_Inputs+0x324>)
 80014c0:	7813      	ldrb	r3, [r2, #0]
 80014c2:	f361 1386 	bfi	r3, r1, #6, #1
 80014c6:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_vozvrat					= meas_data.d_inputs.in7;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <Read_Inputs+0x320>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <Read_Inputs+0x324>)
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80014da:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_auto_local				= meas_data.d_inputs.in8;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <Read_Inputs+0x320>)
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <Read_Inputs+0x324>)
 80014e8:	7853      	ldrb	r3, [r2, #1]
 80014ea:	f361 0300 	bfi	r3, r1, #0, #1
 80014ee:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra				= meas_data.d_inputs.in9;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <Read_Inputs+0x320>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <Read_Inputs+0x324>)
 80014fc:	7853      	ldrb	r3, [r2, #1]
 80014fe:	f361 0341 	bfi	r3, r1, #1, #1
 8001502:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra_door			= meas_data.d_inputs.in10;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Read_Inputs+0x320>)
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <Read_Inputs+0x324>)
 8001510:	7853      	ldrb	r3, [r2, #1]
 8001512:	f361 0382 	bfi	r3, r1, #2, #1
 8001516:	7053      	strb	r3, [r2, #1]




}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000700c 	.word	0x2000700c
 8001520:	2000751c 	.word	0x2000751c
 8001524:	2000701c 	.word	0x2000701c

08001528 <Write_Outputs>:

void Write_Outputs()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  d_outputs.uz_prob_forv;
 800152c:	4b74      	ldr	r3, [pc, #464]	; (8001700 <Write_Outputs+0x1d8>)
 800152e:	7b1b      	ldrb	r3, [r3, #12]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <Write_Outputs+0x1e>
 800153a:	4b71      	ldr	r3, [pc, #452]	; (8001700 <Write_Outputs+0x1d8>)
 800153c:	7b9b      	ldrb	r3, [r3, #14]
 800153e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	e004      	b.n	8001550 <Write_Outputs+0x28>
 8001546:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <Write_Outputs+0x1dc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	496d      	ldr	r1, [pc, #436]	; (8001708 <Write_Outputs+0x1e0>)
 8001552:	790b      	ldrb	r3, [r1, #4]
 8001554:	f362 0300 	bfi	r3, r2, #0, #1
 8001558:	710b      	strb	r3, [r1, #4]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  d_outputs.uz_prob_rev;
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <Write_Outputs+0x1d8>)
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <Write_Outputs+0x4c>
 8001568:	4b65      	ldr	r3, [pc, #404]	; (8001700 <Write_Outputs+0x1d8>)
 800156a:	7b9b      	ldrb	r3, [r3, #14]
 800156c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	e004      	b.n	800157e <Write_Outputs+0x56>
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <Write_Outputs+0x1dc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4962      	ldr	r1, [pc, #392]	; (8001708 <Write_Outputs+0x1e0>)
 8001580:	790b      	ldrb	r3, [r1, #4]
 8001582:	f362 0341 	bfi	r3, r2, #1, #1
 8001586:	710b      	strb	r3, [r1, #4]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  d_outputs.prob_ready;
 8001588:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <Write_Outputs+0x1d8>)
 800158a:	7b1b      	ldrb	r3, [r3, #12]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <Write_Outputs+0x7a>
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <Write_Outputs+0x1d8>)
 8001598:	7b9b      	ldrb	r3, [r3, #14]
 800159a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	e004      	b.n	80015ac <Write_Outputs+0x84>
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <Write_Outputs+0x1dc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4956      	ldr	r1, [pc, #344]	; (8001708 <Write_Outputs+0x1e0>)
 80015ae:	790b      	ldrb	r3, [r1, #4]
 80015b0:	f362 0382 	bfi	r3, r2, #2, #1
 80015b4:	710b      	strb	r3, [r1, #4]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <Write_Outputs+0x1d8>)
 80015b8:	7b1b      	ldrb	r3, [r3, #12]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <Write_Outputs+0xa8>
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <Write_Outputs+0x1d8>)
 80015c6:	7b9b      	ldrb	r3, [r3, #14]
 80015c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	e000      	b.n	80015d2 <Write_Outputs+0xaa>
 80015d0:	2100      	movs	r1, #0
 80015d2:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <Write_Outputs+0x1e0>)
 80015d4:	7913      	ldrb	r3, [r2, #4]
 80015d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80015da:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 80015dc:	4b48      	ldr	r3, [pc, #288]	; (8001700 <Write_Outputs+0x1d8>)
 80015de:	7b1b      	ldrb	r3, [r3, #12]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <Write_Outputs+0xce>
 80015ea:	4b45      	ldr	r3, [pc, #276]	; (8001700 <Write_Outputs+0x1d8>)
 80015ec:	7b9b      	ldrb	r3, [r3, #14]
 80015ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	e000      	b.n	80015f8 <Write_Outputs+0xd0>
 80015f6:	2100      	movs	r1, #0
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <Write_Outputs+0x1e0>)
 80015fa:	7913      	ldrb	r3, [r2, #4]
 80015fc:	f361 1304 	bfi	r3, r1, #4, #1
 8001600:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <Write_Outputs+0x1d8>)
 8001604:	7b1b      	ldrb	r3, [r3, #12]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <Write_Outputs+0xf4>
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <Write_Outputs+0x1d8>)
 8001612:	7b9b      	ldrb	r3, [r3, #14]
 8001614:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001618:	b2d9      	uxtb	r1, r3
 800161a:	e000      	b.n	800161e <Write_Outputs+0xf6>
 800161c:	2100      	movs	r1, #0
 800161e:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <Write_Outputs+0x1e0>)
 8001620:	7913      	ldrb	r3, [r2, #4]
 8001622:	f361 1345 	bfi	r3, r1, #5, #1
 8001626:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <Write_Outputs+0x1d8>)
 800162a:	7b1b      	ldrb	r3, [r3, #12]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <Write_Outputs+0x11a>
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <Write_Outputs+0x1d8>)
 8001638:	7b9b      	ldrb	r3, [r3, #14]
 800163a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	e000      	b.n	8001644 <Write_Outputs+0x11c>
 8001642:	2100      	movs	r1, #0
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <Write_Outputs+0x1e0>)
 8001646:	7913      	ldrb	r3, [r2, #4]
 8001648:	f361 1386 	bfi	r3, r1, #6, #1
 800164c:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <Write_Outputs+0x1d8>)
 8001650:	7b1b      	ldrb	r3, [r3, #12]
 8001652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <Write_Outputs+0x140>
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <Write_Outputs+0x1d8>)
 800165e:	7b9b      	ldrb	r3, [r3, #14]
 8001660:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001664:	b2d9      	uxtb	r1, r3
 8001666:	e000      	b.n	800166a <Write_Outputs+0x142>
 8001668:	2100      	movs	r1, #0
 800166a:	4a27      	ldr	r2, [pc, #156]	; (8001708 <Write_Outputs+0x1e0>)
 800166c:	7913      	ldrb	r3, [r2, #4]
 800166e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001672:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <Write_Outputs+0x1d8>)
 8001676:	7b5b      	ldrb	r3, [r3, #13]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <Write_Outputs+0x166>
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <Write_Outputs+0x1d8>)
 8001684:	7bdb      	ldrb	r3, [r3, #15]
 8001686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	e000      	b.n	8001690 <Write_Outputs+0x168>
 800168e:	2100      	movs	r1, #0
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <Write_Outputs+0x1e0>)
 8001692:	7953      	ldrb	r3, [r2, #5]
 8001694:	f361 0300 	bfi	r3, r1, #0, #1
 8001698:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <Write_Outputs+0x1d8>)
 800169c:	7b5b      	ldrb	r3, [r3, #13]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <Write_Outputs+0x18c>
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <Write_Outputs+0x1d8>)
 80016aa:	7bdb      	ldrb	r3, [r3, #15]
 80016ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	e000      	b.n	80016b6 <Write_Outputs+0x18e>
 80016b4:	2100      	movs	r1, #0
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <Write_Outputs+0x1e0>)
 80016b8:	7953      	ldrb	r3, [r2, #5]
 80016ba:	f361 0341 	bfi	r3, r1, #1, #1
 80016be:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <Write_Outputs+0x1d8>)
 80016c2:	7b5b      	ldrb	r3, [r3, #13]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <Write_Outputs+0x1b2>
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <Write_Outputs+0x1d8>)
 80016d0:	7bdb      	ldrb	r3, [r3, #15]
 80016d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016d6:	b2d9      	uxtb	r1, r3
 80016d8:	e000      	b.n	80016dc <Write_Outputs+0x1b4>
 80016da:	2100      	movs	r1, #0
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <Write_Outputs+0x1e0>)
 80016de:	7953      	ldrb	r3, [r2, #5]
 80016e0:	f361 0382 	bfi	r3, r1, #2, #1
 80016e4:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <Write_Outputs+0x1d8>)
 80016e8:	7b5b      	ldrb	r3, [r3, #13]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <Write_Outputs+0x1e4>
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <Write_Outputs+0x1d8>)
 80016f6:	7bdb      	ldrb	r3, [r3, #15]
 80016f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	e006      	b.n	800170e <Write_Outputs+0x1e6>
 8001700:	20007474 	.word	0x20007474
 8001704:	20007018 	.word	0x20007018
 8001708:	2000751c 	.word	0x2000751c
 800170c:	2100      	movs	r1, #0
 800170e:	4a45      	ldr	r2, [pc, #276]	; (8001824 <Write_Outputs+0x2fc>)
 8001710:	7953      	ldrb	r3, [r2, #5]
 8001712:	f361 03c3 	bfi	r3, r1, #3, #1
 8001716:	7153      	strb	r3, [r2, #5]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <Write_Outputs+0x2fc>)
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4840      	ldr	r0, [pc, #256]	; (8001828 <Write_Outputs+0x300>)
 8001728:	f008 fa8a 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <Write_Outputs+0x2fc>)
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	483a      	ldr	r0, [pc, #232]	; (8001828 <Write_Outputs+0x300>)
 800173e:	f008 fa7f 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <Write_Outputs+0x2fc>)
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001752:	4835      	ldr	r0, [pc, #212]	; (8001828 <Write_Outputs+0x300>)
 8001754:	f008 fa74 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <Write_Outputs+0x2fc>)
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	482f      	ldr	r0, [pc, #188]	; (8001828 <Write_Outputs+0x300>)
 800176a:	f008 fa69 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <Write_Outputs+0x2fc>)
 8001770:	791b      	ldrb	r3, [r3, #4]
 8001772:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	482a      	ldr	r0, [pc, #168]	; (8001828 <Write_Outputs+0x300>)
 8001780:	f008 fa5e 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <Write_Outputs+0x2fc>)
 8001786:	791b      	ldrb	r3, [r3, #4]
 8001788:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	4824      	ldr	r0, [pc, #144]	; (8001828 <Write_Outputs+0x300>)
 8001796:	f008 fa53 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <Write_Outputs+0x2fc>)
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	481f      	ldr	r0, [pc, #124]	; (8001828 <Write_Outputs+0x300>)
 80017ac:	f008 fa48 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <Write_Outputs+0x2fc>)
 80017b2:	791b      	ldrb	r3, [r3, #4]
 80017b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <Write_Outputs+0x300>)
 80017c2:	f008 fa3d 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <Write_Outputs+0x2fc>)
 80017c8:	795b      	ldrb	r3, [r3, #5]
 80017ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <Write_Outputs+0x300>)
 80017d8:	f008 fa32 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <Write_Outputs+0x2fc>)
 80017de:	795b      	ldrb	r3, [r3, #5]
 80017e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <Write_Outputs+0x304>)
 80017ee:	f008 fa27 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <Write_Outputs+0x2fc>)
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <Write_Outputs+0x308>)
 8001804:	f008 fa1c 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <Write_Outputs+0x2fc>)
 800180a:	795b      	ldrb	r3, [r3, #5]
 800180c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <Write_Outputs+0x308>)
 800181a:	f008 fa11 	bl	8009c40 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000751c 	.word	0x2000751c
 8001828:	40021000 	.word	0x40021000
 800182c:	40020400 	.word	0x40020400
 8001830:	40020c00 	.word	0x40020c00

08001834 <Filter_Inputs>:

static void Filter_Inputs()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	uint8_t inputs[INPUT_NUMBER];

	inputs[0] = !HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	486a      	ldr	r0, [pc, #424]	; (80019e8 <Filter_Inputs+0x1b4>)
 8001840:	f008 f9e6 	bl	8009c10 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	703b      	strb	r3, [r7, #0]
	inputs[1] = !HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8001852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001856:	4864      	ldr	r0, [pc, #400]	; (80019e8 <Filter_Inputs+0x1b4>)
 8001858:	f008 f9da 	bl	8009c10 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	707b      	strb	r3, [r7, #1]
	inputs[2] = !HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 800186a:	2101      	movs	r1, #1
 800186c:	485f      	ldr	r0, [pc, #380]	; (80019ec <Filter_Inputs+0x1b8>)
 800186e:	f008 f9cf 	bl	8009c10 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	70bb      	strb	r3, [r7, #2]
	inputs[3] = !HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8001880:	2102      	movs	r1, #2
 8001882:	485a      	ldr	r0, [pc, #360]	; (80019ec <Filter_Inputs+0x1b8>)
 8001884:	f008 f9c4 	bl	8009c10 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	70fb      	strb	r3, [r7, #3]
	inputs[4] = !HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8001896:	2104      	movs	r1, #4
 8001898:	4854      	ldr	r0, [pc, #336]	; (80019ec <Filter_Inputs+0x1b8>)
 800189a:	f008 f9b9 	bl	8009c10 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	713b      	strb	r3, [r7, #4]
	inputs[5] = !HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80018ac:	2108      	movs	r1, #8
 80018ae:	484f      	ldr	r0, [pc, #316]	; (80019ec <Filter_Inputs+0x1b8>)
 80018b0:	f008 f9ae 	bl	8009c10 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	717b      	strb	r3, [r7, #5]
	inputs[6] = !HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80018c2:	2110      	movs	r1, #16
 80018c4:	4849      	ldr	r0, [pc, #292]	; (80019ec <Filter_Inputs+0x1b8>)
 80018c6:	f008 f9a3 	bl	8009c10 <HAL_GPIO_ReadPin>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	71bb      	strb	r3, [r7, #6]
	inputs[7] = !HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 80018d8:	2120      	movs	r1, #32
 80018da:	4844      	ldr	r0, [pc, #272]	; (80019ec <Filter_Inputs+0x1b8>)
 80018dc:	f008 f998 	bl	8009c10 <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	71fb      	strb	r3, [r7, #7]
	inputs[8] = !HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	483e      	ldr	r0, [pc, #248]	; (80019ec <Filter_Inputs+0x1b8>)
 80018f2:	f008 f98d 	bl	8009c10 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	723b      	strb	r3, [r7, #8]
	inputs[9] = !HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8001904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001908:	4839      	ldr	r0, [pc, #228]	; (80019f0 <Filter_Inputs+0x1bc>)
 800190a:	f008 f981 	bl	8009c10 <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	727b      	strb	r3, [r7, #9]
	inputs[10] = !HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4833      	ldr	r0, [pc, #204]	; (80019f0 <Filter_Inputs+0x1bc>)
 8001922:	f008 f975 	bl	8009c10 <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	72bb      	strb	r3, [r7, #10]
	inputs[11] = !HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8001934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001938:	482d      	ldr	r0, [pc, #180]	; (80019f0 <Filter_Inputs+0x1bc>)
 800193a:	f008 f969 	bl	8009c10 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e041      	b.n	80019d6 <Filter_Inputs+0x1a2>
		if(inputs[i])
 8001952:	463a      	mov	r2, r7
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00f      	beq.n	800197e <Filter_Inputs+0x14a>
		{
			filter_state[i] = filter_state[i]<ANTIDREBEZG_CNT ? filter_state[i]+1 : ANTIDREBEZG_CNT;
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	b2db      	uxtb	r3, r3
 800196e:	3301      	adds	r3, #1
 8001970:	b2d9      	uxtb	r1, r3
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	460a      	mov	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e011      	b.n	80019a2 <Filter_Inputs+0x16e>
		}
		else
		{
			filter_state[i] = filter_state[i]>0 ? filter_state[i]-1 : 0;
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <Filter_Inputs+0x164>
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <Filter_Inputs+0x1c0>)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3b01      	subs	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	e000      	b.n	800199a <Filter_Inputs+0x166>
 8001998:	2200      	movs	r2, #0
 800199a:	4916      	ldr	r1, [pc, #88]	; (80019f4 <Filter_Inputs+0x1c0>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	440b      	add	r3, r1
 80019a0:	701a      	strb	r2, [r3, #0]
		}
		if (filter_state[i]>=ANTIDREBEZG_CNT) {
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <Filter_Inputs+0x1c0>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d905      	bls.n	80019ba <Filter_Inputs+0x186>
			filters_inputs[i]=1;
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <Filter_Inputs+0x1c4>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e00a      	b.n	80019d0 <Filter_Inputs+0x19c>
		} else if(filter_state[i]==0) {
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <Filter_Inputs+0x1c0>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <Filter_Inputs+0x19c>
			filters_inputs[i]=0;
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <Filter_Inputs+0x1c4>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b0b      	cmp	r3, #11
 80019da:	ddba      	ble.n	8001952 <Filter_Inputs+0x11e>
		}
	}

}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40020800 	.word	0x40020800
 80019f4:	20007020 	.word	0x20007020
 80019f8:	2000700c 	.word	0x2000700c

080019fc <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2101      	movs	r1, #1
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <ethernet_reset+0x24>)
 8001a06:	f008 f91b 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f005 fb22 	bl	8007054 <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2101      	movs	r1, #1
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <ethernet_reset+0x24>)
 8001a16:	f008 f913 	bl	8009c40 <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020000 	.word	0x40020000

08001a24 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0cc      	sub	sp, #304	; 0x130
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2020      	movs	r0, #32
 8001a3e:	f00f fa7f 	bl	8010f40 <netconn_new_with_proto_and_callback>
 8001a42:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8001a46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d05b      	beq.n	8001b06 <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8001a4e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8001a52:	461a      	mov	r2, r3
 8001a54:	492e      	ldr	r1, [pc, #184]	; (8001b10 <ethernet_thread+0xec>)
 8001a56:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001a5a:	f00f fb2b 	bl	80110b4 <netconn_bind>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8001a64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d148      	bne.n	8001afe <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8001a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a70:	4619      	mov	r1, r3
 8001a72:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001a76:	f00f fcd1 	bl	801141c <netconn_recv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8001a80:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f1      	bne.n	8001a6c <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8001a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8001a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001aa0:	f107 020a 	add.w	r2, r7, #10
 8001aa4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f011 f889 	bl	8012bc0 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8001aae:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001ab2:	f107 030a 	add.w	r3, r7, #10
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	f000 f859 	bl	8001b74 <ethernet_answer>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8001ac8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8001ad0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ad4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001ad8:	f107 010c 	add.w	r1, r7, #12
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ae8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001aec:	f000 f812 	bl	8001b14 <Send>
 8001af0:	e7bc      	b.n	8001a6c <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8001af2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001af6:	4618      	mov	r0, r3
 8001af8:	f010 fff8 	bl	8012aec <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8001afc:	e7b6      	b.n	8001a6c <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8001afe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001b02:	f00f fabb 	bl	801107c <netconn_delete>
	  }
	}
}
 8001b06:	bf00      	nop
 8001b08:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08026fa0 	.word	0x08026fa0

08001b14 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8001b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2c:	f010 ffde 	bl	8012aec <netbuf_delete>
	buf = netbuf_new();
 8001b30:	f010 ffc8 	bl	8012ac4 <netbuf_new>
 8001b34:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	8c3a      	ldrh	r2, [r7, #32]
 8001b3a:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	461a      	mov	r2, r3
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4a:	f010 ffef 	bl	8012b2c <netbuf_ref>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8001b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8001b5a:	8c3b      	ldrh	r3, [r7, #32]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f00f fcd5 	bl	8011510 <netconn_sendto>
		netbuf_delete(buf);
 8001b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b68:	f010 ffc0 	bl	8012aec <netbuf_delete>
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	2301      	movs	r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f003 f869 	bl	8004c60 <ModbusParse>
 8001b8e:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <ethernet_answer+0x26>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	e00d      	b.n	8001bb6 <ethernet_answer+0x42>
	result = OnKeyPress(data, data_length, answer);
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fc96 	bl	80024d4 <OnKeyPress>
 8001ba8:	6178      	str	r0, [r7, #20]
	if(result!=0)return 81;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <ethernet_answer+0x40>
 8001bb0:	2351      	movs	r3, #81	; 0x51
 8001bb2:	e000      	b.n	8001bb6 <ethernet_answer+0x42>
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	80fb      	strh	r3, [r7, #6]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <framDataRead+0x74>)
 8001bf0:	f008 f826 	bl	8009c40 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001bf4:	f107 0108 	add.w	r1, r7, #8
 8001bf8:	23c8      	movs	r3, #200	; 0xc8
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <framDataRead+0x78>)
 8001bfe:	f008 fda4 	bl	800a74a <HAL_SPI_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	23c8      	movs	r3, #200	; 0xc8
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <framDataRead+0x78>)
 8001c0e:	f008 fed8 	bl	800a9c2 <HAL_SPI_Receive>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <framDataRead+0x74>)
 8001c24:	f008 f80c 	bl	8009c40 <HAL_GPIO_WritePin>

	return result;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020000 	.word	0x40020000
 8001c38:	20007248 	.word	0x20007248

08001c3c <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	80fb      	strh	r3, [r7, #6]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c62:	483f      	ldr	r0, [pc, #252]	; (8001d60 <framDataWrite+0x124>)
 8001c64:	f007 ffec 	bl	8009c40 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001c68:	f107 0108 	add.w	r1, r7, #8
 8001c6c:	23c8      	movs	r3, #200	; 0xc8
 8001c6e:	2201      	movs	r2, #1
 8001c70:	483c      	ldr	r0, [pc, #240]	; (8001d64 <framDataWrite+0x128>)
 8001c72:	f008 fd6a 	bl	800a74a <HAL_SPI_Transmit>
 8001c76:	4603      	mov	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c80:	4837      	ldr	r0, [pc, #220]	; (8001d60 <framDataWrite+0x124>)
 8001c82:	f007 ffdd 	bl	8009c40 <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 8001c86:	2305      	movs	r3, #5
 8001c88:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8001c8a:	e027      	b.n	8001cdc <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c92:	4833      	ldr	r0, [pc, #204]	; (8001d60 <framDataWrite+0x124>)
 8001c94:	f007 ffd4 	bl	8009c40 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001c98:	f107 0108 	add.w	r1, r7, #8
 8001c9c:	23c8      	movs	r3, #200	; 0xc8
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4830      	ldr	r0, [pc, #192]	; (8001d64 <framDataWrite+0x128>)
 8001ca2:	f008 fd52 	bl	800a74a <HAL_SPI_Transmit>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 8001cb0:	f107 0108 	add.w	r1, r7, #8
 8001cb4:	23c8      	movs	r3, #200	; 0xc8
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	482a      	ldr	r0, [pc, #168]	; (8001d64 <framDataWrite+0x128>)
 8001cba:	f008 fe82 	bl	800a9c2 <HAL_SPI_Receive>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cce:	4824      	ldr	r0, [pc, #144]	; (8001d60 <framDataWrite+0x124>)
 8001cd0:	f007 ffb6 	bl	8009c40 <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <framDataWrite+0xb0>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60fa      	str	r2, [r7, #12]
 8001ce8:	2b63      	cmp	r3, #99	; 0x63
 8001cea:	ddcf      	ble.n	8001c8c <framDataWrite+0x50>
	}
	if (!status)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <framDataWrite+0xbe>
		result = -2;
 8001cf2:	f06f 0301 	mvn.w	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e02c      	b.n	8001d54 <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d14:	4812      	ldr	r0, [pc, #72]	; (8001d60 <framDataWrite+0x124>)
 8001d16:	f007 ff93 	bl	8009c40 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	23c8      	movs	r3, #200	; 0xc8
 8001d20:	2203      	movs	r2, #3
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <framDataWrite+0x128>)
 8001d24:	f008 fd11 	bl	800a74a <HAL_SPI_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	23c8      	movs	r3, #200	; 0xc8
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <framDataWrite+0x128>)
 8001d3a:	f008 fd06 	bl	800a74a <HAL_SPI_Transmit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <framDataWrite+0x124>)
 8001d50:	f007 ff76 	bl	8009c40 <HAL_GPIO_WritePin>
	}

	return result;
 8001d54:	697b      	ldr	r3, [r7, #20]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020000 	.word	0x40020000
 8001d64:	20007248 	.word	0x20007248

08001d68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <vApplicationGetIdleTaskMemory+0x30>)
 8001d7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200005a8 	.word	0x200005a8
 8001d98:	2000065c 	.word	0x2000065c

08001d9c <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8001da6:	f00e ffe5 	bl	8010d74 <xPortGetFreeHeapSize>
 8001daa:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <task_init+0x90>)
 8001db6:	491e      	ldr	r1, [pc, #120]	; (8001e30 <task_init+0x94>)
 8001db8:	481e      	ldr	r0, [pc, #120]	; (8001e34 <task_init+0x98>)
 8001dba:	f01c f96f 	bl	801e09c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dbe:	f00e ffd9 	bl	8010d74 <xPortGetFreeHeapSize>
 8001dc2:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <task_init+0x9c>)
 8001dce:	4918      	ldr	r1, [pc, #96]	; (8001e30 <task_init+0x94>)
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <task_init+0xa0>)
 8001dd2:	f01c f963 	bl	801e09c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dd6:	f00e ffcd 	bl	8010d74 <xPortGetFreeHeapSize>
 8001dda:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	2200      	movs	r2, #0
 8001de6:	4916      	ldr	r1, [pc, #88]	; (8001e40 <task_init+0xa4>)
 8001de8:	4816      	ldr	r0, [pc, #88]	; (8001e44 <task_init+0xa8>)
 8001dea:	f01c f957 	bl	801e09c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dee:	f00e ffc1 	bl	8010d74 <xPortGetFreeHeapSize>
 8001df2:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8001df4:	2303      	movs	r3, #3
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	2310      	movs	r3, #16
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00c fa26 	bl	800e258 <osMailCreate>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <task_init+0xac>)
 8001e10:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	2200      	movs	r2, #0
 8001e1a:	490c      	ldr	r1, [pc, #48]	; (8001e4c <task_init+0xb0>)
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <task_init+0xb4>)
 8001e1e:	f01c f93d 	bl	801e09c <sys_thread_new>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	08001a25 	.word	0x08001a25
 8001e34:	08023448 	.word	0x08023448
 8001e38:	20000002 	.word	0x20000002
 8001e3c:	08023454 	.word	0x08023454
 8001e40:	08006a89 	.word	0x08006a89
 8001e44:	08023460 	.word	0x08023460
 8001e48:	2000702c 	.word	0x2000702c
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	0802346c 	.word	0x0802346c

08001e54 <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	int result = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
	int time;
	int last_time;

	result = OnKeyPress("F1", strlen("F1"), lcd);
 8001e60:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <keyscan_thread+0x110>)
 8001e62:	2102      	movs	r1, #2
 8001e64:	4840      	ldr	r0, [pc, #256]	; (8001f68 <keyscan_thread+0x114>)
 8001e66:	f000 fb35 	bl	80024d4 <OnKeyPress>
 8001e6a:	6138      	str	r0, [r7, #16]
	if(result!=0)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <keyscan_thread+0x22>
	{
		SendToLcd();
 8001e72:	f000 fb0f 	bl	8002494 <SendToLcd>
	}
	while(1)
	{
		Tact_pins();
 8001e76:	f000 f87d 	bl	8001f74 <Tact_pins>
		Key_Read();
 8001e7a:	f000 f987 	bl	800218c <Key_Read>
		key_filter_all();
 8001e7e:	f000 f9fb 	bl	8002278 <key_filter_all>
		GetPositiveFront();
 8001e82:	f000 faa9 	bl	80023d8 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e04a      	b.n	8001f22 <keyscan_thread+0xce>
			for (int j = 0; j < 6; ++j) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e041      	b.n	8001f16 <keyscan_thread+0xc2>
				if(positive_fronts[i][j])
 8001e92:	4936      	ldr	r1, [pc, #216]	; (8001f6c <keyscan_thread+0x118>)
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	18ca      	adds	r2, r1, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d032      	beq.n	8001f10 <keyscan_thread+0xbc>
				{
					if(keys[i][j]!=NULL)
 8001eaa:	4931      	ldr	r1, [pc, #196]	; (8001f70 <keyscan_thread+0x11c>)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d026      	beq.n	8001f10 <keyscan_thread+0xbc>
					{
						result = OnKeyPress(keys[i][j], strlen(keys[i][j]), (uint8_t*)lcd);
 8001ec2:	492b      	ldr	r1, [pc, #172]	; (8001f70 <keyscan_thread+0x11c>)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001ed6:	4926      	ldr	r1, [pc, #152]	; (8001f70 <keyscan_thread+0x11c>)
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe f970 	bl	80001d0 <strlen>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <keyscan_thread+0x110>)
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f000 faeb 	bl	80024d4 <OnKeyPress>
 8001efe:	6138      	str	r0, [r7, #16]
						if(result!=0)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <keyscan_thread+0xbc>
						{
							SendToLcd();
 8001f06:	f000 fac5 	bl	8002494 <SendToLcd>
							SetCursor(result);
 8001f0a:	6938      	ldr	r0, [r7, #16]
 8001f0c:	f002 f93c 	bl	8004188 <SetCursor>
			for (int j = 0; j < 6; ++j) {
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	ddba      	ble.n	8001e92 <keyscan_thread+0x3e>
		for (int i = 0; i < 6; ++i) {
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	ddb1      	ble.n	8001e8c <keyscan_thread+0x38>
						}
					}
				}
			}
		}
		time = HAL_GetTick();
 8001f28:	f005 f888 	bl	800703c <HAL_GetTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
		if((time-last_time)>500)
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f3a:	dd0f      	ble.n	8001f5c <keyscan_thread+0x108>
		{
			result = LcdUpdate((uint8_t*)lcd);
 8001f3c:	4809      	ldr	r0, [pc, #36]	; (8001f64 <keyscan_thread+0x110>)
 8001f3e:	f001 fcdd 	bl	80038fc <LcdUpdate>
 8001f42:	4603      	mov	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]
			if(result!=0)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <keyscan_thread+0x104>
			{
				SendToLcd();
 8001f4c:	f000 faa2 	bl	8002494 <SendToLcd>
				SetCursor(-1);
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f002 f918 	bl	8004188 <SetCursor>
			}
			last_time = time;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	61fb      	str	r3, [r7, #28]
		}
		osDelay(2);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f00b fe24 	bl	800dbaa <osDelay>
		Tact_pins();
 8001f62:	e788      	b.n	8001e76 <keyscan_thread+0x22>
 8001f64:	20007030 	.word	0x20007030
 8001f68:	08023494 	.word	0x08023494
 8001f6c:	200008ec 	.word	0x200008ec
 8001f70:	20000004 	.word	0x20000004

08001f74 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <Tact_pins+0x20c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <Tact_pins+0x210>)
 8001f80:	fb83 3102 	smull	r3, r1, r3, r2
 8001f84:	17d3      	asrs	r3, r2, #31
 8001f86:	1ac9      	subs	r1, r1, r3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	1ad1      	subs	r1, r2, r3
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <Tact_pins+0x20c>)
 8001f96:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8001f98:	4b79      	ldr	r3, [pc, #484]	; (8002180 <Tact_pins+0x20c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	f200 80ed 	bhi.w	800217c <Tact_pins+0x208>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <Tact_pins+0x34>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fc1 	.word	0x08001fc1
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	08002055 	.word	0x08002055
 8001fb4:	0800209f 	.word	0x0800209f
 8001fb8:	080020e9 	.word	0x080020e9
 8001fbc:	08002133 	.word	0x08002133
	{
		case 0:
			C0_HIGH;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc6:	4870      	ldr	r0, [pc, #448]	; (8002188 <Tact_pins+0x214>)
 8001fc8:	f007 fe3a 	bl	8009c40 <HAL_GPIO_WritePin>
			C1_LOW;
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd2:	486d      	ldr	r0, [pc, #436]	; (8002188 <Tact_pins+0x214>)
 8001fd4:	f007 fe34 	bl	8009c40 <HAL_GPIO_WritePin>
			C2_LOW;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fde:	486a      	ldr	r0, [pc, #424]	; (8002188 <Tact_pins+0x214>)
 8001fe0:	f007 fe2e 	bl	8009c40 <HAL_GPIO_WritePin>
			C3_LOW;
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	4867      	ldr	r0, [pc, #412]	; (8002188 <Tact_pins+0x214>)
 8001fec:	f007 fe28 	bl	8009c40 <HAL_GPIO_WritePin>
			C4_LOW;
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff6:	4864      	ldr	r0, [pc, #400]	; (8002188 <Tact_pins+0x214>)
 8001ff8:	f007 fe22 	bl	8009c40 <HAL_GPIO_WritePin>
			C5_LOW;
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002002:	4861      	ldr	r0, [pc, #388]	; (8002188 <Tact_pins+0x214>)
 8002004:	f007 fe1c 	bl	8009c40 <HAL_GPIO_WritePin>
			break;
 8002008:	e0b8      	b.n	800217c <Tact_pins+0x208>
		case 1:
			C0_LOW;
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002010:	485d      	ldr	r0, [pc, #372]	; (8002188 <Tact_pins+0x214>)
 8002012:	f007 fe15 	bl	8009c40 <HAL_GPIO_WritePin>
			C1_HIGH;
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800201c:	485a      	ldr	r0, [pc, #360]	; (8002188 <Tact_pins+0x214>)
 800201e:	f007 fe0f 	bl	8009c40 <HAL_GPIO_WritePin>
			C2_LOW;
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4857      	ldr	r0, [pc, #348]	; (8002188 <Tact_pins+0x214>)
 800202a:	f007 fe09 	bl	8009c40 <HAL_GPIO_WritePin>
			C3_LOW;
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002034:	4854      	ldr	r0, [pc, #336]	; (8002188 <Tact_pins+0x214>)
 8002036:	f007 fe03 	bl	8009c40 <HAL_GPIO_WritePin>
			C4_LOW;
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002040:	4851      	ldr	r0, [pc, #324]	; (8002188 <Tact_pins+0x214>)
 8002042:	f007 fdfd 	bl	8009c40 <HAL_GPIO_WritePin>
			C5_LOW;
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800204c:	484e      	ldr	r0, [pc, #312]	; (8002188 <Tact_pins+0x214>)
 800204e:	f007 fdf7 	bl	8009c40 <HAL_GPIO_WritePin>
			break;
 8002052:	e093      	b.n	800217c <Tact_pins+0x208>
		case 2:
			C0_LOW;
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205a:	484b      	ldr	r0, [pc, #300]	; (8002188 <Tact_pins+0x214>)
 800205c:	f007 fdf0 	bl	8009c40 <HAL_GPIO_WritePin>
			C1_LOW;
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002066:	4848      	ldr	r0, [pc, #288]	; (8002188 <Tact_pins+0x214>)
 8002068:	f007 fdea 	bl	8009c40 <HAL_GPIO_WritePin>
			C2_HIGH;
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002072:	4845      	ldr	r0, [pc, #276]	; (8002188 <Tact_pins+0x214>)
 8002074:	f007 fde4 	bl	8009c40 <HAL_GPIO_WritePin>
			C3_LOW;
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207e:	4842      	ldr	r0, [pc, #264]	; (8002188 <Tact_pins+0x214>)
 8002080:	f007 fdde 	bl	8009c40 <HAL_GPIO_WritePin>
			C4_LOW;
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208a:	483f      	ldr	r0, [pc, #252]	; (8002188 <Tact_pins+0x214>)
 800208c:	f007 fdd8 	bl	8009c40 <HAL_GPIO_WritePin>
			C5_LOW;
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002096:	483c      	ldr	r0, [pc, #240]	; (8002188 <Tact_pins+0x214>)
 8002098:	f007 fdd2 	bl	8009c40 <HAL_GPIO_WritePin>
			break;
 800209c:	e06e      	b.n	800217c <Tact_pins+0x208>
		case 3:
			C0_LOW;
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a4:	4838      	ldr	r0, [pc, #224]	; (8002188 <Tact_pins+0x214>)
 80020a6:	f007 fdcb 	bl	8009c40 <HAL_GPIO_WritePin>
			C1_LOW;
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	4835      	ldr	r0, [pc, #212]	; (8002188 <Tact_pins+0x214>)
 80020b2:	f007 fdc5 	bl	8009c40 <HAL_GPIO_WritePin>
			C2_LOW;
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <Tact_pins+0x214>)
 80020be:	f007 fdbf 	bl	8009c40 <HAL_GPIO_WritePin>
			C3_HIGH;
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	482f      	ldr	r0, [pc, #188]	; (8002188 <Tact_pins+0x214>)
 80020ca:	f007 fdb9 	bl	8009c40 <HAL_GPIO_WritePin>
			C4_LOW;
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d4:	482c      	ldr	r0, [pc, #176]	; (8002188 <Tact_pins+0x214>)
 80020d6:	f007 fdb3 	bl	8009c40 <HAL_GPIO_WritePin>
			C5_LOW;
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e0:	4829      	ldr	r0, [pc, #164]	; (8002188 <Tact_pins+0x214>)
 80020e2:	f007 fdad 	bl	8009c40 <HAL_GPIO_WritePin>
			break;
 80020e6:	e049      	b.n	800217c <Tact_pins+0x208>
		case 4:
			C0_LOW;
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ee:	4826      	ldr	r0, [pc, #152]	; (8002188 <Tact_pins+0x214>)
 80020f0:	f007 fda6 	bl	8009c40 <HAL_GPIO_WritePin>
			C1_LOW;
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <Tact_pins+0x214>)
 80020fc:	f007 fda0 	bl	8009c40 <HAL_GPIO_WritePin>
			C2_LOW;
 8002100:	2200      	movs	r2, #0
 8002102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002106:	4820      	ldr	r0, [pc, #128]	; (8002188 <Tact_pins+0x214>)
 8002108:	f007 fd9a 	bl	8009c40 <HAL_GPIO_WritePin>
			C3_LOW;
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	481d      	ldr	r0, [pc, #116]	; (8002188 <Tact_pins+0x214>)
 8002114:	f007 fd94 	bl	8009c40 <HAL_GPIO_WritePin>
			C4_HIGH;
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <Tact_pins+0x214>)
 8002120:	f007 fd8e 	bl	8009c40 <HAL_GPIO_WritePin>
			C5_LOW;
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <Tact_pins+0x214>)
 800212c:	f007 fd88 	bl	8009c40 <HAL_GPIO_WritePin>
			break;
 8002130:	e024      	b.n	800217c <Tact_pins+0x208>
		case 5:
			C0_LOW;
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <Tact_pins+0x214>)
 800213a:	f007 fd81 	bl	8009c40 <HAL_GPIO_WritePin>
			C1_LOW;
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <Tact_pins+0x214>)
 8002146:	f007 fd7b 	bl	8009c40 <HAL_GPIO_WritePin>
			C2_LOW;
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <Tact_pins+0x214>)
 8002152:	f007 fd75 	bl	8009c40 <HAL_GPIO_WritePin>
			C3_LOW;
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215c:	480a      	ldr	r0, [pc, #40]	; (8002188 <Tact_pins+0x214>)
 800215e:	f007 fd6f 	bl	8009c40 <HAL_GPIO_WritePin>
			C4_LOW;
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002168:	4807      	ldr	r0, [pc, #28]	; (8002188 <Tact_pins+0x214>)
 800216a:	f007 fd69 	bl	8009c40 <HAL_GPIO_WritePin>
			C5_HIGH;
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <Tact_pins+0x214>)
 8002176:	f007 fd63 	bl	8009c40 <HAL_GPIO_WritePin>
			break;
 800217a:	bf00      	nop
	}
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20007080 	.word	0x20007080
 8002184:	2aaaaaab 	.word	0x2aaaaaab
 8002188:	40020c00 	.word	0x40020c00

0800218c <Key_Read>:


static void Key_Read(void)
{
 800218c:	b598      	push	{r3, r4, r7, lr}
 800218e:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <Key_Read+0xe0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461c      	mov	r4, r3
 8002196:	2101      	movs	r1, #1
 8002198:	4835      	ldr	r0, [pc, #212]	; (8002270 <Key_Read+0xe4>)
 800219a:	f007 fd39 	bl	8009c10 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <Key_Read+0xe8>)
 80021a4:	4623      	mov	r3, r4
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4423      	add	r3, r4
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <Key_Read+0xe0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461c      	mov	r4, r3
 80021b8:	2102      	movs	r1, #2
 80021ba:	482d      	ldr	r0, [pc, #180]	; (8002270 <Key_Read+0xe4>)
 80021bc:	f007 fd28 	bl	8009c10 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <Key_Read+0xe8>)
 80021c6:	4623      	mov	r3, r4
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4423      	add	r3, r4
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3301      	adds	r3, #1
 80021d2:	460a      	mov	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <Key_Read+0xe0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461c      	mov	r4, r3
 80021dc:	2104      	movs	r1, #4
 80021de:	4824      	ldr	r0, [pc, #144]	; (8002270 <Key_Read+0xe4>)
 80021e0:	f007 fd16 	bl	8009c10 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <Key_Read+0xe8>)
 80021ea:	4623      	mov	r3, r4
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4423      	add	r3, r4
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3302      	adds	r3, #2
 80021f6:	460a      	mov	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <Key_Read+0xe0>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461c      	mov	r4, r3
 8002200:	2108      	movs	r1, #8
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <Key_Read+0xe4>)
 8002204:	f007 fd04 	bl	8009c10 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	4619      	mov	r1, r3
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <Key_Read+0xe8>)
 800220e:	4623      	mov	r3, r4
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4423      	add	r3, r4
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3303      	adds	r3, #3
 800221a:	460a      	mov	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <Key_Read+0xe0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461c      	mov	r4, r3
 8002224:	2110      	movs	r1, #16
 8002226:	4812      	ldr	r0, [pc, #72]	; (8002270 <Key_Read+0xe4>)
 8002228:	f007 fcf2 	bl	8009c10 <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	4619      	mov	r1, r3
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <Key_Read+0xe8>)
 8002232:	4623      	mov	r3, r4
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4423      	add	r3, r4
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	460a      	mov	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <Key_Read+0xe0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461c      	mov	r4, r3
 8002248:	2120      	movs	r1, #32
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <Key_Read+0xe4>)
 800224c:	f007 fce0 	bl	8009c10 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <Key_Read+0xe8>)
 8002256:	4623      	mov	r3, r4
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4423      	add	r3, r4
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3305      	adds	r3, #5
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	bd98      	pop	{r3, r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	20007080 	.word	0x20007080
 8002270:	40020c00 	.word	0x40020c00
 8002274:	2000085c 	.word	0x2000085c

08002278 <key_filter_all>:

static void key_filter_all()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e013      	b.n	80022ac <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8002284:	2300      	movs	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	e00a      	b.n	80022a0 <key_filter_all+0x28>
			key_filter(x, y);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f811 	bl	80022bc <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	ddf1      	ble.n	800228a <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	dde8      	ble.n	8002284 <key_filter_all+0xc>
		}
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 80022bc:	b490      	push	{r4, r7}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	79b9      	ldrb	r1, [r7, #6]
 80022d0:	483e      	ldr	r0, [pc, #248]	; (80023cc <key_filter+0x110>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	440b      	add	r3, r1
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	79b9      	ldrb	r1, [r7, #6]
 80022e8:	4839      	ldr	r0, [pc, #228]	; (80023d0 <key_filter+0x114>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4403      	add	r3, r0
 80022f4:	440b      	add	r3, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	bf28      	it	cs
 80022fc:	230f      	movcs	r3, #15
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	79b9      	ldrb	r1, [r7, #6]
 8002304:	3301      	adds	r3, #1
 8002306:	b2dc      	uxtb	r4, r3
 8002308:	4831      	ldr	r0, [pc, #196]	; (80023d0 <key_filter+0x114>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	440b      	add	r3, r1
 8002316:	4622      	mov	r2, r4
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e024      	b.n	8002366 <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	79b9      	ldrb	r1, [r7, #6]
 8002320:	482b      	ldr	r0, [pc, #172]	; (80023d0 <key_filter+0x114>)
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4403      	add	r3, r0
 800232c:	440b      	add	r3, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <key_filter+0x92>
 8002334:	79fa      	ldrb	r2, [r7, #7]
 8002336:	79b9      	ldrb	r1, [r7, #6]
 8002338:	4825      	ldr	r0, [pc, #148]	; (80023d0 <key_filter+0x114>)
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4403      	add	r3, r0
 8002344:	440b      	add	r3, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2d8      	uxtb	r0, r3
 800234c:	e000      	b.n	8002350 <key_filter+0x94>
 800234e:	2000      	movs	r0, #0
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	79b9      	ldrb	r1, [r7, #6]
 8002354:	4c1e      	ldr	r4, [pc, #120]	; (80023d0 <key_filter+0x114>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4423      	add	r3, r4
 8002360:	440b      	add	r3, r1
 8002362:	4602      	mov	r2, r0
 8002364:	701a      	strb	r2, [r3, #0]
		//key_sence_count[x][y]= 0;
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	79b9      	ldrb	r1, [r7, #6]
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <key_filter+0x114>)
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4403      	add	r3, r0
 8002376:	440b      	add	r3, r1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d10a      	bne.n	8002394 <key_filter+0xd8>
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	79b9      	ldrb	r1, [r7, #6]
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <key_filter+0x118>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4403      	add	r3, r0
 800238e:	440b      	add	r3, r1
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	79b9      	ldrb	r1, [r7, #6]
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <key_filter+0x114>)
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4403      	add	r3, r0
 80023a4:	440b      	add	r3, r1
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <key_filter+0x106>
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	79b9      	ldrb	r1, [r7, #6]
 80023b0:	4808      	ldr	r0, [pc, #32]	; (80023d4 <key_filter+0x118>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4403      	add	r3, r0
 80023bc:	440b      	add	r3, r1
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc90      	pop	{r4, r7}
 80023ca:	4770      	bx	lr
 80023cc:	2000085c 	.word	0x2000085c
 80023d0:	200008c8 	.word	0x200008c8
 80023d4:	20000880 	.word	0x20000880

080023d8 <GetPositiveFront>:

static void GetPositiveFront()
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e047      	b.n	8002474 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	e03e      	b.n	8002468 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <GetPositiveFront+0xb0>)
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	18ca      	adds	r2, r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <GetPositiveFront+0x46>
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <GetPositiveFront+0xb4>)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	18ca      	adds	r2, r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <GetPositiveFront+0x46>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <GetPositiveFront+0x48>
 800241e:	2300      	movs	r3, #0
 8002420:	b2d8      	uxtb	r0, r3
 8002422:	491b      	ldr	r1, [pc, #108]	; (8002490 <GetPositiveFront+0xb8>)
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	18ca      	adds	r2, r1, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 8002438:	4913      	ldr	r1, [pc, #76]	; (8002488 <GetPositiveFront+0xb0>)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	18ca      	adds	r2, r1, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	7818      	ldrb	r0, [r3, #0]
 800244c:	490f      	ldr	r1, [pc, #60]	; (800248c <GetPositiveFront+0xb4>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	18ca      	adds	r2, r1, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b05      	cmp	r3, #5
 800246c:	ddbd      	ble.n	80023ea <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b05      	cmp	r3, #5
 8002478:	ddb4      	ble.n	80023e4 <GetPositiveFront+0xc>
		}
	}
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000880 	.word	0x20000880
 800248c:	200008a4 	.word	0x200008a4
 8002490:	200008ec 	.word	0x200008ec

08002494 <SendToLcd>:



static void SendToLcd()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	sendStr(lcd[0], 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <SendToLcd+0x30>)
 800249e:	f001 ff61 	bl	8004364 <sendStr>
	sendStr(lcd[1], 1, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2101      	movs	r1, #1
 80024a6:	4808      	ldr	r0, [pc, #32]	; (80024c8 <SendToLcd+0x34>)
 80024a8:	f001 ff5c 	bl	8004364 <sendStr>
	sendStr(lcd[2], 2, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <SendToLcd+0x38>)
 80024b2:	f001 ff57 	bl	8004364 <sendStr>
	sendStr(lcd[3], 3, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2103      	movs	r1, #3
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <SendToLcd+0x3c>)
 80024bc:	f001 ff52 	bl	8004364 <sendStr>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20007030 	.word	0x20007030
 80024c8:	20007044 	.word	0x20007044
 80024cc:	20007058 	.word	0x20007058
 80024d0:	2000706c 	.word	0x2000706c

080024d4 <OnKeyPress>:
		},
};


int OnKeyPress(uint8_t *req,uint8_t req_length, uint8_t *answer)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	460b      	mov	r3, r1
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	72fb      	strb	r3, [r7, #11]
	char *p = (char*)req;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	617b      	str	r3, [r7, #20]
	if(!strncmp(p, "Enter", strlen("Enter")))
 80024e6:	2205      	movs	r2, #5
 80024e8:	49bd      	ldr	r1, [pc, #756]	; (80027e0 <OnKeyPress+0x30c>)
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f01d f814 	bl	801f518 <strncmp>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <OnKeyPress+0x32>
	{
		if(!OnEnterPressAction()) return 0;
 80024f6:	f000 f9a3 	bl	8002840 <OnEnterPressAction>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8156 	bne.w	80027ae <OnKeyPress+0x2da>
 8002502:	2300      	movs	r3, #0
 8002504:	e168      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Esc", strlen("Esc")))
 8002506:	2203      	movs	r2, #3
 8002508:	49b6      	ldr	r1, [pc, #728]	; (80027e4 <OnKeyPress+0x310>)
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f01d f804 	bl	801f518 <strncmp>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <OnKeyPress+0x52>
	{
		if(!OnEscPressKey()) return 0;
 8002516:	f000 fe45 	bl	80031a4 <OnEscPressKey>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 8146 	bne.w	80027ae <OnKeyPress+0x2da>
 8002522:	2300      	movs	r3, #0
 8002524:	e158      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Delete", strlen("Delete")))
 8002526:	2206      	movs	r2, #6
 8002528:	49af      	ldr	r1, [pc, #700]	; (80027e8 <OnKeyPress+0x314>)
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f01c fff4 	bl	801f518 <strncmp>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <OnKeyPress+0x72>
	{
		if(!OnDeletePressKey())return 0;
 8002536:	f001 fc3f 	bl	8003db8 <OnDeletePressKey>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 8136 	bne.w	80027ae <OnKeyPress+0x2da>
 8002542:	2300      	movs	r3, #0
 8002544:	e148      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Up", strlen("Up")))
 8002546:	2202      	movs	r2, #2
 8002548:	49a8      	ldr	r1, [pc, #672]	; (80027ec <OnKeyPress+0x318>)
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f01c ffe4 	bl	801f518 <strncmp>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <OnKeyPress+0x92>
	{
		if(!OnUpPressKey())return 0;
 8002556:	f000 fd1f 	bl	8002f98 <OnUpPressKey>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8126 	bne.w	80027ae <OnKeyPress+0x2da>
 8002562:	2300      	movs	r3, #0
 8002564:	e138      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Right", strlen("Right")))
 8002566:	2205      	movs	r2, #5
 8002568:	49a1      	ldr	r1, [pc, #644]	; (80027f0 <OnKeyPress+0x31c>)
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f01c ffd4 	bl	801f518 <strncmp>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <OnKeyPress+0xb2>
	{
		if(!OnRightPressKey())return 0;
 8002576:	f000 fc81 	bl	8002e7c <OnRightPressKey>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 8116 	bne.w	80027ae <OnKeyPress+0x2da>
 8002582:	2300      	movs	r3, #0
 8002584:	e128      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Left", strlen("Left")))
 8002586:	2204      	movs	r2, #4
 8002588:	499a      	ldr	r1, [pc, #616]	; (80027f4 <OnKeyPress+0x320>)
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f01c ffc4 	bl	801f518 <strncmp>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <OnKeyPress+0xd2>
	{
		if(!OnLeftPressKey())return 0;
 8002596:	f000 fbe3 	bl	8002d60 <OnLeftPressKey>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 8106 	bne.w	80027ae <OnKeyPress+0x2da>
 80025a2:	2300      	movs	r3, #0
 80025a4:	e118      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Down", strlen("Down")))
 80025a6:	2204      	movs	r2, #4
 80025a8:	4993      	ldr	r1, [pc, #588]	; (80027f8 <OnKeyPress+0x324>)
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f01c ffb4 	bl	801f518 <strncmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <OnKeyPress+0xf2>
	{
		if(!OnDownPressKey())return 0;
 80025b6:	f000 fb67 	bl	8002c88 <OnDownPressKey>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 80f6 	bne.w	80027ae <OnKeyPress+0x2da>
 80025c2:	2300      	movs	r3, #0
 80025c4:	e108      	b.n	80027d8 <OnKeyPress+0x304>

	}
	else if(!strncmp(p, "F1", strlen("F1")))
 80025c6:	2202      	movs	r2, #2
 80025c8:	498c      	ldr	r1, [pc, #560]	; (80027fc <OnKeyPress+0x328>)
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f01c ffa4 	bl	801f518 <strncmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <OnKeyPress+0x112>
	{
		if(!OnF1PressKey())return 0;
 80025d6:	f000 fd4d 	bl	8003074 <OnF1PressKey>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 80e6 	bne.w	80027ae <OnKeyPress+0x2da>
 80025e2:	2300      	movs	r3, #0
 80025e4:	e0f8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "F2", strlen("F2")))
 80025e6:	2202      	movs	r2, #2
 80025e8:	4985      	ldr	r1, [pc, #532]	; (8002800 <OnKeyPress+0x32c>)
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f01c ff94 	bl	801f518 <strncmp>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <OnKeyPress+0x132>
	{
		if(!OnF2PressKey())return 0;
 80025f6:	f000 fd4f 	bl	8003098 <OnF2PressKey>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 80d6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002602:	2300      	movs	r3, #0
 8002604:	e0e8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "F3", strlen("F3")))
 8002606:	2202      	movs	r2, #2
 8002608:	497e      	ldr	r1, [pc, #504]	; (8002804 <OnKeyPress+0x330>)
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f01c ff84 	bl	801f518 <strncmp>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <OnKeyPress+0x152>
	{
		if(!OnF3PressKey())return 0;
 8002616:	f000 fd71 	bl	80030fc <OnF3PressKey>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 80c6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002622:	2300      	movs	r3, #0
 8002624:	e0d8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "F4", strlen("F4")))
 8002626:	2202      	movs	r2, #2
 8002628:	4977      	ldr	r1, [pc, #476]	; (8002808 <OnKeyPress+0x334>)
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f01c ff74 	bl	801f518 <strncmp>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <OnKeyPress+0x172>
	{
		if(!OnF4PressKey())return 0;
 8002636:	f000 fd97 	bl	8003168 <OnF4PressKey>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 80b6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002642:	2300      	movs	r3, #0
 8002644:	e0c8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad0", strlen("NumPad0")))
 8002646:	2207      	movs	r2, #7
 8002648:	4970      	ldr	r1, [pc, #448]	; (800280c <OnKeyPress+0x338>)
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f01c ff64 	bl	801f518 <strncmp>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <OnKeyPress+0x194>
	{
		if(!OnNumberPressKey(0))return 0;
 8002656:	2000      	movs	r0, #0
 8002658:	f001 fb62 	bl	8003d20 <OnNumberPressKey>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 80a5 	bne.w	80027ae <OnKeyPress+0x2da>
 8002664:	2300      	movs	r3, #0
 8002666:	e0b7      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad1", strlen("NumPad1")))
 8002668:	2207      	movs	r2, #7
 800266a:	4969      	ldr	r1, [pc, #420]	; (8002810 <OnKeyPress+0x33c>)
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	f01c ff53 	bl	801f518 <strncmp>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <OnKeyPress+0x1b6>
	{
		if(!OnNumberPressKey(1))return 0;
 8002678:	2001      	movs	r0, #1
 800267a:	f001 fb51 	bl	8003d20 <OnNumberPressKey>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8094 	bne.w	80027ae <OnKeyPress+0x2da>
 8002686:	2300      	movs	r3, #0
 8002688:	e0a6      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad2", strlen("NumPad2")))
 800268a:	2207      	movs	r2, #7
 800268c:	4961      	ldr	r1, [pc, #388]	; (8002814 <OnKeyPress+0x340>)
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f01c ff42 	bl	801f518 <strncmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <OnKeyPress+0x1d8>
	{
		if(!OnNumberPressKey(2))return 0;
 800269a:	2002      	movs	r0, #2
 800269c:	f001 fb40 	bl	8003d20 <OnNumberPressKey>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8083 	bne.w	80027ae <OnKeyPress+0x2da>
 80026a8:	2300      	movs	r3, #0
 80026aa:	e095      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad3", strlen("NumPad3")))
 80026ac:	2207      	movs	r2, #7
 80026ae:	495a      	ldr	r1, [pc, #360]	; (8002818 <OnKeyPress+0x344>)
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f01c ff31 	bl	801f518 <strncmp>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <OnKeyPress+0x1f8>
	{
		if(!OnNumberPressKey(3))return 0;
 80026bc:	2003      	movs	r0, #3
 80026be:	f001 fb2f 	bl	8003d20 <OnNumberPressKey>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d172      	bne.n	80027ae <OnKeyPress+0x2da>
 80026c8:	2300      	movs	r3, #0
 80026ca:	e085      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad4", strlen("NumPad4")))
 80026cc:	2207      	movs	r2, #7
 80026ce:	4953      	ldr	r1, [pc, #332]	; (800281c <OnKeyPress+0x348>)
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f01c ff21 	bl	801f518 <strncmp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <OnKeyPress+0x218>
	{
		if(!OnNumberPressKey(4))return 0;
 80026dc:	2004      	movs	r0, #4
 80026de:	f001 fb1f 	bl	8003d20 <OnNumberPressKey>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d162      	bne.n	80027ae <OnKeyPress+0x2da>
 80026e8:	2300      	movs	r3, #0
 80026ea:	e075      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad5", strlen("NumPad5")))
 80026ec:	2207      	movs	r2, #7
 80026ee:	494c      	ldr	r1, [pc, #304]	; (8002820 <OnKeyPress+0x34c>)
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f01c ff11 	bl	801f518 <strncmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <OnKeyPress+0x238>
	{
		if(!OnNumberPressKey(5))return 0;
 80026fc:	2005      	movs	r0, #5
 80026fe:	f001 fb0f 	bl	8003d20 <OnNumberPressKey>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d152      	bne.n	80027ae <OnKeyPress+0x2da>
 8002708:	2300      	movs	r3, #0
 800270a:	e065      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad6", strlen("NumPad6")))
 800270c:	2207      	movs	r2, #7
 800270e:	4945      	ldr	r1, [pc, #276]	; (8002824 <OnKeyPress+0x350>)
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f01c ff01 	bl	801f518 <strncmp>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <OnKeyPress+0x258>
	{
		if(!OnNumberPressKey(6))return 0;
 800271c:	2006      	movs	r0, #6
 800271e:	f001 faff 	bl	8003d20 <OnNumberPressKey>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d142      	bne.n	80027ae <OnKeyPress+0x2da>
 8002728:	2300      	movs	r3, #0
 800272a:	e055      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad7", strlen("NumPad7")))
 800272c:	2207      	movs	r2, #7
 800272e:	493e      	ldr	r1, [pc, #248]	; (8002828 <OnKeyPress+0x354>)
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f01c fef1 	bl	801f518 <strncmp>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <OnKeyPress+0x278>
	{
		if(!OnNumberPressKey(7))return 0;
 800273c:	2007      	movs	r0, #7
 800273e:	f001 faef 	bl	8003d20 <OnNumberPressKey>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d132      	bne.n	80027ae <OnKeyPress+0x2da>
 8002748:	2300      	movs	r3, #0
 800274a:	e045      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad8", strlen("NumPad8")))
 800274c:	2207      	movs	r2, #7
 800274e:	4937      	ldr	r1, [pc, #220]	; (800282c <OnKeyPress+0x358>)
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f01c fee1 	bl	801f518 <strncmp>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <OnKeyPress+0x298>
	{
		if(!OnNumberPressKey(8))return 0;
 800275c:	2008      	movs	r0, #8
 800275e:	f001 fadf 	bl	8003d20 <OnNumberPressKey>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d122      	bne.n	80027ae <OnKeyPress+0x2da>
 8002768:	2300      	movs	r3, #0
 800276a:	e035      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad9", strlen("NumPad9")))
 800276c:	2207      	movs	r2, #7
 800276e:	4930      	ldr	r1, [pc, #192]	; (8002830 <OnKeyPress+0x35c>)
 8002770:	6978      	ldr	r0, [r7, #20]
 8002772:	f01c fed1 	bl	801f518 <strncmp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <OnKeyPress+0x2b8>
	{
		if(!OnNumberPressKey(9))return 0;
 800277c:	2009      	movs	r0, #9
 800277e:	f001 facf 	bl	8003d20 <OnNumberPressKey>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d112      	bne.n	80027ae <OnKeyPress+0x2da>
 8002788:	2300      	movs	r3, #0
 800278a:	e025      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Dec", strlen("Dec")))
 800278c:	2203      	movs	r2, #3
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <OnKeyPress+0x360>)
 8002790:	6978      	ldr	r0, [r7, #20]
 8002792:	f01c fec1 	bl	801f518 <strncmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <OnKeyPress+0x2d6>
	{
		if(!OnDecPressKey())return 0;
 800279c:	f001 fb66 	bl	8003e6c <OnDecPressKey>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <OnKeyPress+0x2da>
 80027a6:	2300      	movs	r3, #0
 80027a8:	e016      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else return 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e014      	b.n	80027d8 <OnKeyPress+0x304>
	memcpy(answer,lcdAnswer,80);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a21      	ldr	r2, [pc, #132]	; (8002838 <OnKeyPress+0x364>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	4611      	mov	r1, r2
 80027b6:	2350      	movs	r3, #80	; 0x50
 80027b8:	461a      	mov	r2, r3
 80027ba:	f01b fde3 	bl	801e384 <memcpy>
	if(currentCursorPosition==-1)
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <OnKeyPress+0x368>)
 80027c0:	f993 3000 	ldrsb.w	r3, [r3]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d102      	bne.n	80027d0 <OnKeyPress+0x2fc>
	{
		//answer[80] = 255;
		return -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	e003      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else
	{
		//answer[80] = currentCursorPosition+40;
	}
	return currentCursorPosition+40;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <OnKeyPress+0x368>)
 80027d2:	f993 3000 	ldrsb.w	r3, [r3]
 80027d6:	3328      	adds	r3, #40	; 0x28
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	08023574 	.word	0x08023574
 80027e4:	0802357c 	.word	0x0802357c
 80027e8:	08023580 	.word	0x08023580
 80027ec:	08023588 	.word	0x08023588
 80027f0:	0802358c 	.word	0x0802358c
 80027f4:	08023594 	.word	0x08023594
 80027f8:	0802359c 	.word	0x0802359c
 80027fc:	080235a4 	.word	0x080235a4
 8002800:	080235a8 	.word	0x080235a8
 8002804:	080235ac 	.word	0x080235ac
 8002808:	080235b0 	.word	0x080235b0
 800280c:	080235b4 	.word	0x080235b4
 8002810:	080235bc 	.word	0x080235bc
 8002814:	080235c4 	.word	0x080235c4
 8002818:	080235cc 	.word	0x080235cc
 800281c:	080235d4 	.word	0x080235d4
 8002820:	080235dc 	.word	0x080235dc
 8002824:	080235e4 	.word	0x080235e4
 8002828:	080235ec 	.word	0x080235ec
 800282c:	080235f4 	.word	0x080235f4
 8002830:	080235fc 	.word	0x080235fc
 8002834:	08023604 	.word	0x08023604
 8002838:	20007084 	.word	0x20007084
 800283c:	200000c3 	.word	0x200000c3

08002840 <OnEnterPressAction>:

static uint8_t OnEnterPressAction()
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
	Row *par = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
	if(currentParameters == NULL)
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <OnEnterPressAction+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <OnEnterPressAction+0x52>
	{
		currentCursorPosition = -1;
 8002852:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <OnEnterPressAction+0x1c4>)
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	701a      	strb	r2, [r3, #0]
		currentParameters = indication_rows;
 8002858:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <OnEnterPressAction+0x1c0>)
 800285a:	4a6b      	ldr	r2, [pc, #428]	; (8002a08 <OnEnterPressAction+0x1c8>)
 800285c:	601a      	str	r2, [r3, #0]
		paramIndex = 0;
 800285e:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <OnEnterPressAction+0x1cc>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
		currentParamLength = sizeof(indication_rows)/sizeof(Row);
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <OnEnterPressAction+0x1d0>)
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]
		editMode = 0;
 800286a:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <OnEnterPressAction+0x1d4>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
		groupParamName = indicationName;
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <OnEnterPressAction+0x1d8>)
 8002872:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <OnEnterPressAction+0x1dc>)
 8002874:	601a      	str	r2, [r3, #0]
		groupParamNameLength = strlen(indicationName);
 8002876:	4869      	ldr	r0, [pc, #420]	; (8002a1c <OnEnterPressAction+0x1dc>)
 8002878:	f7fd fcaa 	bl	80001d0 <strlen>
 800287c:	4603      	mov	r3, r0
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <OnEnterPressAction+0x1e0>)
 8002882:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters);
 8002884:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <OnEnterPressAction+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fcbd 	bl	8003208 <ShowParameter>
		return 1;
 800288e:	2301      	movs	r3, #1
 8002890:	e0b2      	b.n	80029f8 <OnEnterPressAction+0x1b8>
	}
	else if(currentParameters!=Errors)// В случае если находимся в параметре
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <OnEnterPressAction+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <OnEnterPressAction+0x1e4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f000 80ac 	beq.w	80029f6 <OnEnterPressAction+0x1b6>
	{
		par = currentParameters+paramIndex;
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <OnEnterPressAction+0x1c0>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <OnEnterPressAction+0x1cc>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	607b      	str	r3, [r7, #4]
		if(!editMode)// Если находимся не в режиме редактирования
 80028b4:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <OnEnterPressAction+0x1d4>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 8094 	bne.w	80029e6 <OnEnterPressAction+0x1a6>
		{

			if(par->isEdited)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8097 	beq.w	80029f6 <OnEnterPressAction+0x1b6>
			{
				memset(editedValue,0,20);
 80028c8:	2214      	movs	r2, #20
 80028ca:	2100      	movs	r1, #0
 80028cc:	4856      	ldr	r0, [pc, #344]	; (8002a28 <OnEnterPressAction+0x1e8>)
 80028ce:	f01b fd81 	bl	801e3d4 <memset>
				Clear();
 80028d2:	f000 f8ad 	bl	8002a30 <Clear>
				if(!par->isEnum)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <OnEnterPressAction+0xbe>
				{
					GetEditedValue(par);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 fb90 	bl	8004004 <GetEditedValue>
					editMode = 1;
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <OnEnterPressAction+0x1d4>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
					currentCursorPosition = par->param_pos;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	79db      	ldrb	r3, [r3, #7]
 80028ee:	b25a      	sxtb	r2, r3
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <OnEnterPressAction+0x1c4>)
 80028f2:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fc87 	bl	8003208 <ShowParameter>
					return 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07c      	b.n	80029f8 <OnEnterPressAction+0x1b8>
				}
				else
				{
					if(par->enums==NULL)return 0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <OnEnterPressAction+0xca>
 8002906:	2300      	movs	r3, #0
 8002908:	e076      	b.n	80029f8 <OnEnterPressAction+0x1b8>
					memset(editedValue,0,20);
 800290a:	2214      	movs	r2, #20
 800290c:	2100      	movs	r1, #0
 800290e:	4846      	ldr	r0, [pc, #280]	; (8002a28 <OnEnterPressAction+0x1e8>)
 8002910:	f01b fd60 	bl	801e3d4 <memset>
					switch (par->type) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7d5b      	ldrb	r3, [r3, #21]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <OnEnterPressAction+0xe2>
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00b      	beq.n	8002938 <OnEnterPressAction+0xf8>
							break;
						case ROW_UINT:
							currentEnumKey = *((uint32_t*)par->data);
							break;
						default:
							break;
 8002920:	e015      	b.n	800294e <OnEnterPressAction+0x10e>
							currentEnumKey = *((uint16_t*)par->data);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
							break;
 8002936:	e00a      	b.n	800294e <OnEnterPressAction+0x10e>
							currentEnumKey = *((uint32_t*)par->data);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002948:	edc3 7a00 	vstr	s15, [r3]
							break;
 800294c:	bf00      	nop
					}
					Dictionary *dict = FindDictionaryFromValue(currentEnumKey, par->enums, par->enums_len);
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7d1b      	ldrb	r3, [r3, #20]
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	f000 ff70 	bl	8003848 <FindDictionaryFromValue>
 8002968:	6038      	str	r0, [r7, #0]
					if(dict==NULL)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d119      	bne.n	80029a4 <OnEnterPressAction+0x164>
					{
						currentEnumKey = par->enums->value;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002978:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,par->enums->name, strlen(par->enums->name));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	79db      	ldrb	r3, [r3, #7]
 800297e:	461a      	mov	r2, r3
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <OnEnterPressAction+0x1e8>)
 8002982:	18d4      	adds	r4, r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	685d      	ldr	r5, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fc1d 	bl	80001d0 <strlen>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4629      	mov	r1, r5
 800299c:	4620      	mov	r0, r4
 800299e:	f01b fcf1 	bl	801e384 <memcpy>
 80029a2:	e015      	b.n	80029d0 <OnEnterPressAction+0x190>
					}
					else
					{
						currentEnumKey = dict->value;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <OnEnterPressAction+0x1ec>)
 80029aa:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,dict->name, strlen(dict->name));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	79db      	ldrb	r3, [r3, #7]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <OnEnterPressAction+0x1e8>)
 80029b4:	18d4      	adds	r4, r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685d      	ldr	r5, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fc06 	bl	80001d0 <strlen>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4629      	mov	r1, r5
 80029ca:	4620      	mov	r0, r4
 80029cc:	f01b fcda 	bl	801e384 <memcpy>
					}
					currentCursorPosition = -1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <OnEnterPressAction+0x1c4>)
 80029d2:	22ff      	movs	r2, #255	; 0xff
 80029d4:	701a      	strb	r2, [r3, #0]
					editMode = 1;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <OnEnterPressAction+0x1d4>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fc13 	bl	8003208 <ShowParameter>
					return 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e008      	b.n	80029f8 <OnEnterPressAction+0x1b8>
				}
			}
		}
		else
		{
			AcceptEdit(par);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f001 f89a 	bl	8003b20 <AcceptEdit>
			ShowParameter(par);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fc0b 	bl	8003208 <ShowParameter>
			return 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <OnEnterPressAction+0x1b8>
		}
	}
	return 0;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002a00:	20000910 	.word	0x20000910
 8002a04:	200000c3 	.word	0x200000c3
 8002a08:	20000354 	.word	0x20000354
 8002a0c:	20000914 	.word	0x20000914
 8002a10:	20007150 	.word	0x20007150
 8002a14:	20000915 	.word	0x20000915
 8002a18:	2000714c 	.word	0x2000714c
 8002a1c:	200000b8 	.word	0x200000b8
 8002a20:	200070d4 	.word	0x200070d4
 8002a24:	2000012c 	.word	0x2000012c
 8002a28:	200070d8 	.word	0x200070d8
 8002a2c:	20000918 	.word	0x20000918

08002a30 <Clear>:



static void Clear()
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	e016      	b.n	8002a6a <Clear+0x3a>
		for (int j = 0; j < 20; ++j) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	e00d      	b.n	8002a5e <Clear+0x2e>
			lcdAnswer[i][j] = 0;
 8002a42:	490f      	ldr	r1, [pc, #60]	; (8002a80 <Clear+0x50>)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	18ca      	adds	r2, r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 20; ++j) {
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b13      	cmp	r3, #19
 8002a62:	ddee      	ble.n	8002a42 <Clear+0x12>
	for (int i = 0; i < 4; ++i) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	dde5      	ble.n	8002a3c <Clear+0xc>
		}
	}
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20007084 	.word	0x20007084

08002a84 <ShowMainDisplay>:

static uint8_t ShowMainDisplay()
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b0a8      	sub	sp, #160	; 0xa0
 8002a88:	af02      	add	r7, sp, #8
	Clear();
 8002a8a:	f7ff ffd1 	bl	8002a30 <Clear>

	if(meas_data.automat_mode)
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002a90:	8adb      	ldrh	r3, [r3, #22]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03e      	beq.n	8002b14 <ShowMainDisplay+0x90>
	{
		//Aвто ВКЛ
		char  autoOn[] = {0x41, 0xE2, 0xF2, 0xEE, 0x20, 0xC2, 0xCA, 0xCB,  0x00};
 8002a96:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <ShowMainDisplay+0x1c4>)
 8002a98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9e:	c303      	stmia	r3!, {r0, r1}
 8002aa0:	701a      	strb	r2, [r3, #0]
		sprintf(lcdAnswer[0],"%s %d/%d",autoOn, meas_data.probInKanistra, settings.retain.nakop_SV);
 8002aa2:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002aa4:	8b1b      	ldrh	r3, [r3, #24]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <ShowMainDisplay+0x1c8>)
 8002aaa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002aac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4966      	ldr	r1, [pc, #408]	; (8002c50 <ShowMainDisplay+0x1cc>)
 8002ab6:	4867      	ldr	r0, [pc, #412]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002ab8:	f01c fc90 	bl	801f3dc <siprintf>
		//Отбор через n с
		char next[] = {0xCE, 0xF2, 0xE1, 0xEE, 0xF0, 0x20, 0xF7, 0xE5, 0xF0, 0xE5, 0xE7,  0x00};
 8002abc:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <ShowMainDisplay+0x1d4>)
 8002abe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ac2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		// Накопитель полный
		char full[] = {0xCD, 0xE0, 0xEA, 0xEE, 0xEF, 0xE8, 0xF2, 0xE5, 0xEB, 0xFC, 0x20, 0xEF, 0xEE, 0xEB, 0xED, 0xFB, 0xE9,  0x00};
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <ShowMainDisplay+0x1d8>)
 8002aca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002ace:	461d      	mov	r5, r3
 8002ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	8023      	strh	r3, [r4, #0]

		if(meas_data.nakopitelFull)
 8002ad8:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002ada:	8b5b      	ldrh	r3, [r3, #26]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <ShowMainDisplay+0x76>
		{
			memcpy(lcdAnswer[2],full,sizeof(full));
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002ae2:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8002ae6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aec:	6028      	str	r0, [r5, #0]
 8002aee:	6069      	str	r1, [r5, #4]
 8002af0:	60aa      	str	r2, [r5, #8]
 8002af2:	60eb      	str	r3, [r5, #12]
 8002af4:	8823      	ldrh	r3, [r4, #0]
 8002af6:	822b      	strh	r3, [r5, #16]
 8002af8:	e01f      	b.n	8002b3a <ShowMainDisplay+0xb6>
		}
		else
		{
			if(meas_data.probotbor_ready)sprintf(lcdAnswer[2],"%s %d c",next, meas_data.toNextOtborTime);
 8002afa:	4b52      	ldr	r3, [pc, #328]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002afc:	8a1b      	ldrh	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01b      	beq.n	8002b3a <ShowMainDisplay+0xb6>
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b0a:	4955      	ldr	r1, [pc, #340]	; (8002c60 <ShowMainDisplay+0x1dc>)
 8002b0c:	4855      	ldr	r0, [pc, #340]	; (8002c64 <ShowMainDisplay+0x1e0>)
 8002b0e:	f01c fc65 	bl	801f3dc <siprintf>
 8002b12:	e012      	b.n	8002b3a <ShowMainDisplay+0xb6>

	}
	else
	{
		//Aвто ОТКЛ
		char  autoOff[] = {0x41, 0xE2, 0xF2, 0xEE, 0x20, 0xCE, 0xD2, 0xCA, 0xCB,  0x00};
 8002b14:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <ShowMainDisplay+0x1e4>)
 8002b16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1c:	c303      	stmia	r3!, {r0, r1}
 8002b1e:	801a      	strh	r2, [r3, #0]
		sprintf(lcdAnswer[0],"%s %d/%d",autoOff, meas_data.probInKanistra, settings.retain.nakop_SV);
 8002b20:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b22:	8b1b      	ldrh	r3, [r3, #24]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <ShowMainDisplay+0x1c8>)
 8002b28:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002b2a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	4947      	ldr	r1, [pc, #284]	; (8002c50 <ShowMainDisplay+0x1cc>)
 8002b34:	4847      	ldr	r0, [pc, #284]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002b36:	f01c fc51 	bl	801f3dc <siprintf>
	}

	if(meas_data.probotbor_ready)
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b3c:	8a1b      	ldrh	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <ShowMainDisplay+0xe2>
	{
		//Готов к отбору
		char  ready[] = {0xC3,0xEE,0xF2,0xEE,0xE2,0x20,0xEA,0x20,0xEE,0xF2,0xE1,0xEE,0xF0,0xF3};
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <ShowMainDisplay+0x1e8>)
 8002b44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b4a:	c407      	stmia	r4!, {r0, r1, r2}
 8002b4c:	8023      	strh	r3, [r4, #0]
		memcpy(lcdAnswer[1],ready,sizeof(ready));
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002b50:	f103 0414 	add.w	r4, r3, #20
 8002b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	6061      	str	r1, [r4, #4]
 8002b5e:	60a2      	str	r2, [r4, #8]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	e055      	b.n	8002c12 <ShowMainDisplay+0x18e>
	}
	else if(meas_data.probotbor_busy)
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b68:	8a5b      	ldrh	r3, [r3, #18]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <ShowMainDisplay+0x114>
	{
		//Выполняется отбор
		char  execSel[] = {0xC2,0xFB,0xEF,0xEE,0xEB,0xED,0xFF,0xE5,0xF2,0xF1,0xFF,0x20,0xEE,0xF2,0xE1,0xEE,0xF0};
 8002b6e:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <ShowMainDisplay+0x1ec>)
 8002b70:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b74:	461d      	mov	r5, r3
 8002b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],execSel,sizeof(execSel));
 8002b7e:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002b80:	f103 0514 	add.w	r5, r3, #20
 8002b84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	6028      	str	r0, [r5, #0]
 8002b8c:	6069      	str	r1, [r5, #4]
 8002b8e:	60aa      	str	r2, [r5, #8]
 8002b90:	60eb      	str	r3, [r5, #12]
 8002b92:	7823      	ldrb	r3, [r4, #0]
 8002b94:	742b      	strb	r3, [r5, #16]
 8002b96:	e03c      	b.n	8002c12 <ShowMainDisplay+0x18e>
	}
	else if(meas_data.vozvrat_probotbor_busy)
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b9a:	8a9b      	ldrh	r3, [r3, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <ShowMainDisplay+0x154>
	{
		//Выполняется возврат
		char  execRet[] = {0xC2,0xFB,0xEF,0xEE,0xEB,0xED,0xFF,0xE5,0xF2,0xF1,0xFF,0x20,0xE2,0xEE,0xE7,0xE2,0xF0,0xE0,0xF2};
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <ShowMainDisplay+0x1f0>)
 8002ba2:	f107 0414 	add.w	r4, r7, #20
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	8022      	strh	r2, [r4, #0]
 8002bb2:	3402      	adds	r4, #2
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],execRet,sizeof(execRet));
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002bba:	f103 0514 	add.w	r5, r3, #20
 8002bbe:	f107 0414 	add.w	r4, r7, #20
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	6028      	str	r0, [r5, #0]
 8002bc6:	6069      	str	r1, [r5, #4]
 8002bc8:	60aa      	str	r2, [r5, #8]
 8002bca:	60eb      	str	r3, [r5, #12]
 8002bcc:	8823      	ldrh	r3, [r4, #0]
 8002bce:	78a2      	ldrb	r2, [r4, #2]
 8002bd0:	822b      	strh	r3, [r5, #16]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	74ab      	strb	r3, [r5, #18]
 8002bd6:	e01c      	b.n	8002c12 <ShowMainDisplay+0x18e>
	}
	else if(*((uint16_t*)&meas_data.errors))
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <ShowMainDisplay+0x1f4>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d018      	beq.n	8002c12 <ShowMainDisplay+0x18e>
	{
		// Ошибки, нажмите F4
		char err[] = {0xCE, 0xF8, 0xE8, 0xE1, 0xEA, 0xE8, 0x2C, 0x20, 0xED, 0xE0, 0xE6, 0xEC, 0xE8, 0xF2, 0xE5, 0x20, 0x46, 0x34,  0x00};
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <ShowMainDisplay+0x1f8>)
 8002be2:	463c      	mov	r4, r7
 8002be4:	461d      	mov	r5, r3
 8002be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	8022      	strh	r2, [r4, #0]
 8002bf0:	3402      	adds	r4, #2
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],err,sizeof(err));
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002bf8:	f103 0514 	add.w	r5, r3, #20
 8002bfc:	463c      	mov	r4, r7
 8002bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c00:	6028      	str	r0, [r5, #0]
 8002c02:	6069      	str	r1, [r5, #4]
 8002c04:	60aa      	str	r2, [r5, #8]
 8002c06:	60eb      	str	r3, [r5, #12]
 8002c08:	8823      	ldrh	r3, [r4, #0]
 8002c0a:	78a2      	ldrb	r2, [r4, #2]
 8002c0c:	822b      	strh	r3, [r5, #16]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	74ab      	strb	r3, [r5, #18]
	}
	// Мониторинг->Enter
	char toMonitor[] = {0xCC, 0xEE, 0xED, 0xE8, 0xF2, 0xEE, 0xF0, 0xE8, 0xED, 0xE3, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <ShowMainDisplay+0x1fc>)
 8002c14:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002c18:	461d      	mov	r5, r3
 8002c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	7023      	strb	r3, [r4, #0]
	memcpy(lcdAnswer[3]+3,toMonitor,sizeof(toMonitor));
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <ShowMainDisplay+0x200>)
 8002c24:	461d      	mov	r5, r3
 8002c26:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	6028      	str	r0, [r5, #0]
 8002c2e:	6069      	str	r1, [r5, #4]
 8002c30:	60aa      	str	r2, [r5, #8]
 8002c32:	60eb      	str	r3, [r5, #12]
 8002c34:	7823      	ldrb	r3, [r4, #0]
 8002c36:	742b      	strb	r3, [r5, #16]
	return 1;
 8002c38:	2301      	movs	r3, #1

}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3798      	adds	r7, #152	; 0x98
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000751c 	.word	0x2000751c
 8002c48:	0802361c 	.word	0x0802361c
 8002c4c:	20007474 	.word	0x20007474
 8002c50:	08023608 	.word	0x08023608
 8002c54:	20007084 	.word	0x20007084
 8002c58:	08023628 	.word	0x08023628
 8002c5c:	08023634 	.word	0x08023634
 8002c60:	08023614 	.word	0x08023614
 8002c64:	200070ac 	.word	0x200070ac
 8002c68:	08023648 	.word	0x08023648
 8002c6c:	08023654 	.word	0x08023654
 8002c70:	08023664 	.word	0x08023664
 8002c74:	08023678 	.word	0x08023678
 8002c78:	2000753c 	.word	0x2000753c
 8002c7c:	0802368c 	.word	0x0802368c
 8002c80:	080236a0 	.word	0x080236a0
 8002c84:	200070c3 	.word	0x200070c3

08002c88 <OnDownPressKey>:


static uint8_t OnDownPressKey()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <OnDownPressKey+0xbc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <OnDownPressKey+0x12>
 8002c96:	2300      	movs	r3, #0
 8002c98:	e050      	b.n	8002d3c <OnDownPressKey+0xb4>
	if(editMode)
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <OnDownPressKey+0xc0>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01f      	beq.n	8002ce2 <OnDownPressKey+0x5a>
	{
		Row *par = currentParameters+paramIndex;
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <OnDownPressKey+0xbc>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <OnDownPressKey+0xc4>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	440b      	add	r3, r1
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	607b      	str	r3, [r7, #4]
		if(par->isEnum)return 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a1b      	ldrb	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <OnDownPressKey+0x3c>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e03b      	b.n	8002d3c <OnDownPressKey+0xb4>
		DecIncSymbol(editedValue+currentCursorPosition, 0);
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <OnDownPressKey+0xc8>)
 8002cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <OnDownPressKey+0xcc>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 f968 	bl	8003fa8 <DecIncSymbol>
		ShowParameter(par);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa95 	bl	8003208 <ShowParameter>
		return 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02c      	b.n	8002d3c <OnDownPressKey+0xb4>
	}
	if(paramIndex>=currentParamLength-1)return 0;// Если курсор находится внизу, не реагируем
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <OnDownPressKey+0xc4>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <OnDownPressKey+0xd0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	db01      	blt.n	8002cf6 <OnDownPressKey+0x6e>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e022      	b.n	8002d3c <OnDownPressKey+0xb4>
	if(currentParameters == Errors)
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <OnDownPressKey+0xbc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <OnDownPressKey+0xd4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d109      	bne.n	8002d14 <OnDownPressKey+0x8c>
	{
		paramIndex++;
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d0a:	701a      	strb	r2, [r3, #0]
		return ShowErrors();
 8002d0c:	f000 fb86 	bl	800341c <ShowErrors>
 8002d10:	4603      	mov	r3, r0
 8002d12:	e013      	b.n	8002d3c <OnDownPressKey+0xb4>
	}
	paramIndex++;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d1e:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <OnDownPressKey+0xbc>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	440b      	add	r3, r1
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa67 	bl	8003208 <ShowParameter>
	return 1;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000910 	.word	0x20000910
 8002d48:	20000915 	.word	0x20000915
 8002d4c:	20000914 	.word	0x20000914
 8002d50:	200000c3 	.word	0x200000c3
 8002d54:	200070d8 	.word	0x200070d8
 8002d58:	20007150 	.word	0x20007150
 8002d5c:	2000012c 	.word	0x2000012c

08002d60 <OnLeftPressKey>:

static uint8_t OnLeftPressKey()
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
	int index = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <OnLeftPressKey+0x104>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <OnLeftPressKey+0x16>
 8002d72:	2300      	movs	r3, #0
 8002d74:	e071      	b.n	8002e5a <OnLeftPressKey+0xfa>
	if(currentParameters==NULL)return 0;
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <OnLeftPressKey+0x108>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <OnLeftPressKey+0x22>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e06b      	b.n	8002e5a <OnLeftPressKey+0xfa>
	Row *par = currentParameters+paramIndex;
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <OnLeftPressKey+0x108>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <OnLeftPressKey+0x10c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	440b      	add	r3, r1
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7a1b      	ldrb	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d04f      	beq.n	8002e40 <OnLeftPressKey+0xe0>
	{
		if(par->enums==NULL)return 0;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <OnLeftPressKey+0x4c>
 8002da8:	2300      	movs	r3, #0
 8002daa:	e056      	b.n	8002e5a <OnLeftPressKey+0xfa>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <OnLeftPressKey+0x110>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7d1b      	ldrb	r3, [r3, #20]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	f000 fd6d 	bl	80038a0 <FindIndexFromValue>
 8002dc6:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d101      	bne.n	8002dd4 <OnLeftPressKey+0x74>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e042      	b.n	8002e5a <OnLeftPressKey+0xfa>
		index = index==0 ? par->enums_len-1 : index-1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <OnLeftPressKey+0x82>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7d1b      	ldrb	r3, [r3, #20]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	e001      	b.n	8002de6 <OnLeftPressKey+0x86>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <OnLeftPressKey+0x110>)
 8002df6:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 8002df8:	2214      	movs	r2, #20
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	481d      	ldr	r0, [pc, #116]	; (8002e74 <OnLeftPressKey+0x114>)
 8002dfe:	f01b fae9 	bl	801e3d4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	79db      	ldrb	r3, [r3, #7]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <OnLeftPressKey+0x114>)
 8002e0a:	18d4      	adds	r4, r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	685d      	ldr	r5, [r3, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd f9d3 	bl	80001d0 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4620      	mov	r0, r4
 8002e32:	f01c fb83 	bl	801f53c <strncpy>
		ShowParameter(par);
 8002e36:	6838      	ldr	r0, [r7, #0]
 8002e38:	f000 f9e6 	bl	8003208 <ShowParameter>
		return 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00c      	b.n	8002e5a <OnLeftPressKey+0xfa>


	}
	else
	{
		currentCursorPosition = ShiftCursor(0, par, 1);
 8002e40:	2201      	movs	r2, #1
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	2000      	movs	r0, #0
 8002e46:	f000 ff01 	bl	8003c4c <ShiftCursor>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b25a      	sxtb	r2, r3
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <OnLeftPressKey+0x118>)
 8002e50:	701a      	strb	r2, [r3, #0]
		ShowParameter(par);
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f000 f9d8 	bl	8003208 <ShowParameter>
		return 1;
 8002e58:	2301      	movs	r3, #1

	}
	return 0;
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bdb0      	pop	{r4, r5, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000915 	.word	0x20000915
 8002e68:	20000910 	.word	0x20000910
 8002e6c:	20000914 	.word	0x20000914
 8002e70:	20000918 	.word	0x20000918
 8002e74:	200070d8 	.word	0x200070d8
 8002e78:	200000c3 	.word	0x200000c3

08002e7c <OnRightPressKey>:

static uint8_t OnRightPressKey()
{
 8002e7c:	b5b0      	push	{r4, r5, r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
	int index = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <OnRightPressKey+0x104>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <OnRightPressKey+0x16>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e072      	b.n	8002f78 <OnRightPressKey+0xfc>
	if(currentParameters==NULL)return 0;
 8002e92:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <OnRightPressKey+0x108>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <OnRightPressKey+0x22>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e06c      	b.n	8002f78 <OnRightPressKey+0xfc>
	Row *par = currentParameters+paramIndex;
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <OnRightPressKey+0x108>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <OnRightPressKey+0x10c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	440b      	add	r3, r1
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	7a1b      	ldrb	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d050      	beq.n	8002f5e <OnRightPressKey+0xe2>
	{
		if(par->enums==NULL)return 0;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <OnRightPressKey+0x4c>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e057      	b.n	8002f78 <OnRightPressKey+0xfc>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <OnRightPressKey+0x110>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	7d1b      	ldrb	r3, [r3, #20]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	eeb0 0a67 	vmov.f32	s0, s15
 8002ede:	f000 fcdf 	bl	80038a0 <FindIndexFromValue>
 8002ee2:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d101      	bne.n	8002ef0 <OnRightPressKey+0x74>
 8002eec:	2300      	movs	r3, #0
 8002eee:	e043      	b.n	8002f78 <OnRightPressKey+0xfc>
		index = index==par->enums_len-1 ? 0 : index+1;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7d1b      	ldrb	r3, [r3, #20]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d002      	beq.n	8002f02 <OnRightPressKey+0x86>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	e000      	b.n	8002f04 <OnRightPressKey+0x88>
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <OnRightPressKey+0x110>)
 8002f14:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 8002f16:	2214      	movs	r2, #20
 8002f18:	2100      	movs	r1, #0
 8002f1a:	481d      	ldr	r0, [pc, #116]	; (8002f90 <OnRightPressKey+0x114>)
 8002f1c:	f01b fa5a 	bl	801e3d4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	79db      	ldrb	r3, [r3, #7]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <OnRightPressKey+0x114>)
 8002f28:	18d4      	adds	r4, r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	685d      	ldr	r5, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd f944 	bl	80001d0 <strlen>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f01c faf4 	bl	801f53c <strncpy>
		ShowParameter(par);
 8002f54:	6838      	ldr	r0, [r7, #0]
 8002f56:	f000 f957 	bl	8003208 <ShowParameter>
		return 1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00c      	b.n	8002f78 <OnRightPressKey+0xfc>

	}
	else
	{
		currentCursorPosition = ShiftCursor(1, par, 1);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 fe72 	bl	8003c4c <ShiftCursor>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b25a      	sxtb	r2, r3
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <OnRightPressKey+0x118>)
 8002f6e:	701a      	strb	r2, [r3, #0]
		ShowParameter(par);
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f000 f949 	bl	8003208 <ShowParameter>
		return 1;
 8002f76:	2301      	movs	r3, #1
	}
	return 0;
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f80:	20000915 	.word	0x20000915
 8002f84:	20000910 	.word	0x20000910
 8002f88:	20000914 	.word	0x20000914
 8002f8c:	20000918 	.word	0x20000918
 8002f90:	200070d8 	.word	0x200070d8
 8002f94:	200000c3 	.word	0x200000c3

08002f98 <OnUpPressKey>:

static uint8_t OnUpPressKey()
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <OnUpPressKey+0xc4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <OnUpPressKey+0x12>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e053      	b.n	8003052 <OnUpPressKey+0xba>
	if(editMode)
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <OnUpPressKey+0xc8>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01f      	beq.n	8002ff2 <OnUpPressKey+0x5a>
	{
		Row *par = currentParameters+paramIndex;
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <OnUpPressKey+0xc4>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <OnUpPressKey+0xcc>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	440b      	add	r3, r1
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	607b      	str	r3, [r7, #4]
		if(par->isEnum)return 0;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7a1b      	ldrb	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <OnUpPressKey+0x3c>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e03e      	b.n	8003052 <OnUpPressKey+0xba>
		DecIncSymbol(editedValue+currentCursorPosition, 1);
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <OnUpPressKey+0xd0>)
 8002fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <OnUpPressKey+0xd4>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ffe0 	bl	8003fa8 <DecIncSymbol>
		ShowParameter(par);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f90d 	bl	8003208 <ShowParameter>
		return 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02f      	b.n	8003052 <OnUpPressKey+0xba>
	}
	if(paramIndex<=0)return 0;// Если курсор находится ddth[e, не реагируем
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <OnUpPressKey+0xcc>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <OnUpPressKey+0x66>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e029      	b.n	8003052 <OnUpPressKey+0xba>
	if(currentParameters == Errors)
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <OnUpPressKey+0xc4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <OnUpPressKey+0xd8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d110      	bne.n	800302a <OnUpPressKey+0x92>
	{
		paramIndex = paramIndex == 0 ? paramIndex : paramIndex -1;
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <OnUpPressKey+0xcc>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <OnUpPressKey+0x82>
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <OnUpPressKey+0xcc>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e001      	b.n	800301e <OnUpPressKey+0x86>
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <OnUpPressKey+0xcc>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <OnUpPressKey+0xcc>)
 8003020:	7013      	strb	r3, [r2, #0]
		return ShowErrors();
 8003022:	f000 f9fb 	bl	800341c <ShowErrors>
 8003026:	4603      	mov	r3, r0
 8003028:	e013      	b.n	8003052 <OnUpPressKey+0xba>

	}
	paramIndex--;
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <OnUpPressKey+0xcc>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	3b01      	subs	r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <OnUpPressKey+0xcc>)
 8003034:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <OnUpPressKey+0xc4>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <OnUpPressKey+0xcc>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	460b      	mov	r3, r1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	440b      	add	r3, r1
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f8dc 	bl	8003208 <ShowParameter>
	return 1;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000910 	.word	0x20000910
 8003060:	20000915 	.word	0x20000915
 8003064:	20000914 	.word	0x20000914
 8003068:	200000c3 	.word	0x200000c3
 800306c:	200070d8 	.word	0x200070d8
 8003070:	2000012c 	.word	0x2000012c

08003074 <OnF1PressKey>:


static uint8_t OnF1PressKey()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <OnF1PressKey+0x1c>)
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	701a      	strb	r2, [r3, #0]
	currentParameters = NULL;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <OnF1PressKey+0x20>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
	return ShowMainDisplay();
 8003084:	f7ff fcfe 	bl	8002a84 <ShowMainDisplay>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200000c3 	.word	0x200000c3
 8003094:	20000910 	.word	0x20000910

08003098 <OnF2PressKey>:

static uint8_t OnF2PressKey()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <OnF2PressKey+0x40>)
 800309e:	22ff      	movs	r2, #255	; 0xff
 80030a0:	701a      	strb	r2, [r3, #0]
	currentParameters = probotbor_parameters;
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <OnF2PressKey+0x44>)
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <OnF2PressKey+0x48>)
 80030a6:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <OnF2PressKey+0x4c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(probotbor_parameters)/sizeof(Row);
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <OnF2PressKey+0x50>)
 80030b0:	2205      	movs	r2, #5
 80030b2:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <OnF2PressKey+0x54>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
	groupParamName = processParametersName;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <OnF2PressKey+0x58>)
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <OnF2PressKey+0x5c>)
 80030be:	601a      	str	r2, [r3, #0]
	groupParamNameLength = sizeof(processParametersName);
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <OnF2PressKey+0x60>)
 80030c2:	2211      	movs	r2, #17
 80030c4:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <OnF2PressKey+0x44>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f89c 	bl	8003208 <ShowParameter>
	return 1;
 80030d0:	2301      	movs	r3, #1
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200000c3 	.word	0x200000c3
 80030dc:	20000910 	.word	0x20000910
 80030e0:	2000024c 	.word	0x2000024c
 80030e4:	20000914 	.word	0x20000914
 80030e8:	20007150 	.word	0x20007150
 80030ec:	20000915 	.word	0x20000915
 80030f0:	2000714c 	.word	0x2000714c
 80030f4:	200000a4 	.word	0x200000a4
 80030f8:	200070d4 	.word	0x200070d4

080030fc <OnF3PressKey>:

static uint8_t OnF3PressKey()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <OnF3PressKey+0x48>)
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	701a      	strb	r2, [r3, #0]
	currentParameters = commParameters;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <OnF3PressKey+0x4c>)
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <OnF3PressKey+0x50>)
 800310a:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <OnF3PressKey+0x54>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(commParameters)/sizeof(Row);
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <OnF3PressKey+0x58>)
 8003114:	2206      	movs	r2, #6
 8003116:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <OnF3PressKey+0x5c>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
	groupParamName = commParametersName;
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <OnF3PressKey+0x60>)
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <OnF3PressKey+0x64>)
 8003122:	601a      	str	r2, [r3, #0]
	groupParamNameLength = strlen(commParametersName);
 8003124:	480e      	ldr	r0, [pc, #56]	; (8003160 <OnF3PressKey+0x64>)
 8003126:	f7fd f853 	bl	80001d0 <strlen>
 800312a:	4603      	mov	r3, r0
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <OnF3PressKey+0x68>)
 8003130:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <OnF3PressKey+0x4c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f866 	bl	8003208 <ShowParameter>
	return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200000c3 	.word	0x200000c3
 8003148:	20000910 	.word	0x20000910
 800314c:	200002c4 	.word	0x200002c4
 8003150:	20000914 	.word	0x20000914
 8003154:	20007150 	.word	0x20007150
 8003158:	20000915 	.word	0x20000915
 800315c:	2000714c 	.word	0x2000714c
 8003160:	20000094 	.word	0x20000094
 8003164:	200070d4 	.word	0x200070d4

08003168 <OnF4PressKey>:

static uint8_t OnF4PressKey()
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <OnF4PressKey+0x28>)
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	701a      	strb	r2, [r3, #0]
	currentParameters = Errors;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <OnF4PressKey+0x2c>)
 8003174:	4a08      	ldr	r2, [pc, #32]	; (8003198 <OnF4PressKey+0x30>)
 8003176:	601a      	str	r2, [r3, #0]
	editMode  = 0;
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <OnF4PressKey+0x34>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
	paramIndex = 0;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <OnF4PressKey+0x38>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
	return ShowErrors();
 8003184:	f000 f94a 	bl	800341c <ShowErrors>
 8003188:	4603      	mov	r3, r0
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200000c3 	.word	0x200000c3
 8003194:	20000910 	.word	0x20000910
 8003198:	2000012c 	.word	0x2000012c
 800319c:	20000915 	.word	0x20000915
 80031a0:	20000914 	.word	0x20000914

080031a4 <OnEscPressKey>:

static uint8_t OnEscPressKey()
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <OnEscPressKey+0x54>)
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	701a      	strb	r2, [r3, #0]
	if(currentParameters==NULL)return 0;
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <OnEscPressKey+0x58>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <OnEscPressKey+0x16>
 80031b6:	2300      	movs	r3, #0
 80031b8:	e01b      	b.n	80031f2 <OnEscPressKey+0x4e>
	if(!editMode)
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <OnEscPressKey+0x5c>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <OnEscPressKey+0x2c>
	{
		currentParameters = NULL;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <OnEscPressKey+0x58>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
		return ShowMainDisplay();
 80031c8:	f7ff fc5c 	bl	8002a84 <ShowMainDisplay>
 80031cc:	4603      	mov	r3, r0
 80031ce:	e010      	b.n	80031f2 <OnEscPressKey+0x4e>
	}
	else
	{
		editMode = 0;
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <OnEscPressKey+0x5c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters+paramIndex);
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <OnEscPressKey+0x58>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <OnEscPressKey+0x60>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	460b      	mov	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	440b      	add	r3, r1
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f80c 	bl	8003208 <ShowParameter>
		return 1;
 80031f0:	2301      	movs	r3, #1
	}
	return 0;
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200000c3 	.word	0x200000c3
 80031fc:	20000910 	.word	0x20000910
 8003200:	20000915 	.word	0x20000915
 8003204:	20000914 	.word	0x20000914

08003208 <ShowParameter>:

static void ShowParameter(Row *parameter)
{
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b092      	sub	sp, #72	; 0x48
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	Clear();
 8003210:	f7ff fc0e 	bl	8002a30 <Clear>
	memcpy(lcdAnswer[0],groupParamName,groupParamNameLength); // Имя группы параметра
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <ShowParameter+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a68      	ldr	r2, [pc, #416]	; (80033bc <ShowParameter+0x1b4>)
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	4868      	ldr	r0, [pc, #416]	; (80033c0 <ShowParameter+0x1b8>)
 8003220:	f01b f8b0 	bl	801e384 <memcpy>
	memcpy(lcdAnswer[1],parameter->name,parameter->name_len); // Имя  параметра
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	795b      	ldrb	r3, [r3, #5]
 800322c:	461a      	mov	r2, r3
 800322e:	4865      	ldr	r0, [pc, #404]	; (80033c4 <ShowParameter+0x1bc>)
 8003230:	f01b f8a8 	bl	801e384 <memcpy>
	if(parameter->isEnum)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7a1b      	ldrb	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d069      	beq.n	8003310 <ShowParameter+0x108>
	{
		if(editMode)
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <ShowParameter+0x1c0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <ShowParameter+0x6e>
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,editedValue+parameter->param_pos, strlen(editedValue+parameter->param_pos));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	79db      	ldrb	r3, [r3, #7]
 8003248:	461a      	mov	r2, r3
 800324a:	4b60      	ldr	r3, [pc, #384]	; (80033cc <ShowParameter+0x1c4>)
 800324c:	18d4      	adds	r4, r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	79db      	ldrb	r3, [r3, #7]
 8003252:	461a      	mov	r2, r3
 8003254:	4b5e      	ldr	r3, [pc, #376]	; (80033d0 <ShowParameter+0x1c8>)
 8003256:	18d5      	adds	r5, r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	79db      	ldrb	r3, [r3, #7]
 800325c:	461a      	mov	r2, r3
 800325e:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <ShowParameter+0x1c8>)
 8003260:	4413      	add	r3, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fc ffb4 	bl	80001d0 <strlen>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	4629      	mov	r1, r5
 800326e:	4620      	mov	r0, r4
 8003270:	f01c f964 	bl	801f53c <strncpy>
 8003274:	e050      	b.n	8003318 <ShowParameter+0x110>
		}
		else
		{
			float value = 0;
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
			switch (parameter->type) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7d5b      	ldrb	r3, [r3, #21]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <ShowParameter+0x82>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d00a      	beq.n	800329e <ShowParameter+0x96>
					break;
				case ROW_UINT:
					value = *((uint32_t*)parameter->data);
					break;
				default:
					break;
 8003288:	e013      	b.n	80032b2 <ShowParameter+0xaa>
					value = *((uint16_t*)parameter->data);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003298:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					break;
 800329c:	e009      	b.n	80032b2 <ShowParameter+0xaa>
					value = *((uint32_t*)parameter->data);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					break;
 80032b0:	bf00      	nop
			}
			Dictionary *pair = FindDictionaryFromValue(value, parameter->enums, parameter->enums_len);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7d1b      	ldrb	r3, [r3, #20]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80032c2:	f000 fac1 	bl	8003848 <FindDictionaryFromValue>
 80032c6:	6438      	str	r0, [r7, #64]	; 0x40
			if(pair == NULL)
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <ShowParameter+0xe2>
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,"Undefined", strlen("Undefined"));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	79db      	ldrb	r3, [r3, #7]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <ShowParameter+0x1c4>)
 80032d6:	4413      	add	r3, r2
 80032d8:	493e      	ldr	r1, [pc, #248]	; (80033d4 <ShowParameter+0x1cc>)
 80032da:	461a      	mov	r2, r3
 80032dc:	460b      	mov	r3, r1
 80032de:	cb03      	ldmia	r3!, {r0, r1}
 80032e0:	6010      	str	r0, [r2, #0]
 80032e2:	6051      	str	r1, [r2, #4]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	7213      	strb	r3, [r2, #8]
 80032e8:	e016      	b.n	8003318 <ShowParameter+0x110>
			}
			else
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,pair->name, strlen(pair->name));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	79db      	ldrb	r3, [r3, #7]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <ShowParameter+0x1c4>)
 80032f2:	18d4      	adds	r4, r2, r3
 80032f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f6:	685d      	ldr	r5, [r3, #4]
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fc ff67 	bl	80001d0 <strlen>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	4629      	mov	r1, r5
 8003308:	4620      	mov	r0, r4
 800330a:	f01c f917 	bl	801f53c <strncpy>
 800330e:	e003      	b.n	8003318 <ShowParameter+0x110>
		}

	}
	else
	{
		Print(parameter, 2);
 8003310:	2102      	movs	r1, #2
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fb3c 	bl	8003990 <Print>
	}

	if(parameter->isEdited)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d034      	beq.n	800338a <ShowParameter+0x182>
	{
		if(!editMode)
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <ShowParameter+0x1c0>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d110      	bne.n	800334a <ShowParameter+0x142>
		{
			//Изм.->Enter
			char edit[] = {0xC8, 0xE7, 0xEC, 0x2E, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <ShowParameter+0x1d0>)
 800332a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800332e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003330:	c303      	stmia	r3!, {r0, r1}
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	3302      	adds	r3, #2
 8003336:	0c12      	lsrs	r2, r2, #16
 8003338:	701a      	strb	r2, [r3, #0]
			strncpy(lcdAnswer[3]+9, edit, sizeof(edit));
 800333a:	4828      	ldr	r0, [pc, #160]	; (80033dc <ShowParameter+0x1d4>)
 800333c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003340:	220b      	movs	r2, #11
 8003342:	4619      	mov	r1, r3
 8003344:	f01c f8fa 	bl	801f53c <strncpy>
	{
		//Главная->Esc
		char toMain[] = {0xC3, 0xEB, 0xE0, 0xE2, 0xED, 0xE0, 0xFF, 0x2D, 0x3E, 0x45, 0x73, 0x63,  0x00};
		memcpy(lcdAnswer[3]+8,toMain, sizeof(toMain));
	}
}
 8003348:	e031      	b.n	80033ae <ShowParameter+0x1a6>
			char back[] = {0xCD, 0xE0, 0xE7, 0xE0, 0xE4, 0x2D, 0x3E, 0x45, 0x73, 0x63};
 800334a:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <ShowParameter+0x1d8>)
 800334c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003350:	ca07      	ldmia	r2, {r0, r1, r2}
 8003352:	c303      	stmia	r3!, {r0, r1}
 8003354:	801a      	strh	r2, [r3, #0]
			memcpy(lcdAnswer[3],back, sizeof(back));
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <ShowParameter+0x1b8>)
 8003358:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800335c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003360:	cb03      	ldmia	r3!, {r0, r1}
 8003362:	6010      	str	r0, [r2, #0]
 8003364:	6051      	str	r1, [r2, #4]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	8113      	strh	r3, [r2, #8]
			char ok[] = { 0x4F, 0x6B, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 800336a:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <ShowParameter+0x1dc>)
 800336c:	f107 031c 	add.w	r3, r7, #28
 8003370:	ca07      	ldmia	r2, {r0, r1, r2}
 8003372:	c303      	stmia	r3!, {r0, r1}
 8003374:	701a      	strb	r2, [r3, #0]
			memcpy(lcdAnswer[3]+11,ok, sizeof(ok));
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <ShowParameter+0x1e0>)
 8003378:	461a      	mov	r2, r3
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	cb03      	ldmia	r3!, {r0, r1}
 8003380:	6010      	str	r0, [r2, #0]
 8003382:	6051      	str	r1, [r2, #4]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	7213      	strb	r3, [r2, #8]
}
 8003388:	e011      	b.n	80033ae <ShowParameter+0x1a6>
	else if(currentParameters == indication_rows)
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <ShowParameter+0x1e4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <ShowParameter+0x1e8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10c      	bne.n	80033ae <ShowParameter+0x1a6>
		char toMain[] = {0xC3, 0xEB, 0xE0, 0xE2, 0xED, 0xE0, 0xFF, 0x2D, 0x3E, 0x45, 0x73, 0x63,  0x00};
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <ShowParameter+0x1ec>)
 8003396:	f107 040c 	add.w	r4, r7, #12
 800339a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339c:	c407      	stmia	r4!, {r0, r1, r2}
 800339e:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[3]+8,toMain, sizeof(toMain));
 80033a0:	4815      	ldr	r0, [pc, #84]	; (80033f8 <ShowParameter+0x1f0>)
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	220d      	movs	r2, #13
 80033a8:	4619      	mov	r1, r3
 80033aa:	f01a ffeb 	bl	801e384 <memcpy>
}
 80033ae:	bf00      	nop
 80033b0:	3748      	adds	r7, #72	; 0x48
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000714c 	.word	0x2000714c
 80033bc:	200070d4 	.word	0x200070d4
 80033c0:	20007084 	.word	0x20007084
 80033c4:	20007098 	.word	0x20007098
 80033c8:	20000915 	.word	0x20000915
 80033cc:	200070ac 	.word	0x200070ac
 80033d0:	200070d8 	.word	0x200070d8
 80033d4:	080236b4 	.word	0x080236b4
 80033d8:	080236c0 	.word	0x080236c0
 80033dc:	200070c9 	.word	0x200070c9
 80033e0:	080236cc 	.word	0x080236cc
 80033e4:	080236d8 	.word	0x080236d8
 80033e8:	200070cb 	.word	0x200070cb
 80033ec:	20000910 	.word	0x20000910
 80033f0:	20000354 	.word	0x20000354
 80033f4:	080236e4 	.word	0x080236e4
 80033f8:	200070c8 	.word	0x200070c8

080033fc <Min>:

static int Min(int x,int y)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	return x<y?x:y;
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4293      	cmp	r3, r2
 800340c:	bfa8      	it	ge
 800340e:	4613      	movge	r3, r2
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <ShowErrors>:

static uint8_t ShowErrors()
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
	GetAllErrors();
 8003422:	f000 f86f 	bl	8003504 <GetAllErrors>
	Clear();
 8003426:	f7ff fb03 	bl	8002a30 <Clear>
	//Ошибки
	char erors[] = {0xCE, 0xF8, 0xE8, 0xE1, 0xEA, 0xE8,  0x00};
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <ShowErrors+0xd0>)
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003432:	6018      	str	r0, [r3, #0]
 8003434:	3304      	adds	r3, #4
 8003436:	8019      	strh	r1, [r3, #0]
 8003438:	3302      	adds	r3, #2
 800343a:	0c0a      	lsrs	r2, r1, #16
 800343c:	701a      	strb	r2, [r3, #0]
	memcpy(lcdAnswer[0],erors, sizeof(erors));
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <ShowErrors+0xd4>)
 8003440:	461a      	mov	r2, r3
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	6010      	str	r0, [r2, #0]
 8003448:	8899      	ldrh	r1, [r3, #4]
 800344a:	799b      	ldrb	r3, [r3, #6]
 800344c:	8091      	strh	r1, [r2, #4]
 800344e:	7193      	strb	r3, [r2, #6]
	if(err_count==0)return 1;
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <ShowErrors+0xd8>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <ShowErrors+0x40>
 8003458:	2301      	movs	r3, #1
 800345a:	e042      	b.n	80034e2 <ShowErrors+0xc6>
	if(paramIndex>=err_count-1)paramIndex = err_count==0 ? 0 : err_count-1;
 800345c:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <ShowErrors+0xdc>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <ShowErrors+0xd8>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3b01      	subs	r3, #1
 8003468:	429a      	cmp	r2, r3
 800346a:	db0b      	blt.n	8003484 <ShowErrors+0x68>
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <ShowErrors+0xd8>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <ShowErrors+0x62>
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <ShowErrors+0xd8>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	3b01      	subs	r3, #1
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e000      	b.n	8003480 <ShowErrors+0x64>
 800347e:	2300      	movs	r3, #0
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <ShowErrors+0xdc>)
 8003482:	7013      	strb	r3, [r2, #0]
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <ShowErrors+0xdc>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e01b      	b.n	80034c4 <ShowErrors+0xa8>
		sprintf(lcdAnswer[1+i-paramIndex],"%d.%s",errors_info[i].num, errors_info[i].errorName);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <ShowErrors+0xdc>)
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	1a9a      	subs	r2, r3, r2
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <ShowErrors+0xd4>)
 80034a0:	1898      	adds	r0, r3, r2
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <ShowErrors+0xe0>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <ShowErrors+0xe0>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	460a      	mov	r2, r1
 80034b8:	4911      	ldr	r1, [pc, #68]	; (8003500 <ShowErrors+0xe4>)
 80034ba:	f01b ff8f 	bl	801f3dc <siprintf>
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <ShowErrors+0xd8>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <ShowErrors+0xdc>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	3303      	adds	r3, #3
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f7ff ff92 	bl	80033fc <Min>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4293      	cmp	r3, r2
 80034de:	dbd5      	blt.n	800348c <ShowErrors+0x70>
	}
	return 1;
 80034e0:	2301      	movs	r3, #1
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	080236fc 	.word	0x080236fc
 80034f0:	20007084 	.word	0x20007084
 80034f4:	20007151 	.word	0x20007151
 80034f8:	20000914 	.word	0x20000914
 80034fc:	200070ec 	.word	0x200070ec
 8003500:	080236f4 	.word	0x080236f4

08003504 <GetAllErrors>:

static uint8_t GetAllErrors()
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
	err_count = 0;
 8003508:	4ba1      	ldr	r3, [pc, #644]	; (8003790 <GetAllErrors+0x28c>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
	if(meas_data.errors.nakopitel_kanistra_err)
 800350e:	4ba1      	ldr	r3, [pc, #644]	; (8003794 <GetAllErrors+0x290>)
 8003510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <GetAllErrors+0x4a>
	{
		errors_info[err_count].num = err_count+1;
 800351e:	4b9c      	ldr	r3, [pc, #624]	; (8003790 <GetAllErrors+0x28c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4a9b      	ldr	r2, [pc, #620]	; (8003790 <GetAllErrors+0x28c>)
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b2d9      	uxtb	r1, r3
 800352a:	4b9b      	ldr	r3, [pc, #620]	; (8003798 <GetAllErrors+0x294>)
 800352c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[0].name;
 8003530:	4b97      	ldr	r3, [pc, #604]	; (8003790 <GetAllErrors+0x28c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	4b99      	ldr	r3, [pc, #612]	; (800379c <GetAllErrors+0x298>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4997      	ldr	r1, [pc, #604]	; (8003798 <GetAllErrors+0x294>)
 800353c:	00c3      	lsls	r3, r0, #3
 800353e:	440b      	add	r3, r1
 8003540:	605a      	str	r2, [r3, #4]
		err_count++;
 8003542:	4b93      	ldr	r3, [pc, #588]	; (8003790 <GetAllErrors+0x28c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	3301      	adds	r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <GetAllErrors+0x28c>)
 800354c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.nakopitel_door_err)
 800354e:	4b91      	ldr	r3, [pc, #580]	; (8003794 <GetAllErrors+0x290>)
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <GetAllErrors+0x8a>
	{
		errors_info[err_count].num = err_count+1;
 800355e:	4b8c      	ldr	r3, [pc, #560]	; (8003790 <GetAllErrors+0x28c>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	4a8b      	ldr	r2, [pc, #556]	; (8003790 <GetAllErrors+0x28c>)
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	b2d9      	uxtb	r1, r3
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <GetAllErrors+0x294>)
 800356c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[1].name;
 8003570:	4b87      	ldr	r3, [pc, #540]	; (8003790 <GetAllErrors+0x28c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <GetAllErrors+0x298>)
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	4987      	ldr	r1, [pc, #540]	; (8003798 <GetAllErrors+0x294>)
 800357c:	00c3      	lsls	r3, r0, #3
 800357e:	440b      	add	r3, r1
 8003580:	605a      	str	r2, [r3, #4]
		err_count++;
 8003582:	4b83      	ldr	r3, [pc, #524]	; (8003790 <GetAllErrors+0x28c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b81      	ldr	r3, [pc, #516]	; (8003790 <GetAllErrors+0x28c>)
 800358c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.uz_err)
 800358e:	4b81      	ldr	r3, [pc, #516]	; (8003794 <GetAllErrors+0x290>)
 8003590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <GetAllErrors+0xca>
	{
		errors_info[err_count].num = err_count+1;
 800359e:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <GetAllErrors+0x28c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4a7b      	ldr	r2, [pc, #492]	; (8003790 <GetAllErrors+0x28c>)
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	b2d9      	uxtb	r1, r3
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <GetAllErrors+0x294>)
 80035ac:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[2].name;
 80035b0:	4b77      	ldr	r3, [pc, #476]	; (8003790 <GetAllErrors+0x28c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	4b79      	ldr	r3, [pc, #484]	; (800379c <GetAllErrors+0x298>)
 80035b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ba:	4977      	ldr	r1, [pc, #476]	; (8003798 <GetAllErrors+0x294>)
 80035bc:	00c3      	lsls	r3, r0, #3
 80035be:	440b      	add	r3, r1
 80035c0:	605a      	str	r2, [r3, #4]
		err_count++;
 80035c2:	4b73      	ldr	r3, [pc, #460]	; (8003790 <GetAllErrors+0x28c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b71      	ldr	r3, [pc, #452]	; (8003790 <GetAllErrors+0x28c>)
 80035cc:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sb_abort_err)
 80035ce:	4b71      	ldr	r3, [pc, #452]	; (8003794 <GetAllErrors+0x290>)
 80035d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <GetAllErrors+0x10a>
	{
		errors_info[err_count].num = err_count+1;
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <GetAllErrors+0x28c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4a6b      	ldr	r2, [pc, #428]	; (8003790 <GetAllErrors+0x28c>)
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	b2d9      	uxtb	r1, r3
 80035ea:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <GetAllErrors+0x294>)
 80035ec:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[3].name;
 80035f0:	4b67      	ldr	r3, [pc, #412]	; (8003790 <GetAllErrors+0x28c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	4b69      	ldr	r3, [pc, #420]	; (800379c <GetAllErrors+0x298>)
 80035f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035fa:	4967      	ldr	r1, [pc, #412]	; (8003798 <GetAllErrors+0x294>)
 80035fc:	00c3      	lsls	r3, r0, #3
 80035fe:	440b      	add	r3, r1
 8003600:	605a      	str	r2, [r3, #4]
		err_count++;
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <GetAllErrors+0x28c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b61      	ldr	r3, [pc, #388]	; (8003790 <GetAllErrors+0x28c>)
 800360c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_left_err)
 800360e:	4b61      	ldr	r3, [pc, #388]	; (8003794 <GetAllErrors+0x290>)
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <GetAllErrors+0x14a>
	{
		errors_info[err_count].num = err_count+1;
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <GetAllErrors+0x28c>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	4a5b      	ldr	r2, [pc, #364]	; (8003790 <GetAllErrors+0x28c>)
 8003624:	7812      	ldrb	r2, [r2, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	b2d9      	uxtb	r1, r3
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <GetAllErrors+0x294>)
 800362c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[4].name;
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <GetAllErrors+0x28c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	4b59      	ldr	r3, [pc, #356]	; (800379c <GetAllErrors+0x298>)
 8003638:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800363a:	4957      	ldr	r1, [pc, #348]	; (8003798 <GetAllErrors+0x294>)
 800363c:	00c3      	lsls	r3, r0, #3
 800363e:	440b      	add	r3, r1
 8003640:	605a      	str	r2, [r3, #4]
		err_count++;
 8003642:	4b53      	ldr	r3, [pc, #332]	; (8003790 <GetAllErrors+0x28c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b51      	ldr	r3, [pc, #324]	; (8003790 <GetAllErrors+0x28c>)
 800364c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_right_err)
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <GetAllErrors+0x290>)
 8003650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <GetAllErrors+0x18a>
	{
		errors_info[err_count].num = err_count+1;
 800365e:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <GetAllErrors+0x28c>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <GetAllErrors+0x28c>)
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	b2d9      	uxtb	r1, r3
 800366a:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <GetAllErrors+0x294>)
 800366c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[5].name;
 8003670:	4b47      	ldr	r3, [pc, #284]	; (8003790 <GetAllErrors+0x28c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <GetAllErrors+0x298>)
 8003678:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800367a:	4947      	ldr	r1, [pc, #284]	; (8003798 <GetAllErrors+0x294>)
 800367c:	00c3      	lsls	r3, r0, #3
 800367e:	440b      	add	r3, r1
 8003680:	605a      	str	r2, [r3, #4]
		err_count++;
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <GetAllErrors+0x28c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b41      	ldr	r3, [pc, #260]	; (8003790 <GetAllErrors+0x28c>)
 800368c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_right_err)
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <GetAllErrors+0x290>)
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <GetAllErrors+0x1cc>
	{
		errors_info[err_count].num = err_count+1;
 800369e:	4b3c      	ldr	r3, [pc, #240]	; (8003790 <GetAllErrors+0x28c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <GetAllErrors+0x28c>)
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2d9      	uxtb	r1, r3
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <GetAllErrors+0x294>)
 80036ac:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[6].name;
 80036b0:	4b37      	ldr	r3, [pc, #220]	; (8003790 <GetAllErrors+0x28c>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <GetAllErrors+0x298>)
 80036b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036bc:	4936      	ldr	r1, [pc, #216]	; (8003798 <GetAllErrors+0x294>)
 80036be:	00c3      	lsls	r3, r0, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	605a      	str	r2, [r3, #4]
		err_count++;
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <GetAllErrors+0x28c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <GetAllErrors+0x28c>)
 80036ce:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_left_err)
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <GetAllErrors+0x290>)
 80036d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d018      	beq.n	8003712 <GetAllErrors+0x20e>
	{
		errors_info[err_count].num = err_count+1;
 80036e0:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <GetAllErrors+0x28c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <GetAllErrors+0x28c>)
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	b2d9      	uxtb	r1, r3
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <GetAllErrors+0x294>)
 80036ee:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[7].name;
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <GetAllErrors+0x28c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <GetAllErrors+0x298>)
 80036fa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036fe:	4926      	ldr	r1, [pc, #152]	; (8003798 <GetAllErrors+0x294>)
 8003700:	00c3      	lsls	r3, r0, #3
 8003702:	440b      	add	r3, r1
 8003704:	605a      	str	r2, [r3, #4]
		err_count++;
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <GetAllErrors+0x28c>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <GetAllErrors+0x28c>)
 8003710:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.need_return_err)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <GetAllErrors+0x290>)
 8003714:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <GetAllErrors+0x250>
	{
		errors_info[err_count].num = err_count+1;
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <GetAllErrors+0x28c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <GetAllErrors+0x28c>)
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	b2d9      	uxtb	r1, r3
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <GetAllErrors+0x294>)
 8003730:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[8].name;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <GetAllErrors+0x28c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <GetAllErrors+0x298>)
 800373c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003740:	4915      	ldr	r1, [pc, #84]	; (8003798 <GetAllErrors+0x294>)
 8003742:	00c3      	lsls	r3, r0, #3
 8003744:	440b      	add	r3, r1
 8003746:	605a      	str	r2, [r3, #4]
		err_count++;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <GetAllErrors+0x28c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <GetAllErrors+0x28c>)
 8003752:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.full_nakop_err)
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <GetAllErrors+0x290>)
 8003756:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d021      	beq.n	80037a8 <GetAllErrors+0x2a4>
	{
		errors_info[err_count].num = err_count+1;
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <GetAllErrors+0x28c>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4a09      	ldr	r2, [pc, #36]	; (8003790 <GetAllErrors+0x28c>)
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	b2d9      	uxtb	r1, r3
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <GetAllErrors+0x294>)
 8003772:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[9].name;
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <GetAllErrors+0x28c>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <GetAllErrors+0x298>)
 800377e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003782:	4905      	ldr	r1, [pc, #20]	; (8003798 <GetAllErrors+0x294>)
 8003784:	00c3      	lsls	r3, r0, #3
 8003786:	440b      	add	r3, r1
 8003788:	605a      	str	r2, [r3, #4]
		err_count++;
 800378a:	4b01      	ldr	r3, [pc, #4]	; (8003790 <GetAllErrors+0x28c>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	e007      	b.n	80037a0 <GetAllErrors+0x29c>
 8003790:	20007151 	.word	0x20007151
 8003794:	2000751c 	.word	0x2000751c
 8003798:	200070ec 	.word	0x200070ec
 800379c:	2000012c 	.word	0x2000012c
 80037a0:	3301      	adds	r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <GetAllErrors+0x334>)
 80037a6:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.no_concentrat_err)
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <GetAllErrors+0x338>)
 80037aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <GetAllErrors+0x2e6>
	{
		errors_info[err_count].num = err_count+1;
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <GetAllErrors+0x334>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <GetAllErrors+0x334>)
 80037be:	7812      	ldrb	r2, [r2, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2d9      	uxtb	r1, r3
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <GetAllErrors+0x33c>)
 80037c6:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[10].name;
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <GetAllErrors+0x334>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <GetAllErrors+0x340>)
 80037d2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80037d6:	491a      	ldr	r1, [pc, #104]	; (8003840 <GetAllErrors+0x33c>)
 80037d8:	00c3      	lsls	r3, r0, #3
 80037da:	440b      	add	r3, r1
 80037dc:	605a      	str	r2, [r3, #4]
		err_count++;
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <GetAllErrors+0x334>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <GetAllErrors+0x334>)
 80037e8:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.conveyer_off_err)
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <GetAllErrors+0x338>)
 80037ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d018      	beq.n	800382c <GetAllErrors+0x328>
	{
		errors_info[err_count].num = err_count+1;
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <GetAllErrors+0x334>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <GetAllErrors+0x334>)
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b2d9      	uxtb	r1, r3
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <GetAllErrors+0x33c>)
 8003808:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[11].name;
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <GetAllErrors+0x334>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <GetAllErrors+0x340>)
 8003814:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003818:	4909      	ldr	r1, [pc, #36]	; (8003840 <GetAllErrors+0x33c>)
 800381a:	00c3      	lsls	r3, r0, #3
 800381c:	440b      	add	r3, r1
 800381e:	605a      	str	r2, [r3, #4]
		err_count++;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <GetAllErrors+0x334>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <GetAllErrors+0x334>)
 800382a:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800382c:	2301      	movs	r3, #1

}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	20007151 	.word	0x20007151
 800383c:	2000751c 	.word	0x2000751c
 8003840:	200070ec 	.word	0x200070ec
 8003844:	2000012c 	.word	0x2000012c

08003848 <FindDictionaryFromValue>:

/*Возращает ссылку на пару "ключ-значение", если записи нет, то возвращает NULL */
static Dictionary *FindDictionaryFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003852:	60b8      	str	r0, [r7, #8]
 8003854:	460b      	mov	r3, r1
 8003856:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e013      	b.n	800388a <FindDictionaryFromValue+0x42>
		temp = dictionary+i;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4413      	add	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return temp;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	edd3 7a00 	vldr	s15, [r3]
 8003872:	ed97 7a03 	vldr	s14, [r7, #12]
 8003876:	eeb4 7a67 	vcmp.f32	s14, s15
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	d101      	bne.n	8003884 <FindDictionaryFromValue+0x3c>
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	e007      	b.n	8003894 <FindDictionaryFromValue+0x4c>
	for (int i = 0; i < dict_len; ++i) {
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3301      	adds	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	429a      	cmp	r2, r3
 8003890:	dbe7      	blt.n	8003862 <FindDictionaryFromValue+0x1a>

	}
	return NULL;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <FindIndexFromValue>:

/*Возращает индекс "ключ-значение", если записи нет, -1*/
static int FindIndexFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80038aa:	60b8      	str	r0, [r7, #8]
 80038ac:	460b      	mov	r3, r1
 80038ae:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e013      	b.n	80038e2 <FindIndexFromValue+0x42>
		temp = dictionary+i;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return i;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80038ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	d101      	bne.n	80038dc <FindIndexFromValue+0x3c>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	e008      	b.n	80038ee <FindIndexFromValue+0x4e>
	for (int i = 0; i < dict_len; ++i) {
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	dbe7      	blt.n	80038ba <FindIndexFromValue+0x1a>

	}
	return -1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <LcdUpdate>:



uint8_t LcdUpdate(uint8_t *answer)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
	if(currentParameters==NULL)
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <LcdUpdate+0x80>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <LcdUpdate+0x1e>
	{
		result =  ShowMainDisplay();
 8003910:	f7ff f8b8 	bl	8002a84 <ShowMainDisplay>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e01d      	b.n	8003956 <LcdUpdate+0x5a>
	}
	else if(currentParameters==Errors)
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <LcdUpdate+0x80>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <LcdUpdate+0x84>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d104      	bne.n	800392e <LcdUpdate+0x32>
	{
		result =  ShowErrors();
 8003924:	f7ff fd7a 	bl	800341c <ShowErrors>
 8003928:	4603      	mov	r3, r0
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e013      	b.n	8003956 <LcdUpdate+0x5a>
	}
	else if(currentParameters == indication_rows)
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <LcdUpdate+0x80>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <LcdUpdate+0x88>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d10e      	bne.n	8003956 <LcdUpdate+0x5a>
	{
		ShowParameter(currentParameters+paramIndex);
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <LcdUpdate+0x80>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <LcdUpdate+0x8c>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4619      	mov	r1, r3
 8003942:	460b      	mov	r3, r1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	440b      	add	r3, r1
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fc5b 	bl	8003208 <ShowParameter>
		result =  1;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
	}
	if(result)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <LcdUpdate+0x74>
	{
		memcpy(answer,lcdAnswer,80);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <LcdUpdate+0x90>)
 8003960:	4618      	mov	r0, r3
 8003962:	4611      	mov	r1, r2
 8003964:	2350      	movs	r3, #80	; 0x50
 8003966:	461a      	mov	r2, r3
 8003968:	f01a fd0c 	bl	801e384 <memcpy>
		return 1;
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <LcdUpdate+0x76>
	}
	return 0;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000910 	.word	0x20000910
 8003980:	2000012c 	.word	0x2000012c
 8003984:	20000354 	.word	0x20000354
 8003988:	20000914 	.word	0x20000914
 800398c:	20007084 	.word	0x20007084

08003990 <Print>:

static void Print(Row *parameter, uint8_t index)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	817b      	strh	r3, [r7, #10]
	if(editMode)
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <Print+0x174>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d012      	beq.n	80039ce <Print+0x3e>
	{
		memcpy(lcdAnswer[index],editedValue,20);
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4a55      	ldr	r2, [pc, #340]	; (8003b08 <Print+0x178>)
 80039b4:	4413      	add	r3, r2
 80039b6:	4a55      	ldr	r2, [pc, #340]	; (8003b0c <Print+0x17c>)
 80039b8:	6811      	ldr	r1, [r2, #0]
 80039ba:	6855      	ldr	r5, [r2, #4]
 80039bc:	6894      	ldr	r4, [r2, #8]
 80039be:	68d0      	ldr	r0, [r2, #12]
 80039c0:	6019      	str	r1, [r3, #0]
 80039c2:	605d      	str	r5, [r3, #4]
 80039c4:	609c      	str	r4, [r3, #8]
 80039c6:	60d8      	str	r0, [r3, #12]
 80039c8:	6911      	ldr	r1, [r2, #16]
 80039ca:	6119      	str	r1, [r3, #16]
		return;
 80039cc:	e097      	b.n	8003afe <Print+0x16e>
	}
	switch (parameter->type) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7d5b      	ldrb	r3, [r3, #21]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	f200 8092 	bhi.w	8003afc <Print+0x16c>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <Print+0x50>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a3d 	.word	0x08003a3d
 80039e4:	08003a8f 	.word	0x08003a8f
 80039e8:	08003a61 	.word	0x08003a61
 80039ec:	08003ab3 	.word	0x08003ab3
 80039f0:	080039f5 	.word	0x080039f5
		case ROW_ETH_ADDR:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%03d.%03d.%03d.%03d",*((uint16_t*)parameter->data),*(((uint16_t*)parameter->data)+1),*(((uint16_t*)parameter->data)+2),*(((uint16_t*)parameter->data)+3));
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4a42      	ldr	r2, [pc, #264]	; (8003b08 <Print+0x178>)
 8003a00:	4413      	add	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	79d2      	ldrb	r2, [r2, #7]
 8003a06:	1898      	adds	r0, r3, r2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	3302      	adds	r3, #2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	461c      	mov	r4, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	3306      	adds	r3, #6
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	9200      	str	r2, [sp, #0]
 8003a30:	4623      	mov	r3, r4
 8003a32:	460a      	mov	r2, r1
 8003a34:	4936      	ldr	r1, [pc, #216]	; (8003b10 <Print+0x180>)
 8003a36:	f01b fcd1 	bl	801f3dc <siprintf>
			break;
 8003a3a:	e060      	b.n	8003afe <Print+0x16e>
		case ROW_USHORT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint16_t*)parameter->data));
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <Print+0x178>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	79d2      	ldrb	r2, [r2, #7]
 8003a4e:	1898      	adds	r0, r3, r2
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	492e      	ldr	r1, [pc, #184]	; (8003b14 <Print+0x184>)
 8003a5a:	f01b fcbf 	bl	801f3dc <siprintf>
			break;
 8003a5e:	e04e      	b.n	8003afe <Print+0x16e>
		case ROW_FLOAT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%f",*((float*)parameter->data));
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <Print+0x178>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	79d2      	ldrb	r2, [r2, #7]
 8003a72:	189c      	adds	r4, r3, r2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fd64 	bl	8000548 <__aeabi_f2d>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4924      	ldr	r1, [pc, #144]	; (8003b18 <Print+0x188>)
 8003a86:	4620      	mov	r0, r4
 8003a88:	f01b fca8 	bl	801f3dc <siprintf>
			break;
 8003a8c:	e037      	b.n	8003afe <Print+0x16e>
		case ROW_UINT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint32_t*)parameter->data));
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <Print+0x178>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	79d2      	ldrb	r2, [r2, #7]
 8003aa0:	1898      	adds	r0, r3, r2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	491a      	ldr	r1, [pc, #104]	; (8003b14 <Print+0x184>)
 8003aac:	f01b fc96 	bl	801f3dc <siprintf>
			break;
 8003ab0:	e025      	b.n	8003afe <Print+0x16e>
		case ROW_BINARY_12:
			temp = *(uint16_t*)parameter->data;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < 12; ++j) {
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e01a      	b.n	8003af6 <Print+0x166>
				uint8_t num = (temp & (1<<j))>0;
 8003ac0:	897a      	ldrh	r2, [r7, #10]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfcc      	ite	gt
 8003ad0:	2301      	movgt	r3, #1
 8003ad2:	2300      	movle	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	727b      	strb	r3, [r7, #9]
				sprintf(lcdAnswer[2]+parameter->param_pos+j,"%d",num);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	79db      	ldrb	r3, [r3, #7]
 8003adc:	461a      	mov	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <Print+0x18c>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	7a7a      	ldrb	r2, [r7, #9]
 8003ae8:	490a      	ldr	r1, [pc, #40]	; (8003b14 <Print+0x184>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f01b fc76 	bl	801f3dc <siprintf>
			for (int j = 0; j < 12; ++j) {
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b0b      	cmp	r3, #11
 8003afa:	dde1      	ble.n	8003ac0 <Print+0x130>
			}

		default:
			break;
 8003afc:	bf00      	nop
	}
}
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bdb0      	pop	{r4, r5, r7, pc}
 8003b04:	20000915 	.word	0x20000915
 8003b08:	20007084 	.word	0x20007084
 8003b0c:	200070d8 	.word	0x200070d8
 8003b10:	08023704 	.word	0x08023704
 8003b14:	08023718 	.word	0x08023718
 8003b18:	0802371c 	.word	0x0802371c
 8003b1c:	200070ac 	.word	0x200070ac

08003b20 <AcceptEdit>:

static void AcceptEdit(Row *par)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	if(editMode==0)return;
 8003b28:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <AcceptEdit+0x114>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d07c      	beq.n	8003c2a <AcceptEdit+0x10a>
	if(par->isEnum)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7a1b      	ldrb	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d027      	beq.n	8003b88 <AcceptEdit+0x68>
	{
		switch (par->type) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7d5b      	ldrb	r3, [r3, #21]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d01d      	beq.n	8003b7c <AcceptEdit+0x5c>
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	dc66      	bgt.n	8003c12 <AcceptEdit+0xf2>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <AcceptEdit+0x2e>
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d00c      	beq.n	8003b66 <AcceptEdit+0x46>
				break;
			case ROW_FLOAT:
				*((float*)par->data) = currentEnumKey;
				break;
			default:
				break;
 8003b4c:	e061      	b.n	8003c12 <AcceptEdit+0xf2>
				*((uint16_t*)par->data) = (uint16_t)currentEnumKey;
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <AcceptEdit+0x118>)
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b5c:	ee17 2a90 	vmov	r2, s15
 8003b60:	b292      	uxth	r2, r2
 8003b62:	801a      	strh	r2, [r3, #0]
				break;
 8003b64:	e058      	b.n	8003c18 <AcceptEdit+0xf8>
				*((uint32_t*)par->data) = (uint32_t)currentEnumKey;
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <AcceptEdit+0x118>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b74:	ee17 2a90 	vmov	r2, s15
 8003b78:	601a      	str	r2, [r3, #0]
				break;
 8003b7a:	e04d      	b.n	8003c18 <AcceptEdit+0xf8>
				*((float*)par->data) = currentEnumKey;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a2d      	ldr	r2, [pc, #180]	; (8003c38 <AcceptEdit+0x118>)
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	601a      	str	r2, [r3, #0]
				break;
 8003b86:	e047      	b.n	8003c18 <AcceptEdit+0xf8>
		}
	}
	else
	{
		int tmpi = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
		float tmpf;
		switch (par->type) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7d5b      	ldrb	r3, [r3, #21]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d840      	bhi.n	8003c16 <AcceptEdit+0xf6>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <AcceptEdit+0x7c>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bf1 	.word	0x08003bf1
 8003ba0:	08003bd1 	.word	0x08003bd1
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003c17 	.word	0x08003c17
 8003bac:	08003bb1 	.word	0x08003bb1
			case ROW_ETH_ADDR:
				ParseEthernetAddress(par);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9a7 	bl	8003f04 <ParseEthernetAddress>
				break;
 8003bb6:	e02f      	b.n	8003c18 <AcceptEdit+0xf8>
			case ROW_FLOAT:
				sscanf(editedValue+par->param_pos, "%f", (float*)par->data);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	79db      	ldrb	r3, [r3, #7]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <AcceptEdit+0x11c>)
 8003bc0:	18d0      	adds	r0, r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	491d      	ldr	r1, [pc, #116]	; (8003c40 <AcceptEdit+0x120>)
 8003bca:	f01b fc27 	bl	801f41c <siscanf>
				break;
 8003bce:	e023      	b.n	8003c18 <AcceptEdit+0xf8>
			case ROW_UINT:
				sscanf(editedValue+par->param_pos, "%d", &tmpi);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	79db      	ldrb	r3, [r3, #7]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <AcceptEdit+0x11c>)
 8003bd8:	4413      	add	r3, r2
 8003bda:	f107 020c 	add.w	r2, r7, #12
 8003bde:	4919      	ldr	r1, [pc, #100]	; (8003c44 <AcceptEdit+0x124>)
 8003be0:	4618      	mov	r0, r3
 8003be2:	f01b fc1b 	bl	801f41c <siscanf>
				*((uint32_t*)(par->data)) = tmpi;
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	601a      	str	r2, [r3, #0]
				break;
 8003bee:	e013      	b.n	8003c18 <AcceptEdit+0xf8>
			case ROW_USHORT:
				sscanf(editedValue+par->param_pos, "%d", &tmpi);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	79db      	ldrb	r3, [r3, #7]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <AcceptEdit+0x11c>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f107 020c 	add.w	r2, r7, #12
 8003bfe:	4911      	ldr	r1, [pc, #68]	; (8003c44 <AcceptEdit+0x124>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f01b fc0b 	bl	801f41c <siscanf>
				*((uint16_t*)(par->data)) = (uint16_t)tmpi;
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	801a      	strh	r2, [r3, #0]
				break;
 8003c10:	e002      	b.n	8003c18 <AcceptEdit+0xf8>
				break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <AcceptEdit+0xf8>
			default:
				break;
 8003c16:	bf00      	nop
		}
	}
	settingsSaveFRAM();
 8003c18:	f002 fa32 	bl	8006080 <settingsSaveFRAM>
	editMode = 0;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <AcceptEdit+0x114>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
	currentCursorPosition = -1;
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <AcceptEdit+0x128>)
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e000      	b.n	8003c2c <AcceptEdit+0x10c>
	if(editMode==0)return;
 8003c2a:	bf00      	nop

}
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000915 	.word	0x20000915
 8003c38:	20000918 	.word	0x20000918
 8003c3c:	200070d8 	.word	0x200070d8
 8003c40:	0802371c 	.word	0x0802371c
 8003c44:	08023718 	.word	0x08023718
 8003c48:	200000c3 	.word	0x200000c3

08003c4c <ShiftCursor>:

// direction == 0 ->left
// direction == 1 ->right
// return position
static int ShiftCursor(uint8_t direction, Row *par, uint8_t stepSize)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71bb      	strb	r3, [r7, #6]
	if(!editMode)return -1;
 8003c5c:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <ShiftCursor+0xc8>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <ShiftCursor+0x1e>
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
 8003c68:	e04d      	b.n	8003d06 <ShiftCursor+0xba>
	if(par->isEnum)return -1;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	7a1b      	ldrb	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <ShiftCursor+0x2c>
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e046      	b.n	8003d06 <ShiftCursor+0xba>
	int tempPos = direction ? currentCursorPosition+stepSize : currentCursorPosition-stepSize;
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <ShiftCursor+0x40>
 8003c7e:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <ShiftCursor+0xcc>)
 8003c80:	f993 3000 	ldrsb.w	r3, [r3]
 8003c84:	461a      	mov	r2, r3
 8003c86:	79bb      	ldrb	r3, [r7, #6]
 8003c88:	4413      	add	r3, r2
 8003c8a:	e005      	b.n	8003c98 <ShiftCursor+0x4c>
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <ShiftCursor+0xcc>)
 8003c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c92:	461a      	mov	r2, r3
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	60fb      	str	r3, [r7, #12]
	// Проверка на границы

	if(tempPos<par->param_pos)tempPos = par->param_pos;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	79db      	ldrb	r3, [r3, #7]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	da02      	bge.n	8003cac <ShiftCursor+0x60>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	79db      	ldrb	r3, [r3, #7]
 8003caa:	60fb      	str	r3, [r7, #12]
	if(tempPos>19)tempPos = 19;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b13      	cmp	r3, #19
 8003cb0:	dd05      	ble.n	8003cbe <ShiftCursor+0x72>
 8003cb2:	2313      	movs	r3, #19
 8003cb4:	60fb      	str	r3, [r7, #12]
	while(editedValue[tempPos]==0 && tempPos>par->param_pos)
 8003cb6:	e002      	b.n	8003cbe <ShiftCursor+0x72>
	{
		tempPos--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
	while(editedValue[tempPos]==0 && tempPos>par->param_pos)
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <ShiftCursor+0xd0>)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <ShiftCursor+0x8a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	79db      	ldrb	r3, [r3, #7]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	dcf0      	bgt.n	8003cb8 <ShiftCursor+0x6c>
	}
	switch (par->type) {
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	7d5b      	ldrb	r3, [r3, #21]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d10f      	bne.n	8003cfe <ShiftCursor+0xb2>
		case ROW_ETH_ADDR:
			if(editedValue[tempPos]=='.')
 8003cde:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <ShiftCursor+0xd0>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce8:	d10b      	bne.n	8003d02 <ShiftCursor+0xb6>
			{
				tempPos = direction ? tempPos+1 : tempPos-1;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <ShiftCursor+0xaa>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	e001      	b.n	8003cfa <ShiftCursor+0xae>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
			}
			break;
 8003cfc:	e001      	b.n	8003d02 <ShiftCursor+0xb6>
		default:
			break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <ShiftCursor+0xb8>
			break;
 8003d02:	bf00      	nop
	}
	return tempPos;
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000915 	.word	0x20000915
 8003d18:	200000c3 	.word	0x200000c3
 8003d1c:	200070d8 	.word	0x200070d8

08003d20 <OnNumberPressKey>:

static uint8_t OnNumberPressKey(uint8_t key)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
	if(key>9)return 0;
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	2b09      	cmp	r3, #9
 8003d2e:	d901      	bls.n	8003d34 <OnNumberPressKey+0x14>
 8003d30:	2300      	movs	r3, #0
 8003d32:	e032      	b.n	8003d9a <OnNumberPressKey+0x7a>
	uint8_t i = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
	if(!editMode)return 0;
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <OnNumberPressKey+0x84>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <OnNumberPressKey+0x24>
 8003d40:	2300      	movs	r3, #0
 8003d42:	e02a      	b.n	8003d9a <OnNumberPressKey+0x7a>
	if(currentParameters==NULL)return 0;
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <OnNumberPressKey+0x88>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <OnNumberPressKey+0x30>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e024      	b.n	8003d9a <OnNumberPressKey+0x7a>
	Row *par = currentParameters+paramIndex;
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <OnNumberPressKey+0x88>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <OnNumberPressKey+0x8c>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	440b      	add	r3, r1
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	60bb      	str	r3, [r7, #8]
	switch (par->type) {
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	7d5b      	ldrb	r3, [r3, #21]
 8003d6a:	2b04      	cmp	r3, #4
		case ROW_ETH_ADDR:
			break;
		default:
			break;
 8003d6c:	bf00      	nop
	}
	editedValue[currentCursorPosition] = 48+key;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <OnNumberPressKey+0x90>)
 8003d70:	f993 3000 	ldrsb.w	r3, [r3]
 8003d74:	461a      	mov	r2, r3
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	3330      	adds	r3, #48	; 0x30
 8003d7a:	b2d9      	uxtb	r1, r3
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <OnNumberPressKey+0x94>)
 8003d7e:	5499      	strb	r1, [r3, r2]
	currentCursorPosition = ShiftCursor(1, par, 1);
 8003d80:	2201      	movs	r2, #1
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7ff ff61 	bl	8003c4c <ShiftCursor>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b25a      	sxtb	r2, r3
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <OnNumberPressKey+0x90>)
 8003d90:	701a      	strb	r2, [r3, #0]
	ShowParameter(par);
 8003d92:	68b8      	ldr	r0, [r7, #8]
 8003d94:	f7ff fa38 	bl	8003208 <ShowParameter>
	return 1;
 8003d98:	2301      	movs	r3, #1
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000915 	.word	0x20000915
 8003da8:	20000910 	.word	0x20000910
 8003dac:	20000914 	.word	0x20000914
 8003db0:	200000c3 	.word	0x200000c3
 8003db4:	200070d8 	.word	0x200070d8

08003db8 <OnDeletePressKey>:

static uint8_t OnDeletePressKey()
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
	uint8_t i;
	if(!editMode)return 0;
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <OnDeletePressKey+0xa0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <OnDeletePressKey+0x12>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e041      	b.n	8003e4e <OnDeletePressKey+0x96>
	if(currentParameters==NULL)return 0;
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <OnDeletePressKey+0xa4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <OnDeletePressKey+0x1e>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e03b      	b.n	8003e4e <OnDeletePressKey+0x96>
	Row *par = currentParameters+paramIndex;
 8003dd6:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <OnDeletePressKey+0xa4>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <OnDeletePressKey+0xa8>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	4619      	mov	r1, r3
 8003de0:	460b      	mov	r3, r1
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	440b      	add	r3, r1
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	603b      	str	r3, [r7, #0]
	switch (par->type) {
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	7d5b      	ldrb	r3, [r3, #21]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d101      	bne.n	8003df8 <OnDeletePressKey+0x40>
		case ROW_ETH_ADDR:
			return 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e02a      	b.n	8003e4e <OnDeletePressKey+0x96>
		default:
			editedValue[par->param_len+par->param_pos-1]='0';
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	799b      	ldrb	r3, [r3, #6]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	79db      	ldrb	r3, [r3, #7]
 8003e02:	4413      	add	r3, r2
 8003e04:	3b01      	subs	r3, #1
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <OnDeletePressKey+0xac>)
 8003e08:	2130      	movs	r1, #48	; 0x30
 8003e0a:	54d1      	strb	r1, [r2, r3]
			for (i = currentCursorPosition; i < par->param_len+par->param_pos-1; ++i) {
 8003e0c:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <OnDeletePressKey+0xb0>)
 8003e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8003e12:	71fb      	strb	r3, [r7, #7]
 8003e14:	e009      	b.n	8003e2a <OnDeletePressKey+0x72>
				editedValue[i] = editedValue[i+1];
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	4911      	ldr	r1, [pc, #68]	; (8003e64 <OnDeletePressKey+0xac>)
 8003e1e:	5c89      	ldrb	r1, [r1, r2]
 8003e20:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <OnDeletePressKey+0xac>)
 8003e22:	54d1      	strb	r1, [r2, r3]
			for (i = currentCursorPosition; i < par->param_len+par->param_pos-1; ++i) {
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	3301      	adds	r3, #1
 8003e28:	71fb      	strb	r3, [r7, #7]
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	799b      	ldrb	r3, [r3, #6]
 8003e30:	4619      	mov	r1, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	79db      	ldrb	r3, [r3, #7]
 8003e36:	440b      	add	r3, r1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	dbeb      	blt.n	8003e16 <OnDeletePressKey+0x5e>
			}
			editedValue[19]=0;
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <OnDeletePressKey+0xac>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	74da      	strb	r2, [r3, #19]
			break;
 8003e44:	bf00      	nop
	}
	ShowParameter(par);
 8003e46:	6838      	ldr	r0, [r7, #0]
 8003e48:	f7ff f9de 	bl	8003208 <ShowParameter>
	return 1;
 8003e4c:	2301      	movs	r3, #1
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000915 	.word	0x20000915
 8003e5c:	20000910 	.word	0x20000910
 8003e60:	20000914 	.word	0x20000914
 8003e64:	200070d8 	.word	0x200070d8
 8003e68:	200000c3 	.word	0x200000c3

08003e6c <OnDecPressKey>:

static uint8_t OnDecPressKey()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	71fb      	strb	r3, [r7, #7]
	if(!editMode)return 0;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <OnDecPressKey+0x84>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <OnDecPressKey+0x16>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e031      	b.n	8003ee6 <OnDecPressKey+0x7a>
	if(currentParameters==NULL)return 0;
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <OnDecPressKey+0x88>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <OnDecPressKey+0x22>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e02b      	b.n	8003ee6 <OnDecPressKey+0x7a>
	Row *par = currentParameters+paramIndex;
 8003e8e:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <OnDecPressKey+0x88>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <OnDecPressKey+0x8c>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	460b      	mov	r3, r1
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	440b      	add	r3, r1
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	603b      	str	r3, [r7, #0]
	if(par->type != ROW_FLOAT)return 0;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	7d5b      	ldrb	r3, [r3, #21]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d001      	beq.n	8003eb0 <OnDecPressKey+0x44>
 8003eac:	2300      	movs	r3, #0
 8003eae:	e01a      	b.n	8003ee6 <OnDecPressKey+0x7a>
	switch (par->type) {
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	7d5b      	ldrb	r3, [r3, #21]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d101      	bne.n	8003ebc <OnDecPressKey+0x50>
		case ROW_ETH_ADDR:
			return 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e014      	b.n	8003ee6 <OnDecPressKey+0x7a>
		default:
			break;
 8003ebc:	bf00      	nop
	}
	editedValue[currentCursorPosition] = '.';
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <OnDecPressKey+0x90>)
 8003ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <OnDecPressKey+0x94>)
 8003ec8:	212e      	movs	r1, #46	; 0x2e
 8003eca:	5499      	strb	r1, [r3, r2]
	currentCursorPosition = ShiftCursor(1, par, 1);
 8003ecc:	2201      	movs	r2, #1
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f7ff febb 	bl	8003c4c <ShiftCursor>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <OnDecPressKey+0x90>)
 8003edc:	701a      	strb	r2, [r3, #0]
	ShowParameter(par);
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f7ff f992 	bl	8003208 <ShowParameter>
	return 1;
 8003ee4:	2301      	movs	r3, #1
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000915 	.word	0x20000915
 8003ef4:	20000910 	.word	0x20000910
 8003ef8:	20000914 	.word	0x20000914
 8003efc:	200000c3 	.word	0x200000c3
 8003f00:	200070d8 	.word	0x200070d8

08003f04 <ParseEthernetAddress>:

static void ParseEthernetAddress(Row *par)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	int tmp;
	char *p = editedValue+par->param_pos;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	79db      	ldrb	r3, [r3, #7]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <ParseEthernetAddress+0x70>)
 8003f14:	4413      	add	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; ++i) {
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e021      	b.n	8003f62 <ParseEthernetAddress+0x5e>
		sscanf(p, "%d", &tmp);
 8003f1e:	f107 030c 	add.w	r3, r7, #12
 8003f22:	461a      	mov	r2, r3
 8003f24:	4914      	ldr	r1, [pc, #80]	; (8003f78 <ParseEthernetAddress+0x74>)
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f01b fa78 	bl	801f41c <siscanf>
		p = strchr(p, '.');
 8003f2c:	212e      	movs	r1, #46	; 0x2e
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f01b fae5 	bl	801f4fe <strchr>
 8003f34:	6178      	str	r0, [r7, #20]
		if(p!=NULL)p=p+1;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <ParseEthernetAddress+0x3e>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
		*((uint16_t*)par->data+i) = tmp%256;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	425a      	negs	r2, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	bf58      	it	pl
 8003f4c:	4253      	negpl	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68d1      	ldr	r1, [r2, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	440a      	add	r2, r1
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 4; ++i) {
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	ddda      	ble.n	8003f1e <ParseEthernetAddress+0x1a>
	}
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200070d8 	.word	0x200070d8
 8003f78:	08023718 	.word	0x08023718

08003f7c <IsNumber>:

static uint8_t IsNumber(char *symbol)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	return *symbol>=48 && *symbol<=57;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b2f      	cmp	r3, #47	; 0x2f
 8003f8a:	d905      	bls.n	8003f98 <IsNumber+0x1c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b39      	cmp	r3, #57	; 0x39
 8003f92:	d801      	bhi.n	8003f98 <IsNumber+0x1c>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <IsNumber+0x1e>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <DecIncSymbol>:

static void DecIncSymbol(char *symbol, uint8_t dir)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
	if(!IsNumber(symbol))return;
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ffe1 	bl	8003f7c <IsNumber>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01c      	beq.n	8003ffa <DecIncSymbol+0x52>
	if(dir)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <DecIncSymbol+0x38>
	{
		*symbol = *symbol < 57 ? *symbol+1 : 48;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b38      	cmp	r3, #56	; 0x38
 8003fcc:	d804      	bhi.n	8003fd8 <DecIncSymbol+0x30>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	e000      	b.n	8003fda <DecIncSymbol+0x32>
 8003fd8:	2230      	movs	r2, #48	; 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e00d      	b.n	8003ffc <DecIncSymbol+0x54>
	}
	else
	{
		*symbol = *symbol > 48 ? *symbol-1 : 57;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b30      	cmp	r3, #48	; 0x30
 8003fe6:	d904      	bls.n	8003ff2 <DecIncSymbol+0x4a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	e000      	b.n	8003ff4 <DecIncSymbol+0x4c>
 8003ff2:	2239      	movs	r2, #57	; 0x39
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e000      	b.n	8003ffc <DecIncSymbol+0x54>
	if(!IsNumber(symbol))return;
 8003ffa:	bf00      	nop
	}
}
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <GetEditedValue>:

static void GetEditedValue(Row *par)
{
 8004004:	b5b0      	push	{r4, r5, r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
	if(par == NULL)return;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d065      	beq.n	80040de <GetEditedValue+0xda>
	switch (par->type) {
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7d5b      	ldrb	r3, [r3, #21]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d863      	bhi.n	80040e2 <GetEditedValue+0xde>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <GetEditedValue+0x1c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004091 	.word	0x08004091
 8004024:	08004073 	.word	0x08004073
 8004028:	080040af 	.word	0x080040af
 800402c:	080040e3 	.word	0x080040e3
 8004030:	08004035 	.word	0x08004035
		case ROW_ETH_ADDR:
			sprintf(editedValue+par->param_pos,"%03d.%03d.%03d.%03d",*((uint16_t*)par->data),*(((uint16_t*)par->data)+1),*(((uint16_t*)par->data)+2),*(((uint16_t*)par->data)+3));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	79db      	ldrb	r3, [r3, #7]
 8004038:	461a      	mov	r2, r3
 800403a:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <GetEditedValue+0xe8>)
 800403c:	18d0      	adds	r0, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	3302      	adds	r3, #2
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461c      	mov	r4, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	3304      	adds	r3, #4
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	3306      	adds	r3, #6
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	9200      	str	r2, [sp, #0]
 8004066:	4623      	mov	r3, r4
 8004068:	460a      	mov	r2, r1
 800406a:	4921      	ldr	r1, [pc, #132]	; (80040f0 <GetEditedValue+0xec>)
 800406c:	f01b f9b6 	bl	801f3dc <siprintf>
			break;
 8004070:	e038      	b.n	80040e4 <GetEditedValue+0xe0>
		case ROW_UINT:
			sprintf(editedValue+par->param_pos,"%0*d",par->param_len, *((uint32_t*)par->data));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	79db      	ldrb	r3, [r3, #7]
 8004076:	461a      	mov	r2, r3
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <GetEditedValue+0xe8>)
 800407a:	18d0      	adds	r0, r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	799b      	ldrb	r3, [r3, #6]
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	491a      	ldr	r1, [pc, #104]	; (80040f4 <GetEditedValue+0xf0>)
 800408a:	f01b f9a7 	bl	801f3dc <siprintf>
			break;
 800408e:	e029      	b.n	80040e4 <GetEditedValue+0xe0>
		case ROW_USHORT:
			sprintf(editedValue+par->param_pos,"%0*d",par->param_len, *((uint16_t*)par->data));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	79db      	ldrb	r3, [r3, #7]
 8004094:	461a      	mov	r2, r3
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <GetEditedValue+0xe8>)
 8004098:	18d0      	adds	r0, r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	799b      	ldrb	r3, [r3, #6]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	4913      	ldr	r1, [pc, #76]	; (80040f4 <GetEditedValue+0xf0>)
 80040a8:	f01b f998 	bl	801f3dc <siprintf>
			break;
 80040ac:	e01a      	b.n	80040e4 <GetEditedValue+0xe0>
		case ROW_FLOAT:
			sprintf(editedValue+par->param_pos,"%0*f",par->param_len, *((float*)par->data));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	79db      	ldrb	r3, [r3, #7]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <GetEditedValue+0xe8>)
 80040b6:	18d4      	adds	r4, r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	799b      	ldrb	r3, [r3, #6]
 80040bc:	461d      	mov	r5, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fa3f 	bl	8000548 <__aeabi_f2d>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	e9cd 2300 	strd	r2, r3, [sp]
 80040d2:	462a      	mov	r2, r5
 80040d4:	4908      	ldr	r1, [pc, #32]	; (80040f8 <GetEditedValue+0xf4>)
 80040d6:	4620      	mov	r0, r4
 80040d8:	f01b f980 	bl	801f3dc <siprintf>
			break;
 80040dc:	e002      	b.n	80040e4 <GetEditedValue+0xe0>
	if(par == NULL)return;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <GetEditedValue+0xe0>
		default:
			break;
 80040e2:	bf00      	nop
	}

}
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200070d8 	.word	0x200070d8
 80040f0:	08023704 	.word	0x08023704
 80040f4:	08023720 	.word	0x08023720
 80040f8:	08023728 	.word	0x08023728

080040fc <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8004100:	2201      	movs	r2, #1
 8004102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004106:	481f      	ldr	r0, [pc, #124]	; (8004184 <lcd_init+0x88>)
 8004108:	f005 fd9a 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	2110      	movs	r1, #16
 8004110:	481c      	ldr	r0, [pc, #112]	; (8004184 <lcd_init+0x88>)
 8004112:	f005 fd95 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8004116:	200f      	movs	r0, #15
 8004118:	f002 ff9c 	bl	8007054 <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 800411c:	2100      	movs	r1, #0
 800411e:	2033      	movs	r0, #51	; 0x33
 8004120:	f000 f892 	bl	8004248 <sendByte>
	HAL_Delay(1);
 8004124:	2001      	movs	r0, #1
 8004126:	f002 ff95 	bl	8007054 <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 800412a:	2100      	movs	r1, #0
 800412c:	2032      	movs	r0, #50	; 0x32
 800412e:	f000 f88b 	bl	8004248 <sendByte>
	HAL_Delay(1);
 8004132:	2001      	movs	r0, #1
 8004134:	f002 ff8e 	bl	8007054 <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE1, 0); // включаем режим 4 бит
 8004138:	2100      	movs	r1, #0
 800413a:	202a      	movs	r0, #42	; 0x2a
 800413c:	f000 f884 	bl	8004248 <sendByte>
	HAL_Delay(2);
 8004140:	2002      	movs	r0, #2
 8004142:	f002 ff87 	bl	8007054 <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8004146:	2100      	movs	r1, #0
 8004148:	2008      	movs	r0, #8
 800414a:	f000 f87d 	bl	8004248 <sendByte>
	HAL_Delay(1);
 800414e:	2001      	movs	r0, #1
 8004150:	f002 ff80 	bl	8007054 <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8004154:	2100      	movs	r1, #0
 8004156:	2001      	movs	r0, #1
 8004158:	f000 f876 	bl	8004248 <sendByte>
	HAL_Delay(2);
 800415c:	2002      	movs	r0, #2
 800415e:	f002 ff79 	bl	8007054 <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8004162:	2100      	movs	r1, #0
 8004164:	2006      	movs	r0, #6
 8004166:	f000 f86f 	bl	8004248 <sendByte>
	HAL_Delay(1);
 800416a:	2001      	movs	r0, #1
 800416c:	f002 ff72 	bl	8007054 <HAL_Delay>
	sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8004170:	2100      	movs	r1, #0
 8004172:	200c      	movs	r0, #12
 8004174:	f000 f868 	bl	8004248 <sendByte>
	HAL_Delay(1);
 8004178:	2001      	movs	r0, #1
 800417a:	f002 ff6b 	bl	8007054 <HAL_Delay>
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40020400 	.word	0x40020400

08004188 <SetCursor>:

void SetCursor(int position)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	if(position==-1 || position>79)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d002      	beq.n	800419e <SetCursor+0x16>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b4f      	cmp	r3, #79	; 0x4f
 800419c:	dd07      	ble.n	80041ae <SetCursor+0x26>
	{
		sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 800419e:	2100      	movs	r1, #0
 80041a0:	200c      	movs	r0, #12
 80041a2:	f000 f851 	bl	8004248 <sendByte>
		HAL_Delay(1);
 80041a6:	2001      	movs	r0, #1
 80041a8:	f002 ff54 	bl	8007054 <HAL_Delay>
 80041ac:	e047      	b.n	800423e <SetCursor+0xb6>
	}
	else
	{
		sendByte(DISPLAY_ON_CURSOR_ON, 0);// включаем дисплей и ставим курсор
 80041ae:	2100      	movs	r1, #0
 80041b0:	200f      	movs	r0, #15
 80041b2:	f000 f849 	bl	8004248 <sendByte>
		HAL_Delay(1);
 80041b6:	2001      	movs	r0, #1
 80041b8:	f002 ff4c 	bl	8007054 <HAL_Delay>
		uint8_t row = position/20;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <SetCursor+0xbc>)
 80041c0:	fb82 1203 	smull	r1, r2, r2, r3
 80041c4:	10d2      	asrs	r2, r2, #3
 80041c6:	17db      	asrs	r3, r3, #31
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	73bb      	strb	r3, [r7, #14]
		uint8_t col = position%20;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <SetCursor+0xbc>)
 80041d0:	fb83 1302 	smull	r1, r3, r3, r2
 80041d4:	10d9      	asrs	r1, r3, #3
 80041d6:	17d3      	asrs	r3, r2, #31
 80041d8:	1ac9      	subs	r1, r1, r3
 80041da:	460b      	mov	r3, r1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	1ad1      	subs	r1, r2, r3
 80041e4:	460b      	mov	r3, r1
 80041e6:	737b      	strb	r3, [r7, #13]
		uint8_t addr = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
		switch (row) {
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d824      	bhi.n	800423c <SetCursor+0xb4>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <SetCursor+0x70>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004209 	.word	0x08004209
 80041fc:	0800420f 	.word	0x0800420f
 8004200:	08004215 	.word	0x08004215
 8004204:	0800421b 	.word	0x0800421b
			case 0:
				addr = 0x0;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
				break;
 800420c:	e008      	b.n	8004220 <SetCursor+0x98>
			case 1:
				addr = 0x40;
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	73fb      	strb	r3, [r7, #15]
				break;
 8004212:	e005      	b.n	8004220 <SetCursor+0x98>
			case 2:
				addr = 0x14;
 8004214:	2314      	movs	r3, #20
 8004216:	73fb      	strb	r3, [r7, #15]
				break;
 8004218:	e002      	b.n	8004220 <SetCursor+0x98>
			case 3:
				addr = 0x54;
 800421a:	2354      	movs	r3, #84	; 0x54
 800421c:	73fb      	strb	r3, [r7, #15]
				break;
 800421e:	bf00      	nop
			default:
				return;
		}
		sendByte(64+addr+col, 0); // установка курсора
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	7b7b      	ldrb	r3, [r7, #13]
 8004224:	4413      	add	r3, r2
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3340      	adds	r3, #64	; 0x40
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f80a 	bl	8004248 <sendByte>
		HAL_Delay(1);
 8004234:	2001      	movs	r0, #1
 8004236:	f002 ff0d 	bl	8007054 <HAL_Delay>
 800423a:	e000      	b.n	800423e <SetCursor+0xb6>
				return;
 800423c:	bf00      	nop
	}
}
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	66666667 	.word	0x66666667

08004248 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	6039      	str	r1, [r7, #0]
 8004252:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8004254:	2200      	movs	r2, #0
 8004256:	216f      	movs	r1, #111	; 0x6f
 8004258:	4841      	ldr	r0, [pc, #260]	; (8004360 <sendByte+0x118>)
 800425a:	f005 fcf1 	bl	8009c40 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <sendByte+0x28>
 8004264:	2201      	movs	r2, #1
 8004266:	2140      	movs	r1, #64	; 0x40
 8004268:	483d      	ldr	r0, [pc, #244]	; (8004360 <sendByte+0x118>)
 800426a:	f005 fce9 	bl	8009c40 <HAL_GPIO_WritePin>
 800426e:	e004      	b.n	800427a <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	483a      	ldr	r0, [pc, #232]	; (8004360 <sendByte+0x118>)
 8004276:	f005 fce3 	bl	8009c40 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	2b00      	cmp	r3, #0
 8004280:	da04      	bge.n	800428c <sendByte+0x44>
 8004282:	2201      	movs	r2, #1
 8004284:	2108      	movs	r1, #8
 8004286:	4836      	ldr	r0, [pc, #216]	; (8004360 <sendByte+0x118>)
 8004288:	f005 fcda 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <sendByte+0x58>
 8004296:	2201      	movs	r2, #1
 8004298:	2104      	movs	r1, #4
 800429a:	4831      	ldr	r0, [pc, #196]	; (8004360 <sendByte+0x118>)
 800429c:	f005 fcd0 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <sendByte+0x6c>
 80042aa:	2201      	movs	r2, #1
 80042ac:	2102      	movs	r1, #2
 80042ae:	482c      	ldr	r0, [pc, #176]	; (8004360 <sendByte+0x118>)
 80042b0:	f005 fcc6 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <sendByte+0x80>
 80042be:	2201      	movs	r2, #1
 80042c0:	2101      	movs	r1, #1
 80042c2:	4827      	ldr	r0, [pc, #156]	; (8004360 <sendByte+0x118>)
 80042c4:	f005 fcbc 	bl	8009c40 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 80042c8:	2201      	movs	r2, #1
 80042ca:	2120      	movs	r1, #32
 80042cc:	4824      	ldr	r0, [pc, #144]	; (8004360 <sendByte+0x118>)
 80042ce:	f005 fcb7 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80042d2:	2001      	movs	r0, #1
 80042d4:	f002 febe 	bl	8007054 <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 80042d8:	2200      	movs	r2, #0
 80042da:	2120      	movs	r1, #32
 80042dc:	4820      	ldr	r0, [pc, #128]	; (8004360 <sendByte+0x118>)
 80042de:	f005 fcaf 	bl	8009c40 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 80042e2:	2200      	movs	r2, #0
 80042e4:	212f      	movs	r1, #47	; 0x2f
 80042e6:	481e      	ldr	r0, [pc, #120]	; (8004360 <sendByte+0x118>)
 80042e8:	f005 fcaa 	bl	8009c40 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 80042ec:	2201      	movs	r2, #1
 80042ee:	2120      	movs	r1, #32
 80042f0:	481b      	ldr	r0, [pc, #108]	; (8004360 <sendByte+0x118>)
 80042f2:	f005 fca5 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <sendByte+0xc2>
 8004300:	2201      	movs	r2, #1
 8004302:	2108      	movs	r1, #8
 8004304:	4816      	ldr	r0, [pc, #88]	; (8004360 <sendByte+0x118>)
 8004306:	f005 fc9b 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <sendByte+0xd6>
 8004314:	2201      	movs	r2, #1
 8004316:	2104      	movs	r1, #4
 8004318:	4811      	ldr	r0, [pc, #68]	; (8004360 <sendByte+0x118>)
 800431a:	f005 fc91 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d004      	beq.n	8004332 <sendByte+0xea>
 8004328:	2201      	movs	r2, #1
 800432a:	2102      	movs	r1, #2
 800432c:	480c      	ldr	r0, [pc, #48]	; (8004360 <sendByte+0x118>)
 800432e:	f005 fc87 	bl	8009c40 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <sendByte+0xfe>
 800433c:	2201      	movs	r2, #1
 800433e:	2101      	movs	r1, #1
 8004340:	4807      	ldr	r0, [pc, #28]	; (8004360 <sendByte+0x118>)
 8004342:	f005 fc7d 	bl	8009c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8004346:	2200      	movs	r2, #0
 8004348:	2120      	movs	r1, #32
 800434a:	4805      	ldr	r0, [pc, #20]	; (8004360 <sendByte+0x118>)
 800434c:	f005 fc78 	bl	8009c40 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8004350:	2001      	movs	r0, #1
 8004352:	f002 fe7f 	bl	8007054 <HAL_Delay>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40020400 	.word	0x40020400

08004364 <sendStr>:


void sendStr( char *str, int row , int position )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b03      	cmp	r3, #3
 8004374:	d816      	bhi.n	80043a4 <sendStr+0x40>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <sendStr+0x18>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004393 	.word	0x08004393
 8004384:	08004399 	.word	0x08004399
 8004388:	0800439f 	.word	0x0800439f

	switch (row)
	{

		case 0:
			start_address = 0x0; // 1 строка
 800438c:	2300      	movs	r3, #0
 800438e:	75fb      	strb	r3, [r7, #23]
			break;
 8004390:	e008      	b.n	80043a4 <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	75fb      	strb	r3, [r7, #23]
			break;
 8004396:	e005      	b.n	80043a4 <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8004398:	2314      	movs	r3, #20
 800439a:	75fb      	strb	r3, [r7, #23]
			break;
 800439c:	e002      	b.n	80043a4 <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 800439e:	2354      	movs	r3, #84	; 0x54
 80043a0:	75fb      	strb	r3, [r7, #23]
			break;
 80043a2:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	4413      	add	r3, r2
 80043ac:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043b4:	75fb      	strb	r3, [r7, #23]
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff44 	bl	8004248 <sendByte>

	HAL_Delay(4);
 80043c0:	2004      	movs	r0, #4
 80043c2:	f002 fe47 	bl	8007054 <HAL_Delay>
//	while(*str != '\0'){
//
//		sendByte(*str, 1);
//		str++;
//	}
	uint8_t byte  = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 20; ++i) {
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e011      	b.n	80043f4 <sendStr+0x90>
		byte = *(str+i);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	75bb      	strb	r3, [r7, #22]
		if(byte==0)byte = 32;
 80043da:	7dbb      	ldrb	r3, [r7, #22]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <sendStr+0x80>
 80043e0:	2320      	movs	r3, #32
 80043e2:	75bb      	strb	r3, [r7, #22]
		sendByte(byte, 1);
 80043e4:	7dbb      	ldrb	r3, [r7, #22]
 80043e6:	2101      	movs	r1, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff2d 	bl	8004248 <sendByte>
	for (int i = 0; i < 20; ++i) {
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3301      	adds	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b13      	cmp	r3, #19
 80043f8:	ddea      	ble.n	80043d0 <sendStr+0x6c>
	}
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 800440a:	f000 fc03 	bl	8004c14 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800440e:	f002 fddf 	bl	8006fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004412:	f000 f841 	bl	8004498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004416:	f000 fa9d 	bl	8004954 <MX_GPIO_Init>
  MX_DMA_Init();
 800441a:	f000 fa6b 	bl	80048f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800441e:	f000 fa15 	bl	800484c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004422:	f000 fa3d 	bl	80048a0 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8004426:	f000 f93f 	bl	80046a8 <MX_SPI3_Init>
  MX_ADC1_Init();
 800442a:	f000 f8a5 	bl	8004578 <MX_ADC1_Init>
  MX_TIM3_Init();
 800442e:	f000 f971 	bl	8004714 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004432:	f000 f9bd 	bl	80047b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8004436:	f7ff fe61 	bl	80040fc <lcd_init>
  ethernet_reset();
 800443a:	f7fd fadf 	bl	80019fc <ethernet_reset>
  Analog_Start();
 800443e:	f7fc fdd5 	bl	8000fec <Analog_Start>
  Start_Timers();
 8004442:	f002 fa93 	bl	800696c <Start_Timers>
  settingsLoadFRAM();
 8004446:	f001 fdd3 	bl	8005ff0 <settingsLoadFRAM>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 8004452:	f107 0320 	add.w	r3, r7, #32
 8004456:	2101      	movs	r1, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f009 fc57 	bl	800dd0c <osSemaphoreCreate>
 800445e:	4603      	mov	r3, r0
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <main+0x88>)
 8004462:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <main+0x8c>)
 8004466:	1d3c      	adds	r4, r7, #4
 8004468:	461d      	mov	r5, r3
 800446a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800446c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800446e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f009 fb49 	bl	800db12 <osThreadCreate>
 8004480:	4603      	mov	r3, r0
 8004482:	4a04      	ldr	r2, [pc, #16]	; (8004494 <main+0x90>)
 8004484:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004486:	f009 fb2d 	bl	800dae4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800448a:	e7fe      	b.n	800448a <main+0x86>
 800448c:	200073ec 	.word	0x200073ec
 8004490:	0802373c 	.word	0x0802373c
 8004494:	20007154 	.word	0x20007154

08004498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b094      	sub	sp, #80	; 0x50
 800449c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800449e:	f107 0320 	add.w	r3, r7, #32
 80044a2:	2230      	movs	r2, #48	; 0x30
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f019 ff94 	bl	801e3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <SystemClock_Config+0xd8>)
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <SystemClock_Config+0xd8>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6413      	str	r3, [r2, #64]	; 0x40
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <SystemClock_Config+0xd8>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d8:	2300      	movs	r3, #0
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <SystemClock_Config+0xdc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <SystemClock_Config+0xdc>)
 80044e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <SystemClock_Config+0xdc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044fe:	2302      	movs	r3, #2
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004508:	2319      	movs	r3, #25
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800450c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004512:	2302      	movs	r3, #2
 8004514:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004516:	2304      	movs	r3, #4
 8004518:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800451a:	f107 0320 	add.w	r3, r7, #32
 800451e:	4618      	mov	r0, r3
 8004520:	f005 fba8 	bl	8009c74 <HAL_RCC_OscConfig>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800452a:	f000 fb57 	bl	8004bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800452e:	230f      	movs	r3, #15
 8004530:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004532:	2302      	movs	r3, #2
 8004534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800453a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800453e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004546:	f107 030c 	add.w	r3, r7, #12
 800454a:	2105      	movs	r1, #5
 800454c:	4618      	mov	r0, r3
 800454e:	f005 fe09 	bl	800a164 <HAL_RCC_ClockConfig>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004558:	f000 fb40 	bl	8004bdc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004562:	2000      	movs	r0, #0
 8004564:	f005 fee4 	bl	800a330 <HAL_RCC_MCOConfig>
}
 8004568:	bf00      	nop
 800456a:	3750      	adds	r7, #80	; 0x50
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000

08004578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800457e:	463b      	mov	r3, r7
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <MX_ADC1_Init+0x128>)
 800458c:	4a45      	ldr	r2, [pc, #276]	; (80046a4 <MX_ADC1_Init+0x12c>)
 800458e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004590:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <MX_ADC1_Init+0x128>)
 8004592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004598:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <MX_ADC1_Init+0x128>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800459e:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045aa:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80045b2:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045ca:	2206      	movs	r2, #6
 80045cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80045ce:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045d6:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045d8:	2201      	movs	r2, #1
 80045da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045dc:	4830      	ldr	r0, [pc, #192]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045de:	f002 fd5d 	bl	800709c <HAL_ADC_Init>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80045e8:	f000 faf8 	bl	8004bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80045ec:	230a      	movs	r3, #10
 80045ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80045f0:	2301      	movs	r3, #1
 80045f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80045f4:	2307      	movs	r3, #7
 80045f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045f8:	463b      	mov	r3, r7
 80045fa:	4619      	mov	r1, r3
 80045fc:	4828      	ldr	r0, [pc, #160]	; (80046a0 <MX_ADC1_Init+0x128>)
 80045fe:	f002 feb5 	bl	800736c <HAL_ADC_ConfigChannel>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004608:	f000 fae8 	bl	8004bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800460c:	230c      	movs	r3, #12
 800460e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004610:	2302      	movs	r3, #2
 8004612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004614:	463b      	mov	r3, r7
 8004616:	4619      	mov	r1, r3
 8004618:	4821      	ldr	r0, [pc, #132]	; (80046a0 <MX_ADC1_Init+0x128>)
 800461a:	f002 fea7 	bl	800736c <HAL_ADC_ConfigChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004624:	f000 fada 	bl	8004bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004628:	230d      	movs	r3, #13
 800462a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800462c:	2303      	movs	r3, #3
 800462e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004630:	463b      	mov	r3, r7
 8004632:	4619      	mov	r1, r3
 8004634:	481a      	ldr	r0, [pc, #104]	; (80046a0 <MX_ADC1_Init+0x128>)
 8004636:	f002 fe99 	bl	800736c <HAL_ADC_ConfigChannel>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004640:	f000 facc 	bl	8004bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004644:	2303      	movs	r3, #3
 8004646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004648:	2304      	movs	r3, #4
 800464a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800464c:	463b      	mov	r3, r7
 800464e:	4619      	mov	r1, r3
 8004650:	4813      	ldr	r0, [pc, #76]	; (80046a0 <MX_ADC1_Init+0x128>)
 8004652:	f002 fe8b 	bl	800736c <HAL_ADC_ConfigChannel>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800465c:	f000 fabe 	bl	8004bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004660:	2304      	movs	r3, #4
 8004662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004664:	2305      	movs	r3, #5
 8004666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004668:	463b      	mov	r3, r7
 800466a:	4619      	mov	r1, r3
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <MX_ADC1_Init+0x128>)
 800466e:	f002 fe7d 	bl	800736c <HAL_ADC_ConfigChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8004678:	f000 fab0 	bl	8004bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800467c:	2311      	movs	r3, #17
 800467e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004680:	2306      	movs	r3, #6
 8004682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004684:	463b      	mov	r3, r7
 8004686:	4619      	mov	r1, r3
 8004688:	4805      	ldr	r0, [pc, #20]	; (80046a0 <MX_ADC1_Init+0x128>)
 800468a:	f002 fe6f 	bl	800736c <HAL_ADC_ConfigChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8004694:	f000 faa2 	bl	8004bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200072a0 	.word	0x200072a0
 80046a4:	40012000 	.word	0x40012000

080046a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80046ac:	4b17      	ldr	r3, [pc, #92]	; (800470c <MX_SPI3_Init+0x64>)
 80046ae:	4a18      	ldr	r2, [pc, #96]	; (8004710 <MX_SPI3_Init+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <MX_SPI3_Init+0x64>)
 80046b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <MX_SPI3_Init+0x64>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <MX_SPI3_Init+0x64>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <MX_SPI3_Init+0x64>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <MX_SPI3_Init+0x64>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80046d2:	4b0e      	ldr	r3, [pc, #56]	; (800470c <MX_SPI3_Init+0x64>)
 80046d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <MX_SPI3_Init+0x64>)
 80046dc:	2200      	movs	r2, #0
 80046de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <MX_SPI3_Init+0x64>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <MX_SPI3_Init+0x64>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <MX_SPI3_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <MX_SPI3_Init+0x64>)
 80046f4:	220a      	movs	r2, #10
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80046f8:	4804      	ldr	r0, [pc, #16]	; (800470c <MX_SPI3_Init+0x64>)
 80046fa:	f005 ff9d 	bl	800a638 <HAL_SPI_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004704:	f000 fa6a 	bl	8004bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20007248 	.word	0x20007248
 8004710:	40003c00 	.word	0x40003c00

08004714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004728:	463b      	mov	r3, r7
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <MX_TIM3_Init+0x98>)
 8004734:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004738:	2229      	movs	r2, #41	; 0x29
 800473a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <MX_TIM3_Init+0x94>)
 800473e:	2200      	movs	r2, #0
 8004740:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004744:	f242 720f 	movw	r2, #9999	; 0x270f
 8004748:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <MX_TIM3_Init+0x94>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004750:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004756:	4814      	ldr	r0, [pc, #80]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004758:	f006 fd16 	bl	800b188 <HAL_TIM_Base_Init>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004762:	f000 fa3b 	bl	8004bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800476a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	4619      	mov	r1, r3
 8004772:	480d      	ldr	r0, [pc, #52]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004774:	f006 ff38 	bl	800b5e8 <HAL_TIM_ConfigClockSource>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800477e:	f000 fa2d 	bl	8004bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004782:	2320      	movs	r3, #32
 8004784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800478a:	463b      	mov	r3, r7
 800478c:	4619      	mov	r1, r3
 800478e:	4806      	ldr	r0, [pc, #24]	; (80047a8 <MX_TIM3_Init+0x94>)
 8004790:	f007 f954 	bl	800ba3c <HAL_TIMEx_MasterConfigSynchronization>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800479a:	f000 fa1f 	bl	8004bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20007200 	.word	0x20007200
 80047ac:	40000400 	.word	0x40000400

080047b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047b6:	f107 0308 	add.w	r3, r7, #8
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c4:	463b      	mov	r3, r7
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <MX_TIM4_Init+0x94>)
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <MX_TIM4_Init+0x98>)
 80047d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <MX_TIM4_Init+0x94>)
 80047d4:	2229      	movs	r2, #41	; 0x29
 80047d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <MX_TIM4_Init+0x94>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <MX_TIM4_Init+0x94>)
 80047e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <MX_TIM4_Init+0x94>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <MX_TIM4_Init+0x94>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80047f2:	4814      	ldr	r0, [pc, #80]	; (8004844 <MX_TIM4_Init+0x94>)
 80047f4:	f006 fcc8 	bl	800b188 <HAL_TIM_Base_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80047fe:	f000 f9ed 	bl	8004bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	4619      	mov	r1, r3
 800480e:	480d      	ldr	r0, [pc, #52]	; (8004844 <MX_TIM4_Init+0x94>)
 8004810:	f006 feea 	bl	800b5e8 <HAL_TIM_ConfigClockSource>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800481a:	f000 f9df 	bl	8004bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800481e:	2320      	movs	r3, #32
 8004820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004826:	463b      	mov	r3, r7
 8004828:	4619      	mov	r1, r3
 800482a:	4806      	ldr	r0, [pc, #24]	; (8004844 <MX_TIM4_Init+0x94>)
 800482c:	f007 f906 	bl	800ba3c <HAL_TIMEx_MasterConfigSynchronization>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004836:	f000 f9d1 	bl	8004bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200071b8 	.word	0x200071b8
 8004848:	40000800 	.word	0x40000800

0800484c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004852:	4a12      	ldr	r2, [pc, #72]	; (800489c <MX_USART1_UART_Init+0x50>)
 8004854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004858:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800485c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004860:	2200      	movs	r2, #0
 8004862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004866:	2200      	movs	r2, #0
 8004868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 800486c:	2200      	movs	r2, #0
 800486e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004872:	220c      	movs	r2, #12
 8004874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004878:	2200      	movs	r2, #0
 800487a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 800487e:	2200      	movs	r2, #0
 8004880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004882:	4805      	ldr	r0, [pc, #20]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004884:	f007 f96a 	bl	800bb5c <HAL_UART_Init>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800488e:	f000 f9a5 	bl	8004bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20007348 	.word	0x20007348
 800489c:	40011000 	.word	0x40011000

080048a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <MX_USART6_UART_Init+0x50>)
 80048a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048c6:	220c      	movs	r2, #12
 80048c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80048d6:	4805      	ldr	r0, [pc, #20]	; (80048ec <MX_USART6_UART_Init+0x4c>)
 80048d8:	f007 f940 	bl	800bb5c <HAL_UART_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80048e2:	f000 f97b 	bl	8004bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	200073f0 	.word	0x200073f0
 80048f0:	40011400 	.word	0x40011400

080048f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <MX_DMA_Init+0x5c>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <MX_DMA_Init+0x5c>)
 8004904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <MX_DMA_Init+0x5c>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004916:	2200      	movs	r2, #0
 8004918:	2105      	movs	r1, #5
 800491a:	2038      	movs	r0, #56	; 0x38
 800491c:	f003 f8a2 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004920:	2038      	movs	r0, #56	; 0x38
 8004922:	f003 f8bb 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004926:	2200      	movs	r2, #0
 8004928:	2105      	movs	r1, #5
 800492a:	2039      	movs	r0, #57	; 0x39
 800492c:	f003 f89a 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004930:	2039      	movs	r0, #57	; 0x39
 8004932:	f003 f8b3 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004936:	2200      	movs	r2, #0
 8004938:	2105      	movs	r1, #5
 800493a:	203a      	movs	r0, #58	; 0x3a
 800493c:	f003 f892 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004940:	203a      	movs	r0, #58	; 0x3a
 8004942:	f003 f8ab 	bl	8007a9c <HAL_NVIC_EnableIRQ>

}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800

08004954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08c      	sub	sp, #48	; 0x30
 8004958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495a:	f107 031c 	add.w	r3, r7, #28
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	4b83      	ldr	r3, [pc, #524]	; (8004b7c <MX_GPIO_Init+0x228>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a82      	ldr	r2, [pc, #520]	; (8004b7c <MX_GPIO_Init+0x228>)
 8004974:	f043 0310 	orr.w	r3, r3, #16
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b80      	ldr	r3, [pc, #512]	; (8004b7c <MX_GPIO_Init+0x228>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	4b7c      	ldr	r3, [pc, #496]	; (8004b7c <MX_GPIO_Init+0x228>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	4a7b      	ldr	r2, [pc, #492]	; (8004b7c <MX_GPIO_Init+0x228>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	6313      	str	r3, [r2, #48]	; 0x30
 8004996:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <MX_GPIO_Init+0x228>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	4b75      	ldr	r3, [pc, #468]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4a74      	ldr	r2, [pc, #464]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30
 80049b2:	4b72      	ldr	r3, [pc, #456]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b6e      	ldr	r3, [pc, #440]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	4a6d      	ldr	r2, [pc, #436]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6313      	str	r3, [r2, #48]	; 0x30
 80049ce:	4b6b      	ldr	r3, [pc, #428]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	4b67      	ldr	r3, [pc, #412]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a66      	ldr	r2, [pc, #408]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049e4:	f043 0302 	orr.w	r3, r3, #2
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b64      	ldr	r3, [pc, #400]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	4b60      	ldr	r3, [pc, #384]	; (8004b7c <MX_GPIO_Init+0x228>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	4a5f      	ldr	r2, [pc, #380]	; (8004b7c <MX_GPIO_Init+0x228>)
 8004a00:	f043 0308 	orr.w	r3, r3, #8
 8004a04:	6313      	str	r3, [r2, #48]	; 0x30
 8004a06:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <MX_GPIO_Init+0x228>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 8004a12:	2200      	movs	r2, #0
 8004a14:	2101      	movs	r1, #1
 8004a16:	485a      	ldr	r0, [pc, #360]	; (8004b80 <MX_GPIO_Init+0x22c>)
 8004a18:	f005 f912 	bl	8009c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f24c 417f 	movw	r1, #50303	; 0xc47f
 8004a22:	4858      	ldr	r0, [pc, #352]	; (8004b84 <MX_GPIO_Init+0x230>)
 8004a24:	f005 f90c 	bl	8009c40 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f64f 7180 	movw	r1, #65408	; 0xff80
 8004a2e:	4856      	ldr	r0, [pc, #344]	; (8004b88 <MX_GPIO_Init+0x234>)
 8004a30:	f005 f906 	bl	8009c40 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004a3a:	4854      	ldr	r0, [pc, #336]	; (8004b8c <MX_GPIO_Init+0x238>)
 8004a3c:	f005 f900 	bl	8009c40 <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a46:	4852      	ldr	r0, [pc, #328]	; (8004b90 <MX_GPIO_Init+0x23c>)
 8004a48:	f005 f8fa 	bl	8009c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a52:	484b      	ldr	r0, [pc, #300]	; (8004b80 <MX_GPIO_Init+0x22c>)
 8004a54:	f005 f8f4 	bl	8009c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8004a58:	237f      	movs	r3, #127	; 0x7f
 8004a5a:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a60:	2301      	movs	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a64:	f107 031c 	add.w	r3, r7, #28
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4847      	ldr	r0, [pc, #284]	; (8004b88 <MX_GPIO_Init+0x234>)
 8004a6c:	f004 fe38 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 8004a70:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7e:	f107 031c 	add.w	r3, r7, #28
 8004a82:	4619      	mov	r1, r3
 8004a84:	4842      	ldr	r0, [pc, #264]	; (8004b90 <MX_GPIO_Init+0x23c>)
 8004a86:	f004 fe2b 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 8004a8a:	f248 0301 	movw	r3, #32769	; 0x8001
 8004a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a90:	2301      	movs	r3, #1
 8004a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9c:	f107 031c 	add.w	r3, r7, #28
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4837      	ldr	r0, [pc, #220]	; (8004b80 <MX_GPIO_Init+0x22c>)
 8004aa4:	f004 fe1c 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8004aa8:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8004aac:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aba:	f107 031c 	add.w	r3, r7, #28
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4830      	ldr	r0, [pc, #192]	; (8004b84 <MX_GPIO_Init+0x230>)
 8004ac2:	f004 fe0d 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8004ac6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004aca:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004acc:	2301      	movs	r3, #1
 8004ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ad8:	f107 031c 	add.w	r3, r7, #28
 8004adc:	4619      	mov	r1, r3
 8004ade:	482a      	ldr	r0, [pc, #168]	; (8004b88 <MX_GPIO_Init+0x234>)
 8004ae0:	f004 fdfe 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8004ae4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004ae8:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aea:	2301      	movs	r3, #1
 8004aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af2:	2300      	movs	r3, #0
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004af6:	f107 031c 	add.w	r3, r7, #28
 8004afa:	4619      	mov	r1, r3
 8004afc:	4823      	ldr	r0, [pc, #140]	; (8004b8c <MX_GPIO_Init+0x238>)
 8004afe:	f004 fdef 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8004b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b10:	2300      	movs	r3, #0
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8004b14:	f107 031c 	add.w	r3, r7, #28
 8004b18:	4619      	mov	r1, r3
 8004b1a:	481d      	ldr	r0, [pc, #116]	; (8004b90 <MX_GPIO_Init+0x23c>)
 8004b1c:	f004 fde0 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b26:	2302      	movs	r3, #2
 8004b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b36:	f107 031c 	add.w	r3, r7, #28
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4810      	ldr	r0, [pc, #64]	; (8004b80 <MX_GPIO_Init+0x22c>)
 8004b3e:	f004 fdcf 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 8004b42:	233f      	movs	r3, #63	; 0x3f
 8004b44:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b4e:	f107 031c 	add.w	r3, r7, #28
 8004b52:	4619      	mov	r1, r3
 8004b54:	480d      	ldr	r0, [pc, #52]	; (8004b8c <MX_GPIO_Init+0x238>)
 8004b56:	f004 fdc3 	bl	80096e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8004b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b60:	2300      	movs	r3, #0
 8004b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b64:	2301      	movs	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b68:	f107 031c 	add.w	r3, r7, #28
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <MX_GPIO_Init+0x230>)
 8004b70:	f004 fdb6 	bl	80096e0 <HAL_GPIO_Init>

}
 8004b74:	bf00      	nop
 8004b76:	3730      	adds	r7, #48	; 0x30
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40020000 	.word	0x40020000
 8004b84:	40020400 	.word	0x40020400
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40020c00 	.word	0x40020c00
 8004b90:	40020800 	.word	0x40020800

08004b94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8004b9c:	f008 fa56 	bl	800d04c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 8004ba0:	f7fd f8fc 	bl	8001d9c <task_init>
  settingsLoadFRAM();
 8004ba4:	f001 fa24 	bl	8005ff0 <settingsLoadFRAM>
  main_process_init();
 8004ba8:	f000 f82c 	bl	8004c04 <main_process_init>
  /* Infinite loop */
  for(;;)
  {
	main_process();
 8004bac:	f000 f81b 	bl	8004be6 <main_process>
    osDelay(1);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f008 fffa 	bl	800dbaa <osDelay>
	main_process();
 8004bb6:	e7f9      	b.n	8004bac <StartDefaultTask+0x18>

08004bb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bca:	f002 fa23 	bl	8007014 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000

08004bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004be0:	b672      	cpsid	i
}
 8004be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004be4:	e7fe      	b.n	8004be4 <Error_Handler+0x8>

08004be6 <main_process>:
#include <probotbornik.h>



void main_process()
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	af00      	add	r7, sp, #0
	Read_Inputs();
 8004bea:	f7fc fb09 	bl	8001200 <Read_Inputs>
	Analog_Read();
 8004bee:	f7fc fa0f 	bl	8001010 <Analog_Read>
	probotbor_process();
 8004bf2:	f000 fc47 	bl	8005484 <probotbor_process>
	Write_Outputs();
 8004bf6:	f7fc fc97 	bl	8001528 <Write_Outputs>

	osDelay(1);
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f008 ffd5 	bl	800dbaa <osDelay>
}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <main_process_init>:

void main_process_init()
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0

}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <ModbusInit+0x34>)
 8004c1a:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <ModbusInit+0x38>)
 8004c1c:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <ModbusInit+0x3c>)
 8004c20:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <ModbusInit+0x40>)
 8004c22:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(From_Client_Info)/2;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <ModbusInit+0x44>)
 8004c26:	2204      	movs	r2, #4
 8004c28:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <ModbusInit+0x48>)
 8004c2c:	223a      	movs	r2, #58	; 0x3a
 8004c2e:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <ModbusInit+0x38>)
 8004c32:	8a1b      	ldrh	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <ModbusInit+0x2a>
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <ModbusInit+0x38>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	821a      	strh	r2, [r3, #16]
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	2000091c 	.word	0x2000091c
 8004c4c:	20007474 	.word	0x20007474
 8004c50:	20000920 	.word	0x20000920
 8004c54:	2000751c 	.word	0x2000751c
 8004c58:	20000924 	.word	0x20000924
 8004c5c:	20000926 	.word	0x20000926

08004c60 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	817b      	strh	r3, [r7, #10]
 8004c70:	4613      	mov	r3, r2
 8004c72:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <ModbusParse+0xb0>)
 8004c76:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <ModbusParse+0xb0>)
 8004c80:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <ModbusParse+0x2e>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e03c      	b.n	8004d08 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	7a7a      	ldrb	r2, [r7, #9]
 8004c92:	4619      	mov	r1, r3
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f83d 	bl	8004d14 <CheckRequestLength>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <ModbusParse+0x44>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e031      	b.n	8004d08 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8004ca4:	7a7b      	ldrb	r3, [r7, #9]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f857 	bl	8004d5c <CheckMbAddr>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <ModbusParse+0x58>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e027      	b.n	8004d08 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8004cb8:	7a7b      	ldrb	r3, [r7, #9]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f873 	bl	8004da8 <IsCorrectMbCommand>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8004cc8:	7a7b      	ldrb	r3, [r7, #9]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f89e 	bl	8004e10 <SetInvalidCommand>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	e017      	b.n	8004d08 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	7a7a      	ldrb	r2, [r7, #9]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f93f 	bl	8004f62 <CheckCrc>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8004cea:	7a7b      	ldrb	r3, [r7, #9]
 8004cec:	2203      	movs	r2, #3
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f88d 	bl	8004e10 <SetInvalidCommand>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	e006      	b.n	8004d08 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8004cfa:	7a7b      	ldrb	r3, [r7, #9]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f963 	bl	8004fcc <GetModbusAnswer>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20007474 	.word	0x20007474

08004d14 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <CheckRequestLength+0x18>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e010      	b.n	8004d4e <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	3205      	adds	r2, #5
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	3306      	adds	r3, #6
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d103      	bne.n	8004d7a <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	799b      	ldrb	r3, [r3, #6]
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	e005      	b.n	8004d86 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <CheckMbAddr+0x48>)
 8004d8c:	8a1b      	ldrh	r3, [r3, #16]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20007474 	.word	0x20007474

08004da8 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d103      	bne.n	8004dc6 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	79db      	ldrb	r3, [r3, #7]
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e005      	b.n	8004dd2 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	bf8c      	ite	hi
 8004dd8:	2201      	movhi	r2, #1
 8004dda:	2200      	movls	r2, #0
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	d10c      	bne.n	8004dfc <IsCorrectMbCommand+0x54>
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <IsCorrectMbCommand+0x64>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8004dfc:	2300      	movs	r3, #0
	}
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	00010058 	.word	0x00010058

08004e10 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	460b      	mov	r3, r1
 8004e20:	71fb      	strb	r3, [r7, #7]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2107      	movs	r1, #7
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc f9cc 	bl	80011d0 <set_bit>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8004e3c:	79bb      	ldrb	r3, [r7, #6]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11d      	bne.n	8004e7e <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004e42:	2300      	movs	r3, #0
 8004e44:	82bb      	strh	r3, [r7, #20]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	7dfa      	ldrb	r2, [r7, #23]
 8004e54:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3302      	adds	r3, #2
 8004e5a:	79fa      	ldrb	r2, [r7, #7]
 8004e5c:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8004e5e:	f107 0314 	add.w	r3, r7, #20
 8004e62:	2203      	movs	r2, #3
 8004e64:	4619      	mov	r1, r3
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f000 f832 	bl	8004ed0 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3303      	adds	r3, #3
 8004e70:	7d3a      	ldrb	r2, [r7, #20]
 8004e72:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	3304      	adds	r3, #4
 8004e78:	7d7a      	ldrb	r2, [r7, #21]
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e01c      	b.n	8004eb8 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8004e7e:	79bb      	ldrb	r3, [r7, #6]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d119      	bne.n	8004eb8 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8004e84:	2208      	movs	r2, #8
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	68b8      	ldr	r0, [r7, #8]
 8004e8a:	f019 fa7b 	bl	801e384 <memcpy>
		*(answer+4) = 0;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3305      	adds	r3, #5
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	3307      	adds	r3, #7
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3307      	adds	r3, #7
 8004ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	79fa      	ldrb	r2, [r7, #7]
 8004eb6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8004eb8:	79bb      	ldrb	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <SetInvalidCommand+0xb2>
 8004ebe:	2305      	movs	r3, #5
 8004ec0:	e000      	b.n	8004ec4 <SetInvalidCommand+0xb4>
 8004ec2:	2309      	movs	r3, #9
 8004ec4:	75bb      	strb	r3, [r7, #22]
	return len;
 8004ec6:	7dbb      	ldrb	r3, [r7, #22]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8004ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ee2:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8004ee4:	f24a 0301 	movw	r3, #40961	; 0xa001
 8004ee8:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	e023      	b.n	8004f38 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	8bfb      	ldrh	r3, [r7, #30]
 8004efc:	4053      	eors	r3, r2
 8004efe:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e012      	b.n	8004f2c <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8004f06:	8bfb      	ldrh	r3, [r7, #30]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <CRC16_CALC+0x50>
					reg>>=1;
 8004f10:	8bfb      	ldrh	r3, [r7, #30]
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8004f16:	8bfa      	ldrh	r2, [r7, #30]
 8004f18:	8a7b      	ldrh	r3, [r7, #18]
 8004f1a:	4053      	eors	r3, r2
 8004f1c:	83fb      	strh	r3, [r7, #30]
 8004f1e:	e002      	b.n	8004f26 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8004f20:	8bfb      	ldrh	r3, [r7, #30]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	dde9      	ble.n	8004f06 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	3301      	adds	r3, #1
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	dbd7      	blt.n	8004ef0 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8004f4e:	8bfb      	ldrh	r3, [r7, #30]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	701a      	strb	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3724      	adds	r7, #36	; 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <CheckCrc+0x18>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e024      	b.n	8004fc4 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	dc01      	bgt.n	8004f88 <CheckCrc+0x26>
 8004f84:	2300      	movs	r3, #0
 8004f86:	e01d      	b.n	8004fc4 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	3b02      	subs	r3, #2
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	4619      	mov	r1, r3
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f7ff ff9a 	bl	8004ed0 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3b02      	subs	r3, #2
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	7d3b      	ldrb	r3, [r7, #20]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d109      	bne.n	8004fc0 <CheckCrc+0x5e>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	7d7b      	ldrb	r3, [r7, #21]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d101      	bne.n	8004fc0 <CheckCrc+0x5e>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <CheckCrc+0x60>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <GetModbusAnswer+0x1a>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	e001      	b.n	8004fea <GetModbusAnswer+0x1e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	79db      	ldrb	r3, [r3, #7]
 8004fea:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	3b03      	subs	r3, #3
 8004ff0:	2b0d      	cmp	r3, #13
 8004ff2:	d849      	bhi.n	8005088 <GetModbusAnswer+0xbc>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <GetModbusAnswer+0x30>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005035 	.word	0x08005035
 8005000:	0800504f 	.word	0x0800504f
 8005004:	08005089 	.word	0x08005089
 8005008:	08005069 	.word	0x08005069
 800500c:	08005089 	.word	0x08005089
 8005010:	08005089 	.word	0x08005089
 8005014:	08005089 	.word	0x08005089
 8005018:	08005089 	.word	0x08005089
 800501c:	08005089 	.word	0x08005089
 8005020:	08005089 	.word	0x08005089
 8005024:	08005089 	.word	0x08005089
 8005028:	08005089 	.word	0x08005089
 800502c:	08005089 	.word	0x08005089
 8005030:	08005079 	.word	0x08005079
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8005034:	4b17      	ldr	r3, [pc, #92]	; (8005094 <GetModbusAnswer+0xc8>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b17      	ldr	r3, [pc, #92]	; (8005098 <GetModbusAnswer+0xcc>)
 800503a:	8819      	ldrh	r1, [r3, #0]
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	460b      	mov	r3, r1
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f831 	bl	80050ac <ReadRegisters>
 800504a:	4603      	mov	r3, r0
 800504c:	e01e      	b.n	800508c <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <GetModbusAnswer+0xd0>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <GetModbusAnswer+0xd4>)
 8005054:	8819      	ldrh	r1, [r3, #0]
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	460b      	mov	r3, r1
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f824 	bl	80050ac <ReadRegisters>
 8005064:	4603      	mov	r3, r0
 8005066:	e011      	b.n	800508c <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8005068:	79fa      	ldrb	r2, [r7, #7]
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <GetModbusAnswer+0xd8>)
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f9dc 	bl	800542c <WriteToHoldings>
 8005074:	4603      	mov	r3, r0
 8005076:	e009      	b.n	800508c <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8005078:	79fa      	ldrb	r2, [r7, #7]
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <GetModbusAnswer+0xdc>)
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f9d4 	bl	800542c <WriteToHoldings>
 8005084:	4603      	mov	r3, r0
 8005086:	e001      	b.n	800508c <GetModbusAnswer+0xc0>
		default:
			break;
 8005088:	bf00      	nop
	}
	return 0;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2000091c 	.word	0x2000091c
 8005098:	20000924 	.word	0x20000924
 800509c:	20000920 	.word	0x20000920
 80050a0:	20000926 	.word	0x20000926
 80050a4:	0800528d 	.word	0x0800528d
 80050a8:	08005331 	.word	0x08005331

080050ac <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 80050ba:	887b      	ldrh	r3, [r7, #2]
 80050bc:	3b01      	subs	r3, #1
 80050be:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 80050c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <ReadRegisters+0x20>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e000      	b.n	80050ce <ReadRegisters+0x22>
 80050cc:	2308      	movs	r3, #8
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f882 	bl	80051da <GetWordFromBytes>
 80050d6:	4603      	mov	r3, r0
 80050d8:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 80050da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <ReadRegisters+0x3a>
 80050e2:	2304      	movs	r3, #4
 80050e4:	e000      	b.n	80050e8 <ReadRegisters+0x3c>
 80050e6:	230a      	movs	r3, #10
 80050e8:	4619      	mov	r1, r3
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f875 	bl	80051da <GetWordFromBytes>
 80050f0:	4603      	mov	r3, r0
 80050f2:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80050f4:	8bba      	ldrh	r2, [r7, #28]
 80050f6:	8b7b      	ldrh	r3, [r7, #26]
 80050f8:	4413      	add	r3, r2
 80050fa:	1e5a      	subs	r2, r3, #1
 80050fc:	8bfb      	ldrh	r3, [r7, #30]
 80050fe:	429a      	cmp	r2, r3
 8005100:	dd08      	ble.n	8005114 <ReadRegisters+0x68>
 8005102:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005106:	2202      	movs	r2, #2
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fe80 	bl	8004e10 <SetInvalidCommand>
 8005110:	4603      	mov	r3, r0
 8005112:	e05e      	b.n	80051d2 <ReadRegisters+0x126>
	if(source==ETHERNET)
 8005114:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005118:	2b01      	cmp	r3, #1
 800511a:	d124      	bne.n	8005166 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 800511c:	2208      	movs	r2, #8
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	68b8      	ldr	r0, [r7, #8]
 8005122:	f019 f92f 	bl	801e384 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 8005126:	8b7b      	ldrh	r3, [r7, #26]
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	3303      	adds	r3, #3
 800512e:	b29a      	uxth	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	3304      	adds	r3, #4
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f000 f86a 	bl	8005210 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 800513c:	8b7b      	ldrh	r3, [r7, #26]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3308      	adds	r3, #8
 8005144:	0052      	lsls	r2, r2, #1
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 800514a:	8bbb      	ldrh	r3, [r7, #28]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	18d0      	adds	r0, r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3309      	adds	r3, #9
 8005156:	8b7a      	ldrh	r2, [r7, #26]
 8005158:	4619      	mov	r1, r3
 800515a:	f000 f869 	bl	8005230 <InsertWordsToMemory>
		return 9+reg_count*2;
 800515e:	8b7b      	ldrh	r3, [r7, #26]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	3309      	adds	r3, #9
 8005164:	e035      	b.n	80051d2 <ReadRegisters+0x126>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8005170:	8b7b      	ldrh	r3, [r7, #26]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3302      	adds	r3, #2
 8005178:	0052      	lsls	r2, r2, #1
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 800517e:	8bbb      	ldrh	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	18d0      	adds	r0, r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	3303      	adds	r3, #3
 800518a:	8b7a      	ldrh	r2, [r7, #26]
 800518c:	4619      	mov	r1, r3
 800518e:	f000 f84f 	bl	8005230 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8005192:	2300      	movs	r3, #0
 8005194:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 8005196:	8b7b      	ldrh	r3, [r7, #26]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	3303      	adds	r3, #3
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	f107 0310 	add.w	r3, r7, #16
 80051a6:	4619      	mov	r1, r3
 80051a8:	68b8      	ldr	r0, [r7, #8]
 80051aa:	f7ff fe91 	bl	8004ed0 <CRC16_CALC>
		int offset = 3+reg_count*2;
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	3303      	adds	r3, #3
 80051b4:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	4413      	add	r3, r2
 80051bc:	7c3a      	ldrb	r2, [r7, #16]
 80051be:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	4413      	add	r3, r2
 80051c8:	7c7a      	ldrb	r2, [r7, #17]
 80051ca:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 80051cc:	8b7b      	ldrh	r3, [r7, #26]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	3305      	adds	r3, #5

	}
	return 0;
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	3301      	adds	r3, #1
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	440b      	add	r3, r1
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4413      	add	r3, r2
 8005202:	b29b      	uxth	r3, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	6039      	str	r1, [r7, #0]
 800521a:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 800521c:	1dbb      	adds	r3, r7, #6
 800521e:	2201      	movs	r2, #1
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f804 	bl	8005230 <InsertWordsToMemory>
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e014      	b.n	8005272 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	441a      	add	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3301      	adds	r3, #1
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	440b      	add	r3, r1
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3301      	adds	r3, #1
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	441a      	add	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	440b      	add	r3, r1
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3302      	adds	r3, #2
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	429a      	cmp	r2, r3
 800527a:	dbe5      	blt.n	8005248 <InsertWordsToMemory+0x18>
    }
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 800529a:	4b23      	ldr	r3, [pc, #140]	; (8005328 <WriteSingleRegister+0x9c>)
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	3b01      	subs	r3, #1
 80052a0:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <WriteSingleRegister+0x20>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e000      	b.n	80052ae <WriteSingleRegister+0x22>
 80052ac:	2308      	movs	r3, #8
 80052ae:	4619      	mov	r1, r3
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff ff92 	bl	80051da <GetWordFromBytes>
 80052b6:	4603      	mov	r3, r0
 80052b8:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80052ba:	8aba      	ldrh	r2, [r7, #20]
 80052bc:	8afb      	ldrh	r3, [r7, #22]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d907      	bls.n	80052d2 <WriteSingleRegister+0x46>
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2202      	movs	r2, #2
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff fda1 	bl	8004e10 <SetInvalidCommand>
 80052ce:	4603      	mov	r3, r0
 80052d0:	e026      	b.n	8005320 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d112      	bne.n	80052fe <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f103 000a 	add.w	r0, r3, #10
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <WriteSingleRegister+0xa0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	8aba      	ldrh	r2, [r7, #20]
 80052e4:	0052      	lsls	r2, r2, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	2201      	movs	r2, #1
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7ff ffa0 	bl	8005230 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 80052f0:	220c      	movs	r2, #12
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	68b8      	ldr	r0, [r7, #8]
 80052f6:	f019 f845 	bl	801e384 <memcpy>
    	return 12;
 80052fa:	230c      	movs	r3, #12
 80052fc:	e010      	b.n	8005320 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1d18      	adds	r0, r3, #4
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <WriteSingleRegister+0xa0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	8aba      	ldrh	r2, [r7, #20]
 8005308:	0052      	lsls	r2, r2, #1
 800530a:	4413      	add	r3, r2
 800530c:	2201      	movs	r2, #1
 800530e:	4619      	mov	r1, r3
 8005310:	f7ff ff8e 	bl	8005230 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 8005314:	2208      	movs	r2, #8
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	68b8      	ldr	r0, [r7, #8]
 800531a:	f019 f833 	bl	801e384 <memcpy>
    	return 8;
 800531e:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000924 	.word	0x20000924
 800532c:	2000091c 	.word	0x2000091c

08005330 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 800533e:	4b39      	ldr	r3, [pc, #228]	; (8005424 <WrieMultiplyRegisters+0xf4>)
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <WrieMultiplyRegisters+0x20>
 800534c:	2302      	movs	r3, #2
 800534e:	e000      	b.n	8005352 <WrieMultiplyRegisters+0x22>
 8005350:	2308      	movs	r3, #8
 8005352:	4619      	mov	r1, r3
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ff40 	bl	80051da <GetWordFromBytes>
 800535a:	4603      	mov	r3, r0
 800535c:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <WrieMultiplyRegisters+0x38>
 8005364:	2304      	movs	r3, #4
 8005366:	e000      	b.n	800536a <WrieMultiplyRegisters+0x3a>
 8005368:	230a      	movs	r3, #10
 800536a:	4619      	mov	r1, r3
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff34 	bl	80051da <GetWordFromBytes>
 8005372:	4603      	mov	r3, r0
 8005374:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8005376:	8aba      	ldrh	r2, [r7, #20]
 8005378:	8a7b      	ldrh	r3, [r7, #18]
 800537a:	4413      	add	r3, r2
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	8afb      	ldrh	r3, [r7, #22]
 8005380:	429a      	cmp	r2, r3
 8005382:	dd07      	ble.n	8005394 <WrieMultiplyRegisters+0x64>
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	2202      	movs	r2, #2
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff fd40 	bl	8004e10 <SetInvalidCommand>
 8005390:	4603      	mov	r3, r0
 8005392:	e042      	b.n	800541a <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d11d      	bne.n	80053d6 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 800539a:	220c      	movs	r2, #12
 800539c:	68f9      	ldr	r1, [r7, #12]
 800539e:	68b8      	ldr	r0, [r7, #8]
 80053a0:	f018 fff0 	bl	801e384 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 80053a4:	8a7b      	ldrh	r3, [r7, #18]
 80053a6:	3302      	adds	r3, #2
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f7ff ff2b 	bl	8005210 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f103 000d 	add.w	r0, r3, #13
 80053c0:	4b19      	ldr	r3, [pc, #100]	; (8005428 <WrieMultiplyRegisters+0xf8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	8aba      	ldrh	r2, [r7, #20]
 80053c6:	0052      	lsls	r2, r2, #1
 80053c8:	4413      	add	r3, r2
 80053ca:	8a7a      	ldrh	r2, [r7, #18]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f7ff ff2f 	bl	8005230 <InsertWordsToMemory>
        return 12;
 80053d2:	230c      	movs	r3, #12
 80053d4:	e021      	b.n	800541a <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 80053d6:	2206      	movs	r2, #6
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	68b8      	ldr	r0, [r7, #8]
 80053dc:	f018 ffd2 	bl	801e384 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80053e0:	2300      	movs	r3, #0
 80053e2:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 80053e4:	f107 0310 	add.w	r3, r7, #16
 80053e8:	2206      	movs	r2, #6
 80053ea:	4619      	mov	r1, r3
 80053ec:	68b8      	ldr	r0, [r7, #8]
 80053ee:	f7ff fd6f 	bl	8004ed0 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3306      	adds	r3, #6
 80053f6:	7c3a      	ldrb	r2, [r7, #16]
 80053f8:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3307      	adds	r3, #7
 80053fe:	7c7a      	ldrb	r2, [r7, #17]
 8005400:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1dd8      	adds	r0, r3, #7
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <WrieMultiplyRegisters+0xf8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	8aba      	ldrh	r2, [r7, #20]
 800540c:	0052      	lsls	r2, r2, #1
 800540e:	4413      	add	r3, r2
 8005410:	8a7a      	ldrh	r2, [r7, #18]
 8005412:	4619      	mov	r1, r3
 8005414:	f7ff ff0c 	bl	8005230 <InsertWordsToMemory>
		return 8;
 8005418:	2308      	movs	r3, #8
    }

    return 0;
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000924 	.word	0x20000924
 8005428:	2000091c 	.word	0x2000091c

0800542c <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <WriteToHoldings+0x54>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d016      	beq.n	8005476 <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <WriteToHoldings+0x54>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005450:	4618      	mov	r0, r3
 8005452:	f008 fc8d 	bl	800dd70 <osSemaphoreWait>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10c      	bne.n	8005476 <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 800545c:	79fa      	ldrb	r2, [r7, #7]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	4798      	blx	r3
 8005466:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 8005468:	f000 fe0a 	bl	8006080 <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <WriteToHoldings+0x54>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f008 fccb 	bl	800de0c <osSemaphoreRelease>
		}
	}
	return result;
 8005476:	697b      	ldr	r3, [r7, #20]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200073ec 	.word	0x200073ec

08005484 <probotbor_process>:
static void NakopitelCheck();
static void GetClientInfo();
static void LocalRemoteControl();

void probotbor_process()
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
	LocalRemoteControl();
 8005488:	f000 f9e8 	bl	800585c <LocalRemoteControl>
	SetTimers();
 800548c:	f000 f974 	bl	8005778 <SetTimers>
	if(!initialized)
 8005490:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <probotbor_process+0x64>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d108      	bne.n	80054aa <probotbor_process+0x26>
	{
		if(!Init_timers())return;
 8005498:	f000 f932 	bl	8005700 <Init_timers>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <probotbor_process+0x60>
		initialized = 1;
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <probotbor_process+0x64>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
		return;
 80054a8:	e01d      	b.n	80054e6 <probotbor_process+0x62>
	}
	NakopitelCheck();
 80054aa:	f000 fccf 	bl	8005e4c <NakopitelCheck>
	GetPositiveFronts();
 80054ae:	f000 fc2f 	bl	8005d10 <GetPositiveFronts>
	GetErrors();
 80054b2:	f000 f821 	bl	80054f8 <GetErrors>
	OnCommandCycle();
 80054b6:	f000 fb51 	bl	8005b5c <OnCommandCycle>
	Moving();
 80054ba:	f000 fa29 	bl	8005910 <Moving>
	if(automatTON.OUT && d_outputs.prob_ready)
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <probotbor_process+0x68>)
 80054c0:	7a5b      	ldrb	r3, [r3, #9]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <probotbor_process+0x56>
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <probotbor_process+0x6c>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <probotbor_process+0x56>
	{
		startOtborCommand = 1;
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <probotbor_process+0x70>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
	}
	Indication();
 80054da:	f000 fbdf 	bl	8005c9c <Indication>
	GetClientInfo();
 80054de:	f000 fcdf 	bl	8005ea0 <GetClientInfo>
 80054e2:	e000      	b.n	80054e6 <probotbor_process+0x62>
		if(!Init_timers())return;
 80054e4:	bf00      	nop

}
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20007460 	.word	0x20007460
 80054ec:	2000743c 	.word	0x2000743c
 80054f0:	20007018 	.word	0x20007018
 80054f4:	2000745c 	.word	0x2000745c

080054f8 <GetErrors>:

static void GetErrors()
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	// Inputs
	meas_data.errors.nakopitel_door_err = !d_inputs.sq_kanistra_door;
 80054fc:	4b78      	ldr	r3, [pc, #480]	; (80056e0 <GetErrors+0x1e8>)
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2d9      	uxtb	r1, r3
 8005510:	4a74      	ldr	r2, [pc, #464]	; (80056e4 <GetErrors+0x1ec>)
 8005512:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005516:	f361 0341 	bfi	r3, r1, #1, #1
 800551a:	f882 3020 	strb.w	r3, [r2, #32]
	meas_data.errors.nakopitel_kanistra_err = !d_inputs.sq_kanistra;
 800551e:	4b70      	ldr	r3, [pc, #448]	; (80056e0 <GetErrors+0x1e8>)
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2d9      	uxtb	r1, r3
 8005532:	4a6c      	ldr	r2, [pc, #432]	; (80056e4 <GetErrors+0x1ec>)
 8005534:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005538:	f361 0300 	bfi	r3, r1, #0, #1
 800553c:	f882 3020 	strb.w	r3, [r2, #32]
	meas_data.errors.uz_err = !d_inputs.uz_prob_fail;
 8005540:	4b67      	ldr	r3, [pc, #412]	; (80056e0 <GetErrors+0x1e8>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2d9      	uxtb	r1, r3
 8005554:	4a63      	ldr	r2, [pc, #396]	; (80056e4 <GetErrors+0x1ec>)
 8005556:	f892 3020 	ldrb.w	r3, [r2, #32]
 800555a:	f361 0382 	bfi	r3, r1, #2, #1
 800555e:	f882 3020 	strb.w	r3, [r2, #32]
	meas_data.errors.sb_abort_err = d_inputs.sb_stop;
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <GetErrors+0x1e8>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800556a:	b2d9      	uxtb	r1, r3
 800556c:	4a5d      	ldr	r2, [pc, #372]	; (80056e4 <GetErrors+0x1ec>)
 800556e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005572:	f361 03c3 	bfi	r3, r1, #3, #1
 8005576:	f882 3020 	strb.w	r3, [r2, #32]
	meas_data.errors.sq_left_err = d_inputs.sq_kovsh_prob_left_1;
 800557a:	4b59      	ldr	r3, [pc, #356]	; (80056e0 <GetErrors+0x1e8>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005582:	b2d9      	uxtb	r1, r3
 8005584:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <GetErrors+0x1ec>)
 8005586:	f892 3020 	ldrb.w	r3, [r2, #32]
 800558a:	f361 1304 	bfi	r3, r1, #4, #1
 800558e:	f882 3020 	strb.w	r3, [r2, #32]
	meas_data.errors.sq_right_err = d_inputs.sq_kovsh_prob_right_1;
 8005592:	4b53      	ldr	r3, [pc, #332]	; (80056e0 <GetErrors+0x1e8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800559a:	b2d9      	uxtb	r1, r3
 800559c:	4a51      	ldr	r2, [pc, #324]	; (80056e4 <GetErrors+0x1ec>)
 800559e:	f892 3020 	ldrb.w	r3, [r2, #32]
 80055a2:	f361 1345 	bfi	r3, r1, #5, #1
 80055a6:	f882 3020 	strb.w	r3, [r2, #32]
	meas_data.errors.full_nakop_err = meas_data.nakopitelFull;
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <GetErrors+0x1ec>)
 80055ac:	8b5b      	ldrh	r3, [r3, #26]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	b2d9      	uxtb	r1, r3
 80055b4:	4a4b      	ldr	r2, [pc, #300]	; (80056e4 <GetErrors+0x1ec>)
 80055b6:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80055ba:	f361 0341 	bfi	r3, r1, #1, #1
 80055be:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21


	//Timeouts
	if(sqHomeTON.OUT){
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <GetErrors+0x1f0>)
 80055c4:	7a5b      	ldrb	r3, [r3, #9]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <GetErrors+0xe0>
		meas_data.errors.timeout_moving_left_err = 1;
 80055ca:	4a46      	ldr	r2, [pc, #280]	; (80056e4 <GetErrors+0x1ec>)
 80055cc:	f892 3020 	ldrb.w	r3, [r2, #32]
 80055d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d4:	f882 3020 	strb.w	r3, [r2, #32]
	}
	if(sqWorkTON.OUT){
 80055d8:	4b44      	ldr	r3, [pc, #272]	; (80056ec <GetErrors+0x1f4>)
 80055da:	7a5b      	ldrb	r3, [r3, #9]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <GetErrors+0xf6>
		meas_data.errors.timeout_moving_right_err = 1;
 80055e0:	4a40      	ldr	r2, [pc, #256]	; (80056e4 <GetErrors+0x1ec>)
 80055e2:	f892 3020 	ldrb.w	r3, [r2, #32]
 80055e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ea:	f882 3020 	strb.w	r3, [r2, #32]
	}
	if(rtSbMakeProba|| rtSbMakeVozvrat)
 80055ee:	4b40      	ldr	r3, [pc, #256]	; (80056f0 <GetErrors+0x1f8>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <GetErrors+0x106>
 80055f6:	4b3f      	ldr	r3, [pc, #252]	; (80056f4 <GetErrors+0x1fc>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00d      	beq.n	800561a <GetErrors+0x122>
	{
		meas_data.errors.timeout_moving_left_err = 0;
 80055fe:	4a39      	ldr	r2, [pc, #228]	; (80056e4 <GetErrors+0x1ec>)
 8005600:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005604:	f36f 13c7 	bfc	r3, #7, #1
 8005608:	f882 3020 	strb.w	r3, [r2, #32]
		meas_data.errors.timeout_moving_right_err = 0;
 800560c:	4a35      	ldr	r2, [pc, #212]	; (80056e4 <GetErrors+0x1ec>)
 800560e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005612:	f36f 1386 	bfc	r3, #6, #1
 8005616:	f882 3020 	strb.w	r3, [r2, #32]
	}
	// Need Return
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 800561a:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <GetErrors+0x200>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <GetErrors+0x15e>
 8005628:	4b33      	ldr	r3, [pc, #204]	; (80056f8 <GetErrors+0x200>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <GetErrors+0x15e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <GetErrors+0x1e8>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	b2db      	uxtb	r3, r3
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8005640:	2b00      	cmp	r3, #0
 8005642:	d108      	bne.n	8005656 <GetErrors+0x15e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <GetErrors+0x1e8>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <GetErrors+0x15e>
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <GetErrors+0x160>
 8005656:	2300      	movs	r3, #0
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	b2d9      	uxtb	r1, r3
 800565e:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <GetErrors+0x1ec>)
 8005660:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005664:	f361 0300 	bfi	r3, r1, #0, #1
 8005668:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

	// Remote stops
	if(settings.retain.remote_mode)
 800566c:	4b23      	ldr	r3, [pc, #140]	; (80056fc <GetErrors+0x204>)
 800566e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005670:	2b00      	cmp	r3, #0
 8005672:	d022      	beq.n	80056ba <GetErrors+0x1c2>
	{
		meas_data.errors.conveyer_off_err = !settings.from.konveyer_on;
 8005674:	4b21      	ldr	r3, [pc, #132]	; (80056fc <GetErrors+0x204>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2d9      	uxtb	r1, r3
 8005688:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <GetErrors+0x1ec>)
 800568a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800568e:	f361 03c3 	bfi	r3, r1, #3, #1
 8005692:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		meas_data.errors.no_concentrat_err = !settings.from.koncentrat_on;
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <GetErrors+0x204>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2d9      	uxtb	r1, r3
 80056aa:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <GetErrors+0x1ec>)
 80056ac:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80056b0:	f361 0382 	bfi	r3, r1, #2, #1
 80056b4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		meas_data.errors.conveyer_off_err = 0;
		meas_data.errors.no_concentrat_err = 0;

	}

}
 80056b8:	e00d      	b.n	80056d6 <GetErrors+0x1de>
		meas_data.errors.conveyer_off_err = 0;
 80056ba:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <GetErrors+0x1ec>)
 80056bc:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80056c0:	f36f 03c3 	bfc	r3, #3, #1
 80056c4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		meas_data.errors.no_concentrat_err = 0;
 80056c8:	4a06      	ldr	r2, [pc, #24]	; (80056e4 <GetErrors+0x1ec>)
 80056ca:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80056ce:	f36f 0382 	bfc	r3, #2, #1
 80056d2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	2000701c 	.word	0x2000701c
 80056e4:	2000751c 	.word	0x2000751c
 80056e8:	20007464 	.word	0x20007464
 80056ec:	2000744c 	.word	0x2000744c
 80056f0:	2000745b 	.word	0x2000745b
 80056f4:	2000745a 	.word	0x2000745a
 80056f8:	20007018 	.word	0x20007018
 80056fc:	20007474 	.word	0x20007474

08005700 <Init_timers>:

static uint8_t Init_timers()
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
	if(Timer_Init(&(sqHomeTON))==TIMER_FAIL)return 0;
 8005704:	4818      	ldr	r0, [pc, #96]	; (8005768 <Init_timers+0x68>)
 8005706:	f001 f93b 	bl	8006980 <Timer_Init>
 800570a:	4603      	mov	r3, r0
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <Init_timers+0x14>
 8005710:	2300      	movs	r3, #0
 8005712:	e027      	b.n	8005764 <Init_timers+0x64>
	if(Timer_Init(&(sqWorkTON))==TIMER_FAIL)return 0;
 8005714:	4815      	ldr	r0, [pc, #84]	; (800576c <Init_timers+0x6c>)
 8005716:	f001 f933 	bl	8006980 <Timer_Init>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <Init_timers+0x24>
 8005720:	2300      	movs	r3, #0
 8005722:	e01f      	b.n	8005764 <Init_timers+0x64>
	if(Timer_Init(&(automatTON))==TIMER_FAIL)return 0;
 8005724:	4812      	ldr	r0, [pc, #72]	; (8005770 <Init_timers+0x70>)
 8005726:	f001 f92b 	bl	8006980 <Timer_Init>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <Init_timers+0x34>
 8005730:	2300      	movs	r3, #0
 8005732:	e017      	b.n	8005764 <Init_timers+0x64>
	if(settings.retain.prob_toHomeTime==0)settings.retain.prob_toHomeTime = 10;
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <Init_timers+0x74>)
 8005736:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <Init_timers+0x42>
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <Init_timers+0x74>)
 800573e:	220a      	movs	r2, #10
 8005740:	869a      	strh	r2, [r3, #52]	; 0x34
	if(settings.retain.prob_toWorkTime==0)settings.retain.prob_toWorkTime = 10;
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <Init_timers+0x74>)
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <Init_timers+0x50>
 800574a:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <Init_timers+0x74>)
 800574c:	220a      	movs	r2, #10
 800574e:	86da      	strh	r2, [r3, #54]	; 0x36
	if(settings.retain.automat_timer==0)settings.retain.automat_timer = 60;
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <Init_timers+0x74>)
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <Init_timers+0x5e>
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <Init_timers+0x74>)
 800575a:	223c      	movs	r2, #60	; 0x3c
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c
	SetTimers();
 800575e:	f000 f80b 	bl	8005778 <SetTimers>
	return 1;
 8005762:	2301      	movs	r3, #1
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20007464 	.word	0x20007464
 800576c:	2000744c 	.word	0x2000744c
 8005770:	2000743c 	.word	0x2000743c
 8005774:	20007474 	.word	0x20007474

08005778 <SetTimers>:

static void SetTimers()
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
	// Тайм-аут движения влево
	sqHomeTON.IN = !d_inputs.sq_kovsh_prob_left_2 && d_outputs.uz_prob_rev;
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <SetTimers+0xbc>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <SetTimers+0x24>
 800578a:	4b2b      	ldr	r3, [pc, #172]	; (8005838 <SetTimers+0xc0>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <SetTimers+0x24>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <SetTimers+0x26>
 800579c:	2300      	movs	r3, #0
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	4b26      	ldr	r3, [pc, #152]	; (800583c <SetTimers+0xc4>)
 80057a2:	721a      	strb	r2, [r3, #8]
	sqHomeTON.SV = settings.retain.prob_toHomeTime * 1000;
 80057a4:	4b26      	ldr	r3, [pc, #152]	; (8005840 <SetTimers+0xc8>)
 80057a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80057a8:	461a      	mov	r2, r3
 80057aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ae:	fb03 f302 	mul.w	r3, r3, r2
 80057b2:	461a      	mov	r2, r3
 80057b4:	4b21      	ldr	r3, [pc, #132]	; (800583c <SetTimers+0xc4>)
 80057b6:	601a      	str	r2, [r3, #0]

	// Тайм-аут движения вправо
	sqWorkTON.IN = !d_inputs.sq_kovsh_prob_right_2 && d_outputs.uz_prob_forv;
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <SetTimers+0xbc>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <SetTimers+0x60>
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <SetTimers+0xc0>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <SetTimers+0x60>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <SetTimers+0x62>
 80057d8:	2300      	movs	r3, #0
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <SetTimers+0xcc>)
 80057de:	721a      	strb	r2, [r3, #8]
	sqWorkTON.SV = settings.retain.prob_toWorkTime * 1000;
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <SetTimers+0xc8>)
 80057e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e4:	461a      	mov	r2, r3
 80057e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ea:	fb03 f302 	mul.w	r3, r3, r2
 80057ee:	461a      	mov	r2, r3
 80057f0:	4b14      	ldr	r3, [pc, #80]	; (8005844 <SetTimers+0xcc>)
 80057f2:	601a      	str	r2, [r3, #0]

	// Таймер автоматической работы
	automatTON.IN = auto_mode && !cycle_probotbor && !meas_data.nakopitelFull;
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <SetTimers+0xd0>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <SetTimers+0x98>
 80057fc:	4b13      	ldr	r3, [pc, #76]	; (800584c <SetTimers+0xd4>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <SetTimers+0x98>
 8005804:	4b12      	ldr	r3, [pc, #72]	; (8005850 <SetTimers+0xd8>)
 8005806:	8b5b      	ldrh	r3, [r3, #26]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <SetTimers+0x98>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <SetTimers+0x9a>
 8005810:	2300      	movs	r3, #0
 8005812:	b2da      	uxtb	r2, r3
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <SetTimers+0xdc>)
 8005816:	721a      	strb	r2, [r3, #8]
	automatTON.SV = select_period * 1000;
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <SetTimers+0xe0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	4a0b      	ldr	r2, [pc, #44]	; (8005854 <SetTimers+0xdc>)
 8005826:	6013      	str	r3, [r2, #0]

	// Осталось до следующей пробы
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000701c 	.word	0x2000701c
 8005838:	20007018 	.word	0x20007018
 800583c:	20007464 	.word	0x20007464
 8005840:	20007474 	.word	0x20007474
 8005844:	2000744c 	.word	0x2000744c
 8005848:	20007461 	.word	0x20007461
 800584c:	2000745e 	.word	0x2000745e
 8005850:	2000751c 	.word	0x2000751c
 8005854:	2000743c 	.word	0x2000743c
 8005858:	20007434 	.word	0x20007434

0800585c <LocalRemoteControl>:

static void LocalRemoteControl()
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	auto_mode = settings.retain.remote_mode ? settings.from.auto_on : d_inputs.sb_auto_local;
 8005860:	4b26      	ldr	r3, [pc, #152]	; (80058fc <LocalRemoteControl+0xa0>)
 8005862:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <LocalRemoteControl+0x1a>
 8005868:	4b24      	ldr	r3, [pc, #144]	; (80058fc <LocalRemoteControl+0xa0>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	e005      	b.n	8005882 <LocalRemoteControl+0x26>
 8005876:	4b22      	ldr	r3, [pc, #136]	; (8005900 <LocalRemoteControl+0xa4>)
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <LocalRemoteControl+0xa8>)
 8005884:	701a      	strb	r2, [r3, #0]
	select_period = settings.retain.remote_mode ? (uint32_t)settings.from.select_period : settings.retain.automat_timer;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <LocalRemoteControl+0xa0>)
 8005888:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <LocalRemoteControl+0x42>
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <LocalRemoteControl+0xa0>)
 8005890:	edd3 7a01 	vldr	s15, [r3, #4]
 8005894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005898:	ee17 2a90 	vmov	r2, s15
 800589c:	e001      	b.n	80058a2 <LocalRemoteControl+0x46>
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <LocalRemoteControl+0xa0>)
 80058a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <LocalRemoteControl+0xac>)
 80058a4:	601a      	str	r2, [r3, #0]
	// действия по нажатию кнопки
	if((d_inputs.sb_make_proba && !settings.retain.remote_mode) ||
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <LocalRemoteControl+0xa4>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <LocalRemoteControl+0x60>
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <LocalRemoteControl+0xa0>)
 80058b6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <LocalRemoteControl+0x76>
				(settings.from.select_cmd && settings.retain.remote_mode))
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <LocalRemoteControl+0xa0>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	b2db      	uxtb	r3, r3
	if((d_inputs.sb_make_proba && !settings.retain.remote_mode) ||
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d013      	beq.n	80058f2 <LocalRemoteControl+0x96>
				(settings.from.select_cmd && settings.retain.remote_mode))
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <LocalRemoteControl+0xa0>)
 80058cc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00f      	beq.n	80058f2 <LocalRemoteControl+0x96>
	{
		if(!auto_mode)
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <LocalRemoteControl+0xa8>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <LocalRemoteControl+0x96>
		{
			if(settings.retain.remote_mode)settings.from.select_cmd = 0;
 80058da:	4b08      	ldr	r3, [pc, #32]	; (80058fc <LocalRemoteControl+0xa0>)
 80058dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <LocalRemoteControl+0x90>
 80058e2:	4a06      	ldr	r2, [pc, #24]	; (80058fc <LocalRemoteControl+0xa0>)
 80058e4:	7813      	ldrb	r3, [r2, #0]
 80058e6:	f36f 1304 	bfc	r3, #4, #1
 80058ea:	7013      	strb	r3, [r2, #0]
						startOtborCommand = 1;
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <LocalRemoteControl+0xb0>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	20007474 	.word	0x20007474
 8005900:	2000701c 	.word	0x2000701c
 8005904:	20007461 	.word	0x20007461
 8005908:	20007434 	.word	0x20007434
 800590c:	2000745c 	.word	0x2000745c

08005910 <Moving>:


static void Moving()
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
	if(!CheckCriticalError())
 8005914:	f000 f8ba 	bl	8005a8c <CheckCriticalError>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <Moving+0x14>
	{
		cycle_probotbor = 0;
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <Moving+0x12c>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
	}
	// Условия остановки движения
	if(cycle_probotbor || cycle_vozvrat)
 8005924:	4b45      	ldr	r3, [pc, #276]	; (8005a3c <Moving+0x12c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <Moving+0x24>
 800592c:	4b44      	ldr	r3, [pc, #272]	; (8005a40 <Moving+0x130>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d03e      	beq.n	80059b2 <Moving+0xa2>
	{
		// остановка по концевикам b
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8005934:	4b43      	ldr	r3, [pc, #268]	; (8005a44 <Moving+0x134>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <Moving+0x48>
 800593c:	4b42      	ldr	r3, [pc, #264]	; (8005a48 <Moving+0x138>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d120      	bne.n	800598c <Moving+0x7c>
 800594a:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <Moving+0x138>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d119      	bne.n	800598c <Moving+0x7c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8005958:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <Moving+0x134>)
 800595a:	781b      	ldrb	r3, [r3, #0]
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10d      	bne.n	800597c <Moving+0x6c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8005960:	4b39      	ldr	r3, [pc, #228]	; (8005a48 <Moving+0x138>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10e      	bne.n	800598c <Moving+0x7c>
 800596e:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <Moving+0x138>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <Moving+0x7c>
				|| rtSq_kovsh_left_1 || rtSq_kovsh_right_1)
 800597c:	4b33      	ldr	r3, [pc, #204]	; (8005a4c <Moving+0x13c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <Moving+0x7c>
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <Moving+0x140>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <Moving+0x94>
		{
			if(cycle_probotbor)
 800598c:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <Moving+0x12c>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <Moving+0x90>
			{
				meas_data.probInKanistra++;
 8005994:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <Moving+0x144>)
 8005996:	8b1b      	ldrh	r3, [r3, #24]
 8005998:	3301      	adds	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	4b2d      	ldr	r3, [pc, #180]	; (8005a54 <Moving+0x144>)
 800599e:	831a      	strh	r2, [r3, #24]
			}
			StopCycles();
 80059a0:	f000 f8ca 	bl	8005b38 <StopCycles>

		}
		// остановка по критической ошибке
		if(!CheckCriticalError()){
 80059a4:	f000 f872 	bl	8005a8c <CheckCriticalError>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <Moving+0xa2>
			StopCycles();
 80059ae:	f000 f8c3 	bl	8005b38 <StopCycles>
		}
	}


	// Управление двигателем
	if(cycle_probotbor || cycle_vozvrat)
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <Moving+0x12c>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <Moving+0xb2>
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <Moving+0x130>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <Moving+0xfa>
	{
		d_outputs.prob_ready=0;
 80059c2:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <Moving+0x148>)
 80059c4:	7813      	ldrb	r3, [r2, #0]
 80059c6:	f36f 0382 	bfc	r3, #2, #1
 80059ca:	7013      	strb	r3, [r2, #0]
		if(targetSq)
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <Moving+0x134>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <Moving+0xda>
		{
			d_outputs.uz_prob_forv = 1;
 80059d4:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <Moving+0x148>)
 80059d6:	7813      	ldrb	r3, [r2, #0]
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 0;
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <Moving+0x148>)
 80059e0:	7813      	ldrb	r3, [r2, #0]
 80059e2:	f36f 0341 	bfc	r3, #1, #1
 80059e6:	7013      	strb	r3, [r2, #0]
 80059e8:	e009      	b.n	80059fe <Moving+0xee>
		}
		else
		{
			d_outputs.uz_prob_forv = 0;
 80059ea:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <Moving+0x148>)
 80059ec:	7813      	ldrb	r3, [r2, #0]
 80059ee:	f36f 0300 	bfc	r3, #0, #1
 80059f2:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 1;
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <Moving+0x148>)
 80059f6:	7813      	ldrb	r3, [r2, #0]
 80059f8:	f043 0302 	orr.w	r3, r3, #2
 80059fc:	7013      	strb	r3, [r2, #0]
		}
		d_outputs.prob_ready = 0;
 80059fe:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <Moving+0x148>)
 8005a00:	7813      	ldrb	r3, [r2, #0]
 8005a02:	f36f 0382 	bfc	r3, #2, #1
 8005a06:	7013      	strb	r3, [r2, #0]
 8005a08:	e015      	b.n	8005a36 <Moving+0x126>
	}
	else
	{
		d_outputs.uz_prob_forv =0 ;
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <Moving+0x148>)
 8005a0c:	7813      	ldrb	r3, [r2, #0]
 8005a0e:	f36f 0300 	bfc	r3, #0, #1
 8005a12:	7013      	strb	r3, [r2, #0]
		d_outputs.uz_prob_rev = 0 ;
 8005a14:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <Moving+0x148>)
 8005a16:	7813      	ldrb	r3, [r2, #0]
 8005a18:	f36f 0341 	bfc	r3, #1, #1
 8005a1c:	7013      	strb	r3, [r2, #0]
		d_outputs.prob_ready = CheckCommonError();
 8005a1e:	f000 f81d 	bl	8005a5c <CheckCommonError>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	b2d9      	uxtb	r1, r3
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <Moving+0x148>)
 8005a2c:	7813      	ldrb	r3, [r2, #0]
 8005a2e:	f361 0382 	bfi	r3, r1, #2, #1
 8005a32:	7013      	strb	r3, [r2, #0]
	}
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	2000745e 	.word	0x2000745e
 8005a40:	2000745f 	.word	0x2000745f
 8005a44:	20007458 	.word	0x20007458
 8005a48:	2000701c 	.word	0x2000701c
 8005a4c:	20007439 	.word	0x20007439
 8005a50:	20007459 	.word	0x20007459
 8005a54:	2000751c 	.word	0x2000751c
 8005a58:	20007018 	.word	0x20007018

08005a5c <CheckCommonError>:

static uint8_t CheckCommonError()
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
	uint16_t *errPointer = (uint16_t*)&(meas_data.errors);
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <CheckCommonError+0x2c>)
 8005a64:	607b      	str	r3, [r7, #4]
	uint16_t result = *errPointer ? 0 : 1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf0c      	ite	eq
 8005a6e:	2301      	moveq	r3, #1
 8005a70:	2300      	movne	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	807b      	strh	r3, [r7, #2]
	return result;
 8005a76:	887b      	ldrh	r3, [r7, #2]
 8005a78:	b2db      	uxtb	r3, r3

}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2000753c 	.word	0x2000753c

08005a8c <CheckCriticalError>:

static uint8_t CheckCriticalError()
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
	// Ошибки, при которых нужно срочно остановить ковш
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005a92:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <CheckCriticalError+0xa4>)
 8005a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
			(meas_data.errors.timeout_moving_left_err)||
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d135      	bne.n	8005b0e <CheckCriticalError+0x82>
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <CheckCriticalError+0xa4>)
 8005aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d12d      	bne.n	8005b0e <CheckCriticalError+0x82>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <CheckCriticalError+0xa4>)
 8005ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <CheckCriticalError+0x44>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <CheckCriticalError+0xa8>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11e      	bne.n	8005b0e <CheckCriticalError+0x82>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <CheckCriticalError+0xa4>)
 8005ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	b2db      	uxtb	r3, r3
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d006      	beq.n	8005aee <CheckCriticalError+0x62>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8005ae0:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <CheckCriticalError+0xa8>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <CheckCriticalError+0x82>
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <CheckCriticalError+0xa4>)
 8005af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005af4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <CheckCriticalError+0x82>
			(meas_data.errors.timeout_moving_left_err)||
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <CheckCriticalError+0xa4>)
 8005b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <CheckCriticalError+0x86>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <CheckCriticalError+0x88>
 8005b12:	2300      	movs	r3, #0
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005b14:	71fb      	strb	r3, [r7, #7]
			(meas_data.errors.timeout_moving_right_err);
	return !error;
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	2000751c 	.word	0x2000751c
 8005b34:	20007018 	.word	0x20007018

08005b38 <StopCycles>:

static void StopCycles()
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
	cycle_probotbor = 0;
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <StopCycles+0x1c>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
	cycle_vozvrat = 0;
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <StopCycles+0x20>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000745e 	.word	0x2000745e
 8005b58:	2000745f 	.word	0x2000745f

08005b5c <OnCommandCycle>:

static void OnCommandCycle()
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	if(meas_data.errors.need_return_err &&
 8005b60:	4b46      	ldr	r3, [pc, #280]	; (8005c7c <OnCommandCycle+0x120>)
 8005b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d048      	beq.n	8005c02 <OnCommandCycle+0xa6>
			CheckCriticalError() &&
 8005b70:	f7ff ff8c 	bl	8005a8c <CheckCriticalError>
 8005b74:	4603      	mov	r3, r0
	if(meas_data.errors.need_return_err &&
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d043      	beq.n	8005c02 <OnCommandCycle+0xa6>
			!cycle_vozvrat &&
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <OnCommandCycle+0x124>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
			CheckCriticalError() &&
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d13f      	bne.n	8005c02 <OnCommandCycle+0xa6>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8005b82:	4b40      	ldr	r3, [pc, #256]	; (8005c84 <OnCommandCycle+0x128>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b8a:	b2db      	uxtb	r3, r3
			!cycle_vozvrat &&
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <OnCommandCycle+0x3e>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8005b90:	4b3d      	ldr	r3, [pc, #244]	; (8005c88 <OnCommandCycle+0x12c>)
 8005b92:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d033      	beq.n	8005c02 <OnCommandCycle+0xa6>
	{
		cycle_probotbor = 0;
 8005b9a:	4b3c      	ldr	r3, [pc, #240]	; (8005c8c <OnCommandCycle+0x130>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
		cycle_vozvrat = 1;
 8005ba0:	4b37      	ldr	r3, [pc, #220]	; (8005c80 <OnCommandCycle+0x124>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
		if(d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2 ){
 8005ba6:	4b37      	ldr	r3, [pc, #220]	; (8005c84 <OnCommandCycle+0x128>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <OnCommandCycle+0x66>
 8005bb4:	4b33      	ldr	r3, [pc, #204]	; (8005c84 <OnCommandCycle+0x128>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <OnCommandCycle+0x6e>
			targetSq = 1;
 8005bc2:	4b33      	ldr	r3, [pc, #204]	; (8005c90 <OnCommandCycle+0x134>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e01b      	b.n	8005c02 <OnCommandCycle+0xa6>
		}
		else if(d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2){
 8005bca:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <OnCommandCycle+0x128>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <OnCommandCycle+0x8a>
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <OnCommandCycle+0x128>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <OnCommandCycle+0x92>
			targetSq = 0;
 8005be6:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <OnCommandCycle+0x134>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e009      	b.n	8005c02 <OnCommandCycle+0xa6>
		}
		else{
			targetSq = !targetSq;
 8005bee:	4b28      	ldr	r3, [pc, #160]	; (8005c90 <OnCommandCycle+0x134>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <OnCommandCycle+0x134>)
 8005c00:	701a      	strb	r2, [r3, #0]
		};
	}
	settings.non_retain.start_vozvrat = 0;
 8005c02:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <OnCommandCycle+0x12c>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	if(startOtborCommand)
 8005c0a:	4b22      	ldr	r3, [pc, #136]	; (8005c94 <OnCommandCycle+0x138>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d032      	beq.n	8005c78 <OnCommandCycle+0x11c>
	{
		startOtborCommand = 0;
 8005c12:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <OnCommandCycle+0x138>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
		if(d_outputs.prob_ready)
 8005c18:	4b1f      	ldr	r3, [pc, #124]	; (8005c98 <OnCommandCycle+0x13c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d028      	beq.n	8005c78 <OnCommandCycle+0x11c>
		{
			cycle_probotbor = 1;
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <OnCommandCycle+0x130>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
			cycle_vozvrat = 0;
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <OnCommandCycle+0x124>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]

			if(d_inputs.sq_kovsh_prob_left_2 || d_inputs.sq_kovsh_prob_left_1)
 8005c32:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <OnCommandCycle+0x128>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <OnCommandCycle+0xf2>
 8005c40:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <OnCommandCycle+0x128>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <OnCommandCycle+0xfa>
			{
				targetSq = 1;
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <OnCommandCycle+0x134>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
			{
				targetSq = 0;
			}
		}
	}
}
 8005c54:	e010      	b.n	8005c78 <OnCommandCycle+0x11c>
			else if(d_inputs.sq_kovsh_prob_right_2 || d_inputs.sq_kovsh_prob_right_1)
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <OnCommandCycle+0x128>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <OnCommandCycle+0x116>
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <OnCommandCycle+0x128>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <OnCommandCycle+0x11c>
				targetSq = 0;
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <OnCommandCycle+0x134>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000751c 	.word	0x2000751c
 8005c80:	2000745f 	.word	0x2000745f
 8005c84:	2000701c 	.word	0x2000701c
 8005c88:	20007474 	.word	0x20007474
 8005c8c:	2000745e 	.word	0x2000745e
 8005c90:	20007458 	.word	0x20007458
 8005c94:	2000745c 	.word	0x2000745c
 8005c98:	20007018 	.word	0x20007018

08005c9c <Indication>:

static void Indication()
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	meas_data.probotbor_ready = d_outputs.prob_ready;
 8005ca0:	4b13      	ldr	r3, [pc, #76]	; (8005cf0 <Indication+0x54>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <Indication+0x58>)
 8005cae:	821a      	strh	r2, [r3, #16]
	meas_data.probotbor_busy = cycle_probotbor;
 8005cb0:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <Indication+0x5c>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <Indication+0x58>)
 8005cb8:	825a      	strh	r2, [r3, #18]
	meas_data.vozvrat_probotbor_busy = cycle_vozvrat;
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <Indication+0x60>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <Indication+0x58>)
 8005cc2:	829a      	strh	r2, [r3, #20]
	meas_data.automat_mode = auto_mode;
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <Indication+0x64>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <Indication+0x58>)
 8005ccc:	82da      	strh	r2, [r3, #22]
	meas_data.toNextOtborTime = select_period - automatTON.ET/1000;
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <Indication+0x68>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <Indication+0x6c>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	490d      	ldr	r1, [pc, #52]	; (8005d0c <Indication+0x70>)
 8005cd8:	fba1 1303 	umull	r1, r3, r1, r3
 8005cdc:	099b      	lsrs	r3, r3, #6
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <Indication+0x58>)
 8005ce2:	61d3      	str	r3, [r2, #28]
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20007018 	.word	0x20007018
 8005cf4:	2000751c 	.word	0x2000751c
 8005cf8:	2000745e 	.word	0x2000745e
 8005cfc:	2000745f 	.word	0x2000745f
 8005d00:	20007461 	.word	0x20007461
 8005d04:	20007434 	.word	0x20007434
 8005d08:	2000743c 	.word	0x2000743c
 8005d0c:	10624dd3 	.word	0x10624dd3

08005d10 <GetPositiveFronts>:

static void GetPositiveFronts()
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1 && !lastSq_kovsh_left_1;
 8005d14:	4b43      	ldr	r3, [pc, #268]	; (8005e24 <GetPositiveFronts+0x114>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <GetPositiveFronts+0x1e>
 8005d22:	4b41      	ldr	r3, [pc, #260]	; (8005e28 <GetPositiveFronts+0x118>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <GetPositiveFronts+0x1e>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <GetPositiveFronts+0x20>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4b3e      	ldr	r3, [pc, #248]	; (8005e2c <GetPositiveFronts+0x11c>)
 8005d34:	701a      	strb	r2, [r3, #0]
	rtSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1 && !lastSq_kovsh_right_1;
 8005d36:	4b3b      	ldr	r3, [pc, #236]	; (8005e24 <GetPositiveFronts+0x114>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <GetPositiveFronts+0x40>
 8005d44:	4b3a      	ldr	r3, [pc, #232]	; (8005e30 <GetPositiveFronts+0x120>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <GetPositiveFronts+0x40>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <GetPositiveFronts+0x42>
 8005d50:	2300      	movs	r3, #0
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <GetPositiveFronts+0x124>)
 8005d56:	701a      	strb	r2, [r3, #0]
	rtSbMakeProba =  (d_inputs.sb_make_proba || settings.non_retain.start_otbor) && !lastSbMakeProba;
 8005d58:	4b32      	ldr	r3, [pc, #200]	; (8005e24 <GetPositiveFronts+0x114>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <GetPositiveFronts+0x60>
 8005d66:	4b34      	ldr	r3, [pc, #208]	; (8005e38 <GetPositiveFronts+0x128>)
 8005d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <GetPositiveFronts+0x6c>
 8005d70:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <GetPositiveFronts+0x12c>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <GetPositiveFronts+0x6c>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <GetPositiveFronts+0x6e>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <GetPositiveFronts+0x130>)
 8005d82:	701a      	strb	r2, [r3, #0]
	rtSbMakeVozvrat = (d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat) && !lastSbMakeVozvrat;
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <GetPositiveFronts+0x114>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <GetPositiveFronts+0x8c>
 8005d92:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <GetPositiveFronts+0x128>)
 8005d94:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <GetPositiveFronts+0x98>
 8005d9c:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <GetPositiveFronts+0x134>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <GetPositiveFronts+0x98>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <GetPositiveFronts+0x9a>
 8005da8:	2300      	movs	r3, #0
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <GetPositiveFronts+0x138>)
 8005dae:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1;
 8005db0:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <GetPositiveFronts+0x114>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <GetPositiveFronts+0x118>)
 8005dbe:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1;
 8005dc0:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <GetPositiveFronts+0x114>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <GetPositiveFronts+0x120>)
 8005dce:	701a      	strb	r2, [r3, #0]
	lastSbMakeProba = d_inputs.sb_make_proba || settings.non_retain.start_otbor;
 8005dd0:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <GetPositiveFronts+0x114>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <GetPositiveFronts+0xd8>
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <GetPositiveFronts+0x128>)
 8005de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <GetPositiveFronts+0xdc>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <GetPositiveFronts+0xde>
 8005dec:	2300      	movs	r3, #0
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <GetPositiveFronts+0x12c>)
 8005df2:	701a      	strb	r2, [r3, #0]
	lastSbMakeVozvrat = d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat;
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <GetPositiveFronts+0x114>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <GetPositiveFronts+0xfc>
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <GetPositiveFronts+0x128>)
 8005e04:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <GetPositiveFronts+0x100>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <GetPositiveFronts+0x102>
 8005e10:	2300      	movs	r3, #0
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <GetPositiveFronts+0x134>)
 8005e16:	701a      	strb	r2, [r3, #0]

}
 8005e18:	bf00      	nop
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000701c 	.word	0x2000701c
 8005e28:	2000745d 	.word	0x2000745d
 8005e2c:	20007439 	.word	0x20007439
 8005e30:	20007448 	.word	0x20007448
 8005e34:	20007459 	.word	0x20007459
 8005e38:	20007474 	.word	0x20007474
 8005e3c:	20007470 	.word	0x20007470
 8005e40:	2000745b 	.word	0x2000745b
 8005e44:	20007438 	.word	0x20007438
 8005e48:	2000745a 	.word	0x2000745a

08005e4c <NakopitelCheck>:

static void NakopitelCheck()
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
	if(settings.retain.nakop_SV==0)settings.retain.nakop_SV = 1;
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <NakopitelCheck+0x48>)
 8005e52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <NakopitelCheck+0x12>
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <NakopitelCheck+0x48>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	871a      	strh	r2, [r3, #56]	; 0x38
	if(!d_inputs.sq_kanistra)meas_data.probInKanistra = 0;
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <NakopitelCheck+0x4c>)
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <NakopitelCheck+0x26>
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <NakopitelCheck+0x50>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	831a      	strh	r2, [r3, #24]
	meas_data.nakopitelFull = meas_data.probInKanistra>=settings.retain.nakop_SV;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <NakopitelCheck+0x50>)
 8005e74:	8b1a      	ldrh	r2, [r3, #24]
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <NakopitelCheck+0x48>)
 8005e78:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	bf2c      	ite	cs
 8005e7e:	2301      	movcs	r3, #1
 8005e80:	2300      	movcc	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <NakopitelCheck+0x50>)
 8005e88:	835a      	strh	r2, [r3, #26]

}
 8005e8a:	bf00      	nop
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20007474 	.word	0x20007474
 8005e98:	2000701c 	.word	0x2000701c
 8005e9c:	2000751c 	.word	0x2000751c

08005ea0 <GetClientInfo>:

static void GetClientInfo()
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
	meas_data.to.ready_for_select = d_outputs.prob_ready;
 8005ea4:	4b4f      	ldr	r3, [pc, #316]	; (8005fe4 <GetClientInfo+0x144>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005eac:	b2d9      	uxtb	r1, r3
 8005eae:	4a4e      	ldr	r2, [pc, #312]	; (8005fe8 <GetClientInfo+0x148>)
 8005eb0:	7813      	ldrb	r3, [r2, #0]
 8005eb2:	f361 0300 	bfi	r3, r1, #0, #1
 8005eb6:	7013      	strb	r3, [r2, #0]
	meas_data.to.automat = auto_mode;
 8005eb8:	4b4c      	ldr	r3, [pc, #304]	; (8005fec <GetClientInfo+0x14c>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	b2d9      	uxtb	r1, r3
 8005ec2:	4a49      	ldr	r2, [pc, #292]	; (8005fe8 <GetClientInfo+0x148>)
 8005ec4:	7813      	ldrb	r3, [r2, #0]
 8005ec6:	f361 0341 	bfi	r3, r1, #1, #1
 8005eca:	7013      	strb	r3, [r2, #0]
	meas_data.to.errors = !CheckCommonError();
 8005ecc:	f7ff fdc6 	bl	8005a5c <CheckCommonError>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2d9      	uxtb	r1, r3
 8005edc:	4a42      	ldr	r2, [pc, #264]	; (8005fe8 <GetClientInfo+0x148>)
 8005ede:	7813      	ldrb	r3, [r2, #0]
 8005ee0:	f361 0382 	bfi	r3, r1, #2, #1
 8005ee4:	7013      	strb	r3, [r2, #0]
	meas_data.to.prob_err = meas_data.errors.need_return_err ||
 8005ee6:	4b40      	ldr	r3, [pc, #256]	; (8005fe8 <GetClientInfo+0x148>)
 8005ee8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	b2db      	uxtb	r3, r3
			meas_data.errors.sq_left_err || meas_data.errors.sq_right_err || meas_data.errors.sb_abort_err
			|| meas_data.errors.uz_err || meas_data.errors.timeout_moving_left_err || meas_data.errors.timeout_moving_right_err
			|| meas_data.errors.need_return_err;
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d137      	bne.n	8005f66 <GetClientInfo+0xc6>
	meas_data.to.prob_err = meas_data.errors.need_return_err ||
 8005ef6:	4b3c      	ldr	r3, [pc, #240]	; (8005fe8 <GetClientInfo+0x148>)
 8005ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12f      	bne.n	8005f66 <GetClientInfo+0xc6>
			meas_data.errors.sq_left_err || meas_data.errors.sq_right_err || meas_data.errors.sb_abort_err
 8005f06:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <GetClientInfo+0x148>)
 8005f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d127      	bne.n	8005f66 <GetClientInfo+0xc6>
 8005f16:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <GetClientInfo+0x148>)
 8005f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d11f      	bne.n	8005f66 <GetClientInfo+0xc6>
			|| meas_data.errors.uz_err || meas_data.errors.timeout_moving_left_err || meas_data.errors.timeout_moving_right_err
 8005f26:	4b30      	ldr	r3, [pc, #192]	; (8005fe8 <GetClientInfo+0x148>)
 8005f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d117      	bne.n	8005f66 <GetClientInfo+0xc6>
 8005f36:	4b2c      	ldr	r3, [pc, #176]	; (8005fe8 <GetClientInfo+0x148>)
 8005f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10f      	bne.n	8005f66 <GetClientInfo+0xc6>
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <GetClientInfo+0x148>)
 8005f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <GetClientInfo+0xc6>
			|| meas_data.errors.need_return_err;
 8005f56:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <GetClientInfo+0x148>)
 8005f58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <GetClientInfo+0xca>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <GetClientInfo+0xcc>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	b2d9      	uxtb	r1, r3
	meas_data.to.prob_err = meas_data.errors.need_return_err ||
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <GetClientInfo+0x148>)
 8005f74:	7813      	ldrb	r3, [r2, #0]
 8005f76:	f361 03c3 	bfi	r3, r1, #3, #1
 8005f7a:	7013      	strb	r3, [r2, #0]
	meas_data.to.timeout_err = meas_data.errors.timeout_moving_left_err || meas_data.errors.timeout_moving_right_err;
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <GetClientInfo+0x148>)
 8005f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <GetClientInfo+0xfc>
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <GetClientInfo+0x148>)
 8005f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <GetClientInfo+0x100>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <GetClientInfo+0x102>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	b2d9      	uxtb	r1, r3
 8005fa8:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <GetClientInfo+0x148>)
 8005faa:	7813      	ldrb	r3, [r2, #0]
 8005fac:	f361 1386 	bfi	r3, r1, #6, #1
 8005fb0:	7013      	strb	r3, [r2, #0]
	meas_data.to.sq_kovsh_err = meas_data.errors.need_return_err;
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <GetClientInfo+0x148>)
 8005fb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fbc:	b2d9      	uxtb	r1, r3
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	; (8005fe8 <GetClientInfo+0x148>)
 8005fc0:	7813      	ldrb	r3, [r2, #0]
 8005fc2:	f361 13c7 	bfi	r3, r1, #7, #1
 8005fc6:	7013      	strb	r3, [r2, #0]
	meas_data.to.sb_abort_err = meas_data.errors.sb_abort_err;
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <GetClientInfo+0x148>)
 8005fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fd2:	b2d9      	uxtb	r1, r3
 8005fd4:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <GetClientInfo+0x148>)
 8005fd6:	7853      	ldrb	r3, [r2, #1]
 8005fd8:	f361 0300 	bfi	r3, r1, #0, #1
 8005fdc:	7053      	strb	r3, [r2, #1]
}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20007018 	.word	0x20007018
 8005fe8:	2000751c 	.word	0x2000751c
 8005fec:	20007461 	.word	0x20007461

08005ff0 <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
	int result = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 8005ffa:	f107 0308 	add.w	r3, r7, #8
 8005ffe:	2202      	movs	r2, #2
 8006000:	4619      	mov	r1, r3
 8006002:	2000      	movs	r0, #0
 8006004:	f7fb fddc 	bl	8001bc0 <framDataRead>
 8006008:	60f8      	str	r0, [r7, #12]
	if (!result)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d130      	bne.n	8006072 <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 8006010:	893b      	ldrh	r3, [r7, #8]
 8006012:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 8006016:	4293      	cmp	r3, r2
 8006018:	d128      	bne.n	800606c <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 800601a:	2238      	movs	r2, #56	; 0x38
 800601c:	4917      	ldr	r1, [pc, #92]	; (800607c <settingsLoadFRAM+0x8c>)
 800601e:	2002      	movs	r0, #2
 8006020:	f7fb fdce 	bl	8001bc0 <framDataRead>
 8006024:	60f8      	str	r0, [r7, #12]
			if (!result)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11b      	bne.n	8006064 <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 800602c:	2138      	movs	r1, #56	; 0x38
 800602e:	4813      	ldr	r0, [pc, #76]	; (800607c <settingsLoadFRAM+0x8c>)
 8006030:	f000 f864 	bl	80060fc <checksumCalc>
 8006034:	4603      	mov	r3, r0
 8006036:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 8006038:	1dfb      	adds	r3, r7, #7
 800603a:	2201      	movs	r2, #1
 800603c:	4619      	mov	r1, r3
 800603e:	203a      	movs	r0, #58	; 0x3a
 8006040:	f7fb fdbe 	bl	8001bc0 <framDataRead>
 8006044:	60f8      	str	r0, [r7, #12]
 				if (!result)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d107      	bne.n	800605c <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	7afa      	ldrb	r2, [r7, #11]
 8006050:	429a      	cmp	r2, r3
 8006052:	d00e      	beq.n	8006072 <settingsLoadFRAM+0x82>
						result = -2;
 8006054:	f06f 0301 	mvn.w	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e00a      	b.n	8006072 <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 800605c:	f04f 33ff 	mov.w	r3, #4294967295
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e006      	b.n	8006072 <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e002      	b.n	8006072 <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2000747c 	.word	0x2000747c

08006080 <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
	int result = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 800608a:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 800608e:	813b      	strh	r3, [r7, #8]
 8006090:	2300      	movs	r3, #0
 8006092:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	897b      	ldrh	r3, [r7, #10]
 800609a:	2202      	movs	r2, #2
 800609c:	4618      	mov	r0, r3
 800609e:	f7fb fdcd 	bl	8001c3c <framDataWrite>
 80060a2:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 80060a4:	897b      	ldrh	r3, [r7, #10]
 80060a6:	3302      	adds	r3, #2
 80060a8:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 80060aa:	f009 fcf9 	bl	800faa0 <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 80060ae:	897b      	ldrh	r3, [r7, #10]
 80060b0:	2238      	movs	r2, #56	; 0x38
 80060b2:	4911      	ldr	r1, [pc, #68]	; (80060f8 <settingsSaveFRAM+0x78>)
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fb fdc1 	bl	8001c3c <framDataWrite>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	3338      	adds	r3, #56	; 0x38
 80060c6:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 80060c8:	2138      	movs	r1, #56	; 0x38
 80060ca:	480b      	ldr	r0, [pc, #44]	; (80060f8 <settingsSaveFRAM+0x78>)
 80060cc:	f000 f816 	bl	80060fc <checksumCalc>
 80060d0:	4603      	mov	r3, r0
 80060d2:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 80060d4:	f009 fcf2 	bl	800fabc <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 80060d8:	1df9      	adds	r1, r7, #7
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	2201      	movs	r2, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fb fdac 	bl	8001c3c <framDataWrite>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

	return result;
 80060ec:	68fb      	ldr	r3, [r7, #12]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	2000747c 	.word	0x2000747c

080060fc <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 800610c:	2300      	movs	r3, #0
 800610e:	60bb      	str	r3, [r7, #8]
 8006110:	e009      	b.n	8006126 <checksumCalc+0x2a>
		xor ^= data[i];
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	4053      	eors	r3, r2
 800611e:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	3301      	adds	r3, #1
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	887b      	ldrh	r3, [r7, #2]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	dbf1      	blt.n	8006112 <checksumCalc+0x16>
	return xor;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <HAL_MspInit+0x54>)
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614a:	4a11      	ldr	r2, [pc, #68]	; (8006190 <HAL_MspInit+0x54>)
 800614c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006150:	6453      	str	r3, [r2, #68]	; 0x44
 8006152:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <HAL_MspInit+0x54>)
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <HAL_MspInit+0x54>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	4a0a      	ldr	r2, [pc, #40]	; (8006190 <HAL_MspInit+0x54>)
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	6413      	str	r3, [r2, #64]	; 0x40
 800616e:	4b08      	ldr	r3, [pc, #32]	; (8006190 <HAL_MspInit+0x54>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800617a:	2200      	movs	r2, #0
 800617c:	210f      	movs	r1, #15
 800617e:	f06f 0001 	mvn.w	r0, #1
 8006182:	f001 fc6f 	bl	8007a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800

08006194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800619c:	f107 0314 	add.w	r3, r7, #20
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a3c      	ldr	r2, [pc, #240]	; (80062a4 <HAL_ADC_MspInit+0x110>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d171      	bne.n	800629a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	4a3a      	ldr	r2, [pc, #232]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c4:	6453      	str	r3, [r2, #68]	; 0x44
 80061c6:	4b38      	ldr	r3, [pc, #224]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	4b34      	ldr	r3, [pc, #208]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4a33      	ldr	r2, [pc, #204]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061dc:	f043 0304 	orr.w	r3, r3, #4
 80061e0:	6313      	str	r3, [r2, #48]	; 0x30
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	4b2d      	ldr	r3, [pc, #180]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	4a2c      	ldr	r2, [pc, #176]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	6313      	str	r3, [r2, #48]	; 0x30
 80061fe:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <HAL_ADC_MspInit+0x114>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 800620a:	230d      	movs	r3, #13
 800620c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800620e:	2303      	movs	r3, #3
 8006210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	4619      	mov	r1, r3
 800621c:	4823      	ldr	r0, [pc, #140]	; (80062ac <HAL_ADC_MspInit+0x118>)
 800621e:	f003 fa5f 	bl	80096e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 8006222:	2318      	movs	r3, #24
 8006224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006226:	2303      	movs	r3, #3
 8006228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800622e:	f107 0314 	add.w	r3, r7, #20
 8006232:	4619      	mov	r1, r3
 8006234:	481e      	ldr	r0, [pc, #120]	; (80062b0 <HAL_ADC_MspInit+0x11c>)
 8006236:	f003 fa53 	bl	80096e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 800623c:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_ADC_MspInit+0x124>)
 800623e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006242:	2200      	movs	r2, #0
 8006244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006246:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800624c:	4b19      	ldr	r3, [pc, #100]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 800624e:	2200      	movs	r2, #0
 8006250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006258:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800625a:	4b16      	ldr	r3, [pc, #88]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 800625c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006260:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 800626c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006270:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006272:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006274:	2200      	movs	r2, #0
 8006276:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 800627a:	2200      	movs	r2, #0
 800627c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800627e:	480d      	ldr	r0, [pc, #52]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006280:	f001 fc28 	bl	8007ad4 <HAL_DMA_Init>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800628a:	f7fe fca7 	bl	8004bdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a08      	ldr	r2, [pc, #32]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
 8006294:	4a07      	ldr	r2, [pc, #28]	; (80062b4 <HAL_ADC_MspInit+0x120>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800629a:	bf00      	nop
 800629c:	3728      	adds	r7, #40	; 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40012000 	.word	0x40012000
 80062a8:	40023800 	.word	0x40023800
 80062ac:	40020800 	.word	0x40020800
 80062b0:	40020000 	.word	0x40020000
 80062b4:	2000738c 	.word	0x2000738c
 80062b8:	40026410 	.word	0x40026410

080062bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	; 0x28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	60da      	str	r2, [r3, #12]
 80062d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_SPI_MspInit+0x84>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d12c      	bne.n	8006338 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	4b18      	ldr	r3, [pc, #96]	; (8006344 <HAL_SPI_MspInit+0x88>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <HAL_SPI_MspInit+0x88>)
 80062e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ec:	6413      	str	r3, [r2, #64]	; 0x40
 80062ee:	4b15      	ldr	r3, [pc, #84]	; (8006344 <HAL_SPI_MspInit+0x88>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	4b11      	ldr	r3, [pc, #68]	; (8006344 <HAL_SPI_MspInit+0x88>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <HAL_SPI_MspInit+0x88>)
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	6313      	str	r3, [r2, #48]	; 0x30
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <HAL_SPI_MspInit+0x88>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 8006316:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800631a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631c:	2302      	movs	r3, #2
 800631e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006324:	2303      	movs	r3, #3
 8006326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006328:	2306      	movs	r3, #6
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	4619      	mov	r1, r3
 8006332:	4805      	ldr	r0, [pc, #20]	; (8006348 <HAL_SPI_MspInit+0x8c>)
 8006334:	f003 f9d4 	bl	80096e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006338:	bf00      	nop
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40003c00 	.word	0x40003c00
 8006344:	40023800 	.word	0x40023800
 8006348:	40020800 	.word	0x40020800

0800634c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a18      	ldr	r2, [pc, #96]	; (80063bc <HAL_TIM_Base_MspInit+0x70>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10e      	bne.n	800637c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <HAL_TIM_Base_MspInit+0x74>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <HAL_TIM_Base_MspInit+0x74>)
 8006368:	f043 0302 	orr.w	r3, r3, #2
 800636c:	6413      	str	r3, [r2, #64]	; 0x40
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <HAL_TIM_Base_MspInit+0x74>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800637a:	e01a      	b.n	80063b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <HAL_TIM_Base_MspInit+0x78>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d115      	bne.n	80063b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <HAL_TIM_Base_MspInit+0x74>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <HAL_TIM_Base_MspInit+0x74>)
 8006390:	f043 0304 	orr.w	r3, r3, #4
 8006394:	6413      	str	r3, [r2, #64]	; 0x40
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <HAL_TIM_Base_MspInit+0x74>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	60bb      	str	r3, [r7, #8]
 80063a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80063a2:	2200      	movs	r2, #0
 80063a4:	2105      	movs	r1, #5
 80063a6:	201e      	movs	r0, #30
 80063a8:	f001 fb5c 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80063ac:	201e      	movs	r0, #30
 80063ae:	f001 fb75 	bl	8007a9c <HAL_NVIC_EnableIRQ>
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40000800 	.word	0x40000800

080063c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d0:	f107 031c 	add.w	r3, r7, #28
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a68      	ldr	r2, [pc, #416]	; (8006588 <HAL_UART_MspInit+0x1c0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d163      	bne.n	80064b2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	4b67      	ldr	r3, [pc, #412]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	4a66      	ldr	r2, [pc, #408]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80063f4:	f043 0310 	orr.w	r3, r3, #16
 80063f8:	6453      	str	r3, [r2, #68]	; 0x44
 80063fa:	4b64      	ldr	r3, [pc, #400]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	4b60      	ldr	r3, [pc, #384]	; (800658c <HAL_UART_MspInit+0x1c4>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4a5f      	ldr	r2, [pc, #380]	; (800658c <HAL_UART_MspInit+0x1c4>)
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	6313      	str	r3, [r2, #48]	; 0x30
 8006416:	4b5d      	ldr	r3, [pc, #372]	; (800658c <HAL_UART_MspInit+0x1c4>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006422:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006428:	2302      	movs	r3, #2
 800642a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006430:	2303      	movs	r3, #3
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006434:	2307      	movs	r3, #7
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006438:	f107 031c 	add.w	r3, r7, #28
 800643c:	4619      	mov	r1, r3
 800643e:	4854      	ldr	r0, [pc, #336]	; (8006590 <HAL_UART_MspInit+0x1c8>)
 8006440:	f003 f94e 	bl	80096e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006444:	4b53      	ldr	r3, [pc, #332]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006446:	4a54      	ldr	r2, [pc, #336]	; (8006598 <HAL_UART_MspInit+0x1d0>)
 8006448:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800644a:	4b52      	ldr	r3, [pc, #328]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 800644c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006450:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006452:	4b50      	ldr	r3, [pc, #320]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006458:	4b4e      	ldr	r3, [pc, #312]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 800645a:	2200      	movs	r2, #0
 800645c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800645e:	4b4d      	ldr	r3, [pc, #308]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006464:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006466:	4b4b      	ldr	r3, [pc, #300]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006468:	2200      	movs	r2, #0
 800646a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800646c:	4b49      	ldr	r3, [pc, #292]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 800646e:	2200      	movs	r2, #0
 8006470:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006472:	4b48      	ldr	r3, [pc, #288]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006474:	2200      	movs	r2, #0
 8006476:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006478:	4b46      	ldr	r3, [pc, #280]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 800647a:	2200      	movs	r2, #0
 800647c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800647e:	4b45      	ldr	r3, [pc, #276]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006480:	2200      	movs	r2, #0
 8006482:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006484:	4843      	ldr	r0, [pc, #268]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006486:	f001 fb25 	bl	8007ad4 <HAL_DMA_Init>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006490:	f7fe fba4 	bl	8004bdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3f      	ldr	r2, [pc, #252]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
 800649a:	4a3e      	ldr	r2, [pc, #248]	; (8006594 <HAL_UART_MspInit+0x1cc>)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80064a0:	2200      	movs	r2, #0
 80064a2:	2105      	movs	r1, #5
 80064a4:	2025      	movs	r0, #37	; 0x25
 80064a6:	f001 fadd 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80064aa:	2025      	movs	r0, #37	; 0x25
 80064ac:	f001 faf6 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80064b0:	e066      	b.n	8006580 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a39      	ldr	r2, [pc, #228]	; (800659c <HAL_UART_MspInit+0x1d4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d161      	bne.n	8006580 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	4b32      	ldr	r3, [pc, #200]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80064c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c4:	4a31      	ldr	r2, [pc, #196]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80064c6:	f043 0320 	orr.w	r3, r3, #32
 80064ca:	6453      	str	r3, [r2, #68]	; 0x44
 80064cc:	4b2f      	ldr	r3, [pc, #188]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	4a2a      	ldr	r2, [pc, #168]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80064e2:	f043 0304 	orr.w	r3, r3, #4
 80064e6:	6313      	str	r3, [r2, #48]	; 0x30
 80064e8:	4b28      	ldr	r3, [pc, #160]	; (800658c <HAL_UART_MspInit+0x1c4>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064f4:	23c0      	movs	r3, #192	; 0xc0
 80064f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f8:	2302      	movs	r3, #2
 80064fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006500:	2303      	movs	r3, #3
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006504:	2308      	movs	r3, #8
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006508:	f107 031c 	add.w	r3, r7, #28
 800650c:	4619      	mov	r1, r3
 800650e:	4824      	ldr	r0, [pc, #144]	; (80065a0 <HAL_UART_MspInit+0x1d8>)
 8006510:	f003 f8e6 	bl	80096e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006514:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006516:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <HAL_UART_MspInit+0x1e0>)
 8006518:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800651a:	4b22      	ldr	r3, [pc, #136]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 800651c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006520:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006524:	2200      	movs	r2, #0
 8006526:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 800652a:	2200      	movs	r2, #0
 800652c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006534:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006536:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006538:	2200      	movs	r2, #0
 800653a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800653c:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 800653e:	2200      	movs	r2, #0
 8006540:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006544:	2200      	movs	r2, #0
 8006546:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006548:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 800654a:	2200      	movs	r2, #0
 800654c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800654e:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006550:	2200      	movs	r2, #0
 8006552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006554:	4813      	ldr	r0, [pc, #76]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006556:	f001 fabd 	bl	8007ad4 <HAL_DMA_Init>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8006560:	f7fe fb3c 	bl	8004bdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a0f      	ldr	r2, [pc, #60]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
 800656a:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <HAL_UART_MspInit+0x1dc>)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006570:	2200      	movs	r2, #0
 8006572:	2105      	movs	r1, #5
 8006574:	2047      	movs	r0, #71	; 0x47
 8006576:	f001 fa75 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800657a:	2047      	movs	r0, #71	; 0x47
 800657c:	f001 fa8e 	bl	8007a9c <HAL_NVIC_EnableIRQ>
}
 8006580:	bf00      	nop
 8006582:	3730      	adds	r7, #48	; 0x30
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40011000 	.word	0x40011000
 800658c:	40023800 	.word	0x40023800
 8006590:	40020000 	.word	0x40020000
 8006594:	200072e8 	.word	0x200072e8
 8006598:	40026440 	.word	0x40026440
 800659c:	40011400 	.word	0x40011400
 80065a0:	40020800 	.word	0x40020800
 80065a4:	20007158 	.word	0x20007158
 80065a8:	40026428 	.word	0x40026428

080065ac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a18      	ldr	r2, [pc, #96]	; (800661c <HAL_UART_MspDeInit+0x70>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d113      	bne.n	80065e6 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80065be:	4b18      	ldr	r3, [pc, #96]	; (8006620 <HAL_UART_MspDeInit+0x74>)
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	4a17      	ldr	r2, [pc, #92]	; (8006620 <HAL_UART_MspDeInit+0x74>)
 80065c4:	f023 0310 	bic.w	r3, r3, #16
 80065c8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80065ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065ce:	4815      	ldr	r0, [pc, #84]	; (8006624 <HAL_UART_MspDeInit+0x78>)
 80065d0:	f003 fa22 	bl	8009a18 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fb29 	bl	8007c30 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80065de:	2025      	movs	r0, #37	; 0x25
 80065e0:	f001 fa6a 	bl	8007ab8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80065e4:	e016      	b.n	8006614 <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART6)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0f      	ldr	r2, [pc, #60]	; (8006628 <HAL_UART_MspDeInit+0x7c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d111      	bne.n	8006614 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART6_CLK_DISABLE();
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <HAL_UART_MspDeInit+0x74>)
 80065f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f4:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <HAL_UART_MspDeInit+0x74>)
 80065f6:	f023 0320 	bic.w	r3, r3, #32
 80065fa:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 80065fc:	21c0      	movs	r1, #192	; 0xc0
 80065fe:	480b      	ldr	r0, [pc, #44]	; (800662c <HAL_UART_MspDeInit+0x80>)
 8006600:	f003 fa0a 	bl	8009a18 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fb11 	bl	8007c30 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800660e:	2047      	movs	r0, #71	; 0x47
 8006610:	f001 fa52 	bl	8007ab8 <HAL_NVIC_DisableIRQ>
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40011000 	.word	0x40011000
 8006620:	40023800 	.word	0x40023800
 8006624:	40020000 	.word	0x40020000
 8006628:	40011400 	.word	0x40011400
 800662c:	40020800 	.word	0x40020800

08006630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	; 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8006640:	2200      	movs	r2, #0
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	2019      	movs	r0, #25
 8006646:	f001 fa0d 	bl	8007a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800664a:	2019      	movs	r0, #25
 800664c:	f001 fa26 	bl	8007a9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <HAL_InitTick+0xa4>)
 8006656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006658:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <HAL_InitTick+0xa4>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6453      	str	r3, [r2, #68]	; 0x44
 8006660:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <HAL_InitTick+0xa4>)
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800666c:	f107 0210 	add.w	r2, r7, #16
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f003 ffac 	bl	800a5d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800667c:	f003 ff96 	bl	800a5ac <HAL_RCC_GetPCLK2Freq>
 8006680:	4603      	mov	r3, r0
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <HAL_InitTick+0xa8>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	0c9b      	lsrs	r3, r3, #18
 8006690:	3b01      	subs	r3, #1
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_InitTick+0xac>)
 8006696:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <HAL_InitTick+0xb0>)
 8006698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800669a:	4b10      	ldr	r3, [pc, #64]	; (80066dc <HAL_InitTick+0xac>)
 800669c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80066a2:	4a0e      	ldr	r2, [pc, #56]	; (80066dc <HAL_InitTick+0xac>)
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <HAL_InitTick+0xac>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <HAL_InitTick+0xac>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80066b4:	4809      	ldr	r0, [pc, #36]	; (80066dc <HAL_InitTick+0xac>)
 80066b6:	f004 fd67 	bl	800b188 <HAL_TIM_Base_Init>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80066c0:	4806      	ldr	r0, [pc, #24]	; (80066dc <HAL_InitTick+0xac>)
 80066c2:	f004 fe19 	bl	800b2f8 <HAL_TIM_Base_Start_IT>
 80066c6:	4603      	mov	r3, r0
 80066c8:	e000      	b.n	80066cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	; 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800
 80066d8:	431bde83 	.word	0x431bde83
 80066dc:	20007590 	.word	0x20007590
 80066e0:	40010000 	.word	0x40010000

080066e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066e8:	e7fe      	b.n	80066e8 <NMI_Handler+0x4>

080066ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066ea:	b480      	push	{r7}
 80066ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066ee:	e7fe      	b.n	80066ee <HardFault_Handler+0x4>

080066f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066f4:	e7fe      	b.n	80066f4 <MemManage_Handler+0x4>

080066f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066f6:	b480      	push	{r7}
 80066f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066fa:	e7fe      	b.n	80066fa <BusFault_Handler+0x4>

080066fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006700:	e7fe      	b.n	8006700 <UsageFault_Handler+0x4>

08006702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006702:	b480      	push	{r7}
 8006704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006706:	bf00      	nop
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006714:	4802      	ldr	r0, [pc, #8]	; (8006720 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006716:	f004 fe5f 	bl	800b3d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800671a:	bf00      	nop
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20007590 	.word	0x20007590

08006724 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006728:	4803      	ldr	r0, [pc, #12]	; (8006738 <TIM4_IRQHandler+0x14>)
 800672a:	f004 fe55 	bl	800b3d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  UpdateTimers();
 800672e:	f000 f965 	bl	80069fc <UpdateTimers>
  /* USER CODE END TIM4_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200071b8 	.word	0x200071b8

0800673c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <USART1_IRQHandler+0x10>)
 8006742:	f005 fb7f 	bl	800be44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20007348 	.word	0x20007348

08006750 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006754:	4802      	ldr	r0, [pc, #8]	; (8006760 <DMA2_Stream0_IRQHandler+0x10>)
 8006756:	f001 fbb3 	bl	8007ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	2000738c 	.word	0x2000738c

08006764 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006768:	4802      	ldr	r0, [pc, #8]	; (8006774 <DMA2_Stream1_IRQHandler+0x10>)
 800676a:	f001 fba9 	bl	8007ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20007158 	.word	0x20007158

08006778 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800677c:	4802      	ldr	r0, [pc, #8]	; (8006788 <DMA2_Stream2_IRQHandler+0x10>)
 800677e:	f001 fb9f 	bl	8007ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200072e8 	.word	0x200072e8

0800678c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006790:	4802      	ldr	r0, [pc, #8]	; (800679c <ETH_IRQHandler+0x10>)
 8006792:	f002 f9e3 	bl	8008b5c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20009200 	.word	0x20009200

080067a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80067a4:	4802      	ldr	r0, [pc, #8]	; (80067b0 <USART6_IRQHandler+0x10>)
 80067a6:	f005 fb4d 	bl	800be44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200073f0 	.word	0x200073f0

080067b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
	return 1;
 80067b8:	2301      	movs	r3, #1
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <_kill>:

int _kill(int pid, int sig)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <_kill+0x20>)
 80067d0:	2216      	movs	r2, #22
 80067d2:	601a      	str	r2, [r3, #0]
	return -1;
 80067d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	2000e190 	.word	0x2000e190

080067e8 <_exit>:

void _exit (int status)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80067f0:	f04f 31ff 	mov.w	r1, #4294967295
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ffe5 	bl	80067c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80067fa:	e7fe      	b.n	80067fa <_exit+0x12>

080067fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e00a      	b.n	8006824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800680e:	f3af 8000 	nop.w
 8006812:	4601      	mov	r1, r0
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	60ba      	str	r2, [r7, #8]
 800681a:	b2ca      	uxtb	r2, r1
 800681c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	3301      	adds	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	dbf0      	blt.n	800680e <_read+0x12>
	}

return len;
 800682c:	687b      	ldr	r3, [r7, #4]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	e009      	b.n	800685c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	60ba      	str	r2, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	3301      	adds	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	dbf1      	blt.n	8006848 <_write+0x12>
	}
	return len;
 8006864:	687b      	ldr	r3, [r7, #4]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <_close>:

int _close(int file)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
	return -1;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006896:	605a      	str	r2, [r3, #4]
	return 0;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <_isatty>:

int _isatty(int file)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
	return 1;
 80068ae:	2301      	movs	r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
	return 0;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068e0:	4a14      	ldr	r2, [pc, #80]	; (8006934 <_sbrk+0x5c>)
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <_sbrk+0x60>)
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <_sbrk+0x64>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068f4:	4b11      	ldr	r3, [pc, #68]	; (800693c <_sbrk+0x64>)
 80068f6:	4a12      	ldr	r2, [pc, #72]	; (8006940 <_sbrk+0x68>)
 80068f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <_sbrk+0x64>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4413      	add	r3, r2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d205      	bcs.n	8006914 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <_sbrk+0x6c>)
 800690a:	220c      	movs	r2, #12
 800690c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	e009      	b.n	8006928 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <_sbrk+0x64>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800691a:	4b08      	ldr	r3, [pc, #32]	; (800693c <_sbrk+0x64>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	4a06      	ldr	r2, [pc, #24]	; (800693c <_sbrk+0x64>)
 8006924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	4618      	mov	r0, r3
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	20020000 	.word	0x20020000
 8006938:	00000400 	.word	0x00000400
 800693c:	20000928 	.word	0x20000928
 8006940:	2000e198 	.word	0x2000e198
 8006944:	2000e190 	.word	0x2000e190

08006948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <SystemInit+0x20>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	4a05      	ldr	r2, [pc, #20]	; (8006968 <SystemInit+0x20>)
 8006954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000ed00 	.word	0xe000ed00

0800696c <Start_Timers>:

static Timer_Init_State Push_To_List(TON *timer);
static void UpdateTimer(TON *timer);

void Start_Timers(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <Start_Timers+0x10>)
 8006972:	f004 fcc1 	bl	800b2f8 <HAL_TIM_Base_Start_IT>

}
 8006976:	bf00      	nop
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	200071b8 	.word	0x200071b8

08006980 <Timer_Init>:

Timer_Init_State Timer_Init(TON *timer)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	return Push_To_List(timer);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f805 	bl	8006998 <Push_To_List>
 800698e:	4603      	mov	r3, r0

}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <Push_To_List>:

static Timer_Init_State Push_To_List(TON *timer)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	struct list_item *tmp, *top;
	tmp = malloc(sizeof(struct list_item));
 80069a0:	2008      	movs	r0, #8
 80069a2:	f017 fcd9 	bl	801e358 <malloc>
 80069a6:	4603      	mov	r3, r0
 80069a8:	60bb      	str	r3, [r7, #8]
	if(tmp == NULL)return TIMER_FAIL;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <Push_To_List+0x1c>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e01c      	b.n	80069ee <Push_To_List+0x56>
	tmp->next = NULL;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2200      	movs	r2, #0
 80069b8:	605a      	str	r2, [r3, #4]
	tmp->timer = timer;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]
	if(timers)
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <Push_To_List+0x60>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <Push_To_List+0x4e>
	{
		top = timers;
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <Push_To_List+0x60>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
		while(top->next)
 80069ce:	e002      	b.n	80069d6 <Push_To_List+0x3e>
		{
			top = top->next;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	60fb      	str	r3, [r7, #12]
		while(top->next)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f8      	bne.n	80069d0 <Push_To_List+0x38>
		}
		top->next = tmp;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	605a      	str	r2, [r3, #4]
 80069e4:	e002      	b.n	80069ec <Push_To_List+0x54>
	}
	else
	{
		timers = tmp;
 80069e6:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <Push_To_List+0x60>)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6013      	str	r3, [r2, #0]
	}
	return TIMER_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	2000092c 	.word	0x2000092c

080069fc <UpdateTimers>:

/*Функция обновления значений всех таймеров*/
void UpdateTimers()
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
	struct list_item *tmp = timers;
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <UpdateTimers+0x30>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	607b      	str	r3, [r7, #4]
	while(tmp)
 8006a08:	e007      	b.n	8006a1a <UpdateTimers+0x1e>
	{
		UpdateTimer(tmp->timer);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f80e 	bl	8006a30 <UpdateTimer>
		tmp = tmp->next;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	607b      	str	r3, [r7, #4]
	while(tmp)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f4      	bne.n	8006a0a <UpdateTimers+0xe>
	}
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	2000092c 	.word	0x2000092c

08006a30 <UpdateTimer>:

/*Функция обновления значений одного таймера*/
static void UpdateTimer(TON *timer)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	if(timer->IN)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7a1b      	ldrb	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <UpdateTimer+0x2e>
	{
		timer->ET = timer->ET < timer->SV ? timer->ET+1 : timer->ET;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d203      	bcs.n	8006a54 <UpdateTimer+0x24>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	3301      	adds	r3, #1
 8006a52:	e001      	b.n	8006a58 <UpdateTimer+0x28>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6053      	str	r3, [r2, #4]
 8006a5c:	e002      	b.n	8006a64 <UpdateTimer+0x34>
	}
	else
	{
		timer->ET = 0;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	605a      	str	r2, [r3, #4]
	}
	timer->OUT = timer->ET == timer->SV;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	725a      	strb	r2, [r3, #9]
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <uart_thread>:
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);



void uart_thread(void *argument)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	RsReInit();
 8006a90:	f000 f958 	bl	8006d44 <RsReInit>
	StartReciveUartAll();
 8006a94:	f000 f82c 	bl	8006af0 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 8006a98:	4b14      	ldr	r3, [pc, #80]	; (8006aec <uart_thread+0x64>)
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f007 fc83 	bl	800e3b0 <osMailGet>
		if(event.status == osEventMail)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d1f3      	bne.n	8006a98 <uart_thread+0x10>
		{
			int result = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8006ab8:	69b8      	ldr	r0, [r7, #24]
 8006aba:	f000 f8c5 	bl	8006c48 <RecognizePacket>
 8006abe:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <uart_thread+0x50>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	68d8      	ldr	r0, [r3, #12]
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	b292      	uxth	r2, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f000 f90e 	bl	8006cf4 <Transmit>
			StartReceive(1);
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f000 f81d 	bl	8006b18 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 8006ade:	4b03      	ldr	r3, [pc, #12]	; (8006aec <uart_thread+0x64>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69b9      	ldr	r1, [r7, #24]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f007 fcd7 	bl	800e498 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 8006aea:	e7d5      	b.n	8006a98 <uart_thread+0x10>
 8006aec:	2000702c 	.word	0x2000702c

08006af0 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 8006af6:	2300      	movs	r3, #0
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	e005      	b.n	8006b08 <StartReciveUartAll+0x18>
		StartReceive(i);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f80b 	bl	8006b18 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3301      	adds	r3, #1
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	ddf6      	ble.n	8006afc <StartReciveUartAll+0xc>
	}
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <StartReceive>:


static void StartReceive(int index)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	switch (index) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <StartReceive+0x16>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d016      	beq.n	8006b5a <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8006b2c:	e02e      	b.n	8006b8c <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 8006b2e:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <StartReceive+0x7c>)
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d124      	bne.n	8006b86 <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8006b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b40:	4915      	ldr	r1, [pc, #84]	; (8006b98 <StartReceive+0x80>)
 8006b42:	4814      	ldr	r0, [pc, #80]	; (8006b94 <StartReceive+0x7c>)
 8006b44:	f005 f918 	bl	800bd78 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8006b48:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <StartReceive+0x84>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <StartReceive+0x84>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0208 	bic.w	r2, r2, #8
 8006b56:	601a      	str	r2, [r3, #0]
			break;
 8006b58:	e015      	b.n	8006b86 <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 8006b5a:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <StartReceive+0x88>)
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d110      	bne.n	8006b8a <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 8006b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b6c:	490d      	ldr	r1, [pc, #52]	; (8006ba4 <StartReceive+0x8c>)
 8006b6e:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <StartReceive+0x88>)
 8006b70:	f005 f902 	bl	800bd78 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <StartReceive+0x90>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <StartReceive+0x90>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0208 	bic.w	r2, r2, #8
 8006b82:	601a      	str	r2, [r3, #0]
			break;
 8006b84:	e001      	b.n	8006b8a <StartReceive+0x72>
			break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <StartReceive+0x74>
			break;
 8006b8a:	bf00      	nop
	}
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20007348 	.word	0x20007348
 8006b98:	200075d8 	.word	0x200075d8
 8006b9c:	200072e8 	.word	0x200072e8
 8006ba0:	200073f0 	.word	0x200073f0
 8006ba4:	200076d8 	.word	0x200076d8
 8006ba8:	20007158 	.word	0x20007158

08006bac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <HAL_UARTEx_RxEventCallback+0x84>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d105      	bne.n	8006bd6 <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 8006bca:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <HAL_UARTEx_RxEventCallback+0x88>)
 8006bcc:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8006bce:	2000      	movs	r0, #0
 8006bd0:	f7ff ffa2 	bl	8006b18 <StartReceive>
 8006bd4:	e008      	b.n	8006be8 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <HAL_UARTEx_RxEventCallback+0x8c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d120      	bne.n	8006c22 <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8006be0:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <HAL_UARTEx_RxEventCallback+0x90>)
 8006be2:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 8006be4:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <HAL_UARTEx_RxEventCallback+0x94>)
 8006be6:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 8006be8:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <HAL_UARTEx_RxEventCallback+0x98>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f007 fb8a 	bl	800e308 <osMailAlloc>
 8006bf4:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d014      	beq.n	8006c26 <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	887a      	ldrh	r2, [r7, #2]
 8006c00:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_UARTEx_RxEventCallback+0x98>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68f9      	ldr	r1, [r7, #12]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f007 fb8a 	bl	800e334 <osMailPut>
 8006c20:	e002      	b.n	8006c28 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 8006c26:	bf00      	nop
}
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40011000 	.word	0x40011000
 8006c34:	200075d8 	.word	0x200075d8
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	200076d8 	.word	0x200076d8
 8006c40:	200077d8 	.word	0x200077d8
 8006c44:	2000702c 	.word	0x2000702c

08006c48 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	int result = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <RecognizePacket+0x18>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e03e      	b.n	8006cde <RecognizePacket+0x96>
	if(request->huart->Instance==USART1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a20      	ldr	r2, [pc, #128]	; (8006ce8 <RecognizePacket+0xa0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d121      	bne.n	8006cb0 <RecognizePacket+0x68>
	{
		float analog = 0;
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	891b      	ldrh	r3, [r3, #8]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d118      	bne.n	8006cac <RecognizePacket+0x64>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b0a      	cmp	r3, #10
 8006c82:	d113      	bne.n	8006cac <RecognizePacket+0x64>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3305      	adds	r3, #5
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b0d      	cmp	r3, #13
 8006c8e:	d10d      	bne.n	8006cac <RecognizePacket+0x64>
		{
			memcpy(&analog,(request->input_pointer)+1,sizeof(float));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60bb      	str	r3, [r7, #8]
			meas_data.analog_input = analog * 10;
 8006c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ca6:	4b11      	ldr	r3, [pc, #68]	; (8006cec <RecognizePacket+0xa4>)
 8006ca8:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		return 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e016      	b.n	8006cde <RecognizePacket+0x96>
	}
	else if (request->huart->Instance==USART6) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <RecognizePacket+0xa8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10f      	bne.n	8006cdc <RecognizePacket+0x94>
		if(request->output_pointer == NULL)return 0;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <RecognizePacket+0x80>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e00a      	b.n	8006cde <RecognizePacket+0x96>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8919      	ldrh	r1, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f7fd ffc3 	bl	8004c60 <ModbusParse>
 8006cda:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40011000 	.word	0x40011000
 8006cec:	2000751c 	.word	0x2000751c
 8006cf0:	40011400 	.word	0x40011400

08006cf4 <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <Transmit+0x48>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d112      	bne.n	8006d32 <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d12:	480b      	ldr	r0, [pc, #44]	; (8006d40 <Transmit+0x4c>)
 8006d14:	f002 ff94 	bl	8009c40 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 8006d18:	88fa      	ldrh	r2, [r7, #6]
 8006d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f004 ff97 	bl	800bc54 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 8006d26:	2200      	movs	r2, #0
 8006d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d2c:	4804      	ldr	r0, [pc, #16]	; (8006d40 <Transmit+0x4c>)
 8006d2e:	f002 ff87 	bl	8009c40 <HAL_GPIO_WritePin>

	}
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40011400 	.word	0x40011400
 8006d40:	40020800 	.word	0x40020800

08006d44 <RsReInit>:

int RsReInit (void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
	int result = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	607b      	str	r3, [r7, #4]
	result = HAL_UART_DeInit(&huart1);
 8006d4e:	4823      	ldr	r0, [pc, #140]	; (8006ddc <RsReInit+0x98>)
 8006d50:	f004 ff51 	bl	800bbf6 <HAL_UART_DeInit>
 8006d54:	4603      	mov	r3, r0
 8006d56:	607b      	str	r3, [r7, #4]
	if (result == HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d138      	bne.n	8006dd0 <RsReInit+0x8c>
	{
		uint32_t parity = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	603b      	str	r3, [r7, #0]
		switch (settings.retain.rs_sett.parity) {
 8006d62:	4b1f      	ldr	r3, [pc, #124]	; (8006de0 <RsReInit+0x9c>)
 8006d64:	8b1b      	ldrh	r3, [r3, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <RsReInit+0x2c>
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d003      	beq.n	8006d76 <RsReInit+0x32>
 8006d6e:	e006      	b.n	8006d7e <RsReInit+0x3a>
			case 0:
				parity = UART_PARITY_NONE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	603b      	str	r3, [r7, #0]
				break;
 8006d74:	e007      	b.n	8006d86 <RsReInit+0x42>
			case 1:
				parity = UART_PARITY_EVEN;
 8006d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7a:	603b      	str	r3, [r7, #0]
				break;
 8006d7c:	e003      	b.n	8006d86 <RsReInit+0x42>
			default:
				parity = UART_PARITY_ODD;
 8006d7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006d82:	603b      	str	r3, [r7, #0]
				break;
 8006d84:	bf00      	nop
		}
		huart6.Instance = USART6;
 8006d86:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <RsReInit+0xa0>)
 8006d88:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <RsReInit+0xa4>)
 8006d8a:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = settings.retain.rs_sett.baudrate>0 ? settings.retain.rs_sett.baudrate : 9600;
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <RsReInit+0x9c>)
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <RsReInit+0x56>
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <RsReInit+0x9c>)
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	e001      	b.n	8006d9e <RsReInit+0x5a>
 8006d9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <RsReInit+0xa0>)
 8006da0:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <RsReInit+0xa0>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <RsReInit+0xa0>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = parity;
 8006dae:	4a0d      	ldr	r2, [pc, #52]	; (8006de4 <RsReInit+0xa0>)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	6113      	str	r3, [r2, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 8006db4:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <RsReInit+0xa0>)
 8006db6:	220c      	movs	r2, #12
 8006db8:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <RsReInit+0xa0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <RsReInit+0xa0>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	61da      	str	r2, [r3, #28]
		result = HAL_UART_Init(&huart6);
 8006dc6:	4807      	ldr	r0, [pc, #28]	; (8006de4 <RsReInit+0xa0>)
 8006dc8:	f004 fec8 	bl	800bb5c <HAL_UART_Init>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	607b      	str	r3, [r7, #4]
	}
  return result;
 8006dd0:	687b      	ldr	r3, [r7, #4]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20007348 	.word	0x20007348
 8006de0:	20007474 	.word	0x20007474
 8006de4:	200073f0 	.word	0x200073f0
 8006de8:	40011400 	.word	0x40011400

08006dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006df0:	480d      	ldr	r0, [pc, #52]	; (8006e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006df2:	490e      	ldr	r1, [pc, #56]	; (8006e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006df4:	4a0e      	ldr	r2, [pc, #56]	; (8006e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006df8:	e002      	b.n	8006e00 <LoopCopyDataInit>

08006dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dfe:	3304      	adds	r3, #4

08006e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e04:	d3f9      	bcc.n	8006dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e06:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006e08:	4c0b      	ldr	r4, [pc, #44]	; (8006e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e0c:	e001      	b.n	8006e12 <LoopFillZerobss>

08006e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e10:	3204      	adds	r2, #4

08006e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e14:	d3fb      	bcc.n	8006e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e16:	f7ff fd97 	bl	8006948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e1a:	f017 fa79 	bl	801e310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e1e:	f7fd faf1 	bl	8004404 <main>
  bx  lr    
 8006e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e2c:	2000058c 	.word	0x2000058c
  ldr r2, =_sidata
 8006e30:	080274f8 	.word	0x080274f8
  ldr r2, =_sbss
 8006e34:	2000058c 	.word	0x2000058c
  ldr r4, =_ebss
 8006e38:	2000e194 	.word	0x2000e194

08006e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e3c:	e7fe      	b.n	8006e3c <ADC_IRQHandler>

08006e3e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006e4c:	b672      	cpsid	i
}
 8006e4e:	bf00      	nop
 8006e50:	f7fd fec4 	bl	8004bdc <Error_Handler>
 8006e54:	e7fe      	b.n	8006e54 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e007      	b.n	8006e6c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	2100      	movs	r1, #0
 8006e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d9f4      	bls.n	8006e5c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	721a      	strb	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d104      	bne.n	8006e98 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006e8e:	b672      	cpsid	i
}
 8006e90:	bf00      	nop
 8006e92:	f7fd fea3 	bl	8004bdc <Error_Handler>
 8006e96:	e7fe      	b.n	8006e96 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7a1b      	ldrb	r3, [r3, #8]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d904      	bls.n	8006eaa <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8006ea0:	b672      	cpsid	i
}
 8006ea2:	bf00      	nop
 8006ea4:	f7fd fe9a 	bl	8004bdc <Error_Handler>
 8006ea8:	e7fe      	b.n	8006ea8 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7a1b      	ldrb	r3, [r3, #8]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	b2d1      	uxtb	r1, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	7211      	strb	r1, [r2, #8]
 8006eb6:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006eb8:	f3ef 8211 	mrs	r2, BASEPRI
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fa      	str	r2, [r7, #12]
 8006ece:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006eee:	b672      	cpsid	i
}
 8006ef0:	bf00      	nop
 8006ef2:	f7fd fe73 	bl	8004bdc <Error_Handler>
 8006ef6:	e7fe      	b.n	8006ef6 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7a1b      	ldrb	r3, [r3, #8]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7a1b      	ldrb	r3, [r3, #8]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d904      	bls.n	8006f16 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f0c:	b672      	cpsid	i
}
 8006f0e:	bf00      	nop
 8006f10:	f7fd fe64 	bl	8004bdc <Error_Handler>
 8006f14:	e7fe      	b.n	8006f14 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7a1b      	ldrb	r3, [r3, #8]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f2a:	bf00      	nop
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8006f42:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <__retarget_lock_init_recursive+0x48>)
 8006f44:	2216      	movs	r2, #22
 8006f46:	601a      	str	r2, [r3, #0]
    return;
 8006f48:	e015      	b.n	8006f76 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8006f4a:	200c      	movs	r0, #12
 8006f4c:	f017 fa04 	bl	801e358 <malloc>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ff6a 	bl	8006e3e <stm32_lock_init>
    return;
 8006f6a:	e004      	b.n	8006f76 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f6c:	b672      	cpsid	i
}
 8006f6e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8006f70:	f7fd fe34 	bl	8004bdc <Error_Handler>
 8006f74:	e7fe      	b.n	8006f74 <__retarget_lock_init_recursive+0x40>
}
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	2000e190 	.word	0x2000e190

08006f80 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f8e:	b672      	cpsid	i
}
 8006f90:	bf00      	nop
 8006f92:	f7fd fe23 	bl	8004bdc <Error_Handler>
 8006f96:	e7fe      	b.n	8006f96 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff ff70 	bl	8006e80 <stm32_lock_acquire>
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006fb6:	b672      	cpsid	i
}
 8006fb8:	bf00      	nop
 8006fba:	f7fd fe0f 	bl	8004bdc <Error_Handler>
 8006fbe:	e7fe      	b.n	8006fbe <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff ff8c 	bl	8006ee0 <stm32_lock_release>
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <HAL_Init+0x40>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0d      	ldr	r2, [pc, #52]	; (8007010 <HAL_Init+0x40>)
 8006fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <HAL_Init+0x40>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <HAL_Init+0x40>)
 8006fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <HAL_Init+0x40>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a07      	ldr	r2, [pc, #28]	; (8007010 <HAL_Init+0x40>)
 8006ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ff8:	2003      	movs	r0, #3
 8006ffa:	f000 fd28 	bl	8007a4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ffe:	200f      	movs	r0, #15
 8007000:	f7ff fb16 	bl	8006630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007004:	f7ff f89a 	bl	800613c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40023c00 	.word	0x40023c00

08007014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_IncTick+0x20>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	4b06      	ldr	r3, [pc, #24]	; (8007038 <HAL_IncTick+0x24>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4413      	add	r3, r2
 8007024:	4a04      	ldr	r2, [pc, #16]	; (8007038 <HAL_IncTick+0x24>)
 8007026:	6013      	str	r3, [r2, #0]
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	200003a4 	.word	0x200003a4
 8007038:	200078d8 	.word	0x200078d8

0800703c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  return uwTick;
 8007040:	4b03      	ldr	r3, [pc, #12]	; (8007050 <HAL_GetTick+0x14>)
 8007042:	681b      	ldr	r3, [r3, #0]
}
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200078d8 	.word	0x200078d8

08007054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800705c:	f7ff ffee 	bl	800703c <HAL_GetTick>
 8007060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d005      	beq.n	800707a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <HAL_Delay+0x44>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800707a:	bf00      	nop
 800707c:	f7ff ffde 	bl	800703c <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d8f7      	bhi.n	800707c <HAL_Delay+0x28>
  {
  }
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200003a4 	.word	0x200003a4

0800709c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e033      	b.n	800711a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff f86a 	bl	8006194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d118      	bne.n	800710c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80070e2:	f023 0302 	bic.w	r3, r3, #2
 80070e6:	f043 0202 	orr.w	r2, r3, #2
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa5e 	bl	80075b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
 800710a:	e001      	b.n	8007110 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_ADC_Start_DMA+0x1e>
 800713e:	2302      	movs	r3, #2
 8007140:	e0e9      	b.n	8007316 <HAL_ADC_Start_DMA+0x1f2>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	d018      	beq.n	800718a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007168:	4b6d      	ldr	r3, [pc, #436]	; (8007320 <HAL_ADC_Start_DMA+0x1fc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a6d      	ldr	r2, [pc, #436]	; (8007324 <HAL_ADC_Start_DMA+0x200>)
 800716e:	fba2 2303 	umull	r2, r3, r2, r3
 8007172:	0c9a      	lsrs	r2, r3, #18
 8007174:	4613      	mov	r3, r2
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	4413      	add	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800717c:	e002      	b.n	8007184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3b01      	subs	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f9      	bne.n	800717e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007198:	d107      	bne.n	80071aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f040 80a1 	bne.w	80072fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d007      	beq.n	80071ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80071e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d106      	bne.n	8007208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	f023 0206 	bic.w	r2, r3, #6
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	645a      	str	r2, [r3, #68]	; 0x44
 8007206:	e002      	b.n	800720e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007216:	4b44      	ldr	r3, [pc, #272]	; (8007328 <HAL_ADC_Start_DMA+0x204>)
 8007218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	4a43      	ldr	r2, [pc, #268]	; (800732c <HAL_ADC_Start_DMA+0x208>)
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	4a42      	ldr	r2, [pc, #264]	; (8007330 <HAL_ADC_Start_DMA+0x20c>)
 8007228:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	4a41      	ldr	r2, [pc, #260]	; (8007334 <HAL_ADC_Start_DMA+0x210>)
 8007230:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800723a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800724a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	334c      	adds	r3, #76	; 0x4c
 8007266:	4619      	mov	r1, r3
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f000 fd3e 	bl	8007cec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	2b00      	cmp	r3, #0
 800727a:	d12a      	bne.n	80072d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2d      	ldr	r2, [pc, #180]	; (8007338 <HAL_ADC_Start_DMA+0x214>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d015      	beq.n	80072b2 <HAL_ADC_Start_DMA+0x18e>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2c      	ldr	r2, [pc, #176]	; (800733c <HAL_ADC_Start_DMA+0x218>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d105      	bne.n	800729c <HAL_ADC_Start_DMA+0x178>
 8007290:	4b25      	ldr	r3, [pc, #148]	; (8007328 <HAL_ADC_Start_DMA+0x204>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a27      	ldr	r2, [pc, #156]	; (8007340 <HAL_ADC_Start_DMA+0x21c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d136      	bne.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
 80072a6:	4b20      	ldr	r3, [pc, #128]	; (8007328 <HAL_ADC_Start_DMA+0x204>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d130      	bne.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d129      	bne.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072ce:	609a      	str	r2, [r3, #8]
 80072d0:	e020      	b.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	; (8007338 <HAL_ADC_Start_DMA+0x214>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d11b      	bne.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d114      	bne.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072f8:	609a      	str	r2, [r3, #8]
 80072fa:	e00b      	b.n	8007314 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f043 0210 	orr.w	r2, r3, #16
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730c:	f043 0201 	orr.w	r2, r3, #1
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000039c 	.word	0x2000039c
 8007324:	431bde83 	.word	0x431bde83
 8007328:	40012300 	.word	0x40012300
 800732c:	080077a9 	.word	0x080077a9
 8007330:	08007863 	.word	0x08007863
 8007334:	0800787f 	.word	0x0800787f
 8007338:	40012000 	.word	0x40012000
 800733c:	40012100 	.word	0x40012100
 8007340:	40012200 	.word	0x40012200

08007344 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_ADC_ConfigChannel+0x1c>
 8007384:	2302      	movs	r3, #2
 8007386:	e105      	b.n	8007594 <HAL_ADC_ConfigChannel+0x228>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b09      	cmp	r3, #9
 8007396:	d925      	bls.n	80073e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68d9      	ldr	r1, [r3, #12]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	3b1e      	subs	r3, #30
 80073ae:	2207      	movs	r2, #7
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43da      	mvns	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	400a      	ands	r2, r1
 80073bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68d9      	ldr	r1, [r3, #12]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	4618      	mov	r0, r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4403      	add	r3, r0
 80073d6:	3b1e      	subs	r3, #30
 80073d8:	409a      	lsls	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	60da      	str	r2, [r3, #12]
 80073e2:	e022      	b.n	800742a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6919      	ldr	r1, [r3, #16]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	2207      	movs	r2, #7
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43da      	mvns	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	400a      	ands	r2, r1
 8007406:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6919      	ldr	r1, [r3, #16]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	4618      	mov	r0, r3
 800741a:	4603      	mov	r3, r0
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4403      	add	r3, r0
 8007420:	409a      	lsls	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b06      	cmp	r3, #6
 8007430:	d824      	bhi.n	800747c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	3b05      	subs	r3, #5
 8007444:	221f      	movs	r2, #31
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43da      	mvns	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	400a      	ands	r2, r1
 8007452:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	4618      	mov	r0, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	3b05      	subs	r3, #5
 800746e:	fa00 f203 	lsl.w	r2, r0, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	635a      	str	r2, [r3, #52]	; 0x34
 800747a:	e04c      	b.n	8007516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b0c      	cmp	r3, #12
 8007482:	d824      	bhi.n	80074ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	3b23      	subs	r3, #35	; 0x23
 8007496:	221f      	movs	r2, #31
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	43da      	mvns	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	400a      	ands	r2, r1
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4618      	mov	r0, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	3b23      	subs	r3, #35	; 0x23
 80074c0:	fa00 f203 	lsl.w	r2, r0, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
 80074cc:	e023      	b.n	8007516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	3b41      	subs	r3, #65	; 0x41
 80074e0:	221f      	movs	r2, #31
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	43da      	mvns	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	400a      	ands	r2, r1
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	4618      	mov	r0, r3
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	3b41      	subs	r3, #65	; 0x41
 800750a:	fa00 f203 	lsl.w	r2, r0, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007516:	4b22      	ldr	r3, [pc, #136]	; (80075a0 <HAL_ADC_ConfigChannel+0x234>)
 8007518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a21      	ldr	r2, [pc, #132]	; (80075a4 <HAL_ADC_ConfigChannel+0x238>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d109      	bne.n	8007538 <HAL_ADC_ConfigChannel+0x1cc>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b12      	cmp	r3, #18
 800752a:	d105      	bne.n	8007538 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <HAL_ADC_ConfigChannel+0x238>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d123      	bne.n	800758a <HAL_ADC_ConfigChannel+0x21e>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b10      	cmp	r3, #16
 8007548:	d003      	beq.n	8007552 <HAL_ADC_ConfigChannel+0x1e6>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b11      	cmp	r3, #17
 8007550:	d11b      	bne.n	800758a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b10      	cmp	r3, #16
 8007564:	d111      	bne.n	800758a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <HAL_ADC_ConfigChannel+0x23c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a10      	ldr	r2, [pc, #64]	; (80075ac <HAL_ADC_ConfigChannel+0x240>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	0c9a      	lsrs	r2, r3, #18
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800757c:	e002      	b.n	8007584 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f9      	bne.n	800757e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40012300 	.word	0x40012300
 80075a4:	40012000 	.word	0x40012000
 80075a8:	2000039c 	.word	0x2000039c
 80075ac:	431bde83 	.word	0x431bde83

080075b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075b8:	4b79      	ldr	r3, [pc, #484]	; (80077a0 <ADC_Init+0x1f0>)
 80075ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	021a      	lsls	r2, r3, #8
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800762a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6899      	ldr	r1, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	4a58      	ldr	r2, [pc, #352]	; (80077a4 <ADC_Init+0x1f4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d022      	beq.n	800768e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6899      	ldr	r1, [r3, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6899      	ldr	r1, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]
 800768c:	e00f      	b.n	80076ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800769c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0202 	bic.w	r2, r2, #2
 80076bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6899      	ldr	r1, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7e1b      	ldrb	r3, [r3, #24]
 80076c8:	005a      	lsls	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01b      	beq.n	8007714 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80076fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	3b01      	subs	r3, #1
 8007708:	035a      	lsls	r2, r3, #13
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	e007      	b.n	8007724 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007722:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	3b01      	subs	r3, #1
 8007740:	051a      	lsls	r2, r3, #20
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6899      	ldr	r1, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007766:	025a      	lsls	r2, r3, #9
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6899      	ldr	r1, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	029a      	lsls	r2, r3, #10
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	609a      	str	r2, [r3, #8]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	40012300 	.word	0x40012300
 80077a4:	0f000001 	.word	0x0f000001

080077a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d13c      	bne.n	800783c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d12b      	bne.n	8007834 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d127      	bne.n	8007834 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d119      	bne.n	8007834 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0220 	bic.w	r2, r2, #32
 800780e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d105      	bne.n	8007834 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	f043 0201 	orr.w	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7f9 fc2b 	bl	8001090 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800783a:	e00e      	b.n	800785a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff fd85 	bl	8007358 <HAL_ADC_ErrorCallback>
}
 800784e:	e004      	b.n	800785a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fd67 	bl	8007344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2240      	movs	r2, #64	; 0x40
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff fd5a 	bl	8007358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <__NVIC_SetPriorityGrouping+0x44>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078c8:	4013      	ands	r3, r2
 80078ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078de:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <__NVIC_SetPriorityGrouping+0x44>)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	60d3      	str	r3, [r2, #12]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	e000ed00 	.word	0xe000ed00

080078f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <__NVIC_GetPriorityGrouping+0x18>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	0a1b      	lsrs	r3, r3, #8
 80078fe:	f003 0307 	and.w	r3, r3, #7
}
 8007902:	4618      	mov	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	e000ed00 	.word	0xe000ed00

08007910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800791a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800791e:	2b00      	cmp	r3, #0
 8007920:	db0b      	blt.n	800793a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	f003 021f 	and.w	r2, r3, #31
 8007928:	4907      	ldr	r1, [pc, #28]	; (8007948 <__NVIC_EnableIRQ+0x38>)
 800792a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	2001      	movs	r0, #1
 8007932:	fa00 f202 	lsl.w	r2, r0, r2
 8007936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	e000e100 	.word	0xe000e100

0800794c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	db12      	blt.n	8007984 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	f003 021f 	and.w	r2, r3, #31
 8007964:	490a      	ldr	r1, [pc, #40]	; (8007990 <__NVIC_DisableIRQ+0x44>)
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	2001      	movs	r0, #1
 800796e:	fa00 f202 	lsl.w	r2, r0, r2
 8007972:	3320      	adds	r3, #32
 8007974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007978:	f3bf 8f4f 	dsb	sy
}
 800797c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800797e:	f3bf 8f6f 	isb	sy
}
 8007982:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	e000e100 	.word	0xe000e100

08007994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	db0a      	blt.n	80079be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	490c      	ldr	r1, [pc, #48]	; (80079e0 <__NVIC_SetPriority+0x4c>)
 80079ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b2:	0112      	lsls	r2, r2, #4
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	440b      	add	r3, r1
 80079b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079bc:	e00a      	b.n	80079d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4908      	ldr	r1, [pc, #32]	; (80079e4 <__NVIC_SetPriority+0x50>)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	3b04      	subs	r3, #4
 80079cc:	0112      	lsls	r2, r2, #4
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	440b      	add	r3, r1
 80079d2:	761a      	strb	r2, [r3, #24]
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	e000e100 	.word	0xe000e100
 80079e4:	e000ed00 	.word	0xe000ed00

080079e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f1c3 0307 	rsb	r3, r3, #7
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	bf28      	it	cs
 8007a06:	2304      	movcs	r3, #4
 8007a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d902      	bls.n	8007a18 <NVIC_EncodePriority+0x30>
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	3b03      	subs	r3, #3
 8007a16:	e000      	b.n	8007a1a <NVIC_EncodePriority+0x32>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43da      	mvns	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a30:	f04f 31ff 	mov.w	r1, #4294967295
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3a:	43d9      	mvns	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a40:	4313      	orrs	r3, r2
         );
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3724      	adds	r7, #36	; 0x24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff ff28 	bl	80078ac <__NVIC_SetPriorityGrouping>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a76:	f7ff ff3d 	bl	80078f4 <__NVIC_GetPriorityGrouping>
 8007a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	6978      	ldr	r0, [r7, #20]
 8007a82:	f7ff ffb1 	bl	80079e8 <NVIC_EncodePriority>
 8007a86:	4602      	mov	r2, r0
 8007a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff ff80 	bl	8007994 <__NVIC_SetPriority>
}
 8007a94:	bf00      	nop
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff ff30 	bl	8007910 <__NVIC_EnableIRQ>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff ff40 	bl	800794c <__NVIC_DisableIRQ>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ae0:	f7ff faac 	bl	800703c <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e099      	b.n	8007c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0201 	bic.w	r2, r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b10:	e00f      	b.n	8007b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b12:	f7ff fa93 	bl	800703c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d908      	bls.n	8007b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2203      	movs	r2, #3
 8007b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e078      	b.n	8007c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e8      	bne.n	8007b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4b38      	ldr	r3, [pc, #224]	; (8007c2c <HAL_DMA_Init+0x158>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d107      	bne.n	8007b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	4313      	orrs	r3, r2
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d117      	bne.n	8007bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00e      	beq.n	8007bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fb5f 	bl	800829c <DMA_CheckFifoParam>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e016      	b.n	8007c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fb16 	bl	8008230 <DMA_CalcBaseAndBitshift>
 8007c04:	4603      	mov	r3, r0
 8007c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	223f      	movs	r2, #63	; 0x3f
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	f010803f 	.word	0xf010803f

08007c30 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e050      	b.n	8007ce4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d101      	bne.n	8007c52 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e048      	b.n	8007ce4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0201 	bic.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2221      	movs	r2, #33	; 0x21
 8007c90:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 facc 	bl	8008230 <DMA_CalcBaseAndBitshift>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc4:	223f      	movs	r2, #63	; 0x3f
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_DMA_Start_IT+0x26>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e040      	b.n	8007d94 <HAL_DMA_Start_IT+0xa8>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d12f      	bne.n	8007d86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68b9      	ldr	r1, [r7, #8]
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fa4a 	bl	80081d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d44:	223f      	movs	r2, #63	; 0x3f
 8007d46:	409a      	lsls	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0216 	orr.w	r2, r2, #22
 8007d5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0208 	orr.w	r2, r2, #8
 8007d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e005      	b.n	8007d92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007daa:	f7ff f947 	bl	800703c <HAL_GetTick>
 8007dae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d008      	beq.n	8007dce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2280      	movs	r2, #128	; 0x80
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e052      	b.n	8007e74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0216 	bic.w	r2, r2, #22
 8007ddc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695a      	ldr	r2, [r3, #20]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <HAL_DMA_Abort+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0208 	bic.w	r2, r2, #8
 8007e0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0201 	bic.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e1e:	e013      	b.n	8007e48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e20:	f7ff f90c 	bl	800703c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d90c      	bls.n	8007e48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2203      	movs	r2, #3
 8007e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e015      	b.n	8007e74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e4      	bne.n	8007e20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5a:	223f      	movs	r2, #63	; 0x3f
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d004      	beq.n	8007e9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2280      	movs	r2, #128	; 0x80
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e00c      	b.n	8007eb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2205      	movs	r2, #5
 8007e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0201 	bic.w	r2, r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ecc:	4b92      	ldr	r3, [pc, #584]	; (8008118 <HAL_DMA_IRQHandler+0x258>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a92      	ldr	r2, [pc, #584]	; (800811c <HAL_DMA_IRQHandler+0x25c>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	0a9b      	lsrs	r3, r3, #10
 8007ed8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eea:	2208      	movs	r2, #8
 8007eec:	409a      	lsls	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01a      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d013      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0204 	bic.w	r2, r2, #4
 8007f12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	2208      	movs	r2, #8
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f24:	f043 0201 	orr.w	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f30:	2201      	movs	r2, #1
 8007f32:	409a      	lsls	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4013      	ands	r3, r2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d012      	beq.n	8007f62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4e:	2201      	movs	r2, #1
 8007f50:	409a      	lsls	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	f043 0202 	orr.w	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f66:	2204      	movs	r2, #4
 8007f68:	409a      	lsls	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f84:	2204      	movs	r2, #4
 8007f86:	409a      	lsls	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	f043 0204 	orr.w	r2, r3, #4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f9c:	2210      	movs	r2, #16
 8007f9e:	409a      	lsls	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d043      	beq.n	8008030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d03c      	beq.n	8008030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fba:	2210      	movs	r2, #16
 8007fbc:	409a      	lsls	r2, r3
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d018      	beq.n	8008002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d108      	bne.n	8007ff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d024      	beq.n	8008030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	e01f      	b.n	8008030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	e016      	b.n	8008030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d107      	bne.n	8008020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0208 	bic.w	r2, r2, #8
 800801e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008034:	2220      	movs	r2, #32
 8008036:	409a      	lsls	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 808e 	beq.w	800815e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8086 	beq.w	800815e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	2220      	movs	r2, #32
 8008058:	409a      	lsls	r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b05      	cmp	r3, #5
 8008068:	d136      	bne.n	80080d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0216 	bic.w	r2, r2, #22
 8008078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <HAL_DMA_IRQHandler+0x1da>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0208 	bic.w	r2, r2, #8
 80080a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ae:	223f      	movs	r2, #63	; 0x3f
 80080b0:	409a      	lsls	r2, r3
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d07d      	beq.n	80081ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
        }
        return;
 80080d6:	e078      	b.n	80081ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01c      	beq.n	8008120 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d108      	bne.n	8008106 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d030      	beq.n	800815e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
 8008104:	e02b      	b.n	800815e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d027      	beq.n	800815e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
 8008116:	e022      	b.n	800815e <HAL_DMA_IRQHandler+0x29e>
 8008118:	2000039c 	.word	0x2000039c
 800811c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10f      	bne.n	800814e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0210 	bic.w	r2, r2, #16
 800813c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008162:	2b00      	cmp	r3, #0
 8008164:	d032      	beq.n	80081cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d022      	beq.n	80081b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2205      	movs	r2, #5
 8008176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	3301      	adds	r3, #1
 800818e:	60bb      	str	r3, [r7, #8]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	429a      	cmp	r2, r3
 8008194:	d307      	bcc.n	80081a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f2      	bne.n	800818a <HAL_DMA_IRQHandler+0x2ca>
 80081a4:	e000      	b.n	80081a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80081a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
 80081c8:	e000      	b.n	80081cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80081ca:	bf00      	nop
    }
  }
}
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d108      	bne.n	8008214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008212:	e007      	b.n	8008224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	60da      	str	r2, [r3, #12]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	3b10      	subs	r3, #16
 8008240:	4a14      	ldr	r2, [pc, #80]	; (8008294 <DMA_CalcBaseAndBitshift+0x64>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800824a:	4a13      	ldr	r2, [pc, #76]	; (8008298 <DMA_CalcBaseAndBitshift+0x68>)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d909      	bls.n	8008272 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	1d1a      	adds	r2, r3, #4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	659a      	str	r2, [r3, #88]	; 0x58
 8008270:	e007      	b.n	8008282 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	aaaaaaab 	.word	0xaaaaaaab
 8008298:	08026e84 	.word	0x08026e84

0800829c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d11f      	bne.n	80082f6 <DMA_CheckFifoParam+0x5a>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d856      	bhi.n	800836a <DMA_CheckFifoParam+0xce>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <DMA_CheckFifoParam+0x28>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082e7 	.word	0x080082e7
 80082cc:	080082d5 	.word	0x080082d5
 80082d0:	0800836b 	.word	0x0800836b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d046      	beq.n	800836e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082e4:	e043      	b.n	800836e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082ee:	d140      	bne.n	8008372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082f4:	e03d      	b.n	8008372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fe:	d121      	bne.n	8008344 <DMA_CheckFifoParam+0xa8>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b03      	cmp	r3, #3
 8008304:	d837      	bhi.n	8008376 <DMA_CheckFifoParam+0xda>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <DMA_CheckFifoParam+0x70>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	0800831d 	.word	0x0800831d
 8008310:	08008323 	.word	0x08008323
 8008314:	0800831d 	.word	0x0800831d
 8008318:	08008335 	.word	0x08008335
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
      break;
 8008320:	e030      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d025      	beq.n	800837a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008332:	e022      	b.n	800837a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800833c:	d11f      	bne.n	800837e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008342:	e01c      	b.n	800837e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d903      	bls.n	8008352 <DMA_CheckFifoParam+0xb6>
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b03      	cmp	r3, #3
 800834e:	d003      	beq.n	8008358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008350:	e018      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	73fb      	strb	r3, [r7, #15]
      break;
 8008356:	e015      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
      break;
 8008368:	e00b      	b.n	8008382 <DMA_CheckFifoParam+0xe6>
      break;
 800836a:	bf00      	nop
 800836c:	e00a      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      break;
 800836e:	bf00      	nop
 8008370:	e008      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      break;
 8008372:	bf00      	nop
 8008374:	e006      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      break;
 8008376:	bf00      	nop
 8008378:	e004      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      break;
 800837a:	bf00      	nop
 800837c:	e002      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      break;   
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <DMA_CheckFifoParam+0xe8>
      break;
 8008382:	bf00      	nop
    }
  } 
  
  return status; 
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop

08008394 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80083a4:	4baa      	ldr	r3, [pc, #680]	; (8008650 <HAL_ETH_Init+0x2bc>)
 80083a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80083ac:	2300      	movs	r3, #0
 80083ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e183      	b.n	80086c2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f004 ff8a 	bl	800d2e8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083d4:	2300      	movs	r3, #0
 80083d6:	60bb      	str	r3, [r7, #8]
 80083d8:	4b9e      	ldr	r3, [pc, #632]	; (8008654 <HAL_ETH_Init+0x2c0>)
 80083da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083dc:	4a9d      	ldr	r2, [pc, #628]	; (8008654 <HAL_ETH_Init+0x2c0>)
 80083de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083e2:	6453      	str	r3, [r2, #68]	; 0x44
 80083e4:	4b9b      	ldr	r3, [pc, #620]	; (8008654 <HAL_ETH_Init+0x2c0>)
 80083e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80083f0:	4b99      	ldr	r3, [pc, #612]	; (8008658 <HAL_ETH_Init+0x2c4>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4a98      	ldr	r2, [pc, #608]	; (8008658 <HAL_ETH_Init+0x2c4>)
 80083f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80083fc:	4b96      	ldr	r3, [pc, #600]	; (8008658 <HAL_ETH_Init+0x2c4>)
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	4994      	ldr	r1, [pc, #592]	; (8008658 <HAL_ETH_Init+0x2c4>)
 8008406:	4313      	orrs	r3, r2
 8008408:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008420:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008422:	f7fe fe0b 	bl	800703c <HAL_GetTick>
 8008426:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008428:	e011      	b.n	800844e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800842a:	f7fe fe07 	bl	800703c <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008438:	d909      	bls.n	800844e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2203      	movs	r2, #3
 800843e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e139      	b.n	80086c2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e4      	bne.n	800842a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f023 031c 	bic.w	r3, r3, #28
 800846e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008470:	f002 f87c 	bl	800a56c <HAL_RCC_GetHCLKFreq>
 8008474:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	4a78      	ldr	r2, [pc, #480]	; (800865c <HAL_ETH_Init+0x2c8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d908      	bls.n	8008490 <HAL_ETH_Init+0xfc>
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	4a77      	ldr	r2, [pc, #476]	; (8008660 <HAL_ETH_Init+0x2cc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d804      	bhi.n	8008490 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f043 0308 	orr.w	r3, r3, #8
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e027      	b.n	80084e0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	4a73      	ldr	r2, [pc, #460]	; (8008660 <HAL_ETH_Init+0x2cc>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d908      	bls.n	80084aa <HAL_ETH_Init+0x116>
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	4a6d      	ldr	r2, [pc, #436]	; (8008650 <HAL_ETH_Init+0x2bc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d204      	bcs.n	80084aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f043 030c 	orr.w	r3, r3, #12
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	e01a      	b.n	80084e0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	4a68      	ldr	r2, [pc, #416]	; (8008650 <HAL_ETH_Init+0x2bc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d303      	bcc.n	80084ba <HAL_ETH_Init+0x126>
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	4a6b      	ldr	r2, [pc, #428]	; (8008664 <HAL_ETH_Init+0x2d0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d911      	bls.n	80084de <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	4a69      	ldr	r2, [pc, #420]	; (8008664 <HAL_ETH_Init+0x2d0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d908      	bls.n	80084d4 <HAL_ETH_Init+0x140>
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	4a68      	ldr	r2, [pc, #416]	; (8008668 <HAL_ETH_Init+0x2d4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d804      	bhi.n	80084d4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f043 0304 	orr.w	r3, r3, #4
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	e005      	b.n	80084e0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f043 0310 	orr.w	r3, r3, #16
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	e000      	b.n	80084e0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80084de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80084e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084ec:	2100      	movs	r1, #0
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fc17 	bl	8008d22 <HAL_ETH_WritePHYRegister>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80084fe:	6939      	ldr	r1, [r7, #16]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fdcd 	bl	80090a0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e0d7      	b.n	80086c2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8008512:	20ff      	movs	r0, #255	; 0xff
 8008514:	f7fe fd9e 	bl	8007054 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80a5 	beq.w	800866c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008522:	f7fe fd8b 	bl	800703c <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008528:	f107 030c 	add.w	r3, r7, #12
 800852c:	461a      	mov	r2, r3
 800852e:	2101      	movs	r1, #1
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fb8e 	bl	8008c52 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008536:	f7fe fd81 	bl	800703c <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	f241 3288 	movw	r2, #5000	; 0x1388
 8008544:	4293      	cmp	r3, r2
 8008546:	d90f      	bls.n	8008568 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800854c:	6939      	ldr	r1, [r7, #16]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fda6 	bl	80090a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e0ac      	b.n	80086c2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0da      	beq.n	8008528 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008576:	2100      	movs	r1, #0
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fbd2 	bl	8008d22 <HAL_ETH_WritePHYRegister>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00b      	beq.n	800859c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008588:	6939      	ldr	r1, [r7, #16]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fd88 	bl	80090a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008598:	2301      	movs	r3, #1
 800859a:	e092      	b.n	80086c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800859c:	f7fe fd4e 	bl	800703c <HAL_GetTick>
 80085a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	461a      	mov	r2, r3
 80085a8:	2101      	movs	r1, #1
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fb51 	bl	8008c52 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80085b0:	f7fe fd44 	bl	800703c <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80085be:	4293      	cmp	r3, r2
 80085c0:	d90f      	bls.n	80085e2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80085c6:	6939      	ldr	r1, [r7, #16]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fd69 	bl	80090a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e06f      	b.n	80086c2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0da      	beq.n	80085a2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	461a      	mov	r2, r3
 80085f2:	2110      	movs	r1, #16
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb2c 	bl	8008c52 <HAL_ETH_ReadPHYRegister>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008604:	6939      	ldr	r1, [r7, #16]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fd4a 	bl	80090a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008614:	2301      	movs	r3, #1
 8008616:	e054      	b.n	80086c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 0304 	and.w	r3, r3, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	e002      	b.n	8008632 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	609a      	str	r2, [r3, #8]
 8008642:	e035      	b.n	80086b0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	e030      	b.n	80086b0 <HAL_ETH_Init+0x31c>
 800864e:	bf00      	nop
 8008650:	03938700 	.word	0x03938700
 8008654:	40023800 	.word	0x40023800
 8008658:	40013800 	.word	0x40013800
 800865c:	01312cff 	.word	0x01312cff
 8008660:	02160ebf 	.word	0x02160ebf
 8008664:	05f5e0ff 	.word	0x05f5e0ff
 8008668:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800867c:	4313      	orrs	r3, r2
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	2100      	movs	r1, #0
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb4c 	bl	8008d22 <HAL_ETH_WritePHYRegister>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008694:	6939      	ldr	r1, [r7, #16]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fd02 	bl	80090a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e00c      	b.n	80086c2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80086a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80086ac:	f7fe fcd2 	bl	8007054 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80086b0:	6939      	ldr	r1, [r7, #16]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fcf4 	bl	80090a0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_ETH_DMATxDescListInit+0x20>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e052      	b.n	8008792 <HAL_ETH_DMATxDescListInit+0xc6>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	e030      	b.n	800876a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	015b      	lsls	r3, r3, #5
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	4413      	add	r3, r2
 8008710:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008718:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008720:	fb02 f303 	mul.w	r3, r2, r3
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	4413      	add	r3, r2
 8008728:	461a      	mov	r2, r3
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d105      	bne.n	8008742 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	3b01      	subs	r3, #1
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	429a      	cmp	r2, r3
 800874a:	d208      	bcs.n	800875e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3301      	adds	r3, #1
 8008750:	015b      	lsls	r3, r3, #5
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	4413      	add	r3, r2
 8008756:	461a      	mov	r2, r3
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	60da      	str	r2, [r3, #12]
 800875c:	e002      	b.n	8008764 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	3301      	adds	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d3ca      	bcc.n	8008708 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800877c:	3310      	adds	r3, #16
 800877e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800879e:	b480      	push	{r7}
 80087a0:	b087      	sub	sp, #28
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_ETH_DMARxDescListInit+0x20>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e056      	b.n	800886c <HAL_ETH_DMARxDescListInit+0xce>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2202      	movs	r2, #2
 80087ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e034      	b.n	8008844 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	015b      	lsls	r3, r3, #5
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087ea:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80087f2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	461a      	mov	r2, r3
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d105      	bne.n	800881c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	3b01      	subs	r3, #1
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	429a      	cmp	r2, r3
 8008824:	d208      	bcs.n	8008838 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	3301      	adds	r3, #1
 800882a:	015b      	lsls	r3, r3, #5
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	4413      	add	r3, r2
 8008830:	461a      	mov	r2, r3
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	e002      	b.n	800883e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	3301      	adds	r3, #1
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d3c6      	bcc.n	80087da <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008856:	330c      	adds	r3, #12
 8008858:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	371c      	adds	r7, #28
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	2300      	movs	r3, #0
 800888c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_ETH_TransmitFrame+0x24>
 8008898:	2302      	movs	r3, #2
 800889a:	e0cd      	b.n	8008a38 <HAL_ETH_TransmitFrame+0x1c0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80088c2:	2301      	movs	r3, #1
 80088c4:	e0b8      	b.n	8008a38 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	da09      	bge.n	80088e4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2212      	movs	r2, #18
 80088d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0a9      	b.n	8008a38 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d915      	bls.n	800891a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	4a54      	ldr	r2, [pc, #336]	; (8008a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	0a9b      	lsrs	r3, r3, #10
 80088f8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	4b51      	ldr	r3, [pc, #324]	; (8008a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80088fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008902:	0a9b      	lsrs	r3, r3, #10
 8008904:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8008908:	fb01 f303 	mul.w	r3, r1, r3
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	3301      	adds	r3, #1
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	e001      	b.n	800891e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800891a:	2301      	movs	r3, #1
 800891c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d11c      	bne.n	800895e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8008932:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800893e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800894e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	62da      	str	r2, [r3, #44]	; 0x2c
 800895c:	e04b      	b.n	80089f6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
 8008962:	e044      	b.n	80089ee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008972:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d107      	bne.n	800898a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008988:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008992:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	3b01      	subs	r3, #1
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	d116      	bne.n	80089cc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80089ac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	4a25      	ldr	r2, [pc, #148]	; (8008a48 <HAL_ETH_TransmitFrame+0x1d0>)
 80089b2:	fb02 f203 	mul.w	r2, r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	4413      	add	r3, r2
 80089ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80089be:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80089ca:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80089da:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	461a      	mov	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	3301      	adds	r3, #1
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d3b6      	bcc.n	8008964 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fe:	3314      	adds	r3, #20
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00d      	beq.n	8008a26 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a12:	3314      	adds	r3, #20
 8008a14:	2204      	movs	r2, #4
 8008a16:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a20:	3304      	adds	r3, #4
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	ac02b00b 	.word	0xac02b00b
 8008a48:	fffffa0c 	.word	0xfffffa0c

08008a4c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e074      	b.n	8008b50 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008a76:	e05a      	b.n	8008b2e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a8c:	d10d      	bne.n	8008aaa <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8008aa8:	e041      	b.n	8008b2e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	629a      	str	r2, [r3, #40]	; 0x28
 8008ace:	e02e      	b.n	8008b2e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d103      	bne.n	8008af2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008afe:	1f1a      	subs	r2, r3, #4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	461a      	mov	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e010      	b.n	8008b50 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	db02      	blt.n	8008b3e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d99c      	bls.n	8008a78 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6c:	3314      	adds	r3, #20
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	d112      	bne.n	8008b9e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f004 fc63 	bl	800d444 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b86:	3314      	adds	r3, #20
 8008b88:	2240      	movs	r2, #64	; 0x40
 8008b8a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b9c:	e01b      	b.n	8008bd6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d111      	bne.n	8008bd6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f839 	bl	8008c2a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	3314      	adds	r3, #20
 8008be0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008be4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bee:	3314      	adds	r3, #20
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfa:	d112      	bne.n	8008c22 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f81e 	bl	8008c3e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0a:	3314      	adds	r3, #20
 8008c0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008c10:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b82      	cmp	r3, #130	; 0x82
 8008c72:	d101      	bne.n	8008c78 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
 8008c76:	e050      	b.n	8008d1a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2282      	movs	r2, #130	; 0x82
 8008c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f003 031c 	and.w	r3, r3, #28
 8008c8e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8a1b      	ldrh	r3, [r3, #16]
 8008c94:	02db      	lsls	r3, r3, #11
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008c9e:	897b      	ldrh	r3, [r7, #10]
 8008ca0:	019b      	lsls	r3, r3, #6
 8008ca2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f023 0302 	bic.w	r3, r3, #2
 8008cb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f043 0301 	orr.w	r3, r3, #1
 8008cba:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008cc4:	f7fe f9ba 	bl	800703c <HAL_GetTick>
 8008cc8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008cca:	e015      	b.n	8008cf8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8008ccc:	f7fe f9b6 	bl	800703c <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cda:	d309      	bcc.n	8008cf0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e014      	b.n	8008d1a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e4      	bne.n	8008ccc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b42      	cmp	r3, #66	; 0x42
 8008d42:	d101      	bne.n	8008d48 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8008d44:	2302      	movs	r3, #2
 8008d46:	e04e      	b.n	8008de6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2242      	movs	r2, #66	; 0x42
 8008d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f003 031c 	and.w	r3, r3, #28
 8008d5e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8a1b      	ldrh	r3, [r3, #16]
 8008d64:	02db      	lsls	r3, r3, #11
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008d6e:	897b      	ldrh	r3, [r7, #10]
 8008d70:	019b      	lsls	r3, r3, #6
 8008d72:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f043 0302 	orr.w	r3, r3, #2
 8008d82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f043 0301 	orr.w	r3, r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008d9e:	f7fe f94d 	bl	800703c <HAL_GetTick>
 8008da2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008da4:	e015      	b.n	8008dd2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8008da6:	f7fe f949 	bl	800703c <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db4:	d309      	bcc.n	8008dca <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e00d      	b.n	8008de6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e4      	bne.n	8008da6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d101      	bne.n	8008e04 <HAL_ETH_Start+0x16>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e01f      	b.n	8008e44 <HAL_ETH_Start+0x56>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb45 	bl	80094a4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fb7c 	bl	8009518 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fc13 	bl	800964c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fbb0 	bl	800958c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fbdd 	bl	80095ec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d101      	bne.n	8008e62 <HAL_ETH_Stop+0x16>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e01f      	b.n	8008ea2 <HAL_ETH_Stop+0x56>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fba2 	bl	80095bc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fbcf 	bl	800961c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fb67 	bl	8009552 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fbe1 	bl	800964c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb27 	bl	80094de <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_ETH_ConfigMAC+0x1c>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e0e4      	b.n	8009092 <HAL_ETH_ConfigMAC+0x1e6>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 80b1 	beq.w	8009042 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4b6c      	ldr	r3, [pc, #432]	; (800909c <HAL_ETH_ConfigMAC+0x1f0>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008ef8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8008efe:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8008f04:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8008f0a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8008f10:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8008f16:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8008f1c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8008f22:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8008f28:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8008f2e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8008f34:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8008f3a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f52:	2001      	movs	r0, #1
 8008f54:	f7fe f87e 	bl	8007054 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008f68:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8008f6e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008f74:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8008f7a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8008f80:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8008f86:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8008f92:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008f94:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	f7fe f858 	bl	8007054 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008fb4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008fbe:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008fce:	4013      	ands	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008fdc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8008fe2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8008fe8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8008fee:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8008ff4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800900c:	2001      	movs	r0, #1
 800900e:	f7fe f821 	bl	8007054 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009032:	2001      	movs	r0, #1
 8009034:	f7fe f80e 	bl	8007054 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	61da      	str	r2, [r3, #28]
 8009040:	e01e      	b.n	8009080 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009050:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	4313      	orrs	r3, r2
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009072:	2001      	movs	r0, #1
 8009074:	f7fd ffee 	bl	8007054 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	ff20810f 	.word	0xff20810f

080090a0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b0b0      	sub	sp, #192	; 0xc0
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090bc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80090ce:	2300      	movs	r3, #0
 80090d0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80090da:	2300      	movs	r3, #0
 80090dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80090e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ea:	663b      	str	r3, [r7, #96]	; 0x60
 80090ec:	e001      	b.n	80090f2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80090ee:	2300      	movs	r3, #0
 80090f0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80090f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80090fc:	2300      	movs	r3, #0
 80090fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8009100:	2300      	movs	r3, #0
 8009102:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8009104:	2300      	movs	r3, #0
 8009106:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8009108:	2300      	movs	r3, #0
 800910a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800910c:	2340      	movs	r3, #64	; 0x40
 800910e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8009116:	2300      	movs	r3, #0
 8009118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800911c:	2300      	movs	r3, #0
 800911e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8009122:	2300      	movs	r3, #0
 8009124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009128:	2300      	movs	r3, #0
 800912a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800912e:	2300      	movs	r3, #0
 8009130:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8009134:	2300      	movs	r3, #0
 8009136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800913a:	2300      	movs	r3, #0
 800913c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8009146:	2300      	movs	r3, #0
 8009148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800914c:	2300      	movs	r3, #0
 800914e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8009152:	2300      	movs	r3, #0
 8009154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8009158:	2300      	movs	r3, #0
 800915a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800915e:	2300      	movs	r3, #0
 8009160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8009174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009178:	4bac      	ldr	r3, [pc, #688]	; (800942c <ETH_MACDMAConfig+0x38c>)
 800917a:	4013      	ands	r3, r2
 800917c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8009180:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8009182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8009184:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8009186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009188:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800918a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800918c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8009192:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8009194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8009196:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800919a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80091a0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80091a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80091a4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80091a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80091a8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80091aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80091ac:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80091ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80091b0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80091b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80091b4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80091b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80091d4:	2001      	movs	r0, #1
 80091d6:	f7fd ff3d 	bl	8007054 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091e2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80091e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80091e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80091e8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80091ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80091ec:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80091ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80091f2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80091f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80091f8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80091fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80091fe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8009200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8009204:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8009208:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8009210:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009212:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800921e:	2001      	movs	r0, #1
 8009220:	f7fd ff18 	bl	8007054 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800922c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009236:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009240:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800924c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009250:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009254:	4013      	ands	r3, r2
 8009256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800925a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800925e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8009260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8009264:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8009266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800926a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800926c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8009270:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8009272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8009276:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800927c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800927e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009282:	4313      	orrs	r3, r2
 8009284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009290:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800929c:	2001      	movs	r0, #1
 800929e:	f7fd fed9 	bl	8007054 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092aa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80092ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80092b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80092c6:	2001      	movs	r0, #1
 80092c8:	f7fd fec4 	bl	8007054 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092d4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80092da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092de:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80092e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092e8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80092fa:	2304      	movs	r3, #4
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80092fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8009304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009308:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800930a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009314:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8009316:	2380      	movs	r3, #128	; 0x80
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800931a:	2300      	movs	r3, #0
 800931c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800931e:	2300      	movs	r3, #0
 8009320:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800932a:	3318      	adds	r3, #24
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8009332:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009336:	4b3e      	ldr	r3, [pc, #248]	; (8009430 <ETH_MACDMAConfig+0x390>)
 8009338:	4013      	ands	r3, r2
 800933a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800933e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8009340:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009342:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8009344:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8009346:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8009348:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800934a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800934c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800934e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8009350:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8009352:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8009354:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8009356:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800935a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800935e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009364:	4313      	orrs	r3, r2
 8009366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009372:	3318      	adds	r3, #24
 8009374:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009378:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009382:	3318      	adds	r3, #24
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800938a:	2001      	movs	r0, #1
 800938c:	f7fd fe62 	bl	8007054 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009398:	3318      	adds	r3, #24
 800939a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800939e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80093a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80093a4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80093a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80093a8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80093ac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80093b0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80093b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80093b6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80093b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80093ba:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80093c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80093d8:	2001      	movs	r0, #1
 80093da:	f7fd fe3b 	bl	8007054 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093ea:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d10f      	bne.n	8009414 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fc:	331c      	adds	r3, #28
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800940c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009410:	331c      	adds	r3, #28
 8009412:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	461a      	mov	r2, r3
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f809 	bl	8009434 <ETH_MACAddressConfig>
}
 8009422:	bf00      	nop
 8009424:	37c0      	adds	r7, #192	; 0xc0
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	ff20810f 	.word	0xff20810f
 8009430:	f8de3f23 	.word	0xf8de3f23

08009434 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3305      	adds	r3, #5
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	3204      	adds	r2, #4
 800944c:	7812      	ldrb	r2, [r2, #0]
 800944e:	4313      	orrs	r3, r2
 8009450:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	4b11      	ldr	r3, [pc, #68]	; (800949c <ETH_MACAddressConfig+0x68>)
 8009456:	4413      	add	r3, r2
 8009458:	461a      	mov	r2, r3
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3303      	adds	r3, #3
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	061a      	lsls	r2, r3, #24
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3302      	adds	r3, #2
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	041b      	lsls	r3, r3, #16
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3301      	adds	r3, #1
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	4313      	orrs	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <ETH_MACAddressConfig+0x6c>)
 8009486:	4413      	add	r3, r2
 8009488:	461a      	mov	r2, r3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	6013      	str	r3, [r2, #0]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40028040 	.word	0x40028040
 80094a0:	40028044 	.word	0x40028044

080094a4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0208 	orr.w	r2, r2, #8
 80094be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80094c8:	2001      	movs	r0, #1
 80094ca:	f000 f8e9 	bl	80096a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	601a      	str	r2, [r3, #0]
}
 80094d6:	bf00      	nop
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0208 	bic.w	r2, r2, #8
 80094f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009502:	2001      	movs	r0, #1
 8009504:	f000 f8cc 	bl	80096a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	601a      	str	r2, [r3, #0]
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0204 	orr.w	r2, r2, #4
 8009532:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800953c:	2001      	movs	r0, #1
 800953e:	f000 f8af 	bl	80096a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	601a      	str	r2, [r3, #0]
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0204 	bic.w	r2, r2, #4
 800956c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009576:	2001      	movs	r0, #1
 8009578:	f000 f892 	bl	80096a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959c:	3318      	adds	r3, #24
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ac:	3318      	adds	r3, #24
 80095ae:	601a      	str	r2, [r3, #0]
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095cc:	3318      	adds	r3, #24
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095dc:	3318      	adds	r3, #24
 80095de:	601a      	str	r2, [r3, #0]
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fc:	3318      	adds	r3, #24
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f042 0202 	orr.w	r2, r2, #2
 8009608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960c:	3318      	adds	r3, #24
 800960e:	601a      	str	r2, [r3, #0]
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962c:	3318      	adds	r3, #24
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0202 	bic.w	r2, r2, #2
 8009638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963c:	3318      	adds	r3, #24
 800963e:	601a      	str	r2, [r3, #0]
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009660:	3318      	adds	r3, #24
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800966c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009670:	3318      	adds	r3, #24
 8009672:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967c:	3318      	adds	r3, #24
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009682:	2001      	movs	r0, #1
 8009684:	f000 f80c 	bl	80096a0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009692:	3318      	adds	r3, #24
 8009694:	601a      	str	r2, [r3, #0]
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80096a8:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <ETH_Delay+0x38>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a0b      	ldr	r2, [pc, #44]	; (80096dc <ETH_Delay+0x3c>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	0a5b      	lsrs	r3, r3, #9
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80096bc:	bf00      	nop
  } 
  while (Delay --);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	1e5a      	subs	r2, r3, #1
 80096c2:	60fa      	str	r2, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f9      	bne.n	80096bc <ETH_Delay+0x1c>
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	2000039c 	.word	0x2000039c
 80096dc:	10624dd3 	.word	0x10624dd3

080096e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b089      	sub	sp, #36	; 0x24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	e16b      	b.n	80099d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80096fc:	2201      	movs	r2, #1
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	4013      	ands	r3, r2
 800970e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	429a      	cmp	r2, r3
 8009716:	f040 815a 	bne.w	80099ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b01      	cmp	r3, #1
 8009724:	d005      	beq.n	8009732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800972e:	2b02      	cmp	r3, #2
 8009730:	d130      	bne.n	8009794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	2203      	movs	r2, #3
 800973e:	fa02 f303 	lsl.w	r3, r2, r3
 8009742:	43db      	mvns	r3, r3
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	4013      	ands	r3, r2
 8009748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	fa02 f303 	lsl.w	r3, r2, r3
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	4313      	orrs	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	69ba      	ldr	r2, [r7, #24]
 8009760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009768:	2201      	movs	r2, #1
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	fa02 f303 	lsl.w	r3, r2, r3
 8009770:	43db      	mvns	r3, r3
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	4013      	ands	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	091b      	lsrs	r3, r3, #4
 800977e:	f003 0201 	and.w	r2, r3, #1
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	fa02 f303 	lsl.w	r3, r2, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	4313      	orrs	r3, r2
 800978c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f003 0303 	and.w	r3, r3, #3
 800979c:	2b03      	cmp	r3, #3
 800979e:	d017      	beq.n	80097d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	2203      	movs	r2, #3
 80097ac:	fa02 f303 	lsl.w	r3, r2, r3
 80097b0:	43db      	mvns	r3, r3
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	4013      	ands	r3, r2
 80097b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	fa02 f303 	lsl.w	r3, r2, r3
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d123      	bne.n	8009824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	08da      	lsrs	r2, r3, #3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3208      	adds	r2, #8
 80097e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	220f      	movs	r2, #15
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	43db      	mvns	r3, r3
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	4013      	ands	r3, r2
 80097fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	fa02 f303 	lsl.w	r3, r2, r3
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	4313      	orrs	r3, r2
 8009814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	08da      	lsrs	r2, r3, #3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3208      	adds	r2, #8
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	2203      	movs	r2, #3
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	43db      	mvns	r3, r3
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	4013      	ands	r3, r2
 800983a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f003 0203 	and.w	r2, r3, #3
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	fa02 f303 	lsl.w	r3, r2, r3
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	4313      	orrs	r3, r2
 8009850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80b4 	beq.w	80099ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	4b60      	ldr	r3, [pc, #384]	; (80099ec <HAL_GPIO_Init+0x30c>)
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	4a5f      	ldr	r2, [pc, #380]	; (80099ec <HAL_GPIO_Init+0x30c>)
 8009870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009874:	6453      	str	r3, [r2, #68]	; 0x44
 8009876:	4b5d      	ldr	r3, [pc, #372]	; (80099ec <HAL_GPIO_Init+0x30c>)
 8009878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009882:	4a5b      	ldr	r2, [pc, #364]	; (80099f0 <HAL_GPIO_Init+0x310>)
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	089b      	lsrs	r3, r3, #2
 8009888:	3302      	adds	r3, #2
 800988a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800988e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	220f      	movs	r2, #15
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	43db      	mvns	r3, r3
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	4013      	ands	r3, r2
 80098a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a52      	ldr	r2, [pc, #328]	; (80099f4 <HAL_GPIO_Init+0x314>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d02b      	beq.n	8009906 <HAL_GPIO_Init+0x226>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a51      	ldr	r2, [pc, #324]	; (80099f8 <HAL_GPIO_Init+0x318>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d025      	beq.n	8009902 <HAL_GPIO_Init+0x222>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a50      	ldr	r2, [pc, #320]	; (80099fc <HAL_GPIO_Init+0x31c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01f      	beq.n	80098fe <HAL_GPIO_Init+0x21e>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a4f      	ldr	r2, [pc, #316]	; (8009a00 <HAL_GPIO_Init+0x320>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d019      	beq.n	80098fa <HAL_GPIO_Init+0x21a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a4e      	ldr	r2, [pc, #312]	; (8009a04 <HAL_GPIO_Init+0x324>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <HAL_GPIO_Init+0x216>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a4d      	ldr	r2, [pc, #308]	; (8009a08 <HAL_GPIO_Init+0x328>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00d      	beq.n	80098f2 <HAL_GPIO_Init+0x212>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a4c      	ldr	r2, [pc, #304]	; (8009a0c <HAL_GPIO_Init+0x32c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d007      	beq.n	80098ee <HAL_GPIO_Init+0x20e>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a4b      	ldr	r2, [pc, #300]	; (8009a10 <HAL_GPIO_Init+0x330>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d101      	bne.n	80098ea <HAL_GPIO_Init+0x20a>
 80098e6:	2307      	movs	r3, #7
 80098e8:	e00e      	b.n	8009908 <HAL_GPIO_Init+0x228>
 80098ea:	2308      	movs	r3, #8
 80098ec:	e00c      	b.n	8009908 <HAL_GPIO_Init+0x228>
 80098ee:	2306      	movs	r3, #6
 80098f0:	e00a      	b.n	8009908 <HAL_GPIO_Init+0x228>
 80098f2:	2305      	movs	r3, #5
 80098f4:	e008      	b.n	8009908 <HAL_GPIO_Init+0x228>
 80098f6:	2304      	movs	r3, #4
 80098f8:	e006      	b.n	8009908 <HAL_GPIO_Init+0x228>
 80098fa:	2303      	movs	r3, #3
 80098fc:	e004      	b.n	8009908 <HAL_GPIO_Init+0x228>
 80098fe:	2302      	movs	r3, #2
 8009900:	e002      	b.n	8009908 <HAL_GPIO_Init+0x228>
 8009902:	2301      	movs	r3, #1
 8009904:	e000      	b.n	8009908 <HAL_GPIO_Init+0x228>
 8009906:	2300      	movs	r3, #0
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	f002 0203 	and.w	r2, r2, #3
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	4093      	lsls	r3, r2
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	4313      	orrs	r3, r2
 8009916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009918:	4935      	ldr	r1, [pc, #212]	; (80099f0 <HAL_GPIO_Init+0x310>)
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	089b      	lsrs	r3, r3, #2
 800991e:	3302      	adds	r3, #2
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009926:	4b3b      	ldr	r3, [pc, #236]	; (8009a14 <HAL_GPIO_Init+0x334>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	43db      	mvns	r3, r3
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	4013      	ands	r3, r2
 8009934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800994a:	4a32      	ldr	r2, [pc, #200]	; (8009a14 <HAL_GPIO_Init+0x334>)
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009950:	4b30      	ldr	r3, [pc, #192]	; (8009a14 <HAL_GPIO_Init+0x334>)
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	43db      	mvns	r3, r3
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	4013      	ands	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	4313      	orrs	r3, r2
 8009972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009974:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <HAL_GPIO_Init+0x334>)
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800997a:	4b26      	ldr	r3, [pc, #152]	; (8009a14 <HAL_GPIO_Init+0x334>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	43db      	mvns	r3, r3
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	4013      	ands	r3, r2
 8009988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800999e:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <HAL_GPIO_Init+0x334>)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80099a4:	4b1b      	ldr	r3, [pc, #108]	; (8009a14 <HAL_GPIO_Init+0x334>)
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	43db      	mvns	r3, r3
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	4013      	ands	r3, r2
 80099b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80099c8:	4a12      	ldr	r2, [pc, #72]	; (8009a14 <HAL_GPIO_Init+0x334>)
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	3301      	adds	r3, #1
 80099d2:	61fb      	str	r3, [r7, #28]
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b0f      	cmp	r3, #15
 80099d8:	f67f ae90 	bls.w	80096fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80099dc:	bf00      	nop
 80099de:	bf00      	nop
 80099e0:	3724      	adds	r7, #36	; 0x24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40023800 	.word	0x40023800
 80099f0:	40013800 	.word	0x40013800
 80099f4:	40020000 	.word	0x40020000
 80099f8:	40020400 	.word	0x40020400
 80099fc:	40020800 	.word	0x40020800
 8009a00:	40020c00 	.word	0x40020c00
 8009a04:	40021000 	.word	0x40021000
 8009a08:	40021400 	.word	0x40021400
 8009a0c:	40021800 	.word	0x40021800
 8009a10:	40021c00 	.word	0x40021c00
 8009a14:	40013c00 	.word	0x40013c00

08009a18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a2e:	2300      	movs	r3, #0
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	e0cd      	b.n	8009bd0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a34:	2201      	movs	r2, #1
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	4013      	ands	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	f040 80bd 	bne.w	8009bca <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009a50:	4a65      	ldr	r2, [pc, #404]	; (8009be8 <HAL_GPIO_DeInit+0x1d0>)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	089b      	lsrs	r3, r3, #2
 8009a56:	3302      	adds	r3, #2
 8009a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f003 0303 	and.w	r3, r3, #3
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	220f      	movs	r2, #15
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a5d      	ldr	r2, [pc, #372]	; (8009bec <HAL_GPIO_DeInit+0x1d4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d02b      	beq.n	8009ad2 <HAL_GPIO_DeInit+0xba>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a5c      	ldr	r2, [pc, #368]	; (8009bf0 <HAL_GPIO_DeInit+0x1d8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d025      	beq.n	8009ace <HAL_GPIO_DeInit+0xb6>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a5b      	ldr	r2, [pc, #364]	; (8009bf4 <HAL_GPIO_DeInit+0x1dc>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d01f      	beq.n	8009aca <HAL_GPIO_DeInit+0xb2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a5a      	ldr	r2, [pc, #360]	; (8009bf8 <HAL_GPIO_DeInit+0x1e0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d019      	beq.n	8009ac6 <HAL_GPIO_DeInit+0xae>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a59      	ldr	r2, [pc, #356]	; (8009bfc <HAL_GPIO_DeInit+0x1e4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d013      	beq.n	8009ac2 <HAL_GPIO_DeInit+0xaa>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a58      	ldr	r2, [pc, #352]	; (8009c00 <HAL_GPIO_DeInit+0x1e8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00d      	beq.n	8009abe <HAL_GPIO_DeInit+0xa6>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a57      	ldr	r2, [pc, #348]	; (8009c04 <HAL_GPIO_DeInit+0x1ec>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <HAL_GPIO_DeInit+0xa2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a56      	ldr	r2, [pc, #344]	; (8009c08 <HAL_GPIO_DeInit+0x1f0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d101      	bne.n	8009ab6 <HAL_GPIO_DeInit+0x9e>
 8009ab2:	2307      	movs	r3, #7
 8009ab4:	e00e      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	e00c      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009aba:	2306      	movs	r3, #6
 8009abc:	e00a      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009abe:	2305      	movs	r3, #5
 8009ac0:	e008      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	e006      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e004      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009aca:	2302      	movs	r3, #2
 8009acc:	e002      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e000      	b.n	8009ad4 <HAL_GPIO_DeInit+0xbc>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	f002 0203 	and.w	r2, r2, #3
 8009ada:	0092      	lsls	r2, r2, #2
 8009adc:	4093      	lsls	r3, r2
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d132      	bne.n	8009b4a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009ae4:	4b49      	ldr	r3, [pc, #292]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	43db      	mvns	r3, r3
 8009aec:	4947      	ldr	r1, [pc, #284]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009af2:	4b46      	ldr	r3, [pc, #280]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	43db      	mvns	r3, r3
 8009afa:	4944      	ldr	r1, [pc, #272]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009b00:	4b42      	ldr	r3, [pc, #264]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	43db      	mvns	r3, r3
 8009b08:	4940      	ldr	r1, [pc, #256]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009b0e:	4b3f      	ldr	r3, [pc, #252]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	43db      	mvns	r3, r3
 8009b16:	493d      	ldr	r1, [pc, #244]	; (8009c0c <HAL_GPIO_DeInit+0x1f4>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	220f      	movs	r2, #15
 8009b26:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009b2c:	4a2e      	ldr	r2, [pc, #184]	; (8009be8 <HAL_GPIO_DeInit+0x1d0>)
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	089b      	lsrs	r3, r3, #2
 8009b32:	3302      	adds	r3, #2
 8009b34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	43da      	mvns	r2, r3
 8009b3c:	482a      	ldr	r0, [pc, #168]	; (8009be8 <HAL_GPIO_DeInit+0x1d0>)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	089b      	lsrs	r3, r3, #2
 8009b42:	400a      	ands	r2, r1
 8009b44:	3302      	adds	r3, #2
 8009b46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	2103      	movs	r1, #3
 8009b54:	fa01 f303 	lsl.w	r3, r1, r3
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	401a      	ands	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	08da      	lsrs	r2, r3, #3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3208      	adds	r2, #8
 8009b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f003 0307 	and.w	r3, r3, #7
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	220f      	movs	r2, #15
 8009b76:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	08d2      	lsrs	r2, r2, #3
 8009b80:	4019      	ands	r1, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3208      	adds	r2, #8
 8009b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	2103      	movs	r1, #3
 8009b94:	fa01 f303 	lsl.w	r3, r1, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	401a      	ands	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bac:	43db      	mvns	r3, r3
 8009bae:	401a      	ands	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	2103      	movs	r1, #3
 8009bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc2:	43db      	mvns	r3, r3
 8009bc4:	401a      	ands	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	2b0f      	cmp	r3, #15
 8009bd4:	f67f af2e 	bls.w	8009a34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	40013800 	.word	0x40013800
 8009bec:	40020000 	.word	0x40020000
 8009bf0:	40020400 	.word	0x40020400
 8009bf4:	40020800 	.word	0x40020800
 8009bf8:	40020c00 	.word	0x40020c00
 8009bfc:	40021000 	.word	0x40021000
 8009c00:	40021400 	.word	0x40021400
 8009c04:	40021800 	.word	0x40021800
 8009c08:	40021c00 	.word	0x40021c00
 8009c0c:	40013c00 	.word	0x40013c00

08009c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691a      	ldr	r2, [r3, #16]
 8009c20:	887b      	ldrh	r3, [r7, #2]
 8009c22:	4013      	ands	r3, r2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	73fb      	strb	r3, [r7, #15]
 8009c2c:	e001      	b.n	8009c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	807b      	strh	r3, [r7, #2]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c50:	787b      	ldrb	r3, [r7, #1]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c56:	887a      	ldrh	r2, [r7, #2]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009c5c:	e003      	b.n	8009c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009c5e:	887b      	ldrh	r3, [r7, #2]
 8009c60:	041a      	lsls	r2, r3, #16
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	619a      	str	r2, [r3, #24]
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e264      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d075      	beq.n	8009d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c92:	4ba3      	ldr	r3, [pc, #652]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 030c 	and.w	r3, r3, #12
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d00c      	beq.n	8009cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c9e:	4ba0      	ldr	r3, [pc, #640]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ca6:	2b08      	cmp	r3, #8
 8009ca8:	d112      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009caa:	4b9d      	ldr	r3, [pc, #628]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb6:	d10b      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cb8:	4b99      	ldr	r3, [pc, #612]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d05b      	beq.n	8009d7c <HAL_RCC_OscConfig+0x108>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d157      	bne.n	8009d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e23f      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd8:	d106      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x74>
 8009cda:	4b91      	ldr	r3, [pc, #580]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a90      	ldr	r2, [pc, #576]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e01d      	b.n	8009d24 <HAL_RCC_OscConfig+0xb0>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cf0:	d10c      	bne.n	8009d0c <HAL_RCC_OscConfig+0x98>
 8009cf2:	4b8b      	ldr	r3, [pc, #556]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a8a      	ldr	r2, [pc, #552]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	4b88      	ldr	r3, [pc, #544]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a87      	ldr	r2, [pc, #540]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	e00b      	b.n	8009d24 <HAL_RCC_OscConfig+0xb0>
 8009d0c:	4b84      	ldr	r3, [pc, #528]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a83      	ldr	r2, [pc, #524]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	4b81      	ldr	r3, [pc, #516]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a80      	ldr	r2, [pc, #512]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d013      	beq.n	8009d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d2c:	f7fd f986 	bl	800703c <HAL_GetTick>
 8009d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d34:	f7fd f982 	bl	800703c <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b64      	cmp	r3, #100	; 0x64
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e204      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d46:	4b76      	ldr	r3, [pc, #472]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCC_OscConfig+0xc0>
 8009d52:	e014      	b.n	8009d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d54:	f7fd f972 	bl	800703c <HAL_GetTick>
 8009d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d5a:	e008      	b.n	8009d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7fd f96e 	bl	800703c <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	; 0x64
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e1f0      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d6e:	4b6c      	ldr	r3, [pc, #432]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f0      	bne.n	8009d5c <HAL_RCC_OscConfig+0xe8>
 8009d7a:	e000      	b.n	8009d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d063      	beq.n	8009e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d8a:	4b65      	ldr	r3, [pc, #404]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 030c 	and.w	r3, r3, #12
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d96:	4b62      	ldr	r3, [pc, #392]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d9e:	2b08      	cmp	r3, #8
 8009da0:	d11c      	bne.n	8009ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009da2:	4b5f      	ldr	r3, [pc, #380]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d116      	bne.n	8009ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dae:	4b5c      	ldr	r3, [pc, #368]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x152>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d001      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e1c4      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dc6:	4b56      	ldr	r3, [pc, #344]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4952      	ldr	r1, [pc, #328]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dda:	e03a      	b.n	8009e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d020      	beq.n	8009e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009de4:	4b4f      	ldr	r3, [pc, #316]	; (8009f24 <HAL_RCC_OscConfig+0x2b0>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dea:	f7fd f927 	bl	800703c <HAL_GetTick>
 8009dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df0:	e008      	b.n	8009e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009df2:	f7fd f923 	bl	800703c <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d901      	bls.n	8009e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e1a5      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e04:	4b46      	ldr	r3, [pc, #280]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0f0      	beq.n	8009df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e10:	4b43      	ldr	r3, [pc, #268]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	4940      	ldr	r1, [pc, #256]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	600b      	str	r3, [r1, #0]
 8009e24:	e015      	b.n	8009e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e26:	4b3f      	ldr	r3, [pc, #252]	; (8009f24 <HAL_RCC_OscConfig+0x2b0>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7fd f906 	bl	800703c <HAL_GetTick>
 8009e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e32:	e008      	b.n	8009e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e34:	f7fd f902 	bl	800703c <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e184      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e46:	4b36      	ldr	r3, [pc, #216]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f0      	bne.n	8009e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d030      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d016      	beq.n	8009e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e66:	4b30      	ldr	r3, [pc, #192]	; (8009f28 <HAL_RCC_OscConfig+0x2b4>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6c:	f7fd f8e6 	bl	800703c <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e74:	f7fd f8e2 	bl	800703c <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e164      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e86:	4b26      	ldr	r3, [pc, #152]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <HAL_RCC_OscConfig+0x200>
 8009e92:	e015      	b.n	8009ec0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e94:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <HAL_RCC_OscConfig+0x2b4>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e9a:	f7fd f8cf 	bl	800703c <HAL_GetTick>
 8009e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ea0:	e008      	b.n	8009eb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ea2:	f7fd f8cb 	bl	800703c <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d901      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e14d      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1f0      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80a0 	beq.w	800a00e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10f      	bne.n	8009efe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	4a0e      	ldr	r2, [pc, #56]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eec:	6413      	str	r3, [r2, #64]	; 0x40
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ef6:	60bb      	str	r3, [r7, #8]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009efa:	2301      	movs	r3, #1
 8009efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009efe:	4b0b      	ldr	r3, [pc, #44]	; (8009f2c <HAL_RCC_OscConfig+0x2b8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d121      	bne.n	8009f4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <HAL_RCC_OscConfig+0x2b8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a07      	ldr	r2, [pc, #28]	; (8009f2c <HAL_RCC_OscConfig+0x2b8>)
 8009f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f16:	f7fd f891 	bl	800703c <HAL_GetTick>
 8009f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f1c:	e011      	b.n	8009f42 <HAL_RCC_OscConfig+0x2ce>
 8009f1e:	bf00      	nop
 8009f20:	40023800 	.word	0x40023800
 8009f24:	42470000 	.word	0x42470000
 8009f28:	42470e80 	.word	0x42470e80
 8009f2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f30:	f7fd f884 	bl	800703c <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e106      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f42:	4b85      	ldr	r3, [pc, #532]	; (800a158 <HAL_RCC_OscConfig+0x4e4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d106      	bne.n	8009f64 <HAL_RCC_OscConfig+0x2f0>
 8009f56:	4b81      	ldr	r3, [pc, #516]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	4a80      	ldr	r2, [pc, #512]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	6713      	str	r3, [r2, #112]	; 0x70
 8009f62:	e01c      	b.n	8009f9e <HAL_RCC_OscConfig+0x32a>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d10c      	bne.n	8009f86 <HAL_RCC_OscConfig+0x312>
 8009f6c:	4b7b      	ldr	r3, [pc, #492]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f70:	4a7a      	ldr	r2, [pc, #488]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f72:	f043 0304 	orr.w	r3, r3, #4
 8009f76:	6713      	str	r3, [r2, #112]	; 0x70
 8009f78:	4b78      	ldr	r3, [pc, #480]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	4a77      	ldr	r2, [pc, #476]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	6713      	str	r3, [r2, #112]	; 0x70
 8009f84:	e00b      	b.n	8009f9e <HAL_RCC_OscConfig+0x32a>
 8009f86:	4b75      	ldr	r3, [pc, #468]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8a:	4a74      	ldr	r2, [pc, #464]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	6713      	str	r3, [r2, #112]	; 0x70
 8009f92:	4b72      	ldr	r3, [pc, #456]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f96:	4a71      	ldr	r2, [pc, #452]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009f98:	f023 0304 	bic.w	r3, r3, #4
 8009f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d015      	beq.n	8009fd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fa6:	f7fd f849 	bl	800703c <HAL_GetTick>
 8009faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fac:	e00a      	b.n	8009fc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fae:	f7fd f845 	bl	800703c <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e0c5      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fc4:	4b65      	ldr	r3, [pc, #404]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0ee      	beq.n	8009fae <HAL_RCC_OscConfig+0x33a>
 8009fd0:	e014      	b.n	8009ffc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fd2:	f7fd f833 	bl	800703c <HAL_GetTick>
 8009fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fd8:	e00a      	b.n	8009ff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fda:	f7fd f82f 	bl	800703c <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e0af      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ff0:	4b5a      	ldr	r3, [pc, #360]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1ee      	bne.n	8009fda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d105      	bne.n	800a00e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a002:	4b56      	ldr	r3, [pc, #344]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	4a55      	ldr	r2, [pc, #340]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a00c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 809b 	beq.w	800a14e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a018:	4b50      	ldr	r3, [pc, #320]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	2b08      	cmp	r3, #8
 800a022:	d05c      	beq.n	800a0de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d141      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a02c:	4b4c      	ldr	r3, [pc, #304]	; (800a160 <HAL_RCC_OscConfig+0x4ec>)
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a032:	f7fd f803 	bl	800703c <HAL_GetTick>
 800a036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a038:	e008      	b.n	800a04c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a03a:	f7fc ffff 	bl	800703c <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b02      	cmp	r3, #2
 800a046:	d901      	bls.n	800a04c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e081      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a04c:	4b43      	ldr	r3, [pc, #268]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1f0      	bne.n	800a03a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	431a      	orrs	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	019b      	lsls	r3, r3, #6
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	3b01      	subs	r3, #1
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	061b      	lsls	r3, r3, #24
 800a07c:	4937      	ldr	r1, [pc, #220]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a082:	4b37      	ldr	r3, [pc, #220]	; (800a160 <HAL_RCC_OscConfig+0x4ec>)
 800a084:	2201      	movs	r2, #1
 800a086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a088:	f7fc ffd8 	bl	800703c <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a090:	f7fc ffd4 	bl	800703c <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e056      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0f0      	beq.n	800a090 <HAL_RCC_OscConfig+0x41c>
 800a0ae:	e04e      	b.n	800a14e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0b0:	4b2b      	ldr	r3, [pc, #172]	; (800a160 <HAL_RCC_OscConfig+0x4ec>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0b6:	f7fc ffc1 	bl	800703c <HAL_GetTick>
 800a0ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0be:	f7fc ffbd 	bl	800703c <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e03f      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0d0:	4b22      	ldr	r3, [pc, #136]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f0      	bne.n	800a0be <HAL_RCC_OscConfig+0x44a>
 800a0dc:	e037      	b.n	800a14e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e032      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a0ea:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <HAL_RCC_OscConfig+0x4e8>)
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d028      	beq.n	800a14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a102:	429a      	cmp	r2, r3
 800a104:	d121      	bne.n	800a14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a110:	429a      	cmp	r2, r3
 800a112:	d11a      	bne.n	800a14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a11a:	4013      	ands	r3, r2
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a120:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a122:	4293      	cmp	r3, r2
 800a124:	d111      	bne.n	800a14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	3b01      	subs	r3, #1
 800a134:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a136:	429a      	cmp	r2, r3
 800a138:	d107      	bne.n	800a14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a146:	429a      	cmp	r2, r3
 800a148:	d001      	beq.n	800a14e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40007000 	.word	0x40007000
 800a15c:	40023800 	.word	0x40023800
 800a160:	42470060 	.word	0x42470060

0800a164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e0cc      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a178:	4b68      	ldr	r3, [pc, #416]	; (800a31c <HAL_RCC_ClockConfig+0x1b8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d90c      	bls.n	800a1a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a186:	4b65      	ldr	r3, [pc, #404]	; (800a31c <HAL_RCC_ClockConfig+0x1b8>)
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	b2d2      	uxtb	r2, r2
 800a18c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a18e:	4b63      	ldr	r3, [pc, #396]	; (800a31c <HAL_RCC_ClockConfig+0x1b8>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d001      	beq.n	800a1a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e0b8      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d020      	beq.n	800a1ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1b8:	4b59      	ldr	r3, [pc, #356]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	4a58      	ldr	r2, [pc, #352]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a1be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a1c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1d0:	4b53      	ldr	r3, [pc, #332]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	4a52      	ldr	r2, [pc, #328]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a1da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1dc:	4b50      	ldr	r3, [pc, #320]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	494d      	ldr	r1, [pc, #308]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d044      	beq.n	800a284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d107      	bne.n	800a212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a202:	4b47      	ldr	r3, [pc, #284]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d119      	bne.n	800a242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e07f      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d003      	beq.n	800a222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d107      	bne.n	800a232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a222:	4b3f      	ldr	r3, [pc, #252]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d109      	bne.n	800a242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e06f      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a232:	4b3b      	ldr	r3, [pc, #236]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e067      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a242:	4b37      	ldr	r3, [pc, #220]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f023 0203 	bic.w	r2, r3, #3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	4934      	ldr	r1, [pc, #208]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a250:	4313      	orrs	r3, r2
 800a252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a254:	f7fc fef2 	bl	800703c <HAL_GetTick>
 800a258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a25a:	e00a      	b.n	800a272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a25c:	f7fc feee 	bl	800703c <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	f241 3288 	movw	r2, #5000	; 0x1388
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e04f      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a272:	4b2b      	ldr	r3, [pc, #172]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f003 020c 	and.w	r2, r3, #12
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	429a      	cmp	r2, r3
 800a282:	d1eb      	bne.n	800a25c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a284:	4b25      	ldr	r3, [pc, #148]	; (800a31c <HAL_RCC_ClockConfig+0x1b8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0307 	and.w	r3, r3, #7
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d20c      	bcs.n	800a2ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a292:	4b22      	ldr	r3, [pc, #136]	; (800a31c <HAL_RCC_ClockConfig+0x1b8>)
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a29a:	4b20      	ldr	r3, [pc, #128]	; (800a31c <HAL_RCC_ClockConfig+0x1b8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d001      	beq.n	800a2ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e032      	b.n	800a312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d008      	beq.n	800a2ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2b8:	4b19      	ldr	r3, [pc, #100]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	4916      	ldr	r1, [pc, #88]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d009      	beq.n	800a2ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2d6:	4b12      	ldr	r3, [pc, #72]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	490e      	ldr	r1, [pc, #56]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a2ea:	f000 f889 	bl	800a400 <HAL_RCC_GetSysClockFreq>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	091b      	lsrs	r3, r3, #4
 800a2f6:	f003 030f 	and.w	r3, r3, #15
 800a2fa:	490a      	ldr	r1, [pc, #40]	; (800a324 <HAL_RCC_ClockConfig+0x1c0>)
 800a2fc:	5ccb      	ldrb	r3, [r1, r3]
 800a2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a302:	4a09      	ldr	r2, [pc, #36]	; (800a328 <HAL_RCC_ClockConfig+0x1c4>)
 800a304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a306:	4b09      	ldr	r3, [pc, #36]	; (800a32c <HAL_RCC_ClockConfig+0x1c8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fc f990 	bl	8006630 <HAL_InitTick>

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	40023c00 	.word	0x40023c00
 800a320:	40023800 	.word	0x40023800
 800a324:	08026e6c 	.word	0x08026e6c
 800a328:	2000039c 	.word	0x2000039c
 800a32c:	200003a0 	.word	0x200003a0

0800a330 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08c      	sub	sp, #48	; 0x30
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d129      	bne.n	800a396 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800a342:	2300      	movs	r3, #0
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	4b2b      	ldr	r3, [pc, #172]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34a:	4a2a      	ldr	r2, [pc, #168]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a34c:	f043 0301 	orr.w	r3, r3, #1
 800a350:	6313      	str	r3, [r2, #48]	; 0x30
 800a352:	4b28      	ldr	r3, [pc, #160]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	61bb      	str	r3, [r7, #24]
 800a35c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a35e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a364:	2302      	movs	r3, #2
 800a366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a368:	2303      	movs	r3, #3
 800a36a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a36c:	2300      	movs	r3, #0
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a370:	2300      	movs	r3, #0
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a374:	f107 031c 	add.w	r3, r7, #28
 800a378:	4619      	mov	r1, r3
 800a37a:	481f      	ldr	r0, [pc, #124]	; (800a3f8 <HAL_RCC_MCOConfig+0xc8>)
 800a37c:	f7ff f9b0 	bl	80096e0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a380:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	430b      	orrs	r3, r1
 800a38e:	4919      	ldr	r1, [pc, #100]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a390:	4313      	orrs	r3, r2
 800a392:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800a394:	e029      	b.n	800a3ea <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800a396:	2300      	movs	r3, #0
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	4b16      	ldr	r3, [pc, #88]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39e:	4a15      	ldr	r2, [pc, #84]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a3a0:	f043 0304 	orr.w	r3, r3, #4
 800a3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a3a6:	4b13      	ldr	r3, [pc, #76]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3aa:	f003 0304 	and.w	r3, r3, #4
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a3b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a3c8:	f107 031c 	add.w	r3, r7, #28
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	480b      	ldr	r0, [pc, #44]	; (800a3fc <HAL_RCC_MCOConfig+0xcc>)
 800a3d0:	f7ff f986 	bl	80096e0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	00d9      	lsls	r1, r3, #3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	4903      	ldr	r1, [pc, #12]	; (800a3f4 <HAL_RCC_MCOConfig+0xc4>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	608b      	str	r3, [r1, #8]
}
 800a3ea:	bf00      	nop
 800a3ec:	3730      	adds	r7, #48	; 0x30
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	40023800 	.word	0x40023800
 800a3f8:	40020000 	.word	0x40020000
 800a3fc:	40020800 	.word	0x40020800

0800a400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a400:	b5b0      	push	{r4, r5, r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a406:	2100      	movs	r1, #0
 800a408:	6079      	str	r1, [r7, #4]
 800a40a:	2100      	movs	r1, #0
 800a40c:	60f9      	str	r1, [r7, #12]
 800a40e:	2100      	movs	r1, #0
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a412:	2100      	movs	r1, #0
 800a414:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a416:	4952      	ldr	r1, [pc, #328]	; (800a560 <HAL_RCC_GetSysClockFreq+0x160>)
 800a418:	6889      	ldr	r1, [r1, #8]
 800a41a:	f001 010c 	and.w	r1, r1, #12
 800a41e:	2908      	cmp	r1, #8
 800a420:	d00d      	beq.n	800a43e <HAL_RCC_GetSysClockFreq+0x3e>
 800a422:	2908      	cmp	r1, #8
 800a424:	f200 8094 	bhi.w	800a550 <HAL_RCC_GetSysClockFreq+0x150>
 800a428:	2900      	cmp	r1, #0
 800a42a:	d002      	beq.n	800a432 <HAL_RCC_GetSysClockFreq+0x32>
 800a42c:	2904      	cmp	r1, #4
 800a42e:	d003      	beq.n	800a438 <HAL_RCC_GetSysClockFreq+0x38>
 800a430:	e08e      	b.n	800a550 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a432:	4b4c      	ldr	r3, [pc, #304]	; (800a564 <HAL_RCC_GetSysClockFreq+0x164>)
 800a434:	60bb      	str	r3, [r7, #8]
       break;
 800a436:	e08e      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a438:	4b4b      	ldr	r3, [pc, #300]	; (800a568 <HAL_RCC_GetSysClockFreq+0x168>)
 800a43a:	60bb      	str	r3, [r7, #8]
      break;
 800a43c:	e08b      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a43e:	4948      	ldr	r1, [pc, #288]	; (800a560 <HAL_RCC_GetSysClockFreq+0x160>)
 800a440:	6849      	ldr	r1, [r1, #4]
 800a442:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a446:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a448:	4945      	ldr	r1, [pc, #276]	; (800a560 <HAL_RCC_GetSysClockFreq+0x160>)
 800a44a:	6849      	ldr	r1, [r1, #4]
 800a44c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a450:	2900      	cmp	r1, #0
 800a452:	d024      	beq.n	800a49e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a454:	4942      	ldr	r1, [pc, #264]	; (800a560 <HAL_RCC_GetSysClockFreq+0x160>)
 800a456:	6849      	ldr	r1, [r1, #4]
 800a458:	0989      	lsrs	r1, r1, #6
 800a45a:	4608      	mov	r0, r1
 800a45c:	f04f 0100 	mov.w	r1, #0
 800a460:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a464:	f04f 0500 	mov.w	r5, #0
 800a468:	ea00 0204 	and.w	r2, r0, r4
 800a46c:	ea01 0305 	and.w	r3, r1, r5
 800a470:	493d      	ldr	r1, [pc, #244]	; (800a568 <HAL_RCC_GetSysClockFreq+0x168>)
 800a472:	fb01 f003 	mul.w	r0, r1, r3
 800a476:	2100      	movs	r1, #0
 800a478:	fb01 f102 	mul.w	r1, r1, r2
 800a47c:	1844      	adds	r4, r0, r1
 800a47e:	493a      	ldr	r1, [pc, #232]	; (800a568 <HAL_RCC_GetSysClockFreq+0x168>)
 800a480:	fba2 0101 	umull	r0, r1, r2, r1
 800a484:	1863      	adds	r3, r4, r1
 800a486:	4619      	mov	r1, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	f7f6 fbfa 	bl	8000c88 <__aeabi_uldivmod>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4613      	mov	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	e04a      	b.n	800a534 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a49e:	4b30      	ldr	r3, [pc, #192]	; (800a560 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	099b      	lsrs	r3, r3, #6
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f04f 0300 	mov.w	r3, #0
 800a4aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a4ae:	f04f 0100 	mov.w	r1, #0
 800a4b2:	ea02 0400 	and.w	r4, r2, r0
 800a4b6:	ea03 0501 	and.w	r5, r3, r1
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	4629      	mov	r1, r5
 800a4be:	f04f 0200 	mov.w	r2, #0
 800a4c2:	f04f 0300 	mov.w	r3, #0
 800a4c6:	014b      	lsls	r3, r1, #5
 800a4c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a4cc:	0142      	lsls	r2, r0, #5
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	1b00      	subs	r0, r0, r4
 800a4d4:	eb61 0105 	sbc.w	r1, r1, r5
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	f04f 0300 	mov.w	r3, #0
 800a4e0:	018b      	lsls	r3, r1, #6
 800a4e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a4e6:	0182      	lsls	r2, r0, #6
 800a4e8:	1a12      	subs	r2, r2, r0
 800a4ea:	eb63 0301 	sbc.w	r3, r3, r1
 800a4ee:	f04f 0000 	mov.w	r0, #0
 800a4f2:	f04f 0100 	mov.w	r1, #0
 800a4f6:	00d9      	lsls	r1, r3, #3
 800a4f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4fc:	00d0      	lsls	r0, r2, #3
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	1912      	adds	r2, r2, r4
 800a504:	eb45 0303 	adc.w	r3, r5, r3
 800a508:	f04f 0000 	mov.w	r0, #0
 800a50c:	f04f 0100 	mov.w	r1, #0
 800a510:	0299      	lsls	r1, r3, #10
 800a512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a516:	0290      	lsls	r0, r2, #10
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4610      	mov	r0, r2
 800a51e:	4619      	mov	r1, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	461a      	mov	r2, r3
 800a524:	f04f 0300 	mov.w	r3, #0
 800a528:	f7f6 fbae 	bl	8000c88 <__aeabi_uldivmod>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4613      	mov	r3, r2
 800a532:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <HAL_RCC_GetSysClockFreq+0x160>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	0c1b      	lsrs	r3, r3, #16
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	3301      	adds	r3, #1
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54c:	60bb      	str	r3, [r7, #8]
      break;
 800a54e:	e002      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <HAL_RCC_GetSysClockFreq+0x164>)
 800a552:	60bb      	str	r3, [r7, #8]
      break;
 800a554:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a556:	68bb      	ldr	r3, [r7, #8]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bdb0      	pop	{r4, r5, r7, pc}
 800a560:	40023800 	.word	0x40023800
 800a564:	00f42400 	.word	0x00f42400
 800a568:	017d7840 	.word	0x017d7840

0800a56c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <HAL_RCC_GetHCLKFreq+0x14>)
 800a572:	681b      	ldr	r3, [r3, #0]
}
 800a574:	4618      	mov	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	2000039c 	.word	0x2000039c

0800a584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a588:	f7ff fff0 	bl	800a56c <HAL_RCC_GetHCLKFreq>
 800a58c:	4602      	mov	r2, r0
 800a58e:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	0a9b      	lsrs	r3, r3, #10
 800a594:	f003 0307 	and.w	r3, r3, #7
 800a598:	4903      	ldr	r1, [pc, #12]	; (800a5a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a59a:	5ccb      	ldrb	r3, [r1, r3]
 800a59c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	40023800 	.word	0x40023800
 800a5a8:	08026e7c 	.word	0x08026e7c

0800a5ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a5b0:	f7ff ffdc 	bl	800a56c <HAL_RCC_GetHCLKFreq>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	0b5b      	lsrs	r3, r3, #13
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	4903      	ldr	r1, [pc, #12]	; (800a5d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5c2:	5ccb      	ldrb	r3, [r1, r3]
 800a5c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	08026e7c 	.word	0x08026e7c

0800a5d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	220f      	movs	r2, #15
 800a5e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a5e4:	4b12      	ldr	r3, [pc, #72]	; (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f003 0203 	and.w	r2, r3, #3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a5f0:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a5fc:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a608:	4b09      	ldr	r3, [pc, #36]	; (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	08db      	lsrs	r3, r3, #3
 800a60e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a616:	4b07      	ldr	r3, [pc, #28]	; (800a634 <HAL_RCC_GetClockConfig+0x60>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0207 	and.w	r2, r3, #7
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	601a      	str	r2, [r3, #0]
}
 800a622:	bf00      	nop
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	40023800 	.word	0x40023800
 800a634:	40023c00 	.word	0x40023c00

0800a638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e07b      	b.n	800a742 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d108      	bne.n	800a664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a65a:	d009      	beq.n	800a670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	61da      	str	r2, [r3, #28]
 800a662:	e005      	b.n	800a670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d106      	bne.n	800a690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7fb fe16 	bl	80062bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f4:	ea42 0103 	orr.w	r1, r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	0c1b      	lsrs	r3, r3, #16
 800a70e:	f003 0104 	and.w	r1, r3, #4
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	f003 0210 	and.w	r2, r3, #16
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	430a      	orrs	r2, r1
 800a720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b088      	sub	sp, #32
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4613      	mov	r3, r2
 800a758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a764:	2b01      	cmp	r3, #1
 800a766:	d101      	bne.n	800a76c <HAL_SPI_Transmit+0x22>
 800a768:	2302      	movs	r3, #2
 800a76a:	e126      	b.n	800a9ba <HAL_SPI_Transmit+0x270>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a774:	f7fc fc62 	bl	800703c <HAL_GetTick>
 800a778:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b01      	cmp	r3, #1
 800a788:	d002      	beq.n	800a790 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a78a:	2302      	movs	r3, #2
 800a78c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a78e:	e10b      	b.n	800a9a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <HAL_SPI_Transmit+0x52>
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7a0:	e102      	b.n	800a9a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	88fa      	ldrh	r2, [r7, #6]
 800a7ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	88fa      	ldrh	r2, [r7, #6]
 800a7c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7e8:	d10f      	bne.n	800a80a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a808:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a814:	2b40      	cmp	r3, #64	; 0x40
 800a816:	d007      	beq.n	800a828 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a830:	d14b      	bne.n	800a8ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <HAL_SPI_Transmit+0xf6>
 800a83a:	8afb      	ldrh	r3, [r7, #22]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d13e      	bne.n	800a8be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a844:	881a      	ldrh	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a850:	1c9a      	adds	r2, r3, #2
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b29a      	uxth	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a864:	e02b      	b.n	800a8be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b02      	cmp	r3, #2
 800a872:	d112      	bne.n	800a89a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a878:	881a      	ldrh	r2, [r3, #0]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a884:	1c9a      	adds	r2, r3, #2
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a88e:	b29b      	uxth	r3, r3
 800a890:	3b01      	subs	r3, #1
 800a892:	b29a      	uxth	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	86da      	strh	r2, [r3, #54]	; 0x36
 800a898:	e011      	b.n	800a8be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a89a:	f7fc fbcf 	bl	800703c <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d803      	bhi.n	800a8b2 <HAL_SPI_Transmit+0x168>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d102      	bne.n	800a8b8 <HAL_SPI_Transmit+0x16e>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a8bc:	e074      	b.n	800a9a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1ce      	bne.n	800a866 <HAL_SPI_Transmit+0x11c>
 800a8c8:	e04c      	b.n	800a964 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <HAL_SPI_Transmit+0x18e>
 800a8d2:	8afb      	ldrh	r3, [r7, #22]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d140      	bne.n	800a95a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	330c      	adds	r3, #12
 800a8e2:	7812      	ldrb	r2, [r2, #0]
 800a8e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a8fe:	e02c      	b.n	800a95a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d113      	bne.n	800a936 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	330c      	adds	r3, #12
 800a918:	7812      	ldrb	r2, [r2, #0]
 800a91a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	86da      	strh	r2, [r3, #54]	; 0x36
 800a934:	e011      	b.n	800a95a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a936:	f7fc fb81 	bl	800703c <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d803      	bhi.n	800a94e <HAL_SPI_Transmit+0x204>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d102      	bne.n	800a954 <HAL_SPI_Transmit+0x20a>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a958:	e026      	b.n	800a9a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a95e:	b29b      	uxth	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1cd      	bne.n	800a900 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 fbcb 	bl	800b104 <SPI_EndRxTxTransaction>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2220      	movs	r2, #32
 800a978:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10a      	bne.n	800a998 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a982:	2300      	movs	r3, #0
 800a984:	613b      	str	r3, [r7, #16]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	613b      	str	r3, [r7, #16]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	613b      	str	r3, [r7, #16]
 800a996:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	77fb      	strb	r3, [r7, #31]
 800a9a4:	e000      	b.n	800a9a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a9a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b088      	sub	sp, #32
 800a9c6:	af02      	add	r7, sp, #8
 800a9c8:	60f8      	str	r0, [r7, #12]
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	603b      	str	r3, [r7, #0]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9de:	d112      	bne.n	800aa06 <HAL_SPI_Receive+0x44>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10e      	bne.n	800aa06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a9f0:	88fa      	ldrh	r2, [r7, #6]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 f8f1 	bl	800abe4 <HAL_SPI_TransmitReceive>
 800aa02:	4603      	mov	r3, r0
 800aa04:	e0ea      	b.n	800abdc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d101      	bne.n	800aa14 <HAL_SPI_Receive+0x52>
 800aa10:	2302      	movs	r3, #2
 800aa12:	e0e3      	b.n	800abdc <HAL_SPI_Receive+0x21a>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa1c:	f7fc fb0e 	bl	800703c <HAL_GetTick>
 800aa20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d002      	beq.n	800aa34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa32:	e0ca      	b.n	800abca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <HAL_SPI_Receive+0x7e>
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d102      	bne.n	800aa46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa44:	e0c1      	b.n	800abca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2204      	movs	r2, #4
 800aa4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	88fa      	ldrh	r2, [r7, #6]
 800aa5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	88fa      	ldrh	r2, [r7, #6]
 800aa64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8c:	d10f      	bne.n	800aaae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aaac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab8:	2b40      	cmp	r3, #64	; 0x40
 800aaba:	d007      	beq.n	800aacc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d162      	bne.n	800ab9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aad4:	e02e      	b.n	800ab34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f003 0301 	and.w	r3, r3, #1
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d115      	bne.n	800ab10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f103 020c 	add.w	r2, r3, #12
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	7812      	ldrb	r2, [r2, #0]
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	3b01      	subs	r3, #1
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab0e:	e011      	b.n	800ab34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab10:	f7fc fa94 	bl	800703c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d803      	bhi.n	800ab28 <HAL_SPI_Receive+0x166>
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab26:	d102      	bne.n	800ab2e <HAL_SPI_Receive+0x16c>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ab32:	e04a      	b.n	800abca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1cb      	bne.n	800aad6 <HAL_SPI_Receive+0x114>
 800ab3e:	e031      	b.n	800aba4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d113      	bne.n	800ab76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	b292      	uxth	r2, r2
 800ab5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab60:	1c9a      	adds	r2, r3, #2
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab74:	e011      	b.n	800ab9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab76:	f7fc fa61 	bl	800703c <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d803      	bhi.n	800ab8e <HAL_SPI_Receive+0x1cc>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8c:	d102      	bne.n	800ab94 <HAL_SPI_Receive+0x1d2>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ab98:	e017      	b.n	800abca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1cd      	bne.n	800ab40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 fa45 	bl	800b038 <SPI_EndRxTransaction>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	75fb      	strb	r3, [r7, #23]
 800abc6:	e000      	b.n	800abca <HAL_SPI_Receive+0x208>
  }

error :
 800abc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800abda:	7dfb      	ldrb	r3, [r7, #23]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08c      	sub	sp, #48	; 0x30
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800abf2:	2301      	movs	r3, #1
 800abf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d101      	bne.n	800ac0a <HAL_SPI_TransmitReceive+0x26>
 800ac06:	2302      	movs	r3, #2
 800ac08:	e18a      	b.n	800af20 <HAL_SPI_TransmitReceive+0x33c>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac12:	f7fc fa13 	bl	800703c <HAL_GetTick>
 800ac16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ac28:	887b      	ldrh	r3, [r7, #2]
 800ac2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d00f      	beq.n	800ac54 <HAL_SPI_TransmitReceive+0x70>
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac3a:	d107      	bne.n	800ac4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d103      	bne.n	800ac4c <HAL_SPI_TransmitReceive+0x68>
 800ac44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d003      	beq.n	800ac54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac52:	e15b      	b.n	800af0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d005      	beq.n	800ac66 <HAL_SPI_TransmitReceive+0x82>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <HAL_SPI_TransmitReceive+0x82>
 800ac60:	887b      	ldrh	r3, [r7, #2]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac6c:	e14e      	b.n	800af0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d003      	beq.n	800ac82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	887a      	ldrh	r2, [r7, #2]
 800ac92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	887a      	ldrh	r2, [r7, #2]
 800ac98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	887a      	ldrh	r2, [r7, #2]
 800aca4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	887a      	ldrh	r2, [r7, #2]
 800acaa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc2:	2b40      	cmp	r3, #64	; 0x40
 800acc4:	d007      	beq.n	800acd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acde:	d178      	bne.n	800add2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <HAL_SPI_TransmitReceive+0x10a>
 800ace8:	8b7b      	ldrh	r3, [r7, #26]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d166      	bne.n	800adbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf2:	881a      	ldrh	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	1c9a      	adds	r2, r3, #2
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad12:	e053      	b.n	800adbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d11b      	bne.n	800ad5a <HAL_SPI_TransmitReceive+0x176>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d016      	beq.n	800ad5a <HAL_SPI_TransmitReceive+0x176>
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d113      	bne.n	800ad5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	881a      	ldrh	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	1c9a      	adds	r2, r3, #2
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d119      	bne.n	800ad9c <HAL_SPI_TransmitReceive+0x1b8>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d014      	beq.n	800ad9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	b292      	uxth	r2, r2
 800ad7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad84:	1c9a      	adds	r2, r3, #2
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad9c:	f7fc f94e 	bl	800703c <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d807      	bhi.n	800adbc <HAL_SPI_TransmitReceive+0x1d8>
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d003      	beq.n	800adbc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800adba:	e0a7      	b.n	800af0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1a6      	bne.n	800ad14 <HAL_SPI_TransmitReceive+0x130>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1a1      	bne.n	800ad14 <HAL_SPI_TransmitReceive+0x130>
 800add0:	e07c      	b.n	800aecc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <HAL_SPI_TransmitReceive+0x1fc>
 800adda:	8b7b      	ldrh	r3, [r7, #26]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d16b      	bne.n	800aeb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	330c      	adds	r3, #12
 800adea:	7812      	ldrb	r2, [r2, #0]
 800adec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae06:	e057      	b.n	800aeb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d11c      	bne.n	800ae50 <HAL_SPI_TransmitReceive+0x26c>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d017      	beq.n	800ae50 <HAL_SPI_TransmitReceive+0x26c>
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d114      	bne.n	800ae50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	330c      	adds	r3, #12
 800ae30:	7812      	ldrb	r2, [r2, #0]
 800ae32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	3b01      	subs	r3, #1
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d119      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x2ae>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d014      	beq.n	800ae92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	b2d2      	uxtb	r2, r2
 800ae74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae92:	f7fc f8d3 	bl	800703c <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d803      	bhi.n	800aeaa <HAL_SPI_TransmitReceive+0x2c6>
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea8:	d102      	bne.n	800aeb0 <HAL_SPI_TransmitReceive+0x2cc>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aeb6:	e029      	b.n	800af0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1a2      	bne.n	800ae08 <HAL_SPI_TransmitReceive+0x224>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d19d      	bne.n	800ae08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f917 	bl	800b104 <SPI_EndRxTxTransaction>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2220      	movs	r2, #32
 800aee6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aee8:	e010      	b.n	800af0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	617b      	str	r3, [r7, #20]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	e000      	b.n	800af0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800af0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af20:	4618      	mov	r0, r3
 800af22:	3730      	adds	r7, #48	; 0x30
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	4613      	mov	r3, r2
 800af36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af38:	f7fc f880 	bl	800703c <HAL_GetTick>
 800af3c:	4602      	mov	r2, r0
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	4413      	add	r3, r2
 800af46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af48:	f7fc f878 	bl	800703c <HAL_GetTick>
 800af4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af4e:	4b39      	ldr	r3, [pc, #228]	; (800b034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	015b      	lsls	r3, r3, #5
 800af54:	0d1b      	lsrs	r3, r3, #20
 800af56:	69fa      	ldr	r2, [r7, #28]
 800af58:	fb02 f303 	mul.w	r3, r2, r3
 800af5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af5e:	e054      	b.n	800b00a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af66:	d050      	beq.n	800b00a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af68:	f7fc f868 	bl	800703c <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	429a      	cmp	r2, r3
 800af76:	d902      	bls.n	800af7e <SPI_WaitFlagStateUntilTimeout+0x56>
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d13d      	bne.n	800affa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af96:	d111      	bne.n	800afbc <SPI_WaitFlagStateUntilTimeout+0x94>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa0:	d004      	beq.n	800afac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afaa:	d107      	bne.n	800afbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc4:	d10f      	bne.n	800afe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e017      	b.n	800b02a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	3b01      	subs	r3, #1
 800b008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4013      	ands	r3, r2
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	429a      	cmp	r2, r3
 800b018:	bf0c      	ite	eq
 800b01a:	2301      	moveq	r3, #1
 800b01c:	2300      	movne	r3, #0
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	461a      	mov	r2, r3
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	429a      	cmp	r2, r3
 800b026:	d19b      	bne.n	800af60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3720      	adds	r7, #32
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	2000039c 	.word	0x2000039c

0800b038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b04c:	d111      	bne.n	800b072 <SPI_EndRxTransaction+0x3a>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b056:	d004      	beq.n	800b062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b060:	d107      	bne.n	800b072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b070:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b07a:	d12a      	bne.n	800b0d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b084:	d012      	beq.n	800b0ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2200      	movs	r2, #0
 800b08e:	2180      	movs	r1, #128	; 0x80
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f7ff ff49 	bl	800af28 <SPI_WaitFlagStateUntilTimeout>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d02d      	beq.n	800b0f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a0:	f043 0220 	orr.w	r2, r3, #32
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e026      	b.n	800b0fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff ff36 	bl	800af28 <SPI_WaitFlagStateUntilTimeout>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d01a      	beq.n	800b0f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c6:	f043 0220 	orr.w	r2, r3, #32
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e013      	b.n	800b0fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2101      	movs	r1, #1
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7ff ff23 	bl	800af28 <SPI_WaitFlagStateUntilTimeout>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ec:	f043 0220 	orr.w	r2, r3, #32
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e000      	b.n	800b0fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af02      	add	r7, sp, #8
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b110:	4b1b      	ldr	r3, [pc, #108]	; (800b180 <SPI_EndRxTxTransaction+0x7c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a1b      	ldr	r2, [pc, #108]	; (800b184 <SPI_EndRxTxTransaction+0x80>)
 800b116:	fba2 2303 	umull	r2, r3, r2, r3
 800b11a:	0d5b      	lsrs	r3, r3, #21
 800b11c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b120:	fb02 f303 	mul.w	r3, r2, r3
 800b124:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b12e:	d112      	bne.n	800b156 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2200      	movs	r2, #0
 800b138:	2180      	movs	r1, #128	; 0x80
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f7ff fef4 	bl	800af28 <SPI_WaitFlagStateUntilTimeout>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d016      	beq.n	800b174 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14a:	f043 0220 	orr.w	r2, r3, #32
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e00f      	b.n	800b176 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	3b01      	subs	r3, #1
 800b160:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16c:	2b80      	cmp	r3, #128	; 0x80
 800b16e:	d0f2      	beq.n	800b156 <SPI_EndRxTxTransaction+0x52>
 800b170:	e000      	b.n	800b174 <SPI_EndRxTxTransaction+0x70>
        break;
 800b172:	bf00      	nop
  }

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	2000039c 	.word	0x2000039c
 800b184:	165e9f81 	.word	0x165e9f81

0800b188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e041      	b.n	800b21e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7fb f8cc 	bl	800634c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f000 fafe 	bl	800b7c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d001      	beq.n	800b240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e046      	b.n	800b2ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a23      	ldr	r2, [pc, #140]	; (800b2dc <HAL_TIM_Base_Start+0xb4>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d022      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b25a:	d01d      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <HAL_TIM_Base_Start+0xb8>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d018      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a1e      	ldr	r2, [pc, #120]	; (800b2e4 <HAL_TIM_Base_Start+0xbc>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d013      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a1c      	ldr	r2, [pc, #112]	; (800b2e8 <HAL_TIM_Base_Start+0xc0>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00e      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a1b      	ldr	r2, [pc, #108]	; (800b2ec <HAL_TIM_Base_Start+0xc4>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d009      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a19      	ldr	r2, [pc, #100]	; (800b2f0 <HAL_TIM_Base_Start+0xc8>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d004      	beq.n	800b298 <HAL_TIM_Base_Start+0x70>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <HAL_TIM_Base_Start+0xcc>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d111      	bne.n	800b2bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b06      	cmp	r3, #6
 800b2a8:	d010      	beq.n	800b2cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f042 0201 	orr.w	r2, r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ba:	e007      	b.n	800b2cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	40010000 	.word	0x40010000
 800b2e0:	40000400 	.word	0x40000400
 800b2e4:	40000800 	.word	0x40000800
 800b2e8:	40000c00 	.word	0x40000c00
 800b2ec:	40010400 	.word	0x40010400
 800b2f0:	40014000 	.word	0x40014000
 800b2f4:	40001800 	.word	0x40001800

0800b2f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d001      	beq.n	800b310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e04e      	b.n	800b3ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2202      	movs	r2, #2
 800b314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f042 0201 	orr.w	r2, r2, #1
 800b326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a23      	ldr	r2, [pc, #140]	; (800b3bc <HAL_TIM_Base_Start_IT+0xc4>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d022      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33a:	d01d      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1f      	ldr	r2, [pc, #124]	; (800b3c0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d018      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a1e      	ldr	r2, [pc, #120]	; (800b3c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d013      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a1c      	ldr	r2, [pc, #112]	; (800b3c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00e      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <HAL_TIM_Base_Start_IT+0xd4>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d009      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a19      	ldr	r2, [pc, #100]	; (800b3d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d004      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0x80>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a18      	ldr	r2, [pc, #96]	; (800b3d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d111      	bne.n	800b39c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b06      	cmp	r3, #6
 800b388:	d010      	beq.n	800b3ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f042 0201 	orr.w	r2, r2, #1
 800b398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39a:	e007      	b.n	800b3ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40000400 	.word	0x40000400
 800b3c4:	40000800 	.word	0x40000800
 800b3c8:	40000c00 	.word	0x40000c00
 800b3cc:	40010400 	.word	0x40010400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	40001800 	.word	0x40001800

0800b3d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	f003 0302 	and.w	r3, r3, #2
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d122      	bne.n	800b434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d11b      	bne.n	800b434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0202 	mvn.w	r2, #2
 800b404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f9b5 	bl	800b78a <HAL_TIM_IC_CaptureCallback>
 800b420:	e005      	b.n	800b42e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f9a7 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f9b8 	bl	800b79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	2b04      	cmp	r3, #4
 800b440:	d122      	bne.n	800b488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d11b      	bne.n	800b488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f06f 0204 	mvn.w	r2, #4
 800b458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2202      	movs	r2, #2
 800b45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f98b 	bl	800b78a <HAL_TIM_IC_CaptureCallback>
 800b474:	e005      	b.n	800b482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f97d 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f98e 	bl	800b79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	2b08      	cmp	r3, #8
 800b494:	d122      	bne.n	800b4dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f003 0308 	and.w	r3, r3, #8
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d11b      	bne.n	800b4dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f06f 0208 	mvn.w	r2, #8
 800b4ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f961 	bl	800b78a <HAL_TIM_IC_CaptureCallback>
 800b4c8:	e005      	b.n	800b4d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f953 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f964 	bl	800b79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f003 0310 	and.w	r3, r3, #16
 800b4e6:	2b10      	cmp	r3, #16
 800b4e8:	d122      	bne.n	800b530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f003 0310 	and.w	r3, r3, #16
 800b4f4:	2b10      	cmp	r3, #16
 800b4f6:	d11b      	bne.n	800b530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f06f 0210 	mvn.w	r2, #16
 800b500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2208      	movs	r2, #8
 800b506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b512:	2b00      	cmp	r3, #0
 800b514:	d003      	beq.n	800b51e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f937 	bl	800b78a <HAL_TIM_IC_CaptureCallback>
 800b51c:	e005      	b.n	800b52a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f929 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f93a 	bl	800b79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d10e      	bne.n	800b55c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d107      	bne.n	800b55c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f06f 0201 	mvn.w	r2, #1
 800b554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7f9 fb2e 	bl	8004bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b566:	2b80      	cmp	r3, #128	; 0x80
 800b568:	d10e      	bne.n	800b588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b574:	2b80      	cmp	r3, #128	; 0x80
 800b576:	d107      	bne.n	800b588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fae0 	bl	800bb48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b592:	2b40      	cmp	r3, #64	; 0x40
 800b594:	d10e      	bne.n	800b5b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a0:	2b40      	cmp	r3, #64	; 0x40
 800b5a2:	d107      	bne.n	800b5b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f8ff 	bl	800b7b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d10e      	bne.n	800b5e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	f003 0320 	and.w	r3, r3, #32
 800b5cc:	2b20      	cmp	r3, #32
 800b5ce:	d107      	bne.n	800b5e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f06f 0220 	mvn.w	r2, #32
 800b5d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 faaa 	bl	800bb34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_TIM_ConfigClockSource+0x1c>
 800b600:	2302      	movs	r3, #2
 800b602:	e0b4      	b.n	800b76e <HAL_TIM_ConfigClockSource+0x186>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2202      	movs	r2, #2
 800b610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b62a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b63c:	d03e      	beq.n	800b6bc <HAL_TIM_ConfigClockSource+0xd4>
 800b63e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b642:	f200 8087 	bhi.w	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64a:	f000 8086 	beq.w	800b75a <HAL_TIM_ConfigClockSource+0x172>
 800b64e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b652:	d87f      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b654:	2b70      	cmp	r3, #112	; 0x70
 800b656:	d01a      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0xa6>
 800b658:	2b70      	cmp	r3, #112	; 0x70
 800b65a:	d87b      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b65c:	2b60      	cmp	r3, #96	; 0x60
 800b65e:	d050      	beq.n	800b702 <HAL_TIM_ConfigClockSource+0x11a>
 800b660:	2b60      	cmp	r3, #96	; 0x60
 800b662:	d877      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b664:	2b50      	cmp	r3, #80	; 0x50
 800b666:	d03c      	beq.n	800b6e2 <HAL_TIM_ConfigClockSource+0xfa>
 800b668:	2b50      	cmp	r3, #80	; 0x50
 800b66a:	d873      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b66c:	2b40      	cmp	r3, #64	; 0x40
 800b66e:	d058      	beq.n	800b722 <HAL_TIM_ConfigClockSource+0x13a>
 800b670:	2b40      	cmp	r3, #64	; 0x40
 800b672:	d86f      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b674:	2b30      	cmp	r3, #48	; 0x30
 800b676:	d064      	beq.n	800b742 <HAL_TIM_ConfigClockSource+0x15a>
 800b678:	2b30      	cmp	r3, #48	; 0x30
 800b67a:	d86b      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b67c:	2b20      	cmp	r3, #32
 800b67e:	d060      	beq.n	800b742 <HAL_TIM_ConfigClockSource+0x15a>
 800b680:	2b20      	cmp	r3, #32
 800b682:	d867      	bhi.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
 800b684:	2b00      	cmp	r3, #0
 800b686:	d05c      	beq.n	800b742 <HAL_TIM_ConfigClockSource+0x15a>
 800b688:	2b10      	cmp	r3, #16
 800b68a:	d05a      	beq.n	800b742 <HAL_TIM_ConfigClockSource+0x15a>
 800b68c:	e062      	b.n	800b754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6818      	ldr	r0, [r3, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	6899      	ldr	r1, [r3, #8]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	f000 f9ad 	bl	800b9fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b6b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	609a      	str	r2, [r3, #8]
      break;
 800b6ba:	e04f      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	6899      	ldr	r1, [r3, #8]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	f000 f996 	bl	800b9fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689a      	ldr	r2, [r3, #8]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6de:	609a      	str	r2, [r3, #8]
      break;
 800b6e0:	e03c      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	6859      	ldr	r1, [r3, #4]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f000 f90a 	bl	800b908 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2150      	movs	r1, #80	; 0x50
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 f963 	bl	800b9c6 <TIM_ITRx_SetConfig>
      break;
 800b700:	e02c      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6818      	ldr	r0, [r3, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	6859      	ldr	r1, [r3, #4]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	461a      	mov	r2, r3
 800b710:	f000 f929 	bl	800b966 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2160      	movs	r1, #96	; 0x60
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 f953 	bl	800b9c6 <TIM_ITRx_SetConfig>
      break;
 800b720:	e01c      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	6859      	ldr	r1, [r3, #4]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	461a      	mov	r2, r3
 800b730:	f000 f8ea 	bl	800b908 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2140      	movs	r1, #64	; 0x40
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 f943 	bl	800b9c6 <TIM_ITRx_SetConfig>
      break;
 800b740:	e00c      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f000 f93a 	bl	800b9c6 <TIM_ITRx_SetConfig>
      break;
 800b752:	e003      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	73fb      	strb	r3, [r7, #15]
      break;
 800b758:	e000      	b.n	800b75c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b75a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b77e:	bf00      	nop
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a40      	ldr	r2, [pc, #256]	; (800b8dc <TIM_Base_SetConfig+0x114>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d013      	beq.n	800b808 <TIM_Base_SetConfig+0x40>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e6:	d00f      	beq.n	800b808 <TIM_Base_SetConfig+0x40>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a3d      	ldr	r2, [pc, #244]	; (800b8e0 <TIM_Base_SetConfig+0x118>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d00b      	beq.n	800b808 <TIM_Base_SetConfig+0x40>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a3c      	ldr	r2, [pc, #240]	; (800b8e4 <TIM_Base_SetConfig+0x11c>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d007      	beq.n	800b808 <TIM_Base_SetConfig+0x40>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a3b      	ldr	r2, [pc, #236]	; (800b8e8 <TIM_Base_SetConfig+0x120>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d003      	beq.n	800b808 <TIM_Base_SetConfig+0x40>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a3a      	ldr	r2, [pc, #232]	; (800b8ec <TIM_Base_SetConfig+0x124>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d108      	bne.n	800b81a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a2f      	ldr	r2, [pc, #188]	; (800b8dc <TIM_Base_SetConfig+0x114>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d02b      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b828:	d027      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a2c      	ldr	r2, [pc, #176]	; (800b8e0 <TIM_Base_SetConfig+0x118>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d023      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a2b      	ldr	r2, [pc, #172]	; (800b8e4 <TIM_Base_SetConfig+0x11c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d01f      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a2a      	ldr	r2, [pc, #168]	; (800b8e8 <TIM_Base_SetConfig+0x120>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d01b      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a29      	ldr	r2, [pc, #164]	; (800b8ec <TIM_Base_SetConfig+0x124>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d017      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a28      	ldr	r2, [pc, #160]	; (800b8f0 <TIM_Base_SetConfig+0x128>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d013      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a27      	ldr	r2, [pc, #156]	; (800b8f4 <TIM_Base_SetConfig+0x12c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a26      	ldr	r2, [pc, #152]	; (800b8f8 <TIM_Base_SetConfig+0x130>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a25      	ldr	r2, [pc, #148]	; (800b8fc <TIM_Base_SetConfig+0x134>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a24      	ldr	r2, [pc, #144]	; (800b900 <TIM_Base_SetConfig+0x138>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_Base_SetConfig+0xb2>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a23      	ldr	r2, [pc, #140]	; (800b904 <TIM_Base_SetConfig+0x13c>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d108      	bne.n	800b88c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <TIM_Base_SetConfig+0x114>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d003      	beq.n	800b8c0 <TIM_Base_SetConfig+0xf8>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a0c      	ldr	r2, [pc, #48]	; (800b8ec <TIM_Base_SetConfig+0x124>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d103      	bne.n	800b8c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	691a      	ldr	r2, [r3, #16]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	615a      	str	r2, [r3, #20]
}
 800b8ce:	bf00      	nop
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	40010000 	.word	0x40010000
 800b8e0:	40000400 	.word	0x40000400
 800b8e4:	40000800 	.word	0x40000800
 800b8e8:	40000c00 	.word	0x40000c00
 800b8ec:	40010400 	.word	0x40010400
 800b8f0:	40014000 	.word	0x40014000
 800b8f4:	40014400 	.word	0x40014400
 800b8f8:	40014800 	.word	0x40014800
 800b8fc:	40001800 	.word	0x40001800
 800b900:	40001c00 	.word	0x40001c00
 800b904:	40002000 	.word	0x40002000

0800b908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a1b      	ldr	r3, [r3, #32]
 800b918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	f023 0201 	bic.w	r2, r3, #1
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f023 030a 	bic.w	r3, r3, #10
 800b944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	621a      	str	r2, [r3, #32]
}
 800b95a:	bf00      	nop
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b966:	b480      	push	{r7}
 800b968:	b087      	sub	sp, #28
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	f023 0210 	bic.w	r2, r3, #16
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6a1b      	ldr	r3, [r3, #32]
 800b988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	031b      	lsls	r3, r3, #12
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	4313      	orrs	r3, r2
 800b99a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	621a      	str	r2, [r3, #32]
}
 800b9ba:	bf00      	nop
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b085      	sub	sp, #20
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	f043 0307 	orr.w	r3, r3, #7
 800b9e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	609a      	str	r2, [r3, #8]
}
 800b9f0:	bf00      	nop
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	021a      	lsls	r2, r3, #8
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	431a      	orrs	r2, r3
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	609a      	str	r2, [r3, #8]
}
 800ba30:	bf00      	nop
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e05a      	b.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a21      	ldr	r2, [pc, #132]	; (800bb18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d022      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa0:	d01d      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a1d      	ldr	r2, [pc, #116]	; (800bb1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d018      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a1b      	ldr	r2, [pc, #108]	; (800bb20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d013      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d00e      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a18      	ldr	r2, [pc, #96]	; (800bb28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d009      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a17      	ldr	r2, [pc, #92]	; (800bb2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d004      	beq.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a15      	ldr	r2, [pc, #84]	; (800bb30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d10c      	bne.n	800baf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	4313      	orrs	r3, r2
 800baee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	40010000 	.word	0x40010000
 800bb1c:	40000400 	.word	0x40000400
 800bb20:	40000800 	.word	0x40000800
 800bb24:	40000c00 	.word	0x40000c00
 800bb28:	40010400 	.word	0x40010400
 800bb2c:	40014000 	.word	0x40014000
 800bb30:	40001800 	.word	0x40001800

0800bb34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e03f      	b.n	800bbee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7fa fc20 	bl	80063c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2224      	movs	r2, #36	; 0x24
 800bb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 ffc7 	bl	800cb34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	691a      	ldr	r2, [r3, #16]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	695a      	ldr	r2, [r3, #20]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e021      	b.n	800bc4c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2224      	movs	r2, #36	; 0x24
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc1e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7fa fcc3 	bl	80065ac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08a      	sub	sp, #40	; 0x28
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	4613      	mov	r3, r2
 800bc62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	d17c      	bne.n	800bd6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <HAL_UART_Transmit+0x2c>
 800bc7a:	88fb      	ldrh	r3, [r7, #6]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e075      	b.n	800bd70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d101      	bne.n	800bc92 <HAL_UART_Transmit+0x3e>
 800bc8e:	2302      	movs	r3, #2
 800bc90:	e06e      	b.n	800bd70 <HAL_UART_Transmit+0x11c>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2221      	movs	r2, #33	; 0x21
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bca8:	f7fb f9c8 	bl	800703c <HAL_GetTick>
 800bcac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	88fa      	ldrh	r2, [r7, #6]
 800bcb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	88fa      	ldrh	r2, [r7, #6]
 800bcb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcc2:	d108      	bne.n	800bcd6 <HAL_UART_Transmit+0x82>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bccc:	2300      	movs	r3, #0
 800bcce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	61bb      	str	r3, [r7, #24]
 800bcd4:	e003      	b.n	800bcde <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bce6:	e02a      	b.n	800bd3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2180      	movs	r1, #128	; 0x80
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 fc54 	bl	800c5a0 <UART_WaitOnFlagUntilTimeout>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e036      	b.n	800bd70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10b      	bne.n	800bd20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	3302      	adds	r3, #2
 800bd1c:	61bb      	str	r3, [r7, #24]
 800bd1e:	e007      	b.n	800bd30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	3b01      	subs	r3, #1
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1cf      	bne.n	800bce8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2140      	movs	r1, #64	; 0x40
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f000 fc24 	bl	800c5a0 <UART_WaitOnFlagUntilTimeout>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e006      	b.n	800bd70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e000      	b.n	800bd70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bd6e:	2302      	movs	r3, #2
  }
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3720      	adds	r7, #32
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08c      	sub	sp, #48	; 0x30
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d152      	bne.n	800be38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e04b      	b.n	800be3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e044      	b.n	800be3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 fc59 	bl	800c67c <UART_Start_Receive_DMA>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bdd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d12c      	bne.n	800be32 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d125      	bne.n	800be2c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bde0:	2300      	movs	r3, #0
 800bde2:	613b      	str	r3, [r7, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	330c      	adds	r3, #12
 800bdfc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	617b      	str	r3, [r7, #20]
   return(result);
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f043 0310 	orr.w	r3, r3, #16
 800be0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	330c      	adds	r3, #12
 800be14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be16:	627a      	str	r2, [r7, #36]	; 0x24
 800be18:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6a39      	ldr	r1, [r7, #32]
 800be1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	61fb      	str	r3, [r7, #28]
   return(result);
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e5      	bne.n	800bdf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800be2a:	e002      	b.n	800be32 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800be32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be36:	e000      	b.n	800be3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800be38:	2302      	movs	r3, #2
  }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3730      	adds	r7, #48	; 0x30
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b0ba      	sub	sp, #232	; 0xe8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800be70:	2300      	movs	r3, #0
 800be72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7a:	f003 030f 	and.w	r3, r3, #15
 800be7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10f      	bne.n	800beaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be8e:	f003 0320 	and.w	r3, r3, #32
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <HAL_UART_IRQHandler+0x66>
 800be96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be9a:	f003 0320 	and.w	r3, r3, #32
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fd8b 	bl	800c9be <UART_Receive_IT>
      return;
 800bea8:	e256      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800beaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 80de 	beq.w	800c070 <HAL_UART_IRQHandler+0x22c>
 800beb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 80d1 	beq.w	800c070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <HAL_UART_IRQHandler+0xae>
 800beda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d005      	beq.n	800bef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	f043 0201 	orr.w	r2, r3, #1
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00b      	beq.n	800bf16 <HAL_UART_IRQHandler+0xd2>
 800befe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	f043 0202 	orr.w	r2, r3, #2
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00b      	beq.n	800bf3a <HAL_UART_IRQHandler+0xf6>
 800bf22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f043 0204 	orr.w	r2, r3, #4
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3e:	f003 0308 	and.w	r3, r3, #8
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d011      	beq.n	800bf6a <HAL_UART_IRQHandler+0x126>
 800bf46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf4a:	f003 0320 	and.w	r3, r3, #32
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d105      	bne.n	800bf5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d005      	beq.n	800bf6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf62:	f043 0208 	orr.w	r2, r3, #8
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 81ed 	beq.w	800c34e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf78:	f003 0320 	and.w	r3, r3, #32
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d008      	beq.n	800bf92 <HAL_UART_IRQHandler+0x14e>
 800bf80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf84:	f003 0320 	and.w	r3, r3, #32
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fd16 	bl	800c9be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf9c:	2b40      	cmp	r3, #64	; 0x40
 800bf9e:	bf0c      	ite	eq
 800bfa0:	2301      	moveq	r3, #1
 800bfa2:	2300      	movne	r3, #0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfae:	f003 0308 	and.w	r3, r3, #8
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d103      	bne.n	800bfbe <HAL_UART_IRQHandler+0x17a>
 800bfb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d04f      	beq.n	800c05e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fc1e 	bl	800c800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfce:	2b40      	cmp	r3, #64	; 0x40
 800bfd0:	d141      	bne.n	800c056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3314      	adds	r3, #20
 800bfd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3314      	adds	r3, #20
 800bffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c00a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1d9      	bne.n	800bfd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c022:	2b00      	cmp	r3, #0
 800c024:	d013      	beq.n	800c04e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	4a7d      	ldr	r2, [pc, #500]	; (800c220 <HAL_UART_IRQHandler+0x3dc>)
 800c02c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c032:	4618      	mov	r0, r3
 800c034:	f7fb ff22 	bl	8007e7c <HAL_DMA_Abort_IT>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d016      	beq.n	800c06c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c04c:	e00e      	b.n	800c06c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f9a4 	bl	800c39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c054:	e00a      	b.n	800c06c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f9a0 	bl	800c39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	e006      	b.n	800c06c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f99c 	bl	800c39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c06a:	e170      	b.n	800c34e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06c:	bf00      	nop
    return;
 800c06e:	e16e      	b.n	800c34e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c074:	2b01      	cmp	r3, #1
 800c076:	f040 814a 	bne.w	800c30e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c07e:	f003 0310 	and.w	r3, r3, #16
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8143 	beq.w	800c30e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 813c 	beq.w	800c30e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c096:	2300      	movs	r3, #0
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b6:	2b40      	cmp	r3, #64	; 0x40
 800c0b8:	f040 80b4 	bne.w	800c224 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8140 	beq.w	800c352 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	f080 8139 	bcs.w	800c352 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f2:	f000 8088 	beq.w	800c206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c10c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	330c      	adds	r3, #12
 800c11e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c122:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c12e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c13a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1d9      	bne.n	800c0f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3314      	adds	r3, #20
 800c148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c154:	f023 0301 	bic.w	r3, r3, #1
 800c158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3314      	adds	r3, #20
 800c162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c16a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c16e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c172:	e841 2300 	strex	r3, r2, [r1]
 800c176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e1      	bne.n	800c142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3314      	adds	r3, #20
 800c184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c18e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3314      	adds	r3, #20
 800c19e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e3      	bne.n	800c17e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ce:	e853 3f00 	ldrex	r3, [r3]
 800c1d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d6:	f023 0310 	bic.w	r3, r3, #16
 800c1da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	330c      	adds	r3, #12
 800c1e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c1ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1f0:	e841 2300 	strex	r3, r2, [r1]
 800c1f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e3      	bne.n	800c1c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	4618      	mov	r0, r3
 800c202:	f7fb fdcb 	bl	8007d9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c20e:	b29b      	uxth	r3, r3
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	b29b      	uxth	r3, r3
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7fa fcc8 	bl	8006bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c21c:	e099      	b.n	800c352 <HAL_UART_IRQHandler+0x50e>
 800c21e:	bf00      	nop
 800c220:	0800c8c7 	.word	0x0800c8c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c238:	b29b      	uxth	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 808b 	beq.w	800c356 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 8086 	beq.w	800c356 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	330c      	adds	r3, #12
 800c250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	e853 3f00 	ldrex	r3, [r3]
 800c258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	330c      	adds	r3, #12
 800c26a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c26e:	647a      	str	r2, [r7, #68]	; 0x44
 800c270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e3      	bne.n	800c24a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3314      	adds	r3, #20
 800c288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	623b      	str	r3, [r7, #32]
   return(result);
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	f023 0301 	bic.w	r3, r3, #1
 800c298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3314      	adds	r3, #20
 800c2a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2a6:	633a      	str	r2, [r7, #48]	; 0x30
 800c2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e3      	bne.n	800c282 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2220      	movs	r2, #32
 800c2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	e853 3f00 	ldrex	r3, [r3]
 800c2d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f023 0310 	bic.w	r3, r3, #16
 800c2de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	330c      	adds	r3, #12
 800c2e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c2ec:	61fa      	str	r2, [r7, #28]
 800c2ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	69b9      	ldr	r1, [r7, #24]
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e3      	bne.n	800c2c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7fa fc50 	bl	8006bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c30c:	e023      	b.n	800c356 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c316:	2b00      	cmp	r3, #0
 800c318:	d009      	beq.n	800c32e <HAL_UART_IRQHandler+0x4ea>
 800c31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fae1 	bl	800c8ee <UART_Transmit_IT>
    return;
 800c32c:	e014      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00e      	beq.n	800c358 <HAL_UART_IRQHandler+0x514>
 800c33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c342:	2b00      	cmp	r3, #0
 800c344:	d008      	beq.n	800c358 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fb21 	bl	800c98e <UART_EndTransmit_IT>
    return;
 800c34c:	e004      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
    return;
 800c34e:	bf00      	nop
 800c350:	e002      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
      return;
 800c352:	bf00      	nop
 800c354:	e000      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
      return;
 800c356:	bf00      	nop
  }
}
 800c358:	37e8      	adds	r7, #232	; 0xe8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop

0800c360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b09c      	sub	sp, #112	; 0x70
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d172      	bne.n	800c4b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c3cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	330c      	adds	r3, #12
 800c3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3f2:	65ba      	str	r2, [r7, #88]	; 0x58
 800c3f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e5      	bne.n	800c3d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3314      	adds	r3, #20
 800c40c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c418:	f023 0301 	bic.w	r3, r3, #1
 800c41c:	667b      	str	r3, [r7, #100]	; 0x64
 800c41e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3314      	adds	r3, #20
 800c424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c426:	647a      	str	r2, [r7, #68]	; 0x44
 800c428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c42c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e5      	bne.n	800c406 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3314      	adds	r3, #20
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	e853 3f00 	ldrex	r3, [r3]
 800c448:	623b      	str	r3, [r7, #32]
   return(result);
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c450:	663b      	str	r3, [r7, #96]	; 0x60
 800c452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3314      	adds	r3, #20
 800c458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c45a:	633a      	str	r2, [r7, #48]	; 0x30
 800c45c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c462:	e841 2300 	strex	r3, r2, [r1]
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e5      	bne.n	800c43a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c470:	2220      	movs	r2, #32
 800c472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d119      	bne.n	800c4b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	330c      	adds	r3, #12
 800c484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	e853 3f00 	ldrex	r3, [r3]
 800c48c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f023 0310 	bic.w	r3, r3, #16
 800c494:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	330c      	adds	r3, #12
 800c49c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c49e:	61fa      	str	r2, [r7, #28]
 800c4a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a2:	69b9      	ldr	r1, [r7, #24]
 800c4a4:	69fa      	ldr	r2, [r7, #28]
 800c4a6:	e841 2300 	strex	r3, r2, [r1]
 800c4aa:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1e5      	bne.n	800c47e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d106      	bne.n	800c4c8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4be:	4619      	mov	r1, r3
 800c4c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c4c2:	f7fa fb73 	bl	8006bac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4c6:	e002      	b.n	800c4ce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c4c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c4ca:	f7ff ff53 	bl	800c374 <HAL_UART_RxCpltCallback>
}
 800c4ce:	bf00      	nop
 800c4d0:	3770      	adds	r7, #112	; 0x70
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d108      	bne.n	800c4fe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4f0:	085b      	lsrs	r3, r3, #1
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7fa fb58 	bl	8006bac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4fc:	e002      	b.n	800c504 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff ff42 	bl	800c388 <HAL_UART_RxHalfCpltCallback>
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c528:	2b80      	cmp	r3, #128	; 0x80
 800c52a:	bf0c      	ite	eq
 800c52c:	2301      	moveq	r3, #1
 800c52e:	2300      	movne	r3, #0
 800c530:	b2db      	uxtb	r3, r3
 800c532:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b21      	cmp	r3, #33	; 0x21
 800c53e:	d108      	bne.n	800c552 <UART_DMAError+0x46>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2200      	movs	r2, #0
 800c54a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c54c:	68b8      	ldr	r0, [r7, #8]
 800c54e:	f000 f92f 	bl	800c7b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55c:	2b40      	cmp	r3, #64	; 0x40
 800c55e:	bf0c      	ite	eq
 800c560:	2301      	moveq	r3, #1
 800c562:	2300      	movne	r3, #0
 800c564:	b2db      	uxtb	r3, r3
 800c566:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b22      	cmp	r3, #34	; 0x22
 800c572:	d108      	bne.n	800c586 <UART_DMAError+0x7a>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d005      	beq.n	800c586 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2200      	movs	r2, #0
 800c57e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c580:	68b8      	ldr	r0, [r7, #8]
 800c582:	f000 f93d 	bl	800c800 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58a:	f043 0210 	orr.w	r2, r3, #16
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c592:	68b8      	ldr	r0, [r7, #8]
 800c594:	f7ff ff02 	bl	800c39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c598:	bf00      	nop
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b090      	sub	sp, #64	; 0x40
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5b0:	e050      	b.n	800c654 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b8:	d04c      	beq.n	800c654 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5c0:	f7fa fd3c 	bl	800703c <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d241      	bcs.n	800c654 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	330c      	adds	r3, #12
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	e853 3f00 	ldrex	r3, [r3]
 800c5de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	330c      	adds	r3, #12
 800c5ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5f0:	637a      	str	r2, [r7, #52]	; 0x34
 800c5f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e5      	bne.n	800c5d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3314      	adds	r3, #20
 800c60a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	613b      	str	r3, [r7, #16]
   return(result);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	f023 0301 	bic.w	r3, r3, #1
 800c61a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3314      	adds	r3, #20
 800c622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c624:	623a      	str	r2, [r7, #32]
 800c626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c628:	69f9      	ldr	r1, [r7, #28]
 800c62a:	6a3a      	ldr	r2, [r7, #32]
 800c62c:	e841 2300 	strex	r3, r2, [r1]
 800c630:	61bb      	str	r3, [r7, #24]
   return(result);
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e5      	bne.n	800c604 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2220      	movs	r2, #32
 800c63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2220      	movs	r2, #32
 800c644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e00f      	b.n	800c674 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	4013      	ands	r3, r2
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	429a      	cmp	r2, r3
 800c662:	bf0c      	ite	eq
 800c664:	2301      	moveq	r3, #1
 800c666:	2300      	movne	r3, #0
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	461a      	mov	r2, r3
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d09f      	beq.n	800c5b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3740      	adds	r7, #64	; 0x40
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b098      	sub	sp, #96	; 0x60
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	4613      	mov	r3, r2
 800c688:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	88fa      	ldrh	r2, [r7, #6]
 800c694:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2222      	movs	r2, #34	; 0x22
 800c6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a8:	4a3e      	ldr	r2, [pc, #248]	; (800c7a4 <UART_Start_Receive_DMA+0x128>)
 800c6aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b0:	4a3d      	ldr	r2, [pc, #244]	; (800c7a8 <UART_Start_Receive_DMA+0x12c>)
 800c6b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b8:	4a3c      	ldr	r2, [pc, #240]	; (800c7ac <UART_Start_Receive_DMA+0x130>)
 800c6ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	88fb      	ldrh	r3, [r7, #6]
 800c6dc:	f7fb fb06 	bl	8007cec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	613b      	str	r3, [r7, #16]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	613b      	str	r3, [r7, #16]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	330c      	adds	r3, #12
 800c704:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c708:	e853 3f00 	ldrex	r3, [r3]
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c714:	65bb      	str	r3, [r7, #88]	; 0x58
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	330c      	adds	r3, #12
 800c71c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c71e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c720:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e5      	bne.n	800c6fe <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3314      	adds	r3, #20
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	f043 0301 	orr.w	r3, r3, #1
 800c748:	657b      	str	r3, [r7, #84]	; 0x54
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3314      	adds	r3, #20
 800c750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c752:	63ba      	str	r2, [r7, #56]	; 0x38
 800c754:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e5      	bne.n	800c732 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3314      	adds	r3, #20
 800c76c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	617b      	str	r3, [r7, #20]
   return(result);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c77c:	653b      	str	r3, [r7, #80]	; 0x50
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3314      	adds	r3, #20
 800c784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c786:	627a      	str	r2, [r7, #36]	; 0x24
 800c788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	6a39      	ldr	r1, [r7, #32]
 800c78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	61fb      	str	r3, [r7, #28]
   return(result);
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e5      	bne.n	800c766 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3760      	adds	r7, #96	; 0x60
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	0800c3b1 	.word	0x0800c3b1
 800c7a8:	0800c4d7 	.word	0x0800c4d7
 800c7ac:	0800c50d 	.word	0x0800c50d

0800c7b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b089      	sub	sp, #36	; 0x24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	330c      	adds	r3, #12
 800c7be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	e853 3f00 	ldrex	r3, [r3]
 800c7c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	330c      	adds	r3, #12
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	61ba      	str	r2, [r7, #24]
 800c7da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7dc:	6979      	ldr	r1, [r7, #20]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	e841 2300 	strex	r3, r2, [r1]
 800c7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1e5      	bne.n	800c7b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c7f4:	bf00      	nop
 800c7f6:	3724      	adds	r7, #36	; 0x24
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c800:	b480      	push	{r7}
 800c802:	b095      	sub	sp, #84	; 0x54
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	330c      	adds	r3, #12
 800c80e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c81e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	330c      	adds	r3, #12
 800c826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c828:	643a      	str	r2, [r7, #64]	; 0x40
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c82e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e5      	bne.n	800c808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3314      	adds	r3, #20
 800c842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	f023 0301 	bic.w	r3, r3, #1
 800c852:	64bb      	str	r3, [r7, #72]	; 0x48
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3314      	adds	r3, #20
 800c85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c85c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c85e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c864:	e841 2300 	strex	r3, r2, [r1]
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e5      	bne.n	800c83c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c874:	2b01      	cmp	r3, #1
 800c876:	d119      	bne.n	800c8ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	330c      	adds	r3, #12
 800c87e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	e853 3f00 	ldrex	r3, [r3]
 800c886:	60bb      	str	r3, [r7, #8]
   return(result);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f023 0310 	bic.w	r3, r3, #16
 800c88e:	647b      	str	r3, [r7, #68]	; 0x44
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	330c      	adds	r3, #12
 800c896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c898:	61ba      	str	r2, [r7, #24]
 800c89a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89c:	6979      	ldr	r1, [r7, #20]
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	e841 2300 	strex	r3, r2, [r1]
 800c8a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1e5      	bne.n	800c878 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2220      	movs	r2, #32
 800c8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c8ba:	bf00      	nop
 800c8bc:	3754      	adds	r7, #84	; 0x54
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f7ff fd5b 	bl	800c39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8e6:	bf00      	nop
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b21      	cmp	r3, #33	; 0x21
 800c900:	d13e      	bne.n	800c980 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c90a:	d114      	bne.n	800c936 <UART_Transmit_IT+0x48>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d110      	bne.n	800c936 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c928:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	1c9a      	adds	r2, r3, #2
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	621a      	str	r2, [r3, #32]
 800c934:	e008      	b.n	800c948 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	1c59      	adds	r1, r3, #1
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	6211      	str	r1, [r2, #32]
 800c940:	781a      	ldrb	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	3b01      	subs	r3, #1
 800c950:	b29b      	uxth	r3, r3
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	4619      	mov	r1, r3
 800c956:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10f      	bne.n	800c97c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68da      	ldr	r2, [r3, #12]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c96a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c97a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e000      	b.n	800c982 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c980:	2302      	movs	r3, #2
  }
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2220      	movs	r2, #32
 800c9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff fcd6 	bl	800c360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b08c      	sub	sp, #48	; 0x30
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b22      	cmp	r3, #34	; 0x22
 800c9d0:	f040 80ab 	bne.w	800cb2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9dc:	d117      	bne.n	800ca0e <UART_Receive_IT+0x50>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d113      	bne.n	800ca0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca06:	1c9a      	adds	r2, r3, #2
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	629a      	str	r2, [r3, #40]	; 0x28
 800ca0c:	e026      	b.n	800ca5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca20:	d007      	beq.n	800ca32 <UART_Receive_IT+0x74>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10a      	bne.n	800ca40 <UART_Receive_IT+0x82>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d106      	bne.n	800ca40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e008      	b.n	800ca52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	3b01      	subs	r3, #1
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d15a      	bne.n	800cb26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68da      	ldr	r2, [r3, #12]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f022 0220 	bic.w	r2, r2, #32
 800ca7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68da      	ldr	r2, [r3, #12]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	695a      	ldr	r2, [r3, #20]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f022 0201 	bic.w	r2, r2, #1
 800ca9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2220      	movs	r2, #32
 800caa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caac:	2b01      	cmp	r3, #1
 800caae:	d135      	bne.n	800cb1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	330c      	adds	r3, #12
 800cabc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	e853 3f00 	ldrex	r3, [r3]
 800cac4:	613b      	str	r3, [r7, #16]
   return(result);
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f023 0310 	bic.w	r3, r3, #16
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	330c      	adds	r3, #12
 800cad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad6:	623a      	str	r2, [r7, #32]
 800cad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cada:	69f9      	ldr	r1, [r7, #28]
 800cadc:	6a3a      	ldr	r2, [r7, #32]
 800cade:	e841 2300 	strex	r3, r2, [r1]
 800cae2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e5      	bne.n	800cab6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0310 	and.w	r3, r3, #16
 800caf4:	2b10      	cmp	r3, #16
 800caf6:	d10a      	bne.n	800cb0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800caf8:	2300      	movs	r3, #0
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7fa f849 	bl	8006bac <HAL_UARTEx_RxEventCallback>
 800cb1a:	e002      	b.n	800cb22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff fc29 	bl	800c374 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	e002      	b.n	800cb2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	e000      	b.n	800cb2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cb2a:	2302      	movs	r3, #2
  }
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3730      	adds	r7, #48	; 0x30
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb38:	b09f      	sub	sp, #124	; 0x7c
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cb48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb4a:	68d9      	ldr	r1, [r3, #12]
 800cb4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	ea40 0301 	orr.w	r3, r0, r1
 800cb54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb58:	689a      	ldr	r2, [r3, #8]
 800cb5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	431a      	orrs	r2, r3
 800cb60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	431a      	orrs	r2, r3
 800cb66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800cb6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cb78:	f021 010c 	bic.w	r1, r1, #12
 800cb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb82:	430b      	orrs	r3, r1
 800cb84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb92:	6999      	ldr	r1, [r3, #24]
 800cb94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	ea40 0301 	orr.w	r3, r0, r1
 800cb9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4bc5      	ldr	r3, [pc, #788]	; (800ceb8 <UART_SetConfig+0x384>)
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d004      	beq.n	800cbb2 <UART_SetConfig+0x7e>
 800cba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	4bc3      	ldr	r3, [pc, #780]	; (800cebc <UART_SetConfig+0x388>)
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d103      	bne.n	800cbba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cbb2:	f7fd fcfb 	bl	800a5ac <HAL_RCC_GetPCLK2Freq>
 800cbb6:	6778      	str	r0, [r7, #116]	; 0x74
 800cbb8:	e002      	b.n	800cbc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cbba:	f7fd fce3 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800cbbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbc8:	f040 80b6 	bne.w	800cd38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cbcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbce:	461c      	mov	r4, r3
 800cbd0:	f04f 0500 	mov.w	r5, #0
 800cbd4:	4622      	mov	r2, r4
 800cbd6:	462b      	mov	r3, r5
 800cbd8:	1891      	adds	r1, r2, r2
 800cbda:	6439      	str	r1, [r7, #64]	; 0x40
 800cbdc:	415b      	adcs	r3, r3
 800cbde:	647b      	str	r3, [r7, #68]	; 0x44
 800cbe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cbe4:	1912      	adds	r2, r2, r4
 800cbe6:	eb45 0303 	adc.w	r3, r5, r3
 800cbea:	f04f 0000 	mov.w	r0, #0
 800cbee:	f04f 0100 	mov.w	r1, #0
 800cbf2:	00d9      	lsls	r1, r3, #3
 800cbf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cbf8:	00d0      	lsls	r0, r2, #3
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	1911      	adds	r1, r2, r4
 800cc00:	6639      	str	r1, [r7, #96]	; 0x60
 800cc02:	416b      	adcs	r3, r5
 800cc04:	667b      	str	r3, [r7, #100]	; 0x64
 800cc06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	f04f 0300 	mov.w	r3, #0
 800cc10:	1891      	adds	r1, r2, r2
 800cc12:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc14:	415b      	adcs	r3, r3
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cc20:	f7f4 f832 	bl	8000c88 <__aeabi_uldivmod>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	4ba5      	ldr	r3, [pc, #660]	; (800cec0 <UART_SetConfig+0x38c>)
 800cc2a:	fba3 2302 	umull	r2, r3, r3, r2
 800cc2e:	095b      	lsrs	r3, r3, #5
 800cc30:	011e      	lsls	r6, r3, #4
 800cc32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc34:	461c      	mov	r4, r3
 800cc36:	f04f 0500 	mov.w	r5, #0
 800cc3a:	4622      	mov	r2, r4
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	1891      	adds	r1, r2, r2
 800cc40:	6339      	str	r1, [r7, #48]	; 0x30
 800cc42:	415b      	adcs	r3, r3
 800cc44:	637b      	str	r3, [r7, #52]	; 0x34
 800cc46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cc4a:	1912      	adds	r2, r2, r4
 800cc4c:	eb45 0303 	adc.w	r3, r5, r3
 800cc50:	f04f 0000 	mov.w	r0, #0
 800cc54:	f04f 0100 	mov.w	r1, #0
 800cc58:	00d9      	lsls	r1, r3, #3
 800cc5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cc5e:	00d0      	lsls	r0, r2, #3
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	1911      	adds	r1, r2, r4
 800cc66:	65b9      	str	r1, [r7, #88]	; 0x58
 800cc68:	416b      	adcs	r3, r5
 800cc6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	461a      	mov	r2, r3
 800cc72:	f04f 0300 	mov.w	r3, #0
 800cc76:	1891      	adds	r1, r2, r2
 800cc78:	62b9      	str	r1, [r7, #40]	; 0x28
 800cc7a:	415b      	adcs	r3, r3
 800cc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cc86:	f7f3 ffff 	bl	8000c88 <__aeabi_uldivmod>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4b8c      	ldr	r3, [pc, #560]	; (800cec0 <UART_SetConfig+0x38c>)
 800cc90:	fba3 1302 	umull	r1, r3, r3, r2
 800cc94:	095b      	lsrs	r3, r3, #5
 800cc96:	2164      	movs	r1, #100	; 0x64
 800cc98:	fb01 f303 	mul.w	r3, r1, r3
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	3332      	adds	r3, #50	; 0x32
 800cca2:	4a87      	ldr	r2, [pc, #540]	; (800cec0 <UART_SetConfig+0x38c>)
 800cca4:	fba2 2303 	umull	r2, r3, r2, r3
 800cca8:	095b      	lsrs	r3, r3, #5
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ccb0:	441e      	add	r6, r3
 800ccb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f04f 0100 	mov.w	r1, #0
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	1894      	adds	r4, r2, r2
 800ccc0:	623c      	str	r4, [r7, #32]
 800ccc2:	415b      	adcs	r3, r3
 800ccc4:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ccca:	1812      	adds	r2, r2, r0
 800cccc:	eb41 0303 	adc.w	r3, r1, r3
 800ccd0:	f04f 0400 	mov.w	r4, #0
 800ccd4:	f04f 0500 	mov.w	r5, #0
 800ccd8:	00dd      	lsls	r5, r3, #3
 800ccda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ccde:	00d4      	lsls	r4, r2, #3
 800cce0:	4622      	mov	r2, r4
 800cce2:	462b      	mov	r3, r5
 800cce4:	1814      	adds	r4, r2, r0
 800cce6:	653c      	str	r4, [r7, #80]	; 0x50
 800cce8:	414b      	adcs	r3, r1
 800ccea:	657b      	str	r3, [r7, #84]	; 0x54
 800ccec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f04f 0300 	mov.w	r3, #0
 800ccf6:	1891      	adds	r1, r2, r2
 800ccf8:	61b9      	str	r1, [r7, #24]
 800ccfa:	415b      	adcs	r3, r3
 800ccfc:	61fb      	str	r3, [r7, #28]
 800ccfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800cd06:	f7f3 ffbf 	bl	8000c88 <__aeabi_uldivmod>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4b6c      	ldr	r3, [pc, #432]	; (800cec0 <UART_SetConfig+0x38c>)
 800cd10:	fba3 1302 	umull	r1, r3, r3, r2
 800cd14:	095b      	lsrs	r3, r3, #5
 800cd16:	2164      	movs	r1, #100	; 0x64
 800cd18:	fb01 f303 	mul.w	r3, r1, r3
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	3332      	adds	r3, #50	; 0x32
 800cd22:	4a67      	ldr	r2, [pc, #412]	; (800cec0 <UART_SetConfig+0x38c>)
 800cd24:	fba2 2303 	umull	r2, r3, r2, r3
 800cd28:	095b      	lsrs	r3, r3, #5
 800cd2a:	f003 0207 	and.w	r2, r3, #7
 800cd2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4432      	add	r2, r6
 800cd34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cd36:	e0b9      	b.n	800ceac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd3a:	461c      	mov	r4, r3
 800cd3c:	f04f 0500 	mov.w	r5, #0
 800cd40:	4622      	mov	r2, r4
 800cd42:	462b      	mov	r3, r5
 800cd44:	1891      	adds	r1, r2, r2
 800cd46:	6139      	str	r1, [r7, #16]
 800cd48:	415b      	adcs	r3, r3
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd50:	1912      	adds	r2, r2, r4
 800cd52:	eb45 0303 	adc.w	r3, r5, r3
 800cd56:	f04f 0000 	mov.w	r0, #0
 800cd5a:	f04f 0100 	mov.w	r1, #0
 800cd5e:	00d9      	lsls	r1, r3, #3
 800cd60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd64:	00d0      	lsls	r0, r2, #3
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	eb12 0804 	adds.w	r8, r2, r4
 800cd6e:	eb43 0905 	adc.w	r9, r3, r5
 800cd72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f04f 0100 	mov.w	r1, #0
 800cd7c:	f04f 0200 	mov.w	r2, #0
 800cd80:	f04f 0300 	mov.w	r3, #0
 800cd84:	008b      	lsls	r3, r1, #2
 800cd86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cd8a:	0082      	lsls	r2, r0, #2
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f7f3 ff7a 	bl	8000c88 <__aeabi_uldivmod>
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	4b49      	ldr	r3, [pc, #292]	; (800cec0 <UART_SetConfig+0x38c>)
 800cd9a:	fba3 2302 	umull	r2, r3, r3, r2
 800cd9e:	095b      	lsrs	r3, r3, #5
 800cda0:	011e      	lsls	r6, r3, #4
 800cda2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cda4:	4618      	mov	r0, r3
 800cda6:	f04f 0100 	mov.w	r1, #0
 800cdaa:	4602      	mov	r2, r0
 800cdac:	460b      	mov	r3, r1
 800cdae:	1894      	adds	r4, r2, r2
 800cdb0:	60bc      	str	r4, [r7, #8]
 800cdb2:	415b      	adcs	r3, r3
 800cdb4:	60fb      	str	r3, [r7, #12]
 800cdb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdba:	1812      	adds	r2, r2, r0
 800cdbc:	eb41 0303 	adc.w	r3, r1, r3
 800cdc0:	f04f 0400 	mov.w	r4, #0
 800cdc4:	f04f 0500 	mov.w	r5, #0
 800cdc8:	00dd      	lsls	r5, r3, #3
 800cdca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cdce:	00d4      	lsls	r4, r2, #3
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	1814      	adds	r4, r2, r0
 800cdd6:	64bc      	str	r4, [r7, #72]	; 0x48
 800cdd8:	414b      	adcs	r3, r1
 800cdda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f04f 0100 	mov.w	r1, #0
 800cde6:	f04f 0200 	mov.w	r2, #0
 800cdea:	f04f 0300 	mov.w	r3, #0
 800cdee:	008b      	lsls	r3, r1, #2
 800cdf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cdf4:	0082      	lsls	r2, r0, #2
 800cdf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cdfa:	f7f3 ff45 	bl	8000c88 <__aeabi_uldivmod>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	4b2f      	ldr	r3, [pc, #188]	; (800cec0 <UART_SetConfig+0x38c>)
 800ce04:	fba3 1302 	umull	r1, r3, r3, r2
 800ce08:	095b      	lsrs	r3, r3, #5
 800ce0a:	2164      	movs	r1, #100	; 0x64
 800ce0c:	fb01 f303 	mul.w	r3, r1, r3
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	011b      	lsls	r3, r3, #4
 800ce14:	3332      	adds	r3, #50	; 0x32
 800ce16:	4a2a      	ldr	r2, [pc, #168]	; (800cec0 <UART_SetConfig+0x38c>)
 800ce18:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1c:	095b      	lsrs	r3, r3, #5
 800ce1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce22:	441e      	add	r6, r3
 800ce24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce26:	4618      	mov	r0, r3
 800ce28:	f04f 0100 	mov.w	r1, #0
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	1894      	adds	r4, r2, r2
 800ce32:	603c      	str	r4, [r7, #0]
 800ce34:	415b      	adcs	r3, r3
 800ce36:	607b      	str	r3, [r7, #4]
 800ce38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce3c:	1812      	adds	r2, r2, r0
 800ce3e:	eb41 0303 	adc.w	r3, r1, r3
 800ce42:	f04f 0400 	mov.w	r4, #0
 800ce46:	f04f 0500 	mov.w	r5, #0
 800ce4a:	00dd      	lsls	r5, r3, #3
 800ce4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce50:	00d4      	lsls	r4, r2, #3
 800ce52:	4622      	mov	r2, r4
 800ce54:	462b      	mov	r3, r5
 800ce56:	eb12 0a00 	adds.w	sl, r2, r0
 800ce5a:	eb43 0b01 	adc.w	fp, r3, r1
 800ce5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f04f 0100 	mov.w	r1, #0
 800ce68:	f04f 0200 	mov.w	r2, #0
 800ce6c:	f04f 0300 	mov.w	r3, #0
 800ce70:	008b      	lsls	r3, r1, #2
 800ce72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce76:	0082      	lsls	r2, r0, #2
 800ce78:	4650      	mov	r0, sl
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	f7f3 ff04 	bl	8000c88 <__aeabi_uldivmod>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <UART_SetConfig+0x38c>)
 800ce86:	fba3 1302 	umull	r1, r3, r3, r2
 800ce8a:	095b      	lsrs	r3, r3, #5
 800ce8c:	2164      	movs	r1, #100	; 0x64
 800ce8e:	fb01 f303 	mul.w	r3, r1, r3
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	3332      	adds	r3, #50	; 0x32
 800ce98:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <UART_SetConfig+0x38c>)
 800ce9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce9e:	095b      	lsrs	r3, r3, #5
 800cea0:	f003 020f 	and.w	r2, r3, #15
 800cea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4432      	add	r2, r6
 800ceaa:	609a      	str	r2, [r3, #8]
}
 800ceac:	bf00      	nop
 800ceae:	377c      	adds	r7, #124	; 0x7c
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb6:	bf00      	nop
 800ceb8:	40011000 	.word	0x40011000
 800cebc:	40011400 	.word	0x40011400
 800cec0:	51eb851f 	.word	0x51eb851f

0800cec4 <LWIP_ReInit>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
static void LWIP_ReInit()
{
 800cec4:	b480      	push	{r7}
 800cec6:	af00      	add	r7, sp, #0
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800cec8:	4b5c      	ldr	r3, [pc, #368]	; (800d03c <LWIP_ReInit+0x178>)
 800ceca:	8b9b      	ldrh	r3, [r3, #28]
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10e      	bne.n	800cef0 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800ced2:	4b5a      	ldr	r3, [pc, #360]	; (800d03c <LWIP_ReInit+0x178>)
 800ced4:	8bdb      	ldrh	r3, [r3, #30]
 800ced6:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d109      	bne.n	800cef0 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800cedc:	4b57      	ldr	r3, [pc, #348]	; (800d03c <LWIP_ReInit+0x178>)
 800cede:	8c1b      	ldrh	r3, [r3, #32]
 800cee0:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d104      	bne.n	800cef0 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr3))
 800cee6:	4b55      	ldr	r3, [pc, #340]	; (800d03c <LWIP_ReInit+0x178>)
 800cee8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ceea:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d013      	beq.n	800cf18 <LWIP_ReInit+0x54>
	{
		  IP_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.addr0;
 800cef0:	4b52      	ldr	r3, [pc, #328]	; (800d03c <LWIP_ReInit+0x178>)
 800cef2:	8b9b      	ldrh	r3, [r3, #28]
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	4b52      	ldr	r3, [pc, #328]	; (800d040 <LWIP_ReInit+0x17c>)
 800cef8:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.addr1;
 800cefa:	4b50      	ldr	r3, [pc, #320]	; (800d03c <LWIP_ReInit+0x178>)
 800cefc:	8bdb      	ldrh	r3, [r3, #30]
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	4b4f      	ldr	r3, [pc, #316]	; (800d040 <LWIP_ReInit+0x17c>)
 800cf02:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.addr2;
 800cf04:	4b4d      	ldr	r3, [pc, #308]	; (800d03c <LWIP_ReInit+0x178>)
 800cf06:	8c1b      	ldrh	r3, [r3, #32]
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	4b4d      	ldr	r3, [pc, #308]	; (800d040 <LWIP_ReInit+0x17c>)
 800cf0c:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.addr3;
 800cf0e:	4b4b      	ldr	r3, [pc, #300]	; (800d03c <LWIP_ReInit+0x178>)
 800cf10:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	4b4a      	ldr	r3, [pc, #296]	; (800d040 <LWIP_ReInit+0x17c>)
 800cf16:	70da      	strb	r2, [r3, #3]
	}

	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800cf18:	4b48      	ldr	r3, [pc, #288]	; (800d03c <LWIP_ReInit+0x178>)
 800cf1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10e      	bne.n	800cf40 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800cf22:	4b46      	ldr	r3, [pc, #280]	; (800d03c <LWIP_ReInit+0x178>)
 800cf24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf26:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d109      	bne.n	800cf40 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800cf2c:	4b43      	ldr	r3, [pc, #268]	; (800d03c <LWIP_ReInit+0x178>)
 800cf2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf30:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d104      	bne.n	800cf40 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask3))
 800cf36:	4b41      	ldr	r3, [pc, #260]	; (800d03c <LWIP_ReInit+0x178>)
 800cf38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf3a:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d013      	beq.n	800cf68 <LWIP_ReInit+0xa4>
	{
		  NETMASK_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.mask0;
 800cf40:	4b3e      	ldr	r3, [pc, #248]	; (800d03c <LWIP_ReInit+0x178>)
 800cf42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	4b3f      	ldr	r3, [pc, #252]	; (800d044 <LWIP_ReInit+0x180>)
 800cf48:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.mask1;
 800cf4a:	4b3c      	ldr	r3, [pc, #240]	; (800d03c <LWIP_ReInit+0x178>)
 800cf4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	4b3c      	ldr	r3, [pc, #240]	; (800d044 <LWIP_ReInit+0x180>)
 800cf52:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.mask2;
 800cf54:	4b39      	ldr	r3, [pc, #228]	; (800d03c <LWIP_ReInit+0x178>)
 800cf56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	4b3a      	ldr	r3, [pc, #232]	; (800d044 <LWIP_ReInit+0x180>)
 800cf5c:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.mask3;
 800cf5e:	4b37      	ldr	r3, [pc, #220]	; (800d03c <LWIP_ReInit+0x178>)
 800cf60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	4b37      	ldr	r3, [pc, #220]	; (800d044 <LWIP_ReInit+0x180>)
 800cf66:	70da      	strb	r2, [r3, #3]
	}
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800cf68:	4b34      	ldr	r3, [pc, #208]	; (800d03c <LWIP_ReInit+0x178>)
 800cf6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10e      	bne.n	800cf90 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800cf72:	4b32      	ldr	r3, [pc, #200]	; (800d03c <LWIP_ReInit+0x178>)
 800cf74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf76:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d109      	bne.n	800cf90 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800cf7c:	4b2f      	ldr	r3, [pc, #188]	; (800d03c <LWIP_ReInit+0x178>)
 800cf7e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cf80:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d104      	bne.n	800cf90 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway3))
 800cf86:	4b2d      	ldr	r3, [pc, #180]	; (800d03c <LWIP_ReInit+0x178>)
 800cf88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf8a:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d013      	beq.n	800cfb8 <LWIP_ReInit+0xf4>
	{
		  GATEWAY_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.gateway0;
 800cf90:	4b2a      	ldr	r3, [pc, #168]	; (800d03c <LWIP_ReInit+0x178>)
 800cf92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	4b2c      	ldr	r3, [pc, #176]	; (800d048 <LWIP_ReInit+0x184>)
 800cf98:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.gateway1;
 800cf9a:	4b28      	ldr	r3, [pc, #160]	; (800d03c <LWIP_ReInit+0x178>)
 800cf9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	4b29      	ldr	r3, [pc, #164]	; (800d048 <LWIP_ReInit+0x184>)
 800cfa2:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.gateway2;
 800cfa4:	4b25      	ldr	r3, [pc, #148]	; (800d03c <LWIP_ReInit+0x178>)
 800cfa6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	4b27      	ldr	r3, [pc, #156]	; (800d048 <LWIP_ReInit+0x184>)
 800cfac:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.gateway3;
 800cfae:	4b23      	ldr	r3, [pc, #140]	; (800d03c <LWIP_ReInit+0x178>)
 800cfb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	4b24      	ldr	r3, [pc, #144]	; (800d048 <LWIP_ReInit+0x184>)
 800cfb6:	70da      	strb	r2, [r3, #3]
	}
	settings.retain.eth_sett.addr0 = IP_ADDRESS[0];
 800cfb8:	4b21      	ldr	r3, [pc, #132]	; (800d040 <LWIP_ReInit+0x17c>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	4b1f      	ldr	r3, [pc, #124]	; (800d03c <LWIP_ReInit+0x178>)
 800cfc0:	839a      	strh	r2, [r3, #28]
	settings.retain.eth_sett.addr1 = IP_ADDRESS[1];
 800cfc2:	4b1f      	ldr	r3, [pc, #124]	; (800d040 <LWIP_ReInit+0x17c>)
 800cfc4:	785b      	ldrb	r3, [r3, #1]
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	4b1c      	ldr	r3, [pc, #112]	; (800d03c <LWIP_ReInit+0x178>)
 800cfca:	83da      	strh	r2, [r3, #30]
	settings.retain.eth_sett.addr2 = IP_ADDRESS[2];
 800cfcc:	4b1c      	ldr	r3, [pc, #112]	; (800d040 <LWIP_ReInit+0x17c>)
 800cfce:	789b      	ldrb	r3, [r3, #2]
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	4b1a      	ldr	r3, [pc, #104]	; (800d03c <LWIP_ReInit+0x178>)
 800cfd4:	841a      	strh	r2, [r3, #32]
	settings.retain.eth_sett.addr3 = IP_ADDRESS[3];
 800cfd6:	4b1a      	ldr	r3, [pc, #104]	; (800d040 <LWIP_ReInit+0x17c>)
 800cfd8:	78db      	ldrb	r3, [r3, #3]
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	4b17      	ldr	r3, [pc, #92]	; (800d03c <LWIP_ReInit+0x178>)
 800cfde:	845a      	strh	r2, [r3, #34]	; 0x22

	settings.retain.eth_sett.mask0 = NETMASK_ADDRESS[0];
 800cfe0:	4b18      	ldr	r3, [pc, #96]	; (800d044 <LWIP_ReInit+0x180>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	4b15      	ldr	r3, [pc, #84]	; (800d03c <LWIP_ReInit+0x178>)
 800cfe8:	849a      	strh	r2, [r3, #36]	; 0x24
	settings.retain.eth_sett.mask1 = NETMASK_ADDRESS[1];
 800cfea:	4b16      	ldr	r3, [pc, #88]	; (800d044 <LWIP_ReInit+0x180>)
 800cfec:	785b      	ldrb	r3, [r3, #1]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	4b12      	ldr	r3, [pc, #72]	; (800d03c <LWIP_ReInit+0x178>)
 800cff2:	84da      	strh	r2, [r3, #38]	; 0x26
	settings.retain.eth_sett.mask2 = NETMASK_ADDRESS[2];
 800cff4:	4b13      	ldr	r3, [pc, #76]	; (800d044 <LWIP_ReInit+0x180>)
 800cff6:	789b      	ldrb	r3, [r3, #2]
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4b10      	ldr	r3, [pc, #64]	; (800d03c <LWIP_ReInit+0x178>)
 800cffc:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.retain.eth_sett.mask3 = NETMASK_ADDRESS[3];
 800cffe:	4b11      	ldr	r3, [pc, #68]	; (800d044 <LWIP_ReInit+0x180>)
 800d000:	78db      	ldrb	r3, [r3, #3]
 800d002:	b29a      	uxth	r2, r3
 800d004:	4b0d      	ldr	r3, [pc, #52]	; (800d03c <LWIP_ReInit+0x178>)
 800d006:	855a      	strh	r2, [r3, #42]	; 0x2a

	settings.retain.eth_sett.gateway0 =  GATEWAY_ADDRESS[0];
 800d008:	4b0f      	ldr	r3, [pc, #60]	; (800d048 <LWIP_ReInit+0x184>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <LWIP_ReInit+0x178>)
 800d010:	859a      	strh	r2, [r3, #44]	; 0x2c
	settings.retain.eth_sett.gateway1 =  GATEWAY_ADDRESS[1];
 800d012:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <LWIP_ReInit+0x184>)
 800d014:	785b      	ldrb	r3, [r3, #1]
 800d016:	b29a      	uxth	r2, r3
 800d018:	4b08      	ldr	r3, [pc, #32]	; (800d03c <LWIP_ReInit+0x178>)
 800d01a:	85da      	strh	r2, [r3, #46]	; 0x2e
	settings.retain.eth_sett.gateway2 =  GATEWAY_ADDRESS[2];
 800d01c:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <LWIP_ReInit+0x184>)
 800d01e:	789b      	ldrb	r3, [r3, #2]
 800d020:	b29a      	uxth	r2, r3
 800d022:	4b06      	ldr	r3, [pc, #24]	; (800d03c <LWIP_ReInit+0x178>)
 800d024:	861a      	strh	r2, [r3, #48]	; 0x30
	settings.retain.eth_sett.gateway3 =  GATEWAY_ADDRESS[3];
 800d026:	4b08      	ldr	r3, [pc, #32]	; (800d048 <LWIP_ReInit+0x184>)
 800d028:	78db      	ldrb	r3, [r3, #3]
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	4b03      	ldr	r3, [pc, #12]	; (800d03c <LWIP_ReInit+0x178>)
 800d02e:	865a      	strh	r2, [r3, #50]	; 0x32


}
 800d030:	bf00      	nop
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	20007474 	.word	0x20007474
 800d040:	20007924 	.word	0x20007924
 800d044:	20007920 	.word	0x20007920
 800d048:	200078e4 	.word	0x200078e4

0800d04c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800d052:	4b99      	ldr	r3, [pc, #612]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d054:	22c0      	movs	r2, #192	; 0xc0
 800d056:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800d058:	4b97      	ldr	r3, [pc, #604]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d05a:	22a8      	movs	r2, #168	; 0xa8
 800d05c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800d05e:	4b96      	ldr	r3, [pc, #600]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d060:	2200      	movs	r2, #0
 800d062:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 17;
 800d064:	4b94      	ldr	r3, [pc, #592]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d066:	2211      	movs	r2, #17
 800d068:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800d06a:	4b94      	ldr	r3, [pc, #592]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d06c:	22ff      	movs	r2, #255	; 0xff
 800d06e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800d070:	4b92      	ldr	r3, [pc, #584]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d072:	22ff      	movs	r2, #255	; 0xff
 800d074:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800d076:	4b91      	ldr	r3, [pc, #580]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d078:	22ff      	movs	r2, #255	; 0xff
 800d07a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d07c:	4b8f      	ldr	r3, [pc, #572]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d07e:	2200      	movs	r2, #0
 800d080:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800d082:	4b8f      	ldr	r3, [pc, #572]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d084:	22c0      	movs	r2, #192	; 0xc0
 800d086:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800d088:	4b8d      	ldr	r3, [pc, #564]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d08a:	22a8      	movs	r2, #168	; 0xa8
 800d08c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800d08e:	4b8c      	ldr	r3, [pc, #560]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d090:	2264      	movs	r2, #100	; 0x64
 800d092:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800d094:	4b8a      	ldr	r3, [pc, #552]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d096:	2201      	movs	r2, #1
 800d098:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  LWIP_ReInit();
 800d09a:	f7ff ff13 	bl	800cec4 <LWIP_ReInit>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d09e:	2100      	movs	r1, #0
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	f005 ff45 	bl	8012f30 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d0a6:	4b84      	ldr	r3, [pc, #528]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	061a      	lsls	r2, r3, #24
 800d0ac:	4b82      	ldr	r3, [pc, #520]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0ae:	785b      	ldrb	r3, [r3, #1]
 800d0b0:	041b      	lsls	r3, r3, #16
 800d0b2:	431a      	orrs	r2, r3
 800d0b4:	4b80      	ldr	r3, [pc, #512]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0b6:	789b      	ldrb	r3, [r3, #2]
 800d0b8:	021b      	lsls	r3, r3, #8
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	4a7e      	ldr	r2, [pc, #504]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0be:	78d2      	ldrb	r2, [r2, #3]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	061a      	lsls	r2, r3, #24
 800d0c4:	4b7c      	ldr	r3, [pc, #496]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	0619      	lsls	r1, r3, #24
 800d0ca:	4b7b      	ldr	r3, [pc, #492]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0cc:	785b      	ldrb	r3, [r3, #1]
 800d0ce:	041b      	lsls	r3, r3, #16
 800d0d0:	4319      	orrs	r1, r3
 800d0d2:	4b79      	ldr	r3, [pc, #484]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0d4:	789b      	ldrb	r3, [r3, #2]
 800d0d6:	021b      	lsls	r3, r3, #8
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	4977      	ldr	r1, [pc, #476]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0dc:	78c9      	ldrb	r1, [r1, #3]
 800d0de:	430b      	orrs	r3, r1
 800d0e0:	021b      	lsls	r3, r3, #8
 800d0e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	4b73      	ldr	r3, [pc, #460]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	0619      	lsls	r1, r3, #24
 800d0ee:	4b72      	ldr	r3, [pc, #456]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0f0:	785b      	ldrb	r3, [r3, #1]
 800d0f2:	041b      	lsls	r3, r3, #16
 800d0f4:	4319      	orrs	r1, r3
 800d0f6:	4b70      	ldr	r3, [pc, #448]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d0f8:	789b      	ldrb	r3, [r3, #2]
 800d0fa:	021b      	lsls	r3, r3, #8
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	496e      	ldr	r1, [pc, #440]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d100:	78c9      	ldrb	r1, [r1, #3]
 800d102:	430b      	orrs	r3, r1
 800d104:	0a1b      	lsrs	r3, r3, #8
 800d106:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d10a:	431a      	orrs	r2, r3
 800d10c:	4b6a      	ldr	r3, [pc, #424]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	0619      	lsls	r1, r3, #24
 800d112:	4b69      	ldr	r3, [pc, #420]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d114:	785b      	ldrb	r3, [r3, #1]
 800d116:	041b      	lsls	r3, r3, #16
 800d118:	4319      	orrs	r1, r3
 800d11a:	4b67      	ldr	r3, [pc, #412]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d11c:	789b      	ldrb	r3, [r3, #2]
 800d11e:	021b      	lsls	r3, r3, #8
 800d120:	430b      	orrs	r3, r1
 800d122:	4965      	ldr	r1, [pc, #404]	; (800d2b8 <MX_LWIP_Init+0x26c>)
 800d124:	78c9      	ldrb	r1, [r1, #3]
 800d126:	430b      	orrs	r3, r1
 800d128:	0e1b      	lsrs	r3, r3, #24
 800d12a:	4313      	orrs	r3, r2
 800d12c:	4a65      	ldr	r2, [pc, #404]	; (800d2c4 <MX_LWIP_Init+0x278>)
 800d12e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d130:	4b62      	ldr	r3, [pc, #392]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	061a      	lsls	r2, r3, #24
 800d136:	4b61      	ldr	r3, [pc, #388]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d138:	785b      	ldrb	r3, [r3, #1]
 800d13a:	041b      	lsls	r3, r3, #16
 800d13c:	431a      	orrs	r2, r3
 800d13e:	4b5f      	ldr	r3, [pc, #380]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d140:	789b      	ldrb	r3, [r3, #2]
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	4313      	orrs	r3, r2
 800d146:	4a5d      	ldr	r2, [pc, #372]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d148:	78d2      	ldrb	r2, [r2, #3]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	061a      	lsls	r2, r3, #24
 800d14e:	4b5b      	ldr	r3, [pc, #364]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	0619      	lsls	r1, r3, #24
 800d154:	4b59      	ldr	r3, [pc, #356]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d156:	785b      	ldrb	r3, [r3, #1]
 800d158:	041b      	lsls	r3, r3, #16
 800d15a:	4319      	orrs	r1, r3
 800d15c:	4b57      	ldr	r3, [pc, #348]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d15e:	789b      	ldrb	r3, [r3, #2]
 800d160:	021b      	lsls	r3, r3, #8
 800d162:	430b      	orrs	r3, r1
 800d164:	4955      	ldr	r1, [pc, #340]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d166:	78c9      	ldrb	r1, [r1, #3]
 800d168:	430b      	orrs	r3, r1
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d170:	431a      	orrs	r2, r3
 800d172:	4b52      	ldr	r3, [pc, #328]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	0619      	lsls	r1, r3, #24
 800d178:	4b50      	ldr	r3, [pc, #320]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d17a:	785b      	ldrb	r3, [r3, #1]
 800d17c:	041b      	lsls	r3, r3, #16
 800d17e:	4319      	orrs	r1, r3
 800d180:	4b4e      	ldr	r3, [pc, #312]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d182:	789b      	ldrb	r3, [r3, #2]
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	430b      	orrs	r3, r1
 800d188:	494c      	ldr	r1, [pc, #304]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d18a:	78c9      	ldrb	r1, [r1, #3]
 800d18c:	430b      	orrs	r3, r1
 800d18e:	0a1b      	lsrs	r3, r3, #8
 800d190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d194:	431a      	orrs	r2, r3
 800d196:	4b49      	ldr	r3, [pc, #292]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	0619      	lsls	r1, r3, #24
 800d19c:	4b47      	ldr	r3, [pc, #284]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d19e:	785b      	ldrb	r3, [r3, #1]
 800d1a0:	041b      	lsls	r3, r3, #16
 800d1a2:	4319      	orrs	r1, r3
 800d1a4:	4b45      	ldr	r3, [pc, #276]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d1a6:	789b      	ldrb	r3, [r3, #2]
 800d1a8:	021b      	lsls	r3, r3, #8
 800d1aa:	430b      	orrs	r3, r1
 800d1ac:	4943      	ldr	r1, [pc, #268]	; (800d2bc <MX_LWIP_Init+0x270>)
 800d1ae:	78c9      	ldrb	r1, [r1, #3]
 800d1b0:	430b      	orrs	r3, r1
 800d1b2:	0e1b      	lsrs	r3, r3, #24
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	4a44      	ldr	r2, [pc, #272]	; (800d2c8 <MX_LWIP_Init+0x27c>)
 800d1b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d1ba:	4b41      	ldr	r3, [pc, #260]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	061a      	lsls	r2, r3, #24
 800d1c0:	4b3f      	ldr	r3, [pc, #252]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	041b      	lsls	r3, r3, #16
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	4b3d      	ldr	r3, [pc, #244]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1ca:	789b      	ldrb	r3, [r3, #2]
 800d1cc:	021b      	lsls	r3, r3, #8
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	4a3b      	ldr	r2, [pc, #236]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1d2:	78d2      	ldrb	r2, [r2, #3]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	061a      	lsls	r2, r3, #24
 800d1d8:	4b39      	ldr	r3, [pc, #228]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	0619      	lsls	r1, r3, #24
 800d1de:	4b38      	ldr	r3, [pc, #224]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1e0:	785b      	ldrb	r3, [r3, #1]
 800d1e2:	041b      	lsls	r3, r3, #16
 800d1e4:	4319      	orrs	r1, r3
 800d1e6:	4b36      	ldr	r3, [pc, #216]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1e8:	789b      	ldrb	r3, [r3, #2]
 800d1ea:	021b      	lsls	r3, r3, #8
 800d1ec:	430b      	orrs	r3, r1
 800d1ee:	4934      	ldr	r1, [pc, #208]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1f0:	78c9      	ldrb	r1, [r1, #3]
 800d1f2:	430b      	orrs	r3, r1
 800d1f4:	021b      	lsls	r3, r3, #8
 800d1f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1fa:	431a      	orrs	r2, r3
 800d1fc:	4b30      	ldr	r3, [pc, #192]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	0619      	lsls	r1, r3, #24
 800d202:	4b2f      	ldr	r3, [pc, #188]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d204:	785b      	ldrb	r3, [r3, #1]
 800d206:	041b      	lsls	r3, r3, #16
 800d208:	4319      	orrs	r1, r3
 800d20a:	4b2d      	ldr	r3, [pc, #180]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d20c:	789b      	ldrb	r3, [r3, #2]
 800d20e:	021b      	lsls	r3, r3, #8
 800d210:	430b      	orrs	r3, r1
 800d212:	492b      	ldr	r1, [pc, #172]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d214:	78c9      	ldrb	r1, [r1, #3]
 800d216:	430b      	orrs	r3, r1
 800d218:	0a1b      	lsrs	r3, r3, #8
 800d21a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d21e:	431a      	orrs	r2, r3
 800d220:	4b27      	ldr	r3, [pc, #156]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	0619      	lsls	r1, r3, #24
 800d226:	4b26      	ldr	r3, [pc, #152]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d228:	785b      	ldrb	r3, [r3, #1]
 800d22a:	041b      	lsls	r3, r3, #16
 800d22c:	4319      	orrs	r1, r3
 800d22e:	4b24      	ldr	r3, [pc, #144]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d230:	789b      	ldrb	r3, [r3, #2]
 800d232:	021b      	lsls	r3, r3, #8
 800d234:	430b      	orrs	r3, r1
 800d236:	4922      	ldr	r1, [pc, #136]	; (800d2c0 <MX_LWIP_Init+0x274>)
 800d238:	78c9      	ldrb	r1, [r1, #3]
 800d23a:	430b      	orrs	r3, r1
 800d23c:	0e1b      	lsrs	r3, r3, #24
 800d23e:	4313      	orrs	r3, r2
 800d240:	4a22      	ldr	r2, [pc, #136]	; (800d2cc <MX_LWIP_Init+0x280>)
 800d242:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d244:	4b22      	ldr	r3, [pc, #136]	; (800d2d0 <MX_LWIP_Init+0x284>)
 800d246:	9302      	str	r3, [sp, #8]
 800d248:	4b22      	ldr	r3, [pc, #136]	; (800d2d4 <MX_LWIP_Init+0x288>)
 800d24a:	9301      	str	r3, [sp, #4]
 800d24c:	2300      	movs	r3, #0
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	4b1e      	ldr	r3, [pc, #120]	; (800d2cc <MX_LWIP_Init+0x280>)
 800d252:	4a1d      	ldr	r2, [pc, #116]	; (800d2c8 <MX_LWIP_Init+0x27c>)
 800d254:	491b      	ldr	r1, [pc, #108]	; (800d2c4 <MX_LWIP_Init+0x278>)
 800d256:	4820      	ldr	r0, [pc, #128]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d258:	f006 fbee 	bl	8013a38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d25c:	481e      	ldr	r0, [pc, #120]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d25e:	f006 fd9d 	bl	8013d9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d262:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d268:	089b      	lsrs	r3, r3, #2
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <MX_LWIP_Init+0x230>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d274:	4818      	ldr	r0, [pc, #96]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d276:	f006 fda1 	bl	8013dbc <netif_set_up>
 800d27a:	e002      	b.n	800d282 <MX_LWIP_Init+0x236>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d27c:	4816      	ldr	r0, [pc, #88]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d27e:	f006 fe09 	bl	8013e94 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800d282:	4916      	ldr	r1, [pc, #88]	; (800d2dc <MX_LWIP_Init+0x290>)
 800d284:	4814      	ldr	r0, [pc, #80]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d286:	f006 fe37 	bl	8013ef8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800d28a:	2300      	movs	r3, #0
 800d28c:	603b      	str	r3, [r7, #0]
 800d28e:	2300      	movs	r3, #0
 800d290:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800d292:	463b      	mov	r3, r7
 800d294:	2101      	movs	r1, #1
 800d296:	4618      	mov	r0, r3
 800d298:	f000 fd38 	bl	800dd0c <osSemaphoreCreate>
 800d29c:	4603      	mov	r3, r0
 800d29e:	4a10      	ldr	r2, [pc, #64]	; (800d2e0 <MX_LWIP_Init+0x294>)
 800d2a0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800d2a2:	4b10      	ldr	r3, [pc, #64]	; (800d2e4 <MX_LWIP_Init+0x298>)
 800d2a4:	4a0c      	ldr	r2, [pc, #48]	; (800d2d8 <MX_LWIP_Init+0x28c>)
 800d2a6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800d2a8:	4b0d      	ldr	r3, [pc, #52]	; (800d2e0 <MX_LWIP_Init+0x294>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a0d      	ldr	r2, [pc, #52]	; (800d2e4 <MX_LWIP_Init+0x298>)
 800d2ae:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20007924 	.word	0x20007924
 800d2bc:	20007920 	.word	0x20007920
 800d2c0:	200078e4 	.word	0x200078e4
 800d2c4:	2000791c 	.word	0x2000791c
 800d2c8:	20007928 	.word	0x20007928
 800d2cc:	2000792c 	.word	0x2000792c
 800d2d0:	08012e41 	.word	0x08012e41
 800d2d4:	0800d919 	.word	0x0800d919
 800d2d8:	200078e8 	.word	0x200078e8
 800d2dc:	0800d985 	.word	0x0800d985
 800d2e0:	20000954 	.word	0x20000954
 800d2e4:	200078dc 	.word	0x200078dc

0800d2e8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08e      	sub	sp, #56	; 0x38
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	605a      	str	r2, [r3, #4]
 800d2fa:	609a      	str	r2, [r3, #8]
 800d2fc:	60da      	str	r2, [r3, #12]
 800d2fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a4a      	ldr	r2, [pc, #296]	; (800d430 <HAL_ETH_MspInit+0x148>)
 800d306:	4293      	cmp	r3, r2
 800d308:	f040 808d 	bne.w	800d426 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800d30c:	2300      	movs	r3, #0
 800d30e:	623b      	str	r3, [r7, #32]
 800d310:	4b48      	ldr	r3, [pc, #288]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d314:	4a47      	ldr	r2, [pc, #284]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d31a:	6313      	str	r3, [r2, #48]	; 0x30
 800d31c:	4b45      	ldr	r3, [pc, #276]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d324:	623b      	str	r3, [r7, #32]
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	2300      	movs	r3, #0
 800d32a:	61fb      	str	r3, [r7, #28]
 800d32c:	4b41      	ldr	r3, [pc, #260]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d330:	4a40      	ldr	r2, [pc, #256]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d336:	6313      	str	r3, [r2, #48]	; 0x30
 800d338:	4b3e      	ldr	r3, [pc, #248]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d340:	61fb      	str	r3, [r7, #28]
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	2300      	movs	r3, #0
 800d346:	61bb      	str	r3, [r7, #24]
 800d348:	4b3a      	ldr	r3, [pc, #232]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34c:	4a39      	ldr	r2, [pc, #228]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d34e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d352:	6313      	str	r3, [r2, #48]	; 0x30
 800d354:	4b37      	ldr	r3, [pc, #220]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d35c:	61bb      	str	r3, [r7, #24]
 800d35e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d360:	2300      	movs	r3, #0
 800d362:	617b      	str	r3, [r7, #20]
 800d364:	4b33      	ldr	r3, [pc, #204]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d368:	4a32      	ldr	r2, [pc, #200]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d36a:	f043 0304 	orr.w	r3, r3, #4
 800d36e:	6313      	str	r3, [r2, #48]	; 0x30
 800d370:	4b30      	ldr	r3, [pc, #192]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d374:	f003 0304 	and.w	r3, r3, #4
 800d378:	617b      	str	r3, [r7, #20]
 800d37a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d37c:	2300      	movs	r3, #0
 800d37e:	613b      	str	r3, [r7, #16]
 800d380:	4b2c      	ldr	r3, [pc, #176]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d384:	4a2b      	ldr	r2, [pc, #172]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d386:	f043 0301 	orr.w	r3, r3, #1
 800d38a:	6313      	str	r3, [r2, #48]	; 0x30
 800d38c:	4b29      	ldr	r3, [pc, #164]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d390:	f003 0301 	and.w	r3, r3, #1
 800d394:	613b      	str	r3, [r7, #16]
 800d396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d398:	2300      	movs	r3, #0
 800d39a:	60fb      	str	r3, [r7, #12]
 800d39c:	4b25      	ldr	r3, [pc, #148]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a0:	4a24      	ldr	r2, [pc, #144]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d3a2:	f043 0302 	orr.w	r3, r3, #2
 800d3a6:	6313      	str	r3, [r2, #48]	; 0x30
 800d3a8:	4b22      	ldr	r3, [pc, #136]	; (800d434 <HAL_ETH_MspInit+0x14c>)
 800d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ac:	f003 0302 	and.w	r3, r3, #2
 800d3b0:	60fb      	str	r3, [r7, #12]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800d3b4:	2332      	movs	r3, #50	; 0x32
 800d3b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d3c4:	230b      	movs	r3, #11
 800d3c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d3c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	481a      	ldr	r0, [pc, #104]	; (800d438 <HAL_ETH_MspInit+0x150>)
 800d3d0:	f7fc f986 	bl	80096e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800d3d4:	2386      	movs	r3, #134	; 0x86
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d8:	2302      	movs	r3, #2
 800d3da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d3e4:	230b      	movs	r3, #11
 800d3e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4813      	ldr	r0, [pc, #76]	; (800d43c <HAL_ETH_MspInit+0x154>)
 800d3f0:	f7fc f976 	bl	80096e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800d3f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d3f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3fa:	2302      	movs	r3, #2
 800d3fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d402:	2303      	movs	r3, #3
 800d404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d406:	230b      	movs	r3, #11
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d40e:	4619      	mov	r1, r3
 800d410:	480b      	ldr	r0, [pc, #44]	; (800d440 <HAL_ETH_MspInit+0x158>)
 800d412:	f7fc f965 	bl	80096e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d416:	2200      	movs	r2, #0
 800d418:	2105      	movs	r1, #5
 800d41a:	203d      	movs	r0, #61	; 0x3d
 800d41c:	f7fa fb22 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d420:	203d      	movs	r0, #61	; 0x3d
 800d422:	f7fa fb3b 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d426:	bf00      	nop
 800d428:	3738      	adds	r7, #56	; 0x38
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	40028000 	.word	0x40028000
 800d434:	40023800 	.word	0x40023800
 800d438:	40020800 	.word	0x40020800
 800d43c:	40020000 	.word	0x40020000
 800d440:	40020400 	.word	0x40020400

0800d444 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800d44c:	4b04      	ldr	r3, [pc, #16]	; (800d460 <HAL_ETH_RxCpltCallback+0x1c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f000 fcdb 	bl	800de0c <osSemaphoreRelease>
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20000958 	.word	0x20000958

0800d464 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d464:	b5b0      	push	{r4, r5, r7, lr}
 800d466:	b090      	sub	sp, #64	; 0x40
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800d46c:	2300      	movs	r3, #0
 800d46e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d470:	4b60      	ldr	r3, [pc, #384]	; (800d5f4 <low_level_init+0x190>)
 800d472:	4a61      	ldr	r2, [pc, #388]	; (800d5f8 <low_level_init+0x194>)
 800d474:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800d476:	4b5f      	ldr	r3, [pc, #380]	; (800d5f4 <low_level_init+0x190>)
 800d478:	2201      	movs	r2, #1
 800d47a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800d47c:	4b5d      	ldr	r3, [pc, #372]	; (800d5f4 <low_level_init+0x190>)
 800d47e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d482:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800d484:	4b5b      	ldr	r3, [pc, #364]	; (800d5f4 <low_level_init+0x190>)
 800d486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d48a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800d48c:	4b59      	ldr	r3, [pc, #356]	; (800d5f4 <low_level_init+0x190>)
 800d48e:	2200      	movs	r2, #0
 800d490:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800d492:	2300      	movs	r3, #0
 800d494:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800d498:	2380      	movs	r3, #128	; 0x80
 800d49a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800d49e:	23e1      	movs	r3, #225	; 0xe1
 800d4a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x13;
 800d4aa:	2313      	movs	r3, #19
 800d4ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800d4b6:	4a4f      	ldr	r2, [pc, #316]	; (800d5f4 <low_level_init+0x190>)
 800d4b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d4bc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800d4be:	4b4d      	ldr	r3, [pc, #308]	; (800d5f4 <low_level_init+0x190>)
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800d4c4:	4b4b      	ldr	r3, [pc, #300]	; (800d5f4 <low_level_init+0x190>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800d4ca:	4b4a      	ldr	r3, [pc, #296]	; (800d5f4 <low_level_init+0x190>)
 800d4cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d4d0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d4d2:	4848      	ldr	r0, [pc, #288]	; (800d5f4 <low_level_init+0x190>)
 800d4d4:	f7fa ff5e 	bl	8008394 <HAL_ETH_Init>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800d4de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d108      	bne.n	800d4f8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ec:	f043 0304 	orr.w	r3, r3, #4
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d4f8:	2304      	movs	r3, #4
 800d4fa:	4a40      	ldr	r2, [pc, #256]	; (800d5fc <low_level_init+0x198>)
 800d4fc:	4940      	ldr	r1, [pc, #256]	; (800d600 <low_level_init+0x19c>)
 800d4fe:	483d      	ldr	r0, [pc, #244]	; (800d5f4 <low_level_init+0x190>)
 800d500:	f7fb f8e4 	bl	80086cc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d504:	2304      	movs	r3, #4
 800d506:	4a3f      	ldr	r2, [pc, #252]	; (800d604 <low_level_init+0x1a0>)
 800d508:	493f      	ldr	r1, [pc, #252]	; (800d608 <low_level_init+0x1a4>)
 800d50a:	483a      	ldr	r0, [pc, #232]	; (800d5f4 <low_level_init+0x190>)
 800d50c:	f7fb f947 	bl	800879e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2206      	movs	r2, #6
 800d514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d518:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <low_level_init+0x190>)
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	781a      	ldrb	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d524:	4b33      	ldr	r3, [pc, #204]	; (800d5f4 <low_level_init+0x190>)
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	785a      	ldrb	r2, [r3, #1]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d530:	4b30      	ldr	r3, [pc, #192]	; (800d5f4 <low_level_init+0x190>)
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	789a      	ldrb	r2, [r3, #2]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d53c:	4b2d      	ldr	r3, [pc, #180]	; (800d5f4 <low_level_init+0x190>)
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	78da      	ldrb	r2, [r3, #3]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d548:	4b2a      	ldr	r3, [pc, #168]	; (800d5f4 <low_level_init+0x190>)
 800d54a:	695b      	ldr	r3, [r3, #20]
 800d54c:	791a      	ldrb	r2, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d554:	4b27      	ldr	r3, [pc, #156]	; (800d5f4 <low_level_init+0x190>)
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	795a      	ldrb	r2, [r3, #5]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d566:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d56e:	f043 030a 	orr.w	r3, r3, #10
 800d572:	b2da      	uxtb	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800d57a:	2300      	movs	r3, #0
 800d57c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d57e:	2300      	movs	r3, #0
 800d580:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d586:	2101      	movs	r1, #1
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fbbf 	bl	800dd0c <osSemaphoreCreate>
 800d58e:	4603      	mov	r3, r0
 800d590:	4a1e      	ldr	r2, [pc, #120]	; (800d60c <low_level_init+0x1a8>)
 800d592:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d594:	4b1e      	ldr	r3, [pc, #120]	; (800d610 <low_level_init+0x1ac>)
 800d596:	f107 040c 	add.w	r4, r7, #12
 800d59a:	461d      	mov	r5, r3
 800d59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d59e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d5a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800d5a8:	f107 030c 	add.w	r3, r7, #12
 800d5ac:	6879      	ldr	r1, [r7, #4]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f000 faaf 	bl	800db12 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800d5b4:	480f      	ldr	r0, [pc, #60]	; (800d5f4 <low_level_init+0x190>)
 800d5b6:	f7fb fc1a 	bl	8008dee <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800d5ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d5be:	461a      	mov	r2, r3
 800d5c0:	211d      	movs	r1, #29
 800d5c2:	480c      	ldr	r0, [pc, #48]	; (800d5f4 <low_level_init+0x190>)
 800d5c4:	f7fb fb45 	bl	8008c52 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ca:	f043 030b 	orr.w	r3, r3, #11
 800d5ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	211d      	movs	r1, #29
 800d5d6:	4807      	ldr	r0, [pc, #28]	; (800d5f4 <low_level_init+0x190>)
 800d5d8:	f7fb fba3 	bl	8008d22 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800d5dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	211d      	movs	r1, #29
 800d5e4:	4803      	ldr	r0, [pc, #12]	; (800d5f4 <low_level_init+0x190>)
 800d5e6:	f7fb fb34 	bl	8008c52 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800d5ea:	bf00      	nop
 800d5ec:	3740      	adds	r7, #64	; 0x40
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20009200 	.word	0x20009200
 800d5f8:	40028000 	.word	0x40028000
 800d5fc:	20009248 	.word	0x20009248
 800d600:	20007930 	.word	0x20007930
 800d604:	200079b0 	.word	0x200079b0
 800d608:	20009180 	.word	0x20009180
 800d60c:	20000958 	.word	0x20000958
 800d610:	08023760 	.word	0x08023760

0800d614 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08a      	sub	sp, #40	; 0x28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d61e:	4b4b      	ldr	r3, [pc, #300]	; (800d74c <low_level_output+0x138>)
 800d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800d632:	2300      	movs	r3, #0
 800d634:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800d636:	4b45      	ldr	r3, [pc, #276]	; (800d74c <low_level_output+0x138>)
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800d63c:	2300      	movs	r3, #0
 800d63e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	623b      	str	r3, [r7, #32]
 800d644:	e05a      	b.n	800d6fc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	da03      	bge.n	800d656 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800d64e:	23f8      	movs	r3, #248	; 0xf8
 800d650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800d654:	e05c      	b.n	800d710 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	895b      	ldrh	r3, [r3, #10]
 800d65a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d660:	e02f      	b.n	800d6c2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d662:	69fa      	ldr	r2, [r7, #28]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	18d0      	adds	r0, r2, r3
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	18d1      	adds	r1, r2, r3
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d676:	3304      	adds	r3, #4
 800d678:	461a      	mov	r2, r3
 800d67a:	f010 fe83 	bl	801e384 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da03      	bge.n	800d694 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800d68c:	23f8      	movs	r3, #248	; 0xf8
 800d68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800d692:	e03d      	b.n	800d710 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d69a:	693a      	ldr	r2, [r7, #16]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d6a4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d6b0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d6bc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d8c8      	bhi.n	800d662 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d6d0:	69fa      	ldr	r2, [r7, #28]
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	18d0      	adds	r0, r2, r3
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	4413      	add	r3, r2
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	f010 fe4f 	bl	801e384 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800d6ee:	697a      	ldr	r2, [r7, #20]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	623b      	str	r3, [r7, #32]
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1a1      	bne.n	800d646 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d702:	6979      	ldr	r1, [r7, #20]
 800d704:	4811      	ldr	r0, [pc, #68]	; (800d74c <low_level_output+0x138>)
 800d706:	f7fb f8b7 	bl	8008878 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800d70a:	2300      	movs	r3, #0
 800d70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d710:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <low_level_output+0x138>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d718:	3314      	adds	r3, #20
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 0320 	and.w	r3, r3, #32
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00d      	beq.n	800d740 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d724:	4b09      	ldr	r3, [pc, #36]	; (800d74c <low_level_output+0x138>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d72c:	3314      	adds	r3, #20
 800d72e:	2220      	movs	r2, #32
 800d730:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d732:	4b06      	ldr	r3, [pc, #24]	; (800d74c <low_level_output+0x138>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d73a:	3304      	adds	r3, #4
 800d73c:	2200      	movs	r2, #0
 800d73e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800d740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d744:	4618      	mov	r0, r3
 800d746:	3728      	adds	r7, #40	; 0x28
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20009200 	.word	0x20009200

0800d750 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08c      	sub	sp, #48	; 0x30
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d758:	2300      	movs	r3, #0
 800d75a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800d770:	2300      	movs	r3, #0
 800d772:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d774:	484f      	ldr	r0, [pc, #316]	; (800d8b4 <low_level_input+0x164>)
 800d776:	f7fb f969 	bl	8008a4c <HAL_ETH_GetReceivedFrame_IT>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <low_level_input+0x34>

    return NULL;
 800d780:	2300      	movs	r3, #0
 800d782:	e092      	b.n	800d8aa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800d784:	4b4b      	ldr	r3, [pc, #300]	; (800d8b4 <low_level_input+0x164>)
 800d786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d788:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d78a:	4b4a      	ldr	r3, [pc, #296]	; (800d8b4 <low_level_input+0x164>)
 800d78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800d790:	89fb      	ldrh	r3, [r7, #14]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d007      	beq.n	800d7a6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800d79c:	4619      	mov	r1, r3
 800d79e:	2000      	movs	r0, #0
 800d7a0:	f006 fc74 	bl	801408c <pbuf_alloc>
 800d7a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d04b      	beq.n	800d844 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d7ac:	4b41      	ldr	r3, [pc, #260]	; (800d8b4 <low_level_input+0x164>)
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7ba:	e040      	b.n	800d83e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	895b      	ldrh	r3, [r3, #10]
 800d7c0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d7c6:	e021      	b.n	800d80c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	18d0      	adds	r0, r2, r3
 800d7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	18d1      	adds	r1, r2, r3
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d7dc:	3304      	adds	r3, #4
 800d7de:	461a      	mov	r2, r3
 800d7e0:	f010 fdd0 	bl	801e384 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d7f0:	69fa      	ldr	r2, [r7, #28]
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d7fa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d7fc:	69ba      	ldr	r2, [r7, #24]
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d806:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	4413      	add	r3, r2
 800d812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d816:	4293      	cmp	r3, r2
 800d818:	d8d6      	bhi.n	800d7c8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	18d0      	adds	r0, r2, r3
 800d822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	4413      	add	r3, r2
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	4619      	mov	r1, r3
 800d82c:	f010 fdaa 	bl	801e384 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d830:	69fa      	ldr	r2, [r7, #28]
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	4413      	add	r3, r2
 800d836:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1bb      	bne.n	800d7bc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d844:	4b1b      	ldr	r3, [pc, #108]	; (800d8b4 <low_level_input+0x164>)
 800d846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d848:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d84a:	2300      	movs	r3, #0
 800d84c:	613b      	str	r3, [r7, #16]
 800d84e:	e00b      	b.n	800d868 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	3301      	adds	r3, #1
 800d866:	613b      	str	r3, [r7, #16]
 800d868:	4b12      	ldr	r3, [pc, #72]	; (800d8b4 <low_level_input+0x164>)
 800d86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d3ee      	bcc.n	800d850 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800d872:	4b10      	ldr	r3, [pc, #64]	; (800d8b4 <low_level_input+0x164>)
 800d874:	2200      	movs	r2, #0
 800d876:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800d878:	4b0e      	ldr	r3, [pc, #56]	; (800d8b4 <low_level_input+0x164>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d880:	3314      	adds	r3, #20
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00d      	beq.n	800d8a8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d88c:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <low_level_input+0x164>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d894:	3314      	adds	r3, #20
 800d896:	2280      	movs	r2, #128	; 0x80
 800d898:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800d89a:	4b06      	ldr	r3, [pc, #24]	; (800d8b4 <low_level_input+0x164>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3730      	adds	r7, #48	; 0x30
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	20009200 	.word	0x20009200

0800d8b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d8c4:	4b12      	ldr	r3, [pc, #72]	; (800d910 <ethernetif_input+0x58>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f04f 31ff 	mov.w	r1, #4294967295
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 fa4f 	bl	800dd70 <osSemaphoreWait>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1f5      	bne.n	800d8c4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800d8d8:	480e      	ldr	r0, [pc, #56]	; (800d914 <ethernetif_input+0x5c>)
 800d8da:	f010 fbc3 	bl	801e064 <sys_mutex_lock>
        p = low_level_input( netif );
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f7ff ff36 	bl	800d750 <low_level_input>
 800d8e4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00a      	beq.n	800d902 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	68f9      	ldr	r1, [r7, #12]
 800d8f2:	68b8      	ldr	r0, [r7, #8]
 800d8f4:	4798      	blx	r3
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800d8fc:	68b8      	ldr	r0, [r7, #8]
 800d8fe:	f006 fea9 	bl	8014654 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800d902:	4804      	ldr	r0, [pc, #16]	; (800d914 <ethernetif_input+0x5c>)
 800d904:	f010 fbbd 	bl	801e082 <sys_mutex_unlock>
      } while(p!=NULL);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1e4      	bne.n	800d8d8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d90e:	e7d9      	b.n	800d8c4 <ethernetif_input+0xc>
 800d910:	20000958 	.word	0x20000958
 800d914:	2000aa58 	.word	0x2000aa58

0800d918 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d106      	bne.n	800d934 <ethernetif_init+0x1c>
 800d926:	4b0e      	ldr	r3, [pc, #56]	; (800d960 <ethernetif_init+0x48>)
 800d928:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d92c:	490d      	ldr	r1, [pc, #52]	; (800d964 <ethernetif_init+0x4c>)
 800d92e:	480e      	ldr	r0, [pc, #56]	; (800d968 <ethernetif_init+0x50>)
 800d930:	f011 fc7c 	bl	801f22c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2273      	movs	r2, #115	; 0x73
 800d938:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2274      	movs	r2, #116	; 0x74
 800d940:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a09      	ldr	r2, [pc, #36]	; (800d96c <ethernetif_init+0x54>)
 800d948:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a08      	ldr	r2, [pc, #32]	; (800d970 <ethernetif_init+0x58>)
 800d94e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff fd87 	bl	800d464 <low_level_init>

  return ERR_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	0802377c 	.word	0x0802377c
 800d964:	08023798 	.word	0x08023798
 800d968:	080237a8 	.word	0x080237a8
 800d96c:	0801c079 	.word	0x0801c079
 800d970:	0800d615 	.word	0x0800d615

0800d974 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d978:	f7f9 fb60 	bl	800703c <HAL_GetTick>
 800d97c:	4603      	mov	r3, r0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800d990:	2300      	movs	r3, #0
 800d992:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d99a:	089b      	lsrs	r3, r3, #2
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d05d      	beq.n	800da62 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800d9a6:	4b34      	ldr	r3, [pc, #208]	; (800da78 <ethernetif_update_config+0xf4>)
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d03f      	beq.n	800da2e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800d9ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4830      	ldr	r0, [pc, #192]	; (800da78 <ethernetif_update_config+0xf4>)
 800d9b6:	f7fb f9b4 	bl	8008d22 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800d9ba:	f7f9 fb3f 	bl	800703c <HAL_GetTick>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800d9c2:	f107 0308 	add.w	r3, r7, #8
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	482b      	ldr	r0, [pc, #172]	; (800da78 <ethernetif_update_config+0xf4>)
 800d9cc:	f7fb f941 	bl	8008c52 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800d9d0:	f7f9 fb34 	bl	800703c <HAL_GetTick>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9de:	d828      	bhi.n	800da32 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f003 0320 	and.w	r3, r3, #32
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d0eb      	beq.n	800d9c2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800d9ea:	f107 0308 	add.w	r3, r7, #8
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	2110      	movs	r1, #16
 800d9f2:	4821      	ldr	r0, [pc, #132]	; (800da78 <ethernetif_update_config+0xf4>)
 800d9f4:	f7fb f92d 	bl	8008c52 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d004      	beq.n	800da0c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800da02:	4b1d      	ldr	r3, [pc, #116]	; (800da78 <ethernetif_update_config+0xf4>)
 800da04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da08:	60da      	str	r2, [r3, #12]
 800da0a:	e002      	b.n	800da12 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800da0c:	4b1a      	ldr	r3, [pc, #104]	; (800da78 <ethernetif_update_config+0xf4>)
 800da0e:	2200      	movs	r2, #0
 800da10:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	f003 0302 	and.w	r3, r3, #2
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800da1c:	4b16      	ldr	r3, [pc, #88]	; (800da78 <ethernetif_update_config+0xf4>)
 800da1e:	2200      	movs	r2, #0
 800da20:	609a      	str	r2, [r3, #8]
 800da22:	e016      	b.n	800da52 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800da24:	4b14      	ldr	r3, [pc, #80]	; (800da78 <ethernetif_update_config+0xf4>)
 800da26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800da2a:	609a      	str	r2, [r3, #8]
 800da2c:	e011      	b.n	800da52 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800da2e:	bf00      	nop
 800da30:	e000      	b.n	800da34 <ethernetif_update_config+0xb0>
          goto error;
 800da32:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800da34:	4b10      	ldr	r3, [pc, #64]	; (800da78 <ethernetif_update_config+0xf4>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	08db      	lsrs	r3, r3, #3
 800da3a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800da3c:	4b0e      	ldr	r3, [pc, #56]	; (800da78 <ethernetif_update_config+0xf4>)
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	085b      	lsrs	r3, r3, #1
 800da42:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800da44:	4313      	orrs	r3, r2
 800da46:	b29b      	uxth	r3, r3
 800da48:	461a      	mov	r2, r3
 800da4a:	2100      	movs	r1, #0
 800da4c:	480a      	ldr	r0, [pc, #40]	; (800da78 <ethernetif_update_config+0xf4>)
 800da4e:	f7fb f968 	bl	8008d22 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800da52:	2100      	movs	r1, #0
 800da54:	4808      	ldr	r0, [pc, #32]	; (800da78 <ethernetif_update_config+0xf4>)
 800da56:	f7fb fa29 	bl	8008eac <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800da5a:	4807      	ldr	r0, [pc, #28]	; (800da78 <ethernetif_update_config+0xf4>)
 800da5c:	f7fb f9c7 	bl	8008dee <HAL_ETH_Start>
 800da60:	e002      	b.n	800da68 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800da62:	4805      	ldr	r0, [pc, #20]	; (800da78 <ethernetif_update_config+0xf4>)
 800da64:	f7fb f9f2 	bl	8008e4c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 f807 	bl	800da7c <ethernetif_notify_conn_changed>
}
 800da6e:	bf00      	nop
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	20009200 	.word	0x20009200

0800da7c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	4603      	mov	r3, r0
 800da98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800da9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800daa2:	2b84      	cmp	r3, #132	; 0x84
 800daa4:	d005      	beq.n	800dab2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800daa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4413      	add	r3, r2
 800daae:	3303      	adds	r3, #3
 800dab0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dab2:	68fb      	ldr	r3, [r7, #12]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac6:	f3ef 8305 	mrs	r3, IPSR
 800daca:	607b      	str	r3, [r7, #4]
  return(result);
 800dacc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dace:	2b00      	cmp	r3, #0
 800dad0:	bf14      	ite	ne
 800dad2:	2301      	movne	r3, #1
 800dad4:	2300      	moveq	r3, #0
 800dad6:	b2db      	uxtb	r3, r3
}
 800dad8:	4618      	mov	r0, r3
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dae8:	f001 ff70 	bl	800f9cc <vTaskStartScheduler>
  
  return osOK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800daf6:	f7ff ffe3 	bl	800dac0 <inHandlerMode>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d003      	beq.n	800db08 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800db00:	f002 f888 	bl	800fc14 <xTaskGetTickCountFromISR>
 800db04:	4603      	mov	r3, r0
 800db06:	e002      	b.n	800db0e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800db08:	f002 f874 	bl	800fbf4 <xTaskGetTickCount>
 800db0c:	4603      	mov	r3, r0
  }
}
 800db0e:	4618      	mov	r0, r3
 800db10:	bd80      	pop	{r7, pc}

0800db12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800db12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db14:	b089      	sub	sp, #36	; 0x24
 800db16:	af04      	add	r7, sp, #16
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	695b      	ldr	r3, [r3, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d020      	beq.n	800db66 <osThreadCreate+0x54>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01c      	beq.n	800db66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685c      	ldr	r4, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681d      	ldr	r5, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	691e      	ldr	r6, [r3, #16]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff ffa6 	bl	800da90 <makeFreeRtosPriority>
 800db44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db4e:	9202      	str	r2, [sp, #8]
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	9100      	str	r1, [sp, #0]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	4632      	mov	r2, r6
 800db58:	4629      	mov	r1, r5
 800db5a:	4620      	mov	r0, r4
 800db5c:	f001 fd58 	bl	800f610 <xTaskCreateStatic>
 800db60:	4603      	mov	r3, r0
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	e01c      	b.n	800dba0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685c      	ldr	r4, [r3, #4]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db72:	b29e      	uxth	r6, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7ff ff88 	bl	800da90 <makeFreeRtosPriority>
 800db80:	4602      	mov	r2, r0
 800db82:	f107 030c 	add.w	r3, r7, #12
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	9200      	str	r2, [sp, #0]
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	4632      	mov	r2, r6
 800db8e:	4629      	mov	r1, r5
 800db90:	4620      	mov	r0, r4
 800db92:	f001 fd9a 	bl	800f6ca <xTaskCreate>
 800db96:	4603      	mov	r3, r0
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d001      	beq.n	800dba0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800db9c:	2300      	movs	r3, #0
 800db9e:	e000      	b.n	800dba2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dba0:	68fb      	ldr	r3, [r7, #12]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbaa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <osDelay+0x16>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	e000      	b.n	800dbc2 <osDelay+0x18>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f001 fece 	bl	800f964 <vTaskDelay>
  
  return osOK;
 800dbc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b082      	sub	sp, #8
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d007      	beq.n	800dbf2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	2001      	movs	r0, #1
 800dbea:	f000 feb2 	bl	800e952 <xQueueCreateMutexStatic>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	e003      	b.n	800dbfa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800dbf2:	2001      	movs	r0, #1
 800dbf4:	f000 fe95 	bl	800e922 <xQueueCreateMutex>
 800dbf8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d101      	bne.n	800dc1c <osMutexWait+0x18>
    return osErrorParameter;
 800dc18:	2380      	movs	r3, #128	; 0x80
 800dc1a:	e03a      	b.n	800dc92 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	d103      	bne.n	800dc30 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800dc28:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	e009      	b.n	800dc44 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <osMutexWait+0x40>
      ticks = 1;
 800dc40:	2301      	movs	r3, #1
 800dc42:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dc44:	f7ff ff3c 	bl	800dac0 <inHandlerMode>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d017      	beq.n	800dc7e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800dc4e:	f107 0308 	add.w	r3, r7, #8
 800dc52:	461a      	mov	r2, r3
 800dc54:	2100      	movs	r1, #0
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f001 faa8 	bl	800f1ac <xQueueReceiveFromISR>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d001      	beq.n	800dc66 <osMutexWait+0x62>
      return osErrorOS;
 800dc62:	23ff      	movs	r3, #255	; 0xff
 800dc64:	e015      	b.n	800dc92 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d011      	beq.n	800dc90 <osMutexWait+0x8c>
 800dc6c:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <osMutexWait+0x98>)
 800dc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	e008      	b.n	800dc90 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800dc7e:	68f9      	ldr	r1, [r7, #12]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f001 f987 	bl	800ef94 <xQueueSemaphoreTake>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d001      	beq.n	800dc90 <osMutexWait+0x8c>
    return osErrorOS;
 800dc8c:	23ff      	movs	r3, #255	; 0xff
 800dc8e:	e000      	b.n	800dc92 <osMutexWait+0x8e>
  }
  
  return osOK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	e000ed04 	.word	0xe000ed04

0800dca0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800dcb0:	f7ff ff06 	bl	800dac0 <inHandlerMode>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d016      	beq.n	800dce8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800dcba:	f107 0308 	add.w	r3, r7, #8
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fffa 	bl	800ecba <xQueueGiveFromISR>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d001      	beq.n	800dcd0 <osMutexRelease+0x30>
      return osErrorOS;
 800dccc:	23ff      	movs	r3, #255	; 0xff
 800dcce:	e017      	b.n	800dd00 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d013      	beq.n	800dcfe <osMutexRelease+0x5e>
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <osMutexRelease+0x68>)
 800dcd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	e00a      	b.n	800dcfe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800dce8:	2300      	movs	r3, #0
 800dcea:	2200      	movs	r2, #0
 800dcec:	2100      	movs	r1, #0
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fe4a 	bl	800e988 <xQueueGenericSend>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d001      	beq.n	800dcfe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800dcfa:	23ff      	movs	r3, #255	; 0xff
 800dcfc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	e000ed04 	.word	0xe000ed04

0800dd0c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00f      	beq.n	800dd3e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d10a      	bne.n	800dd3a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	2203      	movs	r2, #3
 800dd2a:	9200      	str	r2, [sp, #0]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	2001      	movs	r0, #1
 800dd32:	f000 fd0b 	bl	800e74c <xQueueGenericCreateStatic>
 800dd36:	4603      	mov	r3, r0
 800dd38:	e016      	b.n	800dd68 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	e014      	b.n	800dd68 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d110      	bne.n	800dd66 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800dd44:	2203      	movs	r2, #3
 800dd46:	2100      	movs	r1, #0
 800dd48:	2001      	movs	r0, #1
 800dd4a:	f000 fd77 	bl	800e83c <xQueueGenericCreate>
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d005      	beq.n	800dd62 <osSemaphoreCreate+0x56>
 800dd56:	2300      	movs	r3, #0
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f000 fe13 	bl	800e988 <xQueueGenericSend>
      return sema;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	e000      	b.n	800dd68 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800dd66:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800dd84:	2380      	movs	r3, #128	; 0x80
 800dd86:	e03a      	b.n	800ddfe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d103      	bne.n	800dd9c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800dd94:	f04f 33ff 	mov.w	r3, #4294967295
 800dd98:	60fb      	str	r3, [r7, #12]
 800dd9a:	e009      	b.n	800ddb0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d006      	beq.n	800ddb0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <osSemaphoreWait+0x40>
      ticks = 1;
 800ddac:	2301      	movs	r3, #1
 800ddae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ddb0:	f7ff fe86 	bl	800dac0 <inHandlerMode>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d017      	beq.n	800ddea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ddba:	f107 0308 	add.w	r3, r7, #8
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f001 f9f2 	bl	800f1ac <xQueueReceiveFromISR>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d001      	beq.n	800ddd2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ddce:	23ff      	movs	r3, #255	; 0xff
 800ddd0:	e015      	b.n	800ddfe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d011      	beq.n	800ddfc <osSemaphoreWait+0x8c>
 800ddd8:	4b0b      	ldr	r3, [pc, #44]	; (800de08 <osSemaphoreWait+0x98>)
 800ddda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	e008      	b.n	800ddfc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ddea:	68f9      	ldr	r1, [r7, #12]
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f001 f8d1 	bl	800ef94 <xQueueSemaphoreTake>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d001      	beq.n	800ddfc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ddf8:	23ff      	movs	r3, #255	; 0xff
 800ddfa:	e000      	b.n	800ddfe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ddfc:	2300      	movs	r3, #0
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	e000ed04 	.word	0xe000ed04

0800de0c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800de18:	2300      	movs	r3, #0
 800de1a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800de1c:	f7ff fe50 	bl	800dac0 <inHandlerMode>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d016      	beq.n	800de54 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800de26:	f107 0308 	add.w	r3, r7, #8
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 ff44 	bl	800ecba <xQueueGiveFromISR>
 800de32:	4603      	mov	r3, r0
 800de34:	2b01      	cmp	r3, #1
 800de36:	d001      	beq.n	800de3c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800de38:	23ff      	movs	r3, #255	; 0xff
 800de3a:	e017      	b.n	800de6c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d013      	beq.n	800de6a <osSemaphoreRelease+0x5e>
 800de42:	4b0c      	ldr	r3, [pc, #48]	; (800de74 <osSemaphoreRelease+0x68>)
 800de44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	e00a      	b.n	800de6a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800de54:	2300      	movs	r3, #0
 800de56:	2200      	movs	r2, #0
 800de58:	2100      	movs	r1, #0
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 fd94 	bl	800e988 <xQueueGenericSend>
 800de60:	4603      	mov	r3, r0
 800de62:	2b01      	cmp	r3, #1
 800de64:	d001      	beq.n	800de6a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800de66:	23ff      	movs	r3, #255	; 0xff
 800de68:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800de6a:	68fb      	ldr	r3, [r7, #12]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	e000ed04 	.word	0xe000ed04

0800de78 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800de80:	f7ff fe1e 	bl	800dac0 <inHandlerMode>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800de8a:	2382      	movs	r3, #130	; 0x82
 800de8c:	e003      	b.n	800de96 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f001 fa48 	bl	800f324 <vQueueDelete>

  return osOK; 
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b086      	sub	sp, #24
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	3303      	adds	r3, #3
 800deac:	f023 0303 	bic.w	r3, r3, #3
 800deb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800deb2:	2014      	movs	r0, #20
 800deb4:	f002 fe30 	bl	8010b18 <pvPortMalloc>
 800deb8:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d046      	beq.n	800df4e <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	2200      	movs	r2, #0
 800ded2:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4618      	mov	r0, r3
 800deda:	f002 fe1d 	bl	8010b18 <pvPortMalloc>
 800dede:	4602      	mov	r2, r0
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d02b      	beq.n	800df44 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	fb02 f303 	mul.w	r3, r2, r3
 800def6:	4618      	mov	r0, r3
 800def8:	f002 fe0e 	bl	8010b18 <pvPortMalloc>
 800defc:	4602      	mov	r2, r0
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d011      	beq.n	800df2e <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800df0a:	2300      	movs	r3, #0
 800df0c:	613b      	str	r3, [r7, #16]
 800df0e:	e008      	b.n	800df22 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	685a      	ldr	r2, [r3, #4]
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	4413      	add	r3, r2
 800df18:	2200      	movs	r2, #0
 800df1a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	3301      	adds	r3, #1
 800df20:	613b      	str	r3, [r7, #16]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3f1      	bcc.n	800df10 <osPoolCreate+0x72>
 800df2c:	e00f      	b.n	800df4e <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	4618      	mov	r0, r3
 800df34:	f002 febc 	bl	8010cb0 <vPortFree>
        vPortFree(thePool);
 800df38:	6978      	ldr	r0, [r7, #20]
 800df3a:	f002 feb9 	bl	8010cb0 <vPortFree>
        thePool = NULL;
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	e004      	b.n	800df4e <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800df44:	6978      	ldr	r0, [r7, #20]
 800df46:	f002 feb3 	bl	8010cb0 <vPortFree>
      thePool = NULL;
 800df4a:	2300      	movs	r3, #0
 800df4c:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800df4e:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800df50:	4618      	mov	r0, r3
 800df52:	3718      	adds	r7, #24
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08a      	sub	sp, #40	; 0x28
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800df68:	f7ff fdaa 	bl	800dac0 <inHandlerMode>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <osPoolAlloc+0x38>
	__asm volatile
 800df72:	f3ef 8211 	mrs	r2, BASEPRI
 800df76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7a:	f383 8811 	msr	BASEPRI, r3
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f3bf 8f4f 	dsb	sy
 800df86:	617a      	str	r2, [r7, #20]
 800df88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800df8a:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800df8c:	627b      	str	r3, [r7, #36]	; 0x24
 800df8e:	e001      	b.n	800df94 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800df90:	f002 fca0 	bl	80108d4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800df94:	2300      	movs	r3, #0
 800df96:	61fb      	str	r3, [r7, #28]
 800df98:	e029      	b.n	800dfee <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	691a      	ldr	r2, [r3, #16]
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	6892      	ldr	r2, [r2, #8]
 800dfa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfaa:	fb02 f201 	mul.w	r2, r2, r1
 800dfae:	1a9b      	subs	r3, r3, r2
 800dfb0:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	4413      	add	r3, r2
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d113      	bne.n	800dfe8 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	2201      	movs	r2, #1
 800dfca:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	69ba      	ldr	r2, [r7, #24]
 800dfd8:	fb02 f303 	mul.w	r3, r2, r3
 800dfdc:	440b      	add	r3, r1
 800dfde:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	611a      	str	r2, [r3, #16]
      break;
 800dfe6:	e007      	b.n	800dff8 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	3301      	adds	r3, #1
 800dfec:	61fb      	str	r3, [r7, #28]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	69fa      	ldr	r2, [r7, #28]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d3d0      	bcc.n	800df9a <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800dff8:	f7ff fd62 	bl	800dac0 <inHandlerMode>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800e002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e004:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f383 8811 	msr	BASEPRI, r3
}
 800e00c:	e001      	b.n	800e012 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800e00e:	f002 fc91 	bl	8010934 <vPortExitCritical>
  }
  
  return p;
 800e012:	6a3b      	ldr	r3, [r7, #32]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3728      	adds	r7, #40	; 0x28
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b085      	sub	sp, #20
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <osPoolFree+0x14>
    return osErrorParameter;
 800e02c:	2380      	movs	r3, #128	; 0x80
 800e02e:	e030      	b.n	800e092 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <osPoolFree+0x1e>
    return osErrorParameter;
 800e036:	2380      	movs	r3, #128	; 0x80
 800e038:	e02b      	b.n	800e092 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d201      	bcs.n	800e048 <osPoolFree+0x2c>
    return osErrorParameter;
 800e044:	2380      	movs	r3, #128	; 0x80
 800e046:	e024      	b.n	800e092 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	6812      	ldr	r2, [r2, #0]
 800e04e:	1a9b      	subs	r3, r3, r2
 800e050:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68da      	ldr	r2, [r3, #12]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	fbb3 f1f2 	udiv	r1, r3, r2
 800e05c:	fb02 f201 	mul.w	r2, r2, r1
 800e060:	1a9b      	subs	r3, r3, r2
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <osPoolFree+0x4e>
    return osErrorParameter;
 800e066:	2380      	movs	r3, #128	; 0x80
 800e068:	e013      	b.n	800e092 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	fbb2 f3f3 	udiv	r3, r2, r3
 800e074:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d301      	bcc.n	800e084 <osPoolFree+0x68>
    return osErrorParameter;
 800e080:	2380      	movs	r3, #128	; 0x80
 800e082:	e006      	b.n	800e092 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	4413      	add	r3, r2
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e09e:	b590      	push	{r4, r7, lr}
 800e0a0:	b085      	sub	sp, #20
 800e0a2:	af02      	add	r7, sp, #8
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d011      	beq.n	800e0d4 <osMessageCreate+0x36>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00d      	beq.n	800e0d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6818      	ldr	r0, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6859      	ldr	r1, [r3, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	689a      	ldr	r2, [r3, #8]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	2400      	movs	r4, #0
 800e0ca:	9400      	str	r4, [sp, #0]
 800e0cc:	f000 fb3e 	bl	800e74c <xQueueGenericCreateStatic>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	e008      	b.n	800e0e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6818      	ldr	r0, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	4619      	mov	r1, r3
 800e0e0:	f000 fbac 	bl	800e83c <xQueueGenericCreate>
 800e0e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd90      	pop	{r4, r7, pc}
	...

0800e0f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <osMessagePut+0x1e>
    ticks = 1;
 800e10a:	2301      	movs	r3, #1
 800e10c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e10e:	f7ff fcd7 	bl	800dac0 <inHandlerMode>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d018      	beq.n	800e14a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e118:	f107 0210 	add.w	r2, r7, #16
 800e11c:	f107 0108 	add.w	r1, r7, #8
 800e120:	2300      	movs	r3, #0
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f000 fd2e 	bl	800eb84 <xQueueGenericSendFromISR>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d001      	beq.n	800e132 <osMessagePut+0x42>
      return osErrorOS;
 800e12e:	23ff      	movs	r3, #255	; 0xff
 800e130:	e018      	b.n	800e164 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d014      	beq.n	800e162 <osMessagePut+0x72>
 800e138:	4b0c      	ldr	r3, [pc, #48]	; (800e16c <osMessagePut+0x7c>)
 800e13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13e:	601a      	str	r2, [r3, #0]
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	f3bf 8f6f 	isb	sy
 800e148:	e00b      	b.n	800e162 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e14a:	f107 0108 	add.w	r1, r7, #8
 800e14e:	2300      	movs	r3, #0
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f000 fc18 	bl	800e988 <xQueueGenericSend>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d001      	beq.n	800e162 <osMessagePut+0x72>
      return osErrorOS;
 800e15e:	23ff      	movs	r3, #255	; 0xff
 800e160:	e000      	b.n	800e164 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e170:	b590      	push	{r4, r7, lr}
 800e172:	b08b      	sub	sp, #44	; 0x2c
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d10a      	bne.n	800e1a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e18a:	2380      	movs	r3, #128	; 0x80
 800e18c:	617b      	str	r3, [r7, #20]
    return event;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	461c      	mov	r4, r3
 800e192:	f107 0314 	add.w	r3, r7, #20
 800e196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e19a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e19e:	e054      	b.n	800e24a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ae:	d103      	bne.n	800e1b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e1b6:	e009      	b.n	800e1cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d006      	beq.n	800e1cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d101      	bne.n	800e1cc <osMessageGet+0x5c>
      ticks = 1;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e1cc:	f7ff fc78 	bl	800dac0 <inHandlerMode>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d01c      	beq.n	800e210 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e1d6:	f107 0220 	add.w	r2, r7, #32
 800e1da:	f107 0314 	add.w	r3, r7, #20
 800e1de:	3304      	adds	r3, #4
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	68b8      	ldr	r0, [r7, #8]
 800e1e4:	f000 ffe2 	bl	800f1ac <xQueueReceiveFromISR>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d102      	bne.n	800e1f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e1ee:	2310      	movs	r3, #16
 800e1f0:	617b      	str	r3, [r7, #20]
 800e1f2:	e001      	b.n	800e1f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d01d      	beq.n	800e23a <osMessageGet+0xca>
 800e1fe:	4b15      	ldr	r3, [pc, #84]	; (800e254 <osMessageGet+0xe4>)
 800e200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	e014      	b.n	800e23a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e210:	f107 0314 	add.w	r3, r7, #20
 800e214:	3304      	adds	r3, #4
 800e216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e218:	4619      	mov	r1, r3
 800e21a:	68b8      	ldr	r0, [r7, #8]
 800e21c:	f000 fdda 	bl	800edd4 <xQueueReceive>
 800e220:	4603      	mov	r3, r0
 800e222:	2b01      	cmp	r3, #1
 800e224:	d102      	bne.n	800e22c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e226:	2310      	movs	r3, #16
 800e228:	617b      	str	r3, [r7, #20]
 800e22a:	e006      	b.n	800e23a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d101      	bne.n	800e236 <osMessageGet+0xc6>
 800e232:	2300      	movs	r3, #0
 800e234:	e000      	b.n	800e238 <osMessageGet+0xc8>
 800e236:	2340      	movs	r3, #64	; 0x40
 800e238:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	461c      	mov	r4, r3
 800e23e:	f107 0314 	add.w	r3, r7, #20
 800e242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	372c      	adds	r7, #44	; 0x2c
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd90      	pop	{r4, r7, pc}
 800e252:	bf00      	nop
 800e254:	e000ed04 	.word	0xe000ed04

0800e258 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800e258:	b590      	push	{r4, r7, lr}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	613b      	str	r3, [r7, #16]
 800e26e:	2300      	movs	r3, #0
 800e270:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	689c      	ldr	r4, [r3, #8]
 800e276:	200c      	movs	r0, #12
 800e278:	f002 fc4e 	bl	8010b18 <pvPortMalloc>
 800e27c:	4603      	mov	r3, r0
 800e27e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <osMailCreate+0x36>
    return NULL;
 800e28a:	2300      	movs	r3, #0
 800e28c:	e038      	b.n	800e300 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6818      	ldr	r0, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	681c      	ldr	r4, [r3, #0]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	2104      	movs	r1, #4
 800e2a6:	f000 fac9 	bl	800e83c <xQueueGenericCreate>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d107      	bne.n	800e2ca <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f002 fcf5 	bl	8010cb0 <vPortFree>
    return NULL;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e01a      	b.n	800e300 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	681c      	ldr	r4, [r3, #0]
 800e2d0:	f107 030c 	add.w	r3, r7, #12
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7ff fde2 	bl	800de9e <osPoolCreate>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	689b      	ldr	r3, [r3, #8]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d107      	bne.n	800e2fa <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f002 fcdd 	bl	8010cb0 <vPortFree>
    return NULL;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e002      	b.n	800e300 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800e300:	4618      	mov	r0, r3
 800e302:	371c      	adds	r7, #28
 800e304:	46bd      	mov	sp, r7
 800e306:	bd90      	pop	{r4, r7, pc}

0800e308 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <osMailAlloc+0x14>
    return NULL;
 800e318:	2300      	movs	r3, #0
 800e31a:	e006      	b.n	800e32a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fe19 	bl	800df58 <osPoolAlloc>
 800e326:	60f8      	str	r0, [r7, #12]
  
  return p;
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
	...

0800e334 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <osMailPut+0x14>
    return osErrorParameter;
 800e344:	2380      	movs	r3, #128	; 0x80
 800e346:	e02c      	b.n	800e3a2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800e348:	2300      	movs	r3, #0
 800e34a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800e34c:	f7ff fbb8 	bl	800dac0 <inHandlerMode>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d018      	beq.n	800e388 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6858      	ldr	r0, [r3, #4]
 800e35a:	f107 020c 	add.w	r2, r7, #12
 800e35e:	4639      	mov	r1, r7
 800e360:	2300      	movs	r3, #0
 800e362:	f000 fc0f 	bl	800eb84 <xQueueGenericSendFromISR>
 800e366:	4603      	mov	r3, r0
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d001      	beq.n	800e370 <osMailPut+0x3c>
      return osErrorOS;
 800e36c:	23ff      	movs	r3, #255	; 0xff
 800e36e:	e018      	b.n	800e3a2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d014      	beq.n	800e3a0 <osMailPut+0x6c>
 800e376:	4b0d      	ldr	r3, [pc, #52]	; (800e3ac <osMailPut+0x78>)
 800e378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	e00b      	b.n	800e3a0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6858      	ldr	r0, [r3, #4]
 800e38c:	4639      	mov	r1, r7
 800e38e:	2300      	movs	r3, #0
 800e390:	2200      	movs	r2, #0
 800e392:	f000 faf9 	bl	800e988 <xQueueGenericSend>
 800e396:	4603      	mov	r3, r0
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d001      	beq.n	800e3a0 <osMailPut+0x6c>
      return osErrorOS;
 800e39c:	23ff      	movs	r3, #255	; 0xff
 800e39e:	e000      	b.n	800e3a2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	e000ed04 	.word	0xe000ed04

0800e3b0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800e3b0:	b590      	push	{r4, r7, lr}
 800e3b2:	b08b      	sub	sp, #44	; 0x2c
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10a      	bne.n	800e3dc <osMailGet+0x2c>
    event.status = osErrorParameter;
 800e3c6:	2380      	movs	r3, #128	; 0x80
 800e3c8:	617b      	str	r3, [r7, #20]
    return event;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	461c      	mov	r4, r3
 800e3ce:	f107 0314 	add.w	r3, r7, #20
 800e3d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e3da:	e056      	b.n	800e48a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ea:	d103      	bne.n	800e3f4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800e3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800e3f2:	e009      	b.n	800e408 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d006      	beq.n	800e408 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	2b00      	cmp	r3, #0
 800e402:	d101      	bne.n	800e408 <osMailGet+0x58>
      ticks = 1;
 800e404:	2301      	movs	r3, #1
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e408:	f7ff fb5a 	bl	800dac0 <inHandlerMode>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d01d      	beq.n	800e44e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	6858      	ldr	r0, [r3, #4]
 800e416:	f107 0220 	add.w	r2, r7, #32
 800e41a:	f107 0314 	add.w	r3, r7, #20
 800e41e:	3304      	adds	r3, #4
 800e420:	4619      	mov	r1, r3
 800e422:	f000 fec3 	bl	800f1ac <xQueueReceiveFromISR>
 800e426:	4603      	mov	r3, r0
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d102      	bne.n	800e432 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800e42c:	2320      	movs	r3, #32
 800e42e:	617b      	str	r3, [r7, #20]
 800e430:	e001      	b.n	800e436 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800e432:	2300      	movs	r3, #0
 800e434:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01e      	beq.n	800e47a <osMailGet+0xca>
 800e43c:	4b15      	ldr	r3, [pc, #84]	; (800e494 <osMailGet+0xe4>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	e015      	b.n	800e47a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	6858      	ldr	r0, [r3, #4]
 800e452:	f107 0314 	add.w	r3, r7, #20
 800e456:	3304      	adds	r3, #4
 800e458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e45a:	4619      	mov	r1, r3
 800e45c:	f000 fcba 	bl	800edd4 <xQueueReceive>
 800e460:	4603      	mov	r3, r0
 800e462:	2b01      	cmp	r3, #1
 800e464:	d102      	bne.n	800e46c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800e466:	2320      	movs	r3, #32
 800e468:	617b      	str	r3, [r7, #20]
 800e46a:	e006      	b.n	800e47a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <osMailGet+0xc6>
 800e472:	2300      	movs	r3, #0
 800e474:	e000      	b.n	800e478 <osMailGet+0xc8>
 800e476:	2340      	movs	r3, #64	; 0x40
 800e478:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	461c      	mov	r4, r3
 800e47e:	f107 0314 	add.w	r3, r7, #20
 800e482:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	372c      	adds	r7, #44	; 0x2c
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd90      	pop	{r4, r7, pc}
 800e492:	bf00      	nop
 800e494:	e000ed04 	.word	0xe000ed04

0800e498 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d101      	bne.n	800e4ac <osMailFree+0x14>
    return osErrorParameter;
 800e4a8:	2380      	movs	r3, #128	; 0x80
 800e4aa:	e006      	b.n	800e4ba <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fdb2 	bl	800e01c <osPoolFree>
 800e4b8:	4603      	mov	r3, r0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e4ca:	f7ff faf9 	bl	800dac0 <inHandlerMode>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d004      	beq.n	800e4de <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 ff07 	bl	800f2e8 <uxQueueMessagesWaitingFromISR>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	e003      	b.n	800e4e6 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fee4 	bl	800f2ac <uxQueueMessagesWaiting>
 800e4e4:	4603      	mov	r3, r0
  }
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e4f6:	f7ff fae3 	bl	800dac0 <inHandlerMode>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d001      	beq.n	800e504 <osMessageDelete+0x16>
    return osErrorISR;
 800e500:	2382      	movs	r3, #130	; 0x82
 800e502:	e003      	b.n	800e50c <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 ff0d 	bl	800f324 <vQueueDelete>

  return osOK; 
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f103 0208 	add.w	r2, r3, #8
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f04f 32ff 	mov.w	r2, #4294967295
 800e52c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f103 0208 	add.w	r2, r3, #8
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f103 0208 	add.w	r2, r3, #8
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e562:	bf00      	nop
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr

0800e56e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e56e:	b480      	push	{r7}
 800e570:	b085      	sub	sp, #20
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	689a      	ldr	r2, [r3, #8]
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	601a      	str	r2, [r3, #0]
}
 800e5aa:	bf00      	nop
 800e5ac:	3714      	adds	r7, #20
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr

0800e5b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5b6:	b480      	push	{r7}
 800e5b8:	b085      	sub	sp, #20
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5cc:	d103      	bne.n	800e5d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	e00c      	b.n	800e5f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	3308      	adds	r3, #8
 800e5da:	60fb      	str	r3, [r7, #12]
 800e5dc:	e002      	b.n	800e5e4 <vListInsert+0x2e>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d2f6      	bcs.n	800e5de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	601a      	str	r2, [r3, #0]
}
 800e61c:	bf00      	nop
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	6892      	ldr	r2, [r2, #8]
 800e63e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	6852      	ldr	r2, [r2, #4]
 800e648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	429a      	cmp	r2, r3
 800e652:	d103      	bne.n	800e65c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	689a      	ldr	r2, [r3, #8]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	1e5a      	subs	r2, r3, #1
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10a      	bne.n	800e6a6 <xQueueGenericReset+0x2a>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	60bb      	str	r3, [r7, #8]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e6a6:	f002 f915 	bl	80108d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b2:	68f9      	ldr	r1, [r7, #12]
 800e6b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e6b6:	fb01 f303 	mul.w	r3, r1, r3
 800e6ba:	441a      	add	r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	68f9      	ldr	r1, [r7, #12]
 800e6da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e6dc:	fb01 f303 	mul.w	r3, r1, r3
 800e6e0:	441a      	add	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	22ff      	movs	r2, #255	; 0xff
 800e6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	22ff      	movs	r2, #255	; 0xff
 800e6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d114      	bne.n	800e726 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d01a      	beq.n	800e73a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	3310      	adds	r3, #16
 800e708:	4618      	mov	r0, r3
 800e70a:	f001 fbd3 	bl	800feb4 <xTaskRemoveFromEventList>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d012      	beq.n	800e73a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e714:	4b0c      	ldr	r3, [pc, #48]	; (800e748 <xQueueGenericReset+0xcc>)
 800e716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	e009      	b.n	800e73a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3310      	adds	r3, #16
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fef2 	bl	800e514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	3324      	adds	r3, #36	; 0x24
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff feed 	bl	800e514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e73a:	f002 f8fb 	bl	8010934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e73e:	2301      	movs	r3, #1
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	e000ed04 	.word	0xe000ed04

0800e74c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08e      	sub	sp, #56	; 0x38
 800e750:	af02      	add	r7, sp, #8
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10a      	bne.n	800e776 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10a      	bne.n	800e792 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e78e:	bf00      	nop
 800e790:	e7fe      	b.n	800e790 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <xQueueGenericCreateStatic+0x52>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <xQueueGenericCreateStatic+0x56>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e000      	b.n	800e7a4 <xQueueGenericCreateStatic+0x58>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10a      	bne.n	800e7be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ac:	f383 8811 	msr	BASEPRI, r3
 800e7b0:	f3bf 8f6f 	isb	sy
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	623b      	str	r3, [r7, #32]
}
 800e7ba:	bf00      	nop
 800e7bc:	e7fe      	b.n	800e7bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <xQueueGenericCreateStatic+0x7e>
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <xQueueGenericCreateStatic+0x82>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e000      	b.n	800e7d0 <xQueueGenericCreateStatic+0x84>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10a      	bne.n	800e7ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	61fb      	str	r3, [r7, #28]
}
 800e7e6:	bf00      	nop
 800e7e8:	e7fe      	b.n	800e7e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e7ea:	2348      	movs	r3, #72	; 0x48
 800e7ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	2b48      	cmp	r3, #72	; 0x48
 800e7f2:	d00a      	beq.n	800e80a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	61bb      	str	r3, [r7, #24]
}
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e80a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00d      	beq.n	800e832 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	2201      	movs	r2, #1
 800e81a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e81e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	4613      	mov	r3, r2
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f000 f83f 	bl	800e8b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e834:	4618      	mov	r0, r3
 800e836:	3730      	adds	r7, #48	; 0x30
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af02      	add	r7, sp, #8
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	4613      	mov	r3, r2
 800e848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10a      	bne.n	800e866 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	613b      	str	r3, [r7, #16]
}
 800e862:	bf00      	nop
 800e864:	e7fe      	b.n	800e864 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	fb02 f303 	mul.w	r3, r2, r3
 800e86e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	3348      	adds	r3, #72	; 0x48
 800e874:	4618      	mov	r0, r3
 800e876:	f002 f94f 	bl	8010b18 <pvPortMalloc>
 800e87a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d011      	beq.n	800e8a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	3348      	adds	r3, #72	; 0x48
 800e88a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e894:	79fa      	ldrb	r2, [r7, #7]
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	4613      	mov	r3, r2
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	68b9      	ldr	r1, [r7, #8]
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 f805 	bl	800e8b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e8a6:	69bb      	ldr	r3, [r7, #24]
	}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d103      	bne.n	800e8cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	69ba      	ldr	r2, [r7, #24]
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	e002      	b.n	800e8d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e8de:	2101      	movs	r1, #1
 800e8e0:	69b8      	ldr	r0, [r7, #24]
 800e8e2:	f7ff fecb 	bl	800e67c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e8e6:	bf00      	nop
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00e      	beq.n	800e91a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e90e:	2300      	movs	r3, #0
 800e910:	2200      	movs	r2, #0
 800e912:	2100      	movs	r1, #0
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f837 	bl	800e988 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e91a:	bf00      	nop
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e922:	b580      	push	{r7, lr}
 800e924:	b086      	sub	sp, #24
 800e926:	af00      	add	r7, sp, #0
 800e928:	4603      	mov	r3, r0
 800e92a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e92c:	2301      	movs	r3, #1
 800e92e:	617b      	str	r3, [r7, #20]
 800e930:	2300      	movs	r3, #0
 800e932:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e934:	79fb      	ldrb	r3, [r7, #7]
 800e936:	461a      	mov	r2, r3
 800e938:	6939      	ldr	r1, [r7, #16]
 800e93a:	6978      	ldr	r0, [r7, #20]
 800e93c:	f7ff ff7e 	bl	800e83c <xQueueGenericCreate>
 800e940:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff ffd3 	bl	800e8ee <prvInitialiseMutex>

		return xNewQueue;
 800e948:	68fb      	ldr	r3, [r7, #12]
	}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e952:	b580      	push	{r7, lr}
 800e954:	b088      	sub	sp, #32
 800e956:	af02      	add	r7, sp, #8
 800e958:	4603      	mov	r3, r0
 800e95a:	6039      	str	r1, [r7, #0]
 800e95c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e95e:	2301      	movs	r3, #1
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	2300      	movs	r3, #0
 800e964:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	2200      	movs	r2, #0
 800e96e:	6939      	ldr	r1, [r7, #16]
 800e970:	6978      	ldr	r0, [r7, #20]
 800e972:	f7ff feeb 	bl	800e74c <xQueueGenericCreateStatic>
 800e976:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f7ff ffb8 	bl	800e8ee <prvInitialiseMutex>

		return xNewQueue;
 800e97e:	68fb      	ldr	r3, [r7, #12]
	}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08e      	sub	sp, #56	; 0x38
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e996:	2300      	movs	r3, #0
 800e998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10a      	bne.n	800e9ba <xQueueGenericSend+0x32>
	__asm volatile
 800e9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9b6:	bf00      	nop
 800e9b8:	e7fe      	b.n	800e9b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d103      	bne.n	800e9c8 <xQueueGenericSend+0x40>
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <xQueueGenericSend+0x44>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e000      	b.n	800e9ce <xQueueGenericSend+0x46>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10a      	bne.n	800e9e8 <xQueueGenericSend+0x60>
	__asm volatile
 800e9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9e4:	bf00      	nop
 800e9e6:	e7fe      	b.n	800e9e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d103      	bne.n	800e9f6 <xQueueGenericSend+0x6e>
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d101      	bne.n	800e9fa <xQueueGenericSend+0x72>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e000      	b.n	800e9fc <xQueueGenericSend+0x74>
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10a      	bne.n	800ea16 <xQueueGenericSend+0x8e>
	__asm volatile
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	623b      	str	r3, [r7, #32]
}
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea16:	f001 fc0d 	bl	8010234 <xTaskGetSchedulerState>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <xQueueGenericSend+0x9e>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <xQueueGenericSend+0xa2>
 800ea26:	2301      	movs	r3, #1
 800ea28:	e000      	b.n	800ea2c <xQueueGenericSend+0xa4>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d10a      	bne.n	800ea46 <xQueueGenericSend+0xbe>
	__asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	61fb      	str	r3, [r7, #28]
}
 800ea42:	bf00      	nop
 800ea44:	e7fe      	b.n	800ea44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea46:	f001 ff45 	bl	80108d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d302      	bcc.n	800ea5c <xQueueGenericSend+0xd4>
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	d129      	bne.n	800eab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	68b9      	ldr	r1, [r7, #8]
 800ea60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea62:	f000 fc9a 	bl	800f39a <prvCopyDataToQueue>
 800ea66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d010      	beq.n	800ea92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	3324      	adds	r3, #36	; 0x24
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 fa1d 	bl	800feb4 <xTaskRemoveFromEventList>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d013      	beq.n	800eaa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea80:	4b3f      	ldr	r3, [pc, #252]	; (800eb80 <xQueueGenericSend+0x1f8>)
 800ea82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	e00a      	b.n	800eaa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d007      	beq.n	800eaa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea98:	4b39      	ldr	r3, [pc, #228]	; (800eb80 <xQueueGenericSend+0x1f8>)
 800ea9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eaa8:	f001 ff44 	bl	8010934 <vPortExitCritical>
				return pdPASS;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e063      	b.n	800eb78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d103      	bne.n	800eabe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eab6:	f001 ff3d 	bl	8010934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eaba:	2300      	movs	r3, #0
 800eabc:	e05c      	b.n	800eb78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d106      	bne.n	800ead2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eac4:	f107 0314 	add.w	r3, r7, #20
 800eac8:	4618      	mov	r0, r3
 800eaca:	f001 fa55 	bl	800ff78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eace:	2301      	movs	r3, #1
 800ead0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ead2:	f001 ff2f 	bl	8010934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ead6:	f000 ffe3 	bl	800faa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eada:	f001 fefb 	bl	80108d4 <vPortEnterCritical>
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaea:	d103      	bne.n	800eaf4 <xQueueGenericSend+0x16c>
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eafa:	b25b      	sxtb	r3, r3
 800eafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb00:	d103      	bne.n	800eb0a <xQueueGenericSend+0x182>
 800eb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb0a:	f001 ff13 	bl	8010934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb0e:	1d3a      	adds	r2, r7, #4
 800eb10:	f107 0314 	add.w	r3, r7, #20
 800eb14:	4611      	mov	r1, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f001 fa44 	bl	800ffa4 <xTaskCheckForTimeOut>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d124      	bne.n	800eb6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb24:	f000 fd31 	bl	800f58a <prvIsQueueFull>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d018      	beq.n	800eb60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	3310      	adds	r3, #16
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	4611      	mov	r1, r2
 800eb36:	4618      	mov	r0, r3
 800eb38:	f001 f998 	bl	800fe6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb3e:	f000 fcbc 	bl	800f4ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb42:	f000 ffbb 	bl	800fabc <xTaskResumeAll>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f47f af7c 	bne.w	800ea46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <xQueueGenericSend+0x1f8>)
 800eb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb54:	601a      	str	r2, [r3, #0]
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	e772      	b.n	800ea46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eb60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb62:	f000 fcaa 	bl	800f4ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb66:	f000 ffa9 	bl	800fabc <xTaskResumeAll>
 800eb6a:	e76c      	b.n	800ea46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eb6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb6e:	f000 fca4 	bl	800f4ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb72:	f000 ffa3 	bl	800fabc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3738      	adds	r7, #56	; 0x38
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	e000ed04 	.word	0xe000ed04

0800eb84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b090      	sub	sp, #64	; 0x40
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	607a      	str	r2, [r7, #4]
 800eb90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d103      	bne.n	800ebc0 <xQueueGenericSendFromISR+0x3c>
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <xQueueGenericSendFromISR+0x40>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e000      	b.n	800ebc6 <xQueueGenericSendFromISR+0x42>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebdc:	bf00      	nop
 800ebde:	e7fe      	b.n	800ebde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d103      	bne.n	800ebee <xQueueGenericSendFromISR+0x6a>
 800ebe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d101      	bne.n	800ebf2 <xQueueGenericSendFromISR+0x6e>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e000      	b.n	800ebf4 <xQueueGenericSendFromISR+0x70>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10a      	bne.n	800ec0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	623b      	str	r3, [r7, #32]
}
 800ec0a:	bf00      	nop
 800ec0c:	e7fe      	b.n	800ec0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec0e:	f001 ff43 	bl	8010a98 <vPortValidateInterruptPriority>
	__asm volatile
 800ec12:	f3ef 8211 	mrs	r2, BASEPRI
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	61fa      	str	r2, [r7, #28]
 800ec28:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ec2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d302      	bcc.n	800ec40 <xQueueGenericSendFromISR+0xbc>
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d12f      	bne.n	800eca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	68b9      	ldr	r1, [r7, #8]
 800ec54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec56:	f000 fba0 	bl	800f39a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ec5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec62:	d112      	bne.n	800ec8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d016      	beq.n	800ec9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6e:	3324      	adds	r3, #36	; 0x24
 800ec70:	4618      	mov	r0, r3
 800ec72:	f001 f91f 	bl	800feb4 <xTaskRemoveFromEventList>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00e      	beq.n	800ec9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00b      	beq.n	800ec9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2201      	movs	r2, #1
 800ec86:	601a      	str	r2, [r3, #0]
 800ec88:	e007      	b.n	800ec9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec8e:	3301      	adds	r3, #1
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	b25a      	sxtb	r2, r3
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ec9e:	e001      	b.n	800eca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	f383 8811 	msr	BASEPRI, r3
}
 800ecae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ecb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3740      	adds	r7, #64	; 0x40
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b08e      	sub	sp, #56	; 0x38
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ecc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10a      	bne.n	800ece4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	623b      	str	r3, [r7, #32]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ece4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00a      	beq.n	800ed02 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	61fb      	str	r3, [r7, #28]
}
 800ecfe:	bf00      	nop
 800ed00:	e7fe      	b.n	800ed00 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d103      	bne.n	800ed12 <xQueueGiveFromISR+0x58>
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <xQueueGiveFromISR+0x5c>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e000      	b.n	800ed18 <xQueueGiveFromISR+0x5e>
 800ed16:	2300      	movs	r3, #0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10a      	bne.n	800ed32 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	61bb      	str	r3, [r7, #24]
}
 800ed2e:	bf00      	nop
 800ed30:	e7fe      	b.n	800ed30 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed32:	f001 feb1 	bl	8010a98 <vPortValidateInterruptPriority>
	__asm volatile
 800ed36:	f3ef 8211 	mrs	r2, BASEPRI
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	617a      	str	r2, [r7, #20]
 800ed4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ed4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d22b      	bcs.n	800edba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7c:	d112      	bne.n	800eda4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d016      	beq.n	800edb4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	3324      	adds	r3, #36	; 0x24
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f001 f892 	bl	800feb4 <xTaskRemoveFromEventList>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00e      	beq.n	800edb4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00b      	beq.n	800edb4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	601a      	str	r2, [r3, #0]
 800eda2:	e007      	b.n	800edb4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda8:	3301      	adds	r3, #1
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	b25a      	sxtb	r2, r3
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800edb4:	2301      	movs	r3, #1
 800edb6:	637b      	str	r3, [r7, #52]	; 0x34
 800edb8:	e001      	b.n	800edbe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edba:	2300      	movs	r3, #0
 800edbc:	637b      	str	r3, [r7, #52]	; 0x34
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f383 8811 	msr	BASEPRI, r3
}
 800edc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3738      	adds	r7, #56	; 0x38
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08c      	sub	sp, #48	; 0x30
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ede0:	2300      	movs	r3, #0
 800ede2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ede8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10a      	bne.n	800ee04 <xQueueReceive+0x30>
	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	623b      	str	r3, [r7, #32]
}
 800ee00:	bf00      	nop
 800ee02:	e7fe      	b.n	800ee02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <xQueueReceive+0x3e>
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d101      	bne.n	800ee16 <xQueueReceive+0x42>
 800ee12:	2301      	movs	r3, #1
 800ee14:	e000      	b.n	800ee18 <xQueueReceive+0x44>
 800ee16:	2300      	movs	r3, #0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10a      	bne.n	800ee32 <xQueueReceive+0x5e>
	__asm volatile
 800ee1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee20:	f383 8811 	msr	BASEPRI, r3
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	61fb      	str	r3, [r7, #28]
}
 800ee2e:	bf00      	nop
 800ee30:	e7fe      	b.n	800ee30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee32:	f001 f9ff 	bl	8010234 <xTaskGetSchedulerState>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d102      	bne.n	800ee42 <xQueueReceive+0x6e>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d101      	bne.n	800ee46 <xQueueReceive+0x72>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <xQueueReceive+0x74>
 800ee46:	2300      	movs	r3, #0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <xQueueReceive+0x8e>
	__asm volatile
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	61bb      	str	r3, [r7, #24]
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee62:	f001 fd37 	bl	80108d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d01f      	beq.n	800eeb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee72:	68b9      	ldr	r1, [r7, #8]
 800ee74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee76:	f000 fafa 	bl	800f46e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7c:	1e5a      	subs	r2, r3, #1
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	691b      	ldr	r3, [r3, #16]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00f      	beq.n	800eeaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	3310      	adds	r3, #16
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f001 f810 	bl	800feb4 <xTaskRemoveFromEventList>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee9a:	4b3d      	ldr	r3, [pc, #244]	; (800ef90 <xQueueReceive+0x1bc>)
 800ee9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	f3bf 8f4f 	dsb	sy
 800eea6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eeaa:	f001 fd43 	bl	8010934 <vPortExitCritical>
				return pdPASS;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e069      	b.n	800ef86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d103      	bne.n	800eec0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eeb8:	f001 fd3c 	bl	8010934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eebc:	2300      	movs	r3, #0
 800eebe:	e062      	b.n	800ef86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eec6:	f107 0310 	add.w	r3, r7, #16
 800eeca:	4618      	mov	r0, r3
 800eecc:	f001 f854 	bl	800ff78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eed0:	2301      	movs	r3, #1
 800eed2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eed4:	f001 fd2e 	bl	8010934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eed8:	f000 fde2 	bl	800faa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eedc:	f001 fcfa 	bl	80108d4 <vPortEnterCritical>
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eee6:	b25b      	sxtb	r3, r3
 800eee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeec:	d103      	bne.n	800eef6 <xQueueReceive+0x122>
 800eeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef02:	d103      	bne.n	800ef0c <xQueueReceive+0x138>
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef0c:	f001 fd12 	bl	8010934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef10:	1d3a      	adds	r2, r7, #4
 800ef12:	f107 0310 	add.w	r3, r7, #16
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f001 f843 	bl	800ffa4 <xTaskCheckForTimeOut>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d123      	bne.n	800ef6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef26:	f000 fb1a 	bl	800f55e <prvIsQueueEmpty>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d017      	beq.n	800ef60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef32:	3324      	adds	r3, #36	; 0x24
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	4611      	mov	r1, r2
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 ff97 	bl	800fe6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef40:	f000 fabb 	bl	800f4ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef44:	f000 fdba 	bl	800fabc <xTaskResumeAll>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d189      	bne.n	800ee62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ef4e:	4b10      	ldr	r3, [pc, #64]	; (800ef90 <xQueueReceive+0x1bc>)
 800ef50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	e780      	b.n	800ee62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef62:	f000 faaa 	bl	800f4ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef66:	f000 fda9 	bl	800fabc <xTaskResumeAll>
 800ef6a:	e77a      	b.n	800ee62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef6e:	f000 faa4 	bl	800f4ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef72:	f000 fda3 	bl	800fabc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef78:	f000 faf1 	bl	800f55e <prvIsQueueEmpty>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f43f af6f 	beq.w	800ee62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3730      	adds	r7, #48	; 0x30
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	e000ed04 	.word	0xe000ed04

0800ef94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b08e      	sub	sp, #56	; 0x38
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800efa6:	2300      	movs	r3, #0
 800efa8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10a      	bne.n	800efc6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	623b      	str	r3, [r7, #32]
}
 800efc2:	bf00      	nop
 800efc4:	e7fe      	b.n	800efc4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00a      	beq.n	800efe4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	61fb      	str	r3, [r7, #28]
}
 800efe0:	bf00      	nop
 800efe2:	e7fe      	b.n	800efe2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efe4:	f001 f926 	bl	8010234 <xTaskGetSchedulerState>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d102      	bne.n	800eff4 <xQueueSemaphoreTake+0x60>
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d101      	bne.n	800eff8 <xQueueSemaphoreTake+0x64>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e000      	b.n	800effa <xQueueSemaphoreTake+0x66>
 800eff8:	2300      	movs	r3, #0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10a      	bne.n	800f014 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	61bb      	str	r3, [r7, #24]
}
 800f010:	bf00      	nop
 800f012:	e7fe      	b.n	800f012 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f014:	f001 fc5e 	bl	80108d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	2b00      	cmp	r3, #0
 800f022:	d024      	beq.n	800f06e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f026:	1e5a      	subs	r2, r3, #1
 800f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d104      	bne.n	800f03e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f034:	f001 faa6 	bl	8010584 <pvTaskIncrementMutexHeldCount>
 800f038:	4602      	mov	r2, r0
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00f      	beq.n	800f066 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	3310      	adds	r3, #16
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 ff32 	bl	800feb4 <xTaskRemoveFromEventList>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d007      	beq.n	800f066 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f056:	4b54      	ldr	r3, [pc, #336]	; (800f1a8 <xQueueSemaphoreTake+0x214>)
 800f058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f066:	f001 fc65 	bl	8010934 <vPortExitCritical>
				return pdPASS;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e097      	b.n	800f19e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d111      	bne.n	800f098 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00a      	beq.n	800f090 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	617b      	str	r3, [r7, #20]
}
 800f08c:	bf00      	nop
 800f08e:	e7fe      	b.n	800f08e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f090:	f001 fc50 	bl	8010934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f094:	2300      	movs	r3, #0
 800f096:	e082      	b.n	800f19e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d106      	bne.n	800f0ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f09e:	f107 030c 	add.w	r3, r7, #12
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 ff68 	bl	800ff78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0ac:	f001 fc42 	bl	8010934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0b0:	f000 fcf6 	bl	800faa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0b4:	f001 fc0e 	bl	80108d4 <vPortEnterCritical>
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0be:	b25b      	sxtb	r3, r3
 800f0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c4:	d103      	bne.n	800f0ce <xQueueSemaphoreTake+0x13a>
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0d4:	b25b      	sxtb	r3, r3
 800f0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0da:	d103      	bne.n	800f0e4 <xQueueSemaphoreTake+0x150>
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0e4:	f001 fc26 	bl	8010934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0e8:	463a      	mov	r2, r7
 800f0ea:	f107 030c 	add.w	r3, r7, #12
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 ff57 	bl	800ffa4 <xTaskCheckForTimeOut>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d132      	bne.n	800f162 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0fe:	f000 fa2e 	bl	800f55e <prvIsQueueEmpty>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d026      	beq.n	800f156 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d109      	bne.n	800f124 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f110:	f001 fbe0 	bl	80108d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	4618      	mov	r0, r3
 800f11a:	f001 f8a9 	bl	8010270 <xTaskPriorityInherit>
 800f11e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f120:	f001 fc08 	bl	8010934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	3324      	adds	r3, #36	; 0x24
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	4611      	mov	r1, r2
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fe9d 	bl	800fe6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f134:	f000 f9c1 	bl	800f4ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f138:	f000 fcc0 	bl	800fabc <xTaskResumeAll>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f47f af68 	bne.w	800f014 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f144:	4b18      	ldr	r3, [pc, #96]	; (800f1a8 <xQueueSemaphoreTake+0x214>)
 800f146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	f3bf 8f6f 	isb	sy
 800f154:	e75e      	b.n	800f014 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f158:	f000 f9af 	bl	800f4ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f15c:	f000 fcae 	bl	800fabc <xTaskResumeAll>
 800f160:	e758      	b.n	800f014 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f164:	f000 f9a9 	bl	800f4ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f168:	f000 fca8 	bl	800fabc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f16c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f16e:	f000 f9f6 	bl	800f55e <prvIsQueueEmpty>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	f43f af4d 	beq.w	800f014 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00d      	beq.n	800f19c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f180:	f001 fba8 	bl	80108d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f186:	f000 f8f0 	bl	800f36a <prvGetDisinheritPriorityAfterTimeout>
 800f18a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f192:	4618      	mov	r0, r3
 800f194:	f001 f968 	bl	8010468 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f198:	f001 fbcc 	bl	8010934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f19c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3738      	adds	r7, #56	; 0x38
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	e000ed04 	.word	0xe000ed04

0800f1ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08e      	sub	sp, #56	; 0x38
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10a      	bne.n	800f1d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c6:	f383 8811 	msr	BASEPRI, r3
 800f1ca:	f3bf 8f6f 	isb	sy
 800f1ce:	f3bf 8f4f 	dsb	sy
 800f1d2:	623b      	str	r3, [r7, #32]
}
 800f1d4:	bf00      	nop
 800f1d6:	e7fe      	b.n	800f1d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d103      	bne.n	800f1e6 <xQueueReceiveFromISR+0x3a>
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <xQueueReceiveFromISR+0x3e>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e000      	b.n	800f1ec <xQueueReceiveFromISR+0x40>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d10a      	bne.n	800f206 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f4:	f383 8811 	msr	BASEPRI, r3
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	61fb      	str	r3, [r7, #28]
}
 800f202:	bf00      	nop
 800f204:	e7fe      	b.n	800f204 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f206:	f001 fc47 	bl	8010a98 <vPortValidateInterruptPriority>
	__asm volatile
 800f20a:	f3ef 8211 	mrs	r2, BASEPRI
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	61ba      	str	r2, [r7, #24]
 800f220:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f222:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f22a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d02f      	beq.n	800f292 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f240:	f000 f915 	bl	800f46e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f246:	1e5a      	subs	r2, r3, #1
 800f248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f24c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f254:	d112      	bne.n	800f27c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d016      	beq.n	800f28c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	3310      	adds	r3, #16
 800f262:	4618      	mov	r0, r3
 800f264:	f000 fe26 	bl	800feb4 <xTaskRemoveFromEventList>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00e      	beq.n	800f28c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00b      	beq.n	800f28c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	e007      	b.n	800f28c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f280:	3301      	adds	r3, #1
 800f282:	b2db      	uxtb	r3, r3
 800f284:	b25a      	sxtb	r2, r3
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f28c:	2301      	movs	r3, #1
 800f28e:	637b      	str	r3, [r7, #52]	; 0x34
 800f290:	e001      	b.n	800f296 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f292:	2300      	movs	r3, #0
 800f294:	637b      	str	r3, [r7, #52]	; 0x34
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	f383 8811 	msr	BASEPRI, r3
}
 800f2a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3738      	adds	r7, #56	; 0x38
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d10a      	bne.n	800f2d0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	60bb      	str	r3, [r7, #8]
}
 800f2cc:	bf00      	nop
 800f2ce:	e7fe      	b.n	800f2ce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800f2d0:	f001 fb00 	bl	80108d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800f2da:	f001 fb2b 	bl	8010934 <vPortExitCritical>

	return uxReturn;
 800f2de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b087      	sub	sp, #28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10a      	bne.n	800f310 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	60fb      	str	r3, [r7, #12]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f314:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800f316:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f318:	4618      	mov	r0, r3
 800f31a:	371c      	adds	r7, #28
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d10a      	bne.n	800f34c <vQueueDelete+0x28>
	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33a:	f383 8811 	msr	BASEPRI, r3
 800f33e:	f3bf 8f6f 	isb	sy
 800f342:	f3bf 8f4f 	dsb	sy
 800f346:	60bb      	str	r3, [r7, #8]
}
 800f348:	bf00      	nop
 800f34a:	e7fe      	b.n	800f34a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f000 f935 	bl	800f5bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d102      	bne.n	800f362 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f001 fca7 	bl	8010cb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f362:	bf00      	nop
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f36a:	b480      	push	{r7}
 800f36c:	b085      	sub	sp, #20
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f376:	2b00      	cmp	r3, #0
 800f378:	d006      	beq.n	800f388 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f1c3 0307 	rsb	r3, r3, #7
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	e001      	b.n	800f38c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f388:	2300      	movs	r3, #0
 800f38a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f38c:	68fb      	ldr	r3, [r7, #12]
	}
 800f38e:	4618      	mov	r0, r3
 800f390:	3714      	adds	r7, #20
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr

0800f39a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b086      	sub	sp, #24
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	60f8      	str	r0, [r7, #12]
 800f3a2:	60b9      	str	r1, [r7, #8]
 800f3a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d10d      	bne.n	800f3d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d14d      	bne.n	800f45c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 ffc9 	bl	801035c <xTaskPriorityDisinherit>
 800f3ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	609a      	str	r2, [r3, #8]
 800f3d2:	e043      	b.n	800f45c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d119      	bne.n	800f40e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	6858      	ldr	r0, [r3, #4]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	f00e ffcd 	bl	801e384 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f2:	441a      	add	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	685a      	ldr	r2, [r3, #4]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	429a      	cmp	r2, r3
 800f402:	d32b      	bcc.n	800f45c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	605a      	str	r2, [r3, #4]
 800f40c:	e026      	b.n	800f45c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	68d8      	ldr	r0, [r3, #12]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f416:	461a      	mov	r2, r3
 800f418:	68b9      	ldr	r1, [r7, #8]
 800f41a:	f00e ffb3 	bl	801e384 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	68da      	ldr	r2, [r3, #12]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f426:	425b      	negs	r3, r3
 800f428:	441a      	add	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	68da      	ldr	r2, [r3, #12]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d207      	bcs.n	800f44a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	689a      	ldr	r2, [r3, #8]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f442:	425b      	negs	r3, r3
 800f444:	441a      	add	r2, r3
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b02      	cmp	r3, #2
 800f44e:	d105      	bne.n	800f45c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	3b01      	subs	r3, #1
 800f45a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f464:	697b      	ldr	r3, [r7, #20]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b082      	sub	sp, #8
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d018      	beq.n	800f4b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	68da      	ldr	r2, [r3, #12]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f488:	441a      	add	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68da      	ldr	r2, [r3, #12]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	429a      	cmp	r2, r3
 800f498:	d303      	bcc.n	800f4a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68d9      	ldr	r1, [r3, #12]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	6838      	ldr	r0, [r7, #0]
 800f4ae:	f00e ff69 	bl	801e384 <memcpy>
	}
}
 800f4b2:	bf00      	nop
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b084      	sub	sp, #16
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f4c2:	f001 fa07 	bl	80108d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4ce:	e011      	b.n	800f4f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d012      	beq.n	800f4fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3324      	adds	r3, #36	; 0x24
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f000 fce9 	bl	800feb4 <xTaskRemoveFromEventList>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f4e8:	f000 fdbe 	bl	8010068 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f4ec:	7bfb      	ldrb	r3, [r7, #15]
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	dce9      	bgt.n	800f4d0 <prvUnlockQueue+0x16>
 800f4fc:	e000      	b.n	800f500 <prvUnlockQueue+0x46>
					break;
 800f4fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	22ff      	movs	r2, #255	; 0xff
 800f504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f508:	f001 fa14 	bl	8010934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f50c:	f001 f9e2 	bl	80108d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f516:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f518:	e011      	b.n	800f53e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d012      	beq.n	800f548 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	3310      	adds	r3, #16
 800f526:	4618      	mov	r0, r3
 800f528:	f000 fcc4 	bl	800feb4 <xTaskRemoveFromEventList>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f532:	f000 fd99 	bl	8010068 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f536:	7bbb      	ldrb	r3, [r7, #14]
 800f538:	3b01      	subs	r3, #1
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f53e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f542:	2b00      	cmp	r3, #0
 800f544:	dce9      	bgt.n	800f51a <prvUnlockQueue+0x60>
 800f546:	e000      	b.n	800f54a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f548:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	22ff      	movs	r2, #255	; 0xff
 800f54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f552:	f001 f9ef 	bl	8010934 <vPortExitCritical>
}
 800f556:	bf00      	nop
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b084      	sub	sp, #16
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f566:	f001 f9b5 	bl	80108d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d102      	bne.n	800f578 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f572:	2301      	movs	r3, #1
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	e001      	b.n	800f57c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f578:	2300      	movs	r3, #0
 800f57a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f57c:	f001 f9da 	bl	8010934 <vPortExitCritical>

	return xReturn;
 800f580:	68fb      	ldr	r3, [r7, #12]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f592:	f001 f99f 	bl	80108d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d102      	bne.n	800f5a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	e001      	b.n	800f5ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5ac:	f001 f9c2 	bl	8010934 <vPortExitCritical>

	return xReturn;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
	...

0800f5bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	60fb      	str	r3, [r7, #12]
 800f5c8:	e016      	b.n	800f5f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f5ca:	4a10      	ldr	r2, [pc, #64]	; (800f60c <vQueueUnregisterQueue+0x50>)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	00db      	lsls	r3, r3, #3
 800f5d0:	4413      	add	r3, r2
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d10b      	bne.n	800f5f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f5da:	4a0c      	ldr	r2, [pc, #48]	; (800f60c <vQueueUnregisterQueue+0x50>)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2100      	movs	r1, #0
 800f5e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f5e4:	4a09      	ldr	r2, [pc, #36]	; (800f60c <vQueueUnregisterQueue+0x50>)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	00db      	lsls	r3, r3, #3
 800f5ea:	4413      	add	r3, r2
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	605a      	str	r2, [r3, #4]
				break;
 800f5f0:	e006      	b.n	800f600 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b07      	cmp	r3, #7
 800f5fc:	d9e5      	bls.n	800f5ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f5fe:	bf00      	nop
 800f600:	bf00      	nop
 800f602:	3714      	adds	r7, #20
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	2000aa18 	.word	0x2000aa18

0800f610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f610:	b580      	push	{r7, lr}
 800f612:	b08e      	sub	sp, #56	; 0x38
 800f614:	af04      	add	r7, sp, #16
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10a      	bne.n	800f63a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	623b      	str	r3, [r7, #32]
}
 800f636:	bf00      	nop
 800f638:	e7fe      	b.n	800f638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10a      	bne.n	800f656 <xTaskCreateStatic+0x46>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	61fb      	str	r3, [r7, #28]
}
 800f652:	bf00      	nop
 800f654:	e7fe      	b.n	800f654 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f656:	23b4      	movs	r3, #180	; 0xb4
 800f658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	2bb4      	cmp	r3, #180	; 0xb4
 800f65e:	d00a      	beq.n	800f676 <xTaskCreateStatic+0x66>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	61bb      	str	r3, [r7, #24]
}
 800f672:	bf00      	nop
 800f674:	e7fe      	b.n	800f674 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f676:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d01e      	beq.n	800f6bc <xTaskCreateStatic+0xac>
 800f67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f680:	2b00      	cmp	r3, #0
 800f682:	d01b      	beq.n	800f6bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f68c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	2202      	movs	r2, #2
 800f692:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f696:	2300      	movs	r3, #0
 800f698:	9303      	str	r3, [sp, #12]
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	9302      	str	r3, [sp, #8]
 800f69e:	f107 0314 	add.w	r3, r7, #20
 800f6a2:	9301      	str	r3, [sp, #4]
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	68b9      	ldr	r1, [r7, #8]
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f000 f850 	bl	800f754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6b6:	f000 f8eb 	bl	800f890 <prvAddNewTaskToReadyList>
 800f6ba:	e001      	b.n	800f6c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6c0:	697b      	ldr	r3, [r7, #20]
	}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3728      	adds	r7, #40	; 0x28
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b08c      	sub	sp, #48	; 0x30
 800f6ce:	af04      	add	r7, sp, #16
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	60b9      	str	r1, [r7, #8]
 800f6d4:	603b      	str	r3, [r7, #0]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6da:	88fb      	ldrh	r3, [r7, #6]
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f001 fa1a 	bl	8010b18 <pvPortMalloc>
 800f6e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00e      	beq.n	800f70a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6ec:	20b4      	movs	r0, #180	; 0xb4
 800f6ee:	f001 fa13 	bl	8010b18 <pvPortMalloc>
 800f6f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	631a      	str	r2, [r3, #48]	; 0x30
 800f700:	e005      	b.n	800f70e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f702:	6978      	ldr	r0, [r7, #20]
 800f704:	f001 fad4 	bl	8010cb0 <vPortFree>
 800f708:	e001      	b.n	800f70e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d017      	beq.n	800f744 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f71c:	88fa      	ldrh	r2, [r7, #6]
 800f71e:	2300      	movs	r3, #0
 800f720:	9303      	str	r3, [sp, #12]
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	9302      	str	r3, [sp, #8]
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f000 f80e 	bl	800f754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f738:	69f8      	ldr	r0, [r7, #28]
 800f73a:	f000 f8a9 	bl	800f890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f73e:	2301      	movs	r3, #1
 800f740:	61bb      	str	r3, [r7, #24]
 800f742:	e002      	b.n	800f74a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f744:	f04f 33ff 	mov.w	r3, #4294967295
 800f748:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f74a:	69bb      	ldr	r3, [r7, #24]
	}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b088      	sub	sp, #32
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f76c:	3b01      	subs	r3, #1
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4413      	add	r3, r2
 800f772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	f023 0307 	bic.w	r3, r3, #7
 800f77a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	f003 0307 	and.w	r3, r3, #7
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00a      	beq.n	800f79c <prvInitialiseNewTask+0x48>
	__asm volatile
 800f786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78a:	f383 8811 	msr	BASEPRI, r3
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	617b      	str	r3, [r7, #20]
}
 800f798:	bf00      	nop
 800f79a:	e7fe      	b.n	800f79a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d01f      	beq.n	800f7e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	61fb      	str	r3, [r7, #28]
 800f7a6:	e012      	b.n	800f7ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	7819      	ldrb	r1, [r3, #0]
 800f7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	3334      	adds	r3, #52	; 0x34
 800f7b8:	460a      	mov	r2, r1
 800f7ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	69fb      	ldr	r3, [r7, #28]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d006      	beq.n	800f7d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	61fb      	str	r3, [r7, #28]
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	2b0f      	cmp	r3, #15
 800f7d2:	d9e9      	bls.n	800f7a8 <prvInitialiseNewTask+0x54>
 800f7d4:	e000      	b.n	800f7d8 <prvInitialiseNewTask+0x84>
			{
				break;
 800f7d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7e0:	e003      	b.n	800f7ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ec:	2b06      	cmp	r3, #6
 800f7ee:	d901      	bls.n	800f7f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7f0:	2306      	movs	r3, #6
 800f7f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f802:	2200      	movs	r2, #0
 800f804:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f808:	3304      	adds	r3, #4
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fe fea2 	bl	800e554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	3318      	adds	r3, #24
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe fe9d 	bl	800e554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f81e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f822:	f1c3 0207 	rsb	r2, r3, #7
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f82e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f832:	2200      	movs	r2, #0
 800f834:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83a:	2200      	movs	r2, #0
 800f83c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	334c      	adds	r3, #76	; 0x4c
 800f844:	2260      	movs	r2, #96	; 0x60
 800f846:	2100      	movs	r1, #0
 800f848:	4618      	mov	r0, r3
 800f84a:	f00e fdc3 	bl	801e3d4 <memset>
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	4a0c      	ldr	r2, [pc, #48]	; (800f884 <prvInitialiseNewTask+0x130>)
 800f852:	651a      	str	r2, [r3, #80]	; 0x50
 800f854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f856:	4a0c      	ldr	r2, [pc, #48]	; (800f888 <prvInitialiseNewTask+0x134>)
 800f858:	655a      	str	r2, [r3, #84]	; 0x54
 800f85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85c:	4a0b      	ldr	r2, [pc, #44]	; (800f88c <prvInitialiseNewTask+0x138>)
 800f85e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	68f9      	ldr	r1, [r7, #12]
 800f864:	69b8      	ldr	r0, [r7, #24]
 800f866:	f000 ff07 	bl	8010678 <pxPortInitialiseStack>
 800f86a:	4602      	mov	r2, r0
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	2b00      	cmp	r3, #0
 800f874:	d002      	beq.n	800f87c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f87a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f87c:	bf00      	nop
 800f87e:	3720      	adds	r7, #32
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	080270e0 	.word	0x080270e0
 800f888:	08027100 	.word	0x08027100
 800f88c:	080270c0 	.word	0x080270c0

0800f890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f898:	f001 f81c 	bl	80108d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f89c:	4b2a      	ldr	r3, [pc, #168]	; (800f948 <prvAddNewTaskToReadyList+0xb8>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	4a29      	ldr	r2, [pc, #164]	; (800f948 <prvAddNewTaskToReadyList+0xb8>)
 800f8a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8a6:	4b29      	ldr	r3, [pc, #164]	; (800f94c <prvAddNewTaskToReadyList+0xbc>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d109      	bne.n	800f8c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8ae:	4a27      	ldr	r2, [pc, #156]	; (800f94c <prvAddNewTaskToReadyList+0xbc>)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8b4:	4b24      	ldr	r3, [pc, #144]	; (800f948 <prvAddNewTaskToReadyList+0xb8>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d110      	bne.n	800f8de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8bc:	f000 fbf8 	bl	80100b0 <prvInitialiseTaskLists>
 800f8c0:	e00d      	b.n	800f8de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8c2:	4b23      	ldr	r3, [pc, #140]	; (800f950 <prvAddNewTaskToReadyList+0xc0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d109      	bne.n	800f8de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8ca:	4b20      	ldr	r3, [pc, #128]	; (800f94c <prvAddNewTaskToReadyList+0xbc>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d802      	bhi.n	800f8de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8d8:	4a1c      	ldr	r2, [pc, #112]	; (800f94c <prvAddNewTaskToReadyList+0xbc>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8de:	4b1d      	ldr	r3, [pc, #116]	; (800f954 <prvAddNewTaskToReadyList+0xc4>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	4a1b      	ldr	r2, [pc, #108]	; (800f954 <prvAddNewTaskToReadyList+0xc4>)
 800f8e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	409a      	lsls	r2, r3
 800f8f0:	4b19      	ldr	r3, [pc, #100]	; (800f958 <prvAddNewTaskToReadyList+0xc8>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	4a18      	ldr	r2, [pc, #96]	; (800f958 <prvAddNewTaskToReadyList+0xc8>)
 800f8f8:	6013      	str	r3, [r2, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8fe:	4613      	mov	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	4a15      	ldr	r2, [pc, #84]	; (800f95c <prvAddNewTaskToReadyList+0xcc>)
 800f908:	441a      	add	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3304      	adds	r3, #4
 800f90e:	4619      	mov	r1, r3
 800f910:	4610      	mov	r0, r2
 800f912:	f7fe fe2c 	bl	800e56e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f916:	f001 f80d 	bl	8010934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f91a:	4b0d      	ldr	r3, [pc, #52]	; (800f950 <prvAddNewTaskToReadyList+0xc0>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d00e      	beq.n	800f940 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f922:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <prvAddNewTaskToReadyList+0xbc>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d207      	bcs.n	800f940 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f930:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <prvAddNewTaskToReadyList+0xd0>)
 800f932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	20000a5c 	.word	0x20000a5c
 800f94c:	2000095c 	.word	0x2000095c
 800f950:	20000a68 	.word	0x20000a68
 800f954:	20000a78 	.word	0x20000a78
 800f958:	20000a64 	.word	0x20000a64
 800f95c:	20000960 	.word	0x20000960
 800f960:	e000ed04 	.word	0xe000ed04

0800f964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f96c:	2300      	movs	r3, #0
 800f96e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d017      	beq.n	800f9a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f976:	4b13      	ldr	r3, [pc, #76]	; (800f9c4 <vTaskDelay+0x60>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <vTaskDelay+0x30>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	60bb      	str	r3, [r7, #8]
}
 800f990:	bf00      	nop
 800f992:	e7fe      	b.n	800f992 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f994:	f000 f884 	bl	800faa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f998:	2100      	movs	r1, #0
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fe06 	bl	80105ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9a0:	f000 f88c 	bl	800fabc <xTaskResumeAll>
 800f9a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d107      	bne.n	800f9bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f9ac:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <vTaskDelay+0x64>)
 800f9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9b2:	601a      	str	r2, [r3, #0]
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9bc:	bf00      	nop
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	20000a84 	.word	0x20000a84
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08a      	sub	sp, #40	; 0x28
 800f9d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9da:	463a      	mov	r2, r7
 800f9dc:	1d39      	adds	r1, r7, #4
 800f9de:	f107 0308 	add.w	r3, r7, #8
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7f2 f9c0 	bl	8001d68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9e8:	6839      	ldr	r1, [r7, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	9202      	str	r2, [sp, #8]
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	460a      	mov	r2, r1
 800f9fa:	4921      	ldr	r1, [pc, #132]	; (800fa80 <vTaskStartScheduler+0xb4>)
 800f9fc:	4821      	ldr	r0, [pc, #132]	; (800fa84 <vTaskStartScheduler+0xb8>)
 800f9fe:	f7ff fe07 	bl	800f610 <xTaskCreateStatic>
 800fa02:	4603      	mov	r3, r0
 800fa04:	4a20      	ldr	r2, [pc, #128]	; (800fa88 <vTaskStartScheduler+0xbc>)
 800fa06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa08:	4b1f      	ldr	r3, [pc, #124]	; (800fa88 <vTaskStartScheduler+0xbc>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa10:	2301      	movs	r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e001      	b.n	800fa1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d11b      	bne.n	800fa58 <vTaskStartScheduler+0x8c>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	613b      	str	r3, [r7, #16]
}
 800fa32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa34:	4b15      	ldr	r3, [pc, #84]	; (800fa8c <vTaskStartScheduler+0xc0>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	334c      	adds	r3, #76	; 0x4c
 800fa3a:	4a15      	ldr	r2, [pc, #84]	; (800fa90 <vTaskStartScheduler+0xc4>)
 800fa3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa3e:	4b15      	ldr	r3, [pc, #84]	; (800fa94 <vTaskStartScheduler+0xc8>)
 800fa40:	f04f 32ff 	mov.w	r2, #4294967295
 800fa44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa46:	4b14      	ldr	r3, [pc, #80]	; (800fa98 <vTaskStartScheduler+0xcc>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa4c:	4b13      	ldr	r3, [pc, #76]	; (800fa9c <vTaskStartScheduler+0xd0>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa52:	f000 fe9d 	bl	8010790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa56:	e00e      	b.n	800fa76 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa5e:	d10a      	bne.n	800fa76 <vTaskStartScheduler+0xaa>
	__asm volatile
 800fa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa64:	f383 8811 	msr	BASEPRI, r3
 800fa68:	f3bf 8f6f 	isb	sy
 800fa6c:	f3bf 8f4f 	dsb	sy
 800fa70:	60fb      	str	r3, [r7, #12]
}
 800fa72:	bf00      	nop
 800fa74:	e7fe      	b.n	800fa74 <vTaskStartScheduler+0xa8>
}
 800fa76:	bf00      	nop
 800fa78:	3718      	adds	r7, #24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	080237d0 	.word	0x080237d0
 800fa84:	08010081 	.word	0x08010081
 800fa88:	20000a80 	.word	0x20000a80
 800fa8c:	2000095c 	.word	0x2000095c
 800fa90:	200003b8 	.word	0x200003b8
 800fa94:	20000a7c 	.word	0x20000a7c
 800fa98:	20000a68 	.word	0x20000a68
 800fa9c:	20000a60 	.word	0x20000a60

0800faa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800faa4:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <vTaskSuspendAll+0x18>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	3301      	adds	r3, #1
 800faaa:	4a03      	ldr	r2, [pc, #12]	; (800fab8 <vTaskSuspendAll+0x18>)
 800faac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800faae:	bf00      	nop
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	20000a84 	.word	0x20000a84

0800fabc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800faca:	4b41      	ldr	r3, [pc, #260]	; (800fbd0 <xTaskResumeAll+0x114>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10a      	bne.n	800fae8 <xTaskResumeAll+0x2c>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	603b      	str	r3, [r7, #0]
}
 800fae4:	bf00      	nop
 800fae6:	e7fe      	b.n	800fae6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fae8:	f000 fef4 	bl	80108d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800faec:	4b38      	ldr	r3, [pc, #224]	; (800fbd0 <xTaskResumeAll+0x114>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3b01      	subs	r3, #1
 800faf2:	4a37      	ldr	r2, [pc, #220]	; (800fbd0 <xTaskResumeAll+0x114>)
 800faf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800faf6:	4b36      	ldr	r3, [pc, #216]	; (800fbd0 <xTaskResumeAll+0x114>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d161      	bne.n	800fbc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fafe:	4b35      	ldr	r3, [pc, #212]	; (800fbd4 <xTaskResumeAll+0x118>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d05d      	beq.n	800fbc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb06:	e02e      	b.n	800fb66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb08:	4b33      	ldr	r3, [pc, #204]	; (800fbd8 <xTaskResumeAll+0x11c>)
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	3318      	adds	r3, #24
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fe fd87 	bl	800e628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	3304      	adds	r3, #4
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fe fd82 	bl	800e628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb28:	2201      	movs	r2, #1
 800fb2a:	409a      	lsls	r2, r3
 800fb2c:	4b2b      	ldr	r3, [pc, #172]	; (800fbdc <xTaskResumeAll+0x120>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	4a2a      	ldr	r2, [pc, #168]	; (800fbdc <xTaskResumeAll+0x120>)
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	4413      	add	r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	4a27      	ldr	r2, [pc, #156]	; (800fbe0 <xTaskResumeAll+0x124>)
 800fb44:	441a      	add	r2, r3
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	3304      	adds	r3, #4
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7fe fd0e 	bl	800e56e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb56:	4b23      	ldr	r3, [pc, #140]	; (800fbe4 <xTaskResumeAll+0x128>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d302      	bcc.n	800fb66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fb60:	4b21      	ldr	r3, [pc, #132]	; (800fbe8 <xTaskResumeAll+0x12c>)
 800fb62:	2201      	movs	r2, #1
 800fb64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb66:	4b1c      	ldr	r3, [pc, #112]	; (800fbd8 <xTaskResumeAll+0x11c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1cc      	bne.n	800fb08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb74:	f000 fb3e 	bl	80101f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb78:	4b1c      	ldr	r3, [pc, #112]	; (800fbec <xTaskResumeAll+0x130>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d010      	beq.n	800fba6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb84:	f000 f858 	bl	800fc38 <xTaskIncrementTick>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d002      	beq.n	800fb94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fb8e:	4b16      	ldr	r3, [pc, #88]	; (800fbe8 <xTaskResumeAll+0x12c>)
 800fb90:	2201      	movs	r2, #1
 800fb92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	3b01      	subs	r3, #1
 800fb98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1f1      	bne.n	800fb84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fba0:	4b12      	ldr	r3, [pc, #72]	; (800fbec <xTaskResumeAll+0x130>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fba6:	4b10      	ldr	r3, [pc, #64]	; (800fbe8 <xTaskResumeAll+0x12c>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d009      	beq.n	800fbc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbb2:	4b0f      	ldr	r3, [pc, #60]	; (800fbf0 <xTaskResumeAll+0x134>)
 800fbb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbc2:	f000 feb7 	bl	8010934 <vPortExitCritical>

	return xAlreadyYielded;
 800fbc6:	68bb      	ldr	r3, [r7, #8]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	20000a84 	.word	0x20000a84
 800fbd4:	20000a5c 	.word	0x20000a5c
 800fbd8:	20000a1c 	.word	0x20000a1c
 800fbdc:	20000a64 	.word	0x20000a64
 800fbe0:	20000960 	.word	0x20000960
 800fbe4:	2000095c 	.word	0x2000095c
 800fbe8:	20000a70 	.word	0x20000a70
 800fbec:	20000a6c 	.word	0x20000a6c
 800fbf0:	e000ed04 	.word	0xe000ed04

0800fbf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbfa:	4b05      	ldr	r3, [pc, #20]	; (800fc10 <xTaskGetTickCount+0x1c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc00:	687b      	ldr	r3, [r7, #4]
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	20000a60 	.word	0x20000a60

0800fc14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc1a:	f000 ff3d 	bl	8010a98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc1e:	2300      	movs	r3, #0
 800fc20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc22:	4b04      	ldr	r3, [pc, #16]	; (800fc34 <xTaskGetTickCountFromISR+0x20>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc28:	683b      	ldr	r3, [r7, #0]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20000a60 	.word	0x20000a60

0800fc38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc42:	4b4e      	ldr	r3, [pc, #312]	; (800fd7c <xTaskIncrementTick+0x144>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f040 808e 	bne.w	800fd68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc4c:	4b4c      	ldr	r3, [pc, #304]	; (800fd80 <xTaskIncrementTick+0x148>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	3301      	adds	r3, #1
 800fc52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc54:	4a4a      	ldr	r2, [pc, #296]	; (800fd80 <xTaskIncrementTick+0x148>)
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d120      	bne.n	800fca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc60:	4b48      	ldr	r3, [pc, #288]	; (800fd84 <xTaskIncrementTick+0x14c>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00a      	beq.n	800fc80 <xTaskIncrementTick+0x48>
	__asm volatile
 800fc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
 800fc7a:	603b      	str	r3, [r7, #0]
}
 800fc7c:	bf00      	nop
 800fc7e:	e7fe      	b.n	800fc7e <xTaskIncrementTick+0x46>
 800fc80:	4b40      	ldr	r3, [pc, #256]	; (800fd84 <xTaskIncrementTick+0x14c>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	60fb      	str	r3, [r7, #12]
 800fc86:	4b40      	ldr	r3, [pc, #256]	; (800fd88 <xTaskIncrementTick+0x150>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a3e      	ldr	r2, [pc, #248]	; (800fd84 <xTaskIncrementTick+0x14c>)
 800fc8c:	6013      	str	r3, [r2, #0]
 800fc8e:	4a3e      	ldr	r2, [pc, #248]	; (800fd88 <xTaskIncrementTick+0x150>)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	6013      	str	r3, [r2, #0]
 800fc94:	4b3d      	ldr	r3, [pc, #244]	; (800fd8c <xTaskIncrementTick+0x154>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	4a3c      	ldr	r2, [pc, #240]	; (800fd8c <xTaskIncrementTick+0x154>)
 800fc9c:	6013      	str	r3, [r2, #0]
 800fc9e:	f000 faa9 	bl	80101f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fca2:	4b3b      	ldr	r3, [pc, #236]	; (800fd90 <xTaskIncrementTick+0x158>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d348      	bcc.n	800fd3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcac:	4b35      	ldr	r3, [pc, #212]	; (800fd84 <xTaskIncrementTick+0x14c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d104      	bne.n	800fcc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcb6:	4b36      	ldr	r3, [pc, #216]	; (800fd90 <xTaskIncrementTick+0x158>)
 800fcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcbc:	601a      	str	r2, [r3, #0]
					break;
 800fcbe:	e03e      	b.n	800fd3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcc0:	4b30      	ldr	r3, [pc, #192]	; (800fd84 <xTaskIncrementTick+0x14c>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcd0:	693a      	ldr	r2, [r7, #16]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d203      	bcs.n	800fce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fcd8:	4a2d      	ldr	r2, [pc, #180]	; (800fd90 <xTaskIncrementTick+0x158>)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcde:	e02e      	b.n	800fd3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	3304      	adds	r3, #4
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe fc9f 	bl	800e628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d004      	beq.n	800fcfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	3318      	adds	r3, #24
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe fc96 	bl	800e628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd00:	2201      	movs	r2, #1
 800fd02:	409a      	lsls	r2, r3
 800fd04:	4b23      	ldr	r3, [pc, #140]	; (800fd94 <xTaskIncrementTick+0x15c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	4a22      	ldr	r2, [pc, #136]	; (800fd94 <xTaskIncrementTick+0x15c>)
 800fd0c:	6013      	str	r3, [r2, #0]
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd12:	4613      	mov	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4a1f      	ldr	r2, [pc, #124]	; (800fd98 <xTaskIncrementTick+0x160>)
 800fd1c:	441a      	add	r2, r3
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	3304      	adds	r3, #4
 800fd22:	4619      	mov	r1, r3
 800fd24:	4610      	mov	r0, r2
 800fd26:	f7fe fc22 	bl	800e56e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd2e:	4b1b      	ldr	r3, [pc, #108]	; (800fd9c <xTaskIncrementTick+0x164>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d3b9      	bcc.n	800fcac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd3c:	e7b6      	b.n	800fcac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd3e:	4b17      	ldr	r3, [pc, #92]	; (800fd9c <xTaskIncrementTick+0x164>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd44:	4914      	ldr	r1, [pc, #80]	; (800fd98 <xTaskIncrementTick+0x160>)
 800fd46:	4613      	mov	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	4413      	add	r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	440b      	add	r3, r1
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d901      	bls.n	800fd5a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fd56:	2301      	movs	r3, #1
 800fd58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd5a:	4b11      	ldr	r3, [pc, #68]	; (800fda0 <xTaskIncrementTick+0x168>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d007      	beq.n	800fd72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fd62:	2301      	movs	r3, #1
 800fd64:	617b      	str	r3, [r7, #20]
 800fd66:	e004      	b.n	800fd72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd68:	4b0e      	ldr	r3, [pc, #56]	; (800fda4 <xTaskIncrementTick+0x16c>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	4a0d      	ldr	r2, [pc, #52]	; (800fda4 <xTaskIncrementTick+0x16c>)
 800fd70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd72:	697b      	ldr	r3, [r7, #20]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20000a84 	.word	0x20000a84
 800fd80:	20000a60 	.word	0x20000a60
 800fd84:	20000a14 	.word	0x20000a14
 800fd88:	20000a18 	.word	0x20000a18
 800fd8c:	20000a74 	.word	0x20000a74
 800fd90:	20000a7c 	.word	0x20000a7c
 800fd94:	20000a64 	.word	0x20000a64
 800fd98:	20000960 	.word	0x20000960
 800fd9c:	2000095c 	.word	0x2000095c
 800fda0:	20000a70 	.word	0x20000a70
 800fda4:	20000a6c 	.word	0x20000a6c

0800fda8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b087      	sub	sp, #28
 800fdac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdae:	4b29      	ldr	r3, [pc, #164]	; (800fe54 <vTaskSwitchContext+0xac>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d003      	beq.n	800fdbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdb6:	4b28      	ldr	r3, [pc, #160]	; (800fe58 <vTaskSwitchContext+0xb0>)
 800fdb8:	2201      	movs	r2, #1
 800fdba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdbc:	e044      	b.n	800fe48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fdbe:	4b26      	ldr	r3, [pc, #152]	; (800fe58 <vTaskSwitchContext+0xb0>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc4:	4b25      	ldr	r3, [pc, #148]	; (800fe5c <vTaskSwitchContext+0xb4>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	fab3 f383 	clz	r3, r3
 800fdd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fdd2:	7afb      	ldrb	r3, [r7, #11]
 800fdd4:	f1c3 031f 	rsb	r3, r3, #31
 800fdd8:	617b      	str	r3, [r7, #20]
 800fdda:	4921      	ldr	r1, [pc, #132]	; (800fe60 <vTaskSwitchContext+0xb8>)
 800fddc:	697a      	ldr	r2, [r7, #20]
 800fdde:	4613      	mov	r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	4413      	add	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	440b      	add	r3, r1
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10a      	bne.n	800fe04 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	607b      	str	r3, [r7, #4]
}
 800fe00:	bf00      	nop
 800fe02:	e7fe      	b.n	800fe02 <vTaskSwitchContext+0x5a>
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	4a14      	ldr	r2, [pc, #80]	; (800fe60 <vTaskSwitchContext+0xb8>)
 800fe10:	4413      	add	r3, r2
 800fe12:	613b      	str	r3, [r7, #16]
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	685a      	ldr	r2, [r3, #4]
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	605a      	str	r2, [r3, #4]
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	685a      	ldr	r2, [r3, #4]
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	3308      	adds	r3, #8
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d104      	bne.n	800fe34 <vTaskSwitchContext+0x8c>
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	685a      	ldr	r2, [r3, #4]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	605a      	str	r2, [r3, #4]
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	4a0a      	ldr	r2, [pc, #40]	; (800fe64 <vTaskSwitchContext+0xbc>)
 800fe3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe3e:	4b09      	ldr	r3, [pc, #36]	; (800fe64 <vTaskSwitchContext+0xbc>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	334c      	adds	r3, #76	; 0x4c
 800fe44:	4a08      	ldr	r2, [pc, #32]	; (800fe68 <vTaskSwitchContext+0xc0>)
 800fe46:	6013      	str	r3, [r2, #0]
}
 800fe48:	bf00      	nop
 800fe4a:	371c      	adds	r7, #28
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr
 800fe54:	20000a84 	.word	0x20000a84
 800fe58:	20000a70 	.word	0x20000a70
 800fe5c:	20000a64 	.word	0x20000a64
 800fe60:	20000960 	.word	0x20000960
 800fe64:	2000095c 	.word	0x2000095c
 800fe68:	200003b8 	.word	0x200003b8

0800fe6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d10a      	bne.n	800fe92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe80:	f383 8811 	msr	BASEPRI, r3
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	f3bf 8f4f 	dsb	sy
 800fe8c:	60fb      	str	r3, [r7, #12]
}
 800fe8e:	bf00      	nop
 800fe90:	e7fe      	b.n	800fe90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe92:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <vTaskPlaceOnEventList+0x44>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	3318      	adds	r3, #24
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7fe fb8b 	bl	800e5b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fea0:	2101      	movs	r1, #1
 800fea2:	6838      	ldr	r0, [r7, #0]
 800fea4:	f000 fb82 	bl	80105ac <prvAddCurrentTaskToDelayedList>
}
 800fea8:	bf00      	nop
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	2000095c 	.word	0x2000095c

0800feb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b086      	sub	sp, #24
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d10a      	bne.n	800fee0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	60fb      	str	r3, [r7, #12]
}
 800fedc:	bf00      	nop
 800fede:	e7fe      	b.n	800fede <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	3318      	adds	r3, #24
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe fb9f 	bl	800e628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800feea:	4b1d      	ldr	r3, [pc, #116]	; (800ff60 <xTaskRemoveFromEventList+0xac>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d11c      	bne.n	800ff2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	3304      	adds	r3, #4
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fe fb96 	bl	800e628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff00:	2201      	movs	r2, #1
 800ff02:	409a      	lsls	r2, r3
 800ff04:	4b17      	ldr	r3, [pc, #92]	; (800ff64 <xTaskRemoveFromEventList+0xb0>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	4a16      	ldr	r2, [pc, #88]	; (800ff64 <xTaskRemoveFromEventList+0xb0>)
 800ff0c:	6013      	str	r3, [r2, #0]
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff12:	4613      	mov	r3, r2
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	4413      	add	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	4a13      	ldr	r2, [pc, #76]	; (800ff68 <xTaskRemoveFromEventList+0xb4>)
 800ff1c:	441a      	add	r2, r3
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	3304      	adds	r3, #4
 800ff22:	4619      	mov	r1, r3
 800ff24:	4610      	mov	r0, r2
 800ff26:	f7fe fb22 	bl	800e56e <vListInsertEnd>
 800ff2a:	e005      	b.n	800ff38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	3318      	adds	r3, #24
 800ff30:	4619      	mov	r1, r3
 800ff32:	480e      	ldr	r0, [pc, #56]	; (800ff6c <xTaskRemoveFromEventList+0xb8>)
 800ff34:	f7fe fb1b 	bl	800e56e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff3c:	4b0c      	ldr	r3, [pc, #48]	; (800ff70 <xTaskRemoveFromEventList+0xbc>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d905      	bls.n	800ff52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff46:	2301      	movs	r3, #1
 800ff48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff4a:	4b0a      	ldr	r3, [pc, #40]	; (800ff74 <xTaskRemoveFromEventList+0xc0>)
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	601a      	str	r2, [r3, #0]
 800ff50:	e001      	b.n	800ff56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ff52:	2300      	movs	r3, #0
 800ff54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff56:	697b      	ldr	r3, [r7, #20]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3718      	adds	r7, #24
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	20000a84 	.word	0x20000a84
 800ff64:	20000a64 	.word	0x20000a64
 800ff68:	20000960 	.word	0x20000960
 800ff6c:	20000a1c 	.word	0x20000a1c
 800ff70:	2000095c 	.word	0x2000095c
 800ff74:	20000a70 	.word	0x20000a70

0800ff78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff80:	4b06      	ldr	r3, [pc, #24]	; (800ff9c <vTaskInternalSetTimeOutState+0x24>)
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff88:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <vTaskInternalSetTimeOutState+0x28>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	605a      	str	r2, [r3, #4]
}
 800ff90:	bf00      	nop
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	20000a74 	.word	0x20000a74
 800ffa0:	20000a60 	.word	0x20000a60

0800ffa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d10a      	bne.n	800ffca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ffb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb8:	f383 8811 	msr	BASEPRI, r3
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	613b      	str	r3, [r7, #16]
}
 800ffc6:	bf00      	nop
 800ffc8:	e7fe      	b.n	800ffc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d10a      	bne.n	800ffe6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ffd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd4:	f383 8811 	msr	BASEPRI, r3
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	60fb      	str	r3, [r7, #12]
}
 800ffe2:	bf00      	nop
 800ffe4:	e7fe      	b.n	800ffe4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ffe6:	f000 fc75 	bl	80108d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ffea:	4b1d      	ldr	r3, [pc, #116]	; (8010060 <xTaskCheckForTimeOut+0xbc>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	69ba      	ldr	r2, [r7, #24]
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010002:	d102      	bne.n	801000a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010004:	2300      	movs	r3, #0
 8010006:	61fb      	str	r3, [r7, #28]
 8010008:	e023      	b.n	8010052 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	4b15      	ldr	r3, [pc, #84]	; (8010064 <xTaskCheckForTimeOut+0xc0>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d007      	beq.n	8010026 <xTaskCheckForTimeOut+0x82>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	69ba      	ldr	r2, [r7, #24]
 801001c:	429a      	cmp	r2, r3
 801001e:	d302      	bcc.n	8010026 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010020:	2301      	movs	r3, #1
 8010022:	61fb      	str	r3, [r7, #28]
 8010024:	e015      	b.n	8010052 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	697a      	ldr	r2, [r7, #20]
 801002c:	429a      	cmp	r2, r3
 801002e:	d20b      	bcs.n	8010048 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	1ad2      	subs	r2, r2, r3
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7ff ff9b 	bl	800ff78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010042:	2300      	movs	r3, #0
 8010044:	61fb      	str	r3, [r7, #28]
 8010046:	e004      	b.n	8010052 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	2200      	movs	r2, #0
 801004c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801004e:	2301      	movs	r3, #1
 8010050:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010052:	f000 fc6f 	bl	8010934 <vPortExitCritical>

	return xReturn;
 8010056:	69fb      	ldr	r3, [r7, #28]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3720      	adds	r7, #32
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	20000a60 	.word	0x20000a60
 8010064:	20000a74 	.word	0x20000a74

08010068 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010068:	b480      	push	{r7}
 801006a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801006c:	4b03      	ldr	r3, [pc, #12]	; (801007c <vTaskMissedYield+0x14>)
 801006e:	2201      	movs	r2, #1
 8010070:	601a      	str	r2, [r3, #0]
}
 8010072:	bf00      	nop
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr
 801007c:	20000a70 	.word	0x20000a70

08010080 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010088:	f000 f852 	bl	8010130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801008c:	4b06      	ldr	r3, [pc, #24]	; (80100a8 <prvIdleTask+0x28>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d9f9      	bls.n	8010088 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010094:	4b05      	ldr	r3, [pc, #20]	; (80100ac <prvIdleTask+0x2c>)
 8010096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801009a:	601a      	str	r2, [r3, #0]
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100a4:	e7f0      	b.n	8010088 <prvIdleTask+0x8>
 80100a6:	bf00      	nop
 80100a8:	20000960 	.word	0x20000960
 80100ac:	e000ed04 	.word	0xe000ed04

080100b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100b6:	2300      	movs	r3, #0
 80100b8:	607b      	str	r3, [r7, #4]
 80100ba:	e00c      	b.n	80100d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	4613      	mov	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	4413      	add	r3, r2
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	4a12      	ldr	r2, [pc, #72]	; (8010110 <prvInitialiseTaskLists+0x60>)
 80100c8:	4413      	add	r3, r2
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fe fa22 	bl	800e514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3301      	adds	r3, #1
 80100d4:	607b      	str	r3, [r7, #4]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2b06      	cmp	r3, #6
 80100da:	d9ef      	bls.n	80100bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80100dc:	480d      	ldr	r0, [pc, #52]	; (8010114 <prvInitialiseTaskLists+0x64>)
 80100de:	f7fe fa19 	bl	800e514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80100e2:	480d      	ldr	r0, [pc, #52]	; (8010118 <prvInitialiseTaskLists+0x68>)
 80100e4:	f7fe fa16 	bl	800e514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80100e8:	480c      	ldr	r0, [pc, #48]	; (801011c <prvInitialiseTaskLists+0x6c>)
 80100ea:	f7fe fa13 	bl	800e514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80100ee:	480c      	ldr	r0, [pc, #48]	; (8010120 <prvInitialiseTaskLists+0x70>)
 80100f0:	f7fe fa10 	bl	800e514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80100f4:	480b      	ldr	r0, [pc, #44]	; (8010124 <prvInitialiseTaskLists+0x74>)
 80100f6:	f7fe fa0d 	bl	800e514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80100fa:	4b0b      	ldr	r3, [pc, #44]	; (8010128 <prvInitialiseTaskLists+0x78>)
 80100fc:	4a05      	ldr	r2, [pc, #20]	; (8010114 <prvInitialiseTaskLists+0x64>)
 80100fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010100:	4b0a      	ldr	r3, [pc, #40]	; (801012c <prvInitialiseTaskLists+0x7c>)
 8010102:	4a05      	ldr	r2, [pc, #20]	; (8010118 <prvInitialiseTaskLists+0x68>)
 8010104:	601a      	str	r2, [r3, #0]
}
 8010106:	bf00      	nop
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	20000960 	.word	0x20000960
 8010114:	200009ec 	.word	0x200009ec
 8010118:	20000a00 	.word	0x20000a00
 801011c:	20000a1c 	.word	0x20000a1c
 8010120:	20000a30 	.word	0x20000a30
 8010124:	20000a48 	.word	0x20000a48
 8010128:	20000a14 	.word	0x20000a14
 801012c:	20000a18 	.word	0x20000a18

08010130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010136:	e019      	b.n	801016c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010138:	f000 fbcc 	bl	80108d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801013c:	4b10      	ldr	r3, [pc, #64]	; (8010180 <prvCheckTasksWaitingTermination+0x50>)
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	3304      	adds	r3, #4
 8010148:	4618      	mov	r0, r3
 801014a:	f7fe fa6d 	bl	800e628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801014e:	4b0d      	ldr	r3, [pc, #52]	; (8010184 <prvCheckTasksWaitingTermination+0x54>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3b01      	subs	r3, #1
 8010154:	4a0b      	ldr	r2, [pc, #44]	; (8010184 <prvCheckTasksWaitingTermination+0x54>)
 8010156:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010158:	4b0b      	ldr	r3, [pc, #44]	; (8010188 <prvCheckTasksWaitingTermination+0x58>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3b01      	subs	r3, #1
 801015e:	4a0a      	ldr	r2, [pc, #40]	; (8010188 <prvCheckTasksWaitingTermination+0x58>)
 8010160:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010162:	f000 fbe7 	bl	8010934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f810 	bl	801018c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801016c:	4b06      	ldr	r3, [pc, #24]	; (8010188 <prvCheckTasksWaitingTermination+0x58>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1e1      	bne.n	8010138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	20000a30 	.word	0x20000a30
 8010184:	20000a5c 	.word	0x20000a5c
 8010188:	20000a44 	.word	0x20000a44

0801018c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	334c      	adds	r3, #76	; 0x4c
 8010198:	4618      	mov	r0, r3
 801019a:	f00f f8ad 	bl	801f2f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d108      	bne.n	80101ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ac:	4618      	mov	r0, r3
 80101ae:	f000 fd7f 	bl	8010cb0 <vPortFree>
				vPortFree( pxTCB );
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 fd7c 	bl	8010cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101b8:	e018      	b.n	80101ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d103      	bne.n	80101cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fd73 	bl	8010cb0 <vPortFree>
	}
 80101ca:	e00f      	b.n	80101ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	d00a      	beq.n	80101ec <prvDeleteTCB+0x60>
	__asm volatile
 80101d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101da:	f383 8811 	msr	BASEPRI, r3
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f3bf 8f4f 	dsb	sy
 80101e6:	60fb      	str	r3, [r7, #12]
}
 80101e8:	bf00      	nop
 80101ea:	e7fe      	b.n	80101ea <prvDeleteTCB+0x5e>
	}
 80101ec:	bf00      	nop
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101fa:	4b0c      	ldr	r3, [pc, #48]	; (801022c <prvResetNextTaskUnblockTime+0x38>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d104      	bne.n	801020e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010204:	4b0a      	ldr	r3, [pc, #40]	; (8010230 <prvResetNextTaskUnblockTime+0x3c>)
 8010206:	f04f 32ff 	mov.w	r2, #4294967295
 801020a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801020c:	e008      	b.n	8010220 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801020e:	4b07      	ldr	r3, [pc, #28]	; (801022c <prvResetNextTaskUnblockTime+0x38>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	4a04      	ldr	r2, [pc, #16]	; (8010230 <prvResetNextTaskUnblockTime+0x3c>)
 801021e:	6013      	str	r3, [r2, #0]
}
 8010220:	bf00      	nop
 8010222:	370c      	adds	r7, #12
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr
 801022c:	20000a14 	.word	0x20000a14
 8010230:	20000a7c 	.word	0x20000a7c

08010234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801023a:	4b0b      	ldr	r3, [pc, #44]	; (8010268 <xTaskGetSchedulerState+0x34>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d102      	bne.n	8010248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010242:	2301      	movs	r3, #1
 8010244:	607b      	str	r3, [r7, #4]
 8010246:	e008      	b.n	801025a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010248:	4b08      	ldr	r3, [pc, #32]	; (801026c <xTaskGetSchedulerState+0x38>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d102      	bne.n	8010256 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010250:	2302      	movs	r3, #2
 8010252:	607b      	str	r3, [r7, #4]
 8010254:	e001      	b.n	801025a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010256:	2300      	movs	r3, #0
 8010258:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801025a:	687b      	ldr	r3, [r7, #4]
	}
 801025c:	4618      	mov	r0, r3
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	20000a68 	.word	0x20000a68
 801026c:	20000a84 	.word	0x20000a84

08010270 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801027c:	2300      	movs	r3, #0
 801027e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d05e      	beq.n	8010344 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801028a:	4b31      	ldr	r3, [pc, #196]	; (8010350 <xTaskPriorityInherit+0xe0>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010290:	429a      	cmp	r2, r3
 8010292:	d24e      	bcs.n	8010332 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	699b      	ldr	r3, [r3, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	db06      	blt.n	80102aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801029c:	4b2c      	ldr	r3, [pc, #176]	; (8010350 <xTaskPriorityInherit+0xe0>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a2:	f1c3 0207 	rsb	r2, r3, #7
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	6959      	ldr	r1, [r3, #20]
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b2:	4613      	mov	r3, r2
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	4413      	add	r3, r2
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4a26      	ldr	r2, [pc, #152]	; (8010354 <xTaskPriorityInherit+0xe4>)
 80102bc:	4413      	add	r3, r2
 80102be:	4299      	cmp	r1, r3
 80102c0:	d12f      	bne.n	8010322 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	3304      	adds	r3, #4
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe f9ae 	bl	800e628 <uxListRemove>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10a      	bne.n	80102e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d6:	2201      	movs	r2, #1
 80102d8:	fa02 f303 	lsl.w	r3, r2, r3
 80102dc:	43da      	mvns	r2, r3
 80102de:	4b1e      	ldr	r3, [pc, #120]	; (8010358 <xTaskPriorityInherit+0xe8>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4013      	ands	r3, r2
 80102e4:	4a1c      	ldr	r2, [pc, #112]	; (8010358 <xTaskPriorityInherit+0xe8>)
 80102e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102e8:	4b19      	ldr	r3, [pc, #100]	; (8010350 <xTaskPriorityInherit+0xe0>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f6:	2201      	movs	r2, #1
 80102f8:	409a      	lsls	r2, r3
 80102fa:	4b17      	ldr	r3, [pc, #92]	; (8010358 <xTaskPriorityInherit+0xe8>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4313      	orrs	r3, r2
 8010300:	4a15      	ldr	r2, [pc, #84]	; (8010358 <xTaskPriorityInherit+0xe8>)
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010308:	4613      	mov	r3, r2
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	4413      	add	r3, r2
 801030e:	009b      	lsls	r3, r3, #2
 8010310:	4a10      	ldr	r2, [pc, #64]	; (8010354 <xTaskPriorityInherit+0xe4>)
 8010312:	441a      	add	r2, r3
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	3304      	adds	r3, #4
 8010318:	4619      	mov	r1, r3
 801031a:	4610      	mov	r0, r2
 801031c:	f7fe f927 	bl	800e56e <vListInsertEnd>
 8010320:	e004      	b.n	801032c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010322:	4b0b      	ldr	r3, [pc, #44]	; (8010350 <xTaskPriorityInherit+0xe0>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801032c:	2301      	movs	r3, #1
 801032e:	60fb      	str	r3, [r7, #12]
 8010330:	e008      	b.n	8010344 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010336:	4b06      	ldr	r3, [pc, #24]	; (8010350 <xTaskPriorityInherit+0xe0>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	429a      	cmp	r2, r3
 801033e:	d201      	bcs.n	8010344 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010340:	2301      	movs	r3, #1
 8010342:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010344:	68fb      	ldr	r3, [r7, #12]
	}
 8010346:	4618      	mov	r0, r3
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	2000095c 	.word	0x2000095c
 8010354:	20000960 	.word	0x20000960
 8010358:	20000a64 	.word	0x20000a64

0801035c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010368:	2300      	movs	r3, #0
 801036a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d06e      	beq.n	8010450 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010372:	4b3a      	ldr	r3, [pc, #232]	; (801045c <xTaskPriorityDisinherit+0x100>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	429a      	cmp	r2, r3
 801037a:	d00a      	beq.n	8010392 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	60fb      	str	r3, [r7, #12]
}
 801038e:	bf00      	nop
 8010390:	e7fe      	b.n	8010390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010396:	2b00      	cmp	r3, #0
 8010398:	d10a      	bne.n	80103b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801039a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039e:	f383 8811 	msr	BASEPRI, r3
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	60bb      	str	r3, [r7, #8]
}
 80103ac:	bf00      	nop
 80103ae:	e7fe      	b.n	80103ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103b4:	1e5a      	subs	r2, r3, #1
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d044      	beq.n	8010450 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d140      	bne.n	8010450 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	3304      	adds	r3, #4
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe f928 	bl	800e628 <uxListRemove>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d115      	bne.n	801040a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e2:	491f      	ldr	r1, [pc, #124]	; (8010460 <xTaskPriorityDisinherit+0x104>)
 80103e4:	4613      	mov	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4413      	add	r3, r2
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	440b      	add	r3, r1
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10a      	bne.n	801040a <xTaskPriorityDisinherit+0xae>
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f8:	2201      	movs	r2, #1
 80103fa:	fa02 f303 	lsl.w	r3, r2, r3
 80103fe:	43da      	mvns	r2, r3
 8010400:	4b18      	ldr	r3, [pc, #96]	; (8010464 <xTaskPriorityDisinherit+0x108>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4013      	ands	r3, r2
 8010406:	4a17      	ldr	r2, [pc, #92]	; (8010464 <xTaskPriorityDisinherit+0x108>)
 8010408:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010416:	f1c3 0207 	rsb	r2, r3, #7
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010422:	2201      	movs	r2, #1
 8010424:	409a      	lsls	r2, r3
 8010426:	4b0f      	ldr	r3, [pc, #60]	; (8010464 <xTaskPriorityDisinherit+0x108>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4313      	orrs	r3, r2
 801042c:	4a0d      	ldr	r2, [pc, #52]	; (8010464 <xTaskPriorityDisinherit+0x108>)
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010434:	4613      	mov	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4413      	add	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4a08      	ldr	r2, [pc, #32]	; (8010460 <xTaskPriorityDisinherit+0x104>)
 801043e:	441a      	add	r2, r3
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	3304      	adds	r3, #4
 8010444:	4619      	mov	r1, r3
 8010446:	4610      	mov	r0, r2
 8010448:	f7fe f891 	bl	800e56e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801044c:	2301      	movs	r3, #1
 801044e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010450:	697b      	ldr	r3, [r7, #20]
	}
 8010452:	4618      	mov	r0, r3
 8010454:	3718      	adds	r7, #24
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	2000095c 	.word	0x2000095c
 8010460:	20000960 	.word	0x20000960
 8010464:	20000a64 	.word	0x20000a64

08010468 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010468:	b580      	push	{r7, lr}
 801046a:	b088      	sub	sp, #32
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010476:	2301      	movs	r3, #1
 8010478:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d077      	beq.n	8010570 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010484:	2b00      	cmp	r3, #0
 8010486:	d10a      	bne.n	801049e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048c:	f383 8811 	msr	BASEPRI, r3
 8010490:	f3bf 8f6f 	isb	sy
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	60fb      	str	r3, [r7, #12]
}
 801049a:	bf00      	nop
 801049c:	e7fe      	b.n	801049c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d902      	bls.n	80104ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	61fb      	str	r3, [r7, #28]
 80104ac:	e002      	b.n	80104b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b8:	69fa      	ldr	r2, [r7, #28]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d058      	beq.n	8010570 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104c2:	697a      	ldr	r2, [r7, #20]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d153      	bne.n	8010570 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104c8:	4b2b      	ldr	r3, [pc, #172]	; (8010578 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d10a      	bne.n	80104e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d6:	f383 8811 	msr	BASEPRI, r3
 80104da:	f3bf 8f6f 	isb	sy
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	60bb      	str	r3, [r7, #8]
}
 80104e4:	bf00      	nop
 80104e6:	e7fe      	b.n	80104e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	69fa      	ldr	r2, [r7, #28]
 80104f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	699b      	ldr	r3, [r3, #24]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	db04      	blt.n	8010506 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	f1c3 0207 	rsb	r2, r3, #7
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	6959      	ldr	r1, [r3, #20]
 801050a:	693a      	ldr	r2, [r7, #16]
 801050c:	4613      	mov	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4413      	add	r3, r2
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4a19      	ldr	r2, [pc, #100]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010516:	4413      	add	r3, r2
 8010518:	4299      	cmp	r1, r3
 801051a:	d129      	bne.n	8010570 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	3304      	adds	r3, #4
 8010520:	4618      	mov	r0, r3
 8010522:	f7fe f881 	bl	800e628 <uxListRemove>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d10a      	bne.n	8010542 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010530:	2201      	movs	r2, #1
 8010532:	fa02 f303 	lsl.w	r3, r2, r3
 8010536:	43da      	mvns	r2, r3
 8010538:	4b11      	ldr	r3, [pc, #68]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4013      	ands	r3, r2
 801053e:	4a10      	ldr	r2, [pc, #64]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010540:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010546:	2201      	movs	r2, #1
 8010548:	409a      	lsls	r2, r3
 801054a:	4b0d      	ldr	r3, [pc, #52]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4313      	orrs	r3, r2
 8010550:	4a0b      	ldr	r2, [pc, #44]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010552:	6013      	str	r3, [r2, #0]
 8010554:	69bb      	ldr	r3, [r7, #24]
 8010556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010558:	4613      	mov	r3, r2
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4413      	add	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4a06      	ldr	r2, [pc, #24]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010562:	441a      	add	r2, r3
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	3304      	adds	r3, #4
 8010568:	4619      	mov	r1, r3
 801056a:	4610      	mov	r0, r2
 801056c:	f7fd ffff 	bl	800e56e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010570:	bf00      	nop
 8010572:	3720      	adds	r7, #32
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	2000095c 	.word	0x2000095c
 801057c:	20000960 	.word	0x20000960
 8010580:	20000a64 	.word	0x20000a64

08010584 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010584:	b480      	push	{r7}
 8010586:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010588:	4b07      	ldr	r3, [pc, #28]	; (80105a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010590:	4b05      	ldr	r3, [pc, #20]	; (80105a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010596:	3201      	adds	r2, #1
 8010598:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801059a:	4b03      	ldr	r3, [pc, #12]	; (80105a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801059c:	681b      	ldr	r3, [r3, #0]
	}
 801059e:	4618      	mov	r0, r3
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	2000095c 	.word	0x2000095c

080105ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105b6:	4b29      	ldr	r3, [pc, #164]	; (801065c <prvAddCurrentTaskToDelayedList+0xb0>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105bc:	4b28      	ldr	r3, [pc, #160]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3304      	adds	r3, #4
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fe f830 	bl	800e628 <uxListRemove>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10b      	bne.n	80105e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80105ce:	4b24      	ldr	r3, [pc, #144]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d4:	2201      	movs	r2, #1
 80105d6:	fa02 f303 	lsl.w	r3, r2, r3
 80105da:	43da      	mvns	r2, r3
 80105dc:	4b21      	ldr	r3, [pc, #132]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4013      	ands	r3, r2
 80105e2:	4a20      	ldr	r2, [pc, #128]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ec:	d10a      	bne.n	8010604 <prvAddCurrentTaskToDelayedList+0x58>
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d007      	beq.n	8010604 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105f4:	4b1a      	ldr	r3, [pc, #104]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3304      	adds	r3, #4
 80105fa:	4619      	mov	r1, r3
 80105fc:	481a      	ldr	r0, [pc, #104]	; (8010668 <prvAddCurrentTaskToDelayedList+0xbc>)
 80105fe:	f7fd ffb6 	bl	800e56e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010602:	e026      	b.n	8010652 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4413      	add	r3, r2
 801060a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801060c:	4b14      	ldr	r3, [pc, #80]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb4>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010614:	68ba      	ldr	r2, [r7, #8]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	429a      	cmp	r2, r3
 801061a:	d209      	bcs.n	8010630 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801061c:	4b13      	ldr	r3, [pc, #76]	; (801066c <prvAddCurrentTaskToDelayedList+0xc0>)
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	3304      	adds	r3, #4
 8010626:	4619      	mov	r1, r3
 8010628:	4610      	mov	r0, r2
 801062a:	f7fd ffc4 	bl	800e5b6 <vListInsert>
}
 801062e:	e010      	b.n	8010652 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010630:	4b0f      	ldr	r3, [pc, #60]	; (8010670 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3304      	adds	r3, #4
 801063a:	4619      	mov	r1, r3
 801063c:	4610      	mov	r0, r2
 801063e:	f7fd ffba 	bl	800e5b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010642:	4b0c      	ldr	r3, [pc, #48]	; (8010674 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	68ba      	ldr	r2, [r7, #8]
 8010648:	429a      	cmp	r2, r3
 801064a:	d202      	bcs.n	8010652 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801064c:	4a09      	ldr	r2, [pc, #36]	; (8010674 <prvAddCurrentTaskToDelayedList+0xc8>)
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	6013      	str	r3, [r2, #0]
}
 8010652:	bf00      	nop
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	20000a60 	.word	0x20000a60
 8010660:	2000095c 	.word	0x2000095c
 8010664:	20000a64 	.word	0x20000a64
 8010668:	20000a48 	.word	0x20000a48
 801066c:	20000a18 	.word	0x20000a18
 8010670:	20000a14 	.word	0x20000a14
 8010674:	20000a7c 	.word	0x20000a7c

08010678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3b04      	subs	r3, #4
 8010688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	3b04      	subs	r3, #4
 8010696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	f023 0201 	bic.w	r2, r3, #1
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	3b04      	subs	r3, #4
 80106a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106a8:	4a0c      	ldr	r2, [pc, #48]	; (80106dc <pxPortInitialiseStack+0x64>)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	3b14      	subs	r3, #20
 80106b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	3b04      	subs	r3, #4
 80106be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f06f 0202 	mvn.w	r2, #2
 80106c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	3b20      	subs	r3, #32
 80106cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80106ce:	68fb      	ldr	r3, [r7, #12]
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3714      	adds	r7, #20
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr
 80106dc:	080106e1 	.word	0x080106e1

080106e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80106e6:	2300      	movs	r3, #0
 80106e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80106ea:	4b12      	ldr	r3, [pc, #72]	; (8010734 <prvTaskExitError+0x54>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f2:	d00a      	beq.n	801070a <prvTaskExitError+0x2a>
	__asm volatile
 80106f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	60fb      	str	r3, [r7, #12]
}
 8010706:	bf00      	nop
 8010708:	e7fe      	b.n	8010708 <prvTaskExitError+0x28>
	__asm volatile
 801070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070e:	f383 8811 	msr	BASEPRI, r3
 8010712:	f3bf 8f6f 	isb	sy
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	60bb      	str	r3, [r7, #8]
}
 801071c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801071e:	bf00      	nop
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d0fc      	beq.n	8010720 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010726:	bf00      	nop
 8010728:	bf00      	nop
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr
 8010734:	200003a8 	.word	0x200003a8
	...

08010740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010740:	4b07      	ldr	r3, [pc, #28]	; (8010760 <pxCurrentTCBConst2>)
 8010742:	6819      	ldr	r1, [r3, #0]
 8010744:	6808      	ldr	r0, [r1, #0]
 8010746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074a:	f380 8809 	msr	PSP, r0
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f04f 0000 	mov.w	r0, #0
 8010756:	f380 8811 	msr	BASEPRI, r0
 801075a:	4770      	bx	lr
 801075c:	f3af 8000 	nop.w

08010760 <pxCurrentTCBConst2>:
 8010760:	2000095c 	.word	0x2000095c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010768:	4808      	ldr	r0, [pc, #32]	; (801078c <prvPortStartFirstTask+0x24>)
 801076a:	6800      	ldr	r0, [r0, #0]
 801076c:	6800      	ldr	r0, [r0, #0]
 801076e:	f380 8808 	msr	MSP, r0
 8010772:	f04f 0000 	mov.w	r0, #0
 8010776:	f380 8814 	msr	CONTROL, r0
 801077a:	b662      	cpsie	i
 801077c:	b661      	cpsie	f
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	df00      	svc	0
 8010788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801078a:	bf00      	nop
 801078c:	e000ed08 	.word	0xe000ed08

08010790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010796:	4b46      	ldr	r3, [pc, #280]	; (80108b0 <xPortStartScheduler+0x120>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a46      	ldr	r2, [pc, #280]	; (80108b4 <xPortStartScheduler+0x124>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d10a      	bne.n	80107b6 <xPortStartScheduler+0x26>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	613b      	str	r3, [r7, #16]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80107b6:	4b3e      	ldr	r3, [pc, #248]	; (80108b0 <xPortStartScheduler+0x120>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a3f      	ldr	r2, [pc, #252]	; (80108b8 <xPortStartScheduler+0x128>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d10a      	bne.n	80107d6 <xPortStartScheduler+0x46>
	__asm volatile
 80107c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	60fb      	str	r3, [r7, #12]
}
 80107d2:	bf00      	nop
 80107d4:	e7fe      	b.n	80107d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80107d6:	4b39      	ldr	r3, [pc, #228]	; (80108bc <xPortStartScheduler+0x12c>)
 80107d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	22ff      	movs	r2, #255	; 0xff
 80107e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80107f0:	78fb      	ldrb	r3, [r7, #3]
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	4b31      	ldr	r3, [pc, #196]	; (80108c0 <xPortStartScheduler+0x130>)
 80107fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80107fe:	4b31      	ldr	r3, [pc, #196]	; (80108c4 <xPortStartScheduler+0x134>)
 8010800:	2207      	movs	r2, #7
 8010802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010804:	e009      	b.n	801081a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010806:	4b2f      	ldr	r3, [pc, #188]	; (80108c4 <xPortStartScheduler+0x134>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3b01      	subs	r3, #1
 801080c:	4a2d      	ldr	r2, [pc, #180]	; (80108c4 <xPortStartScheduler+0x134>)
 801080e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010810:	78fb      	ldrb	r3, [r7, #3]
 8010812:	b2db      	uxtb	r3, r3
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	b2db      	uxtb	r3, r3
 8010818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801081a:	78fb      	ldrb	r3, [r7, #3]
 801081c:	b2db      	uxtb	r3, r3
 801081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010822:	2b80      	cmp	r3, #128	; 0x80
 8010824:	d0ef      	beq.n	8010806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010826:	4b27      	ldr	r3, [pc, #156]	; (80108c4 <xPortStartScheduler+0x134>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f1c3 0307 	rsb	r3, r3, #7
 801082e:	2b04      	cmp	r3, #4
 8010830:	d00a      	beq.n	8010848 <xPortStartScheduler+0xb8>
	__asm volatile
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	f383 8811 	msr	BASEPRI, r3
 801083a:	f3bf 8f6f 	isb	sy
 801083e:	f3bf 8f4f 	dsb	sy
 8010842:	60bb      	str	r3, [r7, #8]
}
 8010844:	bf00      	nop
 8010846:	e7fe      	b.n	8010846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010848:	4b1e      	ldr	r3, [pc, #120]	; (80108c4 <xPortStartScheduler+0x134>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	021b      	lsls	r3, r3, #8
 801084e:	4a1d      	ldr	r2, [pc, #116]	; (80108c4 <xPortStartScheduler+0x134>)
 8010850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010852:	4b1c      	ldr	r3, [pc, #112]	; (80108c4 <xPortStartScheduler+0x134>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801085a:	4a1a      	ldr	r2, [pc, #104]	; (80108c4 <xPortStartScheduler+0x134>)
 801085c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	b2da      	uxtb	r2, r3
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010866:	4b18      	ldr	r3, [pc, #96]	; (80108c8 <xPortStartScheduler+0x138>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a17      	ldr	r2, [pc, #92]	; (80108c8 <xPortStartScheduler+0x138>)
 801086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010872:	4b15      	ldr	r3, [pc, #84]	; (80108c8 <xPortStartScheduler+0x138>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a14      	ldr	r2, [pc, #80]	; (80108c8 <xPortStartScheduler+0x138>)
 8010878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801087c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801087e:	f000 f8dd 	bl	8010a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010882:	4b12      	ldr	r3, [pc, #72]	; (80108cc <xPortStartScheduler+0x13c>)
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010888:	f000 f8fc 	bl	8010a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801088c:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <xPortStartScheduler+0x140>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a0f      	ldr	r2, [pc, #60]	; (80108d0 <xPortStartScheduler+0x140>)
 8010892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010898:	f7ff ff66 	bl	8010768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801089c:	f7ff fa84 	bl	800fda8 <vTaskSwitchContext>
	prvTaskExitError();
 80108a0:	f7ff ff1e 	bl	80106e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	e000ed00 	.word	0xe000ed00
 80108b4:	410fc271 	.word	0x410fc271
 80108b8:	410fc270 	.word	0x410fc270
 80108bc:	e000e400 	.word	0xe000e400
 80108c0:	20000a88 	.word	0x20000a88
 80108c4:	20000a8c 	.word	0x20000a8c
 80108c8:	e000ed20 	.word	0xe000ed20
 80108cc:	200003a8 	.word	0x200003a8
 80108d0:	e000ef34 	.word	0xe000ef34

080108d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	607b      	str	r3, [r7, #4]
}
 80108ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80108ee:	4b0f      	ldr	r3, [pc, #60]	; (801092c <vPortEnterCritical+0x58>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	3301      	adds	r3, #1
 80108f4:	4a0d      	ldr	r2, [pc, #52]	; (801092c <vPortEnterCritical+0x58>)
 80108f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80108f8:	4b0c      	ldr	r3, [pc, #48]	; (801092c <vPortEnterCritical+0x58>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d10f      	bne.n	8010920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010900:	4b0b      	ldr	r3, [pc, #44]	; (8010930 <vPortEnterCritical+0x5c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00a      	beq.n	8010920 <vPortEnterCritical+0x4c>
	__asm volatile
 801090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090e:	f383 8811 	msr	BASEPRI, r3
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	603b      	str	r3, [r7, #0]
}
 801091c:	bf00      	nop
 801091e:	e7fe      	b.n	801091e <vPortEnterCritical+0x4a>
	}
}
 8010920:	bf00      	nop
 8010922:	370c      	adds	r7, #12
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	200003a8 	.word	0x200003a8
 8010930:	e000ed04 	.word	0xe000ed04

08010934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801093a:	4b12      	ldr	r3, [pc, #72]	; (8010984 <vPortExitCritical+0x50>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10a      	bne.n	8010958 <vPortExitCritical+0x24>
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	607b      	str	r3, [r7, #4]
}
 8010954:	bf00      	nop
 8010956:	e7fe      	b.n	8010956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010958:	4b0a      	ldr	r3, [pc, #40]	; (8010984 <vPortExitCritical+0x50>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	3b01      	subs	r3, #1
 801095e:	4a09      	ldr	r2, [pc, #36]	; (8010984 <vPortExitCritical+0x50>)
 8010960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <vPortExitCritical+0x50>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d105      	bne.n	8010976 <vPortExitCritical+0x42>
 801096a:	2300      	movs	r3, #0
 801096c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	f383 8811 	msr	BASEPRI, r3
}
 8010974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010976:	bf00      	nop
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	200003a8 	.word	0x200003a8
	...

08010990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010990:	f3ef 8009 	mrs	r0, PSP
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	4b15      	ldr	r3, [pc, #84]	; (80109f0 <pxCurrentTCBConst>)
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	f01e 0f10 	tst.w	lr, #16
 80109a0:	bf08      	it	eq
 80109a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109aa:	6010      	str	r0, [r2, #0]
 80109ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80109b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80109b4:	f380 8811 	msr	BASEPRI, r0
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f7ff f9f2 	bl	800fda8 <vTaskSwitchContext>
 80109c4:	f04f 0000 	mov.w	r0, #0
 80109c8:	f380 8811 	msr	BASEPRI, r0
 80109cc:	bc09      	pop	{r0, r3}
 80109ce:	6819      	ldr	r1, [r3, #0]
 80109d0:	6808      	ldr	r0, [r1, #0]
 80109d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d6:	f01e 0f10 	tst.w	lr, #16
 80109da:	bf08      	it	eq
 80109dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80109e0:	f380 8809 	msr	PSP, r0
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	f3af 8000 	nop.w

080109f0 <pxCurrentTCBConst>:
 80109f0:	2000095c 	.word	0x2000095c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80109f4:	bf00      	nop
 80109f6:	bf00      	nop

080109f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	607b      	str	r3, [r7, #4]
}
 8010a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a12:	f7ff f911 	bl	800fc38 <xTaskIncrementTick>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a1c:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <SysTick_Handler+0x40>)
 8010a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	2300      	movs	r3, #0
 8010a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	f383 8811 	msr	BASEPRI, r3
}
 8010a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a30:	bf00      	nop
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	e000ed04 	.word	0xe000ed04

08010a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a40:	4b0b      	ldr	r3, [pc, #44]	; (8010a70 <vPortSetupTimerInterrupt+0x34>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a46:	4b0b      	ldr	r3, [pc, #44]	; (8010a74 <vPortSetupTimerInterrupt+0x38>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a4c:	4b0a      	ldr	r3, [pc, #40]	; (8010a78 <vPortSetupTimerInterrupt+0x3c>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a0a      	ldr	r2, [pc, #40]	; (8010a7c <vPortSetupTimerInterrupt+0x40>)
 8010a52:	fba2 2303 	umull	r2, r3, r2, r3
 8010a56:	099b      	lsrs	r3, r3, #6
 8010a58:	4a09      	ldr	r2, [pc, #36]	; (8010a80 <vPortSetupTimerInterrupt+0x44>)
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010a5e:	4b04      	ldr	r3, [pc, #16]	; (8010a70 <vPortSetupTimerInterrupt+0x34>)
 8010a60:	2207      	movs	r2, #7
 8010a62:	601a      	str	r2, [r3, #0]
}
 8010a64:	bf00      	nop
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	e000e010 	.word	0xe000e010
 8010a74:	e000e018 	.word	0xe000e018
 8010a78:	2000039c 	.word	0x2000039c
 8010a7c:	10624dd3 	.word	0x10624dd3
 8010a80:	e000e014 	.word	0xe000e014

08010a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010a94 <vPortEnableVFP+0x10>
 8010a88:	6801      	ldr	r1, [r0, #0]
 8010a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010a8e:	6001      	str	r1, [r0, #0]
 8010a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a92:	bf00      	nop
 8010a94:	e000ed88 	.word	0xe000ed88

08010a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010a9e:	f3ef 8305 	mrs	r3, IPSR
 8010aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2b0f      	cmp	r3, #15
 8010aa8:	d914      	bls.n	8010ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010aaa:	4a17      	ldr	r2, [pc, #92]	; (8010b08 <vPortValidateInterruptPriority+0x70>)
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	4413      	add	r3, r2
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ab4:	4b15      	ldr	r3, [pc, #84]	; (8010b0c <vPortValidateInterruptPriority+0x74>)
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	7afa      	ldrb	r2, [r7, #11]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d20a      	bcs.n	8010ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	607b      	str	r3, [r7, #4]
}
 8010ad0:	bf00      	nop
 8010ad2:	e7fe      	b.n	8010ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ad4:	4b0e      	ldr	r3, [pc, #56]	; (8010b10 <vPortValidateInterruptPriority+0x78>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010adc:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <vPortValidateInterruptPriority+0x7c>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d90a      	bls.n	8010afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	603b      	str	r3, [r7, #0]
}
 8010af6:	bf00      	nop
 8010af8:	e7fe      	b.n	8010af8 <vPortValidateInterruptPriority+0x60>
	}
 8010afa:	bf00      	nop
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	e000e3f0 	.word	0xe000e3f0
 8010b0c:	20000a88 	.word	0x20000a88
 8010b10:	e000ed0c 	.word	0xe000ed0c
 8010b14:	20000a8c 	.word	0x20000a8c

08010b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b20:	2300      	movs	r3, #0
 8010b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b24:	f7fe ffbc 	bl	800faa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b28:	4b5b      	ldr	r3, [pc, #364]	; (8010c98 <pvPortMalloc+0x180>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b30:	f000 f92c 	bl	8010d8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b34:	4b59      	ldr	r3, [pc, #356]	; (8010c9c <pvPortMalloc+0x184>)
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4013      	ands	r3, r2
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f040 8093 	bne.w	8010c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d01d      	beq.n	8010b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010b48:	2208      	movs	r2, #8
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f003 0307 	and.w	r3, r3, #7
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d014      	beq.n	8010b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f023 0307 	bic.w	r3, r3, #7
 8010b60:	3308      	adds	r3, #8
 8010b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f003 0307 	and.w	r3, r3, #7
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00a      	beq.n	8010b84 <pvPortMalloc+0x6c>
	__asm volatile
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	617b      	str	r3, [r7, #20]
}
 8010b80:	bf00      	nop
 8010b82:	e7fe      	b.n	8010b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d06e      	beq.n	8010c68 <pvPortMalloc+0x150>
 8010b8a:	4b45      	ldr	r3, [pc, #276]	; (8010ca0 <pvPortMalloc+0x188>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d869      	bhi.n	8010c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b94:	4b43      	ldr	r3, [pc, #268]	; (8010ca4 <pvPortMalloc+0x18c>)
 8010b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010b98:	4b42      	ldr	r3, [pc, #264]	; (8010ca4 <pvPortMalloc+0x18c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b9e:	e004      	b.n	8010baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d903      	bls.n	8010bbc <pvPortMalloc+0xa4>
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1f1      	bne.n	8010ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010bbc:	4b36      	ldr	r3, [pc, #216]	; (8010c98 <pvPortMalloc+0x180>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d050      	beq.n	8010c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010bc6:	6a3b      	ldr	r3, [r7, #32]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2208      	movs	r2, #8
 8010bcc:	4413      	add	r3, r2
 8010bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	685a      	ldr	r2, [r3, #4]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	1ad2      	subs	r2, r2, r3
 8010be0:	2308      	movs	r3, #8
 8010be2:	005b      	lsls	r3, r3, #1
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d91f      	bls.n	8010c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4413      	add	r3, r2
 8010bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	f003 0307 	and.w	r3, r3, #7
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00a      	beq.n	8010c10 <pvPortMalloc+0xf8>
	__asm volatile
 8010bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfe:	f383 8811 	msr	BASEPRI, r3
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	613b      	str	r3, [r7, #16]
}
 8010c0c:	bf00      	nop
 8010c0e:	e7fe      	b.n	8010c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c12:	685a      	ldr	r2, [r3, #4]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	1ad2      	subs	r2, r2, r3
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c22:	69b8      	ldr	r0, [r7, #24]
 8010c24:	f000 f914 	bl	8010e50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c28:	4b1d      	ldr	r3, [pc, #116]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	4a1b      	ldr	r2, [pc, #108]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c36:	4b1a      	ldr	r3, [pc, #104]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	4b1b      	ldr	r3, [pc, #108]	; (8010ca8 <pvPortMalloc+0x190>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d203      	bcs.n	8010c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c42:	4b17      	ldr	r3, [pc, #92]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4a18      	ldr	r2, [pc, #96]	; (8010ca8 <pvPortMalloc+0x190>)
 8010c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	685a      	ldr	r2, [r3, #4]
 8010c4e:	4b13      	ldr	r3, [pc, #76]	; (8010c9c <pvPortMalloc+0x184>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	431a      	orrs	r2, r3
 8010c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010c5e:	4b13      	ldr	r3, [pc, #76]	; (8010cac <pvPortMalloc+0x194>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	3301      	adds	r3, #1
 8010c64:	4a11      	ldr	r2, [pc, #68]	; (8010cac <pvPortMalloc+0x194>)
 8010c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c68:	f7fe ff28 	bl	800fabc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	f003 0307 	and.w	r3, r3, #7
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00a      	beq.n	8010c8c <pvPortMalloc+0x174>
	__asm volatile
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	60fb      	str	r3, [r7, #12]
}
 8010c88:	bf00      	nop
 8010c8a:	e7fe      	b.n	8010c8a <pvPortMalloc+0x172>
	return pvReturn;
 8010c8c:	69fb      	ldr	r3, [r7, #28]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3728      	adds	r7, #40	; 0x28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	20006da8 	.word	0x20006da8
 8010c9c:	20006dbc 	.word	0x20006dbc
 8010ca0:	20006dac 	.word	0x20006dac
 8010ca4:	20006da0 	.word	0x20006da0
 8010ca8:	20006db0 	.word	0x20006db0
 8010cac:	20006db4 	.word	0x20006db4

08010cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d04d      	beq.n	8010d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010cc2:	2308      	movs	r3, #8
 8010cc4:	425b      	negs	r3, r3
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	4413      	add	r3, r2
 8010cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	685a      	ldr	r2, [r3, #4]
 8010cd4:	4b24      	ldr	r3, [pc, #144]	; (8010d68 <vPortFree+0xb8>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4013      	ands	r3, r2
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10a      	bne.n	8010cf4 <vPortFree+0x44>
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	f383 8811 	msr	BASEPRI, r3
 8010ce6:	f3bf 8f6f 	isb	sy
 8010cea:	f3bf 8f4f 	dsb	sy
 8010cee:	60fb      	str	r3, [r7, #12]
}
 8010cf0:	bf00      	nop
 8010cf2:	e7fe      	b.n	8010cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <vPortFree+0x62>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	60bb      	str	r3, [r7, #8]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	685a      	ldr	r2, [r3, #4]
 8010d16:	4b14      	ldr	r3, [pc, #80]	; (8010d68 <vPortFree+0xb8>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d01e      	beq.n	8010d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d11a      	bne.n	8010d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <vPortFree+0xb8>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	43db      	mvns	r3, r3
 8010d32:	401a      	ands	r2, r3
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d38:	f7fe feb2 	bl	800faa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	685a      	ldr	r2, [r3, #4]
 8010d40:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <vPortFree+0xbc>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4413      	add	r3, r2
 8010d46:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <vPortFree+0xbc>)
 8010d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d4a:	6938      	ldr	r0, [r7, #16]
 8010d4c:	f000 f880 	bl	8010e50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010d50:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <vPortFree+0xc0>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3301      	adds	r3, #1
 8010d56:	4a06      	ldr	r2, [pc, #24]	; (8010d70 <vPortFree+0xc0>)
 8010d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010d5a:	f7fe feaf 	bl	800fabc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d5e:	bf00      	nop
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20006dbc 	.word	0x20006dbc
 8010d6c:	20006dac 	.word	0x20006dac
 8010d70:	20006db8 	.word	0x20006db8

08010d74 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010d74:	b480      	push	{r7}
 8010d76:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010d78:	4b03      	ldr	r3, [pc, #12]	; (8010d88 <xPortGetFreeHeapSize+0x14>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	20006dac 	.word	0x20006dac

08010d8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010d92:	f246 3310 	movw	r3, #25360	; 0x6310
 8010d96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010d98:	4b27      	ldr	r3, [pc, #156]	; (8010e38 <prvHeapInit+0xac>)
 8010d9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f003 0307 	and.w	r3, r3, #7
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00c      	beq.n	8010dc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	3307      	adds	r3, #7
 8010daa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f023 0307 	bic.w	r3, r3, #7
 8010db2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010db4:	68ba      	ldr	r2, [r7, #8]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	4a1f      	ldr	r2, [pc, #124]	; (8010e38 <prvHeapInit+0xac>)
 8010dbc:	4413      	add	r3, r2
 8010dbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010dc4:	4a1d      	ldr	r2, [pc, #116]	; (8010e3c <prvHeapInit+0xb0>)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010dca:	4b1c      	ldr	r3, [pc, #112]	; (8010e3c <prvHeapInit+0xb0>)
 8010dcc:	2200      	movs	r2, #0
 8010dce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010dd8:	2208      	movs	r2, #8
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	1a9b      	subs	r3, r3, r2
 8010dde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f023 0307 	bic.w	r3, r3, #7
 8010de6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	4a15      	ldr	r2, [pc, #84]	; (8010e40 <prvHeapInit+0xb4>)
 8010dec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010dee:	4b14      	ldr	r3, [pc, #80]	; (8010e40 <prvHeapInit+0xb4>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2200      	movs	r2, #0
 8010df4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010df6:	4b12      	ldr	r3, [pc, #72]	; (8010e40 <prvHeapInit+0xb4>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	68fa      	ldr	r2, [r7, #12]
 8010e06:	1ad2      	subs	r2, r2, r3
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e0c:	4b0c      	ldr	r3, [pc, #48]	; (8010e40 <prvHeapInit+0xb4>)
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	4a0a      	ldr	r2, [pc, #40]	; (8010e44 <prvHeapInit+0xb8>)
 8010e1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	4a09      	ldr	r2, [pc, #36]	; (8010e48 <prvHeapInit+0xbc>)
 8010e22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e24:	4b09      	ldr	r3, [pc, #36]	; (8010e4c <prvHeapInit+0xc0>)
 8010e26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e2a:	601a      	str	r2, [r3, #0]
}
 8010e2c:	bf00      	nop
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr
 8010e38:	20000a90 	.word	0x20000a90
 8010e3c:	20006da0 	.word	0x20006da0
 8010e40:	20006da8 	.word	0x20006da8
 8010e44:	20006db0 	.word	0x20006db0
 8010e48:	20006dac 	.word	0x20006dac
 8010e4c:	20006dbc 	.word	0x20006dbc

08010e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e58:	4b28      	ldr	r3, [pc, #160]	; (8010efc <prvInsertBlockIntoFreeList+0xac>)
 8010e5a:	60fb      	str	r3, [r7, #12]
 8010e5c:	e002      	b.n	8010e64 <prvInsertBlockIntoFreeList+0x14>
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	60fb      	str	r3, [r7, #12]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d8f7      	bhi.n	8010e5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	4413      	add	r3, r2
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d108      	bne.n	8010e92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	685a      	ldr	r2, [r3, #4]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	441a      	add	r2, r3
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	68ba      	ldr	r2, [r7, #8]
 8010e9c:	441a      	add	r2, r3
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d118      	bne.n	8010ed8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	4b15      	ldr	r3, [pc, #84]	; (8010f00 <prvInsertBlockIntoFreeList+0xb0>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d00d      	beq.n	8010ece <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	685a      	ldr	r2, [r3, #4]
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	441a      	add	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	e008      	b.n	8010ee0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ece:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <prvInsertBlockIntoFreeList+0xb0>)
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	e003      	b.n	8010ee0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d002      	beq.n	8010eee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eee:	bf00      	nop
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr
 8010efa:	bf00      	nop
 8010efc:	20006da0 	.word	0x20006da0
 8010f00:	20006da8 	.word	0x20006da8

08010f04 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	330c      	adds	r3, #12
 8010f14:	461a      	mov	r2, r3
 8010f16:	6839      	ldr	r1, [r7, #0]
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f001 fff3 	bl	8012f04 <tcpip_send_msg_wait_sem>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d103      	bne.n	8010f32 <netconn_apimsg+0x2e>
    return apimsg->err;
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010f30:	e001      	b.n	8010f36 <netconn_apimsg+0x32>
  }
  return err;
 8010f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
	...

08010f40 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08c      	sub	sp, #48	; 0x30
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	4603      	mov	r3, r0
 8010f48:	603a      	str	r2, [r7, #0]
 8010f4a:	71fb      	strb	r3, [r7, #7]
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010f50:	79fb      	ldrb	r3, [r7, #7]
 8010f52:	6839      	ldr	r1, [r7, #0]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 ff21 	bl	8011d9c <netconn_alloc>
 8010f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d054      	beq.n	801100c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010f62:	79bb      	ldrb	r3, [r7, #6]
 8010f64:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f68:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010f6a:	f107 0308 	add.w	r3, r7, #8
 8010f6e:	4619      	mov	r1, r3
 8010f70:	4829      	ldr	r0, [pc, #164]	; (8011018 <netconn_new_with_proto_and_callback+0xd8>)
 8010f72:	f7ff ffc7 	bl	8010f04 <netconn_apimsg>
 8010f76:	4603      	mov	r3, r0
 8010f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010f7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d043      	beq.n	801100c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d005      	beq.n	8010f98 <netconn_new_with_proto_and_callback+0x58>
 8010f8c:	4b23      	ldr	r3, [pc, #140]	; (801101c <netconn_new_with_proto_and_callback+0xdc>)
 8010f8e:	22a3      	movs	r2, #163	; 0xa3
 8010f90:	4923      	ldr	r1, [pc, #140]	; (8011020 <netconn_new_with_proto_and_callback+0xe0>)
 8010f92:	4824      	ldr	r0, [pc, #144]	; (8011024 <netconn_new_with_proto_and_callback+0xe4>)
 8010f94:	f00e f94a 	bl	801f22c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9a:	3310      	adds	r3, #16
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f00c ff88 	bl	801deb2 <sys_mbox_valid>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d105      	bne.n	8010fb4 <netconn_new_with_proto_and_callback+0x74>
 8010fa8:	4b1c      	ldr	r3, [pc, #112]	; (801101c <netconn_new_with_proto_and_callback+0xdc>)
 8010faa:	22a4      	movs	r2, #164	; 0xa4
 8010fac:	491e      	ldr	r1, [pc, #120]	; (8011028 <netconn_new_with_proto_and_callback+0xe8>)
 8010fae:	481d      	ldr	r0, [pc, #116]	; (8011024 <netconn_new_with_proto_and_callback+0xe4>)
 8010fb0:	f00e f93c 	bl	801f22c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb6:	3314      	adds	r3, #20
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f00c ff7a 	bl	801deb2 <sys_mbox_valid>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d005      	beq.n	8010fd0 <netconn_new_with_proto_and_callback+0x90>
 8010fc4:	4b15      	ldr	r3, [pc, #84]	; (801101c <netconn_new_with_proto_and_callback+0xdc>)
 8010fc6:	22a6      	movs	r2, #166	; 0xa6
 8010fc8:	4918      	ldr	r1, [pc, #96]	; (801102c <netconn_new_with_proto_and_callback+0xec>)
 8010fca:	4816      	ldr	r0, [pc, #88]	; (8011024 <netconn_new_with_proto_and_callback+0xe4>)
 8010fcc:	f00e f92e 	bl	801f22c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	330c      	adds	r3, #12
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f00c fffd 	bl	801dfd4 <sys_sem_valid>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d105      	bne.n	8010fec <netconn_new_with_proto_and_callback+0xac>
 8010fe0:	4b0e      	ldr	r3, [pc, #56]	; (801101c <netconn_new_with_proto_and_callback+0xdc>)
 8010fe2:	22a9      	movs	r2, #169	; 0xa9
 8010fe4:	4912      	ldr	r1, [pc, #72]	; (8011030 <netconn_new_with_proto_and_callback+0xf0>)
 8010fe6:	480f      	ldr	r0, [pc, #60]	; (8011024 <netconn_new_with_proto_and_callback+0xe4>)
 8010fe8:	f00e f920 	bl	801f22c <iprintf>
      sys_sem_free(&conn->op_completed);
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	330c      	adds	r3, #12
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f00c ffe2 	bl	801dfba <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	3310      	adds	r3, #16
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f00c fed2 	bl	801dda4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011002:	2007      	movs	r0, #7
 8011004:	f002 fce6 	bl	80139d4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011008:	2300      	movs	r3, #0
 801100a:	e000      	b.n	801100e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801100e:	4618      	mov	r0, r3
 8011010:	3730      	adds	r7, #48	; 0x30
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	08011d71 	.word	0x08011d71
 801101c:	080237d8 	.word	0x080237d8
 8011020:	0802380c 	.word	0x0802380c
 8011024:	08023830 	.word	0x08023830
 8011028:	08023858 	.word	0x08023858
 801102c:	08023870 	.word	0x08023870
 8011030:	08023894 	.word	0x08023894

08011034 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b08c      	sub	sp, #48	; 0x30
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d101      	bne.n	8011046 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	e014      	b.n	8011070 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801104a:	2329      	movs	r3, #41	; 0x29
 801104c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801104e:	f107 030c 	add.w	r3, r7, #12
 8011052:	4619      	mov	r1, r3
 8011054:	4808      	ldr	r0, [pc, #32]	; (8011078 <netconn_prepare_delete+0x44>)
 8011056:	f7ff ff55 	bl	8010f04 <netconn_apimsg>
 801105a:	4603      	mov	r3, r0
 801105c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011060:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <netconn_prepare_delete+0x3a>
    return err;
 8011068:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801106c:	e000      	b.n	8011070 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801106e:	2300      	movs	r3, #0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3730      	adds	r7, #48	; 0x30
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	080122d5 	.word	0x080122d5

0801107c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d101      	bne.n	801108e <netconn_delete+0x12>
    return ERR_OK;
 801108a:	2300      	movs	r3, #0
 801108c:	e00d      	b.n	80110aa <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f7ff ffd0 	bl	8011034 <netconn_prepare_delete>
 8011094:	4603      	mov	r3, r0
 8011096:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d102      	bne.n	80110a6 <netconn_delete+0x2a>
    netconn_free(conn);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fee9 	bl	8011e78 <netconn_free>
  }
  return err;
 80110a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
	...

080110b4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b08e      	sub	sp, #56	; 0x38
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	4613      	mov	r3, r2
 80110c0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d109      	bne.n	80110dc <netconn_bind+0x28>
 80110c8:	4b11      	ldr	r3, [pc, #68]	; (8011110 <netconn_bind+0x5c>)
 80110ca:	f44f 729c 	mov.w	r2, #312	; 0x138
 80110ce:	4911      	ldr	r1, [pc, #68]	; (8011114 <netconn_bind+0x60>)
 80110d0:	4811      	ldr	r0, [pc, #68]	; (8011118 <netconn_bind+0x64>)
 80110d2:	f00e f8ab 	bl	801f22c <iprintf>
 80110d6:	f06f 030f 	mvn.w	r3, #15
 80110da:	e015      	b.n	8011108 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d101      	bne.n	80110e6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80110e2:	4b0e      	ldr	r3, [pc, #56]	; (801111c <netconn_bind+0x68>)
 80110e4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80110ee:	88fb      	ldrh	r3, [r7, #6]
 80110f0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80110f2:	f107 0314 	add.w	r3, r7, #20
 80110f6:	4619      	mov	r1, r3
 80110f8:	4809      	ldr	r0, [pc, #36]	; (8011120 <netconn_bind+0x6c>)
 80110fa:	f7ff ff03 	bl	8010f04 <netconn_apimsg>
 80110fe:	4603      	mov	r3, r0
 8011100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011104:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011108:	4618      	mov	r0, r3
 801110a:	3738      	adds	r7, #56	; 0x38
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	080237d8 	.word	0x080237d8
 8011114:	08023910 	.word	0x08023910
 8011118:	08023830 	.word	0x08023830
 801111c:	08026fa0 	.word	0x08026fa0
 8011120:	0801249d 	.word	0x0801249d

08011124 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b088      	sub	sp, #32
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	4613      	mov	r3, r2
 8011130:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011132:	2300      	movs	r3, #0
 8011134:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d109      	bne.n	8011150 <netconn_recv_data+0x2c>
 801113c:	4b58      	ldr	r3, [pc, #352]	; (80112a0 <netconn_recv_data+0x17c>)
 801113e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8011142:	4958      	ldr	r1, [pc, #352]	; (80112a4 <netconn_recv_data+0x180>)
 8011144:	4858      	ldr	r0, [pc, #352]	; (80112a8 <netconn_recv_data+0x184>)
 8011146:	f00e f871 	bl	801f22c <iprintf>
 801114a:	f06f 030f 	mvn.w	r3, #15
 801114e:	e0a2      	b.n	8011296 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d109      	bne.n	8011170 <netconn_recv_data+0x4c>
 801115c:	4b50      	ldr	r3, [pc, #320]	; (80112a0 <netconn_recv_data+0x17c>)
 801115e:	f240 224a 	movw	r2, #586	; 0x24a
 8011162:	4952      	ldr	r1, [pc, #328]	; (80112ac <netconn_recv_data+0x188>)
 8011164:	4850      	ldr	r0, [pc, #320]	; (80112a8 <netconn_recv_data+0x184>)
 8011166:	f00e f861 	bl	801f22c <iprintf>
 801116a:	f06f 030f 	mvn.w	r3, #15
 801116e:	e092      	b.n	8011296 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	3310      	adds	r3, #16
 8011174:	4618      	mov	r0, r3
 8011176:	f00c fe9c 	bl	801deb2 <sys_mbox_valid>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10e      	bne.n	801119e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f000 fa45 	bl	8011610 <netconn_err>
 8011186:	4603      	mov	r3, r0
 8011188:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801118a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d002      	beq.n	8011198 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011192:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011196:	e07e      	b.n	8011296 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011198:	f06f 030a 	mvn.w	r3, #10
 801119c:	e07b      	b.n	8011296 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	7f1b      	ldrb	r3, [r3, #28]
 80111a2:	f003 0302 	and.w	r3, r3, #2
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d10f      	bne.n	80111ca <netconn_recv_data+0xa6>
 80111aa:	79fb      	ldrb	r3, [r7, #7]
 80111ac:	f003 0304 	and.w	r3, r3, #4
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d10a      	bne.n	80111ca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	7f1b      	ldrb	r3, [r3, #28]
 80111b8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d104      	bne.n	80111ca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d023      	beq.n	8011212 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3310      	adds	r3, #16
 80111ce:	f107 0218 	add.w	r2, r7, #24
 80111d2:	4611      	mov	r1, r2
 80111d4:	4618      	mov	r0, r3
 80111d6:	f00c fe50 	bl	801de7a <sys_arch_mbox_tryfetch>
 80111da:	4603      	mov	r3, r0
 80111dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e0:	d11f      	bne.n	8011222 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f000 fa14 	bl	8011610 <netconn_err>
 80111e8:	4603      	mov	r3, r0
 80111ea:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80111ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80111f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80111f8:	e04d      	b.n	8011296 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	7f1b      	ldrb	r3, [r3, #28]
 80111fe:	f003 0301 	and.w	r3, r3, #1
 8011202:	2b00      	cmp	r3, #0
 8011204:	d002      	beq.n	801120c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011206:	f06f 030a 	mvn.w	r3, #10
 801120a:	e044      	b.n	8011296 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 801120c:	f06f 0306 	mvn.w	r3, #6
 8011210:	e041      	b.n	8011296 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	3310      	adds	r3, #16
 8011216:	f107 0118 	add.w	r1, r7, #24
 801121a:	2200      	movs	r2, #0
 801121c:	4618      	mov	r0, r3
 801121e:	f00c fded 	bl	801ddfc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801122a:	2b10      	cmp	r3, #16
 801122c:	d117      	bne.n	801125e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	f107 0217 	add.w	r2, r7, #23
 8011234:	4611      	mov	r1, r2
 8011236:	4618      	mov	r0, r3
 8011238:	f000 fa3c 	bl	80116b4 <lwip_netconn_is_err_msg>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d009      	beq.n	8011256 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011246:	f113 0f0f 	cmn.w	r3, #15
 801124a:	d101      	bne.n	8011250 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801124c:	2300      	movs	r3, #0
 801124e:	e022      	b.n	8011296 <netconn_recv_data+0x172>
      }
      return err;
 8011250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011254:	e01f      	b.n	8011296 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	891b      	ldrh	r3, [r3, #8]
 801125a:	83fb      	strh	r3, [r7, #30]
 801125c:	e00d      	b.n	801127a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d106      	bne.n	8011272 <netconn_recv_data+0x14e>
 8011264:	4b0e      	ldr	r3, [pc, #56]	; (80112a0 <netconn_recv_data+0x17c>)
 8011266:	f240 2291 	movw	r2, #657	; 0x291
 801126a:	4911      	ldr	r1, [pc, #68]	; (80112b0 <netconn_recv_data+0x18c>)
 801126c:	480e      	ldr	r0, [pc, #56]	; (80112a8 <netconn_recv_data+0x184>)
 801126e:	f00d ffdd 	bl	801f22c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	891b      	ldrh	r3, [r3, #8]
 8011278:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127e:	2b00      	cmp	r3, #0
 8011280:	d005      	beq.n	801128e <netconn_recv_data+0x16a>
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011286:	8bfa      	ldrh	r2, [r7, #30]
 8011288:	2101      	movs	r1, #1
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801128e:	69ba      	ldr	r2, [r7, #24]
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3720      	adds	r7, #32
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	080237d8 	.word	0x080237d8
 80112a4:	080239f0 	.word	0x080239f0
 80112a8:	08023830 	.word	0x08023830
 80112ac:	08023a10 	.word	0x08023a10
 80112b0:	08023a2c 	.word	0x08023a2c

080112b4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	60f8      	str	r0, [r7, #12]
 80112bc:	60b9      	str	r1, [r7, #8]
 80112be:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d005      	beq.n	80112d2 <netconn_tcp_recvd_msg+0x1e>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112ce:	2b10      	cmp	r3, #16
 80112d0:	d009      	beq.n	80112e6 <netconn_tcp_recvd_msg+0x32>
 80112d2:	4b0c      	ldr	r3, [pc, #48]	; (8011304 <netconn_tcp_recvd_msg+0x50>)
 80112d4:	f240 22a7 	movw	r2, #679	; 0x2a7
 80112d8:	490b      	ldr	r1, [pc, #44]	; (8011308 <netconn_tcp_recvd_msg+0x54>)
 80112da:	480c      	ldr	r0, [pc, #48]	; (801130c <netconn_tcp_recvd_msg+0x58>)
 80112dc:	f00d ffa6 	bl	801f22c <iprintf>
 80112e0:	f06f 030f 	mvn.w	r3, #15
 80112e4:	e00a      	b.n	80112fc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	68ba      	ldr	r2, [r7, #8]
 80112f0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80112f2:	6879      	ldr	r1, [r7, #4]
 80112f4:	4806      	ldr	r0, [pc, #24]	; (8011310 <netconn_tcp_recvd_msg+0x5c>)
 80112f6:	f7ff fe05 	bl	8010f04 <netconn_apimsg>
 80112fa:	4603      	mov	r3, r0
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	080237d8 	.word	0x080237d8
 8011308:	08023a38 	.word	0x08023a38
 801130c:	08023830 	.word	0x08023830
 8011310:	080125ab 	.word	0x080125ab

08011314 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b090      	sub	sp, #64	; 0x40
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	3310      	adds	r3, #16
 8011326:	4618      	mov	r0, r3
 8011328:	f00c fdc3 	bl	801deb2 <sys_mbox_valid>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d102      	bne.n	8011338 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011332:	f06f 030a 	mvn.w	r3, #10
 8011336:	e06d      	b.n	8011414 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	7f1b      	ldrb	r3, [r3, #28]
 801133c:	b25b      	sxtb	r3, r3
 801133e:	2b00      	cmp	r3, #0
 8011340:	da07      	bge.n	8011352 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	7f1b      	ldrb	r3, [r3, #28]
 8011346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801134a:	b2da      	uxtb	r2, r3
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011350:	e039      	b.n	80113c6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011352:	79fb      	ldrb	r3, [r7, #7]
 8011354:	461a      	mov	r2, r3
 8011356:	68b9      	ldr	r1, [r7, #8]
 8011358:	68f8      	ldr	r0, [r7, #12]
 801135a:	f7ff fee3 	bl	8011124 <netconn_recv_data>
 801135e:	4603      	mov	r3, r0
 8011360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8011364:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011368:	2b00      	cmp	r3, #0
 801136a:	d002      	beq.n	8011372 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801136c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011370:	e050      	b.n	8011414 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011378:	79fb      	ldrb	r3, [r7, #7]
 801137a:	f003 0308 	and.w	r3, r3, #8
 801137e:	2b00      	cmp	r3, #0
 8011380:	d10e      	bne.n	80113a0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <netconn_recv_data_tcp+0x7a>
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	891b      	ldrh	r3, [r3, #8]
 801138c:	e000      	b.n	8011390 <netconn_recv_data_tcp+0x7c>
 801138e:	2301      	movs	r3, #1
 8011390:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011392:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011394:	f107 0214 	add.w	r2, r7, #20
 8011398:	4619      	mov	r1, r3
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f7ff ff8a 	bl	80112b4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80113a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d134      	bne.n	8011410 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80113a6:	79fb      	ldrb	r3, [r7, #7]
 80113a8:	f003 0310 	and.w	r3, r3, #16
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d009      	beq.n	80113c4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	7f1b      	ldrb	r3, [r3, #28]
 80113b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80113be:	f06f 0306 	mvn.w	r3, #6
 80113c2:	e027      	b.n	8011414 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80113c4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d005      	beq.n	80113da <netconn_recv_data_tcp+0xc6>
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d2:	2200      	movs	r2, #0
 80113d4:	2101      	movs	r1, #1
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d10f      	bne.n	8011402 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	f000 f914 	bl	8011610 <netconn_err>
 80113e8:	4603      	mov	r3, r0
 80113ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80113ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d002      	beq.n	80113fc <netconn_recv_data_tcp+0xe8>
          return err;
 80113f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80113fa:	e00b      	b.n	8011414 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80113fc:	f06f 030d 	mvn.w	r3, #13
 8011400:	e008      	b.n	8011414 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011402:	2101      	movs	r1, #1
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f000 f8d3 	bl	80115b0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801140a:	f06f 030e 	mvn.w	r3, #14
 801140e:	e001      	b.n	8011414 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011410:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8011414:	4618      	mov	r0, r3
 8011416:	3740      	adds	r7, #64	; 0x40
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b086      	sub	sp, #24
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011426:	2300      	movs	r3, #0
 8011428:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d109      	bne.n	8011444 <netconn_recv+0x28>
 8011430:	4b32      	ldr	r3, [pc, #200]	; (80114fc <netconn_recv+0xe0>)
 8011432:	f240 3263 	movw	r2, #867	; 0x363
 8011436:	4932      	ldr	r1, [pc, #200]	; (8011500 <netconn_recv+0xe4>)
 8011438:	4832      	ldr	r0, [pc, #200]	; (8011504 <netconn_recv+0xe8>)
 801143a:	f00d fef7 	bl	801f22c <iprintf>
 801143e:	f06f 030f 	mvn.w	r3, #15
 8011442:	e056      	b.n	80114f2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	2200      	movs	r2, #0
 8011448:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d109      	bne.n	8011464 <netconn_recv+0x48>
 8011450:	4b2a      	ldr	r3, [pc, #168]	; (80114fc <netconn_recv+0xe0>)
 8011452:	f240 3265 	movw	r2, #869	; 0x365
 8011456:	492c      	ldr	r1, [pc, #176]	; (8011508 <netconn_recv+0xec>)
 8011458:	482a      	ldr	r0, [pc, #168]	; (8011504 <netconn_recv+0xe8>)
 801145a:	f00d fee7 	bl	801f22c <iprintf>
 801145e:	f06f 030f 	mvn.w	r3, #15
 8011462:	e046      	b.n	80114f2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801146c:	2b10      	cmp	r3, #16
 801146e:	d13a      	bne.n	80114e6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011470:	2300      	movs	r3, #0
 8011472:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011474:	2006      	movs	r0, #6
 8011476:	f002 fa5b 	bl	8013930 <memp_malloc>
 801147a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d102      	bne.n	8011488 <netconn_recv+0x6c>
      return ERR_MEM;
 8011482:	f04f 33ff 	mov.w	r3, #4294967295
 8011486:	e034      	b.n	80114f2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011488:	f107 030c 	add.w	r3, r7, #12
 801148c:	2200      	movs	r2, #0
 801148e:	4619      	mov	r1, r3
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff ff3f 	bl	8011314 <netconn_recv_data_tcp>
 8011496:	4603      	mov	r3, r0
 8011498:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801149a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d006      	beq.n	80114b0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80114a2:	6979      	ldr	r1, [r7, #20]
 80114a4:	2006      	movs	r0, #6
 80114a6:	f002 fa95 	bl	80139d4 <memp_free>
      return err;
 80114aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114ae:	e020      	b.n	80114f2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d106      	bne.n	80114c4 <netconn_recv+0xa8>
 80114b6:	4b11      	ldr	r3, [pc, #68]	; (80114fc <netconn_recv+0xe0>)
 80114b8:	f240 3279 	movw	r2, #889	; 0x379
 80114bc:	4913      	ldr	r1, [pc, #76]	; (801150c <netconn_recv+0xf0>)
 80114be:	4811      	ldr	r0, [pc, #68]	; (8011504 <netconn_recv+0xe8>)
 80114c0:	f00d feb4 	bl	801f22c <iprintf>

    buf->p = p;
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80114ca:	68fa      	ldr	r2, [r7, #12]
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	2200      	movs	r2, #0
 80114d4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	2200      	movs	r2, #0
 80114da:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	697a      	ldr	r2, [r7, #20]
 80114e0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	e005      	b.n	80114f2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80114e6:	2200      	movs	r2, #0
 80114e8:	6839      	ldr	r1, [r7, #0]
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7ff fe1a 	bl	8011124 <netconn_recv_data>
 80114f0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3718      	adds	r7, #24
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	080237d8 	.word	0x080237d8
 8011500:	080239f0 	.word	0x080239f0
 8011504:	08023830 	.word	0x08023830
 8011508:	08023a10 	.word	0x08023a10
 801150c:	08023a88 	.word	0x08023a88

08011510 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
 801151c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d011      	beq.n	8011548 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d002      	beq.n	8011530 <netconn_sendto+0x20>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	e000      	b.n	8011532 <netconn_sendto+0x22>
 8011530:	2300      	movs	r3, #0
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	887a      	ldrh	r2, [r7, #2]
 801153a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801153c:	68b9      	ldr	r1, [r7, #8]
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f000 f808 	bl	8011554 <netconn_send>
 8011544:	4603      	mov	r3, r0
 8011546:	e001      	b.n	801154c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011548:	f06f 0305 	mvn.w	r3, #5
}
 801154c:	4618      	mov	r0, r3
 801154e:	3710      	adds	r7, #16
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08c      	sub	sp, #48	; 0x30
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d109      	bne.n	8011578 <netconn_send+0x24>
 8011564:	4b0e      	ldr	r3, [pc, #56]	; (80115a0 <netconn_send+0x4c>)
 8011566:	f240 32b2 	movw	r2, #946	; 0x3b2
 801156a:	490e      	ldr	r1, [pc, #56]	; (80115a4 <netconn_send+0x50>)
 801156c:	480e      	ldr	r0, [pc, #56]	; (80115a8 <netconn_send+0x54>)
 801156e:	f00d fe5d 	bl	801f22c <iprintf>
 8011572:	f06f 030f 	mvn.w	r3, #15
 8011576:	e00e      	b.n	8011596 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011580:	f107 030c 	add.w	r3, r7, #12
 8011584:	4619      	mov	r1, r3
 8011586:	4809      	ldr	r0, [pc, #36]	; (80115ac <netconn_send+0x58>)
 8011588:	f7ff fcbc 	bl	8010f04 <netconn_apimsg>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011592:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8011596:	4618      	mov	r0, r3
 8011598:	3730      	adds	r7, #48	; 0x30
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	080237d8 	.word	0x080237d8
 80115a4:	08023a94 	.word	0x08023a94
 80115a8:	08023830 	.word	0x08023830
 80115ac:	08012511 	.word	0x08012511

080115b0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b08c      	sub	sp, #48	; 0x30
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d109      	bne.n	80115d6 <netconn_close_shutdown+0x26>
 80115c2:	4b0f      	ldr	r3, [pc, #60]	; (8011600 <netconn_close_shutdown+0x50>)
 80115c4:	f240 4247 	movw	r2, #1095	; 0x447
 80115c8:	490e      	ldr	r1, [pc, #56]	; (8011604 <netconn_close_shutdown+0x54>)
 80115ca:	480f      	ldr	r0, [pc, #60]	; (8011608 <netconn_close_shutdown+0x58>)
 80115cc:	f00d fe2e 	bl	801f22c <iprintf>
 80115d0:	f06f 030f 	mvn.w	r3, #15
 80115d4:	e010      	b.n	80115f8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80115da:	78fb      	ldrb	r3, [r7, #3]
 80115dc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80115de:	2329      	movs	r3, #41	; 0x29
 80115e0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80115e2:	f107 030c 	add.w	r3, r7, #12
 80115e6:	4619      	mov	r1, r3
 80115e8:	4808      	ldr	r0, [pc, #32]	; (801160c <netconn_close_shutdown+0x5c>)
 80115ea:	f7ff fc8b 	bl	8010f04 <netconn_apimsg>
 80115ee:	4603      	mov	r3, r0
 80115f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80115f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3730      	adds	r7, #48	; 0x30
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	080237d8 	.word	0x080237d8
 8011604:	08023b14 	.word	0x08023b14
 8011608:	08023830 	.word	0x08023830
 801160c:	080129ad 	.word	0x080129ad

08011610 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d101      	bne.n	8011622 <netconn_err+0x12>
    return ERR_OK;
 801161e:	2300      	movs	r3, #0
 8011620:	e00d      	b.n	801163e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011622:	f00c fd61 	bl	801e0e8 <sys_arch_protect>
 8011626:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	7a1b      	ldrb	r3, [r3, #8]
 801162c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f00c fd65 	bl	801e104 <sys_arch_unprotect>
  return err;
 801163a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
	...

08011648 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	4603      	mov	r3, r0
 8011650:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011656:	f113 0f0d 	cmn.w	r3, #13
 801165a:	d009      	beq.n	8011670 <lwip_netconn_err_to_msg+0x28>
 801165c:	f113 0f0d 	cmn.w	r3, #13
 8011660:	dc0c      	bgt.n	801167c <lwip_netconn_err_to_msg+0x34>
 8011662:	f113 0f0f 	cmn.w	r3, #15
 8011666:	d007      	beq.n	8011678 <lwip_netconn_err_to_msg+0x30>
 8011668:	f113 0f0e 	cmn.w	r3, #14
 801166c:	d002      	beq.n	8011674 <lwip_netconn_err_to_msg+0x2c>
 801166e:	e005      	b.n	801167c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011670:	4b0a      	ldr	r3, [pc, #40]	; (801169c <lwip_netconn_err_to_msg+0x54>)
 8011672:	e00e      	b.n	8011692 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011674:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <lwip_netconn_err_to_msg+0x58>)
 8011676:	e00c      	b.n	8011692 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011678:	4b0a      	ldr	r3, [pc, #40]	; (80116a4 <lwip_netconn_err_to_msg+0x5c>)
 801167a:	e00a      	b.n	8011692 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d005      	beq.n	8011690 <lwip_netconn_err_to_msg+0x48>
 8011684:	4b08      	ldr	r3, [pc, #32]	; (80116a8 <lwip_netconn_err_to_msg+0x60>)
 8011686:	227d      	movs	r2, #125	; 0x7d
 8011688:	4908      	ldr	r1, [pc, #32]	; (80116ac <lwip_netconn_err_to_msg+0x64>)
 801168a:	4809      	ldr	r0, [pc, #36]	; (80116b0 <lwip_netconn_err_to_msg+0x68>)
 801168c:	f00d fdce 	bl	801f22c <iprintf>
      return NULL;
 8011690:	2300      	movs	r3, #0
  }
}
 8011692:	4618      	mov	r0, r3
 8011694:	3708      	adds	r7, #8
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	08026e8c 	.word	0x08026e8c
 80116a0:	08026e8d 	.word	0x08026e8d
 80116a4:	08026e8e 	.word	0x08026e8e
 80116a8:	08023b30 	.word	0x08023b30
 80116ac:	08023b64 	.word	0x08023b64
 80116b0:	08023b74 	.word	0x08023b74

080116b4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d105      	bne.n	80116d0 <lwip_netconn_is_err_msg+0x1c>
 80116c4:	4b12      	ldr	r3, [pc, #72]	; (8011710 <lwip_netconn_is_err_msg+0x5c>)
 80116c6:	2285      	movs	r2, #133	; 0x85
 80116c8:	4912      	ldr	r1, [pc, #72]	; (8011714 <lwip_netconn_is_err_msg+0x60>)
 80116ca:	4813      	ldr	r0, [pc, #76]	; (8011718 <lwip_netconn_is_err_msg+0x64>)
 80116cc:	f00d fdae 	bl	801f22c <iprintf>

  if (msg == &netconn_aborted) {
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4a12      	ldr	r2, [pc, #72]	; (801171c <lwip_netconn_is_err_msg+0x68>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d104      	bne.n	80116e2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	22f3      	movs	r2, #243	; 0xf3
 80116dc:	701a      	strb	r2, [r3, #0]
    return 1;
 80116de:	2301      	movs	r3, #1
 80116e0:	e012      	b.n	8011708 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4a0e      	ldr	r2, [pc, #56]	; (8011720 <lwip_netconn_is_err_msg+0x6c>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d104      	bne.n	80116f4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	22f2      	movs	r2, #242	; 0xf2
 80116ee:	701a      	strb	r2, [r3, #0]
    return 1;
 80116f0:	2301      	movs	r3, #1
 80116f2:	e009      	b.n	8011708 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	4a0b      	ldr	r2, [pc, #44]	; (8011724 <lwip_netconn_is_err_msg+0x70>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d104      	bne.n	8011706 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	22f1      	movs	r2, #241	; 0xf1
 8011700:	701a      	strb	r2, [r3, #0]
    return 1;
 8011702:	2301      	movs	r3, #1
 8011704:	e000      	b.n	8011708 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	08023b30 	.word	0x08023b30
 8011714:	08023b9c 	.word	0x08023b9c
 8011718:	08023b74 	.word	0x08023b74
 801171c:	08026e8c 	.word	0x08026e8c
 8011720:	08026e8d 	.word	0x08026e8d
 8011724:	08026e8e 	.word	0x08026e8e

08011728 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b088      	sub	sp, #32
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
 8011734:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d105      	bne.n	8011748 <recv_udp+0x20>
 801173c:	4b34      	ldr	r3, [pc, #208]	; (8011810 <recv_udp+0xe8>)
 801173e:	22e5      	movs	r2, #229	; 0xe5
 8011740:	4934      	ldr	r1, [pc, #208]	; (8011814 <recv_udp+0xec>)
 8011742:	4835      	ldr	r0, [pc, #212]	; (8011818 <recv_udp+0xf0>)
 8011744:	f00d fd72 	bl	801f22c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d105      	bne.n	801175a <recv_udp+0x32>
 801174e:	4b30      	ldr	r3, [pc, #192]	; (8011810 <recv_udp+0xe8>)
 8011750:	22e6      	movs	r2, #230	; 0xe6
 8011752:	4932      	ldr	r1, [pc, #200]	; (801181c <recv_udp+0xf4>)
 8011754:	4830      	ldr	r0, [pc, #192]	; (8011818 <recv_udp+0xf0>)
 8011756:	f00d fd69 	bl	801f22c <iprintf>
  conn = (struct netconn *)arg;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801175e:	69fb      	ldr	r3, [r7, #28]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d103      	bne.n	801176c <recv_udp+0x44>
    pbuf_free(p);
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f002 ff75 	bl	8014654 <pbuf_free>
    return;
 801176a:	e04d      	b.n	8011808 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	429a      	cmp	r2, r3
 8011774:	d005      	beq.n	8011782 <recv_udp+0x5a>
 8011776:	4b26      	ldr	r3, [pc, #152]	; (8011810 <recv_udp+0xe8>)
 8011778:	22ee      	movs	r2, #238	; 0xee
 801177a:	4929      	ldr	r1, [pc, #164]	; (8011820 <recv_udp+0xf8>)
 801177c:	4826      	ldr	r0, [pc, #152]	; (8011818 <recv_udp+0xf0>)
 801177e:	f00d fd55 	bl	801f22c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	3310      	adds	r3, #16
 8011786:	4618      	mov	r0, r3
 8011788:	f00c fb93 	bl	801deb2 <sys_mbox_valid>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	d103      	bne.n	801179a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f002 ff5e 	bl	8014654 <pbuf_free>
    return;
 8011798:	e036      	b.n	8011808 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801179a:	2006      	movs	r0, #6
 801179c:	f002 f8c8 	bl	8013930 <memp_malloc>
 80117a0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d103      	bne.n	80117b0 <recv_udp+0x88>
    pbuf_free(p);
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f002 ff53 	bl	8014654 <pbuf_free>
    return;
 80117ae:	e02b      	b.n	8011808 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d002      	beq.n	80117c8 <recv_udp+0xa0>
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	e000      	b.n	80117ca <recv_udp+0xa2>
 80117c8:	2300      	movs	r3, #0
 80117ca:	69ba      	ldr	r2, [r7, #24]
 80117cc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80117d2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	891b      	ldrh	r3, [r3, #8]
 80117d8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	3310      	adds	r3, #16
 80117de:	69b9      	ldr	r1, [r7, #24]
 80117e0:	4618      	mov	r0, r3
 80117e2:	f00c faf1 	bl	801ddc8 <sys_mbox_trypost>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d003      	beq.n	80117f4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80117ec:	69b8      	ldr	r0, [r7, #24]
 80117ee:	f001 f97d 	bl	8012aec <netbuf_delete>
    return;
 80117f2:	e009      	b.n	8011808 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d005      	beq.n	8011808 <recv_udp+0xe0>
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011800:	8afa      	ldrh	r2, [r7, #22]
 8011802:	2100      	movs	r1, #0
 8011804:	69f8      	ldr	r0, [r7, #28]
 8011806:	4798      	blx	r3
  }
}
 8011808:	3720      	adds	r7, #32
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	08023b30 	.word	0x08023b30
 8011814:	08023ba8 	.word	0x08023ba8
 8011818:	08023b74 	.word	0x08023b74
 801181c:	08023bcc 	.word	0x08023bcc
 8011820:	08023bec 	.word	0x08023bec

08011824 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b088      	sub	sp, #32
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	607a      	str	r2, [r7, #4]
 8011830:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d106      	bne.n	8011846 <recv_tcp+0x22>
 8011838:	4b36      	ldr	r3, [pc, #216]	; (8011914 <recv_tcp+0xf0>)
 801183a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801183e:	4936      	ldr	r1, [pc, #216]	; (8011918 <recv_tcp+0xf4>)
 8011840:	4836      	ldr	r0, [pc, #216]	; (801191c <recv_tcp+0xf8>)
 8011842:	f00d fcf3 	bl	801f22c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <recv_tcp+0x36>
 801184c:	4b31      	ldr	r3, [pc, #196]	; (8011914 <recv_tcp+0xf0>)
 801184e:	f240 122d 	movw	r2, #301	; 0x12d
 8011852:	4933      	ldr	r1, [pc, #204]	; (8011920 <recv_tcp+0xfc>)
 8011854:	4831      	ldr	r0, [pc, #196]	; (801191c <recv_tcp+0xf8>)
 8011856:	f00d fce9 	bl	801f22c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801185a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d006      	beq.n	8011870 <recv_tcp+0x4c>
 8011862:	4b2c      	ldr	r3, [pc, #176]	; (8011914 <recv_tcp+0xf0>)
 8011864:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8011868:	492e      	ldr	r1, [pc, #184]	; (8011924 <recv_tcp+0x100>)
 801186a:	482c      	ldr	r0, [pc, #176]	; (801191c <recv_tcp+0xf8>)
 801186c:	f00d fcde 	bl	801f22c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d102      	bne.n	8011880 <recv_tcp+0x5c>
    return ERR_VAL;
 801187a:	f06f 0305 	mvn.w	r3, #5
 801187e:	e045      	b.n	801190c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	429a      	cmp	r2, r3
 8011888:	d006      	beq.n	8011898 <recv_tcp+0x74>
 801188a:	4b22      	ldr	r3, [pc, #136]	; (8011914 <recv_tcp+0xf0>)
 801188c:	f240 1235 	movw	r2, #309	; 0x135
 8011890:	4925      	ldr	r1, [pc, #148]	; (8011928 <recv_tcp+0x104>)
 8011892:	4822      	ldr	r0, [pc, #136]	; (801191c <recv_tcp+0xf8>)
 8011894:	f00d fcca 	bl	801f22c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	3310      	adds	r3, #16
 801189c:	4618      	mov	r0, r3
 801189e:	f00c fb08 	bl	801deb2 <sys_mbox_valid>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d10d      	bne.n	80118c4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d008      	beq.n	80118c0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	891b      	ldrh	r3, [r3, #8]
 80118b2:	4619      	mov	r1, r3
 80118b4:	68b8      	ldr	r0, [r7, #8]
 80118b6:	f003 fdcb 	bl	8015450 <tcp_recved>
      pbuf_free(p);
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f002 feca 	bl	8014654 <pbuf_free>
    }
    return ERR_OK;
 80118c0:	2300      	movs	r3, #0
 80118c2:	e023      	b.n	801190c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d005      	beq.n	80118d6 <recv_tcp+0xb2>
    msg = p;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	891b      	ldrh	r3, [r3, #8]
 80118d2:	83fb      	strh	r3, [r7, #30]
 80118d4:	e003      	b.n	80118de <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80118d6:	4b15      	ldr	r3, [pc, #84]	; (801192c <recv_tcp+0x108>)
 80118d8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80118da:	2300      	movs	r3, #0
 80118dc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	3310      	adds	r3, #16
 80118e2:	69b9      	ldr	r1, [r7, #24]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f00c fa6f 	bl	801ddc8 <sys_mbox_trypost>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d002      	beq.n	80118f6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80118f0:	f04f 33ff 	mov.w	r3, #4294967295
 80118f4:	e00a      	b.n	801190c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d005      	beq.n	801190a <recv_tcp+0xe6>
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011902:	8bfa      	ldrh	r2, [r7, #30]
 8011904:	2100      	movs	r1, #0
 8011906:	6978      	ldr	r0, [r7, #20]
 8011908:	4798      	blx	r3
  }

  return ERR_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3720      	adds	r7, #32
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	08023b30 	.word	0x08023b30
 8011918:	08023c0c 	.word	0x08023c0c
 801191c:	08023b74 	.word	0x08023b74
 8011920:	08023c30 	.word	0x08023c30
 8011924:	08023c50 	.word	0x08023c50
 8011928:	08023c68 	.word	0x08023c68
 801192c:	08026e8e 	.word	0x08026e8e

08011930 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d106      	bne.n	8011952 <poll_tcp+0x22>
 8011944:	4b29      	ldr	r3, [pc, #164]	; (80119ec <poll_tcp+0xbc>)
 8011946:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801194a:	4929      	ldr	r1, [pc, #164]	; (80119f0 <poll_tcp+0xc0>)
 801194c:	4829      	ldr	r0, [pc, #164]	; (80119f4 <poll_tcp+0xc4>)
 801194e:	f00d fc6d 	bl	801f22c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	785b      	ldrb	r3, [r3, #1]
 8011956:	2b01      	cmp	r3, #1
 8011958:	d104      	bne.n	8011964 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801195a:	2101      	movs	r1, #1
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f000 fe59 	bl	8012614 <lwip_netconn_do_writemore>
 8011962:	e016      	b.n	8011992 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	785b      	ldrb	r3, [r3, #1]
 8011968:	2b04      	cmp	r3, #4
 801196a:	d112      	bne.n	8011992 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6a1b      	ldr	r3, [r3, #32]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00a      	beq.n	801198a <poll_tcp+0x5a>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	6a1b      	ldr	r3, [r3, #32]
 8011978:	7a5b      	ldrb	r3, [r3, #9]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d005      	beq.n	801198a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	6a1b      	ldr	r3, [r3, #32]
 8011982:	7a5a      	ldrb	r2, [r3, #9]
 8011984:	3a01      	subs	r2, #1
 8011986:	b2d2      	uxtb	r2, r2
 8011988:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801198a:	2101      	movs	r1, #1
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f000 fb3b 	bl	8012008 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	7f1b      	ldrb	r3, [r3, #28]
 8011996:	f003 0310 	and.w	r3, r3, #16
 801199a:	2b00      	cmp	r3, #0
 801199c:	d021      	beq.n	80119e2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d01d      	beq.n	80119e2 <poll_tcp+0xb2>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80119ae:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80119b2:	d316      	bcc.n	80119e2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80119bc:	2b04      	cmp	r3, #4
 80119be:	d810      	bhi.n	80119e2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	7f1b      	ldrb	r3, [r3, #28]
 80119c4:	f023 0310 	bic.w	r3, r3, #16
 80119c8:	b2da      	uxtb	r2, r3
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d005      	beq.n	80119e2 <poll_tcp+0xb2>
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119da:	2200      	movs	r2, #0
 80119dc:	2102      	movs	r1, #2
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	08023b30 	.word	0x08023b30
 80119f0:	08023c88 	.word	0x08023c88
 80119f4:	08023b74 	.word	0x08023b74

080119f8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b086      	sub	sp, #24
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	4613      	mov	r3, r2
 8011a04:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d106      	bne.n	8011a1e <sent_tcp+0x26>
 8011a10:	4b20      	ldr	r3, [pc, #128]	; (8011a94 <sent_tcp+0x9c>)
 8011a12:	f240 1293 	movw	r2, #403	; 0x193
 8011a16:	4920      	ldr	r1, [pc, #128]	; (8011a98 <sent_tcp+0xa0>)
 8011a18:	4820      	ldr	r0, [pc, #128]	; (8011a9c <sent_tcp+0xa4>)
 8011a1a:	f00d fc07 	bl	801f22c <iprintf>

  if (conn) {
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d032      	beq.n	8011a8a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	785b      	ldrb	r3, [r3, #1]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d104      	bne.n	8011a36 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011a2c:	2101      	movs	r1, #1
 8011a2e:	6978      	ldr	r0, [r7, #20]
 8011a30:	f000 fdf0 	bl	8012614 <lwip_netconn_do_writemore>
 8011a34:	e007      	b.n	8011a46 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	785b      	ldrb	r3, [r3, #1]
 8011a3a:	2b04      	cmp	r3, #4
 8011a3c:	d103      	bne.n	8011a46 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011a3e:	2101      	movs	r1, #1
 8011a40:	6978      	ldr	r0, [r7, #20]
 8011a42:	f000 fae1 	bl	8012008 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d01d      	beq.n	8011a8a <sent_tcp+0x92>
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a56:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011a5a:	d316      	bcc.n	8011a8a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011a64:	2b04      	cmp	r3, #4
 8011a66:	d810      	bhi.n	8011a8a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	7f1b      	ldrb	r3, [r3, #28]
 8011a6c:	f023 0310 	bic.w	r3, r3, #16
 8011a70:	b2da      	uxtb	r2, r3
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d005      	beq.n	8011a8a <sent_tcp+0x92>
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a82:	88fa      	ldrh	r2, [r7, #6]
 8011a84:	2102      	movs	r1, #2
 8011a86:	6978      	ldr	r0, [r7, #20]
 8011a88:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011a8a:	2300      	movs	r3, #0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	08023b30 	.word	0x08023b30
 8011a98:	08023c88 	.word	0x08023c88
 8011a9c:	08023b74 	.word	0x08023b74

08011aa0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b088      	sub	sp, #32
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d106      	bne.n	8011ac4 <err_tcp+0x24>
 8011ab6:	4b5f      	ldr	r3, [pc, #380]	; (8011c34 <err_tcp+0x194>)
 8011ab8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011abc:	495e      	ldr	r1, [pc, #376]	; (8011c38 <err_tcp+0x198>)
 8011abe:	485f      	ldr	r0, [pc, #380]	; (8011c3c <err_tcp+0x19c>)
 8011ac0:	f00d fbb4 	bl	801f22c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011ac4:	f00c fb10 	bl	801e0e8 <sys_arch_protect>
 8011ac8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	2200      	movs	r2, #0
 8011ace:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	78fa      	ldrb	r2, [r7, #3]
 8011ad4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011ad6:	69fb      	ldr	r3, [r7, #28]
 8011ad8:	7f1b      	ldrb	r3, [r3, #28]
 8011ada:	f043 0301 	orr.w	r3, r3, #1
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	785b      	ldrb	r3, [r3, #1]
 8011ae8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011aea:	69fb      	ldr	r3, [r7, #28]
 8011aec:	2200      	movs	r2, #0
 8011aee:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011af0:	69b8      	ldr	r0, [r7, #24]
 8011af2:	f00c fb07 	bl	801e104 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d005      	beq.n	8011b0a <err_tcp+0x6a>
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b02:	2200      	movs	r2, #0
 8011b04:	2104      	movs	r1, #4
 8011b06:	69f8      	ldr	r0, [r7, #28]
 8011b08:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d005      	beq.n	8011b1e <err_tcp+0x7e>
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b16:	2200      	movs	r2, #0
 8011b18:	2100      	movs	r1, #0
 8011b1a:	69f8      	ldr	r0, [r7, #28]
 8011b1c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d005      	beq.n	8011b32 <err_tcp+0x92>
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	2102      	movs	r1, #2
 8011b2e:	69f8      	ldr	r0, [r7, #28]
 8011b30:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7ff fd86 	bl	8011648 <lwip_netconn_err_to_msg>
 8011b3c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	3310      	adds	r3, #16
 8011b42:	4618      	mov	r0, r3
 8011b44:	f00c f9b5 	bl	801deb2 <sys_mbox_valid>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d005      	beq.n	8011b5a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011b4e:	69fb      	ldr	r3, [r7, #28]
 8011b50:	3310      	adds	r3, #16
 8011b52:	6939      	ldr	r1, [r7, #16]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f00c f937 	bl	801ddc8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	3314      	adds	r3, #20
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f00c f9a7 	bl	801deb2 <sys_mbox_valid>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d005      	beq.n	8011b76 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	3314      	adds	r3, #20
 8011b6e:	6939      	ldr	r1, [r7, #16]
 8011b70:	4618      	mov	r0, r3
 8011b72:	f00c f929 	bl	801ddc8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011b76:	7dfb      	ldrb	r3, [r7, #23]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d005      	beq.n	8011b88 <err_tcp+0xe8>
 8011b7c:	7dfb      	ldrb	r3, [r7, #23]
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d002      	beq.n	8011b88 <err_tcp+0xe8>
 8011b82:	7dfb      	ldrb	r3, [r7, #23]
 8011b84:	2b03      	cmp	r3, #3
 8011b86:	d143      	bne.n	8011c10 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	7f1b      	ldrb	r3, [r3, #28]
 8011b8c:	f003 0304 	and.w	r3, r3, #4
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	bf14      	ite	ne
 8011b94:	2301      	movne	r3, #1
 8011b96:	2300      	moveq	r3, #0
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	7f1b      	ldrb	r3, [r3, #28]
 8011ba0:	f023 0304 	bic.w	r3, r3, #4
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d13b      	bne.n	8011c28 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	6a1b      	ldr	r3, [r3, #32]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d106      	bne.n	8011bc6 <err_tcp+0x126>
 8011bb8:	4b1e      	ldr	r3, [pc, #120]	; (8011c34 <err_tcp+0x194>)
 8011bba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011bbe:	4920      	ldr	r1, [pc, #128]	; (8011c40 <err_tcp+0x1a0>)
 8011bc0:	481e      	ldr	r0, [pc, #120]	; (8011c3c <err_tcp+0x19c>)
 8011bc2:	f00d fb33 	bl	801f22c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011bc6:	7dfb      	ldrb	r3, [r7, #23]
 8011bc8:	2b04      	cmp	r3, #4
 8011bca:	d104      	bne.n	8011bd6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	6a1b      	ldr	r3, [r3, #32]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	711a      	strb	r2, [r3, #4]
 8011bd4:	e003      	b.n	8011bde <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	6a1b      	ldr	r3, [r3, #32]
 8011bda:	78fa      	ldrb	r2, [r7, #3]
 8011bdc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	6a1b      	ldr	r3, [r3, #32]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	330c      	adds	r3, #12
 8011be6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011be8:	68b8      	ldr	r0, [r7, #8]
 8011bea:	f00c f9f3 	bl	801dfd4 <sys_sem_valid>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d106      	bne.n	8011c02 <err_tcp+0x162>
 8011bf4:	4b0f      	ldr	r3, [pc, #60]	; (8011c34 <err_tcp+0x194>)
 8011bf6:	f240 12ef 	movw	r2, #495	; 0x1ef
 8011bfa:	4912      	ldr	r1, [pc, #72]	; (8011c44 <err_tcp+0x1a4>)
 8011bfc:	480f      	ldr	r0, [pc, #60]	; (8011c3c <err_tcp+0x19c>)
 8011bfe:	f00d fb15 	bl	801f22c <iprintf>
      conn->current_msg = NULL;
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	2200      	movs	r2, #0
 8011c06:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011c08:	68b8      	ldr	r0, [r7, #8]
 8011c0a:	f00c f9c9 	bl	801dfa0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011c0e:	e00b      	b.n	8011c28 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011c10:	69fb      	ldr	r3, [r7, #28]
 8011c12:	6a1b      	ldr	r3, [r3, #32]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d008      	beq.n	8011c2a <err_tcp+0x18a>
 8011c18:	4b06      	ldr	r3, [pc, #24]	; (8011c34 <err_tcp+0x194>)
 8011c1a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8011c1e:	490a      	ldr	r1, [pc, #40]	; (8011c48 <err_tcp+0x1a8>)
 8011c20:	4806      	ldr	r0, [pc, #24]	; (8011c3c <err_tcp+0x19c>)
 8011c22:	f00d fb03 	bl	801f22c <iprintf>
  }
}
 8011c26:	e000      	b.n	8011c2a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011c28:	bf00      	nop
}
 8011c2a:	bf00      	nop
 8011c2c:	3720      	adds	r7, #32
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	08023b30 	.word	0x08023b30
 8011c38:	08023c88 	.word	0x08023c88
 8011c3c:	08023b74 	.word	0x08023b74
 8011c40:	08023c98 	.word	0x08023c98
 8011c44:	08023cb4 	.word	0x08023cb4
 8011c48:	08023cd0 	.word	0x08023cd0

08011c4c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011c5a:	6879      	ldr	r1, [r7, #4]
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f004 fabd 	bl	80161dc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011c62:	490a      	ldr	r1, [pc, #40]	; (8011c8c <setup_tcp+0x40>)
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f004 facb 	bl	8016200 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011c6a:	4909      	ldr	r1, [pc, #36]	; (8011c90 <setup_tcp+0x44>)
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f004 fae9 	bl	8016244 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011c72:	2202      	movs	r2, #2
 8011c74:	4907      	ldr	r1, [pc, #28]	; (8011c94 <setup_tcp+0x48>)
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f004 fb40 	bl	80162fc <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011c7c:	4906      	ldr	r1, [pc, #24]	; (8011c98 <setup_tcp+0x4c>)
 8011c7e:	68f8      	ldr	r0, [r7, #12]
 8011c80:	f004 fb02 	bl	8016288 <tcp_err>
}
 8011c84:	bf00      	nop
 8011c86:	3710      	adds	r7, #16
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	08011825 	.word	0x08011825
 8011c90:	080119f9 	.word	0x080119f9
 8011c94:	08011931 	.word	0x08011931
 8011c98:	08011aa1 	.word	0x08011aa1

08011c9c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011c9c:	b590      	push	{r4, r7, lr}
 8011c9e:	b085      	sub	sp, #20
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <pcb_new+0x24>
 8011cb2:	4b2b      	ldr	r3, [pc, #172]	; (8011d60 <pcb_new+0xc4>)
 8011cb4:	f240 2265 	movw	r2, #613	; 0x265
 8011cb8:	492a      	ldr	r1, [pc, #168]	; (8011d64 <pcb_new+0xc8>)
 8011cba:	482b      	ldr	r0, [pc, #172]	; (8011d68 <pcb_new+0xcc>)
 8011cbc:	f00d fab6 	bl	801f22c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011cca:	2b10      	cmp	r3, #16
 8011ccc:	d022      	beq.n	8011d14 <pcb_new+0x78>
 8011cce:	2b20      	cmp	r3, #32
 8011cd0:	d133      	bne.n	8011d3a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681c      	ldr	r4, [r3, #0]
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f009 fd44 	bl	801b766 <udp_new_ip_type>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d02a      	beq.n	8011d42 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	2b22      	cmp	r3, #34	; 0x22
 8011cf4:	d104      	bne.n	8011d00 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	6858      	ldr	r0, [r3, #4]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	4917      	ldr	r1, [pc, #92]	; (8011d6c <pcb_new+0xd0>)
 8011d0e:	f009 fcb1 	bl	801b674 <udp_recv>
      }
      break;
 8011d12:	e016      	b.n	8011d42 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681c      	ldr	r4, [r3, #0]
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f004 fa50 	bl	80161c0 <tcp_new_ip_type>
 8011d20:	4603      	mov	r3, r0
 8011d22:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00b      	beq.n	8011d46 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7ff ff8a 	bl	8011c4c <setup_tcp>
      }
      break;
 8011d38:	e005      	b.n	8011d46 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	22fa      	movs	r2, #250	; 0xfa
 8011d3e:	711a      	strb	r2, [r3, #4]
      return;
 8011d40:	e00a      	b.n	8011d58 <pcb_new+0xbc>
      break;
 8011d42:	bf00      	nop
 8011d44:	e000      	b.n	8011d48 <pcb_new+0xac>
      break;
 8011d46:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d102      	bne.n	8011d58 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	22ff      	movs	r2, #255	; 0xff
 8011d56:	711a      	strb	r2, [r3, #4]
  }
}
 8011d58:	3714      	adds	r7, #20
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd90      	pop	{r4, r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	08023b30 	.word	0x08023b30
 8011d64:	08023d14 	.word	0x08023d14
 8011d68:	08023b74 	.word	0x08023b74
 8011d6c:	08011729 	.word	0x08011729

08011d70 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d102      	bne.n	8011d92 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff ff85 	bl	8011c9c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011d92:	bf00      	nop
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
	...

08011d9c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	4603      	mov	r3, r0
 8011da4:	6039      	str	r1, [r7, #0]
 8011da6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011da8:	2300      	movs	r3, #0
 8011daa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011dac:	2007      	movs	r0, #7
 8011dae:	f001 fdbf 	bl	8013930 <memp_malloc>
 8011db2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d101      	bne.n	8011dbe <netconn_alloc+0x22>
    return NULL;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	e052      	b.n	8011e64 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	79fa      	ldrb	r2, [r7, #7]
 8011dc8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011dd0:	79fb      	ldrb	r3, [r7, #7]
 8011dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dd6:	2b10      	cmp	r3, #16
 8011dd8:	d004      	beq.n	8011de4 <netconn_alloc+0x48>
 8011dda:	2b20      	cmp	r3, #32
 8011ddc:	d105      	bne.n	8011dea <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011dde:	2306      	movs	r3, #6
 8011de0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011de2:	e00a      	b.n	8011dfa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011de4:	2306      	movs	r3, #6
 8011de6:	617b      	str	r3, [r7, #20]
      break;
 8011de8:	e007      	b.n	8011dfa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011dea:	4b20      	ldr	r3, [pc, #128]	; (8011e6c <netconn_alloc+0xd0>)
 8011dec:	f240 22e5 	movw	r2, #741	; 0x2e5
 8011df0:	491f      	ldr	r1, [pc, #124]	; (8011e70 <netconn_alloc+0xd4>)
 8011df2:	4820      	ldr	r0, [pc, #128]	; (8011e74 <netconn_alloc+0xd8>)
 8011df4:	f00d fa1a 	bl	801f22c <iprintf>
      goto free_and_return;
 8011df8:	e02f      	b.n	8011e5a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3310      	adds	r3, #16
 8011dfe:	6979      	ldr	r1, [r7, #20]
 8011e00:	4618      	mov	r0, r3
 8011e02:	f00b ffad 	bl	801dd60 <sys_mbox_new>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d125      	bne.n	8011e58 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	330c      	adds	r3, #12
 8011e10:	2100      	movs	r1, #0
 8011e12:	4618      	mov	r0, r3
 8011e14:	f00c f86b 	bl	801deee <sys_sem_new>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d005      	beq.n	8011e2a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	3310      	adds	r3, #16
 8011e22:	4618      	mov	r0, r3
 8011e24:	f00b ffbe 	bl	801dda4 <sys_mbox_free>
    goto free_and_return;
 8011e28:	e017      	b.n	8011e5a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	3314      	adds	r3, #20
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f00c f850 	bl	801ded4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2200      	movs	r2, #0
 8011e38:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e40:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	7cfa      	ldrb	r2, [r7, #19]
 8011e52:	771a      	strb	r2, [r3, #28]
  return conn;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	e005      	b.n	8011e64 <netconn_alloc+0xc8>
    goto free_and_return;
 8011e58:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011e5a:	68f9      	ldr	r1, [r7, #12]
 8011e5c:	2007      	movs	r0, #7
 8011e5e:	f001 fdb9 	bl	80139d4 <memp_free>
  return NULL;
 8011e62:	2300      	movs	r3, #0
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3718      	adds	r7, #24
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	08023b30 	.word	0x08023b30
 8011e70:	08023d34 	.word	0x08023d34
 8011e74:	08023b74 	.word	0x08023b74

08011e78 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d006      	beq.n	8011e96 <netconn_free+0x1e>
 8011e88:	4b1b      	ldr	r3, [pc, #108]	; (8011ef8 <netconn_free+0x80>)
 8011e8a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011e8e:	491b      	ldr	r1, [pc, #108]	; (8011efc <netconn_free+0x84>)
 8011e90:	481b      	ldr	r0, [pc, #108]	; (8011f00 <netconn_free+0x88>)
 8011e92:	f00d f9cb 	bl	801f22c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	3310      	adds	r3, #16
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f00c f809 	bl	801deb2 <sys_mbox_valid>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d006      	beq.n	8011eb4 <netconn_free+0x3c>
 8011ea6:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <netconn_free+0x80>)
 8011ea8:	f240 3223 	movw	r2, #803	; 0x323
 8011eac:	4915      	ldr	r1, [pc, #84]	; (8011f04 <netconn_free+0x8c>)
 8011eae:	4814      	ldr	r0, [pc, #80]	; (8011f00 <netconn_free+0x88>)
 8011eb0:	f00d f9bc 	bl	801f22c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3314      	adds	r3, #20
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f00b fffa 	bl	801deb2 <sys_mbox_valid>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d006      	beq.n	8011ed2 <netconn_free+0x5a>
 8011ec4:	4b0c      	ldr	r3, [pc, #48]	; (8011ef8 <netconn_free+0x80>)
 8011ec6:	f240 3226 	movw	r2, #806	; 0x326
 8011eca:	490f      	ldr	r1, [pc, #60]	; (8011f08 <netconn_free+0x90>)
 8011ecc:	480c      	ldr	r0, [pc, #48]	; (8011f00 <netconn_free+0x88>)
 8011ece:	f00d f9ad 	bl	801f22c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	330c      	adds	r3, #12
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f00c f86f 	bl	801dfba <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	330c      	adds	r3, #12
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f00c f888 	bl	801dff6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011ee6:	6879      	ldr	r1, [r7, #4]
 8011ee8:	2007      	movs	r0, #7
 8011eea:	f001 fd73 	bl	80139d4 <memp_free>
}
 8011eee:	bf00      	nop
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	08023b30 	.word	0x08023b30
 8011efc:	08023d5c 	.word	0x08023d5c
 8011f00:	08023b74 	.word	0x08023b74
 8011f04:	08023d8c 	.word	0x08023d8c
 8011f08:	08023dc8 	.word	0x08023dc8

08011f0c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b086      	sub	sp, #24
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	3310      	adds	r3, #16
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f00b ffca 	bl	801deb2 <sys_mbox_valid>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d02f      	beq.n	8011f84 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f24:	e018      	b.n	8011f58 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f2e:	2b10      	cmp	r3, #16
 8011f30:	d10e      	bne.n	8011f50 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	f107 020f 	add.w	r2, r7, #15
 8011f38:	4611      	mov	r1, r2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff fbba 	bl	80116b4 <lwip_netconn_is_err_msg>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d108      	bne.n	8011f58 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f002 fb83 	bl	8014654 <pbuf_free>
 8011f4e:	e003      	b.n	8011f58 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f000 fdca 	bl	8012aec <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	3310      	adds	r3, #16
 8011f5c:	f107 0210 	add.w	r2, r7, #16
 8011f60:	4611      	mov	r1, r2
 8011f62:	4618      	mov	r0, r3
 8011f64:	f00b ff89 	bl	801de7a <sys_arch_mbox_tryfetch>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f6e:	d1da      	bne.n	8011f26 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	3310      	adds	r3, #16
 8011f74:	4618      	mov	r0, r3
 8011f76:	f00b ff15 	bl	801dda4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	3310      	adds	r3, #16
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f00b ffa8 	bl	801ded4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	3314      	adds	r3, #20
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f00b ff92 	bl	801deb2 <sys_mbox_valid>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d034      	beq.n	8011ffe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f94:	e01d      	b.n	8011fd2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	f107 020e 	add.w	r2, r7, #14
 8011f9c:	4611      	mov	r1, r2
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff fb88 	bl	80116b4 <lwip_netconn_is_err_msg>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d113      	bne.n	8011fd2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011fae:	6978      	ldr	r0, [r7, #20]
 8011fb0:	f7ff ffac 	bl	8011f0c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d007      	beq.n	8011fcc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f003 f947 	bl	8015254 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011fcc:	6978      	ldr	r0, [r7, #20]
 8011fce:	f7ff ff53 	bl	8011e78 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3314      	adds	r3, #20
 8011fd6:	f107 0210 	add.w	r2, r7, #16
 8011fda:	4611      	mov	r1, r2
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f00b ff4c 	bl	801de7a <sys_arch_mbox_tryfetch>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe8:	d1d5      	bne.n	8011f96 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	3314      	adds	r3, #20
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f00b fed8 	bl	801dda4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	3314      	adds	r3, #20
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f00b ff6b 	bl	801ded4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011ffe:	bf00      	nop
 8012000:	3718      	adds	r7, #24
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
	...

08012008 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	460b      	mov	r3, r1
 8012012:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012014:	2300      	movs	r3, #0
 8012016:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d106      	bne.n	801202c <lwip_netconn_do_close_internal+0x24>
 801201e:	4ba1      	ldr	r3, [pc, #644]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 8012020:	f240 32a2 	movw	r2, #930	; 0x3a2
 8012024:	49a0      	ldr	r1, [pc, #640]	; (80122a8 <lwip_netconn_do_close_internal+0x2a0>)
 8012026:	48a1      	ldr	r0, [pc, #644]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 8012028:	f00d f900 	bl	801f22c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012034:	2b10      	cmp	r3, #16
 8012036:	d006      	beq.n	8012046 <lwip_netconn_do_close_internal+0x3e>
 8012038:	4b9a      	ldr	r3, [pc, #616]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 801203a:	f240 32a3 	movw	r2, #931	; 0x3a3
 801203e:	499c      	ldr	r1, [pc, #624]	; (80122b0 <lwip_netconn_do_close_internal+0x2a8>)
 8012040:	489a      	ldr	r0, [pc, #616]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 8012042:	f00d f8f3 	bl	801f22c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	785b      	ldrb	r3, [r3, #1]
 801204a:	2b04      	cmp	r3, #4
 801204c:	d006      	beq.n	801205c <lwip_netconn_do_close_internal+0x54>
 801204e:	4b95      	ldr	r3, [pc, #596]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 8012050:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8012054:	4997      	ldr	r1, [pc, #604]	; (80122b4 <lwip_netconn_do_close_internal+0x2ac>)
 8012056:	4895      	ldr	r0, [pc, #596]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 8012058:	f00d f8e8 	bl	801f22c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d106      	bne.n	8012072 <lwip_netconn_do_close_internal+0x6a>
 8012064:	4b8f      	ldr	r3, [pc, #572]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 8012066:	f240 32a5 	movw	r2, #933	; 0x3a5
 801206a:	4993      	ldr	r1, [pc, #588]	; (80122b8 <lwip_netconn_do_close_internal+0x2b0>)
 801206c:	488f      	ldr	r0, [pc, #572]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 801206e:	f00d f8dd 	bl	801f22c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6a1b      	ldr	r3, [r3, #32]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d106      	bne.n	8012088 <lwip_netconn_do_close_internal+0x80>
 801207a:	4b8a      	ldr	r3, [pc, #552]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 801207c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012080:	498e      	ldr	r1, [pc, #568]	; (80122bc <lwip_netconn_do_close_internal+0x2b4>)
 8012082:	488a      	ldr	r0, [pc, #552]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 8012084:	f00d f8d2 	bl	801f22c <iprintf>

  tpcb = conn->pcb.tcp;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6a1b      	ldr	r3, [r3, #32]
 8012092:	7a1b      	ldrb	r3, [r3, #8]
 8012094:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012096:	7bfb      	ldrb	r3, [r7, #15]
 8012098:	f003 0301 	and.w	r3, r3, #1
 801209c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801209e:	7bfb      	ldrb	r3, [r7, #15]
 80120a0:	f003 0302 	and.w	r3, r3, #2
 80120a4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80120a6:	7bfb      	ldrb	r3, [r7, #15]
 80120a8:	2b03      	cmp	r3, #3
 80120aa:	d102      	bne.n	80120b2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80120ac:	2301      	movs	r3, #1
 80120ae:	75bb      	strb	r3, [r7, #22]
 80120b0:	e01f      	b.n	80120f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80120b2:	7bbb      	ldrb	r3, [r7, #14]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d00e      	beq.n	80120d6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80120bc:	2b05      	cmp	r3, #5
 80120be:	d007      	beq.n	80120d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80120c4:	2b06      	cmp	r3, #6
 80120c6:	d003      	beq.n	80120d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80120cc:	2b08      	cmp	r3, #8
 80120ce:	d102      	bne.n	80120d6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80120d0:	2301      	movs	r3, #1
 80120d2:	75bb      	strb	r3, [r7, #22]
 80120d4:	e00d      	b.n	80120f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80120d6:	7b7b      	ldrb	r3, [r7, #13]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d008      	beq.n	80120ee <lwip_netconn_do_close_internal+0xe6>
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	8b5b      	ldrh	r3, [r3, #26]
 80120e0:	f003 0310 	and.w	r3, r3, #16
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d002      	beq.n	80120ee <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80120e8:	2301      	movs	r3, #1
 80120ea:	75bb      	strb	r3, [r7, #22]
 80120ec:	e001      	b.n	80120f2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80120ee:	2300      	movs	r3, #0
 80120f0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80120f2:	7dbb      	ldrb	r3, [r7, #22]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d003      	beq.n	8012100 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80120f8:	2100      	movs	r1, #0
 80120fa:	6938      	ldr	r0, [r7, #16]
 80120fc:	f004 f86e 	bl	80161dc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	7d1b      	ldrb	r3, [r3, #20]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d104      	bne.n	8012112 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012108:	2100      	movs	r1, #0
 801210a:	6938      	ldr	r0, [r7, #16]
 801210c:	f004 f8de 	bl	80162cc <tcp_accept>
 8012110:	e01d      	b.n	801214e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012112:	7bbb      	ldrb	r3, [r7, #14]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d007      	beq.n	8012128 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012118:	2100      	movs	r1, #0
 801211a:	6938      	ldr	r0, [r7, #16]
 801211c:	f004 f870 	bl	8016200 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012120:	2100      	movs	r1, #0
 8012122:	6938      	ldr	r0, [r7, #16]
 8012124:	f004 f8d2 	bl	80162cc <tcp_accept>
    }
    if (shut_tx) {
 8012128:	7b7b      	ldrb	r3, [r7, #13]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d003      	beq.n	8012136 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801212e:	2100      	movs	r1, #0
 8012130:	6938      	ldr	r0, [r7, #16]
 8012132:	f004 f887 	bl	8016244 <tcp_sent>
    }
    if (shut_close) {
 8012136:	7dbb      	ldrb	r3, [r7, #22]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d008      	beq.n	801214e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801213c:	2200      	movs	r2, #0
 801213e:	2100      	movs	r1, #0
 8012140:	6938      	ldr	r0, [r7, #16]
 8012142:	f004 f8db 	bl	80162fc <tcp_poll>
      tcp_err(tpcb, NULL);
 8012146:	2100      	movs	r1, #0
 8012148:	6938      	ldr	r0, [r7, #16]
 801214a:	f004 f89d 	bl	8016288 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801214e:	7dbb      	ldrb	r3, [r7, #22]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d005      	beq.n	8012160 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012154:	6938      	ldr	r0, [r7, #16]
 8012156:	f002 ff37 	bl	8014fc8 <tcp_close>
 801215a:	4603      	mov	r3, r0
 801215c:	75fb      	strb	r3, [r7, #23]
 801215e:	e007      	b.n	8012170 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012160:	7bbb      	ldrb	r3, [r7, #14]
 8012162:	7b7a      	ldrb	r2, [r7, #13]
 8012164:	4619      	mov	r1, r3
 8012166:	6938      	ldr	r0, [r7, #16]
 8012168:	f002 ff5a 	bl	8015020 <tcp_shutdown>
 801216c:	4603      	mov	r3, r0
 801216e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d102      	bne.n	801217e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012178:	2301      	movs	r3, #1
 801217a:	757b      	strb	r3, [r7, #21]
 801217c:	e016      	b.n	80121ac <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801217e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012186:	d10f      	bne.n	80121a8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6a1b      	ldr	r3, [r3, #32]
 801218c:	7a5b      	ldrb	r3, [r3, #9]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d10c      	bne.n	80121ac <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012192:	2301      	movs	r3, #1
 8012194:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012196:	7dbb      	ldrb	r3, [r7, #22]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d007      	beq.n	80121ac <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801219c:	6938      	ldr	r0, [r7, #16]
 801219e:	f003 f859 	bl	8015254 <tcp_abort>
          err = ERR_OK;
 80121a2:	2300      	movs	r3, #0
 80121a4:	75fb      	strb	r3, [r7, #23]
 80121a6:	e001      	b.n	80121ac <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80121a8:	2301      	movs	r3, #1
 80121aa:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80121ac:	7d7b      	ldrb	r3, [r7, #21]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d044      	beq.n	801223c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a1b      	ldr	r3, [r3, #32]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	330c      	adds	r3, #12
 80121ba:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6a1b      	ldr	r3, [r3, #32]
 80121c0:	7dfa      	ldrb	r2, [r7, #23]
 80121c2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80121d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d129      	bne.n	801222c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80121d8:	7dbb      	ldrb	r3, [r7, #22]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d00c      	beq.n	80121f8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2200      	movs	r2, #0
 80121e2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d005      	beq.n	80121f8 <lwip_netconn_do_close_internal+0x1f0>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f0:	2200      	movs	r2, #0
 80121f2:	2104      	movs	r1, #4
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	4798      	blx	r3
      }
      if (shut_rx) {
 80121f8:	7bbb      	ldrb	r3, [r7, #14]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d009      	beq.n	8012212 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012202:	2b00      	cmp	r3, #0
 8012204:	d005      	beq.n	8012212 <lwip_netconn_do_close_internal+0x20a>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801220a:	2200      	movs	r2, #0
 801220c:	2100      	movs	r1, #0
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	4798      	blx	r3
      }
      if (shut_tx) {
 8012212:	7b7b      	ldrb	r3, [r7, #13]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d009      	beq.n	801222c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801221c:	2b00      	cmp	r3, #0
 801221e:	d005      	beq.n	801222c <lwip_netconn_do_close_internal+0x224>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012224:	2200      	movs	r2, #0
 8012226:	2102      	movs	r1, #2
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801222c:	78fb      	ldrb	r3, [r7, #3]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012232:	68b8      	ldr	r0, [r7, #8]
 8012234:	f00b feb4 	bl	801dfa0 <sys_sem_signal>
    }
    return ERR_OK;
 8012238:	2300      	movs	r3, #0
 801223a:	e02e      	b.n	801229a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 801223c:	7d7b      	ldrb	r3, [r7, #21]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d11e      	bne.n	8012280 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	7d1b      	ldrb	r3, [r3, #20]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d106      	bne.n	8012258 <lwip_netconn_do_close_internal+0x250>
 801224a:	4b16      	ldr	r3, [pc, #88]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 801224c:	f240 4241 	movw	r2, #1089	; 0x441
 8012250:	491b      	ldr	r1, [pc, #108]	; (80122c0 <lwip_netconn_do_close_internal+0x2b8>)
 8012252:	4816      	ldr	r0, [pc, #88]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 8012254:	f00c ffea 	bl	801f22c <iprintf>
    if (shut_tx) {
 8012258:	7b7b      	ldrb	r3, [r7, #13]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d003      	beq.n	8012266 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 801225e:	4919      	ldr	r1, [pc, #100]	; (80122c4 <lwip_netconn_do_close_internal+0x2bc>)
 8012260:	6938      	ldr	r0, [r7, #16]
 8012262:	f003 ffef 	bl	8016244 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012266:	2201      	movs	r2, #1
 8012268:	4917      	ldr	r1, [pc, #92]	; (80122c8 <lwip_netconn_do_close_internal+0x2c0>)
 801226a:	6938      	ldr	r0, [r7, #16]
 801226c:	f004 f846 	bl	80162fc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012270:	4916      	ldr	r1, [pc, #88]	; (80122cc <lwip_netconn_do_close_internal+0x2c4>)
 8012272:	6938      	ldr	r0, [r7, #16]
 8012274:	f004 f808 	bl	8016288 <tcp_err>
    tcp_arg(tpcb, conn);
 8012278:	6879      	ldr	r1, [r7, #4]
 801227a:	6938      	ldr	r0, [r7, #16]
 801227c:	f003 ffae 	bl	80161dc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <lwip_netconn_do_close_internal+0x28e>
 8012288:	4b06      	ldr	r3, [pc, #24]	; (80122a4 <lwip_netconn_do_close_internal+0x29c>)
 801228a:	f240 424d 	movw	r2, #1101	; 0x44d
 801228e:	4910      	ldr	r1, [pc, #64]	; (80122d0 <lwip_netconn_do_close_internal+0x2c8>)
 8012290:	4806      	ldr	r0, [pc, #24]	; (80122ac <lwip_netconn_do_close_internal+0x2a4>)
 8012292:	f00c ffcb 	bl	801f22c <iprintf>
  return err;
 8012296:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	08023b30 	.word	0x08023b30
 80122a8:	08023e04 	.word	0x08023e04
 80122ac:	08023b74 	.word	0x08023b74
 80122b0:	08023e14 	.word	0x08023e14
 80122b4:	08023e34 	.word	0x08023e34
 80122b8:	08023e58 	.word	0x08023e58
 80122bc:	08023c98 	.word	0x08023c98
 80122c0:	08023e6c 	.word	0x08023e6c
 80122c4:	080119f9 	.word	0x080119f9
 80122c8:	08011931 	.word	0x08011931
 80122cc:	08011aa1 	.word	0x08011aa1
 80122d0:	08023e90 	.word	0x08023e90

080122d4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	785b      	ldrb	r3, [r3, #1]
 80122e6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80122e8:	7afb      	ldrb	r3, [r7, #11]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d00d      	beq.n	801230a <lwip_netconn_do_delconn+0x36>
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122f8:	2b10      	cmp	r3, #16
 80122fa:	d006      	beq.n	801230a <lwip_netconn_do_delconn+0x36>
 80122fc:	4b60      	ldr	r3, [pc, #384]	; (8012480 <lwip_netconn_do_delconn+0x1ac>)
 80122fe:	f240 425e 	movw	r2, #1118	; 0x45e
 8012302:	4960      	ldr	r1, [pc, #384]	; (8012484 <lwip_netconn_do_delconn+0x1b0>)
 8012304:	4860      	ldr	r0, [pc, #384]	; (8012488 <lwip_netconn_do_delconn+0x1b4>)
 8012306:	f00c ff91 	bl	801f22c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801230a:	7afb      	ldrb	r3, [r7, #11]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d005      	beq.n	801231c <lwip_netconn_do_delconn+0x48>
 8012310:	7afb      	ldrb	r3, [r7, #11]
 8012312:	2b02      	cmp	r3, #2
 8012314:	d002      	beq.n	801231c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012316:	7afb      	ldrb	r3, [r7, #11]
 8012318:	2b03      	cmp	r3, #3
 801231a:	d109      	bne.n	8012330 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 801231c:	7afb      	ldrb	r3, [r7, #11]
 801231e:	2b03      	cmp	r3, #3
 8012320:	d10a      	bne.n	8012338 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	7f1b      	ldrb	r3, [r3, #28]
 8012328:	f003 0304 	and.w	r3, r3, #4
 801232c:	2b00      	cmp	r3, #0
 801232e:	d103      	bne.n	8012338 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	22fb      	movs	r2, #251	; 0xfb
 8012334:	711a      	strb	r2, [r3, #4]
 8012336:	e097      	b.n	8012468 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012338:	7afb      	ldrb	r3, [r7, #11]
 801233a:	2b03      	cmp	r3, #3
 801233c:	d10d      	bne.n	801235a <lwip_netconn_do_delconn+0x86>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	7f1b      	ldrb	r3, [r3, #28]
 8012344:	f003 0304 	and.w	r3, r3, #4
 8012348:	2b00      	cmp	r3, #0
 801234a:	d106      	bne.n	801235a <lwip_netconn_do_delconn+0x86>
 801234c:	4b4c      	ldr	r3, [pc, #304]	; (8012480 <lwip_netconn_do_delconn+0x1ac>)
 801234e:	f240 427a 	movw	r2, #1146	; 0x47a
 8012352:	494e      	ldr	r1, [pc, #312]	; (801248c <lwip_netconn_do_delconn+0x1b8>)
 8012354:	484c      	ldr	r0, [pc, #304]	; (8012488 <lwip_netconn_do_delconn+0x1b4>)
 8012356:	f00c ff69 	bl	801f22c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2200      	movs	r2, #0
 801235e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff fdd1 	bl	8011f0c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d05f      	beq.n	8012434 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801237e:	2b10      	cmp	r3, #16
 8012380:	d00d      	beq.n	801239e <lwip_netconn_do_delconn+0xca>
 8012382:	2b20      	cmp	r3, #32
 8012384:	d151      	bne.n	801242a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	4618      	mov	r0, r3
 8012398:	f009 f98c 	bl	801b6b4 <udp_remove>
          break;
 801239c:	e046      	b.n	801242c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	6a1b      	ldr	r3, [r3, #32]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d006      	beq.n	80123b6 <lwip_netconn_do_delconn+0xe2>
 80123a8:	4b35      	ldr	r3, [pc, #212]	; (8012480 <lwip_netconn_do_delconn+0x1ac>)
 80123aa:	f240 4294 	movw	r2, #1172	; 0x494
 80123ae:	4938      	ldr	r1, [pc, #224]	; (8012490 <lwip_netconn_do_delconn+0x1bc>)
 80123b0:	4835      	ldr	r0, [pc, #212]	; (8012488 <lwip_netconn_do_delconn+0x1b4>)
 80123b2:	f00c ff3b 	bl	801f22c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2204      	movs	r2, #4
 80123bc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2203      	movs	r2, #3
 80123c2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2100      	movs	r1, #0
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff fe18 	bl	8012008 <lwip_netconn_do_close_internal>
 80123d8:	4603      	mov	r3, r0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d04b      	beq.n	8012476 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	785b      	ldrb	r3, [r3, #1]
 80123e4:	2b04      	cmp	r3, #4
 80123e6:	d006      	beq.n	80123f6 <lwip_netconn_do_delconn+0x122>
 80123e8:	4b25      	ldr	r3, [pc, #148]	; (8012480 <lwip_netconn_do_delconn+0x1ac>)
 80123ea:	f240 429a 	movw	r2, #1178	; 0x49a
 80123ee:	4929      	ldr	r1, [pc, #164]	; (8012494 <lwip_netconn_do_delconn+0x1c0>)
 80123f0:	4825      	ldr	r0, [pc, #148]	; (8012488 <lwip_netconn_do_delconn+0x1b4>)
 80123f2:	f00c ff1b 	bl	801f22c <iprintf>
            UNLOCK_TCPIP_CORE();
 80123f6:	4828      	ldr	r0, [pc, #160]	; (8012498 <lwip_netconn_do_delconn+0x1c4>)
 80123f8:	f00b fe43 	bl	801e082 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	330c      	adds	r3, #12
 8012402:	2100      	movs	r1, #0
 8012404:	4618      	mov	r0, r3
 8012406:	f00b fd9a 	bl	801df3e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801240a:	4823      	ldr	r0, [pc, #140]	; (8012498 <lwip_netconn_do_delconn+0x1c4>)
 801240c:	f00b fe2a 	bl	801e064 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	785b      	ldrb	r3, [r3, #1]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d02d      	beq.n	8012476 <lwip_netconn_do_delconn+0x1a2>
 801241a:	4b19      	ldr	r3, [pc, #100]	; (8012480 <lwip_netconn_do_delconn+0x1ac>)
 801241c:	f240 429e 	movw	r2, #1182	; 0x49e
 8012420:	491c      	ldr	r1, [pc, #112]	; (8012494 <lwip_netconn_do_delconn+0x1c0>)
 8012422:	4819      	ldr	r0, [pc, #100]	; (8012488 <lwip_netconn_do_delconn+0x1b4>)
 8012424:	f00c ff02 	bl	801f22c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012428:	e025      	b.n	8012476 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801242a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2200      	movs	r2, #0
 8012432:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243a:	2b00      	cmp	r3, #0
 801243c:	d007      	beq.n	801244e <lwip_netconn_do_delconn+0x17a>
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	6810      	ldr	r0, [r2, #0]
 8012448:	2200      	movs	r2, #0
 801244a:	2100      	movs	r1, #0
 801244c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012454:	2b00      	cmp	r3, #0
 8012456:	d007      	beq.n	8012468 <lwip_netconn_do_delconn+0x194>
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	6810      	ldr	r0, [r2, #0]
 8012462:	2200      	movs	r2, #0
 8012464:	2102      	movs	r1, #2
 8012466:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	330c      	adds	r3, #12
 801246e:	4618      	mov	r0, r3
 8012470:	f00b fdb0 	bl	801dfd4 <sys_sem_valid>
 8012474:	e000      	b.n	8012478 <lwip_netconn_do_delconn+0x1a4>
          return;
 8012476:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012478:	3710      	adds	r7, #16
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	08023b30 	.word	0x08023b30
 8012484:	08023ea0 	.word	0x08023ea0
 8012488:	08023b74 	.word	0x08023b74
 801248c:	08023eb4 	.word	0x08023eb4
 8012490:	08023ed4 	.word	0x08023ed4
 8012494:	08023ef0 	.word	0x08023ef0
 8012498:	2000aa58 	.word	0x2000aa58

0801249c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d025      	beq.n	80124fe <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124bc:	2b10      	cmp	r3, #16
 80124be:	d00e      	beq.n	80124de <lwip_netconn_do_bind+0x42>
 80124c0:	2b20      	cmp	r3, #32
 80124c2:	d119      	bne.n	80124f8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	6858      	ldr	r0, [r3, #4]
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	6899      	ldr	r1, [r3, #8]
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	899b      	ldrh	r3, [r3, #12]
 80124d2:	461a      	mov	r2, r3
 80124d4:	f009 f846 	bl	801b564 <udp_bind>
 80124d8:	4603      	mov	r3, r0
 80124da:	73fb      	strb	r3, [r7, #15]
        break;
 80124dc:	e011      	b.n	8012502 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6858      	ldr	r0, [r3, #4]
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	6899      	ldr	r1, [r3, #8]
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	899b      	ldrh	r3, [r3, #12]
 80124ec:	461a      	mov	r2, r3
 80124ee:	f002 febd 	bl	801526c <tcp_bind>
 80124f2:	4603      	mov	r3, r0
 80124f4:	73fb      	strb	r3, [r7, #15]
        break;
 80124f6:	e004      	b.n	8012502 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80124f8:	23fa      	movs	r3, #250	; 0xfa
 80124fa:	73fb      	strb	r3, [r7, #15]
        break;
 80124fc:	e001      	b.n	8012502 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80124fe:	23fa      	movs	r3, #250	; 0xfa
 8012500:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	7bfa      	ldrb	r2, [r7, #15]
 8012506:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012508:	bf00      	nop
 801250a:	3710      	adds	r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4618      	mov	r0, r3
 8012522:	f7ff f875 	bl	8011610 <netconn_err>
 8012526:	4603      	mov	r3, r0
 8012528:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d134      	bne.n	801259c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d02d      	beq.n	8012598 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012546:	2b20      	cmp	r3, #32
 8012548:	d123      	bne.n	8012592 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	689b      	ldr	r3, [r3, #8]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10c      	bne.n	801256e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	685a      	ldr	r2, [r3, #4]
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4619      	mov	r1, r3
 8012562:	4610      	mov	r0, r2
 8012564:	f008 fe14 	bl	801b190 <udp_send>
 8012568:	4603      	mov	r3, r0
 801256a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 801256c:	e016      	b.n	801259c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	6858      	ldr	r0, [r3, #4]
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	689b      	ldr	r3, [r3, #8]
 8012578:	6819      	ldr	r1, [r3, #0]
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	f103 0208 	add.w	r2, r3, #8
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	899b      	ldrh	r3, [r3, #12]
 8012588:	f008 fe36 	bl	801b1f8 <udp_sendto>
 801258c:	4603      	mov	r3, r0
 801258e:	73fb      	strb	r3, [r7, #15]
          break;
 8012590:	e004      	b.n	801259c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012592:	23f5      	movs	r3, #245	; 0xf5
 8012594:	73fb      	strb	r3, [r7, #15]
          break;
 8012596:	e001      	b.n	801259c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012598:	23f5      	movs	r3, #245	; 0xf5
 801259a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	7bfa      	ldrb	r2, [r7, #15]
 80125a0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80125a2:	bf00      	nop
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b086      	sub	sp, #24
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	2200      	movs	r2, #0
 80125ba:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d022      	beq.n	801260c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125d0:	2b10      	cmp	r3, #16
 80125d2:	d11b      	bne.n	801260c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125e0:	d202      	bcs.n	80125e8 <lwip_netconn_do_recv+0x3e>
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	e001      	b.n	80125ec <lwip_netconn_do_recv+0x42>
 80125e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125ec:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	89fa      	ldrh	r2, [r7, #14]
 80125f6:	4611      	mov	r1, r2
 80125f8:	4618      	mov	r0, r3
 80125fa:	f002 ff29 	bl	8015450 <tcp_recved>
        remaining -= recved;
 80125fe:	89fb      	ldrh	r3, [r7, #14]
 8012600:	697a      	ldr	r2, [r7, #20]
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1e6      	bne.n	80125da <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801260c:	bf00      	nop
 801260e:	3718      	adds	r7, #24
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b088      	sub	sp, #32
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	460b      	mov	r3, r1
 801261e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012620:	2300      	movs	r3, #0
 8012622:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <lwip_netconn_do_writemore+0x24>
 801262a:	4b96      	ldr	r3, [pc, #600]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 801262c:	f240 6273 	movw	r2, #1651	; 0x673
 8012630:	4995      	ldr	r1, [pc, #596]	; (8012888 <lwip_netconn_do_writemore+0x274>)
 8012632:	4896      	ldr	r0, [pc, #600]	; (801288c <lwip_netconn_do_writemore+0x278>)
 8012634:	f00c fdfa 	bl	801f22c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	785b      	ldrb	r3, [r3, #1]
 801263c:	2b01      	cmp	r3, #1
 801263e:	d006      	beq.n	801264e <lwip_netconn_do_writemore+0x3a>
 8012640:	4b90      	ldr	r3, [pc, #576]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 8012642:	f240 6274 	movw	r2, #1652	; 0x674
 8012646:	4992      	ldr	r1, [pc, #584]	; (8012890 <lwip_netconn_do_writemore+0x27c>)
 8012648:	4890      	ldr	r0, [pc, #576]	; (801288c <lwip_netconn_do_writemore+0x278>)
 801264a:	f00c fdef 	bl	801f22c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a1b      	ldr	r3, [r3, #32]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d106      	bne.n	8012664 <lwip_netconn_do_writemore+0x50>
 8012656:	4b8b      	ldr	r3, [pc, #556]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 8012658:	f240 6275 	movw	r2, #1653	; 0x675
 801265c:	498d      	ldr	r1, [pc, #564]	; (8012894 <lwip_netconn_do_writemore+0x280>)
 801265e:	488b      	ldr	r0, [pc, #556]	; (801288c <lwip_netconn_do_writemore+0x278>)
 8012660:	f00c fde4 	bl	801f22c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d106      	bne.n	801267a <lwip_netconn_do_writemore+0x66>
 801266c:	4b85      	ldr	r3, [pc, #532]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 801266e:	f240 6276 	movw	r2, #1654	; 0x676
 8012672:	4989      	ldr	r1, [pc, #548]	; (8012898 <lwip_netconn_do_writemore+0x284>)
 8012674:	4885      	ldr	r0, [pc, #532]	; (801288c <lwip_netconn_do_writemore+0x278>)
 8012676:	f00c fdd9 	bl	801f22c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6a1b      	ldr	r3, [r3, #32]
 801267e:	699a      	ldr	r2, [r3, #24]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a1b      	ldr	r3, [r3, #32]
 8012684:	695b      	ldr	r3, [r3, #20]
 8012686:	429a      	cmp	r2, r3
 8012688:	d306      	bcc.n	8012698 <lwip_netconn_do_writemore+0x84>
 801268a:	4b7e      	ldr	r3, [pc, #504]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 801268c:	f240 6277 	movw	r2, #1655	; 0x677
 8012690:	4982      	ldr	r1, [pc, #520]	; (801289c <lwip_netconn_do_writemore+0x288>)
 8012692:	487e      	ldr	r0, [pc, #504]	; (801288c <lwip_netconn_do_writemore+0x278>)
 8012694:	f00c fdca 	bl	801f22c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6a1b      	ldr	r3, [r3, #32]
 801269c:	899b      	ldrh	r3, [r3, #12]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d106      	bne.n	80126b0 <lwip_netconn_do_writemore+0x9c>
 80126a2:	4b78      	ldr	r3, [pc, #480]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 80126a4:	f240 6279 	movw	r2, #1657	; 0x679
 80126a8:	497d      	ldr	r1, [pc, #500]	; (80128a0 <lwip_netconn_do_writemore+0x28c>)
 80126aa:	4878      	ldr	r0, [pc, #480]	; (801288c <lwip_netconn_do_writemore+0x278>)
 80126ac:	f00c fdbe 	bl	801f22c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6a1b      	ldr	r3, [r3, #32]
 80126b4:	7f1b      	ldrb	r3, [r3, #28]
 80126b6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	7f1b      	ldrb	r3, [r3, #28]
 80126bc:	f003 0302 	and.w	r3, r3, #2
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d104      	bne.n	80126ce <lwip_netconn_do_writemore+0xba>
 80126c4:	7ebb      	ldrb	r3, [r7, #26]
 80126c6:	f003 0304 	and.w	r3, r3, #4
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d001      	beq.n	80126d2 <lwip_netconn_do_writemore+0xbe>
 80126ce:	2301      	movs	r3, #1
 80126d0:	e000      	b.n	80126d4 <lwip_netconn_do_writemore+0xc0>
 80126d2:	2300      	movs	r3, #0
 80126d4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6a1b      	ldr	r3, [r3, #32]
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6a1b      	ldr	r3, [r3, #32]
 80126e2:	691b      	ldr	r3, [r3, #16]
 80126e4:	4413      	add	r3, r2
 80126e6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a1b      	ldr	r3, [r3, #32]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	685a      	ldr	r2, [r3, #4]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6a1b      	ldr	r3, [r3, #32]
 80126f4:	691b      	ldr	r3, [r3, #16]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012700:	d307      	bcc.n	8012712 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012706:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012708:	7ebb      	ldrb	r3, [r7, #26]
 801270a:	f043 0302 	orr.w	r3, r3, #2
 801270e:	76bb      	strb	r3, [r7, #26]
 8012710:	e001      	b.n	8012716 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801271e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012720:	89fa      	ldrh	r2, [r7, #14]
 8012722:	8bbb      	ldrh	r3, [r7, #28]
 8012724:	429a      	cmp	r2, r3
 8012726:	d216      	bcs.n	8012756 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012728:	89fb      	ldrh	r3, [r7, #14]
 801272a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801272c:	7e3b      	ldrb	r3, [r7, #24]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00d      	beq.n	801274e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012732:	8bbb      	ldrh	r3, [r7, #28]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d10e      	bne.n	8012756 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6a1b      	ldr	r3, [r3, #32]
 801273c:	699b      	ldr	r3, [r3, #24]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d102      	bne.n	8012748 <lwip_netconn_do_writemore+0x134>
 8012742:	f06f 0306 	mvn.w	r3, #6
 8012746:	e000      	b.n	801274a <lwip_netconn_do_writemore+0x136>
 8012748:	2300      	movs	r3, #0
 801274a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801274c:	e07d      	b.n	801284a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801274e:	7ebb      	ldrb	r3, [r7, #26]
 8012750:	f043 0302 	orr.w	r3, r3, #2
 8012754:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6a1b      	ldr	r3, [r3, #32]
 801275a:	691a      	ldr	r2, [r3, #16]
 801275c:	8bbb      	ldrh	r3, [r7, #28]
 801275e:	441a      	add	r2, r3
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6a1b      	ldr	r3, [r3, #32]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	429a      	cmp	r2, r3
 801276a:	d906      	bls.n	801277a <lwip_netconn_do_writemore+0x166>
 801276c:	4b45      	ldr	r3, [pc, #276]	; (8012884 <lwip_netconn_do_writemore+0x270>)
 801276e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8012772:	494c      	ldr	r1, [pc, #304]	; (80128a4 <lwip_netconn_do_writemore+0x290>)
 8012774:	4845      	ldr	r0, [pc, #276]	; (801288c <lwip_netconn_do_writemore+0x278>)
 8012776:	f00c fd59 	bl	801f22c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801277a:	8bbb      	ldrh	r3, [r7, #28]
 801277c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012780:	4293      	cmp	r3, r2
 8012782:	d103      	bne.n	801278c <lwip_netconn_do_writemore+0x178>
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801278a:	d209      	bcs.n	80127a0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012790:	8bba      	ldrh	r2, [r7, #28]
 8012792:	429a      	cmp	r2, r3
 8012794:	d10b      	bne.n	80127ae <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a1b      	ldr	r3, [r3, #32]
 801279a:	899b      	ldrh	r3, [r3, #12]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d906      	bls.n	80127ae <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80127a0:	2301      	movs	r3, #1
 80127a2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80127a4:	7ebb      	ldrb	r3, [r7, #26]
 80127a6:	f043 0302 	orr.w	r3, r3, #2
 80127aa:	76bb      	strb	r3, [r7, #26]
 80127ac:	e001      	b.n	80127b2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80127ae:	2300      	movs	r3, #0
 80127b0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6858      	ldr	r0, [r3, #4]
 80127b6:	7ebb      	ldrb	r3, [r7, #26]
 80127b8:	8bba      	ldrh	r2, [r7, #28]
 80127ba:	6979      	ldr	r1, [r7, #20]
 80127bc:	f006 fc4c 	bl	8019058 <tcp_write>
 80127c0:	4603      	mov	r3, r0
 80127c2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80127c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d12c      	bne.n	8012826 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6a1b      	ldr	r3, [r3, #32]
 80127d0:	6999      	ldr	r1, [r3, #24]
 80127d2:	8bba      	ldrh	r2, [r7, #28]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6a1b      	ldr	r3, [r3, #32]
 80127d8:	440a      	add	r2, r1
 80127da:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6a1b      	ldr	r3, [r3, #32]
 80127e0:	6919      	ldr	r1, [r3, #16]
 80127e2:	8bba      	ldrh	r2, [r7, #28]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6a1b      	ldr	r3, [r3, #32]
 80127e8:	440a      	add	r2, r1
 80127ea:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6a1b      	ldr	r3, [r3, #32]
 80127f0:	691a      	ldr	r2, [r3, #16]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6a1b      	ldr	r3, [r3, #32]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d113      	bne.n	8012826 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6a1b      	ldr	r3, [r3, #32]
 8012802:	899a      	ldrh	r2, [r3, #12]
 8012804:	3a01      	subs	r2, #1
 8012806:	b292      	uxth	r2, r2
 8012808:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6a1b      	ldr	r3, [r3, #32]
 801280e:	899b      	ldrh	r3, [r3, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d008      	beq.n	8012826 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6a1b      	ldr	r3, [r3, #32]
 8012818:	689a      	ldr	r2, [r3, #8]
 801281a:	3208      	adds	r2, #8
 801281c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a1b      	ldr	r3, [r3, #32]
 8012822:	2200      	movs	r2, #0
 8012824:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012826:	7e7b      	ldrb	r3, [r7, #25]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d004      	beq.n	8012836 <lwip_netconn_do_writemore+0x222>
 801282c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012830:	2b00      	cmp	r3, #0
 8012832:	f43f af50 	beq.w	80126d6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d004      	beq.n	8012848 <lwip_netconn_do_writemore+0x234>
 801283e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012846:	d146      	bne.n	80128d6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012848:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801284a:	7e3b      	ldrb	r3, [r7, #24]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d02b      	beq.n	80128a8 <lwip_netconn_do_writemore+0x294>
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6a1b      	ldr	r3, [r3, #32]
 8012854:	699a      	ldr	r2, [r3, #24]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a1b      	ldr	r3, [r3, #32]
 801285a:	695b      	ldr	r3, [r3, #20]
 801285c:	429a      	cmp	r2, r3
 801285e:	d223      	bcs.n	80128a8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012864:	2b00      	cmp	r3, #0
 8012866:	d005      	beq.n	8012874 <lwip_netconn_do_writemore+0x260>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286c:	2200      	movs	r2, #0
 801286e:	2103      	movs	r1, #3
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	7f1b      	ldrb	r3, [r3, #28]
 8012878:	f043 0310 	orr.w	r3, r3, #16
 801287c:	b2da      	uxtb	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	771a      	strb	r2, [r3, #28]
 8012882:	e028      	b.n	80128d6 <lwip_netconn_do_writemore+0x2c2>
 8012884:	08023b30 	.word	0x08023b30
 8012888:	08023c88 	.word	0x08023c88
 801288c:	08023b74 	.word	0x08023b74
 8012890:	08023f90 	.word	0x08023f90
 8012894:	08023c98 	.word	0x08023c98
 8012898:	08023fb0 	.word	0x08023fb0
 801289c:	08023fc8 	.word	0x08023fc8
 80128a0:	08024008 	.word	0x08024008
 80128a4:	08024030 	.word	0x08024030
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128b0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80128b4:	d305      	bcc.n	80128c2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80128be:	2b04      	cmp	r3, #4
 80128c0:	d909      	bls.n	80128d6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d005      	beq.n	80128d6 <lwip_netconn_do_writemore+0x2c2>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ce:	2200      	movs	r2, #0
 80128d0:	2103      	movs	r1, #3
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80128d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d11d      	bne.n	801291a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6a1b      	ldr	r3, [r3, #32]
 80128e2:	699a      	ldr	r2, [r3, #24]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6a1b      	ldr	r3, [r3, #32]
 80128e8:	695b      	ldr	r3, [r3, #20]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d002      	beq.n	80128f4 <lwip_netconn_do_writemore+0x2e0>
 80128ee:	7e3b      	ldrb	r3, [r7, #24]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80128f4:	2301      	movs	r3, #1
 80128f6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f007 f995 	bl	8019c2c <tcp_output>
 8012902:	4603      	mov	r3, r0
 8012904:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012906:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801290a:	f113 0f04 	cmn.w	r3, #4
 801290e:	d12c      	bne.n	801296a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012910:	7b3b      	ldrb	r3, [r7, #12]
 8012912:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012914:	2301      	movs	r3, #1
 8012916:	76fb      	strb	r3, [r7, #27]
 8012918:	e027      	b.n	801296a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801291a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012922:	d120      	bne.n	8012966 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	4618      	mov	r0, r3
 801292a:	f007 f97f 	bl	8019c2c <tcp_output>
 801292e:	4603      	mov	r3, r0
 8012930:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012932:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012936:	f113 0f04 	cmn.w	r3, #4
 801293a:	d104      	bne.n	8012946 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801293c:	7b7b      	ldrb	r3, [r7, #13]
 801293e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012940:	2301      	movs	r3, #1
 8012942:	76fb      	strb	r3, [r7, #27]
 8012944:	e011      	b.n	801296a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012946:	7e3b      	ldrb	r3, [r7, #24]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d00e      	beq.n	801296a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6a1b      	ldr	r3, [r3, #32]
 8012950:	699b      	ldr	r3, [r3, #24]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d102      	bne.n	801295c <lwip_netconn_do_writemore+0x348>
 8012956:	f06f 0306 	mvn.w	r3, #6
 801295a:	e000      	b.n	801295e <lwip_netconn_do_writemore+0x34a>
 801295c:	2300      	movs	r3, #0
 801295e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012960:	2301      	movs	r3, #1
 8012962:	76fb      	strb	r3, [r7, #27]
 8012964:	e001      	b.n	801296a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012966:	2301      	movs	r3, #1
 8012968:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801296a:	7efb      	ldrb	r3, [r7, #27]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d015      	beq.n	801299c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6a1b      	ldr	r3, [r3, #32]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	330c      	adds	r3, #12
 8012978:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6a1b      	ldr	r3, [r3, #32]
 801297e:	7ffa      	ldrb	r2, [r7, #31]
 8012980:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2200      	movs	r2, #0
 8012986:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801298e:	78fb      	ldrb	r3, [r7, #3]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d006      	beq.n	80129a2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012994:	68b8      	ldr	r0, [r7, #8]
 8012996:	f00b fb03 	bl	801dfa0 <sys_sem_signal>
 801299a:	e002      	b.n	80129a2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801299c:	f04f 33ff 	mov.w	r3, #4294967295
 80129a0:	e000      	b.n	80129a4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3720      	adds	r7, #32
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	785b      	ldrb	r3, [r3, #1]
 80129be:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d069      	beq.n	8012a9e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80129d4:	2b10      	cmp	r3, #16
 80129d6:	d162      	bne.n	8012a9e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80129dc:	2b03      	cmp	r3, #3
 80129de:	d002      	beq.n	80129e6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80129e0:	7afb      	ldrb	r3, [r7, #11]
 80129e2:	2b02      	cmp	r3, #2
 80129e4:	d05b      	beq.n	8012a9e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80129e6:	7afb      	ldrb	r3, [r7, #11]
 80129e8:	2b03      	cmp	r3, #3
 80129ea:	d103      	bne.n	80129f4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	22f5      	movs	r2, #245	; 0xf5
 80129f0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80129f2:	e059      	b.n	8012aa8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80129f4:	7afb      	ldrb	r3, [r7, #11]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d103      	bne.n	8012a02 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	22fb      	movs	r2, #251	; 0xfb
 80129fe:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012a00:	e052      	b.n	8012aa8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	7a1b      	ldrb	r3, [r3, #8]
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d004      	beq.n	8012a18 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7ff fa7a 	bl	8011f0c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	6a1b      	ldr	r3, [r3, #32]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d006      	beq.n	8012a30 <lwip_netconn_do_close+0x84>
 8012a22:	4b23      	ldr	r3, [pc, #140]	; (8012ab0 <lwip_netconn_do_close+0x104>)
 8012a24:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8012a28:	4922      	ldr	r1, [pc, #136]	; (8012ab4 <lwip_netconn_do_close+0x108>)
 8012a2a:	4823      	ldr	r0, [pc, #140]	; (8012ab8 <lwip_netconn_do_close+0x10c>)
 8012a2c:	f00c fbfe 	bl	801f22c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2204      	movs	r2, #4
 8012a36:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2100      	movs	r1, #0
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7ff fade 	bl	8012008 <lwip_netconn_do_close_internal>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d029      	beq.n	8012aa6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	785b      	ldrb	r3, [r3, #1]
 8012a58:	2b04      	cmp	r3, #4
 8012a5a:	d006      	beq.n	8012a6a <lwip_netconn_do_close+0xbe>
 8012a5c:	4b14      	ldr	r3, [pc, #80]	; (8012ab0 <lwip_netconn_do_close+0x104>)
 8012a5e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8012a62:	4916      	ldr	r1, [pc, #88]	; (8012abc <lwip_netconn_do_close+0x110>)
 8012a64:	4814      	ldr	r0, [pc, #80]	; (8012ab8 <lwip_netconn_do_close+0x10c>)
 8012a66:	f00c fbe1 	bl	801f22c <iprintf>
        UNLOCK_TCPIP_CORE();
 8012a6a:	4815      	ldr	r0, [pc, #84]	; (8012ac0 <lwip_netconn_do_close+0x114>)
 8012a6c:	f00b fb09 	bl	801e082 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	330c      	adds	r3, #12
 8012a76:	2100      	movs	r1, #0
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f00b fa60 	bl	801df3e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012a7e:	4810      	ldr	r0, [pc, #64]	; (8012ac0 <lwip_netconn_do_close+0x114>)
 8012a80:	f00b faf0 	bl	801e064 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	785b      	ldrb	r3, [r3, #1]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d00b      	beq.n	8012aa6 <lwip_netconn_do_close+0xfa>
 8012a8e:	4b08      	ldr	r3, [pc, #32]	; (8012ab0 <lwip_netconn_do_close+0x104>)
 8012a90:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8012a94:	4909      	ldr	r1, [pc, #36]	; (8012abc <lwip_netconn_do_close+0x110>)
 8012a96:	4808      	ldr	r0, [pc, #32]	; (8012ab8 <lwip_netconn_do_close+0x10c>)
 8012a98:	f00c fbc8 	bl	801f22c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012a9c:	e003      	b.n	8012aa6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	22f5      	movs	r2, #245	; 0xf5
 8012aa2:	711a      	strb	r2, [r3, #4]
 8012aa4:	e000      	b.n	8012aa8 <lwip_netconn_do_close+0xfc>
      return;
 8012aa6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012aa8:	3710      	adds	r7, #16
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	08023b30 	.word	0x08023b30
 8012ab4:	08023ed4 	.word	0x08023ed4
 8012ab8:	08023b74 	.word	0x08023b74
 8012abc:	08023ef0 	.word	0x08023ef0
 8012ac0:	2000aa58 	.word	0x2000aa58

08012ac4 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012aca:	2006      	movs	r0, #6
 8012acc:	f000 ff30 	bl	8013930 <memp_malloc>
 8012ad0:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d004      	beq.n	8012ae2 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012ad8:	2210      	movs	r2, #16
 8012ada:	2100      	movs	r1, #0
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f00b fc79 	bl	801e3d4 <memset>
  }
  return buf;
 8012ae2:	687b      	ldr	r3, [r7, #4]
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3708      	adds	r7, #8
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d013      	beq.n	8012b22 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d00b      	beq.n	8012b1a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	4618      	mov	r0, r3
 8012b08:	f001 fda4 	bl	8014654 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	605a      	str	r2, [r3, #4]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685a      	ldr	r2, [r3, #4]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	2006      	movs	r0, #6
 8012b1e:	f000 ff59 	bl	80139d4 <memp_free>
  }
}
 8012b22:	bf00      	nop
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
	...

08012b2c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	4613      	mov	r3, r2
 8012b38:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d108      	bne.n	8012b52 <netbuf_ref+0x26>
 8012b40:	4b1c      	ldr	r3, [pc, #112]	; (8012bb4 <netbuf_ref+0x88>)
 8012b42:	2299      	movs	r2, #153	; 0x99
 8012b44:	491c      	ldr	r1, [pc, #112]	; (8012bb8 <netbuf_ref+0x8c>)
 8012b46:	481d      	ldr	r0, [pc, #116]	; (8012bbc <netbuf_ref+0x90>)
 8012b48:	f00c fb70 	bl	801f22c <iprintf>
 8012b4c:	f06f 030f 	mvn.w	r3, #15
 8012b50:	e02b      	b.n	8012baa <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d004      	beq.n	8012b64 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f001 fd78 	bl	8014654 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012b64:	2241      	movs	r2, #65	; 0x41
 8012b66:	2100      	movs	r1, #0
 8012b68:	2036      	movs	r0, #54	; 0x36
 8012b6a:	f001 fa8f 	bl	801408c <pbuf_alloc>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d105      	bne.n	8012b88 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012b82:	f04f 33ff 	mov.w	r3, #4294967295
 8012b86:	e010      	b.n	8012baa <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	68ba      	ldr	r2, [r7, #8]
 8012b8e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	88fa      	ldrh	r2, [r7, #6]
 8012b96:	811a      	strh	r2, [r3, #8]
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	6812      	ldr	r2, [r2, #0]
 8012b9c:	891b      	ldrh	r3, [r3, #8]
 8012b9e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8012ba8:	2300      	movs	r3, #0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3710      	adds	r7, #16
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	08024088 	.word	0x08024088
 8012bb8:	08024140 	.word	0x08024140
 8012bbc:	080240d8 	.word	0x080240d8

08012bc0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d108      	bne.n	8012be4 <netbuf_data+0x24>
 8012bd2:	4b1b      	ldr	r3, [pc, #108]	; (8012c40 <netbuf_data+0x80>)
 8012bd4:	22c6      	movs	r2, #198	; 0xc6
 8012bd6:	491b      	ldr	r1, [pc, #108]	; (8012c44 <netbuf_data+0x84>)
 8012bd8:	481b      	ldr	r0, [pc, #108]	; (8012c48 <netbuf_data+0x88>)
 8012bda:	f00c fb27 	bl	801f22c <iprintf>
 8012bde:	f06f 030f 	mvn.w	r3, #15
 8012be2:	e029      	b.n	8012c38 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d108      	bne.n	8012bfc <netbuf_data+0x3c>
 8012bea:	4b15      	ldr	r3, [pc, #84]	; (8012c40 <netbuf_data+0x80>)
 8012bec:	22c7      	movs	r2, #199	; 0xc7
 8012bee:	4917      	ldr	r1, [pc, #92]	; (8012c4c <netbuf_data+0x8c>)
 8012bf0:	4815      	ldr	r0, [pc, #84]	; (8012c48 <netbuf_data+0x88>)
 8012bf2:	f00c fb1b 	bl	801f22c <iprintf>
 8012bf6:	f06f 030f 	mvn.w	r3, #15
 8012bfa:	e01d      	b.n	8012c38 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d108      	bne.n	8012c14 <netbuf_data+0x54>
 8012c02:	4b0f      	ldr	r3, [pc, #60]	; (8012c40 <netbuf_data+0x80>)
 8012c04:	22c8      	movs	r2, #200	; 0xc8
 8012c06:	4912      	ldr	r1, [pc, #72]	; (8012c50 <netbuf_data+0x90>)
 8012c08:	480f      	ldr	r0, [pc, #60]	; (8012c48 <netbuf_data+0x88>)
 8012c0a:	f00c fb0f 	bl	801f22c <iprintf>
 8012c0e:	f06f 030f 	mvn.w	r3, #15
 8012c12:	e011      	b.n	8012c38 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d102      	bne.n	8012c22 <netbuf_data+0x62>
    return ERR_BUF;
 8012c1c:	f06f 0301 	mvn.w	r3, #1
 8012c20:	e00a      	b.n	8012c38 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	685a      	ldr	r2, [r3, #4]
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	895a      	ldrh	r2, [r3, #10]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012c36:	2300      	movs	r3, #0
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3710      	adds	r7, #16
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	08024088 	.word	0x08024088
 8012c44:	08024190 	.word	0x08024190
 8012c48:	080240d8 	.word	0x080240d8
 8012c4c:	080241ac 	.word	0x080241ac
 8012c50:	080241cc 	.word	0x080241cc

08012c54 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012c5e:	f008 f89d 	bl	801ad9c <sys_timeouts_sleeptime>
 8012c62:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c6a:	d10b      	bne.n	8012c84 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012c6c:	4813      	ldr	r0, [pc, #76]	; (8012cbc <tcpip_timeouts_mbox_fetch+0x68>)
 8012c6e:	f00b fa08 	bl	801e082 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012c72:	2200      	movs	r2, #0
 8012c74:	6839      	ldr	r1, [r7, #0]
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f00b f8c0 	bl	801ddfc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012c7c:	480f      	ldr	r0, [pc, #60]	; (8012cbc <tcpip_timeouts_mbox_fetch+0x68>)
 8012c7e:	f00b f9f1 	bl	801e064 <sys_mutex_lock>
    return;
 8012c82:	e018      	b.n	8012cb6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d102      	bne.n	8012c90 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012c8a:	f008 f84d 	bl	801ad28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012c8e:	e7e6      	b.n	8012c5e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012c90:	480a      	ldr	r0, [pc, #40]	; (8012cbc <tcpip_timeouts_mbox_fetch+0x68>)
 8012c92:	f00b f9f6 	bl	801e082 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f00b f8ae 	bl	801ddfc <sys_arch_mbox_fetch>
 8012ca0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012ca2:	4806      	ldr	r0, [pc, #24]	; (8012cbc <tcpip_timeouts_mbox_fetch+0x68>)
 8012ca4:	f00b f9de 	bl	801e064 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cae:	d102      	bne.n	8012cb6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012cb0:	f008 f83a 	bl	801ad28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012cb4:	e7d3      	b.n	8012c5e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	2000aa58 	.word	0x2000aa58

08012cc0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012cc8:	4810      	ldr	r0, [pc, #64]	; (8012d0c <tcpip_thread+0x4c>)
 8012cca:	f00b f9cb 	bl	801e064 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012cce:	4b10      	ldr	r3, [pc, #64]	; (8012d10 <tcpip_thread+0x50>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d005      	beq.n	8012ce2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012cd6:	4b0e      	ldr	r3, [pc, #56]	; (8012d10 <tcpip_thread+0x50>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a0e      	ldr	r2, [pc, #56]	; (8012d14 <tcpip_thread+0x54>)
 8012cdc:	6812      	ldr	r2, [r2, #0]
 8012cde:	4610      	mov	r0, r2
 8012ce0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012ce2:	f107 030c 	add.w	r3, r7, #12
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	480b      	ldr	r0, [pc, #44]	; (8012d18 <tcpip_thread+0x58>)
 8012cea:	f7ff ffb3 	bl	8012c54 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d106      	bne.n	8012d02 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012cf4:	4b09      	ldr	r3, [pc, #36]	; (8012d1c <tcpip_thread+0x5c>)
 8012cf6:	2291      	movs	r2, #145	; 0x91
 8012cf8:	4909      	ldr	r1, [pc, #36]	; (8012d20 <tcpip_thread+0x60>)
 8012cfa:	480a      	ldr	r0, [pc, #40]	; (8012d24 <tcpip_thread+0x64>)
 8012cfc:	f00c fa96 	bl	801f22c <iprintf>
      continue;
 8012d00:	e003      	b.n	8012d0a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f000 f80f 	bl	8012d28 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012d0a:	e7ea      	b.n	8012ce2 <tcpip_thread+0x22>
 8012d0c:	2000aa58 	.word	0x2000aa58
 8012d10:	20006dc0 	.word	0x20006dc0
 8012d14:	20006dc4 	.word	0x20006dc4
 8012d18:	20006dc8 	.word	0x20006dc8
 8012d1c:	08024220 	.word	0x08024220
 8012d20:	08024250 	.word	0x08024250
 8012d24:	08024270 	.word	0x08024270

08012d28 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d026      	beq.n	8012d86 <tcpip_thread_handle_msg+0x5e>
 8012d38:	2b02      	cmp	r3, #2
 8012d3a:	dc2b      	bgt.n	8012d94 <tcpip_thread_handle_msg+0x6c>
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <tcpip_thread_handle_msg+0x1e>
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d015      	beq.n	8012d70 <tcpip_thread_handle_msg+0x48>
 8012d44:	e026      	b.n	8012d94 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	6850      	ldr	r0, [r2, #4]
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	6892      	ldr	r2, [r2, #8]
 8012d52:	4611      	mov	r1, r2
 8012d54:	4798      	blx	r3
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d004      	beq.n	8012d66 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	f001 fc77 	bl	8014654 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012d66:	6879      	ldr	r1, [r7, #4]
 8012d68:	2009      	movs	r0, #9
 8012d6a:	f000 fe33 	bl	80139d4 <memp_free>
      break;
 8012d6e:	e018      	b.n	8012da2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	6892      	ldr	r2, [r2, #8]
 8012d78:	4610      	mov	r0, r2
 8012d7a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012d7c:	6879      	ldr	r1, [r7, #4]
 8012d7e:	2008      	movs	r0, #8
 8012d80:	f000 fe28 	bl	80139d4 <memp_free>
      break;
 8012d84:	e00d      	b.n	8012da2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	6892      	ldr	r2, [r2, #8]
 8012d8e:	4610      	mov	r0, r2
 8012d90:	4798      	blx	r3
      break;
 8012d92:	e006      	b.n	8012da2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012d94:	4b05      	ldr	r3, [pc, #20]	; (8012dac <tcpip_thread_handle_msg+0x84>)
 8012d96:	22cf      	movs	r2, #207	; 0xcf
 8012d98:	4905      	ldr	r1, [pc, #20]	; (8012db0 <tcpip_thread_handle_msg+0x88>)
 8012d9a:	4806      	ldr	r0, [pc, #24]	; (8012db4 <tcpip_thread_handle_msg+0x8c>)
 8012d9c:	f00c fa46 	bl	801f22c <iprintf>
      break;
 8012da0:	bf00      	nop
  }
}
 8012da2:	bf00      	nop
 8012da4:	3708      	adds	r7, #8
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	08024220 	.word	0x08024220
 8012db0:	08024250 	.word	0x08024250
 8012db4:	08024270 	.word	0x08024270

08012db8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012dc4:	481a      	ldr	r0, [pc, #104]	; (8012e30 <tcpip_inpkt+0x78>)
 8012dc6:	f00b f874 	bl	801deb2 <sys_mbox_valid>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d105      	bne.n	8012ddc <tcpip_inpkt+0x24>
 8012dd0:	4b18      	ldr	r3, [pc, #96]	; (8012e34 <tcpip_inpkt+0x7c>)
 8012dd2:	22fc      	movs	r2, #252	; 0xfc
 8012dd4:	4918      	ldr	r1, [pc, #96]	; (8012e38 <tcpip_inpkt+0x80>)
 8012dd6:	4819      	ldr	r0, [pc, #100]	; (8012e3c <tcpip_inpkt+0x84>)
 8012dd8:	f00c fa28 	bl	801f22c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012ddc:	2009      	movs	r0, #9
 8012dde:	f000 fda7 	bl	8013930 <memp_malloc>
 8012de2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012de4:	697b      	ldr	r3, [r7, #20]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d102      	bne.n	8012df0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012dea:	f04f 33ff 	mov.w	r3, #4294967295
 8012dee:	e01a      	b.n	8012e26 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	2200      	movs	r2, #0
 8012df4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	68ba      	ldr	r2, [r7, #8]
 8012e00:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012e08:	6979      	ldr	r1, [r7, #20]
 8012e0a:	4809      	ldr	r0, [pc, #36]	; (8012e30 <tcpip_inpkt+0x78>)
 8012e0c:	f00a ffdc 	bl	801ddc8 <sys_mbox_trypost>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d006      	beq.n	8012e24 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012e16:	6979      	ldr	r1, [r7, #20]
 8012e18:	2009      	movs	r0, #9
 8012e1a:	f000 fddb 	bl	80139d4 <memp_free>
    return ERR_MEM;
 8012e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e22:	e000      	b.n	8012e26 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012e24:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	20006dc8 	.word	0x20006dc8
 8012e34:	08024220 	.word	0x08024220
 8012e38:	08024298 	.word	0x08024298
 8012e3c:	08024270 	.word	0x08024270

08012e40 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e50:	f003 0318 	and.w	r3, r3, #24
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d006      	beq.n	8012e66 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012e58:	4a08      	ldr	r2, [pc, #32]	; (8012e7c <tcpip_input+0x3c>)
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff ffab 	bl	8012db8 <tcpip_inpkt>
 8012e62:	4603      	mov	r3, r0
 8012e64:	e005      	b.n	8012e72 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012e66:	4a06      	ldr	r2, [pc, #24]	; (8012e80 <tcpip_input+0x40>)
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7ff ffa4 	bl	8012db8 <tcpip_inpkt>
 8012e70:	4603      	mov	r3, r0
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3708      	adds	r7, #8
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	0801dbb5 	.word	0x0801dbb5
 8012e80:	0801cac9 	.word	0x0801cac9

08012e84 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012e8e:	4819      	ldr	r0, [pc, #100]	; (8012ef4 <tcpip_try_callback+0x70>)
 8012e90:	f00b f80f 	bl	801deb2 <sys_mbox_valid>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d106      	bne.n	8012ea8 <tcpip_try_callback+0x24>
 8012e9a:	4b17      	ldr	r3, [pc, #92]	; (8012ef8 <tcpip_try_callback+0x74>)
 8012e9c:	f240 125d 	movw	r2, #349	; 0x15d
 8012ea0:	4916      	ldr	r1, [pc, #88]	; (8012efc <tcpip_try_callback+0x78>)
 8012ea2:	4817      	ldr	r0, [pc, #92]	; (8012f00 <tcpip_try_callback+0x7c>)
 8012ea4:	f00c f9c2 	bl	801f22c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012ea8:	2008      	movs	r0, #8
 8012eaa:	f000 fd41 	bl	8013930 <memp_malloc>
 8012eae:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d102      	bne.n	8012ebc <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8012eba:	e017      	b.n	8012eec <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012ece:	68f9      	ldr	r1, [r7, #12]
 8012ed0:	4808      	ldr	r0, [pc, #32]	; (8012ef4 <tcpip_try_callback+0x70>)
 8012ed2:	f00a ff79 	bl	801ddc8 <sys_mbox_trypost>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d006      	beq.n	8012eea <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012edc:	68f9      	ldr	r1, [r7, #12]
 8012ede:	2008      	movs	r0, #8
 8012ee0:	f000 fd78 	bl	80139d4 <memp_free>
    return ERR_MEM;
 8012ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee8:	e000      	b.n	8012eec <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012eea:	2300      	movs	r3, #0
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3710      	adds	r7, #16
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	20006dc8 	.word	0x20006dc8
 8012ef8:	08024220 	.word	0x08024220
 8012efc:	08024298 	.word	0x08024298
 8012f00:	08024270 	.word	0x08024270

08012f04 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012f10:	4806      	ldr	r0, [pc, #24]	; (8012f2c <tcpip_send_msg_wait_sem+0x28>)
 8012f12:	f00b f8a7 	bl	801e064 <sys_mutex_lock>
  fn(apimsg);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	68b8      	ldr	r0, [r7, #8]
 8012f1a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012f1c:	4803      	ldr	r0, [pc, #12]	; (8012f2c <tcpip_send_msg_wait_sem+0x28>)
 8012f1e:	f00b f8b0 	bl	801e082 <sys_mutex_unlock>
  return ERR_OK;
 8012f22:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3710      	adds	r7, #16
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	2000aa58 	.word	0x2000aa58

08012f30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af02      	add	r7, sp, #8
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012f3a:	f000 f871 	bl	8013020 <lwip_init>

  tcpip_init_done = initfunc;
 8012f3e:	4a17      	ldr	r2, [pc, #92]	; (8012f9c <tcpip_init+0x6c>)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012f44:	4a16      	ldr	r2, [pc, #88]	; (8012fa0 <tcpip_init+0x70>)
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012f4a:	2106      	movs	r1, #6
 8012f4c:	4815      	ldr	r0, [pc, #84]	; (8012fa4 <tcpip_init+0x74>)
 8012f4e:	f00a ff07 	bl	801dd60 <sys_mbox_new>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d006      	beq.n	8012f66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012f58:	4b13      	ldr	r3, [pc, #76]	; (8012fa8 <tcpip_init+0x78>)
 8012f5a:	f240 2261 	movw	r2, #609	; 0x261
 8012f5e:	4913      	ldr	r1, [pc, #76]	; (8012fac <tcpip_init+0x7c>)
 8012f60:	4813      	ldr	r0, [pc, #76]	; (8012fb0 <tcpip_init+0x80>)
 8012f62:	f00c f963 	bl	801f22c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012f66:	4813      	ldr	r0, [pc, #76]	; (8012fb4 <tcpip_init+0x84>)
 8012f68:	f00b f860 	bl	801e02c <sys_mutex_new>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d006      	beq.n	8012f80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012f72:	4b0d      	ldr	r3, [pc, #52]	; (8012fa8 <tcpip_init+0x78>)
 8012f74:	f240 2265 	movw	r2, #613	; 0x265
 8012f78:	490f      	ldr	r1, [pc, #60]	; (8012fb8 <tcpip_init+0x88>)
 8012f7a:	480d      	ldr	r0, [pc, #52]	; (8012fb0 <tcpip_init+0x80>)
 8012f7c:	f00c f956 	bl	801f22c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012f80:	2300      	movs	r3, #0
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f88:	2200      	movs	r2, #0
 8012f8a:	490c      	ldr	r1, [pc, #48]	; (8012fbc <tcpip_init+0x8c>)
 8012f8c:	480c      	ldr	r0, [pc, #48]	; (8012fc0 <tcpip_init+0x90>)
 8012f8e:	f00b f885 	bl	801e09c <sys_thread_new>
}
 8012f92:	bf00      	nop
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	20006dc0 	.word	0x20006dc0
 8012fa0:	20006dc4 	.word	0x20006dc4
 8012fa4:	20006dc8 	.word	0x20006dc8
 8012fa8:	08024220 	.word	0x08024220
 8012fac:	080242a8 	.word	0x080242a8
 8012fb0:	08024270 	.word	0x08024270
 8012fb4:	2000aa58 	.word	0x2000aa58
 8012fb8:	080242cc 	.word	0x080242cc
 8012fbc:	08012cc1 	.word	0x08012cc1
 8012fc0:	080242f0 	.word	0x080242f0

08012fc4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012fce:	88fb      	ldrh	r3, [r7, #6]
 8012fd0:	021b      	lsls	r3, r3, #8
 8012fd2:	b21a      	sxth	r2, r3
 8012fd4:	88fb      	ldrh	r3, [r7, #6]
 8012fd6:	0a1b      	lsrs	r3, r3, #8
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	b21b      	sxth	r3, r3
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	b21b      	sxth	r3, r3
 8012fe0:	b29b      	uxth	r3, r3
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	370c      	adds	r7, #12
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr

08012fee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012fee:	b480      	push	{r7}
 8012ff0:	b083      	sub	sp, #12
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	061a      	lsls	r2, r3, #24
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	021b      	lsls	r3, r3, #8
 8012ffe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013002:	431a      	orrs	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	0a1b      	lsrs	r3, r3, #8
 8013008:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801300c:	431a      	orrs	r2, r3
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	0e1b      	lsrs	r3, r3, #24
 8013012:	4313      	orrs	r3, r2
}
 8013014:	4618      	mov	r0, r3
 8013016:	370c      	adds	r7, #12
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr

08013020 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013026:	2300      	movs	r3, #0
 8013028:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801302a:	f00a fff1 	bl	801e010 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801302e:	f000 f8d5 	bl	80131dc <mem_init>
  memp_init();
 8013032:	f000 fc31 	bl	8013898 <memp_init>
  pbuf_init();
  netif_init();
 8013036:	f000 fcf7 	bl	8013a28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801303a:	f007 fee7 	bl	801ae0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801303e:	f001 fdb3 	bl	8014ba8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013042:	f007 fe29 	bl	801ac98 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013046:	bf00      	nop
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
	...

08013050 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	4603      	mov	r3, r0
 8013058:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801305a:	4b05      	ldr	r3, [pc, #20]	; (8013070 <ptr_to_mem+0x20>)
 801305c:	681a      	ldr	r2, [r3, #0]
 801305e:	88fb      	ldrh	r3, [r7, #6]
 8013060:	4413      	add	r3, r2
}
 8013062:	4618      	mov	r0, r3
 8013064:	370c      	adds	r7, #12
 8013066:	46bd      	mov	sp, r7
 8013068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306c:	4770      	bx	lr
 801306e:	bf00      	nop
 8013070:	20006dcc 	.word	0x20006dcc

08013074 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801307c:	4b05      	ldr	r3, [pc, #20]	; (8013094 <mem_to_ptr+0x20>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	b29b      	uxth	r3, r3
}
 8013086:	4618      	mov	r0, r3
 8013088:	370c      	adds	r7, #12
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	20006dcc 	.word	0x20006dcc

08013098 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8013098:	b590      	push	{r4, r7, lr}
 801309a:	b085      	sub	sp, #20
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80130a0:	4b45      	ldr	r3, [pc, #276]	; (80131b8 <plug_holes+0x120>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d206      	bcs.n	80130b8 <plug_holes+0x20>
 80130aa:	4b44      	ldr	r3, [pc, #272]	; (80131bc <plug_holes+0x124>)
 80130ac:	f240 12df 	movw	r2, #479	; 0x1df
 80130b0:	4943      	ldr	r1, [pc, #268]	; (80131c0 <plug_holes+0x128>)
 80130b2:	4844      	ldr	r0, [pc, #272]	; (80131c4 <plug_holes+0x12c>)
 80130b4:	f00c f8ba 	bl	801f22c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80130b8:	4b43      	ldr	r3, [pc, #268]	; (80131c8 <plug_holes+0x130>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d306      	bcc.n	80130d0 <plug_holes+0x38>
 80130c2:	4b3e      	ldr	r3, [pc, #248]	; (80131bc <plug_holes+0x124>)
 80130c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80130c8:	4940      	ldr	r1, [pc, #256]	; (80131cc <plug_holes+0x134>)
 80130ca:	483e      	ldr	r0, [pc, #248]	; (80131c4 <plug_holes+0x12c>)
 80130cc:	f00c f8ae 	bl	801f22c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	791b      	ldrb	r3, [r3, #4]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d006      	beq.n	80130e6 <plug_holes+0x4e>
 80130d8:	4b38      	ldr	r3, [pc, #224]	; (80131bc <plug_holes+0x124>)
 80130da:	f240 12e1 	movw	r2, #481	; 0x1e1
 80130de:	493c      	ldr	r1, [pc, #240]	; (80131d0 <plug_holes+0x138>)
 80130e0:	4838      	ldr	r0, [pc, #224]	; (80131c4 <plug_holes+0x12c>)
 80130e2:	f00c f8a3 	bl	801f22c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	881b      	ldrh	r3, [r3, #0]
 80130ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80130ee:	d906      	bls.n	80130fe <plug_holes+0x66>
 80130f0:	4b32      	ldr	r3, [pc, #200]	; (80131bc <plug_holes+0x124>)
 80130f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80130f6:	4937      	ldr	r1, [pc, #220]	; (80131d4 <plug_holes+0x13c>)
 80130f8:	4832      	ldr	r0, [pc, #200]	; (80131c4 <plug_holes+0x12c>)
 80130fa:	f00c f897 	bl	801f22c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	4618      	mov	r0, r3
 8013104:	f7ff ffa4 	bl	8013050 <ptr_to_mem>
 8013108:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801310a:	687a      	ldr	r2, [r7, #4]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	429a      	cmp	r2, r3
 8013110:	d024      	beq.n	801315c <plug_holes+0xc4>
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	791b      	ldrb	r3, [r3, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d120      	bne.n	801315c <plug_holes+0xc4>
 801311a:	4b2b      	ldr	r3, [pc, #172]	; (80131c8 <plug_holes+0x130>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	68fa      	ldr	r2, [r7, #12]
 8013120:	429a      	cmp	r2, r3
 8013122:	d01b      	beq.n	801315c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013124:	4b2c      	ldr	r3, [pc, #176]	; (80131d8 <plug_holes+0x140>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	429a      	cmp	r2, r3
 801312c:	d102      	bne.n	8013134 <plug_holes+0x9c>
      lfree = mem;
 801312e:	4a2a      	ldr	r2, [pc, #168]	; (80131d8 <plug_holes+0x140>)
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	881a      	ldrh	r2, [r3, #0]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	881b      	ldrh	r3, [r3, #0]
 8013140:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013144:	d00a      	beq.n	801315c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	881b      	ldrh	r3, [r3, #0]
 801314a:	4618      	mov	r0, r3
 801314c:	f7ff ff80 	bl	8013050 <ptr_to_mem>
 8013150:	4604      	mov	r4, r0
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff ff8e 	bl	8013074 <mem_to_ptr>
 8013158:	4603      	mov	r3, r0
 801315a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	885b      	ldrh	r3, [r3, #2]
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff ff75 	bl	8013050 <ptr_to_mem>
 8013166:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	429a      	cmp	r2, r3
 801316e:	d01f      	beq.n	80131b0 <plug_holes+0x118>
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	791b      	ldrb	r3, [r3, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d11b      	bne.n	80131b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013178:	4b17      	ldr	r3, [pc, #92]	; (80131d8 <plug_holes+0x140>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	429a      	cmp	r2, r3
 8013180:	d102      	bne.n	8013188 <plug_holes+0xf0>
      lfree = pmem;
 8013182:	4a15      	ldr	r2, [pc, #84]	; (80131d8 <plug_holes+0x140>)
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	881a      	ldrh	r2, [r3, #0]
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	881b      	ldrh	r3, [r3, #0]
 8013194:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013198:	d00a      	beq.n	80131b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	881b      	ldrh	r3, [r3, #0]
 801319e:	4618      	mov	r0, r3
 80131a0:	f7ff ff56 	bl	8013050 <ptr_to_mem>
 80131a4:	4604      	mov	r4, r0
 80131a6:	68b8      	ldr	r0, [r7, #8]
 80131a8:	f7ff ff64 	bl	8013074 <mem_to_ptr>
 80131ac:	4603      	mov	r3, r0
 80131ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80131b0:	bf00      	nop
 80131b2:	3714      	adds	r7, #20
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd90      	pop	{r4, r7, pc}
 80131b8:	20006dcc 	.word	0x20006dcc
 80131bc:	08024300 	.word	0x08024300
 80131c0:	08024330 	.word	0x08024330
 80131c4:	08024348 	.word	0x08024348
 80131c8:	20006dd0 	.word	0x20006dd0
 80131cc:	08024370 	.word	0x08024370
 80131d0:	0802438c 	.word	0x0802438c
 80131d4:	080243a8 	.word	0x080243a8
 80131d8:	20006dd8 	.word	0x20006dd8

080131dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80131e2:	4b1f      	ldr	r3, [pc, #124]	; (8013260 <mem_init+0x84>)
 80131e4:	3303      	adds	r3, #3
 80131e6:	f023 0303 	bic.w	r3, r3, #3
 80131ea:	461a      	mov	r2, r3
 80131ec:	4b1d      	ldr	r3, [pc, #116]	; (8013264 <mem_init+0x88>)
 80131ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80131f0:	4b1c      	ldr	r3, [pc, #112]	; (8013264 <mem_init+0x88>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80131fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2200      	movs	r2, #0
 8013202:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801320a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801320e:	f7ff ff1f 	bl	8013050 <ptr_to_mem>
 8013212:	4603      	mov	r3, r0
 8013214:	4a14      	ldr	r2, [pc, #80]	; (8013268 <mem_init+0x8c>)
 8013216:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013218:	4b13      	ldr	r3, [pc, #76]	; (8013268 <mem_init+0x8c>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	2201      	movs	r2, #1
 801321e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013220:	4b11      	ldr	r3, [pc, #68]	; (8013268 <mem_init+0x8c>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013228:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801322a:	4b0f      	ldr	r3, [pc, #60]	; (8013268 <mem_init+0x8c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013232:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013234:	4b0b      	ldr	r3, [pc, #44]	; (8013264 <mem_init+0x88>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4a0c      	ldr	r2, [pc, #48]	; (801326c <mem_init+0x90>)
 801323a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801323c:	480c      	ldr	r0, [pc, #48]	; (8013270 <mem_init+0x94>)
 801323e:	f00a fef5 	bl	801e02c <sys_mutex_new>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d006      	beq.n	8013256 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <mem_init+0x98>)
 801324a:	f240 221f 	movw	r2, #543	; 0x21f
 801324e:	490a      	ldr	r1, [pc, #40]	; (8013278 <mem_init+0x9c>)
 8013250:	480a      	ldr	r0, [pc, #40]	; (801327c <mem_init+0xa0>)
 8013252:	f00b ffeb 	bl	801f22c <iprintf>
  }
}
 8013256:	bf00      	nop
 8013258:	3708      	adds	r7, #8
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	2000aa74 	.word	0x2000aa74
 8013264:	20006dcc 	.word	0x20006dcc
 8013268:	20006dd0 	.word	0x20006dd0
 801326c:	20006dd8 	.word	0x20006dd8
 8013270:	20006dd4 	.word	0x20006dd4
 8013274:	08024300 	.word	0x08024300
 8013278:	080243d4 	.word	0x080243d4
 801327c:	08024348 	.word	0x08024348

08013280 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b086      	sub	sp, #24
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ff fef3 	bl	8013074 <mem_to_ptr>
 801328e:	4603      	mov	r3, r0
 8013290:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff feda 	bl	8013050 <ptr_to_mem>
 801329c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	885b      	ldrh	r3, [r3, #2]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7ff fed4 	bl	8013050 <ptr_to_mem>
 80132a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	881b      	ldrh	r3, [r3, #0]
 80132ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80132b2:	d818      	bhi.n	80132e6 <mem_link_valid+0x66>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	885b      	ldrh	r3, [r3, #2]
 80132b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80132bc:	d813      	bhi.n	80132e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80132c2:	8afa      	ldrh	r2, [r7, #22]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d004      	beq.n	80132d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	881b      	ldrh	r3, [r3, #0]
 80132cc:	8afa      	ldrh	r2, [r7, #22]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d109      	bne.n	80132e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80132d2:	4b08      	ldr	r3, [pc, #32]	; (80132f4 <mem_link_valid+0x74>)
 80132d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80132d6:	693a      	ldr	r2, [r7, #16]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d006      	beq.n	80132ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	885b      	ldrh	r3, [r3, #2]
 80132e0:	8afa      	ldrh	r2, [r7, #22]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d001      	beq.n	80132ea <mem_link_valid+0x6a>
    return 0;
 80132e6:	2300      	movs	r3, #0
 80132e8:	e000      	b.n	80132ec <mem_link_valid+0x6c>
  }
  return 1;
 80132ea:	2301      	movs	r3, #1
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3718      	adds	r7, #24
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	20006dd0 	.word	0x20006dd0

080132f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b088      	sub	sp, #32
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d070      	beq.n	80133e8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f003 0303 	and.w	r3, r3, #3
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00d      	beq.n	801332c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013310:	4b37      	ldr	r3, [pc, #220]	; (80133f0 <mem_free+0xf8>)
 8013312:	f240 2273 	movw	r2, #627	; 0x273
 8013316:	4937      	ldr	r1, [pc, #220]	; (80133f4 <mem_free+0xfc>)
 8013318:	4837      	ldr	r0, [pc, #220]	; (80133f8 <mem_free+0x100>)
 801331a:	f00b ff87 	bl	801f22c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801331e:	f00a fee3 	bl	801e0e8 <sys_arch_protect>
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	68f8      	ldr	r0, [r7, #12]
 8013326:	f00a feed 	bl	801e104 <sys_arch_unprotect>
    return;
 801332a:	e05e      	b.n	80133ea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	3b08      	subs	r3, #8
 8013330:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013332:	4b32      	ldr	r3, [pc, #200]	; (80133fc <mem_free+0x104>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	69fa      	ldr	r2, [r7, #28]
 8013338:	429a      	cmp	r2, r3
 801333a:	d306      	bcc.n	801334a <mem_free+0x52>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f103 020c 	add.w	r2, r3, #12
 8013342:	4b2f      	ldr	r3, [pc, #188]	; (8013400 <mem_free+0x108>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	429a      	cmp	r2, r3
 8013348:	d90d      	bls.n	8013366 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801334a:	4b29      	ldr	r3, [pc, #164]	; (80133f0 <mem_free+0xf8>)
 801334c:	f240 227f 	movw	r2, #639	; 0x27f
 8013350:	492c      	ldr	r1, [pc, #176]	; (8013404 <mem_free+0x10c>)
 8013352:	4829      	ldr	r0, [pc, #164]	; (80133f8 <mem_free+0x100>)
 8013354:	f00b ff6a 	bl	801f22c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013358:	f00a fec6 	bl	801e0e8 <sys_arch_protect>
 801335c:	6138      	str	r0, [r7, #16]
 801335e:	6938      	ldr	r0, [r7, #16]
 8013360:	f00a fed0 	bl	801e104 <sys_arch_unprotect>
    return;
 8013364:	e041      	b.n	80133ea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013366:	4828      	ldr	r0, [pc, #160]	; (8013408 <mem_free+0x110>)
 8013368:	f00a fe7c 	bl	801e064 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	791b      	ldrb	r3, [r3, #4]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d110      	bne.n	8013396 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013374:	4b1e      	ldr	r3, [pc, #120]	; (80133f0 <mem_free+0xf8>)
 8013376:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801337a:	4924      	ldr	r1, [pc, #144]	; (801340c <mem_free+0x114>)
 801337c:	481e      	ldr	r0, [pc, #120]	; (80133f8 <mem_free+0x100>)
 801337e:	f00b ff55 	bl	801f22c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013382:	4821      	ldr	r0, [pc, #132]	; (8013408 <mem_free+0x110>)
 8013384:	f00a fe7d 	bl	801e082 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013388:	f00a feae 	bl	801e0e8 <sys_arch_protect>
 801338c:	6178      	str	r0, [r7, #20]
 801338e:	6978      	ldr	r0, [r7, #20]
 8013390:	f00a feb8 	bl	801e104 <sys_arch_unprotect>
    return;
 8013394:	e029      	b.n	80133ea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013396:	69f8      	ldr	r0, [r7, #28]
 8013398:	f7ff ff72 	bl	8013280 <mem_link_valid>
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d110      	bne.n	80133c4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80133a2:	4b13      	ldr	r3, [pc, #76]	; (80133f0 <mem_free+0xf8>)
 80133a4:	f240 2295 	movw	r2, #661	; 0x295
 80133a8:	4919      	ldr	r1, [pc, #100]	; (8013410 <mem_free+0x118>)
 80133aa:	4813      	ldr	r0, [pc, #76]	; (80133f8 <mem_free+0x100>)
 80133ac:	f00b ff3e 	bl	801f22c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80133b0:	4815      	ldr	r0, [pc, #84]	; (8013408 <mem_free+0x110>)
 80133b2:	f00a fe66 	bl	801e082 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80133b6:	f00a fe97 	bl	801e0e8 <sys_arch_protect>
 80133ba:	61b8      	str	r0, [r7, #24]
 80133bc:	69b8      	ldr	r0, [r7, #24]
 80133be:	f00a fea1 	bl	801e104 <sys_arch_unprotect>
    return;
 80133c2:	e012      	b.n	80133ea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80133c4:	69fb      	ldr	r3, [r7, #28]
 80133c6:	2200      	movs	r2, #0
 80133c8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80133ca:	4b12      	ldr	r3, [pc, #72]	; (8013414 <mem_free+0x11c>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	69fa      	ldr	r2, [r7, #28]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d202      	bcs.n	80133da <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80133d4:	4a0f      	ldr	r2, [pc, #60]	; (8013414 <mem_free+0x11c>)
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80133da:	69f8      	ldr	r0, [r7, #28]
 80133dc:	f7ff fe5c 	bl	8013098 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80133e0:	4809      	ldr	r0, [pc, #36]	; (8013408 <mem_free+0x110>)
 80133e2:	f00a fe4e 	bl	801e082 <sys_mutex_unlock>
 80133e6:	e000      	b.n	80133ea <mem_free+0xf2>
    return;
 80133e8:	bf00      	nop
}
 80133ea:	3720      	adds	r7, #32
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	08024300 	.word	0x08024300
 80133f4:	080243f0 	.word	0x080243f0
 80133f8:	08024348 	.word	0x08024348
 80133fc:	20006dcc 	.word	0x20006dcc
 8013400:	20006dd0 	.word	0x20006dd0
 8013404:	08024414 	.word	0x08024414
 8013408:	20006dd4 	.word	0x20006dd4
 801340c:	08024430 	.word	0x08024430
 8013410:	08024458 	.word	0x08024458
 8013414:	20006dd8 	.word	0x20006dd8

08013418 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b088      	sub	sp, #32
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	460b      	mov	r3, r1
 8013422:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013424:	887b      	ldrh	r3, [r7, #2]
 8013426:	3303      	adds	r3, #3
 8013428:	b29b      	uxth	r3, r3
 801342a:	f023 0303 	bic.w	r3, r3, #3
 801342e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013430:	8bfb      	ldrh	r3, [r7, #30]
 8013432:	2b0b      	cmp	r3, #11
 8013434:	d801      	bhi.n	801343a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013436:	230c      	movs	r3, #12
 8013438:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801343a:	8bfb      	ldrh	r3, [r7, #30]
 801343c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013440:	d803      	bhi.n	801344a <mem_trim+0x32>
 8013442:	8bfa      	ldrh	r2, [r7, #30]
 8013444:	887b      	ldrh	r3, [r7, #2]
 8013446:	429a      	cmp	r2, r3
 8013448:	d201      	bcs.n	801344e <mem_trim+0x36>
    return NULL;
 801344a:	2300      	movs	r3, #0
 801344c:	e0d8      	b.n	8013600 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801344e:	4b6e      	ldr	r3, [pc, #440]	; (8013608 <mem_trim+0x1f0>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	429a      	cmp	r2, r3
 8013456:	d304      	bcc.n	8013462 <mem_trim+0x4a>
 8013458:	4b6c      	ldr	r3, [pc, #432]	; (801360c <mem_trim+0x1f4>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	687a      	ldr	r2, [r7, #4]
 801345e:	429a      	cmp	r2, r3
 8013460:	d306      	bcc.n	8013470 <mem_trim+0x58>
 8013462:	4b6b      	ldr	r3, [pc, #428]	; (8013610 <mem_trim+0x1f8>)
 8013464:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013468:	496a      	ldr	r1, [pc, #424]	; (8013614 <mem_trim+0x1fc>)
 801346a:	486b      	ldr	r0, [pc, #428]	; (8013618 <mem_trim+0x200>)
 801346c:	f00b fede 	bl	801f22c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013470:	4b65      	ldr	r3, [pc, #404]	; (8013608 <mem_trim+0x1f0>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	429a      	cmp	r2, r3
 8013478:	d304      	bcc.n	8013484 <mem_trim+0x6c>
 801347a:	4b64      	ldr	r3, [pc, #400]	; (801360c <mem_trim+0x1f4>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	429a      	cmp	r2, r3
 8013482:	d307      	bcc.n	8013494 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013484:	f00a fe30 	bl	801e0e8 <sys_arch_protect>
 8013488:	60b8      	str	r0, [r7, #8]
 801348a:	68b8      	ldr	r0, [r7, #8]
 801348c:	f00a fe3a 	bl	801e104 <sys_arch_unprotect>
    return rmem;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	e0b5      	b.n	8013600 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	3b08      	subs	r3, #8
 8013498:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801349a:	69b8      	ldr	r0, [r7, #24]
 801349c:	f7ff fdea 	bl	8013074 <mem_to_ptr>
 80134a0:	4603      	mov	r3, r0
 80134a2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80134a4:	69bb      	ldr	r3, [r7, #24]
 80134a6:	881a      	ldrh	r2, [r3, #0]
 80134a8:	8afb      	ldrh	r3, [r7, #22]
 80134aa:	1ad3      	subs	r3, r2, r3
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	3b08      	subs	r3, #8
 80134b0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80134b2:	8bfa      	ldrh	r2, [r7, #30]
 80134b4:	8abb      	ldrh	r3, [r7, #20]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d906      	bls.n	80134c8 <mem_trim+0xb0>
 80134ba:	4b55      	ldr	r3, [pc, #340]	; (8013610 <mem_trim+0x1f8>)
 80134bc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80134c0:	4956      	ldr	r1, [pc, #344]	; (801361c <mem_trim+0x204>)
 80134c2:	4855      	ldr	r0, [pc, #340]	; (8013618 <mem_trim+0x200>)
 80134c4:	f00b feb2 	bl	801f22c <iprintf>
  if (newsize > size) {
 80134c8:	8bfa      	ldrh	r2, [r7, #30]
 80134ca:	8abb      	ldrh	r3, [r7, #20]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d901      	bls.n	80134d4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80134d0:	2300      	movs	r3, #0
 80134d2:	e095      	b.n	8013600 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80134d4:	8bfa      	ldrh	r2, [r7, #30]
 80134d6:	8abb      	ldrh	r3, [r7, #20]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d101      	bne.n	80134e0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	e08f      	b.n	8013600 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80134e0:	484f      	ldr	r0, [pc, #316]	; (8013620 <mem_trim+0x208>)
 80134e2:	f00a fdbf 	bl	801e064 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	881b      	ldrh	r3, [r3, #0]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7ff fdb0 	bl	8013050 <ptr_to_mem>
 80134f0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	791b      	ldrb	r3, [r3, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d13f      	bne.n	801357a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013502:	d106      	bne.n	8013512 <mem_trim+0xfa>
 8013504:	4b42      	ldr	r3, [pc, #264]	; (8013610 <mem_trim+0x1f8>)
 8013506:	f240 22f5 	movw	r2, #757	; 0x2f5
 801350a:	4946      	ldr	r1, [pc, #280]	; (8013624 <mem_trim+0x20c>)
 801350c:	4842      	ldr	r0, [pc, #264]	; (8013618 <mem_trim+0x200>)
 801350e:	f00b fe8d 	bl	801f22c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	881b      	ldrh	r3, [r3, #0]
 8013516:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013518:	8afa      	ldrh	r2, [r7, #22]
 801351a:	8bfb      	ldrh	r3, [r7, #30]
 801351c:	4413      	add	r3, r2
 801351e:	b29b      	uxth	r3, r3
 8013520:	3308      	adds	r3, #8
 8013522:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013524:	4b40      	ldr	r3, [pc, #256]	; (8013628 <mem_trim+0x210>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	693a      	ldr	r2, [r7, #16]
 801352a:	429a      	cmp	r2, r3
 801352c:	d106      	bne.n	801353c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801352e:	89fb      	ldrh	r3, [r7, #14]
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff fd8d 	bl	8013050 <ptr_to_mem>
 8013536:	4603      	mov	r3, r0
 8013538:	4a3b      	ldr	r2, [pc, #236]	; (8013628 <mem_trim+0x210>)
 801353a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801353c:	89fb      	ldrh	r3, [r7, #14]
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff fd86 	bl	8013050 <ptr_to_mem>
 8013544:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	2200      	movs	r2, #0
 801354a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	89ba      	ldrh	r2, [r7, #12]
 8013550:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	8afa      	ldrh	r2, [r7, #22]
 8013556:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	89fa      	ldrh	r2, [r7, #14]
 801355c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	881b      	ldrh	r3, [r3, #0]
 8013562:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013566:	d047      	beq.n	80135f8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	881b      	ldrh	r3, [r3, #0]
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fd6f 	bl	8013050 <ptr_to_mem>
 8013572:	4602      	mov	r2, r0
 8013574:	89fb      	ldrh	r3, [r7, #14]
 8013576:	8053      	strh	r3, [r2, #2]
 8013578:	e03e      	b.n	80135f8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801357a:	8bfb      	ldrh	r3, [r7, #30]
 801357c:	f103 0214 	add.w	r2, r3, #20
 8013580:	8abb      	ldrh	r3, [r7, #20]
 8013582:	429a      	cmp	r2, r3
 8013584:	d838      	bhi.n	80135f8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013586:	8afa      	ldrh	r2, [r7, #22]
 8013588:	8bfb      	ldrh	r3, [r7, #30]
 801358a:	4413      	add	r3, r2
 801358c:	b29b      	uxth	r3, r3
 801358e:	3308      	adds	r3, #8
 8013590:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	881b      	ldrh	r3, [r3, #0]
 8013596:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801359a:	d106      	bne.n	80135aa <mem_trim+0x192>
 801359c:	4b1c      	ldr	r3, [pc, #112]	; (8013610 <mem_trim+0x1f8>)
 801359e:	f240 3216 	movw	r2, #790	; 0x316
 80135a2:	4920      	ldr	r1, [pc, #128]	; (8013624 <mem_trim+0x20c>)
 80135a4:	481c      	ldr	r0, [pc, #112]	; (8013618 <mem_trim+0x200>)
 80135a6:	f00b fe41 	bl	801f22c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80135aa:	89fb      	ldrh	r3, [r7, #14]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fd4f 	bl	8013050 <ptr_to_mem>
 80135b2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80135b4:	4b1c      	ldr	r3, [pc, #112]	; (8013628 <mem_trim+0x210>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	693a      	ldr	r2, [r7, #16]
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d202      	bcs.n	80135c4 <mem_trim+0x1ac>
      lfree = mem2;
 80135be:	4a1a      	ldr	r2, [pc, #104]	; (8013628 <mem_trim+0x210>)
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	2200      	movs	r2, #0
 80135c8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	881a      	ldrh	r2, [r3, #0]
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	8afa      	ldrh	r2, [r7, #22]
 80135d6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	89fa      	ldrh	r2, [r7, #14]
 80135dc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80135e6:	d007      	beq.n	80135f8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	881b      	ldrh	r3, [r3, #0]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff fd2f 	bl	8013050 <ptr_to_mem>
 80135f2:	4602      	mov	r2, r0
 80135f4:	89fb      	ldrh	r3, [r7, #14]
 80135f6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80135f8:	4809      	ldr	r0, [pc, #36]	; (8013620 <mem_trim+0x208>)
 80135fa:	f00a fd42 	bl	801e082 <sys_mutex_unlock>
  return rmem;
 80135fe:	687b      	ldr	r3, [r7, #4]
}
 8013600:	4618      	mov	r0, r3
 8013602:	3720      	adds	r7, #32
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	20006dcc 	.word	0x20006dcc
 801360c:	20006dd0 	.word	0x20006dd0
 8013610:	08024300 	.word	0x08024300
 8013614:	0802448c 	.word	0x0802448c
 8013618:	08024348 	.word	0x08024348
 801361c:	080244a4 	.word	0x080244a4
 8013620:	20006dd4 	.word	0x20006dd4
 8013624:	080244c4 	.word	0x080244c4
 8013628:	20006dd8 	.word	0x20006dd8

0801362c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b088      	sub	sp, #32
 8013630:	af00      	add	r7, sp, #0
 8013632:	4603      	mov	r3, r0
 8013634:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013636:	88fb      	ldrh	r3, [r7, #6]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d101      	bne.n	8013640 <mem_malloc+0x14>
    return NULL;
 801363c:	2300      	movs	r3, #0
 801363e:	e0e2      	b.n	8013806 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013640:	88fb      	ldrh	r3, [r7, #6]
 8013642:	3303      	adds	r3, #3
 8013644:	b29b      	uxth	r3, r3
 8013646:	f023 0303 	bic.w	r3, r3, #3
 801364a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801364c:	8bbb      	ldrh	r3, [r7, #28]
 801364e:	2b0b      	cmp	r3, #11
 8013650:	d801      	bhi.n	8013656 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013652:	230c      	movs	r3, #12
 8013654:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013656:	8bbb      	ldrh	r3, [r7, #28]
 8013658:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801365c:	d803      	bhi.n	8013666 <mem_malloc+0x3a>
 801365e:	8bba      	ldrh	r2, [r7, #28]
 8013660:	88fb      	ldrh	r3, [r7, #6]
 8013662:	429a      	cmp	r2, r3
 8013664:	d201      	bcs.n	801366a <mem_malloc+0x3e>
    return NULL;
 8013666:	2300      	movs	r3, #0
 8013668:	e0cd      	b.n	8013806 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801366a:	4869      	ldr	r0, [pc, #420]	; (8013810 <mem_malloc+0x1e4>)
 801366c:	f00a fcfa 	bl	801e064 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013670:	4b68      	ldr	r3, [pc, #416]	; (8013814 <mem_malloc+0x1e8>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4618      	mov	r0, r3
 8013676:	f7ff fcfd 	bl	8013074 <mem_to_ptr>
 801367a:	4603      	mov	r3, r0
 801367c:	83fb      	strh	r3, [r7, #30]
 801367e:	e0b7      	b.n	80137f0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013680:	8bfb      	ldrh	r3, [r7, #30]
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff fce4 	bl	8013050 <ptr_to_mem>
 8013688:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	791b      	ldrb	r3, [r3, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	f040 80a7 	bne.w	80137e2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	881b      	ldrh	r3, [r3, #0]
 8013698:	461a      	mov	r2, r3
 801369a:	8bfb      	ldrh	r3, [r7, #30]
 801369c:	1ad3      	subs	r3, r2, r3
 801369e:	f1a3 0208 	sub.w	r2, r3, #8
 80136a2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80136a4:	429a      	cmp	r2, r3
 80136a6:	f0c0 809c 	bcc.w	80137e2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	881b      	ldrh	r3, [r3, #0]
 80136ae:	461a      	mov	r2, r3
 80136b0:	8bfb      	ldrh	r3, [r7, #30]
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	f1a3 0208 	sub.w	r2, r3, #8
 80136b8:	8bbb      	ldrh	r3, [r7, #28]
 80136ba:	3314      	adds	r3, #20
 80136bc:	429a      	cmp	r2, r3
 80136be:	d333      	bcc.n	8013728 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80136c0:	8bfa      	ldrh	r2, [r7, #30]
 80136c2:	8bbb      	ldrh	r3, [r7, #28]
 80136c4:	4413      	add	r3, r2
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	3308      	adds	r3, #8
 80136ca:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80136cc:	8a7b      	ldrh	r3, [r7, #18]
 80136ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80136d2:	d106      	bne.n	80136e2 <mem_malloc+0xb6>
 80136d4:	4b50      	ldr	r3, [pc, #320]	; (8013818 <mem_malloc+0x1ec>)
 80136d6:	f240 3287 	movw	r2, #903	; 0x387
 80136da:	4950      	ldr	r1, [pc, #320]	; (801381c <mem_malloc+0x1f0>)
 80136dc:	4850      	ldr	r0, [pc, #320]	; (8013820 <mem_malloc+0x1f4>)
 80136de:	f00b fda5 	bl	801f22c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80136e2:	8a7b      	ldrh	r3, [r7, #18]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ff fcb3 	bl	8013050 <ptr_to_mem>
 80136ea:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	881a      	ldrh	r2, [r3, #0]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	8bfa      	ldrh	r2, [r7, #30]
 80136fe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	8a7a      	ldrh	r2, [r7, #18]
 8013704:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	2201      	movs	r2, #1
 801370a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013714:	d00b      	beq.n	801372e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	881b      	ldrh	r3, [r3, #0]
 801371a:	4618      	mov	r0, r3
 801371c:	f7ff fc98 	bl	8013050 <ptr_to_mem>
 8013720:	4602      	mov	r2, r0
 8013722:	8a7b      	ldrh	r3, [r7, #18]
 8013724:	8053      	strh	r3, [r2, #2]
 8013726:	e002      	b.n	801372e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	2201      	movs	r2, #1
 801372c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801372e:	4b39      	ldr	r3, [pc, #228]	; (8013814 <mem_malloc+0x1e8>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	697a      	ldr	r2, [r7, #20]
 8013734:	429a      	cmp	r2, r3
 8013736:	d127      	bne.n	8013788 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013738:	4b36      	ldr	r3, [pc, #216]	; (8013814 <mem_malloc+0x1e8>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801373e:	e005      	b.n	801374c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	4618      	mov	r0, r3
 8013746:	f7ff fc83 	bl	8013050 <ptr_to_mem>
 801374a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	791b      	ldrb	r3, [r3, #4]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d004      	beq.n	801375e <mem_malloc+0x132>
 8013754:	4b33      	ldr	r3, [pc, #204]	; (8013824 <mem_malloc+0x1f8>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	69ba      	ldr	r2, [r7, #24]
 801375a:	429a      	cmp	r2, r3
 801375c:	d1f0      	bne.n	8013740 <mem_malloc+0x114>
          }
          lfree = cur;
 801375e:	4a2d      	ldr	r2, [pc, #180]	; (8013814 <mem_malloc+0x1e8>)
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013764:	4b2b      	ldr	r3, [pc, #172]	; (8013814 <mem_malloc+0x1e8>)
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	4b2e      	ldr	r3, [pc, #184]	; (8013824 <mem_malloc+0x1f8>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	429a      	cmp	r2, r3
 801376e:	d00b      	beq.n	8013788 <mem_malloc+0x15c>
 8013770:	4b28      	ldr	r3, [pc, #160]	; (8013814 <mem_malloc+0x1e8>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	791b      	ldrb	r3, [r3, #4]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d006      	beq.n	8013788 <mem_malloc+0x15c>
 801377a:	4b27      	ldr	r3, [pc, #156]	; (8013818 <mem_malloc+0x1ec>)
 801377c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013780:	4929      	ldr	r1, [pc, #164]	; (8013828 <mem_malloc+0x1fc>)
 8013782:	4827      	ldr	r0, [pc, #156]	; (8013820 <mem_malloc+0x1f4>)
 8013784:	f00b fd52 	bl	801f22c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013788:	4821      	ldr	r0, [pc, #132]	; (8013810 <mem_malloc+0x1e4>)
 801378a:	f00a fc7a 	bl	801e082 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801378e:	8bba      	ldrh	r2, [r7, #28]
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	4413      	add	r3, r2
 8013794:	3308      	adds	r3, #8
 8013796:	4a23      	ldr	r2, [pc, #140]	; (8013824 <mem_malloc+0x1f8>)
 8013798:	6812      	ldr	r2, [r2, #0]
 801379a:	4293      	cmp	r3, r2
 801379c:	d906      	bls.n	80137ac <mem_malloc+0x180>
 801379e:	4b1e      	ldr	r3, [pc, #120]	; (8013818 <mem_malloc+0x1ec>)
 80137a0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80137a4:	4921      	ldr	r1, [pc, #132]	; (801382c <mem_malloc+0x200>)
 80137a6:	481e      	ldr	r0, [pc, #120]	; (8013820 <mem_malloc+0x1f4>)
 80137a8:	f00b fd40 	bl	801f22c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	f003 0303 	and.w	r3, r3, #3
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d006      	beq.n	80137c4 <mem_malloc+0x198>
 80137b6:	4b18      	ldr	r3, [pc, #96]	; (8013818 <mem_malloc+0x1ec>)
 80137b8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80137bc:	491c      	ldr	r1, [pc, #112]	; (8013830 <mem_malloc+0x204>)
 80137be:	4818      	ldr	r0, [pc, #96]	; (8013820 <mem_malloc+0x1f4>)
 80137c0:	f00b fd34 	bl	801f22c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	f003 0303 	and.w	r3, r3, #3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d006      	beq.n	80137dc <mem_malloc+0x1b0>
 80137ce:	4b12      	ldr	r3, [pc, #72]	; (8013818 <mem_malloc+0x1ec>)
 80137d0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80137d4:	4917      	ldr	r1, [pc, #92]	; (8013834 <mem_malloc+0x208>)
 80137d6:	4812      	ldr	r0, [pc, #72]	; (8013820 <mem_malloc+0x1f4>)
 80137d8:	f00b fd28 	bl	801f22c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	3308      	adds	r3, #8
 80137e0:	e011      	b.n	8013806 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80137e2:	8bfb      	ldrh	r3, [r7, #30]
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7ff fc33 	bl	8013050 <ptr_to_mem>
 80137ea:	4603      	mov	r3, r0
 80137ec:	881b      	ldrh	r3, [r3, #0]
 80137ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80137f0:	8bfa      	ldrh	r2, [r7, #30]
 80137f2:	8bbb      	ldrh	r3, [r7, #28]
 80137f4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80137f8:	429a      	cmp	r2, r3
 80137fa:	f4ff af41 	bcc.w	8013680 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80137fe:	4804      	ldr	r0, [pc, #16]	; (8013810 <mem_malloc+0x1e4>)
 8013800:	f00a fc3f 	bl	801e082 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3720      	adds	r7, #32
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	20006dd4 	.word	0x20006dd4
 8013814:	20006dd8 	.word	0x20006dd8
 8013818:	08024300 	.word	0x08024300
 801381c:	080244c4 	.word	0x080244c4
 8013820:	08024348 	.word	0x08024348
 8013824:	20006dd0 	.word	0x20006dd0
 8013828:	080244d8 	.word	0x080244d8
 801382c:	080244f4 	.word	0x080244f4
 8013830:	08024524 	.word	0x08024524
 8013834:	08024554 	.word	0x08024554

08013838 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013838:	b480      	push	{r7}
 801383a:	b085      	sub	sp, #20
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	689b      	ldr	r3, [r3, #8]
 8013844:	2200      	movs	r2, #0
 8013846:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	3303      	adds	r3, #3
 801384e:	f023 0303 	bic.w	r3, r3, #3
 8013852:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013854:	2300      	movs	r3, #0
 8013856:	60fb      	str	r3, [r7, #12]
 8013858:	e011      	b.n	801387e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	689b      	ldr	r3, [r3, #8]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	68ba      	ldr	r2, [r7, #8]
 801386a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	461a      	mov	r2, r3
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	4413      	add	r3, r2
 8013876:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	3301      	adds	r3, #1
 801387c:	60fb      	str	r3, [r7, #12]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	885b      	ldrh	r3, [r3, #2]
 8013882:	461a      	mov	r2, r3
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	4293      	cmp	r3, r2
 8013888:	dbe7      	blt.n	801385a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801388a:	bf00      	nop
 801388c:	bf00      	nop
 801388e:	3714      	adds	r7, #20
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801389e:	2300      	movs	r3, #0
 80138a0:	80fb      	strh	r3, [r7, #6]
 80138a2:	e009      	b.n	80138b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80138a4:	88fb      	ldrh	r3, [r7, #6]
 80138a6:	4a08      	ldr	r2, [pc, #32]	; (80138c8 <memp_init+0x30>)
 80138a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7ff ffc3 	bl	8013838 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80138b2:	88fb      	ldrh	r3, [r7, #6]
 80138b4:	3301      	adds	r3, #1
 80138b6:	80fb      	strh	r3, [r7, #6]
 80138b8:	88fb      	ldrh	r3, [r7, #6]
 80138ba:	2b0c      	cmp	r3, #12
 80138bc:	d9f2      	bls.n	80138a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80138be:	bf00      	nop
 80138c0:	bf00      	nop
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	08026f2c 	.word	0x08026f2c

080138cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b084      	sub	sp, #16
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80138d4:	f00a fc08 	bl	801e0e8 <sys_arch_protect>
 80138d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	689b      	ldr	r3, [r3, #8]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d015      	beq.n	8013914 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	689b      	ldr	r3, [r3, #8]
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	6812      	ldr	r2, [r2, #0]
 80138f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	f003 0303 	and.w	r3, r3, #3
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d006      	beq.n	801390a <do_memp_malloc_pool+0x3e>
 80138fc:	4b09      	ldr	r3, [pc, #36]	; (8013924 <do_memp_malloc_pool+0x58>)
 80138fe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013902:	4909      	ldr	r1, [pc, #36]	; (8013928 <do_memp_malloc_pool+0x5c>)
 8013904:	4809      	ldr	r0, [pc, #36]	; (801392c <do_memp_malloc_pool+0x60>)
 8013906:	f00b fc91 	bl	801f22c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	f00a fbfa 	bl	801e104 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	e003      	b.n	801391c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f00a fbf5 	bl	801e104 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801391a:	2300      	movs	r3, #0
}
 801391c:	4618      	mov	r0, r3
 801391e:	3710      	adds	r7, #16
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	08024578 	.word	0x08024578
 8013928:	080245a8 	.word	0x080245a8
 801392c:	080245cc 	.word	0x080245cc

08013930 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	4603      	mov	r3, r0
 8013938:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801393a:	79fb      	ldrb	r3, [r7, #7]
 801393c:	2b0c      	cmp	r3, #12
 801393e:	d908      	bls.n	8013952 <memp_malloc+0x22>
 8013940:	4b0a      	ldr	r3, [pc, #40]	; (801396c <memp_malloc+0x3c>)
 8013942:	f240 1257 	movw	r2, #343	; 0x157
 8013946:	490a      	ldr	r1, [pc, #40]	; (8013970 <memp_malloc+0x40>)
 8013948:	480a      	ldr	r0, [pc, #40]	; (8013974 <memp_malloc+0x44>)
 801394a:	f00b fc6f 	bl	801f22c <iprintf>
 801394e:	2300      	movs	r3, #0
 8013950:	e008      	b.n	8013964 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013952:	79fb      	ldrb	r3, [r7, #7]
 8013954:	4a08      	ldr	r2, [pc, #32]	; (8013978 <memp_malloc+0x48>)
 8013956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801395a:	4618      	mov	r0, r3
 801395c:	f7ff ffb6 	bl	80138cc <do_memp_malloc_pool>
 8013960:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013962:	68fb      	ldr	r3, [r7, #12]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	08024578 	.word	0x08024578
 8013970:	08024608 	.word	0x08024608
 8013974:	080245cc 	.word	0x080245cc
 8013978:	08026f2c 	.word	0x08026f2c

0801397c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b084      	sub	sp, #16
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	f003 0303 	and.w	r3, r3, #3
 801398c:	2b00      	cmp	r3, #0
 801398e:	d006      	beq.n	801399e <do_memp_free_pool+0x22>
 8013990:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <do_memp_free_pool+0x4c>)
 8013992:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013996:	490d      	ldr	r1, [pc, #52]	; (80139cc <do_memp_free_pool+0x50>)
 8013998:	480d      	ldr	r0, [pc, #52]	; (80139d0 <do_memp_free_pool+0x54>)
 801399a:	f00b fc47 	bl	801f22c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80139a2:	f00a fba1 	bl	801e0e8 <sys_arch_protect>
 80139a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	689b      	ldr	r3, [r3, #8]
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	68fa      	ldr	r2, [r7, #12]
 80139b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80139ba:	68b8      	ldr	r0, [r7, #8]
 80139bc:	f00a fba2 	bl	801e104 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80139c0:	bf00      	nop
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	08024578 	.word	0x08024578
 80139cc:	08024628 	.word	0x08024628
 80139d0:	080245cc 	.word	0x080245cc

080139d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	4603      	mov	r3, r0
 80139dc:	6039      	str	r1, [r7, #0]
 80139de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80139e0:	79fb      	ldrb	r3, [r7, #7]
 80139e2:	2b0c      	cmp	r3, #12
 80139e4:	d907      	bls.n	80139f6 <memp_free+0x22>
 80139e6:	4b0c      	ldr	r3, [pc, #48]	; (8013a18 <memp_free+0x44>)
 80139e8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80139ec:	490b      	ldr	r1, [pc, #44]	; (8013a1c <memp_free+0x48>)
 80139ee:	480c      	ldr	r0, [pc, #48]	; (8013a20 <memp_free+0x4c>)
 80139f0:	f00b fc1c 	bl	801f22c <iprintf>
 80139f4:	e00c      	b.n	8013a10 <memp_free+0x3c>

  if (mem == NULL) {
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d008      	beq.n	8013a0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80139fc:	79fb      	ldrb	r3, [r7, #7]
 80139fe:	4a09      	ldr	r2, [pc, #36]	; (8013a24 <memp_free+0x50>)
 8013a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a04:	6839      	ldr	r1, [r7, #0]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff ffb8 	bl	801397c <do_memp_free_pool>
 8013a0c:	e000      	b.n	8013a10 <memp_free+0x3c>
    return;
 8013a0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013a10:	3708      	adds	r7, #8
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	bf00      	nop
 8013a18:	08024578 	.word	0x08024578
 8013a1c:	08024648 	.word	0x08024648
 8013a20:	080245cc 	.word	0x080245cc
 8013a24:	08026f2c 	.word	0x08026f2c

08013a28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013a2c:	bf00      	nop
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
	...

08013a38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d108      	bne.n	8013a5e <netif_add+0x26>
 8013a4c:	4b57      	ldr	r3, [pc, #348]	; (8013bac <netif_add+0x174>)
 8013a4e:	f240 1227 	movw	r2, #295	; 0x127
 8013a52:	4957      	ldr	r1, [pc, #348]	; (8013bb0 <netif_add+0x178>)
 8013a54:	4857      	ldr	r0, [pc, #348]	; (8013bb4 <netif_add+0x17c>)
 8013a56:	f00b fbe9 	bl	801f22c <iprintf>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	e0a2      	b.n	8013ba4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d108      	bne.n	8013a76 <netif_add+0x3e>
 8013a64:	4b51      	ldr	r3, [pc, #324]	; (8013bac <netif_add+0x174>)
 8013a66:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013a6a:	4953      	ldr	r1, [pc, #332]	; (8013bb8 <netif_add+0x180>)
 8013a6c:	4851      	ldr	r0, [pc, #324]	; (8013bb4 <netif_add+0x17c>)
 8013a6e:	f00b fbdd 	bl	801f22c <iprintf>
 8013a72:	2300      	movs	r3, #0
 8013a74:	e096      	b.n	8013ba4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d101      	bne.n	8013a80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013a7c:	4b4f      	ldr	r3, [pc, #316]	; (8013bbc <netif_add+0x184>)
 8013a7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d101      	bne.n	8013a8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013a86:	4b4d      	ldr	r3, [pc, #308]	; (8013bbc <netif_add+0x184>)
 8013a88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d101      	bne.n	8013a94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013a90:	4b4a      	ldr	r3, [pc, #296]	; (8013bbc <netif_add+0x184>)
 8013a92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	2200      	movs	r2, #0
 8013a98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	4a45      	ldr	r2, [pc, #276]	; (8013bc0 <netif_add+0x188>)
 8013aaa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2200      	movs	r2, #0
 8013abe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6a3a      	ldr	r2, [r7, #32]
 8013ac4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013ac6:	4b3f      	ldr	r3, [pc, #252]	; (8013bc4 <netif_add+0x18c>)
 8013ac8:	781a      	ldrb	r2, [r3, #0]
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ad4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	687a      	ldr	r2, [r7, #4]
 8013ada:	68b9      	ldr	r1, [r7, #8]
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	f000 f913 	bl	8013d08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	68f8      	ldr	r0, [r7, #12]
 8013ae6:	4798      	blx	r3
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <netif_add+0xba>
    return NULL;
 8013aee:	2300      	movs	r3, #0
 8013af0:	e058      	b.n	8013ba4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013af8:	2bff      	cmp	r3, #255	; 0xff
 8013afa:	d103      	bne.n	8013b04 <netif_add+0xcc>
        netif->num = 0;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2200      	movs	r2, #0
 8013b00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8013b04:	2300      	movs	r3, #0
 8013b06:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b08:	4b2f      	ldr	r3, [pc, #188]	; (8013bc8 <netif_add+0x190>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	617b      	str	r3, [r7, #20]
 8013b0e:	e02b      	b.n	8013b68 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013b10:	697a      	ldr	r2, [r7, #20]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d106      	bne.n	8013b26 <netif_add+0xee>
 8013b18:	4b24      	ldr	r3, [pc, #144]	; (8013bac <netif_add+0x174>)
 8013b1a:	f240 128b 	movw	r2, #395	; 0x18b
 8013b1e:	492b      	ldr	r1, [pc, #172]	; (8013bcc <netif_add+0x194>)
 8013b20:	4824      	ldr	r0, [pc, #144]	; (8013bb4 <netif_add+0x17c>)
 8013b22:	f00b fb83 	bl	801f22c <iprintf>
        num_netifs++;
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	2bff      	cmp	r3, #255	; 0xff
 8013b30:	dd06      	ble.n	8013b40 <netif_add+0x108>
 8013b32:	4b1e      	ldr	r3, [pc, #120]	; (8013bac <netif_add+0x174>)
 8013b34:	f240 128d 	movw	r2, #397	; 0x18d
 8013b38:	4925      	ldr	r1, [pc, #148]	; (8013bd0 <netif_add+0x198>)
 8013b3a:	481e      	ldr	r0, [pc, #120]	; (8013bb4 <netif_add+0x17c>)
 8013b3c:	f00b fb76 	bl	801f22c <iprintf>
        if (netif2->num == netif->num) {
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d108      	bne.n	8013b62 <netif_add+0x12a>
          netif->num++;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b56:	3301      	adds	r3, #1
 8013b58:	b2da      	uxtb	r2, r3
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8013b60:	e005      	b.n	8013b6e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	617b      	str	r3, [r7, #20]
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d1d0      	bne.n	8013b10 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d1be      	bne.n	8013af2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b7a:	2bfe      	cmp	r3, #254	; 0xfe
 8013b7c:	d103      	bne.n	8013b86 <netif_add+0x14e>
    netif_num = 0;
 8013b7e:	4b11      	ldr	r3, [pc, #68]	; (8013bc4 <netif_add+0x18c>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	701a      	strb	r2, [r3, #0]
 8013b84:	e006      	b.n	8013b94 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	b2da      	uxtb	r2, r3
 8013b90:	4b0c      	ldr	r3, [pc, #48]	; (8013bc4 <netif_add+0x18c>)
 8013b92:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013b94:	4b0c      	ldr	r3, [pc, #48]	; (8013bc8 <netif_add+0x190>)
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013b9c:	4a0a      	ldr	r2, [pc, #40]	; (8013bc8 <netif_add+0x190>)
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3718      	adds	r7, #24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}
 8013bac:	08024664 	.word	0x08024664
 8013bb0:	080246f8 	.word	0x080246f8
 8013bb4:	080246b4 	.word	0x080246b4
 8013bb8:	08024714 	.word	0x08024714
 8013bbc:	08026fa0 	.word	0x08026fa0
 8013bc0:	08013f1b 	.word	0x08013f1b
 8013bc4:	20006e10 	.word	0x20006e10
 8013bc8:	2000e160 	.word	0x2000e160
 8013bcc:	08024738 	.word	0x08024738
 8013bd0:	0802474c 	.word	0x0802474c

08013bd4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013bde:	6839      	ldr	r1, [r7, #0]
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f002 fd31 	bl	8016648 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013be6:	6839      	ldr	r1, [r7, #0]
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f007 fdc9 	bl	801b780 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013bee:	bf00      	nop
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
	...

08013bf8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d106      	bne.n	8013c18 <netif_do_set_ipaddr+0x20>
 8013c0a:	4b1d      	ldr	r3, [pc, #116]	; (8013c80 <netif_do_set_ipaddr+0x88>)
 8013c0c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013c10:	491c      	ldr	r1, [pc, #112]	; (8013c84 <netif_do_set_ipaddr+0x8c>)
 8013c12:	481d      	ldr	r0, [pc, #116]	; (8013c88 <netif_do_set_ipaddr+0x90>)
 8013c14:	f00b fb0a 	bl	801f22c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d106      	bne.n	8013c2c <netif_do_set_ipaddr+0x34>
 8013c1e:	4b18      	ldr	r3, [pc, #96]	; (8013c80 <netif_do_set_ipaddr+0x88>)
 8013c20:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013c24:	4917      	ldr	r1, [pc, #92]	; (8013c84 <netif_do_set_ipaddr+0x8c>)
 8013c26:	4818      	ldr	r0, [pc, #96]	; (8013c88 <netif_do_set_ipaddr+0x90>)
 8013c28:	f00b fb00 	bl	801f22c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	3304      	adds	r3, #4
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d01c      	beq.n	8013c74 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	3304      	adds	r3, #4
 8013c44:	681a      	ldr	r2, [r3, #0]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013c4a:	f107 0314 	add.w	r3, r7, #20
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff ffbf 	bl	8013bd4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d002      	beq.n	8013c62 <netif_do_set_ipaddr+0x6a>
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	e000      	b.n	8013c64 <netif_do_set_ipaddr+0x6c>
 8013c62:	2300      	movs	r3, #0
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013c68:	2101      	movs	r1, #1
 8013c6a:	68f8      	ldr	r0, [r7, #12]
 8013c6c:	f000 f8d2 	bl	8013e14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013c70:	2301      	movs	r3, #1
 8013c72:	e000      	b.n	8013c76 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3718      	adds	r7, #24
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	08024664 	.word	0x08024664
 8013c84:	0802477c 	.word	0x0802477c
 8013c88:	080246b4 	.word	0x080246b4

08013c8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	3308      	adds	r3, #8
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d00a      	beq.n	8013cbc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <netif_do_set_netmask+0x26>
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	e000      	b.n	8013cb4 <netif_do_set_netmask+0x28>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	68fa      	ldr	r2, [r7, #12]
 8013cb6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013cb8:	2301      	movs	r3, #1
 8013cba:	e000      	b.n	8013cbe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr

08013cca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013cca:	b480      	push	{r7}
 8013ccc:	b085      	sub	sp, #20
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	60f8      	str	r0, [r7, #12]
 8013cd2:	60b9      	str	r1, [r7, #8]
 8013cd4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	681a      	ldr	r2, [r3, #0]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	330c      	adds	r3, #12
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d00a      	beq.n	8013cfa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d002      	beq.n	8013cf0 <netif_do_set_gw+0x26>
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	e000      	b.n	8013cf2 <netif_do_set_gw+0x28>
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	68fa      	ldr	r2, [r7, #12]
 8013cf4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e000      	b.n	8013cfc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3714      	adds	r7, #20
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr

08013d08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b088      	sub	sp, #32
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
 8013d14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013d16:	2300      	movs	r3, #0
 8013d18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d101      	bne.n	8013d28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013d24:	4b1c      	ldr	r3, [pc, #112]	; (8013d98 <netif_set_addr+0x90>)
 8013d26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d101      	bne.n	8013d32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013d2e:	4b1a      	ldr	r3, [pc, #104]	; (8013d98 <netif_set_addr+0x90>)
 8013d30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d101      	bne.n	8013d3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013d38:	4b17      	ldr	r3, [pc, #92]	; (8013d98 <netif_set_addr+0x90>)
 8013d3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d003      	beq.n	8013d4a <netif_set_addr+0x42>
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d101      	bne.n	8013d4e <netif_set_addr+0x46>
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	e000      	b.n	8013d50 <netif_set_addr+0x48>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d006      	beq.n	8013d66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013d58:	f107 0310 	add.w	r3, r7, #16
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	68b9      	ldr	r1, [r7, #8]
 8013d60:	68f8      	ldr	r0, [r7, #12]
 8013d62:	f7ff ff49 	bl	8013bf8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013d66:	69fa      	ldr	r2, [r7, #28]
 8013d68:	6879      	ldr	r1, [r7, #4]
 8013d6a:	68f8      	ldr	r0, [r7, #12]
 8013d6c:	f7ff ff8e 	bl	8013c8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013d70:	69ba      	ldr	r2, [r7, #24]
 8013d72:	6839      	ldr	r1, [r7, #0]
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f7ff ffa8 	bl	8013cca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d106      	bne.n	8013d8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013d80:	f107 0310 	add.w	r3, r7, #16
 8013d84:	461a      	mov	r2, r3
 8013d86:	68b9      	ldr	r1, [r7, #8]
 8013d88:	68f8      	ldr	r0, [r7, #12]
 8013d8a:	f7ff ff35 	bl	8013bf8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013d8e:	bf00      	nop
 8013d90:	3720      	adds	r7, #32
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	08026fa0 	.word	0x08026fa0

08013d9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	b083      	sub	sp, #12
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013da4:	4a04      	ldr	r2, [pc, #16]	; (8013db8 <netif_set_default+0x1c>)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013daa:	bf00      	nop
 8013dac:	370c      	adds	r7, #12
 8013dae:	46bd      	mov	sp, r7
 8013db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop
 8013db8:	2000e164 	.word	0x2000e164

08013dbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d107      	bne.n	8013dda <netif_set_up+0x1e>
 8013dca:	4b0f      	ldr	r3, [pc, #60]	; (8013e08 <netif_set_up+0x4c>)
 8013dcc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013dd0:	490e      	ldr	r1, [pc, #56]	; (8013e0c <netif_set_up+0x50>)
 8013dd2:	480f      	ldr	r0, [pc, #60]	; (8013e10 <netif_set_up+0x54>)
 8013dd4:	f00b fa2a 	bl	801f22c <iprintf>
 8013dd8:	e013      	b.n	8013e02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013de0:	f003 0301 	and.w	r3, r3, #1
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10c      	bne.n	8013e02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dee:	f043 0301 	orr.w	r3, r3, #1
 8013df2:	b2da      	uxtb	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013dfa:	2103      	movs	r1, #3
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 f809 	bl	8013e14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013e02:	3708      	adds	r7, #8
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}
 8013e08:	08024664 	.word	0x08024664
 8013e0c:	080247ec 	.word	0x080247ec
 8013e10:	080246b4 	.word	0x080246b4

08013e14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d106      	bne.n	8013e34 <netif_issue_reports+0x20>
 8013e26:	4b18      	ldr	r3, [pc, #96]	; (8013e88 <netif_issue_reports+0x74>)
 8013e28:	f240 326d 	movw	r2, #877	; 0x36d
 8013e2c:	4917      	ldr	r1, [pc, #92]	; (8013e8c <netif_issue_reports+0x78>)
 8013e2e:	4818      	ldr	r0, [pc, #96]	; (8013e90 <netif_issue_reports+0x7c>)
 8013e30:	f00b f9fc 	bl	801f22c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e3a:	f003 0304 	and.w	r3, r3, #4
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d01e      	beq.n	8013e80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d017      	beq.n	8013e80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013e50:	78fb      	ldrb	r3, [r7, #3]
 8013e52:	f003 0301 	and.w	r3, r3, #1
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d013      	beq.n	8013e82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	3304      	adds	r3, #4
 8013e5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00e      	beq.n	8013e82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e6a:	f003 0308 	and.w	r3, r3, #8
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d007      	beq.n	8013e82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	3304      	adds	r3, #4
 8013e76:	4619      	mov	r1, r3
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f008 fbeb 	bl	801c654 <etharp_request>
 8013e7e:	e000      	b.n	8013e82 <netif_issue_reports+0x6e>
    return;
 8013e80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013e82:	3708      	adds	r7, #8
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	08024664 	.word	0x08024664
 8013e8c:	08024808 	.word	0x08024808
 8013e90:	080246b4 	.word	0x080246b4

08013e94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b082      	sub	sp, #8
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d107      	bne.n	8013eb2 <netif_set_down+0x1e>
 8013ea2:	4b12      	ldr	r3, [pc, #72]	; (8013eec <netif_set_down+0x58>)
 8013ea4:	f240 329b 	movw	r2, #923	; 0x39b
 8013ea8:	4911      	ldr	r1, [pc, #68]	; (8013ef0 <netif_set_down+0x5c>)
 8013eaa:	4812      	ldr	r0, [pc, #72]	; (8013ef4 <netif_set_down+0x60>)
 8013eac:	f00b f9be 	bl	801f22c <iprintf>
 8013eb0:	e019      	b.n	8013ee6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013eb8:	f003 0301 	and.w	r3, r3, #1
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d012      	beq.n	8013ee6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ec6:	f023 0301 	bic.w	r3, r3, #1
 8013eca:	b2da      	uxtb	r2, r3
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ed8:	f003 0308 	and.w	r3, r3, #8
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f007 ff75 	bl	801bdd0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	08024664 	.word	0x08024664
 8013ef0:	0802482c 	.word	0x0802482c
 8013ef4:	080246b4 	.word	0x080246b4

08013ef8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	683a      	ldr	r2, [r7, #0]
 8013f0c:	61da      	str	r2, [r3, #28]
  }
}
 8013f0e:	bf00      	nop
 8013f10:	370c      	adds	r7, #12
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr

08013f1a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013f1a:	b480      	push	{r7}
 8013f1c:	b085      	sub	sp, #20
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	60f8      	str	r0, [r7, #12]
 8013f22:	60b9      	str	r1, [r7, #8]
 8013f24:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013f26:	f06f 030b 	mvn.w	r3, #11
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3714      	adds	r7, #20
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr
	...

08013f38 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	4603      	mov	r3, r0
 8013f40:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013f42:	79fb      	ldrb	r3, [r7, #7]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d013      	beq.n	8013f70 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013f48:	4b0d      	ldr	r3, [pc, #52]	; (8013f80 <netif_get_by_index+0x48>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	60fb      	str	r3, [r7, #12]
 8013f4e:	e00c      	b.n	8013f6a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f56:	3301      	adds	r3, #1
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	79fa      	ldrb	r2, [r7, #7]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d101      	bne.n	8013f64 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	e006      	b.n	8013f72 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	60fb      	str	r3, [r7, #12]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d1ef      	bne.n	8013f50 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3714      	adds	r7, #20
 8013f76:	46bd      	mov	sp, r7
 8013f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7c:	4770      	bx	lr
 8013f7e:	bf00      	nop
 8013f80:	2000e160 	.word	0x2000e160

08013f84 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013f8a:	f00a f8ad 	bl	801e0e8 <sys_arch_protect>
 8013f8e:	6038      	str	r0, [r7, #0]
 8013f90:	4b0d      	ldr	r3, [pc, #52]	; (8013fc8 <pbuf_free_ooseq+0x44>)
 8013f92:	2200      	movs	r2, #0
 8013f94:	701a      	strb	r2, [r3, #0]
 8013f96:	6838      	ldr	r0, [r7, #0]
 8013f98:	f00a f8b4 	bl	801e104 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013f9c:	4b0b      	ldr	r3, [pc, #44]	; (8013fcc <pbuf_free_ooseq+0x48>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	607b      	str	r3, [r7, #4]
 8013fa2:	e00a      	b.n	8013fba <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d003      	beq.n	8013fb4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f002 fb89 	bl	80166c4 <tcp_free_ooseq>
      return;
 8013fb2:	e005      	b.n	8013fc0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	607b      	str	r3, [r7, #4]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d1f1      	bne.n	8013fa4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	2000e168 	.word	0x2000e168
 8013fcc:	2000e170 	.word	0x2000e170

08013fd0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013fd8:	f7ff ffd4 	bl	8013f84 <pbuf_free_ooseq>
}
 8013fdc:	bf00      	nop
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013fea:	f00a f87d 	bl	801e0e8 <sys_arch_protect>
 8013fee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013ff0:	4b0f      	ldr	r3, [pc, #60]	; (8014030 <pbuf_pool_is_empty+0x4c>)
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013ff6:	4b0e      	ldr	r3, [pc, #56]	; (8014030 <pbuf_pool_is_empty+0x4c>)
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f00a f881 	bl	801e104 <sys_arch_unprotect>

  if (!queued) {
 8014002:	78fb      	ldrb	r3, [r7, #3]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d10f      	bne.n	8014028 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014008:	2100      	movs	r1, #0
 801400a:	480a      	ldr	r0, [pc, #40]	; (8014034 <pbuf_pool_is_empty+0x50>)
 801400c:	f7fe ff3a 	bl	8012e84 <tcpip_try_callback>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	d008      	beq.n	8014028 <pbuf_pool_is_empty+0x44>
 8014016:	f00a f867 	bl	801e0e8 <sys_arch_protect>
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	4b04      	ldr	r3, [pc, #16]	; (8014030 <pbuf_pool_is_empty+0x4c>)
 801401e:	2200      	movs	r2, #0
 8014020:	701a      	strb	r2, [r3, #0]
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f00a f86e 	bl	801e104 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014028:	bf00      	nop
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	2000e168 	.word	0x2000e168
 8014034:	08013fd1 	.word	0x08013fd1

08014038 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014038:	b480      	push	{r7}
 801403a:	b085      	sub	sp, #20
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	4611      	mov	r1, r2
 8014044:	461a      	mov	r2, r3
 8014046:	460b      	mov	r3, r1
 8014048:	80fb      	strh	r3, [r7, #6]
 801404a:	4613      	mov	r3, r2
 801404c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	68ba      	ldr	r2, [r7, #8]
 8014058:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	88fa      	ldrh	r2, [r7, #6]
 801405e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	88ba      	ldrh	r2, [r7, #4]
 8014064:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014066:	8b3b      	ldrh	r3, [r7, #24]
 8014068:	b2da      	uxtb	r2, r3
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	7f3a      	ldrb	r2, [r7, #28]
 8014072:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2201      	movs	r2, #1
 8014078:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2200      	movs	r2, #0
 801407e:	73da      	strb	r2, [r3, #15]
}
 8014080:	bf00      	nop
 8014082:	3714      	adds	r7, #20
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b08c      	sub	sp, #48	; 0x30
 8014090:	af02      	add	r7, sp, #8
 8014092:	4603      	mov	r3, r0
 8014094:	71fb      	strb	r3, [r7, #7]
 8014096:	460b      	mov	r3, r1
 8014098:	80bb      	strh	r3, [r7, #4]
 801409a:	4613      	mov	r3, r2
 801409c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801409e:	79fb      	ldrb	r3, [r7, #7]
 80140a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80140a2:	887b      	ldrh	r3, [r7, #2]
 80140a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80140a8:	d07f      	beq.n	80141aa <pbuf_alloc+0x11e>
 80140aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80140ae:	f300 80c8 	bgt.w	8014242 <pbuf_alloc+0x1b6>
 80140b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80140b6:	d010      	beq.n	80140da <pbuf_alloc+0x4e>
 80140b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80140bc:	f300 80c1 	bgt.w	8014242 <pbuf_alloc+0x1b6>
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d002      	beq.n	80140ca <pbuf_alloc+0x3e>
 80140c4:	2b41      	cmp	r3, #65	; 0x41
 80140c6:	f040 80bc 	bne.w	8014242 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80140ca:	887a      	ldrh	r2, [r7, #2]
 80140cc:	88bb      	ldrh	r3, [r7, #4]
 80140ce:	4619      	mov	r1, r3
 80140d0:	2000      	movs	r0, #0
 80140d2:	f000 f8d1 	bl	8014278 <pbuf_alloc_reference>
 80140d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80140d8:	e0bd      	b.n	8014256 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80140da:	2300      	movs	r3, #0
 80140dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80140de:	2300      	movs	r3, #0
 80140e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80140e2:	88bb      	ldrh	r3, [r7, #4]
 80140e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80140e6:	200c      	movs	r0, #12
 80140e8:	f7ff fc22 	bl	8013930 <memp_malloc>
 80140ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d109      	bne.n	8014108 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80140f4:	f7ff ff76 	bl	8013fe4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80140f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d002      	beq.n	8014104 <pbuf_alloc+0x78>
            pbuf_free(p);
 80140fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014100:	f000 faa8 	bl	8014654 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014104:	2300      	movs	r3, #0
 8014106:	e0a7      	b.n	8014258 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801410a:	3303      	adds	r3, #3
 801410c:	b29b      	uxth	r3, r3
 801410e:	f023 0303 	bic.w	r3, r3, #3
 8014112:	b29b      	uxth	r3, r3
 8014114:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8014118:	b29b      	uxth	r3, r3
 801411a:	8b7a      	ldrh	r2, [r7, #26]
 801411c:	4293      	cmp	r3, r2
 801411e:	bf28      	it	cs
 8014120:	4613      	movcs	r3, r2
 8014122:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014126:	3310      	adds	r3, #16
 8014128:	693a      	ldr	r2, [r7, #16]
 801412a:	4413      	add	r3, r2
 801412c:	3303      	adds	r3, #3
 801412e:	f023 0303 	bic.w	r3, r3, #3
 8014132:	4618      	mov	r0, r3
 8014134:	89f9      	ldrh	r1, [r7, #14]
 8014136:	8b7a      	ldrh	r2, [r7, #26]
 8014138:	2300      	movs	r3, #0
 801413a:	9301      	str	r3, [sp, #4]
 801413c:	887b      	ldrh	r3, [r7, #2]
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	460b      	mov	r3, r1
 8014142:	4601      	mov	r1, r0
 8014144:	6938      	ldr	r0, [r7, #16]
 8014146:	f7ff ff77 	bl	8014038 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	685b      	ldr	r3, [r3, #4]
 801414e:	f003 0303 	and.w	r3, r3, #3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d006      	beq.n	8014164 <pbuf_alloc+0xd8>
 8014156:	4b42      	ldr	r3, [pc, #264]	; (8014260 <pbuf_alloc+0x1d4>)
 8014158:	f44f 7280 	mov.w	r2, #256	; 0x100
 801415c:	4941      	ldr	r1, [pc, #260]	; (8014264 <pbuf_alloc+0x1d8>)
 801415e:	4842      	ldr	r0, [pc, #264]	; (8014268 <pbuf_alloc+0x1dc>)
 8014160:	f00b f864 	bl	801f22c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014166:	3303      	adds	r3, #3
 8014168:	f023 0303 	bic.w	r3, r3, #3
 801416c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014170:	d106      	bne.n	8014180 <pbuf_alloc+0xf4>
 8014172:	4b3b      	ldr	r3, [pc, #236]	; (8014260 <pbuf_alloc+0x1d4>)
 8014174:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014178:	493c      	ldr	r1, [pc, #240]	; (801426c <pbuf_alloc+0x1e0>)
 801417a:	483b      	ldr	r0, [pc, #236]	; (8014268 <pbuf_alloc+0x1dc>)
 801417c:	f00b f856 	bl	801f22c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	2b00      	cmp	r3, #0
 8014184:	d102      	bne.n	801418c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	627b      	str	r3, [r7, #36]	; 0x24
 801418a:	e002      	b.n	8014192 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801418c:	69fb      	ldr	r3, [r7, #28]
 801418e:	693a      	ldr	r2, [r7, #16]
 8014190:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014196:	8b7a      	ldrh	r2, [r7, #26]
 8014198:	89fb      	ldrh	r3, [r7, #14]
 801419a:	1ad3      	subs	r3, r2, r3
 801419c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80141a2:	8b7b      	ldrh	r3, [r7, #26]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d19e      	bne.n	80140e6 <pbuf_alloc+0x5a>
      break;
 80141a8:	e055      	b.n	8014256 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80141aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141ac:	3303      	adds	r3, #3
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	f023 0303 	bic.w	r3, r3, #3
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	88bb      	ldrh	r3, [r7, #4]
 80141b8:	3303      	adds	r3, #3
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	f023 0303 	bic.w	r3, r3, #3
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	4413      	add	r3, r2
 80141c4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80141c6:	8b3b      	ldrh	r3, [r7, #24]
 80141c8:	3310      	adds	r3, #16
 80141ca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80141cc:	8b3a      	ldrh	r2, [r7, #24]
 80141ce:	88bb      	ldrh	r3, [r7, #4]
 80141d0:	3303      	adds	r3, #3
 80141d2:	f023 0303 	bic.w	r3, r3, #3
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d306      	bcc.n	80141e8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80141da:	8afa      	ldrh	r2, [r7, #22]
 80141dc:	88bb      	ldrh	r3, [r7, #4]
 80141de:	3303      	adds	r3, #3
 80141e0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d201      	bcs.n	80141ec <pbuf_alloc+0x160>
        return NULL;
 80141e8:	2300      	movs	r3, #0
 80141ea:	e035      	b.n	8014258 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80141ec:	8afb      	ldrh	r3, [r7, #22]
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7ff fa1c 	bl	801362c <mem_malloc>
 80141f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80141f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d101      	bne.n	8014200 <pbuf_alloc+0x174>
        return NULL;
 80141fc:	2300      	movs	r3, #0
 80141fe:	e02b      	b.n	8014258 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014202:	3310      	adds	r3, #16
 8014204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014206:	4413      	add	r3, r2
 8014208:	3303      	adds	r3, #3
 801420a:	f023 0303 	bic.w	r3, r3, #3
 801420e:	4618      	mov	r0, r3
 8014210:	88b9      	ldrh	r1, [r7, #4]
 8014212:	88ba      	ldrh	r2, [r7, #4]
 8014214:	2300      	movs	r3, #0
 8014216:	9301      	str	r3, [sp, #4]
 8014218:	887b      	ldrh	r3, [r7, #2]
 801421a:	9300      	str	r3, [sp, #0]
 801421c:	460b      	mov	r3, r1
 801421e:	4601      	mov	r1, r0
 8014220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014222:	f7ff ff09 	bl	8014038 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	f003 0303 	and.w	r3, r3, #3
 801422e:	2b00      	cmp	r3, #0
 8014230:	d010      	beq.n	8014254 <pbuf_alloc+0x1c8>
 8014232:	4b0b      	ldr	r3, [pc, #44]	; (8014260 <pbuf_alloc+0x1d4>)
 8014234:	f44f 7291 	mov.w	r2, #290	; 0x122
 8014238:	490d      	ldr	r1, [pc, #52]	; (8014270 <pbuf_alloc+0x1e4>)
 801423a:	480b      	ldr	r0, [pc, #44]	; (8014268 <pbuf_alloc+0x1dc>)
 801423c:	f00a fff6 	bl	801f22c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014240:	e008      	b.n	8014254 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014242:	4b07      	ldr	r3, [pc, #28]	; (8014260 <pbuf_alloc+0x1d4>)
 8014244:	f240 1227 	movw	r2, #295	; 0x127
 8014248:	490a      	ldr	r1, [pc, #40]	; (8014274 <pbuf_alloc+0x1e8>)
 801424a:	4807      	ldr	r0, [pc, #28]	; (8014268 <pbuf_alloc+0x1dc>)
 801424c:	f00a ffee 	bl	801f22c <iprintf>
      return NULL;
 8014250:	2300      	movs	r3, #0
 8014252:	e001      	b.n	8014258 <pbuf_alloc+0x1cc>
      break;
 8014254:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014258:	4618      	mov	r0, r3
 801425a:	3728      	adds	r7, #40	; 0x28
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	08024894 	.word	0x08024894
 8014264:	080248c4 	.word	0x080248c4
 8014268:	080248f4 	.word	0x080248f4
 801426c:	0802491c 	.word	0x0802491c
 8014270:	08024950 	.word	0x08024950
 8014274:	0802497c 	.word	0x0802497c

08014278 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b086      	sub	sp, #24
 801427c:	af02      	add	r7, sp, #8
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	460b      	mov	r3, r1
 8014282:	807b      	strh	r3, [r7, #2]
 8014284:	4613      	mov	r3, r2
 8014286:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014288:	883b      	ldrh	r3, [r7, #0]
 801428a:	2b41      	cmp	r3, #65	; 0x41
 801428c:	d009      	beq.n	80142a2 <pbuf_alloc_reference+0x2a>
 801428e:	883b      	ldrh	r3, [r7, #0]
 8014290:	2b01      	cmp	r3, #1
 8014292:	d006      	beq.n	80142a2 <pbuf_alloc_reference+0x2a>
 8014294:	4b0f      	ldr	r3, [pc, #60]	; (80142d4 <pbuf_alloc_reference+0x5c>)
 8014296:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801429a:	490f      	ldr	r1, [pc, #60]	; (80142d8 <pbuf_alloc_reference+0x60>)
 801429c:	480f      	ldr	r0, [pc, #60]	; (80142dc <pbuf_alloc_reference+0x64>)
 801429e:	f00a ffc5 	bl	801f22c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80142a2:	200b      	movs	r0, #11
 80142a4:	f7ff fb44 	bl	8013930 <memp_malloc>
 80142a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d101      	bne.n	80142b4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80142b0:	2300      	movs	r3, #0
 80142b2:	e00b      	b.n	80142cc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80142b4:	8879      	ldrh	r1, [r7, #2]
 80142b6:	887a      	ldrh	r2, [r7, #2]
 80142b8:	2300      	movs	r3, #0
 80142ba:	9301      	str	r3, [sp, #4]
 80142bc:	883b      	ldrh	r3, [r7, #0]
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	460b      	mov	r3, r1
 80142c2:	6879      	ldr	r1, [r7, #4]
 80142c4:	68f8      	ldr	r0, [r7, #12]
 80142c6:	f7ff feb7 	bl	8014038 <pbuf_init_alloced_pbuf>
  return p;
 80142ca:	68fb      	ldr	r3, [r7, #12]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3710      	adds	r7, #16
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	08024894 	.word	0x08024894
 80142d8:	08024998 	.word	0x08024998
 80142dc:	080248f4 	.word	0x080248f4

080142e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b088      	sub	sp, #32
 80142e4:	af02      	add	r7, sp, #8
 80142e6:	607b      	str	r3, [r7, #4]
 80142e8:	4603      	mov	r3, r0
 80142ea:	73fb      	strb	r3, [r7, #15]
 80142ec:	460b      	mov	r3, r1
 80142ee:	81bb      	strh	r3, [r7, #12]
 80142f0:	4613      	mov	r3, r2
 80142f2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80142f4:	7bfb      	ldrb	r3, [r7, #15]
 80142f6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80142f8:	8a7b      	ldrh	r3, [r7, #18]
 80142fa:	3303      	adds	r3, #3
 80142fc:	f023 0203 	bic.w	r2, r3, #3
 8014300:	89bb      	ldrh	r3, [r7, #12]
 8014302:	441a      	add	r2, r3
 8014304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014306:	429a      	cmp	r2, r3
 8014308:	d901      	bls.n	801430e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801430a:	2300      	movs	r3, #0
 801430c:	e018      	b.n	8014340 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801430e:	6a3b      	ldr	r3, [r7, #32]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d007      	beq.n	8014324 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014314:	8a7b      	ldrh	r3, [r7, #18]
 8014316:	3303      	adds	r3, #3
 8014318:	f023 0303 	bic.w	r3, r3, #3
 801431c:	6a3a      	ldr	r2, [r7, #32]
 801431e:	4413      	add	r3, r2
 8014320:	617b      	str	r3, [r7, #20]
 8014322:	e001      	b.n	8014328 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014324:	2300      	movs	r3, #0
 8014326:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	89b9      	ldrh	r1, [r7, #12]
 801432c:	89ba      	ldrh	r2, [r7, #12]
 801432e:	2302      	movs	r3, #2
 8014330:	9301      	str	r3, [sp, #4]
 8014332:	897b      	ldrh	r3, [r7, #10]
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	460b      	mov	r3, r1
 8014338:	6979      	ldr	r1, [r7, #20]
 801433a:	f7ff fe7d 	bl	8014038 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801433e:	687b      	ldr	r3, [r7, #4]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	460b      	mov	r3, r1
 8014352:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <pbuf_realloc+0x20>
 801435a:	4b3a      	ldr	r3, [pc, #232]	; (8014444 <pbuf_realloc+0xfc>)
 801435c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014360:	4939      	ldr	r1, [pc, #228]	; (8014448 <pbuf_realloc+0x100>)
 8014362:	483a      	ldr	r0, [pc, #232]	; (801444c <pbuf_realloc+0x104>)
 8014364:	f00a ff62 	bl	801f22c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	891b      	ldrh	r3, [r3, #8]
 801436c:	887a      	ldrh	r2, [r7, #2]
 801436e:	429a      	cmp	r2, r3
 8014370:	d263      	bcs.n	801443a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	891a      	ldrh	r2, [r3, #8]
 8014376:	887b      	ldrh	r3, [r7, #2]
 8014378:	1ad3      	subs	r3, r2, r3
 801437a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801437c:	887b      	ldrh	r3, [r7, #2]
 801437e:	817b      	strh	r3, [r7, #10]
  q = p;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014384:	e018      	b.n	80143b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	895b      	ldrh	r3, [r3, #10]
 801438a:	897a      	ldrh	r2, [r7, #10]
 801438c:	1ad3      	subs	r3, r2, r3
 801438e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	891a      	ldrh	r2, [r3, #8]
 8014394:	893b      	ldrh	r3, [r7, #8]
 8014396:	1ad3      	subs	r3, r2, r3
 8014398:	b29a      	uxth	r2, r3
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d106      	bne.n	80143b8 <pbuf_realloc+0x70>
 80143aa:	4b26      	ldr	r3, [pc, #152]	; (8014444 <pbuf_realloc+0xfc>)
 80143ac:	f240 12af 	movw	r2, #431	; 0x1af
 80143b0:	4927      	ldr	r1, [pc, #156]	; (8014450 <pbuf_realloc+0x108>)
 80143b2:	4826      	ldr	r0, [pc, #152]	; (801444c <pbuf_realloc+0x104>)
 80143b4:	f00a ff3a 	bl	801f22c <iprintf>
  while (rem_len > q->len) {
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	895b      	ldrh	r3, [r3, #10]
 80143bc:	897a      	ldrh	r2, [r7, #10]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d8e1      	bhi.n	8014386 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	7b1b      	ldrb	r3, [r3, #12]
 80143c6:	f003 030f 	and.w	r3, r3, #15
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d121      	bne.n	8014412 <pbuf_realloc+0xca>
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	895b      	ldrh	r3, [r3, #10]
 80143d2:	897a      	ldrh	r2, [r7, #10]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d01c      	beq.n	8014412 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	7b5b      	ldrb	r3, [r3, #13]
 80143dc:	f003 0302 	and.w	r3, r3, #2
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d116      	bne.n	8014412 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	685a      	ldr	r2, [r3, #4]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	897b      	ldrh	r3, [r7, #10]
 80143f0:	4413      	add	r3, r2
 80143f2:	b29b      	uxth	r3, r3
 80143f4:	4619      	mov	r1, r3
 80143f6:	68f8      	ldr	r0, [r7, #12]
 80143f8:	f7ff f80e 	bl	8013418 <mem_trim>
 80143fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d106      	bne.n	8014412 <pbuf_realloc+0xca>
 8014404:	4b0f      	ldr	r3, [pc, #60]	; (8014444 <pbuf_realloc+0xfc>)
 8014406:	f240 12bd 	movw	r2, #445	; 0x1bd
 801440a:	4912      	ldr	r1, [pc, #72]	; (8014454 <pbuf_realloc+0x10c>)
 801440c:	480f      	ldr	r0, [pc, #60]	; (801444c <pbuf_realloc+0x104>)
 801440e:	f00a ff0d 	bl	801f22c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	897a      	ldrh	r2, [r7, #10]
 8014416:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	895a      	ldrh	r2, [r3, #10]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d004      	beq.n	8014432 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4618      	mov	r0, r3
 801442e:	f000 f911 	bl	8014654 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2200      	movs	r2, #0
 8014436:	601a      	str	r2, [r3, #0]
 8014438:	e000      	b.n	801443c <pbuf_realloc+0xf4>
    return;
 801443a:	bf00      	nop

}
 801443c:	3710      	adds	r7, #16
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	08024894 	.word	0x08024894
 8014448:	080249ac 	.word	0x080249ac
 801444c:	080248f4 	.word	0x080248f4
 8014450:	080249c4 	.word	0x080249c4
 8014454:	080249dc 	.word	0x080249dc

08014458 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	4613      	mov	r3, r2
 8014464:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d106      	bne.n	801447a <pbuf_add_header_impl+0x22>
 801446c:	4b2b      	ldr	r3, [pc, #172]	; (801451c <pbuf_add_header_impl+0xc4>)
 801446e:	f240 12df 	movw	r2, #479	; 0x1df
 8014472:	492b      	ldr	r1, [pc, #172]	; (8014520 <pbuf_add_header_impl+0xc8>)
 8014474:	482b      	ldr	r0, [pc, #172]	; (8014524 <pbuf_add_header_impl+0xcc>)
 8014476:	f00a fed9 	bl	801f22c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d003      	beq.n	8014488 <pbuf_add_header_impl+0x30>
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014486:	d301      	bcc.n	801448c <pbuf_add_header_impl+0x34>
    return 1;
 8014488:	2301      	movs	r3, #1
 801448a:	e043      	b.n	8014514 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d101      	bne.n	8014496 <pbuf_add_header_impl+0x3e>
    return 0;
 8014492:	2300      	movs	r3, #0
 8014494:	e03e      	b.n	8014514 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	891a      	ldrh	r2, [r3, #8]
 801449e:	8a7b      	ldrh	r3, [r7, #18]
 80144a0:	4413      	add	r3, r2
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	8a7a      	ldrh	r2, [r7, #18]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d901      	bls.n	80144ae <pbuf_add_header_impl+0x56>
    return 1;
 80144aa:	2301      	movs	r3, #1
 80144ac:	e032      	b.n	8014514 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	7b1b      	ldrb	r3, [r3, #12]
 80144b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80144b4:	8a3b      	ldrh	r3, [r7, #16]
 80144b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00c      	beq.n	80144d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	685a      	ldr	r2, [r3, #4]
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	425b      	negs	r3, r3
 80144c6:	4413      	add	r3, r2
 80144c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	3310      	adds	r3, #16
 80144ce:	697a      	ldr	r2, [r7, #20]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d20d      	bcs.n	80144f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80144d4:	2301      	movs	r3, #1
 80144d6:	e01d      	b.n	8014514 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80144d8:	79fb      	ldrb	r3, [r7, #7]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d006      	beq.n	80144ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	685a      	ldr	r2, [r3, #4]
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	425b      	negs	r3, r3
 80144e6:	4413      	add	r3, r2
 80144e8:	617b      	str	r3, [r7, #20]
 80144ea:	e001      	b.n	80144f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e011      	b.n	8014514 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	697a      	ldr	r2, [r7, #20]
 80144f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	895a      	ldrh	r2, [r3, #10]
 80144fa:	8a7b      	ldrh	r3, [r7, #18]
 80144fc:	4413      	add	r3, r2
 80144fe:	b29a      	uxth	r2, r3
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	891a      	ldrh	r2, [r3, #8]
 8014508:	8a7b      	ldrh	r3, [r7, #18]
 801450a:	4413      	add	r3, r2
 801450c:	b29a      	uxth	r2, r3
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	811a      	strh	r2, [r3, #8]


  return 0;
 8014512:	2300      	movs	r3, #0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3718      	adds	r7, #24
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	08024894 	.word	0x08024894
 8014520:	080249f8 	.word	0x080249f8
 8014524:	080248f4 	.word	0x080248f4

08014528 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014532:	2200      	movs	r2, #0
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7ff ff8e 	bl	8014458 <pbuf_add_header_impl>
 801453c:	4603      	mov	r3, r0
}
 801453e:	4618      	mov	r0, r3
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
	...

08014548 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d106      	bne.n	8014566 <pbuf_remove_header+0x1e>
 8014558:	4b20      	ldr	r3, [pc, #128]	; (80145dc <pbuf_remove_header+0x94>)
 801455a:	f240 224b 	movw	r2, #587	; 0x24b
 801455e:	4920      	ldr	r1, [pc, #128]	; (80145e0 <pbuf_remove_header+0x98>)
 8014560:	4820      	ldr	r0, [pc, #128]	; (80145e4 <pbuf_remove_header+0x9c>)
 8014562:	f00a fe63 	bl	801f22c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d003      	beq.n	8014574 <pbuf_remove_header+0x2c>
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014572:	d301      	bcc.n	8014578 <pbuf_remove_header+0x30>
    return 1;
 8014574:	2301      	movs	r3, #1
 8014576:	e02c      	b.n	80145d2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d101      	bne.n	8014582 <pbuf_remove_header+0x3a>
    return 0;
 801457e:	2300      	movs	r3, #0
 8014580:	e027      	b.n	80145d2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	895b      	ldrh	r3, [r3, #10]
 801458a:	89fa      	ldrh	r2, [r7, #14]
 801458c:	429a      	cmp	r2, r3
 801458e:	d908      	bls.n	80145a2 <pbuf_remove_header+0x5a>
 8014590:	4b12      	ldr	r3, [pc, #72]	; (80145dc <pbuf_remove_header+0x94>)
 8014592:	f240 2255 	movw	r2, #597	; 0x255
 8014596:	4914      	ldr	r1, [pc, #80]	; (80145e8 <pbuf_remove_header+0xa0>)
 8014598:	4812      	ldr	r0, [pc, #72]	; (80145e4 <pbuf_remove_header+0x9c>)
 801459a:	f00a fe47 	bl	801f22c <iprintf>
 801459e:	2301      	movs	r3, #1
 80145a0:	e017      	b.n	80145d2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	685a      	ldr	r2, [r3, #4]
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	441a      	add	r2, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	895a      	ldrh	r2, [r3, #10]
 80145b8:	89fb      	ldrh	r3, [r7, #14]
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	b29a      	uxth	r2, r3
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	891a      	ldrh	r2, [r3, #8]
 80145c6:	89fb      	ldrh	r3, [r7, #14]
 80145c8:	1ad3      	subs	r3, r2, r3
 80145ca:	b29a      	uxth	r2, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3710      	adds	r7, #16
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	08024894 	.word	0x08024894
 80145e0:	080249f8 	.word	0x080249f8
 80145e4:	080248f4 	.word	0x080248f4
 80145e8:	08024a04 	.word	0x08024a04

080145ec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	460b      	mov	r3, r1
 80145f6:	807b      	strh	r3, [r7, #2]
 80145f8:	4613      	mov	r3, r2
 80145fa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80145fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014600:	2b00      	cmp	r3, #0
 8014602:	da08      	bge.n	8014616 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014608:	425b      	negs	r3, r3
 801460a:	4619      	mov	r1, r3
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f7ff ff9b 	bl	8014548 <pbuf_remove_header>
 8014612:	4603      	mov	r3, r0
 8014614:	e007      	b.n	8014626 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014616:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801461a:	787a      	ldrb	r2, [r7, #1]
 801461c:	4619      	mov	r1, r3
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f7ff ff1a 	bl	8014458 <pbuf_add_header_impl>
 8014624:	4603      	mov	r3, r0
  }
}
 8014626:	4618      	mov	r0, r3
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b082      	sub	sp, #8
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
 8014636:	460b      	mov	r3, r1
 8014638:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801463a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801463e:	2201      	movs	r2, #1
 8014640:	4619      	mov	r1, r3
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff ffd2 	bl	80145ec <pbuf_header_impl>
 8014648:	4603      	mov	r3, r0
}
 801464a:	4618      	mov	r0, r3
 801464c:	3708      	adds	r7, #8
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
	...

08014654 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b088      	sub	sp, #32
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d10b      	bne.n	801467a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d106      	bne.n	8014676 <pbuf_free+0x22>
 8014668:	4b3b      	ldr	r3, [pc, #236]	; (8014758 <pbuf_free+0x104>)
 801466a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801466e:	493b      	ldr	r1, [pc, #236]	; (801475c <pbuf_free+0x108>)
 8014670:	483b      	ldr	r0, [pc, #236]	; (8014760 <pbuf_free+0x10c>)
 8014672:	f00a fddb 	bl	801f22c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014676:	2300      	movs	r3, #0
 8014678:	e069      	b.n	801474e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801467e:	e062      	b.n	8014746 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014680:	f009 fd32 	bl	801e0e8 <sys_arch_protect>
 8014684:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	7b9b      	ldrb	r3, [r3, #14]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d106      	bne.n	801469c <pbuf_free+0x48>
 801468e:	4b32      	ldr	r3, [pc, #200]	; (8014758 <pbuf_free+0x104>)
 8014690:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014694:	4933      	ldr	r1, [pc, #204]	; (8014764 <pbuf_free+0x110>)
 8014696:	4832      	ldr	r0, [pc, #200]	; (8014760 <pbuf_free+0x10c>)
 8014698:	f00a fdc8 	bl	801f22c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	7b9b      	ldrb	r3, [r3, #14]
 80146a0:	3b01      	subs	r3, #1
 80146a2:	b2da      	uxtb	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	739a      	strb	r2, [r3, #14]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	7b9b      	ldrb	r3, [r3, #14]
 80146ac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80146ae:	69b8      	ldr	r0, [r7, #24]
 80146b0:	f009 fd28 	bl	801e104 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80146b4:	7dfb      	ldrb	r3, [r7, #23]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d143      	bne.n	8014742 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	7b1b      	ldrb	r3, [r3, #12]
 80146c4:	f003 030f 	and.w	r3, r3, #15
 80146c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	7b5b      	ldrb	r3, [r3, #13]
 80146ce:	f003 0302 	and.w	r3, r3, #2
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d011      	beq.n	80146fa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d106      	bne.n	80146f0 <pbuf_free+0x9c>
 80146e2:	4b1d      	ldr	r3, [pc, #116]	; (8014758 <pbuf_free+0x104>)
 80146e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80146e8:	491f      	ldr	r1, [pc, #124]	; (8014768 <pbuf_free+0x114>)
 80146ea:	481d      	ldr	r0, [pc, #116]	; (8014760 <pbuf_free+0x10c>)
 80146ec:	f00a fd9e 	bl	801f22c <iprintf>
        pc->custom_free_function(p);
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	4798      	blx	r3
 80146f8:	e01d      	b.n	8014736 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80146fa:	7bfb      	ldrb	r3, [r7, #15]
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d104      	bne.n	801470a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014700:	6879      	ldr	r1, [r7, #4]
 8014702:	200c      	movs	r0, #12
 8014704:	f7ff f966 	bl	80139d4 <memp_free>
 8014708:	e015      	b.n	8014736 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801470a:	7bfb      	ldrb	r3, [r7, #15]
 801470c:	2b01      	cmp	r3, #1
 801470e:	d104      	bne.n	801471a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014710:	6879      	ldr	r1, [r7, #4]
 8014712:	200b      	movs	r0, #11
 8014714:	f7ff f95e 	bl	80139d4 <memp_free>
 8014718:	e00d      	b.n	8014736 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801471a:	7bfb      	ldrb	r3, [r7, #15]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d103      	bne.n	8014728 <pbuf_free+0xd4>
          mem_free(p);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7fe fde9 	bl	80132f8 <mem_free>
 8014726:	e006      	b.n	8014736 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014728:	4b0b      	ldr	r3, [pc, #44]	; (8014758 <pbuf_free+0x104>)
 801472a:	f240 320f 	movw	r2, #783	; 0x30f
 801472e:	490f      	ldr	r1, [pc, #60]	; (801476c <pbuf_free+0x118>)
 8014730:	480b      	ldr	r0, [pc, #44]	; (8014760 <pbuf_free+0x10c>)
 8014732:	f00a fd7b 	bl	801f22c <iprintf>
        }
      }
      count++;
 8014736:	7ffb      	ldrb	r3, [r7, #31]
 8014738:	3301      	adds	r3, #1
 801473a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	607b      	str	r3, [r7, #4]
 8014740:	e001      	b.n	8014746 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d199      	bne.n	8014680 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801474c:	7ffb      	ldrb	r3, [r7, #31]
}
 801474e:	4618      	mov	r0, r3
 8014750:	3720      	adds	r7, #32
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	08024894 	.word	0x08024894
 801475c:	080249f8 	.word	0x080249f8
 8014760:	080248f4 	.word	0x080248f4
 8014764:	08024a24 	.word	0x08024a24
 8014768:	08024a3c 	.word	0x08024a3c
 801476c:	08024a60 	.word	0x08024a60

08014770 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014770:	b480      	push	{r7}
 8014772:	b085      	sub	sp, #20
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014778:	2300      	movs	r3, #0
 801477a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801477c:	e005      	b.n	801478a <pbuf_clen+0x1a>
    ++len;
 801477e:	89fb      	ldrh	r3, [r7, #14]
 8014780:	3301      	adds	r3, #1
 8014782:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d1f6      	bne.n	801477e <pbuf_clen+0xe>
  }
  return len;
 8014790:	89fb      	ldrh	r3, [r7, #14]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3714      	adds	r7, #20
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr
	...

080147a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d016      	beq.n	80147dc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80147ae:	f009 fc9b 	bl	801e0e8 <sys_arch_protect>
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	7b9b      	ldrb	r3, [r3, #14]
 80147b8:	3301      	adds	r3, #1
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	739a      	strb	r2, [r3, #14]
 80147c0:	68f8      	ldr	r0, [r7, #12]
 80147c2:	f009 fc9f 	bl	801e104 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	7b9b      	ldrb	r3, [r3, #14]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d106      	bne.n	80147dc <pbuf_ref+0x3c>
 80147ce:	4b05      	ldr	r3, [pc, #20]	; (80147e4 <pbuf_ref+0x44>)
 80147d0:	f240 3242 	movw	r2, #834	; 0x342
 80147d4:	4904      	ldr	r1, [pc, #16]	; (80147e8 <pbuf_ref+0x48>)
 80147d6:	4805      	ldr	r0, [pc, #20]	; (80147ec <pbuf_ref+0x4c>)
 80147d8:	f00a fd28 	bl	801f22c <iprintf>
  }
}
 80147dc:	bf00      	nop
 80147de:	3710      	adds	r7, #16
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}
 80147e4:	08024894 	.word	0x08024894
 80147e8:	08024a74 	.word	0x08024a74
 80147ec:	080248f4 	.word	0x080248f4

080147f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d002      	beq.n	8014806 <pbuf_cat+0x16>
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d107      	bne.n	8014816 <pbuf_cat+0x26>
 8014806:	4b20      	ldr	r3, [pc, #128]	; (8014888 <pbuf_cat+0x98>)
 8014808:	f240 3259 	movw	r2, #857	; 0x359
 801480c:	491f      	ldr	r1, [pc, #124]	; (801488c <pbuf_cat+0x9c>)
 801480e:	4820      	ldr	r0, [pc, #128]	; (8014890 <pbuf_cat+0xa0>)
 8014810:	f00a fd0c 	bl	801f22c <iprintf>
 8014814:	e034      	b.n	8014880 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	60fb      	str	r3, [r7, #12]
 801481a:	e00a      	b.n	8014832 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	891a      	ldrh	r2, [r3, #8]
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	891b      	ldrh	r3, [r3, #8]
 8014824:	4413      	add	r3, r2
 8014826:	b29a      	uxth	r2, r3
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	60fb      	str	r3, [r7, #12]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1f0      	bne.n	801481c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	891a      	ldrh	r2, [r3, #8]
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	895b      	ldrh	r3, [r3, #10]
 8014842:	429a      	cmp	r2, r3
 8014844:	d006      	beq.n	8014854 <pbuf_cat+0x64>
 8014846:	4b10      	ldr	r3, [pc, #64]	; (8014888 <pbuf_cat+0x98>)
 8014848:	f240 3262 	movw	r2, #866	; 0x362
 801484c:	4911      	ldr	r1, [pc, #68]	; (8014894 <pbuf_cat+0xa4>)
 801484e:	4810      	ldr	r0, [pc, #64]	; (8014890 <pbuf_cat+0xa0>)
 8014850:	f00a fcec 	bl	801f22c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d006      	beq.n	801486a <pbuf_cat+0x7a>
 801485c:	4b0a      	ldr	r3, [pc, #40]	; (8014888 <pbuf_cat+0x98>)
 801485e:	f240 3263 	movw	r2, #867	; 0x363
 8014862:	490d      	ldr	r1, [pc, #52]	; (8014898 <pbuf_cat+0xa8>)
 8014864:	480a      	ldr	r0, [pc, #40]	; (8014890 <pbuf_cat+0xa0>)
 8014866:	f00a fce1 	bl	801f22c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	891a      	ldrh	r2, [r3, #8]
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	891b      	ldrh	r3, [r3, #8]
 8014872:	4413      	add	r3, r2
 8014874:	b29a      	uxth	r2, r3
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	683a      	ldr	r2, [r7, #0]
 801487e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014880:	3710      	adds	r7, #16
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	08024894 	.word	0x08024894
 801488c:	08024a88 	.word	0x08024a88
 8014890:	080248f4 	.word	0x080248f4
 8014894:	08024ac0 	.word	0x08024ac0
 8014898:	08024af0 	.word	0x08024af0

0801489c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80148a6:	6839      	ldr	r1, [r7, #0]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7ff ffa1 	bl	80147f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80148ae:	6838      	ldr	r0, [r7, #0]
 80148b0:	f7ff ff76 	bl	80147a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80148b4:	bf00      	nop
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b086      	sub	sp, #24
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80148c6:	2300      	movs	r3, #0
 80148c8:	617b      	str	r3, [r7, #20]
 80148ca:	2300      	movs	r3, #0
 80148cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d008      	beq.n	80148e6 <pbuf_copy+0x2a>
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d005      	beq.n	80148e6 <pbuf_copy+0x2a>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	891a      	ldrh	r2, [r3, #8]
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	891b      	ldrh	r3, [r3, #8]
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d209      	bcs.n	80148fa <pbuf_copy+0x3e>
 80148e6:	4b57      	ldr	r3, [pc, #348]	; (8014a44 <pbuf_copy+0x188>)
 80148e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80148ec:	4956      	ldr	r1, [pc, #344]	; (8014a48 <pbuf_copy+0x18c>)
 80148ee:	4857      	ldr	r0, [pc, #348]	; (8014a4c <pbuf_copy+0x190>)
 80148f0:	f00a fc9c 	bl	801f22c <iprintf>
 80148f4:	f06f 030f 	mvn.w	r3, #15
 80148f8:	e09f      	b.n	8014a3a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	895b      	ldrh	r3, [r3, #10]
 80148fe:	461a      	mov	r2, r3
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	1ad2      	subs	r2, r2, r3
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	895b      	ldrh	r3, [r3, #10]
 8014908:	4619      	mov	r1, r3
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	1acb      	subs	r3, r1, r3
 801490e:	429a      	cmp	r2, r3
 8014910:	d306      	bcc.n	8014920 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	895b      	ldrh	r3, [r3, #10]
 8014916:	461a      	mov	r2, r3
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	60fb      	str	r3, [r7, #12]
 801491e:	e005      	b.n	801492c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	895b      	ldrh	r3, [r3, #10]
 8014924:	461a      	mov	r2, r3
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	1ad3      	subs	r3, r2, r3
 801492a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685a      	ldr	r2, [r3, #4]
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	18d0      	adds	r0, r2, r3
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	685a      	ldr	r2, [r3, #4]
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	4413      	add	r3, r2
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	4619      	mov	r1, r3
 8014940:	f009 fd20 	bl	801e384 <memcpy>
    offset_to += len;
 8014944:	697a      	ldr	r2, [r7, #20]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	4413      	add	r3, r2
 801494a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801494c:	693a      	ldr	r2, [r7, #16]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	4413      	add	r3, r2
 8014952:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	895b      	ldrh	r3, [r3, #10]
 8014958:	461a      	mov	r2, r3
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	4293      	cmp	r3, r2
 801495e:	d906      	bls.n	801496e <pbuf_copy+0xb2>
 8014960:	4b38      	ldr	r3, [pc, #224]	; (8014a44 <pbuf_copy+0x188>)
 8014962:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014966:	493a      	ldr	r1, [pc, #232]	; (8014a50 <pbuf_copy+0x194>)
 8014968:	4838      	ldr	r0, [pc, #224]	; (8014a4c <pbuf_copy+0x190>)
 801496a:	f00a fc5f 	bl	801f22c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	895b      	ldrh	r3, [r3, #10]
 8014972:	461a      	mov	r2, r3
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	4293      	cmp	r3, r2
 8014978:	d906      	bls.n	8014988 <pbuf_copy+0xcc>
 801497a:	4b32      	ldr	r3, [pc, #200]	; (8014a44 <pbuf_copy+0x188>)
 801497c:	f240 32da 	movw	r2, #986	; 0x3da
 8014980:	4934      	ldr	r1, [pc, #208]	; (8014a54 <pbuf_copy+0x198>)
 8014982:	4832      	ldr	r0, [pc, #200]	; (8014a4c <pbuf_copy+0x190>)
 8014984:	f00a fc52 	bl	801f22c <iprintf>
    if (offset_from >= p_from->len) {
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	895b      	ldrh	r3, [r3, #10]
 801498c:	461a      	mov	r2, r3
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	4293      	cmp	r3, r2
 8014992:	d304      	bcc.n	801499e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014994:	2300      	movs	r3, #0
 8014996:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	895b      	ldrh	r3, [r3, #10]
 80149a2:	461a      	mov	r2, r3
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	4293      	cmp	r3, r2
 80149a8:	d114      	bne.n	80149d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80149aa:	2300      	movs	r3, #0
 80149ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d10c      	bne.n	80149d4 <pbuf_copy+0x118>
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d009      	beq.n	80149d4 <pbuf_copy+0x118>
 80149c0:	4b20      	ldr	r3, [pc, #128]	; (8014a44 <pbuf_copy+0x188>)
 80149c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80149c6:	4924      	ldr	r1, [pc, #144]	; (8014a58 <pbuf_copy+0x19c>)
 80149c8:	4820      	ldr	r0, [pc, #128]	; (8014a4c <pbuf_copy+0x190>)
 80149ca:	f00a fc2f 	bl	801f22c <iprintf>
 80149ce:	f06f 030f 	mvn.w	r3, #15
 80149d2:	e032      	b.n	8014a3a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d013      	beq.n	8014a02 <pbuf_copy+0x146>
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	895a      	ldrh	r2, [r3, #10]
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	891b      	ldrh	r3, [r3, #8]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d10d      	bne.n	8014a02 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d009      	beq.n	8014a02 <pbuf_copy+0x146>
 80149ee:	4b15      	ldr	r3, [pc, #84]	; (8014a44 <pbuf_copy+0x188>)
 80149f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80149f4:	4919      	ldr	r1, [pc, #100]	; (8014a5c <pbuf_copy+0x1a0>)
 80149f6:	4815      	ldr	r0, [pc, #84]	; (8014a4c <pbuf_copy+0x190>)
 80149f8:	f00a fc18 	bl	801f22c <iprintf>
 80149fc:	f06f 0305 	mvn.w	r3, #5
 8014a00:	e01b      	b.n	8014a3a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d013      	beq.n	8014a30 <pbuf_copy+0x174>
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	895a      	ldrh	r2, [r3, #10]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	891b      	ldrh	r3, [r3, #8]
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d10d      	bne.n	8014a30 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d009      	beq.n	8014a30 <pbuf_copy+0x174>
 8014a1c:	4b09      	ldr	r3, [pc, #36]	; (8014a44 <pbuf_copy+0x188>)
 8014a1e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014a22:	490e      	ldr	r1, [pc, #56]	; (8014a5c <pbuf_copy+0x1a0>)
 8014a24:	4809      	ldr	r0, [pc, #36]	; (8014a4c <pbuf_copy+0x190>)
 8014a26:	f00a fc01 	bl	801f22c <iprintf>
 8014a2a:	f06f 0305 	mvn.w	r3, #5
 8014a2e:	e004      	b.n	8014a3a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f47f af61 	bne.w	80148fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3718      	adds	r7, #24
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	08024894 	.word	0x08024894
 8014a48:	08024b3c 	.word	0x08024b3c
 8014a4c:	080248f4 	.word	0x080248f4
 8014a50:	08024b6c 	.word	0x08024b6c
 8014a54:	08024b84 	.word	0x08024b84
 8014a58:	08024ba0 	.word	0x08024ba0
 8014a5c:	08024bb0 	.word	0x08024bb0

08014a60 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b088      	sub	sp, #32
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	4611      	mov	r1, r2
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	460b      	mov	r3, r1
 8014a70:	80fb      	strh	r3, [r7, #6]
 8014a72:	4613      	mov	r3, r2
 8014a74:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014a76:	2300      	movs	r3, #0
 8014a78:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d108      	bne.n	8014a96 <pbuf_copy_partial+0x36>
 8014a84:	4b2b      	ldr	r3, [pc, #172]	; (8014b34 <pbuf_copy_partial+0xd4>)
 8014a86:	f240 420a 	movw	r2, #1034	; 0x40a
 8014a8a:	492b      	ldr	r1, [pc, #172]	; (8014b38 <pbuf_copy_partial+0xd8>)
 8014a8c:	482b      	ldr	r0, [pc, #172]	; (8014b3c <pbuf_copy_partial+0xdc>)
 8014a8e:	f00a fbcd 	bl	801f22c <iprintf>
 8014a92:	2300      	movs	r3, #0
 8014a94:	e04a      	b.n	8014b2c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d108      	bne.n	8014aae <pbuf_copy_partial+0x4e>
 8014a9c:	4b25      	ldr	r3, [pc, #148]	; (8014b34 <pbuf_copy_partial+0xd4>)
 8014a9e:	f240 420b 	movw	r2, #1035	; 0x40b
 8014aa2:	4927      	ldr	r1, [pc, #156]	; (8014b40 <pbuf_copy_partial+0xe0>)
 8014aa4:	4825      	ldr	r0, [pc, #148]	; (8014b3c <pbuf_copy_partial+0xdc>)
 8014aa6:	f00a fbc1 	bl	801f22c <iprintf>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	e03e      	b.n	8014b2c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	61fb      	str	r3, [r7, #28]
 8014ab2:	e034      	b.n	8014b1e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014ab4:	88bb      	ldrh	r3, [r7, #4]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d00a      	beq.n	8014ad0 <pbuf_copy_partial+0x70>
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	895b      	ldrh	r3, [r3, #10]
 8014abe:	88ba      	ldrh	r2, [r7, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d305      	bcc.n	8014ad0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	895b      	ldrh	r3, [r3, #10]
 8014ac8:	88ba      	ldrh	r2, [r7, #4]
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	80bb      	strh	r3, [r7, #4]
 8014ace:	e023      	b.n	8014b18 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	895a      	ldrh	r2, [r3, #10]
 8014ad4:	88bb      	ldrh	r3, [r7, #4]
 8014ad6:	1ad3      	subs	r3, r2, r3
 8014ad8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014ada:	8b3a      	ldrh	r2, [r7, #24]
 8014adc:	88fb      	ldrh	r3, [r7, #6]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d901      	bls.n	8014ae6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014ae2:	88fb      	ldrh	r3, [r7, #6]
 8014ae4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014ae6:	8b7b      	ldrh	r3, [r7, #26]
 8014ae8:	68ba      	ldr	r2, [r7, #8]
 8014aea:	18d0      	adds	r0, r2, r3
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	685a      	ldr	r2, [r3, #4]
 8014af0:	88bb      	ldrh	r3, [r7, #4]
 8014af2:	4413      	add	r3, r2
 8014af4:	8b3a      	ldrh	r2, [r7, #24]
 8014af6:	4619      	mov	r1, r3
 8014af8:	f009 fc44 	bl	801e384 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014afc:	8afa      	ldrh	r2, [r7, #22]
 8014afe:	8b3b      	ldrh	r3, [r7, #24]
 8014b00:	4413      	add	r3, r2
 8014b02:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014b04:	8b7a      	ldrh	r2, [r7, #26]
 8014b06:	8b3b      	ldrh	r3, [r7, #24]
 8014b08:	4413      	add	r3, r2
 8014b0a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014b0c:	88fa      	ldrh	r2, [r7, #6]
 8014b0e:	8b3b      	ldrh	r3, [r7, #24]
 8014b10:	1ad3      	subs	r3, r2, r3
 8014b12:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	61fb      	str	r3, [r7, #28]
 8014b1e:	88fb      	ldrh	r3, [r7, #6]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d002      	beq.n	8014b2a <pbuf_copy_partial+0xca>
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d1c4      	bne.n	8014ab4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014b2a:	8afb      	ldrh	r3, [r7, #22]
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3720      	adds	r7, #32
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	08024894 	.word	0x08024894
 8014b38:	08024bdc 	.word	0x08024bdc
 8014b3c:	080248f4 	.word	0x080248f4
 8014b40:	08024bfc 	.word	0x08024bfc

08014b44 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	603a      	str	r2, [r7, #0]
 8014b4e:	71fb      	strb	r3, [r7, #7]
 8014b50:	460b      	mov	r3, r1
 8014b52:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	8919      	ldrh	r1, [r3, #8]
 8014b58:	88ba      	ldrh	r2, [r7, #4]
 8014b5a:	79fb      	ldrb	r3, [r7, #7]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7ff fa95 	bl	801408c <pbuf_alloc>
 8014b62:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d101      	bne.n	8014b6e <pbuf_clone+0x2a>
    return NULL;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	e011      	b.n	8014b92 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014b6e:	6839      	ldr	r1, [r7, #0]
 8014b70:	68f8      	ldr	r0, [r7, #12]
 8014b72:	f7ff fea3 	bl	80148bc <pbuf_copy>
 8014b76:	4603      	mov	r3, r0
 8014b78:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014b7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d006      	beq.n	8014b90 <pbuf_clone+0x4c>
 8014b82:	4b06      	ldr	r3, [pc, #24]	; (8014b9c <pbuf_clone+0x58>)
 8014b84:	f240 5224 	movw	r2, #1316	; 0x524
 8014b88:	4905      	ldr	r1, [pc, #20]	; (8014ba0 <pbuf_clone+0x5c>)
 8014b8a:	4806      	ldr	r0, [pc, #24]	; (8014ba4 <pbuf_clone+0x60>)
 8014b8c:	f00a fb4e 	bl	801f22c <iprintf>
  return q;
 8014b90:	68fb      	ldr	r3, [r7, #12]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3710      	adds	r7, #16
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	08024894 	.word	0x08024894
 8014ba0:	08024d08 	.word	0x08024d08
 8014ba4:	080248f4 	.word	0x080248f4

08014ba8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014bac:	f00a fb56 	bl	801f25c <rand>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	4b01      	ldr	r3, [pc, #4]	; (8014bc8 <tcp_init+0x20>)
 8014bc2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014bc4:	bf00      	nop
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	200003ac 	.word	0x200003ac

08014bcc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b082      	sub	sp, #8
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	7d1b      	ldrb	r3, [r3, #20]
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d105      	bne.n	8014be8 <tcp_free+0x1c>
 8014bdc:	4b06      	ldr	r3, [pc, #24]	; (8014bf8 <tcp_free+0x2c>)
 8014bde:	22d4      	movs	r2, #212	; 0xd4
 8014be0:	4906      	ldr	r1, [pc, #24]	; (8014bfc <tcp_free+0x30>)
 8014be2:	4807      	ldr	r0, [pc, #28]	; (8014c00 <tcp_free+0x34>)
 8014be4:	f00a fb22 	bl	801f22c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014be8:	6879      	ldr	r1, [r7, #4]
 8014bea:	2001      	movs	r0, #1
 8014bec:	f7fe fef2 	bl	80139d4 <memp_free>
}
 8014bf0:	bf00      	nop
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	08024d94 	.word	0x08024d94
 8014bfc:	08024dc4 	.word	0x08024dc4
 8014c00:	08024dd8 	.word	0x08024dd8

08014c04 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	7d1b      	ldrb	r3, [r3, #20]
 8014c10:	2b01      	cmp	r3, #1
 8014c12:	d105      	bne.n	8014c20 <tcp_free_listen+0x1c>
 8014c14:	4b06      	ldr	r3, [pc, #24]	; (8014c30 <tcp_free_listen+0x2c>)
 8014c16:	22df      	movs	r2, #223	; 0xdf
 8014c18:	4906      	ldr	r1, [pc, #24]	; (8014c34 <tcp_free_listen+0x30>)
 8014c1a:	4807      	ldr	r0, [pc, #28]	; (8014c38 <tcp_free_listen+0x34>)
 8014c1c:	f00a fb06 	bl	801f22c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014c20:	6879      	ldr	r1, [r7, #4]
 8014c22:	2002      	movs	r0, #2
 8014c24:	f7fe fed6 	bl	80139d4 <memp_free>
}
 8014c28:	bf00      	nop
 8014c2a:	3708      	adds	r7, #8
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	08024d94 	.word	0x08024d94
 8014c34:	08024e00 	.word	0x08024e00
 8014c38:	08024dd8 	.word	0x08024dd8

08014c3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014c40:	f000 ffdc 	bl	8015bfc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014c44:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <tcp_tmr+0x28>)
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	b2da      	uxtb	r2, r3
 8014c4c:	4b05      	ldr	r3, [pc, #20]	; (8014c64 <tcp_tmr+0x28>)
 8014c4e:	701a      	strb	r2, [r3, #0]
 8014c50:	4b04      	ldr	r3, [pc, #16]	; (8014c64 <tcp_tmr+0x28>)
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	f003 0301 	and.w	r3, r3, #1
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d001      	beq.n	8014c60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014c5c:	f000 fc8e 	bl	801557c <tcp_slowtmr>
  }
}
 8014c60:	bf00      	nop
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	20006e11 	.word	0x20006e11

08014c68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d105      	bne.n	8014c84 <tcp_remove_listener+0x1c>
 8014c78:	4b0d      	ldr	r3, [pc, #52]	; (8014cb0 <tcp_remove_listener+0x48>)
 8014c7a:	22ff      	movs	r2, #255	; 0xff
 8014c7c:	490d      	ldr	r1, [pc, #52]	; (8014cb4 <tcp_remove_listener+0x4c>)
 8014c7e:	480e      	ldr	r0, [pc, #56]	; (8014cb8 <tcp_remove_listener+0x50>)
 8014c80:	f00a fad4 	bl	801f22c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	60fb      	str	r3, [r7, #12]
 8014c88:	e00a      	b.n	8014ca0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c8e:	683a      	ldr	r2, [r7, #0]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d102      	bne.n	8014c9a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2200      	movs	r2, #0
 8014c98:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	68db      	ldr	r3, [r3, #12]
 8014c9e:	60fb      	str	r3, [r7, #12]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1f1      	bne.n	8014c8a <tcp_remove_listener+0x22>
    }
  }
}
 8014ca6:	bf00      	nop
 8014ca8:	bf00      	nop
 8014caa:	3710      	adds	r7, #16
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	08024d94 	.word	0x08024d94
 8014cb4:	08024e1c 	.word	0x08024e1c
 8014cb8:	08024dd8 	.word	0x08024dd8

08014cbc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d106      	bne.n	8014cd8 <tcp_listen_closed+0x1c>
 8014cca:	4b14      	ldr	r3, [pc, #80]	; (8014d1c <tcp_listen_closed+0x60>)
 8014ccc:	f240 1211 	movw	r2, #273	; 0x111
 8014cd0:	4913      	ldr	r1, [pc, #76]	; (8014d20 <tcp_listen_closed+0x64>)
 8014cd2:	4814      	ldr	r0, [pc, #80]	; (8014d24 <tcp_listen_closed+0x68>)
 8014cd4:	f00a faaa 	bl	801f22c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	7d1b      	ldrb	r3, [r3, #20]
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d006      	beq.n	8014cee <tcp_listen_closed+0x32>
 8014ce0:	4b0e      	ldr	r3, [pc, #56]	; (8014d1c <tcp_listen_closed+0x60>)
 8014ce2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014ce6:	4910      	ldr	r1, [pc, #64]	; (8014d28 <tcp_listen_closed+0x6c>)
 8014ce8:	480e      	ldr	r0, [pc, #56]	; (8014d24 <tcp_listen_closed+0x68>)
 8014cea:	f00a fa9f 	bl	801f22c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014cee:	2301      	movs	r3, #1
 8014cf0:	60fb      	str	r3, [r7, #12]
 8014cf2:	e00b      	b.n	8014d0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014cf4:	4a0d      	ldr	r2, [pc, #52]	; (8014d2c <tcp_listen_closed+0x70>)
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	6879      	ldr	r1, [r7, #4]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7ff ffb1 	bl	8014c68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	60fb      	str	r3, [r7, #12]
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b03      	cmp	r3, #3
 8014d10:	d9f0      	bls.n	8014cf4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014d12:	bf00      	nop
 8014d14:	bf00      	nop
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}
 8014d1c:	08024d94 	.word	0x08024d94
 8014d20:	08024e44 	.word	0x08024e44
 8014d24:	08024dd8 	.word	0x08024dd8
 8014d28:	08024e50 	.word	0x08024e50
 8014d2c:	08026f78 	.word	0x08026f78

08014d30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014d30:	b5b0      	push	{r4, r5, r7, lr}
 8014d32:	b088      	sub	sp, #32
 8014d34:	af04      	add	r7, sp, #16
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	460b      	mov	r3, r1
 8014d3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d106      	bne.n	8014d50 <tcp_close_shutdown+0x20>
 8014d42:	4b63      	ldr	r3, [pc, #396]	; (8014ed0 <tcp_close_shutdown+0x1a0>)
 8014d44:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014d48:	4962      	ldr	r1, [pc, #392]	; (8014ed4 <tcp_close_shutdown+0x1a4>)
 8014d4a:	4863      	ldr	r0, [pc, #396]	; (8014ed8 <tcp_close_shutdown+0x1a8>)
 8014d4c:	f00a fa6e 	bl	801f22c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014d50:	78fb      	ldrb	r3, [r7, #3]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d066      	beq.n	8014e24 <tcp_close_shutdown+0xf4>
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	7d1b      	ldrb	r3, [r3, #20]
 8014d5a:	2b04      	cmp	r3, #4
 8014d5c:	d003      	beq.n	8014d66 <tcp_close_shutdown+0x36>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	7d1b      	ldrb	r3, [r3, #20]
 8014d62:	2b07      	cmp	r3, #7
 8014d64:	d15e      	bne.n	8014e24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d104      	bne.n	8014d78 <tcp_close_shutdown+0x48>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014d76:	d055      	beq.n	8014e24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	8b5b      	ldrh	r3, [r3, #26]
 8014d7c:	f003 0310 	and.w	r3, r3, #16
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d106      	bne.n	8014d92 <tcp_close_shutdown+0x62>
 8014d84:	4b52      	ldr	r3, [pc, #328]	; (8014ed0 <tcp_close_shutdown+0x1a0>)
 8014d86:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014d8a:	4954      	ldr	r1, [pc, #336]	; (8014edc <tcp_close_shutdown+0x1ac>)
 8014d8c:	4852      	ldr	r0, [pc, #328]	; (8014ed8 <tcp_close_shutdown+0x1a8>)
 8014d8e:	f00a fa4d 	bl	801f22c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014d9a:	687d      	ldr	r5, [r7, #4]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	8ad2      	ldrh	r2, [r2, #22]
 8014da4:	6879      	ldr	r1, [r7, #4]
 8014da6:	8b09      	ldrh	r1, [r1, #24]
 8014da8:	9102      	str	r1, [sp, #8]
 8014daa:	9201      	str	r2, [sp, #4]
 8014dac:	9300      	str	r3, [sp, #0]
 8014dae:	462b      	mov	r3, r5
 8014db0:	4622      	mov	r2, r4
 8014db2:	4601      	mov	r1, r0
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f005 fced 	bl	801a794 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f001 face 	bl	801635c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014dc0:	4b47      	ldr	r3, [pc, #284]	; (8014ee0 <tcp_close_shutdown+0x1b0>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d105      	bne.n	8014dd6 <tcp_close_shutdown+0xa6>
 8014dca:	4b45      	ldr	r3, [pc, #276]	; (8014ee0 <tcp_close_shutdown+0x1b0>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	4a43      	ldr	r2, [pc, #268]	; (8014ee0 <tcp_close_shutdown+0x1b0>)
 8014dd2:	6013      	str	r3, [r2, #0]
 8014dd4:	e013      	b.n	8014dfe <tcp_close_shutdown+0xce>
 8014dd6:	4b42      	ldr	r3, [pc, #264]	; (8014ee0 <tcp_close_shutdown+0x1b0>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	60fb      	str	r3, [r7, #12]
 8014ddc:	e00c      	b.n	8014df8 <tcp_close_shutdown+0xc8>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	68db      	ldr	r3, [r3, #12]
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d104      	bne.n	8014df2 <tcp_close_shutdown+0xc2>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	68da      	ldr	r2, [r3, #12]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	60da      	str	r2, [r3, #12]
 8014df0:	e005      	b.n	8014dfe <tcp_close_shutdown+0xce>
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	60fb      	str	r3, [r7, #12]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d1ef      	bne.n	8014dde <tcp_close_shutdown+0xae>
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2200      	movs	r2, #0
 8014e02:	60da      	str	r2, [r3, #12]
 8014e04:	4b37      	ldr	r3, [pc, #220]	; (8014ee4 <tcp_close_shutdown+0x1b4>)
 8014e06:	2201      	movs	r2, #1
 8014e08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014e0a:	4b37      	ldr	r3, [pc, #220]	; (8014ee8 <tcp_close_shutdown+0x1b8>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	687a      	ldr	r2, [r7, #4]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d102      	bne.n	8014e1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014e14:	f003 ff62 	bl	8018cdc <tcp_trigger_input_pcb_close>
 8014e18:	e002      	b.n	8014e20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f7ff fed6 	bl	8014bcc <tcp_free>
      }
      return ERR_OK;
 8014e20:	2300      	movs	r3, #0
 8014e22:	e050      	b.n	8014ec6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	7d1b      	ldrb	r3, [r3, #20]
 8014e28:	2b02      	cmp	r3, #2
 8014e2a:	d03b      	beq.n	8014ea4 <tcp_close_shutdown+0x174>
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	dc44      	bgt.n	8014eba <tcp_close_shutdown+0x18a>
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d002      	beq.n	8014e3a <tcp_close_shutdown+0x10a>
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d02a      	beq.n	8014e8e <tcp_close_shutdown+0x15e>
 8014e38:	e03f      	b.n	8014eba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	8adb      	ldrh	r3, [r3, #22]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d021      	beq.n	8014e86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014e42:	4b2a      	ldr	r3, [pc, #168]	; (8014eec <tcp_close_shutdown+0x1bc>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d105      	bne.n	8014e58 <tcp_close_shutdown+0x128>
 8014e4c:	4b27      	ldr	r3, [pc, #156]	; (8014eec <tcp_close_shutdown+0x1bc>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	68db      	ldr	r3, [r3, #12]
 8014e52:	4a26      	ldr	r2, [pc, #152]	; (8014eec <tcp_close_shutdown+0x1bc>)
 8014e54:	6013      	str	r3, [r2, #0]
 8014e56:	e013      	b.n	8014e80 <tcp_close_shutdown+0x150>
 8014e58:	4b24      	ldr	r3, [pc, #144]	; (8014eec <tcp_close_shutdown+0x1bc>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	60bb      	str	r3, [r7, #8]
 8014e5e:	e00c      	b.n	8014e7a <tcp_close_shutdown+0x14a>
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	68db      	ldr	r3, [r3, #12]
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d104      	bne.n	8014e74 <tcp_close_shutdown+0x144>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	68da      	ldr	r2, [r3, #12]
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	60da      	str	r2, [r3, #12]
 8014e72:	e005      	b.n	8014e80 <tcp_close_shutdown+0x150>
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	60bb      	str	r3, [r7, #8]
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d1ef      	bne.n	8014e60 <tcp_close_shutdown+0x130>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2200      	movs	r2, #0
 8014e84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7ff fea0 	bl	8014bcc <tcp_free>
      break;
 8014e8c:	e01a      	b.n	8014ec4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7ff ff14 	bl	8014cbc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014e94:	6879      	ldr	r1, [r7, #4]
 8014e96:	4816      	ldr	r0, [pc, #88]	; (8014ef0 <tcp_close_shutdown+0x1c0>)
 8014e98:	f001 fab0 	bl	80163fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f7ff feb1 	bl	8014c04 <tcp_free_listen>
      break;
 8014ea2:	e00f      	b.n	8014ec4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014ea4:	6879      	ldr	r1, [r7, #4]
 8014ea6:	480e      	ldr	r0, [pc, #56]	; (8014ee0 <tcp_close_shutdown+0x1b0>)
 8014ea8:	f001 faa8 	bl	80163fc <tcp_pcb_remove>
 8014eac:	4b0d      	ldr	r3, [pc, #52]	; (8014ee4 <tcp_close_shutdown+0x1b4>)
 8014eae:	2201      	movs	r2, #1
 8014eb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff fe8a 	bl	8014bcc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014eb8:	e004      	b.n	8014ec4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 f81a 	bl	8014ef4 <tcp_close_shutdown_fin>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	e000      	b.n	8014ec6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014ec4:	2300      	movs	r3, #0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3710      	adds	r7, #16
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	08024d94 	.word	0x08024d94
 8014ed4:	08024e68 	.word	0x08024e68
 8014ed8:	08024dd8 	.word	0x08024dd8
 8014edc:	08024e88 	.word	0x08024e88
 8014ee0:	2000e170 	.word	0x2000e170
 8014ee4:	2000e16c 	.word	0x2000e16c
 8014ee8:	2000e184 	.word	0x2000e184
 8014eec:	2000e17c 	.word	0x2000e17c
 8014ef0:	2000e178 	.word	0x2000e178

08014ef4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d106      	bne.n	8014f10 <tcp_close_shutdown_fin+0x1c>
 8014f02:	4b2e      	ldr	r3, [pc, #184]	; (8014fbc <tcp_close_shutdown_fin+0xc8>)
 8014f04:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014f08:	492d      	ldr	r1, [pc, #180]	; (8014fc0 <tcp_close_shutdown_fin+0xcc>)
 8014f0a:	482e      	ldr	r0, [pc, #184]	; (8014fc4 <tcp_close_shutdown_fin+0xd0>)
 8014f0c:	f00a f98e 	bl	801f22c <iprintf>

  switch (pcb->state) {
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	7d1b      	ldrb	r3, [r3, #20]
 8014f14:	2b07      	cmp	r3, #7
 8014f16:	d020      	beq.n	8014f5a <tcp_close_shutdown_fin+0x66>
 8014f18:	2b07      	cmp	r3, #7
 8014f1a:	dc2b      	bgt.n	8014f74 <tcp_close_shutdown_fin+0x80>
 8014f1c:	2b03      	cmp	r3, #3
 8014f1e:	d002      	beq.n	8014f26 <tcp_close_shutdown_fin+0x32>
 8014f20:	2b04      	cmp	r3, #4
 8014f22:	d00d      	beq.n	8014f40 <tcp_close_shutdown_fin+0x4c>
 8014f24:	e026      	b.n	8014f74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f004 fd42 	bl	80199b0 <tcp_send_fin>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d11f      	bne.n	8014f78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2205      	movs	r2, #5
 8014f3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014f3e:	e01b      	b.n	8014f78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f004 fd35 	bl	80199b0 <tcp_send_fin>
 8014f46:	4603      	mov	r3, r0
 8014f48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d114      	bne.n	8014f7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2205      	movs	r2, #5
 8014f56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014f58:	e010      	b.n	8014f7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f004 fd28 	bl	80199b0 <tcp_send_fin>
 8014f60:	4603      	mov	r3, r0
 8014f62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d109      	bne.n	8014f80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2209      	movs	r2, #9
 8014f70:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014f72:	e005      	b.n	8014f80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014f74:	2300      	movs	r3, #0
 8014f76:	e01c      	b.n	8014fb2 <tcp_close_shutdown_fin+0xbe>
      break;
 8014f78:	bf00      	nop
 8014f7a:	e002      	b.n	8014f82 <tcp_close_shutdown_fin+0x8e>
      break;
 8014f7c:	bf00      	nop
 8014f7e:	e000      	b.n	8014f82 <tcp_close_shutdown_fin+0x8e>
      break;
 8014f80:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d103      	bne.n	8014f92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f004 fe4e 	bl	8019c2c <tcp_output>
 8014f90:	e00d      	b.n	8014fae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f9a:	d108      	bne.n	8014fae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	8b5b      	ldrh	r3, [r3, #26]
 8014fa0:	f043 0308 	orr.w	r3, r3, #8
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014faa:	2300      	movs	r3, #0
 8014fac:	e001      	b.n	8014fb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3710      	adds	r7, #16
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	08024d94 	.word	0x08024d94
 8014fc0:	08024e44 	.word	0x08024e44
 8014fc4:	08024dd8 	.word	0x08024dd8

08014fc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d109      	bne.n	8014fea <tcp_close+0x22>
 8014fd6:	4b0f      	ldr	r3, [pc, #60]	; (8015014 <tcp_close+0x4c>)
 8014fd8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014fdc:	490e      	ldr	r1, [pc, #56]	; (8015018 <tcp_close+0x50>)
 8014fde:	480f      	ldr	r0, [pc, #60]	; (801501c <tcp_close+0x54>)
 8014fe0:	f00a f924 	bl	801f22c <iprintf>
 8014fe4:	f06f 030f 	mvn.w	r3, #15
 8014fe8:	e00f      	b.n	801500a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	7d1b      	ldrb	r3, [r3, #20]
 8014fee:	2b01      	cmp	r3, #1
 8014ff0:	d006      	beq.n	8015000 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	8b5b      	ldrh	r3, [r3, #26]
 8014ff6:	f043 0310 	orr.w	r3, r3, #16
 8014ffa:	b29a      	uxth	r2, r3
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015000:	2101      	movs	r1, #1
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f7ff fe94 	bl	8014d30 <tcp_close_shutdown>
 8015008:	4603      	mov	r3, r0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	08024d94 	.word	0x08024d94
 8015018:	08024ea4 	.word	0x08024ea4
 801501c:	08024dd8 	.word	0x08024dd8

08015020 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d109      	bne.n	8015046 <tcp_shutdown+0x26>
 8015032:	4b26      	ldr	r3, [pc, #152]	; (80150cc <tcp_shutdown+0xac>)
 8015034:	f240 2207 	movw	r2, #519	; 0x207
 8015038:	4925      	ldr	r1, [pc, #148]	; (80150d0 <tcp_shutdown+0xb0>)
 801503a:	4826      	ldr	r0, [pc, #152]	; (80150d4 <tcp_shutdown+0xb4>)
 801503c:	f00a f8f6 	bl	801f22c <iprintf>
 8015040:	f06f 030f 	mvn.w	r3, #15
 8015044:	e03d      	b.n	80150c2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	7d1b      	ldrb	r3, [r3, #20]
 801504a:	2b01      	cmp	r3, #1
 801504c:	d102      	bne.n	8015054 <tcp_shutdown+0x34>
    return ERR_CONN;
 801504e:	f06f 030a 	mvn.w	r3, #10
 8015052:	e036      	b.n	80150c2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d01b      	beq.n	8015092 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	8b5b      	ldrh	r3, [r3, #26]
 801505e:	f043 0310 	orr.w	r3, r3, #16
 8015062:	b29a      	uxth	r2, r3
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d005      	beq.n	801507a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801506e:	2101      	movs	r1, #1
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f7ff fe5d 	bl	8014d30 <tcp_close_shutdown>
 8015076:	4603      	mov	r3, r0
 8015078:	e023      	b.n	80150c2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801507e:	2b00      	cmp	r3, #0
 8015080:	d007      	beq.n	8015092 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015086:	4618      	mov	r0, r3
 8015088:	f7ff fae4 	bl	8014654 <pbuf_free>
      pcb->refused_data = NULL;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	2200      	movs	r2, #0
 8015090:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d013      	beq.n	80150c0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	7d1b      	ldrb	r3, [r3, #20]
 801509c:	2b04      	cmp	r3, #4
 801509e:	dc02      	bgt.n	80150a6 <tcp_shutdown+0x86>
 80150a0:	2b03      	cmp	r3, #3
 80150a2:	da02      	bge.n	80150aa <tcp_shutdown+0x8a>
 80150a4:	e009      	b.n	80150ba <tcp_shutdown+0x9a>
 80150a6:	2b07      	cmp	r3, #7
 80150a8:	d107      	bne.n	80150ba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	b2db      	uxtb	r3, r3
 80150ae:	4619      	mov	r1, r3
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	f7ff fe3d 	bl	8014d30 <tcp_close_shutdown>
 80150b6:	4603      	mov	r3, r0
 80150b8:	e003      	b.n	80150c2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80150ba:	f06f 030a 	mvn.w	r3, #10
 80150be:	e000      	b.n	80150c2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80150c0:	2300      	movs	r3, #0
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	08024d94 	.word	0x08024d94
 80150d0:	08024ebc 	.word	0x08024ebc
 80150d4:	08024dd8 	.word	0x08024dd8

080150d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b08e      	sub	sp, #56	; 0x38
 80150dc:	af04      	add	r7, sp, #16
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d107      	bne.n	80150f8 <tcp_abandon+0x20>
 80150e8:	4b52      	ldr	r3, [pc, #328]	; (8015234 <tcp_abandon+0x15c>)
 80150ea:	f240 223d 	movw	r2, #573	; 0x23d
 80150ee:	4952      	ldr	r1, [pc, #328]	; (8015238 <tcp_abandon+0x160>)
 80150f0:	4852      	ldr	r0, [pc, #328]	; (801523c <tcp_abandon+0x164>)
 80150f2:	f00a f89b 	bl	801f22c <iprintf>
 80150f6:	e099      	b.n	801522c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	7d1b      	ldrb	r3, [r3, #20]
 80150fc:	2b01      	cmp	r3, #1
 80150fe:	d106      	bne.n	801510e <tcp_abandon+0x36>
 8015100:	4b4c      	ldr	r3, [pc, #304]	; (8015234 <tcp_abandon+0x15c>)
 8015102:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015106:	494e      	ldr	r1, [pc, #312]	; (8015240 <tcp_abandon+0x168>)
 8015108:	484c      	ldr	r0, [pc, #304]	; (801523c <tcp_abandon+0x164>)
 801510a:	f00a f88f 	bl	801f22c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	7d1b      	ldrb	r3, [r3, #20]
 8015112:	2b0a      	cmp	r3, #10
 8015114:	d107      	bne.n	8015126 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015116:	6879      	ldr	r1, [r7, #4]
 8015118:	484a      	ldr	r0, [pc, #296]	; (8015244 <tcp_abandon+0x16c>)
 801511a:	f001 f96f 	bl	80163fc <tcp_pcb_remove>
    tcp_free(pcb);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7ff fd54 	bl	8014bcc <tcp_free>
 8015124:	e082      	b.n	801522c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015126:	2300      	movs	r3, #0
 8015128:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801512a:	2300      	movs	r3, #0
 801512c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015132:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015138:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015140:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	691b      	ldr	r3, [r3, #16]
 8015146:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	7d1b      	ldrb	r3, [r3, #20]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d126      	bne.n	801519e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	8adb      	ldrh	r3, [r3, #22]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d02e      	beq.n	80151b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015158:	4b3b      	ldr	r3, [pc, #236]	; (8015248 <tcp_abandon+0x170>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	687a      	ldr	r2, [r7, #4]
 801515e:	429a      	cmp	r2, r3
 8015160:	d105      	bne.n	801516e <tcp_abandon+0x96>
 8015162:	4b39      	ldr	r3, [pc, #228]	; (8015248 <tcp_abandon+0x170>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	68db      	ldr	r3, [r3, #12]
 8015168:	4a37      	ldr	r2, [pc, #220]	; (8015248 <tcp_abandon+0x170>)
 801516a:	6013      	str	r3, [r2, #0]
 801516c:	e013      	b.n	8015196 <tcp_abandon+0xbe>
 801516e:	4b36      	ldr	r3, [pc, #216]	; (8015248 <tcp_abandon+0x170>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	61fb      	str	r3, [r7, #28]
 8015174:	e00c      	b.n	8015190 <tcp_abandon+0xb8>
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	687a      	ldr	r2, [r7, #4]
 801517c:	429a      	cmp	r2, r3
 801517e:	d104      	bne.n	801518a <tcp_abandon+0xb2>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	68da      	ldr	r2, [r3, #12]
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	60da      	str	r2, [r3, #12]
 8015188:	e005      	b.n	8015196 <tcp_abandon+0xbe>
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	68db      	ldr	r3, [r3, #12]
 801518e:	61fb      	str	r3, [r7, #28]
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1ef      	bne.n	8015176 <tcp_abandon+0x9e>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2200      	movs	r2, #0
 801519a:	60da      	str	r2, [r3, #12]
 801519c:	e00b      	b.n	80151b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	8adb      	ldrh	r3, [r3, #22]
 80151a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80151a8:	6879      	ldr	r1, [r7, #4]
 80151aa:	4828      	ldr	r0, [pc, #160]	; (801524c <tcp_abandon+0x174>)
 80151ac:	f001 f926 	bl	80163fc <tcp_pcb_remove>
 80151b0:	4b27      	ldr	r3, [pc, #156]	; (8015250 <tcp_abandon+0x178>)
 80151b2:	2201      	movs	r2, #1
 80151b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d004      	beq.n	80151c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151c2:	4618      	mov	r0, r3
 80151c4:	f000 fdfa 	bl	8015dbc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d004      	beq.n	80151da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151d4:	4618      	mov	r0, r3
 80151d6:	f000 fdf1 	bl	8015dbc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d004      	beq.n	80151ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151e6:	4618      	mov	r0, r3
 80151e8:	f000 fde8 	bl	8015dbc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80151ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d00e      	beq.n	8015210 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80151f2:	6879      	ldr	r1, [r7, #4]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	3304      	adds	r3, #4
 80151f8:	687a      	ldr	r2, [r7, #4]
 80151fa:	8b12      	ldrh	r2, [r2, #24]
 80151fc:	9202      	str	r2, [sp, #8]
 80151fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015200:	9201      	str	r2, [sp, #4]
 8015202:	9300      	str	r3, [sp, #0]
 8015204:	460b      	mov	r3, r1
 8015206:	697a      	ldr	r2, [r7, #20]
 8015208:	69b9      	ldr	r1, [r7, #24]
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f005 fac2 	bl	801a794 <tcp_rst>
    }
    last_state = pcb->state;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	7d1b      	ldrb	r3, [r3, #20]
 8015214:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7ff fcd8 	bl	8014bcc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d004      	beq.n	801522c <tcp_abandon+0x154>
 8015222:	693b      	ldr	r3, [r7, #16]
 8015224:	f06f 010c 	mvn.w	r1, #12
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	4798      	blx	r3
  }
}
 801522c:	3728      	adds	r7, #40	; 0x28
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	08024d94 	.word	0x08024d94
 8015238:	08024ed8 	.word	0x08024ed8
 801523c:	08024dd8 	.word	0x08024dd8
 8015240:	08024ef4 	.word	0x08024ef4
 8015244:	2000e180 	.word	0x2000e180
 8015248:	2000e17c 	.word	0x2000e17c
 801524c:	2000e170 	.word	0x2000e170
 8015250:	2000e16c 	.word	0x2000e16c

08015254 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801525c:	2101      	movs	r1, #1
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f7ff ff3a 	bl	80150d8 <tcp_abandon>
}
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b088      	sub	sp, #32
 8015270:	af00      	add	r7, sp, #0
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	4613      	mov	r3, r2
 8015278:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801527a:	2304      	movs	r3, #4
 801527c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d101      	bne.n	8015288 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015284:	4b3e      	ldr	r3, [pc, #248]	; (8015380 <tcp_bind+0x114>)
 8015286:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d109      	bne.n	80152a2 <tcp_bind+0x36>
 801528e:	4b3d      	ldr	r3, [pc, #244]	; (8015384 <tcp_bind+0x118>)
 8015290:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015294:	493c      	ldr	r1, [pc, #240]	; (8015388 <tcp_bind+0x11c>)
 8015296:	483d      	ldr	r0, [pc, #244]	; (801538c <tcp_bind+0x120>)
 8015298:	f009 ffc8 	bl	801f22c <iprintf>
 801529c:	f06f 030f 	mvn.w	r3, #15
 80152a0:	e06a      	b.n	8015378 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	7d1b      	ldrb	r3, [r3, #20]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d009      	beq.n	80152be <tcp_bind+0x52>
 80152aa:	4b36      	ldr	r3, [pc, #216]	; (8015384 <tcp_bind+0x118>)
 80152ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 80152b0:	4937      	ldr	r1, [pc, #220]	; (8015390 <tcp_bind+0x124>)
 80152b2:	4836      	ldr	r0, [pc, #216]	; (801538c <tcp_bind+0x120>)
 80152b4:	f009 ffba 	bl	801f22c <iprintf>
 80152b8:	f06f 0305 	mvn.w	r3, #5
 80152bc:	e05c      	b.n	8015378 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80152be:	88fb      	ldrh	r3, [r7, #6]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d109      	bne.n	80152d8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80152c4:	f000 f914 	bl	80154f0 <tcp_new_port>
 80152c8:	4603      	mov	r3, r0
 80152ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80152cc:	88fb      	ldrh	r3, [r7, #6]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d135      	bne.n	801533e <tcp_bind+0xd2>
      return ERR_BUF;
 80152d2:	f06f 0301 	mvn.w	r3, #1
 80152d6:	e04f      	b.n	8015378 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80152d8:	2300      	movs	r3, #0
 80152da:	61fb      	str	r3, [r7, #28]
 80152dc:	e02b      	b.n	8015336 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80152de:	4a2d      	ldr	r2, [pc, #180]	; (8015394 <tcp_bind+0x128>)
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	61bb      	str	r3, [r7, #24]
 80152ea:	e01e      	b.n	801532a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80152ec:	69bb      	ldr	r3, [r7, #24]
 80152ee:	8adb      	ldrh	r3, [r3, #22]
 80152f0:	88fa      	ldrh	r2, [r7, #6]
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d116      	bne.n	8015324 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80152f6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d010      	beq.n	801531e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d00c      	beq.n	801531e <tcp_bind+0xb2>
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d009      	beq.n	801531e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801530a:	68bb      	ldr	r3, [r7, #8]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d005      	beq.n	801531e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	681a      	ldr	r2, [r3, #0]
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801531a:	429a      	cmp	r2, r3
 801531c:	d102      	bne.n	8015324 <tcp_bind+0xb8>
              return ERR_USE;
 801531e:	f06f 0307 	mvn.w	r3, #7
 8015322:	e029      	b.n	8015378 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015324:	69bb      	ldr	r3, [r7, #24]
 8015326:	68db      	ldr	r3, [r3, #12]
 8015328:	61bb      	str	r3, [r7, #24]
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d1dd      	bne.n	80152ec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	3301      	adds	r3, #1
 8015334:	61fb      	str	r3, [r7, #28]
 8015336:	69fa      	ldr	r2, [r7, #28]
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	429a      	cmp	r2, r3
 801533c:	dbcf      	blt.n	80152de <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d00c      	beq.n	801535e <tcp_bind+0xf2>
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d008      	beq.n	801535e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d002      	beq.n	8015358 <tcp_bind+0xec>
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	e000      	b.n	801535a <tcp_bind+0xee>
 8015358:	2300      	movs	r3, #0
 801535a:	68fa      	ldr	r2, [r7, #12]
 801535c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	88fa      	ldrh	r2, [r7, #6]
 8015362:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015364:	4b0c      	ldr	r3, [pc, #48]	; (8015398 <tcp_bind+0x12c>)
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	60da      	str	r2, [r3, #12]
 801536c:	4a0a      	ldr	r2, [pc, #40]	; (8015398 <tcp_bind+0x12c>)
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	6013      	str	r3, [r2, #0]
 8015372:	f005 fbd1 	bl	801ab18 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015376:	2300      	movs	r3, #0
}
 8015378:	4618      	mov	r0, r3
 801537a:	3720      	adds	r7, #32
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}
 8015380:	08026fa0 	.word	0x08026fa0
 8015384:	08024d94 	.word	0x08024d94
 8015388:	08024f28 	.word	0x08024f28
 801538c:	08024dd8 	.word	0x08024dd8
 8015390:	08024f40 	.word	0x08024f40
 8015394:	08026f78 	.word	0x08026f78
 8015398:	2000e17c 	.word	0x2000e17c

0801539c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d106      	bne.n	80153b8 <tcp_update_rcv_ann_wnd+0x1c>
 80153aa:	4b25      	ldr	r3, [pc, #148]	; (8015440 <tcp_update_rcv_ann_wnd+0xa4>)
 80153ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 80153b0:	4924      	ldr	r1, [pc, #144]	; (8015444 <tcp_update_rcv_ann_wnd+0xa8>)
 80153b2:	4825      	ldr	r0, [pc, #148]	; (8015448 <tcp_update_rcv_ann_wnd+0xac>)
 80153b4:	f009 ff3a 	bl	801f22c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80153c0:	4413      	add	r3, r2
 80153c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80153cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80153d0:	bf28      	it	cs
 80153d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80153d6:	b292      	uxth	r2, r2
 80153d8:	4413      	add	r3, r2
 80153da:	68fa      	ldr	r2, [r7, #12]
 80153dc:	1ad3      	subs	r3, r2, r3
 80153de:	2b00      	cmp	r3, #0
 80153e0:	db08      	blt.n	80153f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	1ad3      	subs	r3, r2, r3
 80153f2:	e020      	b.n	8015436 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153fc:	1ad3      	subs	r3, r2, r3
 80153fe:	2b00      	cmp	r3, #0
 8015400:	dd03      	ble.n	801540a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2200      	movs	r2, #0
 8015406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015408:	e014      	b.n	8015434 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801541c:	d306      	bcc.n	801542c <tcp_update_rcv_ann_wnd+0x90>
 801541e:	4b08      	ldr	r3, [pc, #32]	; (8015440 <tcp_update_rcv_ann_wnd+0xa4>)
 8015420:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015424:	4909      	ldr	r1, [pc, #36]	; (801544c <tcp_update_rcv_ann_wnd+0xb0>)
 8015426:	4808      	ldr	r0, [pc, #32]	; (8015448 <tcp_update_rcv_ann_wnd+0xac>)
 8015428:	f009 ff00 	bl	801f22c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	b29a      	uxth	r2, r3
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015434:	2300      	movs	r3, #0
  }
}
 8015436:	4618      	mov	r0, r3
 8015438:	3710      	adds	r7, #16
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}
 801543e:	bf00      	nop
 8015440:	08024d94 	.word	0x08024d94
 8015444:	08024ff0 	.word	0x08024ff0
 8015448:	08024dd8 	.word	0x08024dd8
 801544c:	08025014 	.word	0x08025014

08015450 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	460b      	mov	r3, r1
 801545a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d107      	bne.n	8015472 <tcp_recved+0x22>
 8015462:	4b1f      	ldr	r3, [pc, #124]	; (80154e0 <tcp_recved+0x90>)
 8015464:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015468:	491e      	ldr	r1, [pc, #120]	; (80154e4 <tcp_recved+0x94>)
 801546a:	481f      	ldr	r0, [pc, #124]	; (80154e8 <tcp_recved+0x98>)
 801546c:	f009 fede 	bl	801f22c <iprintf>
 8015470:	e032      	b.n	80154d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	7d1b      	ldrb	r3, [r3, #20]
 8015476:	2b01      	cmp	r3, #1
 8015478:	d106      	bne.n	8015488 <tcp_recved+0x38>
 801547a:	4b19      	ldr	r3, [pc, #100]	; (80154e0 <tcp_recved+0x90>)
 801547c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015480:	491a      	ldr	r1, [pc, #104]	; (80154ec <tcp_recved+0x9c>)
 8015482:	4819      	ldr	r0, [pc, #100]	; (80154e8 <tcp_recved+0x98>)
 8015484:	f009 fed2 	bl	801f22c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801548c:	887b      	ldrh	r3, [r7, #2]
 801548e:	4413      	add	r3, r2
 8015490:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015492:	89fb      	ldrh	r3, [r7, #14]
 8015494:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015498:	d804      	bhi.n	80154a4 <tcp_recved+0x54>
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801549e:	89fa      	ldrh	r2, [r7, #14]
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d204      	bcs.n	80154ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80154aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80154ac:	e002      	b.n	80154b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	89fa      	ldrh	r2, [r7, #14]
 80154b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff ff71 	bl	801539c <tcp_update_rcv_ann_wnd>
 80154ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80154c2:	d309      	bcc.n	80154d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	8b5b      	ldrh	r3, [r3, #26]
 80154c8:	f043 0302 	orr.w	r3, r3, #2
 80154cc:	b29a      	uxth	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f004 fbaa 	bl	8019c2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80154d8:	3710      	adds	r7, #16
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	08024d94 	.word	0x08024d94
 80154e4:	08025030 	.word	0x08025030
 80154e8:	08024dd8 	.word	0x08024dd8
 80154ec:	08025048 	.word	0x08025048

080154f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80154f6:	2300      	movs	r3, #0
 80154f8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80154fa:	4b1e      	ldr	r3, [pc, #120]	; (8015574 <tcp_new_port+0x84>)
 80154fc:	881b      	ldrh	r3, [r3, #0]
 80154fe:	3301      	adds	r3, #1
 8015500:	b29a      	uxth	r2, r3
 8015502:	4b1c      	ldr	r3, [pc, #112]	; (8015574 <tcp_new_port+0x84>)
 8015504:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015506:	4b1b      	ldr	r3, [pc, #108]	; (8015574 <tcp_new_port+0x84>)
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801550e:	4293      	cmp	r3, r2
 8015510:	d103      	bne.n	801551a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015512:	4b18      	ldr	r3, [pc, #96]	; (8015574 <tcp_new_port+0x84>)
 8015514:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015518:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801551a:	2300      	movs	r3, #0
 801551c:	71fb      	strb	r3, [r7, #7]
 801551e:	e01e      	b.n	801555e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015520:	79fb      	ldrb	r3, [r7, #7]
 8015522:	4a15      	ldr	r2, [pc, #84]	; (8015578 <tcp_new_port+0x88>)
 8015524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	603b      	str	r3, [r7, #0]
 801552c:	e011      	b.n	8015552 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	8ada      	ldrh	r2, [r3, #22]
 8015532:	4b10      	ldr	r3, [pc, #64]	; (8015574 <tcp_new_port+0x84>)
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	429a      	cmp	r2, r3
 8015538:	d108      	bne.n	801554c <tcp_new_port+0x5c>
        n++;
 801553a:	88bb      	ldrh	r3, [r7, #4]
 801553c:	3301      	adds	r3, #1
 801553e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015540:	88bb      	ldrh	r3, [r7, #4]
 8015542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015546:	d3d8      	bcc.n	80154fa <tcp_new_port+0xa>
          return 0;
 8015548:	2300      	movs	r3, #0
 801554a:	e00d      	b.n	8015568 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	68db      	ldr	r3, [r3, #12]
 8015550:	603b      	str	r3, [r7, #0]
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d1ea      	bne.n	801552e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015558:	79fb      	ldrb	r3, [r7, #7]
 801555a:	3301      	adds	r3, #1
 801555c:	71fb      	strb	r3, [r7, #7]
 801555e:	79fb      	ldrb	r3, [r7, #7]
 8015560:	2b03      	cmp	r3, #3
 8015562:	d9dd      	bls.n	8015520 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015564:	4b03      	ldr	r3, [pc, #12]	; (8015574 <tcp_new_port+0x84>)
 8015566:	881b      	ldrh	r3, [r3, #0]
}
 8015568:	4618      	mov	r0, r3
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	200003ac 	.word	0x200003ac
 8015578:	08026f78 	.word	0x08026f78

0801557c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801557c:	b5b0      	push	{r4, r5, r7, lr}
 801557e:	b090      	sub	sp, #64	; 0x40
 8015580:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015582:	2300      	movs	r3, #0
 8015584:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015588:	4b94      	ldr	r3, [pc, #592]	; (80157dc <tcp_slowtmr+0x260>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	3301      	adds	r3, #1
 801558e:	4a93      	ldr	r2, [pc, #588]	; (80157dc <tcp_slowtmr+0x260>)
 8015590:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015592:	4b93      	ldr	r3, [pc, #588]	; (80157e0 <tcp_slowtmr+0x264>)
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	3301      	adds	r3, #1
 8015598:	b2da      	uxtb	r2, r3
 801559a:	4b91      	ldr	r3, [pc, #580]	; (80157e0 <tcp_slowtmr+0x264>)
 801559c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801559e:	2300      	movs	r3, #0
 80155a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80155a2:	4b90      	ldr	r3, [pc, #576]	; (80157e4 <tcp_slowtmr+0x268>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80155a8:	e29f      	b.n	8015aea <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80155aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ac:	7d1b      	ldrb	r3, [r3, #20]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d106      	bne.n	80155c0 <tcp_slowtmr+0x44>
 80155b2:	4b8d      	ldr	r3, [pc, #564]	; (80157e8 <tcp_slowtmr+0x26c>)
 80155b4:	f240 42be 	movw	r2, #1214	; 0x4be
 80155b8:	498c      	ldr	r1, [pc, #560]	; (80157ec <tcp_slowtmr+0x270>)
 80155ba:	488d      	ldr	r0, [pc, #564]	; (80157f0 <tcp_slowtmr+0x274>)
 80155bc:	f009 fe36 	bl	801f22c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80155c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c2:	7d1b      	ldrb	r3, [r3, #20]
 80155c4:	2b01      	cmp	r3, #1
 80155c6:	d106      	bne.n	80155d6 <tcp_slowtmr+0x5a>
 80155c8:	4b87      	ldr	r3, [pc, #540]	; (80157e8 <tcp_slowtmr+0x26c>)
 80155ca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80155ce:	4989      	ldr	r1, [pc, #548]	; (80157f4 <tcp_slowtmr+0x278>)
 80155d0:	4887      	ldr	r0, [pc, #540]	; (80157f0 <tcp_slowtmr+0x274>)
 80155d2:	f009 fe2b 	bl	801f22c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80155d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d8:	7d1b      	ldrb	r3, [r3, #20]
 80155da:	2b0a      	cmp	r3, #10
 80155dc:	d106      	bne.n	80155ec <tcp_slowtmr+0x70>
 80155de:	4b82      	ldr	r3, [pc, #520]	; (80157e8 <tcp_slowtmr+0x26c>)
 80155e0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80155e4:	4984      	ldr	r1, [pc, #528]	; (80157f8 <tcp_slowtmr+0x27c>)
 80155e6:	4882      	ldr	r0, [pc, #520]	; (80157f0 <tcp_slowtmr+0x274>)
 80155e8:	f009 fe20 	bl	801f22c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80155ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ee:	7f9a      	ldrb	r2, [r3, #30]
 80155f0:	4b7b      	ldr	r3, [pc, #492]	; (80157e0 <tcp_slowtmr+0x264>)
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d105      	bne.n	8015604 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80155f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80155fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015602:	e272      	b.n	8015aea <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015604:	4b76      	ldr	r3, [pc, #472]	; (80157e0 <tcp_slowtmr+0x264>)
 8015606:	781a      	ldrb	r2, [r3, #0]
 8015608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801560c:	2300      	movs	r3, #0
 801560e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015612:	2300      	movs	r3, #0
 8015614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561a:	7d1b      	ldrb	r3, [r3, #20]
 801561c:	2b02      	cmp	r3, #2
 801561e:	d10a      	bne.n	8015636 <tcp_slowtmr+0xba>
 8015620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015626:	2b05      	cmp	r3, #5
 8015628:	d905      	bls.n	8015636 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801562a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801562e:	3301      	adds	r3, #1
 8015630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015634:	e11e      	b.n	8015874 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801563c:	2b0b      	cmp	r3, #11
 801563e:	d905      	bls.n	801564c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015644:	3301      	adds	r3, #1
 8015646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801564a:	e113      	b.n	8015874 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015652:	2b00      	cmp	r3, #0
 8015654:	d075      	beq.n	8015742 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801565a:	2b00      	cmp	r3, #0
 801565c:	d006      	beq.n	801566c <tcp_slowtmr+0xf0>
 801565e:	4b62      	ldr	r3, [pc, #392]	; (80157e8 <tcp_slowtmr+0x26c>)
 8015660:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015664:	4965      	ldr	r1, [pc, #404]	; (80157fc <tcp_slowtmr+0x280>)
 8015666:	4862      	ldr	r0, [pc, #392]	; (80157f0 <tcp_slowtmr+0x274>)
 8015668:	f009 fde0 	bl	801f22c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015670:	2b00      	cmp	r3, #0
 8015672:	d106      	bne.n	8015682 <tcp_slowtmr+0x106>
 8015674:	4b5c      	ldr	r3, [pc, #368]	; (80157e8 <tcp_slowtmr+0x26c>)
 8015676:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801567a:	4961      	ldr	r1, [pc, #388]	; (8015800 <tcp_slowtmr+0x284>)
 801567c:	485c      	ldr	r0, [pc, #368]	; (80157f0 <tcp_slowtmr+0x274>)
 801567e:	f009 fdd5 	bl	801f22c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015684:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015688:	2b0b      	cmp	r3, #11
 801568a:	d905      	bls.n	8015698 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801568c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015690:	3301      	adds	r3, #1
 8015692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015696:	e0ed      	b.n	8015874 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801569a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801569e:	3b01      	subs	r3, #1
 80156a0:	4a58      	ldr	r2, [pc, #352]	; (8015804 <tcp_slowtmr+0x288>)
 80156a2:	5cd3      	ldrb	r3, [r2, r3]
 80156a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80156a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80156ac:	7c7a      	ldrb	r2, [r7, #17]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d907      	bls.n	80156c2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80156b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80156b8:	3301      	adds	r3, #1
 80156ba:	b2da      	uxtb	r2, r3
 80156bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80156c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80156c8:	7c7a      	ldrb	r2, [r7, #17]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	f200 80d2 	bhi.w	8015874 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80156d0:	2301      	movs	r3, #1
 80156d2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80156d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d108      	bne.n	80156f0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80156de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156e0:	f005 f94c 	bl	801a97c <tcp_zero_window_probe>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d014      	beq.n	8015714 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80156ea:	2300      	movs	r3, #0
 80156ec:	623b      	str	r3, [r7, #32]
 80156ee:	e011      	b.n	8015714 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80156f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156f6:	4619      	mov	r1, r3
 80156f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156fa:	f004 f811 	bl	8019720 <tcp_split_unsent_seg>
 80156fe:	4603      	mov	r3, r0
 8015700:	2b00      	cmp	r3, #0
 8015702:	d107      	bne.n	8015714 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015706:	f004 fa91 	bl	8019c2c <tcp_output>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	d101      	bne.n	8015714 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015714:	6a3b      	ldr	r3, [r7, #32]
 8015716:	2b00      	cmp	r3, #0
 8015718:	f000 80ac 	beq.w	8015874 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801571e:	2200      	movs	r2, #0
 8015720:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015726:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801572a:	2b06      	cmp	r3, #6
 801572c:	f200 80a2 	bhi.w	8015874 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015732:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015736:	3301      	adds	r3, #1
 8015738:	b2da      	uxtb	r2, r3
 801573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015740:	e098      	b.n	8015874 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015744:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015748:	2b00      	cmp	r3, #0
 801574a:	db0f      	blt.n	801576c <tcp_slowtmr+0x1f0>
 801574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015752:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015756:	4293      	cmp	r3, r2
 8015758:	d008      	beq.n	801576c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015760:	b29b      	uxth	r3, r3
 8015762:	3301      	adds	r3, #1
 8015764:	b29b      	uxth	r3, r3
 8015766:	b21a      	sxth	r2, r3
 8015768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015774:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015778:	429a      	cmp	r2, r3
 801577a:	db7b      	blt.n	8015874 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801577c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801577e:	f004 fd47 	bl	801a210 <tcp_rexmit_rto_prepare>
 8015782:	4603      	mov	r3, r0
 8015784:	2b00      	cmp	r3, #0
 8015786:	d007      	beq.n	8015798 <tcp_slowtmr+0x21c>
 8015788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801578c:	2b00      	cmp	r3, #0
 801578e:	d171      	bne.n	8015874 <tcp_slowtmr+0x2f8>
 8015790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015794:	2b00      	cmp	r3, #0
 8015796:	d06d      	beq.n	8015874 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801579a:	7d1b      	ldrb	r3, [r3, #20]
 801579c:	2b02      	cmp	r3, #2
 801579e:	d03a      	beq.n	8015816 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80157a6:	2b0c      	cmp	r3, #12
 80157a8:	bf28      	it	cs
 80157aa:	230c      	movcs	r3, #12
 80157ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80157ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80157b4:	10db      	asrs	r3, r3, #3
 80157b6:	b21b      	sxth	r3, r3
 80157b8:	461a      	mov	r2, r3
 80157ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80157c0:	4413      	add	r3, r2
 80157c2:	7efa      	ldrb	r2, [r7, #27]
 80157c4:	4910      	ldr	r1, [pc, #64]	; (8015808 <tcp_slowtmr+0x28c>)
 80157c6:	5c8a      	ldrb	r2, [r1, r2]
 80157c8:	4093      	lsls	r3, r2
 80157ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80157d2:	4293      	cmp	r3, r2
 80157d4:	dc1a      	bgt.n	801580c <tcp_slowtmr+0x290>
 80157d6:	697b      	ldr	r3, [r7, #20]
 80157d8:	b21a      	sxth	r2, r3
 80157da:	e019      	b.n	8015810 <tcp_slowtmr+0x294>
 80157dc:	2000e174 	.word	0x2000e174
 80157e0:	20006e12 	.word	0x20006e12
 80157e4:	2000e170 	.word	0x2000e170
 80157e8:	08024d94 	.word	0x08024d94
 80157ec:	080250d8 	.word	0x080250d8
 80157f0:	08024dd8 	.word	0x08024dd8
 80157f4:	08025104 	.word	0x08025104
 80157f8:	08025130 	.word	0x08025130
 80157fc:	08025160 	.word	0x08025160
 8015800:	08025194 	.word	0x08025194
 8015804:	08026f70 	.word	0x08026f70
 8015808:	08026f60 	.word	0x08026f60
 801580c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015818:	2200      	movs	r2, #0
 801581a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015824:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015828:	4293      	cmp	r3, r2
 801582a:	bf28      	it	cs
 801582c:	4613      	movcs	r3, r2
 801582e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015830:	8a7b      	ldrh	r3, [r7, #18]
 8015832:	085b      	lsrs	r3, r3, #1
 8015834:	b29a      	uxth	r2, r3
 8015836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015838:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015846:	005b      	lsls	r3, r3, #1
 8015848:	b29b      	uxth	r3, r3
 801584a:	429a      	cmp	r2, r3
 801584c:	d206      	bcs.n	801585c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015852:	005b      	lsls	r3, r3, #1
 8015854:	b29a      	uxth	r2, r3
 8015856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015858:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015862:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015868:	2200      	movs	r2, #0
 801586a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801586e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015870:	f004 fd3e 	bl	801a2f0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015876:	7d1b      	ldrb	r3, [r3, #20]
 8015878:	2b06      	cmp	r3, #6
 801587a:	d111      	bne.n	80158a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587e:	8b5b      	ldrh	r3, [r3, #26]
 8015880:	f003 0310 	and.w	r3, r3, #16
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00b      	beq.n	80158a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015888:	4b9d      	ldr	r3, [pc, #628]	; (8015b00 <tcp_slowtmr+0x584>)
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588e:	6a1b      	ldr	r3, [r3, #32]
 8015890:	1ad3      	subs	r3, r2, r3
 8015892:	2b28      	cmp	r3, #40	; 0x28
 8015894:	d904      	bls.n	80158a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801589a:	3301      	adds	r3, #1
 801589c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80158a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a2:	7a5b      	ldrb	r3, [r3, #9]
 80158a4:	f003 0308 	and.w	r3, r3, #8
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d04c      	beq.n	8015946 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80158ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80158b0:	2b04      	cmp	r3, #4
 80158b2:	d003      	beq.n	80158bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80158b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80158b8:	2b07      	cmp	r3, #7
 80158ba:	d144      	bne.n	8015946 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158bc:	4b90      	ldr	r3, [pc, #576]	; (8015b00 <tcp_slowtmr+0x584>)
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c2:	6a1b      	ldr	r3, [r3, #32]
 80158c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80158c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80158cc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80158d0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80158d4:	498b      	ldr	r1, [pc, #556]	; (8015b04 <tcp_slowtmr+0x588>)
 80158d6:	fba1 1303 	umull	r1, r3, r1, r3
 80158da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158dc:	429a      	cmp	r2, r3
 80158de:	d90a      	bls.n	80158f6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80158e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158e4:	3301      	adds	r3, #1
 80158e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80158ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80158ee:	3301      	adds	r3, #1
 80158f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80158f4:	e027      	b.n	8015946 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158f6:	4b82      	ldr	r3, [pc, #520]	; (8015b00 <tcp_slowtmr+0x584>)
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fc:	6a1b      	ldr	r3, [r3, #32]
 80158fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015902:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015908:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801590c:	4618      	mov	r0, r3
 801590e:	4b7e      	ldr	r3, [pc, #504]	; (8015b08 <tcp_slowtmr+0x58c>)
 8015910:	fb03 f300 	mul.w	r3, r3, r0
 8015914:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015916:	497b      	ldr	r1, [pc, #492]	; (8015b04 <tcp_slowtmr+0x588>)
 8015918:	fba1 1303 	umull	r1, r3, r1, r3
 801591c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801591e:	429a      	cmp	r2, r3
 8015920:	d911      	bls.n	8015946 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015924:	f004 ffea 	bl	801a8fc <tcp_keepalive>
 8015928:	4603      	mov	r3, r0
 801592a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801592e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015932:	2b00      	cmp	r3, #0
 8015934:	d107      	bne.n	8015946 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015938:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801593c:	3301      	adds	r3, #1
 801593e:	b2da      	uxtb	r2, r3
 8015940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015942:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801594a:	2b00      	cmp	r3, #0
 801594c:	d011      	beq.n	8015972 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801594e:	4b6c      	ldr	r3, [pc, #432]	; (8015b00 <tcp_slowtmr+0x584>)
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015954:	6a1b      	ldr	r3, [r3, #32]
 8015956:	1ad2      	subs	r2, r2, r3
 8015958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801595e:	4619      	mov	r1, r3
 8015960:	460b      	mov	r3, r1
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	440b      	add	r3, r1
 8015966:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015968:	429a      	cmp	r2, r3
 801596a:	d302      	bcc.n	8015972 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801596c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801596e:	f000 fea9 	bl	80166c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015974:	7d1b      	ldrb	r3, [r3, #20]
 8015976:	2b03      	cmp	r3, #3
 8015978:	d10b      	bne.n	8015992 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801597a:	4b61      	ldr	r3, [pc, #388]	; (8015b00 <tcp_slowtmr+0x584>)
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015980:	6a1b      	ldr	r3, [r3, #32]
 8015982:	1ad3      	subs	r3, r2, r3
 8015984:	2b28      	cmp	r3, #40	; 0x28
 8015986:	d904      	bls.n	8015992 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801598c:	3301      	adds	r3, #1
 801598e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015994:	7d1b      	ldrb	r3, [r3, #20]
 8015996:	2b09      	cmp	r3, #9
 8015998:	d10b      	bne.n	80159b2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801599a:	4b59      	ldr	r3, [pc, #356]	; (8015b00 <tcp_slowtmr+0x584>)
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a0:	6a1b      	ldr	r3, [r3, #32]
 80159a2:	1ad3      	subs	r3, r2, r3
 80159a4:	2bf0      	cmp	r3, #240	; 0xf0
 80159a6:	d904      	bls.n	80159b2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80159a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ac:	3301      	adds	r3, #1
 80159ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80159b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d060      	beq.n	8015a7c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80159ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159c0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80159c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159c4:	f000 fcca 	bl	801635c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80159c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d010      	beq.n	80159f0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80159ce:	4b4f      	ldr	r3, [pc, #316]	; (8015b0c <tcp_slowtmr+0x590>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d106      	bne.n	80159e6 <tcp_slowtmr+0x46a>
 80159d8:	4b4d      	ldr	r3, [pc, #308]	; (8015b10 <tcp_slowtmr+0x594>)
 80159da:	f240 526d 	movw	r2, #1389	; 0x56d
 80159de:	494d      	ldr	r1, [pc, #308]	; (8015b14 <tcp_slowtmr+0x598>)
 80159e0:	484d      	ldr	r0, [pc, #308]	; (8015b18 <tcp_slowtmr+0x59c>)
 80159e2:	f009 fc23 	bl	801f22c <iprintf>
        prev->next = pcb->next;
 80159e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e8:	68da      	ldr	r2, [r3, #12]
 80159ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ec:	60da      	str	r2, [r3, #12]
 80159ee:	e00f      	b.n	8015a10 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80159f0:	4b46      	ldr	r3, [pc, #280]	; (8015b0c <tcp_slowtmr+0x590>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d006      	beq.n	8015a08 <tcp_slowtmr+0x48c>
 80159fa:	4b45      	ldr	r3, [pc, #276]	; (8015b10 <tcp_slowtmr+0x594>)
 80159fc:	f240 5271 	movw	r2, #1393	; 0x571
 8015a00:	4946      	ldr	r1, [pc, #280]	; (8015b1c <tcp_slowtmr+0x5a0>)
 8015a02:	4845      	ldr	r0, [pc, #276]	; (8015b18 <tcp_slowtmr+0x59c>)
 8015a04:	f009 fc12 	bl	801f22c <iprintf>
        tcp_active_pcbs = pcb->next;
 8015a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	4a3f      	ldr	r2, [pc, #252]	; (8015b0c <tcp_slowtmr+0x590>)
 8015a0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015a10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d013      	beq.n	8015a40 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015a20:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a24:	3304      	adds	r3, #4
 8015a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a28:	8ad2      	ldrh	r2, [r2, #22]
 8015a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a2c:	8b09      	ldrh	r1, [r1, #24]
 8015a2e:	9102      	str	r1, [sp, #8]
 8015a30:	9201      	str	r2, [sp, #4]
 8015a32:	9300      	str	r3, [sp, #0]
 8015a34:	462b      	mov	r3, r5
 8015a36:	4622      	mov	r2, r4
 8015a38:	4601      	mov	r1, r0
 8015a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a3c:	f004 feaa 	bl	801a794 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a42:	691b      	ldr	r3, [r3, #16]
 8015a44:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	7d1b      	ldrb	r3, [r3, #20]
 8015a4a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a4e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a52:	68db      	ldr	r3, [r3, #12]
 8015a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015a56:	6838      	ldr	r0, [r7, #0]
 8015a58:	f7ff f8b8 	bl	8014bcc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015a5c:	4b30      	ldr	r3, [pc, #192]	; (8015b20 <tcp_slowtmr+0x5a4>)
 8015a5e:	2200      	movs	r2, #0
 8015a60:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d004      	beq.n	8015a72 <tcp_slowtmr+0x4f6>
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f06f 010c 	mvn.w	r1, #12
 8015a6e:	68b8      	ldr	r0, [r7, #8]
 8015a70:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015a72:	4b2b      	ldr	r3, [pc, #172]	; (8015b20 <tcp_slowtmr+0x5a4>)
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d037      	beq.n	8015aea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015a7a:	e590      	b.n	801559e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a82:	68db      	ldr	r3, [r3, #12]
 8015a84:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a88:	7f1b      	ldrb	r3, [r3, #28]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	b2da      	uxtb	r2, r3
 8015a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a94:	7f1a      	ldrb	r2, [r3, #28]
 8015a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a98:	7f5b      	ldrb	r3, [r3, #29]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d325      	bcc.n	8015aea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015aa4:	4b1e      	ldr	r3, [pc, #120]	; (8015b20 <tcp_slowtmr+0x5a4>)
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d00b      	beq.n	8015acc <tcp_slowtmr+0x550>
 8015ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015abc:	6912      	ldr	r2, [r2, #16]
 8015abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ac0:	4610      	mov	r0, r2
 8015ac2:	4798      	blx	r3
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015aca:	e002      	b.n	8015ad2 <tcp_slowtmr+0x556>
 8015acc:	2300      	movs	r3, #0
 8015ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015ad2:	4b13      	ldr	r3, [pc, #76]	; (8015b20 <tcp_slowtmr+0x5a4>)
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d000      	beq.n	8015adc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8015ada:	e560      	b.n	801559e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015adc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d102      	bne.n	8015aea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ae6:	f004 f8a1 	bl	8019c2c <tcp_output>
  while (pcb != NULL) {
 8015aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	f47f ad5c 	bne.w	80155aa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015af2:	2300      	movs	r3, #0
 8015af4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015af6:	4b0b      	ldr	r3, [pc, #44]	; (8015b24 <tcp_slowtmr+0x5a8>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015afc:	e067      	b.n	8015bce <tcp_slowtmr+0x652>
 8015afe:	bf00      	nop
 8015b00:	2000e174 	.word	0x2000e174
 8015b04:	10624dd3 	.word	0x10624dd3
 8015b08:	000124f8 	.word	0x000124f8
 8015b0c:	2000e170 	.word	0x2000e170
 8015b10:	08024d94 	.word	0x08024d94
 8015b14:	080251cc 	.word	0x080251cc
 8015b18:	08024dd8 	.word	0x08024dd8
 8015b1c:	080251f8 	.word	0x080251f8
 8015b20:	2000e16c 	.word	0x2000e16c
 8015b24:	2000e180 	.word	0x2000e180
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2a:	7d1b      	ldrb	r3, [r3, #20]
 8015b2c:	2b0a      	cmp	r3, #10
 8015b2e:	d006      	beq.n	8015b3e <tcp_slowtmr+0x5c2>
 8015b30:	4b2b      	ldr	r3, [pc, #172]	; (8015be0 <tcp_slowtmr+0x664>)
 8015b32:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015b36:	492b      	ldr	r1, [pc, #172]	; (8015be4 <tcp_slowtmr+0x668>)
 8015b38:	482b      	ldr	r0, [pc, #172]	; (8015be8 <tcp_slowtmr+0x66c>)
 8015b3a:	f009 fb77 	bl	801f22c <iprintf>
    pcb_remove = 0;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015b44:	4b29      	ldr	r3, [pc, #164]	; (8015bec <tcp_slowtmr+0x670>)
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4a:	6a1b      	ldr	r3, [r3, #32]
 8015b4c:	1ad3      	subs	r3, r2, r3
 8015b4e:	2bf0      	cmp	r3, #240	; 0xf0
 8015b50:	d904      	bls.n	8015b5c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b56:	3301      	adds	r3, #1
 8015b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d02f      	beq.n	8015bc4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b66:	f000 fbf9 	bl	801635c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d010      	beq.n	8015b92 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015b70:	4b1f      	ldr	r3, [pc, #124]	; (8015bf0 <tcp_slowtmr+0x674>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d106      	bne.n	8015b88 <tcp_slowtmr+0x60c>
 8015b7a:	4b19      	ldr	r3, [pc, #100]	; (8015be0 <tcp_slowtmr+0x664>)
 8015b7c:	f240 52af 	movw	r2, #1455	; 0x5af
 8015b80:	491c      	ldr	r1, [pc, #112]	; (8015bf4 <tcp_slowtmr+0x678>)
 8015b82:	4819      	ldr	r0, [pc, #100]	; (8015be8 <tcp_slowtmr+0x66c>)
 8015b84:	f009 fb52 	bl	801f22c <iprintf>
        prev->next = pcb->next;
 8015b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8a:	68da      	ldr	r2, [r3, #12]
 8015b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8e:	60da      	str	r2, [r3, #12]
 8015b90:	e00f      	b.n	8015bb2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015b92:	4b17      	ldr	r3, [pc, #92]	; (8015bf0 <tcp_slowtmr+0x674>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d006      	beq.n	8015baa <tcp_slowtmr+0x62e>
 8015b9c:	4b10      	ldr	r3, [pc, #64]	; (8015be0 <tcp_slowtmr+0x664>)
 8015b9e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015ba2:	4915      	ldr	r1, [pc, #84]	; (8015bf8 <tcp_slowtmr+0x67c>)
 8015ba4:	4810      	ldr	r0, [pc, #64]	; (8015be8 <tcp_slowtmr+0x66c>)
 8015ba6:	f009 fb41 	bl	801f22c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	4a10      	ldr	r2, [pc, #64]	; (8015bf0 <tcp_slowtmr+0x674>)
 8015bb0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015bbc:	69f8      	ldr	r0, [r7, #28]
 8015bbe:	f7ff f805 	bl	8014bcc <tcp_free>
 8015bc2:	e004      	b.n	8015bce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d1a9      	bne.n	8015b28 <tcp_slowtmr+0x5ac>
    }
  }
}
 8015bd4:	bf00      	nop
 8015bd6:	bf00      	nop
 8015bd8:	3730      	adds	r7, #48	; 0x30
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8015bde:	bf00      	nop
 8015be0:	08024d94 	.word	0x08024d94
 8015be4:	08025224 	.word	0x08025224
 8015be8:	08024dd8 	.word	0x08024dd8
 8015bec:	2000e174 	.word	0x2000e174
 8015bf0:	2000e180 	.word	0x2000e180
 8015bf4:	08025254 	.word	0x08025254
 8015bf8:	0802527c 	.word	0x0802527c

08015bfc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b082      	sub	sp, #8
 8015c00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015c02:	4b2d      	ldr	r3, [pc, #180]	; (8015cb8 <tcp_fasttmr+0xbc>)
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	3301      	adds	r3, #1
 8015c08:	b2da      	uxtb	r2, r3
 8015c0a:	4b2b      	ldr	r3, [pc, #172]	; (8015cb8 <tcp_fasttmr+0xbc>)
 8015c0c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015c0e:	4b2b      	ldr	r3, [pc, #172]	; (8015cbc <tcp_fasttmr+0xc0>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015c14:	e048      	b.n	8015ca8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	7f9a      	ldrb	r2, [r3, #30]
 8015c1a:	4b27      	ldr	r3, [pc, #156]	; (8015cb8 <tcp_fasttmr+0xbc>)
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d03f      	beq.n	8015ca2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015c22:	4b25      	ldr	r3, [pc, #148]	; (8015cb8 <tcp_fasttmr+0xbc>)
 8015c24:	781a      	ldrb	r2, [r3, #0]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	8b5b      	ldrh	r3, [r3, #26]
 8015c2e:	f003 0301 	and.w	r3, r3, #1
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d010      	beq.n	8015c58 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	8b5b      	ldrh	r3, [r3, #26]
 8015c3a:	f043 0302 	orr.w	r3, r3, #2
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f003 fff1 	bl	8019c2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	8b5b      	ldrh	r3, [r3, #26]
 8015c4e:	f023 0303 	bic.w	r3, r3, #3
 8015c52:	b29a      	uxth	r2, r3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	8b5b      	ldrh	r3, [r3, #26]
 8015c5c:	f003 0308 	and.w	r3, r3, #8
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d009      	beq.n	8015c78 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	8b5b      	ldrh	r3, [r3, #26]
 8015c68:	f023 0308 	bic.w	r3, r3, #8
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f7ff f93e 	bl	8014ef4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d00a      	beq.n	8015c9c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015c86:	4b0e      	ldr	r3, [pc, #56]	; (8015cc0 <tcp_fasttmr+0xc4>)
 8015c88:	2200      	movs	r2, #0
 8015c8a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f000 f819 	bl	8015cc4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015c92:	4b0b      	ldr	r3, [pc, #44]	; (8015cc0 <tcp_fasttmr+0xc4>)
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d000      	beq.n	8015c9c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015c9a:	e7b8      	b.n	8015c0e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	607b      	str	r3, [r7, #4]
 8015ca0:	e002      	b.n	8015ca8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	68db      	ldr	r3, [r3, #12]
 8015ca6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d1b3      	bne.n	8015c16 <tcp_fasttmr+0x1a>
    }
  }
}
 8015cae:	bf00      	nop
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	20006e12 	.word	0x20006e12
 8015cbc:	2000e170 	.word	0x2000e170
 8015cc0:	2000e16c 	.word	0x2000e16c

08015cc4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015cc4:	b590      	push	{r4, r7, lr}
 8015cc6:	b085      	sub	sp, #20
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d109      	bne.n	8015ce6 <tcp_process_refused_data+0x22>
 8015cd2:	4b37      	ldr	r3, [pc, #220]	; (8015db0 <tcp_process_refused_data+0xec>)
 8015cd4:	f240 6209 	movw	r2, #1545	; 0x609
 8015cd8:	4936      	ldr	r1, [pc, #216]	; (8015db4 <tcp_process_refused_data+0xf0>)
 8015cda:	4837      	ldr	r0, [pc, #220]	; (8015db8 <tcp_process_refused_data+0xf4>)
 8015cdc:	f009 faa6 	bl	801f22c <iprintf>
 8015ce0:	f06f 030f 	mvn.w	r3, #15
 8015ce4:	e060      	b.n	8015da8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015cea:	7b5b      	ldrb	r3, [r3, #13]
 8015cec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015cf2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d00b      	beq.n	8015d1c <tcp_process_refused_data+0x58>
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6918      	ldr	r0, [r3, #16]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	68ba      	ldr	r2, [r7, #8]
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	47a0      	blx	r4
 8015d16:	4603      	mov	r3, r0
 8015d18:	73fb      	strb	r3, [r7, #15]
 8015d1a:	e007      	b.n	8015d2c <tcp_process_refused_data+0x68>
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	68ba      	ldr	r2, [r7, #8]
 8015d20:	6879      	ldr	r1, [r7, #4]
 8015d22:	2000      	movs	r0, #0
 8015d24:	f000 f8a4 	bl	8015e70 <tcp_recv_null>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d12a      	bne.n	8015d8a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015d34:	7bbb      	ldrb	r3, [r7, #14]
 8015d36:	f003 0320 	and.w	r3, r3, #32
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d033      	beq.n	8015da6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015d46:	d005      	beq.n	8015d54 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d00b      	beq.n	8015d76 <tcp_process_refused_data+0xb2>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6918      	ldr	r0, [r3, #16]
 8015d68:	2300      	movs	r3, #0
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	6879      	ldr	r1, [r7, #4]
 8015d6e:	47a0      	blx	r4
 8015d70:	4603      	mov	r3, r0
 8015d72:	73fb      	strb	r3, [r7, #15]
 8015d74:	e001      	b.n	8015d7a <tcp_process_refused_data+0xb6>
 8015d76:	2300      	movs	r3, #0
 8015d78:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d7e:	f113 0f0d 	cmn.w	r3, #13
 8015d82:	d110      	bne.n	8015da6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015d84:	f06f 030c 	mvn.w	r3, #12
 8015d88:	e00e      	b.n	8015da8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d8e:	f113 0f0d 	cmn.w	r3, #13
 8015d92:	d102      	bne.n	8015d9a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015d94:	f06f 030c 	mvn.w	r3, #12
 8015d98:	e006      	b.n	8015da8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	68ba      	ldr	r2, [r7, #8]
 8015d9e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015da0:	f06f 0304 	mvn.w	r3, #4
 8015da4:	e000      	b.n	8015da8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3714      	adds	r7, #20
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd90      	pop	{r4, r7, pc}
 8015db0:	08024d94 	.word	0x08024d94
 8015db4:	080252a4 	.word	0x080252a4
 8015db8:	08024dd8 	.word	0x08024dd8

08015dbc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015dc4:	e007      	b.n	8015dd6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f000 f80a 	bl	8015de6 <tcp_seg_free>
    seg = next;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1f4      	bne.n	8015dc6 <tcp_segs_free+0xa>
  }
}
 8015ddc:	bf00      	nop
 8015dde:	bf00      	nop
 8015de0:	3710      	adds	r7, #16
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}

08015de6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015de6:	b580      	push	{r7, lr}
 8015de8:	b082      	sub	sp, #8
 8015dea:	af00      	add	r7, sp, #0
 8015dec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00c      	beq.n	8015e0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d004      	beq.n	8015e06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7fe fc27 	bl	8014654 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015e06:	6879      	ldr	r1, [r7, #4]
 8015e08:	2003      	movs	r0, #3
 8015e0a:	f7fd fde3 	bl	80139d4 <memp_free>
  }
}
 8015e0e:	bf00      	nop
 8015e10:	3708      	adds	r7, #8
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
	...

08015e18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b084      	sub	sp, #16
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d106      	bne.n	8015e34 <tcp_seg_copy+0x1c>
 8015e26:	4b0f      	ldr	r3, [pc, #60]	; (8015e64 <tcp_seg_copy+0x4c>)
 8015e28:	f240 6282 	movw	r2, #1666	; 0x682
 8015e2c:	490e      	ldr	r1, [pc, #56]	; (8015e68 <tcp_seg_copy+0x50>)
 8015e2e:	480f      	ldr	r0, [pc, #60]	; (8015e6c <tcp_seg_copy+0x54>)
 8015e30:	f009 f9fc 	bl	801f22c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015e34:	2003      	movs	r0, #3
 8015e36:	f7fd fd7b 	bl	8013930 <memp_malloc>
 8015e3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d101      	bne.n	8015e46 <tcp_seg_copy+0x2e>
    return NULL;
 8015e42:	2300      	movs	r3, #0
 8015e44:	e00a      	b.n	8015e5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015e46:	2210      	movs	r2, #16
 8015e48:	6879      	ldr	r1, [r7, #4]
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f008 fa9a 	bl	801e384 <memcpy>
  pbuf_ref(cseg->p);
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	685b      	ldr	r3, [r3, #4]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7fe fca3 	bl	80147a0 <pbuf_ref>
  return cseg;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3710      	adds	r7, #16
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	08024d94 	.word	0x08024d94
 8015e68:	080252e8 	.word	0x080252e8
 8015e6c:	08024dd8 	.word	0x08024dd8

08015e70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b084      	sub	sp, #16
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	60f8      	str	r0, [r7, #12]
 8015e78:	60b9      	str	r1, [r7, #8]
 8015e7a:	607a      	str	r2, [r7, #4]
 8015e7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d109      	bne.n	8015e98 <tcp_recv_null+0x28>
 8015e84:	4b12      	ldr	r3, [pc, #72]	; (8015ed0 <tcp_recv_null+0x60>)
 8015e86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015e8a:	4912      	ldr	r1, [pc, #72]	; (8015ed4 <tcp_recv_null+0x64>)
 8015e8c:	4812      	ldr	r0, [pc, #72]	; (8015ed8 <tcp_recv_null+0x68>)
 8015e8e:	f009 f9cd 	bl	801f22c <iprintf>
 8015e92:	f06f 030f 	mvn.w	r3, #15
 8015e96:	e016      	b.n	8015ec6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d009      	beq.n	8015eb2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	891b      	ldrh	r3, [r3, #8]
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	68b8      	ldr	r0, [r7, #8]
 8015ea6:	f7ff fad3 	bl	8015450 <tcp_recved>
    pbuf_free(p);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f7fe fbd2 	bl	8014654 <pbuf_free>
 8015eb0:	e008      	b.n	8015ec4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d104      	bne.n	8015ec4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015eba:	68b8      	ldr	r0, [r7, #8]
 8015ebc:	f7ff f884 	bl	8014fc8 <tcp_close>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	e000      	b.n	8015ec6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3710      	adds	r7, #16
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	08024d94 	.word	0x08024d94
 8015ed4:	08025304 	.word	0x08025304
 8015ed8:	08024dd8 	.word	0x08024dd8

08015edc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b086      	sub	sp, #24
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	db01      	blt.n	8015ef2 <tcp_kill_prio+0x16>
 8015eee:	79fb      	ldrb	r3, [r7, #7]
 8015ef0:	e000      	b.n	8015ef4 <tcp_kill_prio+0x18>
 8015ef2:	237f      	movs	r3, #127	; 0x7f
 8015ef4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015ef6:	7afb      	ldrb	r3, [r7, #11]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d034      	beq.n	8015f66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015efc:	7afb      	ldrb	r3, [r7, #11]
 8015efe:	3b01      	subs	r3, #1
 8015f00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015f02:	2300      	movs	r3, #0
 8015f04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015f06:	2300      	movs	r3, #0
 8015f08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f0a:	4b19      	ldr	r3, [pc, #100]	; (8015f70 <tcp_kill_prio+0x94>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	617b      	str	r3, [r7, #20]
 8015f10:	e01f      	b.n	8015f52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	7d5b      	ldrb	r3, [r3, #21]
 8015f16:	7afa      	ldrb	r2, [r7, #11]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d80c      	bhi.n	8015f36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015f20:	7afa      	ldrb	r2, [r7, #11]
 8015f22:	429a      	cmp	r2, r3
 8015f24:	d112      	bne.n	8015f4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f26:	4b13      	ldr	r3, [pc, #76]	; (8015f74 <tcp_kill_prio+0x98>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	6a1b      	ldr	r3, [r3, #32]
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d80a      	bhi.n	8015f4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015f36:	4b0f      	ldr	r3, [pc, #60]	; (8015f74 <tcp_kill_prio+0x98>)
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	6a1b      	ldr	r3, [r3, #32]
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	7d5b      	ldrb	r3, [r3, #21]
 8015f4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f4c:	697b      	ldr	r3, [r7, #20]
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	617b      	str	r3, [r7, #20]
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1dc      	bne.n	8015f12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015f58:	693b      	ldr	r3, [r7, #16]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d004      	beq.n	8015f68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015f5e:	6938      	ldr	r0, [r7, #16]
 8015f60:	f7ff f978 	bl	8015254 <tcp_abort>
 8015f64:	e000      	b.n	8015f68 <tcp_kill_prio+0x8c>
    return;
 8015f66:	bf00      	nop
  }
}
 8015f68:	3718      	adds	r7, #24
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	2000e170 	.word	0x2000e170
 8015f74:	2000e174 	.word	0x2000e174

08015f78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b086      	sub	sp, #24
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	4603      	mov	r3, r0
 8015f80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015f82:	79fb      	ldrb	r3, [r7, #7]
 8015f84:	2b08      	cmp	r3, #8
 8015f86:	d009      	beq.n	8015f9c <tcp_kill_state+0x24>
 8015f88:	79fb      	ldrb	r3, [r7, #7]
 8015f8a:	2b09      	cmp	r3, #9
 8015f8c:	d006      	beq.n	8015f9c <tcp_kill_state+0x24>
 8015f8e:	4b1a      	ldr	r3, [pc, #104]	; (8015ff8 <tcp_kill_state+0x80>)
 8015f90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015f94:	4919      	ldr	r1, [pc, #100]	; (8015ffc <tcp_kill_state+0x84>)
 8015f96:	481a      	ldr	r0, [pc, #104]	; (8016000 <tcp_kill_state+0x88>)
 8015f98:	f009 f948 	bl	801f22c <iprintf>

  inactivity = 0;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fa4:	4b17      	ldr	r3, [pc, #92]	; (8016004 <tcp_kill_state+0x8c>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	617b      	str	r3, [r7, #20]
 8015faa:	e017      	b.n	8015fdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	7d1b      	ldrb	r3, [r3, #20]
 8015fb0:	79fa      	ldrb	r2, [r7, #7]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d10f      	bne.n	8015fd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015fb6:	4b14      	ldr	r3, [pc, #80]	; (8016008 <tcp_kill_state+0x90>)
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	6a1b      	ldr	r3, [r3, #32]
 8015fbe:	1ad3      	subs	r3, r2, r3
 8015fc0:	68fa      	ldr	r2, [r7, #12]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d807      	bhi.n	8015fd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015fc6:	4b10      	ldr	r3, [pc, #64]	; (8016008 <tcp_kill_state+0x90>)
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	697b      	ldr	r3, [r7, #20]
 8015fcc:	6a1b      	ldr	r3, [r3, #32]
 8015fce:	1ad3      	subs	r3, r2, r3
 8015fd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	68db      	ldr	r3, [r3, #12]
 8015fda:	617b      	str	r3, [r7, #20]
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d1e4      	bne.n	8015fac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d003      	beq.n	8015ff0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015fe8:	2100      	movs	r1, #0
 8015fea:	6938      	ldr	r0, [r7, #16]
 8015fec:	f7ff f874 	bl	80150d8 <tcp_abandon>
  }
}
 8015ff0:	bf00      	nop
 8015ff2:	3718      	adds	r7, #24
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	08024d94 	.word	0x08024d94
 8015ffc:	08025320 	.word	0x08025320
 8016000:	08024dd8 	.word	0x08024dd8
 8016004:	2000e170 	.word	0x2000e170
 8016008:	2000e174 	.word	0x2000e174

0801600c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b084      	sub	sp, #16
 8016010:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016012:	2300      	movs	r3, #0
 8016014:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016016:	2300      	movs	r3, #0
 8016018:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801601a:	4b12      	ldr	r3, [pc, #72]	; (8016064 <tcp_kill_timewait+0x58>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	60fb      	str	r3, [r7, #12]
 8016020:	e012      	b.n	8016048 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016022:	4b11      	ldr	r3, [pc, #68]	; (8016068 <tcp_kill_timewait+0x5c>)
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6a1b      	ldr	r3, [r3, #32]
 801602a:	1ad3      	subs	r3, r2, r3
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	429a      	cmp	r2, r3
 8016030:	d807      	bhi.n	8016042 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016032:	4b0d      	ldr	r3, [pc, #52]	; (8016068 <tcp_kill_timewait+0x5c>)
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	6a1b      	ldr	r3, [r3, #32]
 801603a:	1ad3      	subs	r3, r2, r3
 801603c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	60fb      	str	r3, [r7, #12]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d1e9      	bne.n	8016022 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d002      	beq.n	801605a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016054:	68b8      	ldr	r0, [r7, #8]
 8016056:	f7ff f8fd 	bl	8015254 <tcp_abort>
  }
}
 801605a:	bf00      	nop
 801605c:	3710      	adds	r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	2000e180 	.word	0x2000e180
 8016068:	2000e174 	.word	0x2000e174

0801606c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016072:	4b10      	ldr	r3, [pc, #64]	; (80160b4 <tcp_handle_closepend+0x48>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016078:	e014      	b.n	80160a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	8b5b      	ldrh	r3, [r3, #26]
 8016084:	f003 0308 	and.w	r3, r3, #8
 8016088:	2b00      	cmp	r3, #0
 801608a:	d009      	beq.n	80160a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	8b5b      	ldrh	r3, [r3, #26]
 8016090:	f023 0308 	bic.w	r3, r3, #8
 8016094:	b29a      	uxth	r2, r3
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f7fe ff2a 	bl	8014ef4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d1e7      	bne.n	801607a <tcp_handle_closepend+0xe>
  }
}
 80160aa:	bf00      	nop
 80160ac:	bf00      	nop
 80160ae:	3708      	adds	r7, #8
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}
 80160b4:	2000e170 	.word	0x2000e170

080160b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	4603      	mov	r3, r0
 80160c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160c2:	2001      	movs	r0, #1
 80160c4:	f7fd fc34 	bl	8013930 <memp_malloc>
 80160c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d126      	bne.n	801611e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80160d0:	f7ff ffcc 	bl	801606c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80160d4:	f7ff ff9a 	bl	801600c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160d8:	2001      	movs	r0, #1
 80160da:	f7fd fc29 	bl	8013930 <memp_malloc>
 80160de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d11b      	bne.n	801611e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80160e6:	2009      	movs	r0, #9
 80160e8:	f7ff ff46 	bl	8015f78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160ec:	2001      	movs	r0, #1
 80160ee:	f7fd fc1f 	bl	8013930 <memp_malloc>
 80160f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d111      	bne.n	801611e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80160fa:	2008      	movs	r0, #8
 80160fc:	f7ff ff3c 	bl	8015f78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016100:	2001      	movs	r0, #1
 8016102:	f7fd fc15 	bl	8013930 <memp_malloc>
 8016106:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d107      	bne.n	801611e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801610e:	79fb      	ldrb	r3, [r7, #7]
 8016110:	4618      	mov	r0, r3
 8016112:	f7ff fee3 	bl	8015edc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016116:	2001      	movs	r0, #1
 8016118:	f7fd fc0a 	bl	8013930 <memp_malloc>
 801611c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d03f      	beq.n	80161a4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016124:	229c      	movs	r2, #156	; 0x9c
 8016126:	2100      	movs	r1, #0
 8016128:	68f8      	ldr	r0, [r7, #12]
 801612a:	f008 f953 	bl	801e3d4 <memset>
    pcb->prio = prio;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	79fa      	ldrb	r2, [r7, #7]
 8016132:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801613a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	22ff      	movs	r2, #255	; 0xff
 8016152:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	f44f 7206 	mov.w	r2, #536	; 0x218
 801615a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	2206      	movs	r2, #6
 8016160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	2206      	movs	r2, #6
 8016168:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016170:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	2201      	movs	r2, #1
 8016176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801617a:	4b0d      	ldr	r3, [pc, #52]	; (80161b0 <tcp_alloc+0xf8>)
 801617c:	681a      	ldr	r2, [r3, #0]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016182:	4b0c      	ldr	r3, [pc, #48]	; (80161b4 <tcp_alloc+0xfc>)
 8016184:	781a      	ldrb	r2, [r3, #0]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	4a08      	ldr	r2, [pc, #32]	; (80161b8 <tcp_alloc+0x100>)
 8016198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	4a07      	ldr	r2, [pc, #28]	; (80161bc <tcp_alloc+0x104>)
 80161a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80161a4:	68fb      	ldr	r3, [r7, #12]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	2000e174 	.word	0x2000e174
 80161b4:	20006e12 	.word	0x20006e12
 80161b8:	08015e71 	.word	0x08015e71
 80161bc:	006ddd00 	.word	0x006ddd00

080161c0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	4603      	mov	r3, r0
 80161c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80161ca:	2040      	movs	r0, #64	; 0x40
 80161cc:	f7ff ff74 	bl	80160b8 <tcp_alloc>
 80161d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80161d2:	68fb      	ldr	r3, [r7, #12]
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3710      	adds	r7, #16
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80161dc:	b480      	push	{r7}
 80161de:	b083      	sub	sp, #12
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
 80161e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d002      	beq.n	80161f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	683a      	ldr	r2, [r7, #0]
 80161f0:	611a      	str	r2, [r3, #16]
  }
}
 80161f2:	bf00      	nop
 80161f4:	370c      	adds	r7, #12
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr
	...

08016200 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00e      	beq.n	801622e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	7d1b      	ldrb	r3, [r3, #20]
 8016214:	2b01      	cmp	r3, #1
 8016216:	d106      	bne.n	8016226 <tcp_recv+0x26>
 8016218:	4b07      	ldr	r3, [pc, #28]	; (8016238 <tcp_recv+0x38>)
 801621a:	f240 72df 	movw	r2, #2015	; 0x7df
 801621e:	4907      	ldr	r1, [pc, #28]	; (801623c <tcp_recv+0x3c>)
 8016220:	4807      	ldr	r0, [pc, #28]	; (8016240 <tcp_recv+0x40>)
 8016222:	f009 f803 	bl	801f22c <iprintf>
    pcb->recv = recv;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	683a      	ldr	r2, [r7, #0]
 801622a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801622e:	bf00      	nop
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	08024d94 	.word	0x08024d94
 801623c:	08025330 	.word	0x08025330
 8016240:	08024dd8 	.word	0x08024dd8

08016244 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d00e      	beq.n	8016272 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	7d1b      	ldrb	r3, [r3, #20]
 8016258:	2b01      	cmp	r3, #1
 801625a:	d106      	bne.n	801626a <tcp_sent+0x26>
 801625c:	4b07      	ldr	r3, [pc, #28]	; (801627c <tcp_sent+0x38>)
 801625e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8016262:	4907      	ldr	r1, [pc, #28]	; (8016280 <tcp_sent+0x3c>)
 8016264:	4807      	ldr	r0, [pc, #28]	; (8016284 <tcp_sent+0x40>)
 8016266:	f008 ffe1 	bl	801f22c <iprintf>
    pcb->sent = sent;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	683a      	ldr	r2, [r7, #0]
 801626e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8016272:	bf00      	nop
 8016274:	3708      	adds	r7, #8
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	08024d94 	.word	0x08024d94
 8016280:	08025358 	.word	0x08025358
 8016284:	08024dd8 	.word	0x08024dd8

08016288 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d00e      	beq.n	80162b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	7d1b      	ldrb	r3, [r3, #20]
 801629c:	2b01      	cmp	r3, #1
 801629e:	d106      	bne.n	80162ae <tcp_err+0x26>
 80162a0:	4b07      	ldr	r3, [pc, #28]	; (80162c0 <tcp_err+0x38>)
 80162a2:	f640 020d 	movw	r2, #2061	; 0x80d
 80162a6:	4907      	ldr	r1, [pc, #28]	; (80162c4 <tcp_err+0x3c>)
 80162a8:	4807      	ldr	r0, [pc, #28]	; (80162c8 <tcp_err+0x40>)
 80162aa:	f008 ffbf 	bl	801f22c <iprintf>
    pcb->errf = err;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	683a      	ldr	r2, [r7, #0]
 80162b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80162b6:	bf00      	nop
 80162b8:	3708      	adds	r7, #8
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	08024d94 	.word	0x08024d94
 80162c4:	08025380 	.word	0x08025380
 80162c8:	08024dd8 	.word	0x08024dd8

080162cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b085      	sub	sp, #20
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d008      	beq.n	80162ee <tcp_accept+0x22>
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	7d1b      	ldrb	r3, [r3, #20]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d104      	bne.n	80162ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	683a      	ldr	r2, [r7, #0]
 80162ec:	619a      	str	r2, [r3, #24]
  }
}
 80162ee:	bf00      	nop
 80162f0:	3714      	adds	r7, #20
 80162f2:	46bd      	mov	sp, r7
 80162f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f8:	4770      	bx	lr
	...

080162fc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	60f8      	str	r0, [r7, #12]
 8016304:	60b9      	str	r1, [r7, #8]
 8016306:	4613      	mov	r3, r2
 8016308:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d107      	bne.n	8016320 <tcp_poll+0x24>
 8016310:	4b0e      	ldr	r3, [pc, #56]	; (801634c <tcp_poll+0x50>)
 8016312:	f640 023d 	movw	r2, #2109	; 0x83d
 8016316:	490e      	ldr	r1, [pc, #56]	; (8016350 <tcp_poll+0x54>)
 8016318:	480e      	ldr	r0, [pc, #56]	; (8016354 <tcp_poll+0x58>)
 801631a:	f008 ff87 	bl	801f22c <iprintf>
 801631e:	e011      	b.n	8016344 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	7d1b      	ldrb	r3, [r3, #20]
 8016324:	2b01      	cmp	r3, #1
 8016326:	d106      	bne.n	8016336 <tcp_poll+0x3a>
 8016328:	4b08      	ldr	r3, [pc, #32]	; (801634c <tcp_poll+0x50>)
 801632a:	f640 023e 	movw	r2, #2110	; 0x83e
 801632e:	490a      	ldr	r1, [pc, #40]	; (8016358 <tcp_poll+0x5c>)
 8016330:	4808      	ldr	r0, [pc, #32]	; (8016354 <tcp_poll+0x58>)
 8016332:	f008 ff7b 	bl	801f22c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	68ba      	ldr	r2, [r7, #8]
 801633a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	79fa      	ldrb	r2, [r7, #7]
 8016342:	775a      	strb	r2, [r3, #29]
}
 8016344:	3710      	adds	r7, #16
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}
 801634a:	bf00      	nop
 801634c:	08024d94 	.word	0x08024d94
 8016350:	080253a8 	.word	0x080253a8
 8016354:	08024dd8 	.word	0x08024dd8
 8016358:	080253c0 	.word	0x080253c0

0801635c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d107      	bne.n	801637a <tcp_pcb_purge+0x1e>
 801636a:	4b21      	ldr	r3, [pc, #132]	; (80163f0 <tcp_pcb_purge+0x94>)
 801636c:	f640 0251 	movw	r2, #2129	; 0x851
 8016370:	4920      	ldr	r1, [pc, #128]	; (80163f4 <tcp_pcb_purge+0x98>)
 8016372:	4821      	ldr	r0, [pc, #132]	; (80163f8 <tcp_pcb_purge+0x9c>)
 8016374:	f008 ff5a 	bl	801f22c <iprintf>
 8016378:	e037      	b.n	80163ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	7d1b      	ldrb	r3, [r3, #20]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d033      	beq.n	80163ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016386:	2b0a      	cmp	r3, #10
 8016388:	d02f      	beq.n	80163ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801638e:	2b01      	cmp	r3, #1
 8016390:	d02b      	beq.n	80163ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016396:	2b00      	cmp	r3, #0
 8016398:	d007      	beq.n	80163aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801639e:	4618      	mov	r0, r3
 80163a0:	f7fe f958 	bl	8014654 <pbuf_free>
      pcb->refused_data = NULL;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2200      	movs	r2, #0
 80163a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d002      	beq.n	80163b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f000 f986 	bl	80166c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80163be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163c4:	4618      	mov	r0, r3
 80163c6:	f7ff fcf9 	bl	8015dbc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7ff fcf4 	bl	8015dbc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2200      	movs	r2, #0
 80163d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2200      	movs	r2, #0
 80163e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80163ea:	3708      	adds	r7, #8
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	08024d94 	.word	0x08024d94
 80163f4:	080253e0 	.word	0x080253e0
 80163f8:	08024dd8 	.word	0x08024dd8

080163fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d106      	bne.n	801641a <tcp_pcb_remove+0x1e>
 801640c:	4b3e      	ldr	r3, [pc, #248]	; (8016508 <tcp_pcb_remove+0x10c>)
 801640e:	f640 0283 	movw	r2, #2179	; 0x883
 8016412:	493e      	ldr	r1, [pc, #248]	; (801650c <tcp_pcb_remove+0x110>)
 8016414:	483e      	ldr	r0, [pc, #248]	; (8016510 <tcp_pcb_remove+0x114>)
 8016416:	f008 ff09 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d106      	bne.n	801642e <tcp_pcb_remove+0x32>
 8016420:	4b39      	ldr	r3, [pc, #228]	; (8016508 <tcp_pcb_remove+0x10c>)
 8016422:	f640 0284 	movw	r2, #2180	; 0x884
 8016426:	493b      	ldr	r1, [pc, #236]	; (8016514 <tcp_pcb_remove+0x118>)
 8016428:	4839      	ldr	r0, [pc, #228]	; (8016510 <tcp_pcb_remove+0x114>)
 801642a:	f008 feff 	bl	801f22c <iprintf>

  TCP_RMV(pcblist, pcb);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	683a      	ldr	r2, [r7, #0]
 8016434:	429a      	cmp	r2, r3
 8016436:	d105      	bne.n	8016444 <tcp_pcb_remove+0x48>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	68da      	ldr	r2, [r3, #12]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	601a      	str	r2, [r3, #0]
 8016442:	e013      	b.n	801646c <tcp_pcb_remove+0x70>
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	60fb      	str	r3, [r7, #12]
 801644a:	e00c      	b.n	8016466 <tcp_pcb_remove+0x6a>
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	683a      	ldr	r2, [r7, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	d104      	bne.n	8016460 <tcp_pcb_remove+0x64>
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	68da      	ldr	r2, [r3, #12]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	60da      	str	r2, [r3, #12]
 801645e:	e005      	b.n	801646c <tcp_pcb_remove+0x70>
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	60fb      	str	r3, [r7, #12]
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d1ef      	bne.n	801644c <tcp_pcb_remove+0x50>
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	2200      	movs	r2, #0
 8016470:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016472:	6838      	ldr	r0, [r7, #0]
 8016474:	f7ff ff72 	bl	801635c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	7d1b      	ldrb	r3, [r3, #20]
 801647c:	2b0a      	cmp	r3, #10
 801647e:	d013      	beq.n	80164a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016484:	2b01      	cmp	r3, #1
 8016486:	d00f      	beq.n	80164a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	8b5b      	ldrh	r3, [r3, #26]
 801648c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016490:	2b00      	cmp	r3, #0
 8016492:	d009      	beq.n	80164a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	8b5b      	ldrh	r3, [r3, #26]
 8016498:	f043 0302 	orr.w	r3, r3, #2
 801649c:	b29a      	uxth	r2, r3
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80164a2:	6838      	ldr	r0, [r7, #0]
 80164a4:	f003 fbc2 	bl	8019c2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	7d1b      	ldrb	r3, [r3, #20]
 80164ac:	2b01      	cmp	r3, #1
 80164ae:	d020      	beq.n	80164f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d006      	beq.n	80164c6 <tcp_pcb_remove+0xca>
 80164b8:	4b13      	ldr	r3, [pc, #76]	; (8016508 <tcp_pcb_remove+0x10c>)
 80164ba:	f640 0293 	movw	r2, #2195	; 0x893
 80164be:	4916      	ldr	r1, [pc, #88]	; (8016518 <tcp_pcb_remove+0x11c>)
 80164c0:	4813      	ldr	r0, [pc, #76]	; (8016510 <tcp_pcb_remove+0x114>)
 80164c2:	f008 feb3 	bl	801f22c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d006      	beq.n	80164dc <tcp_pcb_remove+0xe0>
 80164ce:	4b0e      	ldr	r3, [pc, #56]	; (8016508 <tcp_pcb_remove+0x10c>)
 80164d0:	f640 0294 	movw	r2, #2196	; 0x894
 80164d4:	4911      	ldr	r1, [pc, #68]	; (801651c <tcp_pcb_remove+0x120>)
 80164d6:	480e      	ldr	r0, [pc, #56]	; (8016510 <tcp_pcb_remove+0x114>)
 80164d8:	f008 fea8 	bl	801f22c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d006      	beq.n	80164f2 <tcp_pcb_remove+0xf6>
 80164e4:	4b08      	ldr	r3, [pc, #32]	; (8016508 <tcp_pcb_remove+0x10c>)
 80164e6:	f640 0296 	movw	r2, #2198	; 0x896
 80164ea:	490d      	ldr	r1, [pc, #52]	; (8016520 <tcp_pcb_remove+0x124>)
 80164ec:	4808      	ldr	r0, [pc, #32]	; (8016510 <tcp_pcb_remove+0x114>)
 80164ee:	f008 fe9d 	bl	801f22c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	2200      	movs	r2, #0
 80164f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	2200      	movs	r2, #0
 80164fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80164fe:	bf00      	nop
 8016500:	3710      	adds	r7, #16
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	08024d94 	.word	0x08024d94
 801650c:	080253fc 	.word	0x080253fc
 8016510:	08024dd8 	.word	0x08024dd8
 8016514:	08025418 	.word	0x08025418
 8016518:	08025438 	.word	0x08025438
 801651c:	08025450 	.word	0x08025450
 8016520:	0802546c 	.word	0x0802546c

08016524 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d106      	bne.n	8016540 <tcp_next_iss+0x1c>
 8016532:	4b0a      	ldr	r3, [pc, #40]	; (801655c <tcp_next_iss+0x38>)
 8016534:	f640 02af 	movw	r2, #2223	; 0x8af
 8016538:	4909      	ldr	r1, [pc, #36]	; (8016560 <tcp_next_iss+0x3c>)
 801653a:	480a      	ldr	r0, [pc, #40]	; (8016564 <tcp_next_iss+0x40>)
 801653c:	f008 fe76 	bl	801f22c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016540:	4b09      	ldr	r3, [pc, #36]	; (8016568 <tcp_next_iss+0x44>)
 8016542:	681a      	ldr	r2, [r3, #0]
 8016544:	4b09      	ldr	r3, [pc, #36]	; (801656c <tcp_next_iss+0x48>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	4413      	add	r3, r2
 801654a:	4a07      	ldr	r2, [pc, #28]	; (8016568 <tcp_next_iss+0x44>)
 801654c:	6013      	str	r3, [r2, #0]
  return iss;
 801654e:	4b06      	ldr	r3, [pc, #24]	; (8016568 <tcp_next_iss+0x44>)
 8016550:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016552:	4618      	mov	r0, r3
 8016554:	3708      	adds	r7, #8
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	08024d94 	.word	0x08024d94
 8016560:	08025484 	.word	0x08025484
 8016564:	08024dd8 	.word	0x08024dd8
 8016568:	200003b0 	.word	0x200003b0
 801656c:	2000e174 	.word	0x2000e174

08016570 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b086      	sub	sp, #24
 8016574:	af00      	add	r7, sp, #0
 8016576:	4603      	mov	r3, r0
 8016578:	60b9      	str	r1, [r7, #8]
 801657a:	607a      	str	r2, [r7, #4]
 801657c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d106      	bne.n	8016592 <tcp_eff_send_mss_netif+0x22>
 8016584:	4b14      	ldr	r3, [pc, #80]	; (80165d8 <tcp_eff_send_mss_netif+0x68>)
 8016586:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801658a:	4914      	ldr	r1, [pc, #80]	; (80165dc <tcp_eff_send_mss_netif+0x6c>)
 801658c:	4814      	ldr	r0, [pc, #80]	; (80165e0 <tcp_eff_send_mss_netif+0x70>)
 801658e:	f008 fe4d 	bl	801f22c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d101      	bne.n	801659c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016598:	89fb      	ldrh	r3, [r7, #14]
 801659a:	e019      	b.n	80165d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80165a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80165a2:	8afb      	ldrh	r3, [r7, #22]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d012      	beq.n	80165ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80165a8:	2328      	movs	r3, #40	; 0x28
 80165aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80165ac:	8afa      	ldrh	r2, [r7, #22]
 80165ae:	8abb      	ldrh	r3, [r7, #20]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d904      	bls.n	80165be <tcp_eff_send_mss_netif+0x4e>
 80165b4:	8afa      	ldrh	r2, [r7, #22]
 80165b6:	8abb      	ldrh	r3, [r7, #20]
 80165b8:	1ad3      	subs	r3, r2, r3
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	e000      	b.n	80165c0 <tcp_eff_send_mss_netif+0x50>
 80165be:	2300      	movs	r3, #0
 80165c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80165c2:	8a7a      	ldrh	r2, [r7, #18]
 80165c4:	89fb      	ldrh	r3, [r7, #14]
 80165c6:	4293      	cmp	r3, r2
 80165c8:	bf28      	it	cs
 80165ca:	4613      	movcs	r3, r2
 80165cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80165ce:	89fb      	ldrh	r3, [r7, #14]
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3718      	adds	r7, #24
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}
 80165d8:	08024d94 	.word	0x08024d94
 80165dc:	080254a0 	.word	0x080254a0
 80165e0:	08024dd8 	.word	0x08024dd8

080165e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d119      	bne.n	801662c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80165f8:	4b10      	ldr	r3, [pc, #64]	; (801663c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80165fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80165fe:	4910      	ldr	r1, [pc, #64]	; (8016640 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016600:	4810      	ldr	r0, [pc, #64]	; (8016644 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016602:	f008 fe13 	bl	801f22c <iprintf>

  while (pcb != NULL) {
 8016606:	e011      	b.n	801662c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	429a      	cmp	r2, r3
 8016612:	d108      	bne.n	8016626 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801661a:	68f8      	ldr	r0, [r7, #12]
 801661c:	f7fe fe1a 	bl	8015254 <tcp_abort>
      pcb = next;
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	60fb      	str	r3, [r7, #12]
 8016624:	e002      	b.n	801662c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	68db      	ldr	r3, [r3, #12]
 801662a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d1ea      	bne.n	8016608 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016632:	bf00      	nop
 8016634:	bf00      	nop
 8016636:	3710      	adds	r7, #16
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	08024d94 	.word	0x08024d94
 8016640:	080254c8 	.word	0x080254c8
 8016644:	08024dd8 	.word	0x08024dd8

08016648 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d02a      	beq.n	80166ae <tcp_netif_ip_addr_changed+0x66>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d026      	beq.n	80166ae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016660:	4b15      	ldr	r3, [pc, #84]	; (80166b8 <tcp_netif_ip_addr_changed+0x70>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	4619      	mov	r1, r3
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7ff ffbc 	bl	80165e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801666c:	4b13      	ldr	r3, [pc, #76]	; (80166bc <tcp_netif_ip_addr_changed+0x74>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	4619      	mov	r1, r3
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	f7ff ffb6 	bl	80165e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d017      	beq.n	80166ae <tcp_netif_ip_addr_changed+0x66>
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d013      	beq.n	80166ae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016686:	4b0e      	ldr	r3, [pc, #56]	; (80166c0 <tcp_netif_ip_addr_changed+0x78>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	60fb      	str	r3, [r7, #12]
 801668c:	e00c      	b.n	80166a8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	429a      	cmp	r2, r3
 8016698:	d103      	bne.n	80166a2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	68db      	ldr	r3, [r3, #12]
 80166a6:	60fb      	str	r3, [r7, #12]
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d1ef      	bne.n	801668e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80166ae:	bf00      	nop
 80166b0:	3710      	adds	r7, #16
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	2000e170 	.word	0x2000e170
 80166bc:	2000e17c 	.word	0x2000e17c
 80166c0:	2000e178 	.word	0x2000e178

080166c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d007      	beq.n	80166e4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166d8:	4618      	mov	r0, r3
 80166da:	f7ff fb6f 	bl	8015dbc <tcp_segs_free>
    pcb->ooseq = NULL;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2200      	movs	r2, #0
 80166e2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80166e4:	bf00      	nop
 80166e6:	3708      	adds	r7, #8
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80166ec:	b590      	push	{r4, r7, lr}
 80166ee:	b08d      	sub	sp, #52	; 0x34
 80166f0:	af04      	add	r7, sp, #16
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d105      	bne.n	8016708 <tcp_input+0x1c>
 80166fc:	4b9b      	ldr	r3, [pc, #620]	; (801696c <tcp_input+0x280>)
 80166fe:	2283      	movs	r2, #131	; 0x83
 8016700:	499b      	ldr	r1, [pc, #620]	; (8016970 <tcp_input+0x284>)
 8016702:	489c      	ldr	r0, [pc, #624]	; (8016974 <tcp_input+0x288>)
 8016704:	f008 fd92 	bl	801f22c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	4a9a      	ldr	r2, [pc, #616]	; (8016978 <tcp_input+0x28c>)
 801670e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	895b      	ldrh	r3, [r3, #10]
 8016714:	2b13      	cmp	r3, #19
 8016716:	f240 83c4 	bls.w	8016ea2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801671a:	4b98      	ldr	r3, [pc, #608]	; (801697c <tcp_input+0x290>)
 801671c:	695b      	ldr	r3, [r3, #20]
 801671e:	4a97      	ldr	r2, [pc, #604]	; (801697c <tcp_input+0x290>)
 8016720:	6812      	ldr	r2, [r2, #0]
 8016722:	4611      	mov	r1, r2
 8016724:	4618      	mov	r0, r3
 8016726:	f006 fbcb 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	f040 83ba 	bne.w	8016ea6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016732:	4b92      	ldr	r3, [pc, #584]	; (801697c <tcp_input+0x290>)
 8016734:	695b      	ldr	r3, [r3, #20]
 8016736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801673a:	2be0      	cmp	r3, #224	; 0xe0
 801673c:	f000 83b3 	beq.w	8016ea6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016740:	4b8d      	ldr	r3, [pc, #564]	; (8016978 <tcp_input+0x28c>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	899b      	ldrh	r3, [r3, #12]
 8016746:	b29b      	uxth	r3, r3
 8016748:	4618      	mov	r0, r3
 801674a:	f7fc fc3b 	bl	8012fc4 <lwip_htons>
 801674e:	4603      	mov	r3, r0
 8016750:	0b1b      	lsrs	r3, r3, #12
 8016752:	b29b      	uxth	r3, r3
 8016754:	b2db      	uxtb	r3, r3
 8016756:	009b      	lsls	r3, r3, #2
 8016758:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801675a:	7cbb      	ldrb	r3, [r7, #18]
 801675c:	2b13      	cmp	r3, #19
 801675e:	f240 83a4 	bls.w	8016eaa <tcp_input+0x7be>
 8016762:	7cbb      	ldrb	r3, [r7, #18]
 8016764:	b29a      	uxth	r2, r3
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	891b      	ldrh	r3, [r3, #8]
 801676a:	429a      	cmp	r2, r3
 801676c:	f200 839d 	bhi.w	8016eaa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016770:	7cbb      	ldrb	r3, [r7, #18]
 8016772:	b29b      	uxth	r3, r3
 8016774:	3b14      	subs	r3, #20
 8016776:	b29a      	uxth	r2, r3
 8016778:	4b81      	ldr	r3, [pc, #516]	; (8016980 <tcp_input+0x294>)
 801677a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801677c:	4b81      	ldr	r3, [pc, #516]	; (8016984 <tcp_input+0x298>)
 801677e:	2200      	movs	r2, #0
 8016780:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	895a      	ldrh	r2, [r3, #10]
 8016786:	7cbb      	ldrb	r3, [r7, #18]
 8016788:	b29b      	uxth	r3, r3
 801678a:	429a      	cmp	r2, r3
 801678c:	d309      	bcc.n	80167a2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801678e:	4b7c      	ldr	r3, [pc, #496]	; (8016980 <tcp_input+0x294>)
 8016790:	881a      	ldrh	r2, [r3, #0]
 8016792:	4b7d      	ldr	r3, [pc, #500]	; (8016988 <tcp_input+0x29c>)
 8016794:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016796:	7cbb      	ldrb	r3, [r7, #18]
 8016798:	4619      	mov	r1, r3
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7fd fed4 	bl	8014548 <pbuf_remove_header>
 80167a0:	e04e      	b.n	8016840 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d105      	bne.n	80167b6 <tcp_input+0xca>
 80167aa:	4b70      	ldr	r3, [pc, #448]	; (801696c <tcp_input+0x280>)
 80167ac:	22c2      	movs	r2, #194	; 0xc2
 80167ae:	4977      	ldr	r1, [pc, #476]	; (801698c <tcp_input+0x2a0>)
 80167b0:	4870      	ldr	r0, [pc, #448]	; (8016974 <tcp_input+0x288>)
 80167b2:	f008 fd3b 	bl	801f22c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80167b6:	2114      	movs	r1, #20
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f7fd fec5 	bl	8014548 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	895a      	ldrh	r2, [r3, #10]
 80167c2:	4b71      	ldr	r3, [pc, #452]	; (8016988 <tcp_input+0x29c>)
 80167c4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80167c6:	4b6e      	ldr	r3, [pc, #440]	; (8016980 <tcp_input+0x294>)
 80167c8:	881a      	ldrh	r2, [r3, #0]
 80167ca:	4b6f      	ldr	r3, [pc, #444]	; (8016988 <tcp_input+0x29c>)
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	1ad3      	subs	r3, r2, r3
 80167d0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80167d2:	4b6d      	ldr	r3, [pc, #436]	; (8016988 <tcp_input+0x29c>)
 80167d4:	881b      	ldrh	r3, [r3, #0]
 80167d6:	4619      	mov	r1, r3
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f7fd feb5 	bl	8014548 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	895b      	ldrh	r3, [r3, #10]
 80167e4:	8a3a      	ldrh	r2, [r7, #16]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	f200 8361 	bhi.w	8016eae <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	4a64      	ldr	r2, [pc, #400]	; (8016984 <tcp_input+0x298>)
 80167f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	8a3a      	ldrh	r2, [r7, #16]
 80167fc:	4611      	mov	r1, r2
 80167fe:	4618      	mov	r0, r3
 8016800:	f7fd fea2 	bl	8014548 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	891a      	ldrh	r2, [r3, #8]
 8016808:	8a3b      	ldrh	r3, [r7, #16]
 801680a:	1ad3      	subs	r3, r2, r3
 801680c:	b29a      	uxth	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	895b      	ldrh	r3, [r3, #10]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d005      	beq.n	8016826 <tcp_input+0x13a>
 801681a:	4b54      	ldr	r3, [pc, #336]	; (801696c <tcp_input+0x280>)
 801681c:	22df      	movs	r2, #223	; 0xdf
 801681e:	495c      	ldr	r1, [pc, #368]	; (8016990 <tcp_input+0x2a4>)
 8016820:	4854      	ldr	r0, [pc, #336]	; (8016974 <tcp_input+0x288>)
 8016822:	f008 fd03 	bl	801f22c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	891a      	ldrh	r2, [r3, #8]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	891b      	ldrh	r3, [r3, #8]
 8016830:	429a      	cmp	r2, r3
 8016832:	d005      	beq.n	8016840 <tcp_input+0x154>
 8016834:	4b4d      	ldr	r3, [pc, #308]	; (801696c <tcp_input+0x280>)
 8016836:	22e0      	movs	r2, #224	; 0xe0
 8016838:	4956      	ldr	r1, [pc, #344]	; (8016994 <tcp_input+0x2a8>)
 801683a:	484e      	ldr	r0, [pc, #312]	; (8016974 <tcp_input+0x288>)
 801683c:	f008 fcf6 	bl	801f22c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016840:	4b4d      	ldr	r3, [pc, #308]	; (8016978 <tcp_input+0x28c>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	b29b      	uxth	r3, r3
 8016848:	4a4b      	ldr	r2, [pc, #300]	; (8016978 <tcp_input+0x28c>)
 801684a:	6814      	ldr	r4, [r2, #0]
 801684c:	4618      	mov	r0, r3
 801684e:	f7fc fbb9 	bl	8012fc4 <lwip_htons>
 8016852:	4603      	mov	r3, r0
 8016854:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016856:	4b48      	ldr	r3, [pc, #288]	; (8016978 <tcp_input+0x28c>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	885b      	ldrh	r3, [r3, #2]
 801685c:	b29b      	uxth	r3, r3
 801685e:	4a46      	ldr	r2, [pc, #280]	; (8016978 <tcp_input+0x28c>)
 8016860:	6814      	ldr	r4, [r2, #0]
 8016862:	4618      	mov	r0, r3
 8016864:	f7fc fbae 	bl	8012fc4 <lwip_htons>
 8016868:	4603      	mov	r3, r0
 801686a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801686c:	4b42      	ldr	r3, [pc, #264]	; (8016978 <tcp_input+0x28c>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	4a41      	ldr	r2, [pc, #260]	; (8016978 <tcp_input+0x28c>)
 8016874:	6814      	ldr	r4, [r2, #0]
 8016876:	4618      	mov	r0, r3
 8016878:	f7fc fbb9 	bl	8012fee <lwip_htonl>
 801687c:	4603      	mov	r3, r0
 801687e:	6063      	str	r3, [r4, #4]
 8016880:	6863      	ldr	r3, [r4, #4]
 8016882:	4a45      	ldr	r2, [pc, #276]	; (8016998 <tcp_input+0x2ac>)
 8016884:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016886:	4b3c      	ldr	r3, [pc, #240]	; (8016978 <tcp_input+0x28c>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	4a3a      	ldr	r2, [pc, #232]	; (8016978 <tcp_input+0x28c>)
 801688e:	6814      	ldr	r4, [r2, #0]
 8016890:	4618      	mov	r0, r3
 8016892:	f7fc fbac 	bl	8012fee <lwip_htonl>
 8016896:	4603      	mov	r3, r0
 8016898:	60a3      	str	r3, [r4, #8]
 801689a:	68a3      	ldr	r3, [r4, #8]
 801689c:	4a3f      	ldr	r2, [pc, #252]	; (801699c <tcp_input+0x2b0>)
 801689e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80168a0:	4b35      	ldr	r3, [pc, #212]	; (8016978 <tcp_input+0x28c>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	89db      	ldrh	r3, [r3, #14]
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	4a33      	ldr	r2, [pc, #204]	; (8016978 <tcp_input+0x28c>)
 80168aa:	6814      	ldr	r4, [r2, #0]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7fc fb89 	bl	8012fc4 <lwip_htons>
 80168b2:	4603      	mov	r3, r0
 80168b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80168b6:	4b30      	ldr	r3, [pc, #192]	; (8016978 <tcp_input+0x28c>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	899b      	ldrh	r3, [r3, #12]
 80168bc:	b29b      	uxth	r3, r3
 80168be:	4618      	mov	r0, r3
 80168c0:	f7fc fb80 	bl	8012fc4 <lwip_htons>
 80168c4:	4603      	mov	r3, r0
 80168c6:	b2db      	uxtb	r3, r3
 80168c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80168cc:	b2da      	uxtb	r2, r3
 80168ce:	4b34      	ldr	r3, [pc, #208]	; (80169a0 <tcp_input+0x2b4>)
 80168d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	891a      	ldrh	r2, [r3, #8]
 80168d6:	4b33      	ldr	r3, [pc, #204]	; (80169a4 <tcp_input+0x2b8>)
 80168d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80168da:	4b31      	ldr	r3, [pc, #196]	; (80169a0 <tcp_input+0x2b4>)
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	f003 0303 	and.w	r3, r3, #3
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00c      	beq.n	8016900 <tcp_input+0x214>
    tcplen++;
 80168e6:	4b2f      	ldr	r3, [pc, #188]	; (80169a4 <tcp_input+0x2b8>)
 80168e8:	881b      	ldrh	r3, [r3, #0]
 80168ea:	3301      	adds	r3, #1
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	4b2d      	ldr	r3, [pc, #180]	; (80169a4 <tcp_input+0x2b8>)
 80168f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	891a      	ldrh	r2, [r3, #8]
 80168f6:	4b2b      	ldr	r3, [pc, #172]	; (80169a4 <tcp_input+0x2b8>)
 80168f8:	881b      	ldrh	r3, [r3, #0]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	f200 82d9 	bhi.w	8016eb2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016900:	2300      	movs	r3, #0
 8016902:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016904:	4b28      	ldr	r3, [pc, #160]	; (80169a8 <tcp_input+0x2bc>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	61fb      	str	r3, [r7, #28]
 801690a:	e09d      	b.n	8016a48 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801690c:	69fb      	ldr	r3, [r7, #28]
 801690e:	7d1b      	ldrb	r3, [r3, #20]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d105      	bne.n	8016920 <tcp_input+0x234>
 8016914:	4b15      	ldr	r3, [pc, #84]	; (801696c <tcp_input+0x280>)
 8016916:	22fb      	movs	r2, #251	; 0xfb
 8016918:	4924      	ldr	r1, [pc, #144]	; (80169ac <tcp_input+0x2c0>)
 801691a:	4816      	ldr	r0, [pc, #88]	; (8016974 <tcp_input+0x288>)
 801691c:	f008 fc86 	bl	801f22c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	7d1b      	ldrb	r3, [r3, #20]
 8016924:	2b0a      	cmp	r3, #10
 8016926:	d105      	bne.n	8016934 <tcp_input+0x248>
 8016928:	4b10      	ldr	r3, [pc, #64]	; (801696c <tcp_input+0x280>)
 801692a:	22fc      	movs	r2, #252	; 0xfc
 801692c:	4920      	ldr	r1, [pc, #128]	; (80169b0 <tcp_input+0x2c4>)
 801692e:	4811      	ldr	r0, [pc, #68]	; (8016974 <tcp_input+0x288>)
 8016930:	f008 fc7c 	bl	801f22c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016934:	69fb      	ldr	r3, [r7, #28]
 8016936:	7d1b      	ldrb	r3, [r3, #20]
 8016938:	2b01      	cmp	r3, #1
 801693a:	d105      	bne.n	8016948 <tcp_input+0x25c>
 801693c:	4b0b      	ldr	r3, [pc, #44]	; (801696c <tcp_input+0x280>)
 801693e:	22fd      	movs	r2, #253	; 0xfd
 8016940:	491c      	ldr	r1, [pc, #112]	; (80169b4 <tcp_input+0x2c8>)
 8016942:	480c      	ldr	r0, [pc, #48]	; (8016974 <tcp_input+0x288>)
 8016944:	f008 fc72 	bl	801f22c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	7a1b      	ldrb	r3, [r3, #8]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d033      	beq.n	80169b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	7a1a      	ldrb	r2, [r3, #8]
 8016954:	4b09      	ldr	r3, [pc, #36]	; (801697c <tcp_input+0x290>)
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801695c:	3301      	adds	r3, #1
 801695e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016960:	429a      	cmp	r2, r3
 8016962:	d029      	beq.n	80169b8 <tcp_input+0x2cc>
      prev = pcb;
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	61bb      	str	r3, [r7, #24]
      continue;
 8016968:	e06b      	b.n	8016a42 <tcp_input+0x356>
 801696a:	bf00      	nop
 801696c:	080254fc 	.word	0x080254fc
 8016970:	08025530 	.word	0x08025530
 8016974:	08025548 	.word	0x08025548
 8016978:	20006e24 	.word	0x20006e24
 801697c:	2000aa5c 	.word	0x2000aa5c
 8016980:	20006e28 	.word	0x20006e28
 8016984:	20006e2c 	.word	0x20006e2c
 8016988:	20006e2a 	.word	0x20006e2a
 801698c:	08025570 	.word	0x08025570
 8016990:	08025580 	.word	0x08025580
 8016994:	0802558c 	.word	0x0802558c
 8016998:	20006e34 	.word	0x20006e34
 801699c:	20006e38 	.word	0x20006e38
 80169a0:	20006e40 	.word	0x20006e40
 80169a4:	20006e3e 	.word	0x20006e3e
 80169a8:	2000e170 	.word	0x2000e170
 80169ac:	080255ac 	.word	0x080255ac
 80169b0:	080255d4 	.word	0x080255d4
 80169b4:	08025600 	.word	0x08025600
    }

    if (pcb->remote_port == tcphdr->src &&
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	8b1a      	ldrh	r2, [r3, #24]
 80169bc:	4b94      	ldr	r3, [pc, #592]	; (8016c10 <tcp_input+0x524>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	881b      	ldrh	r3, [r3, #0]
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d13a      	bne.n	8016a3e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	8ada      	ldrh	r2, [r3, #22]
 80169cc:	4b90      	ldr	r3, [pc, #576]	; (8016c10 <tcp_input+0x524>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	885b      	ldrh	r3, [r3, #2]
 80169d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d132      	bne.n	8016a3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80169d8:	69fb      	ldr	r3, [r7, #28]
 80169da:	685a      	ldr	r2, [r3, #4]
 80169dc:	4b8d      	ldr	r3, [pc, #564]	; (8016c14 <tcp_input+0x528>)
 80169de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d12c      	bne.n	8016a3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80169e4:	69fb      	ldr	r3, [r7, #28]
 80169e6:	681a      	ldr	r2, [r3, #0]
 80169e8:	4b8a      	ldr	r3, [pc, #552]	; (8016c14 <tcp_input+0x528>)
 80169ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d126      	bne.n	8016a3e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	68db      	ldr	r3, [r3, #12]
 80169f4:	69fa      	ldr	r2, [r7, #28]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d106      	bne.n	8016a08 <tcp_input+0x31c>
 80169fa:	4b87      	ldr	r3, [pc, #540]	; (8016c18 <tcp_input+0x52c>)
 80169fc:	f240 120d 	movw	r2, #269	; 0x10d
 8016a00:	4986      	ldr	r1, [pc, #536]	; (8016c1c <tcp_input+0x530>)
 8016a02:	4887      	ldr	r0, [pc, #540]	; (8016c20 <tcp_input+0x534>)
 8016a04:	f008 fc12 	bl	801f22c <iprintf>
      if (prev != NULL) {
 8016a08:	69bb      	ldr	r3, [r7, #24]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d00a      	beq.n	8016a24 <tcp_input+0x338>
        prev->next = pcb->next;
 8016a0e:	69fb      	ldr	r3, [r7, #28]
 8016a10:	68da      	ldr	r2, [r3, #12]
 8016a12:	69bb      	ldr	r3, [r7, #24]
 8016a14:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016a16:	4b83      	ldr	r3, [pc, #524]	; (8016c24 <tcp_input+0x538>)
 8016a18:	681a      	ldr	r2, [r3, #0]
 8016a1a:	69fb      	ldr	r3, [r7, #28]
 8016a1c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016a1e:	4a81      	ldr	r2, [pc, #516]	; (8016c24 <tcp_input+0x538>)
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	68db      	ldr	r3, [r3, #12]
 8016a28:	69fa      	ldr	r2, [r7, #28]
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	d111      	bne.n	8016a52 <tcp_input+0x366>
 8016a2e:	4b7a      	ldr	r3, [pc, #488]	; (8016c18 <tcp_input+0x52c>)
 8016a30:	f240 1215 	movw	r2, #277	; 0x115
 8016a34:	497c      	ldr	r1, [pc, #496]	; (8016c28 <tcp_input+0x53c>)
 8016a36:	487a      	ldr	r0, [pc, #488]	; (8016c20 <tcp_input+0x534>)
 8016a38:	f008 fbf8 	bl	801f22c <iprintf>
      break;
 8016a3c:	e009      	b.n	8016a52 <tcp_input+0x366>
    }
    prev = pcb;
 8016a3e:	69fb      	ldr	r3, [r7, #28]
 8016a40:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a42:	69fb      	ldr	r3, [r7, #28]
 8016a44:	68db      	ldr	r3, [r3, #12]
 8016a46:	61fb      	str	r3, [r7, #28]
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f47f af5e 	bne.w	801690c <tcp_input+0x220>
 8016a50:	e000      	b.n	8016a54 <tcp_input+0x368>
      break;
 8016a52:	bf00      	nop
  }

  if (pcb == NULL) {
 8016a54:	69fb      	ldr	r3, [r7, #28]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	f040 8095 	bne.w	8016b86 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a5c:	4b73      	ldr	r3, [pc, #460]	; (8016c2c <tcp_input+0x540>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	61fb      	str	r3, [r7, #28]
 8016a62:	e03f      	b.n	8016ae4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	7d1b      	ldrb	r3, [r3, #20]
 8016a68:	2b0a      	cmp	r3, #10
 8016a6a:	d006      	beq.n	8016a7a <tcp_input+0x38e>
 8016a6c:	4b6a      	ldr	r3, [pc, #424]	; (8016c18 <tcp_input+0x52c>)
 8016a6e:	f240 121f 	movw	r2, #287	; 0x11f
 8016a72:	496f      	ldr	r1, [pc, #444]	; (8016c30 <tcp_input+0x544>)
 8016a74:	486a      	ldr	r0, [pc, #424]	; (8016c20 <tcp_input+0x534>)
 8016a76:	f008 fbd9 	bl	801f22c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	7a1b      	ldrb	r3, [r3, #8]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d009      	beq.n	8016a96 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	7a1a      	ldrb	r2, [r3, #8]
 8016a86:	4b63      	ldr	r3, [pc, #396]	; (8016c14 <tcp_input+0x528>)
 8016a88:	685b      	ldr	r3, [r3, #4]
 8016a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a8e:	3301      	adds	r3, #1
 8016a90:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d122      	bne.n	8016adc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016a96:	69fb      	ldr	r3, [r7, #28]
 8016a98:	8b1a      	ldrh	r2, [r3, #24]
 8016a9a:	4b5d      	ldr	r3, [pc, #372]	; (8016c10 <tcp_input+0x524>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	881b      	ldrh	r3, [r3, #0]
 8016aa0:	b29b      	uxth	r3, r3
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d11b      	bne.n	8016ade <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	8ada      	ldrh	r2, [r3, #22]
 8016aaa:	4b59      	ldr	r3, [pc, #356]	; (8016c10 <tcp_input+0x524>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	885b      	ldrh	r3, [r3, #2]
 8016ab0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d113      	bne.n	8016ade <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	685a      	ldr	r2, [r3, #4]
 8016aba:	4b56      	ldr	r3, [pc, #344]	; (8016c14 <tcp_input+0x528>)
 8016abc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d10d      	bne.n	8016ade <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	681a      	ldr	r2, [r3, #0]
 8016ac6:	4b53      	ldr	r3, [pc, #332]	; (8016c14 <tcp_input+0x528>)
 8016ac8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d107      	bne.n	8016ade <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016ace:	69f8      	ldr	r0, [r7, #28]
 8016ad0:	f000 fb54 	bl	801717c <tcp_timewait_input>
        }
        pbuf_free(p);
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f7fd fdbd 	bl	8014654 <pbuf_free>
        return;
 8016ada:	e1f0      	b.n	8016ebe <tcp_input+0x7d2>
        continue;
 8016adc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ade:	69fb      	ldr	r3, [r7, #28]
 8016ae0:	68db      	ldr	r3, [r3, #12]
 8016ae2:	61fb      	str	r3, [r7, #28]
 8016ae4:	69fb      	ldr	r3, [r7, #28]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d1bc      	bne.n	8016a64 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016aea:	2300      	movs	r3, #0
 8016aec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016aee:	4b51      	ldr	r3, [pc, #324]	; (8016c34 <tcp_input+0x548>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	617b      	str	r3, [r7, #20]
 8016af4:	e02a      	b.n	8016b4c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	7a1b      	ldrb	r3, [r3, #8]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00c      	beq.n	8016b18 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	7a1a      	ldrb	r2, [r3, #8]
 8016b02:	4b44      	ldr	r3, [pc, #272]	; (8016c14 <tcp_input+0x528>)
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d002      	beq.n	8016b18 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	61bb      	str	r3, [r7, #24]
        continue;
 8016b16:	e016      	b.n	8016b46 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	8ada      	ldrh	r2, [r3, #22]
 8016b1c:	4b3c      	ldr	r3, [pc, #240]	; (8016c10 <tcp_input+0x524>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	885b      	ldrh	r3, [r3, #2]
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d10c      	bne.n	8016b42 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	4b39      	ldr	r3, [pc, #228]	; (8016c14 <tcp_input+0x528>)
 8016b2e:	695b      	ldr	r3, [r3, #20]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d00f      	beq.n	8016b54 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d00d      	beq.n	8016b56 <tcp_input+0x46a>
 8016b3a:	697b      	ldr	r3, [r7, #20]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d009      	beq.n	8016b56 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	617b      	str	r3, [r7, #20]
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d1d1      	bne.n	8016af6 <tcp_input+0x40a>
 8016b52:	e000      	b.n	8016b56 <tcp_input+0x46a>
            break;
 8016b54:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d014      	beq.n	8016b86 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016b5c:	69bb      	ldr	r3, [r7, #24]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d00a      	beq.n	8016b78 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016b62:	697b      	ldr	r3, [r7, #20]
 8016b64:	68da      	ldr	r2, [r3, #12]
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016b6a:	4b32      	ldr	r3, [pc, #200]	; (8016c34 <tcp_input+0x548>)
 8016b6c:	681a      	ldr	r2, [r3, #0]
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016b72:	4a30      	ldr	r2, [pc, #192]	; (8016c34 <tcp_input+0x548>)
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016b78:	6978      	ldr	r0, [r7, #20]
 8016b7a:	f000 fa01 	bl	8016f80 <tcp_listen_input>
      }
      pbuf_free(p);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7fd fd68 	bl	8014654 <pbuf_free>
      return;
 8016b84:	e19b      	b.n	8016ebe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	f000 8160 	beq.w	8016e4e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016b8e:	4b2a      	ldr	r3, [pc, #168]	; (8016c38 <tcp_input+0x54c>)
 8016b90:	2200      	movs	r2, #0
 8016b92:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	891a      	ldrh	r2, [r3, #8]
 8016b98:	4b27      	ldr	r3, [pc, #156]	; (8016c38 <tcp_input+0x54c>)
 8016b9a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016b9c:	4a26      	ldr	r2, [pc, #152]	; (8016c38 <tcp_input+0x54c>)
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016ba2:	4b1b      	ldr	r3, [pc, #108]	; (8016c10 <tcp_input+0x524>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	4a24      	ldr	r2, [pc, #144]	; (8016c38 <tcp_input+0x54c>)
 8016ba8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016baa:	4b24      	ldr	r3, [pc, #144]	; (8016c3c <tcp_input+0x550>)
 8016bac:	2200      	movs	r2, #0
 8016bae:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016bb0:	4b23      	ldr	r3, [pc, #140]	; (8016c40 <tcp_input+0x554>)
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016bb6:	4b23      	ldr	r3, [pc, #140]	; (8016c44 <tcp_input+0x558>)
 8016bb8:	2200      	movs	r2, #0
 8016bba:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016bbc:	4b22      	ldr	r3, [pc, #136]	; (8016c48 <tcp_input+0x55c>)
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	f003 0308 	and.w	r3, r3, #8
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d006      	beq.n	8016bd6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	7b5b      	ldrb	r3, [r3, #13]
 8016bcc:	f043 0301 	orr.w	r3, r3, #1
 8016bd0:	b2da      	uxtb	r2, r3
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016bd6:	69fb      	ldr	r3, [r7, #28]
 8016bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d038      	beq.n	8016c50 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016bde:	69f8      	ldr	r0, [r7, #28]
 8016be0:	f7ff f870 	bl	8015cc4 <tcp_process_refused_data>
 8016be4:	4603      	mov	r3, r0
 8016be6:	f113 0f0d 	cmn.w	r3, #13
 8016bea:	d007      	beq.n	8016bfc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016bec:	69fb      	ldr	r3, [r7, #28]
 8016bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d02d      	beq.n	8016c50 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016bf4:	4b15      	ldr	r3, [pc, #84]	; (8016c4c <tcp_input+0x560>)
 8016bf6:	881b      	ldrh	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d029      	beq.n	8016c50 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	f040 8104 	bne.w	8016e0e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016c06:	69f8      	ldr	r0, [r7, #28]
 8016c08:	f003 fe16 	bl	801a838 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016c0c:	e0ff      	b.n	8016e0e <tcp_input+0x722>
 8016c0e:	bf00      	nop
 8016c10:	20006e24 	.word	0x20006e24
 8016c14:	2000aa5c 	.word	0x2000aa5c
 8016c18:	080254fc 	.word	0x080254fc
 8016c1c:	08025628 	.word	0x08025628
 8016c20:	08025548 	.word	0x08025548
 8016c24:	2000e170 	.word	0x2000e170
 8016c28:	08025654 	.word	0x08025654
 8016c2c:	2000e180 	.word	0x2000e180
 8016c30:	08025680 	.word	0x08025680
 8016c34:	2000e178 	.word	0x2000e178
 8016c38:	20006e14 	.word	0x20006e14
 8016c3c:	20006e44 	.word	0x20006e44
 8016c40:	20006e41 	.word	0x20006e41
 8016c44:	20006e3c 	.word	0x20006e3c
 8016c48:	20006e40 	.word	0x20006e40
 8016c4c:	20006e3e 	.word	0x20006e3e
      }
    }
    tcp_input_pcb = pcb;
 8016c50:	4a9c      	ldr	r2, [pc, #624]	; (8016ec4 <tcp_input+0x7d8>)
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016c56:	69f8      	ldr	r0, [r7, #28]
 8016c58:	f000 fb0a 	bl	8017270 <tcp_process>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016c60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c64:	f113 0f0d 	cmn.w	r3, #13
 8016c68:	f000 80d3 	beq.w	8016e12 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8016c6c:	4b96      	ldr	r3, [pc, #600]	; (8016ec8 <tcp_input+0x7dc>)
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	f003 0308 	and.w	r3, r3, #8
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d015      	beq.n	8016ca4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d008      	beq.n	8016c94 <tcp_input+0x5a8>
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c88:	69fa      	ldr	r2, [r7, #28]
 8016c8a:	6912      	ldr	r2, [r2, #16]
 8016c8c:	f06f 010d 	mvn.w	r1, #13
 8016c90:	4610      	mov	r0, r2
 8016c92:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c94:	69f9      	ldr	r1, [r7, #28]
 8016c96:	488d      	ldr	r0, [pc, #564]	; (8016ecc <tcp_input+0x7e0>)
 8016c98:	f7ff fbb0 	bl	80163fc <tcp_pcb_remove>
        tcp_free(pcb);
 8016c9c:	69f8      	ldr	r0, [r7, #28]
 8016c9e:	f7fd ff95 	bl	8014bcc <tcp_free>
 8016ca2:	e0c1      	b.n	8016e28 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016ca8:	4b89      	ldr	r3, [pc, #548]	; (8016ed0 <tcp_input+0x7e4>)
 8016caa:	881b      	ldrh	r3, [r3, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d01d      	beq.n	8016cec <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016cb0:	4b87      	ldr	r3, [pc, #540]	; (8016ed0 <tcp_input+0x7e4>)
 8016cb2:	881b      	ldrh	r3, [r3, #0]
 8016cb4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016cb6:	69fb      	ldr	r3, [r7, #28]
 8016cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d00a      	beq.n	8016cd6 <tcp_input+0x5ea>
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016cc6:	69fa      	ldr	r2, [r7, #28]
 8016cc8:	6910      	ldr	r0, [r2, #16]
 8016cca:	89fa      	ldrh	r2, [r7, #14]
 8016ccc:	69f9      	ldr	r1, [r7, #28]
 8016cce:	4798      	blx	r3
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	74fb      	strb	r3, [r7, #19]
 8016cd4:	e001      	b.n	8016cda <tcp_input+0x5ee>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016cda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cde:	f113 0f0d 	cmn.w	r3, #13
 8016ce2:	f000 8098 	beq.w	8016e16 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016ce6:	4b7a      	ldr	r3, [pc, #488]	; (8016ed0 <tcp_input+0x7e4>)
 8016ce8:	2200      	movs	r2, #0
 8016cea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016cec:	69f8      	ldr	r0, [r7, #28]
 8016cee:	f000 f907 	bl	8016f00 <tcp_input_delayed_close>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	f040 8090 	bne.w	8016e1a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016cfa:	4b76      	ldr	r3, [pc, #472]	; (8016ed4 <tcp_input+0x7e8>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d041      	beq.n	8016d86 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016d02:	69fb      	ldr	r3, [r7, #28]
 8016d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d006      	beq.n	8016d18 <tcp_input+0x62c>
 8016d0a:	4b73      	ldr	r3, [pc, #460]	; (8016ed8 <tcp_input+0x7ec>)
 8016d0c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016d10:	4972      	ldr	r1, [pc, #456]	; (8016edc <tcp_input+0x7f0>)
 8016d12:	4873      	ldr	r0, [pc, #460]	; (8016ee0 <tcp_input+0x7f4>)
 8016d14:	f008 fa8a 	bl	801f22c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016d18:	69fb      	ldr	r3, [r7, #28]
 8016d1a:	8b5b      	ldrh	r3, [r3, #26]
 8016d1c:	f003 0310 	and.w	r3, r3, #16
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d008      	beq.n	8016d36 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016d24:	4b6b      	ldr	r3, [pc, #428]	; (8016ed4 <tcp_input+0x7e8>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7fd fc93 	bl	8014654 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016d2e:	69f8      	ldr	r0, [r7, #28]
 8016d30:	f7fe fa90 	bl	8015254 <tcp_abort>
            goto aborted;
 8016d34:	e078      	b.n	8016e28 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016d36:	69fb      	ldr	r3, [r7, #28]
 8016d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d00c      	beq.n	8016d5a <tcp_input+0x66e>
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016d46:	69fb      	ldr	r3, [r7, #28]
 8016d48:	6918      	ldr	r0, [r3, #16]
 8016d4a:	4b62      	ldr	r3, [pc, #392]	; (8016ed4 <tcp_input+0x7e8>)
 8016d4c:	681a      	ldr	r2, [r3, #0]
 8016d4e:	2300      	movs	r3, #0
 8016d50:	69f9      	ldr	r1, [r7, #28]
 8016d52:	47a0      	blx	r4
 8016d54:	4603      	mov	r3, r0
 8016d56:	74fb      	strb	r3, [r7, #19]
 8016d58:	e008      	b.n	8016d6c <tcp_input+0x680>
 8016d5a:	4b5e      	ldr	r3, [pc, #376]	; (8016ed4 <tcp_input+0x7e8>)
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	2300      	movs	r3, #0
 8016d60:	69f9      	ldr	r1, [r7, #28]
 8016d62:	2000      	movs	r0, #0
 8016d64:	f7ff f884 	bl	8015e70 <tcp_recv_null>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016d6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d70:	f113 0f0d 	cmn.w	r3, #13
 8016d74:	d053      	beq.n	8016e1e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016d76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d003      	beq.n	8016d86 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016d7e:	4b55      	ldr	r3, [pc, #340]	; (8016ed4 <tcp_input+0x7e8>)
 8016d80:	681a      	ldr	r2, [r3, #0]
 8016d82:	69fb      	ldr	r3, [r7, #28]
 8016d84:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016d86:	4b50      	ldr	r3, [pc, #320]	; (8016ec8 <tcp_input+0x7dc>)
 8016d88:	781b      	ldrb	r3, [r3, #0]
 8016d8a:	f003 0320 	and.w	r3, r3, #32
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d030      	beq.n	8016df4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d009      	beq.n	8016dae <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d9e:	7b5a      	ldrb	r2, [r3, #13]
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016da4:	f042 0220 	orr.w	r2, r2, #32
 8016da8:	b2d2      	uxtb	r2, r2
 8016daa:	735a      	strb	r2, [r3, #13]
 8016dac:	e022      	b.n	8016df4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016db2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016db6:	d005      	beq.n	8016dc4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	b29a      	uxth	r2, r3
 8016dc0:	69fb      	ldr	r3, [r7, #28]
 8016dc2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016dc4:	69fb      	ldr	r3, [r7, #28]
 8016dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d00b      	beq.n	8016de6 <tcp_input+0x6fa>
 8016dce:	69fb      	ldr	r3, [r7, #28]
 8016dd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016dd4:	69fb      	ldr	r3, [r7, #28]
 8016dd6:	6918      	ldr	r0, [r3, #16]
 8016dd8:	2300      	movs	r3, #0
 8016dda:	2200      	movs	r2, #0
 8016ddc:	69f9      	ldr	r1, [r7, #28]
 8016dde:	47a0      	blx	r4
 8016de0:	4603      	mov	r3, r0
 8016de2:	74fb      	strb	r3, [r7, #19]
 8016de4:	e001      	b.n	8016dea <tcp_input+0x6fe>
 8016de6:	2300      	movs	r3, #0
 8016de8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016dea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dee:	f113 0f0d 	cmn.w	r3, #13
 8016df2:	d016      	beq.n	8016e22 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016df4:	4b33      	ldr	r3, [pc, #204]	; (8016ec4 <tcp_input+0x7d8>)
 8016df6:	2200      	movs	r2, #0
 8016df8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016dfa:	69f8      	ldr	r0, [r7, #28]
 8016dfc:	f000 f880 	bl	8016f00 <tcp_input_delayed_close>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d10f      	bne.n	8016e26 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016e06:	69f8      	ldr	r0, [r7, #28]
 8016e08:	f002 ff10 	bl	8019c2c <tcp_output>
 8016e0c:	e00c      	b.n	8016e28 <tcp_input+0x73c>
        goto aborted;
 8016e0e:	bf00      	nop
 8016e10:	e00a      	b.n	8016e28 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016e12:	bf00      	nop
 8016e14:	e008      	b.n	8016e28 <tcp_input+0x73c>
              goto aborted;
 8016e16:	bf00      	nop
 8016e18:	e006      	b.n	8016e28 <tcp_input+0x73c>
          goto aborted;
 8016e1a:	bf00      	nop
 8016e1c:	e004      	b.n	8016e28 <tcp_input+0x73c>
            goto aborted;
 8016e1e:	bf00      	nop
 8016e20:	e002      	b.n	8016e28 <tcp_input+0x73c>
              goto aborted;
 8016e22:	bf00      	nop
 8016e24:	e000      	b.n	8016e28 <tcp_input+0x73c>
          goto aborted;
 8016e26:	bf00      	nop
    tcp_input_pcb = NULL;
 8016e28:	4b26      	ldr	r3, [pc, #152]	; (8016ec4 <tcp_input+0x7d8>)
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016e2e:	4b29      	ldr	r3, [pc, #164]	; (8016ed4 <tcp_input+0x7e8>)
 8016e30:	2200      	movs	r2, #0
 8016e32:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016e34:	4b2b      	ldr	r3, [pc, #172]	; (8016ee4 <tcp_input+0x7f8>)
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d03f      	beq.n	8016ebc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8016e3c:	4b29      	ldr	r3, [pc, #164]	; (8016ee4 <tcp_input+0x7f8>)
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	4618      	mov	r0, r3
 8016e42:	f7fd fc07 	bl	8014654 <pbuf_free>
      inseg.p = NULL;
 8016e46:	4b27      	ldr	r3, [pc, #156]	; (8016ee4 <tcp_input+0x7f8>)
 8016e48:	2200      	movs	r2, #0
 8016e4a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016e4c:	e036      	b.n	8016ebc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016e4e:	4b26      	ldr	r3, [pc, #152]	; (8016ee8 <tcp_input+0x7fc>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	899b      	ldrh	r3, [r3, #12]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7fc f8b4 	bl	8012fc4 <lwip_htons>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	b2db      	uxtb	r3, r3
 8016e60:	f003 0304 	and.w	r3, r3, #4
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d118      	bne.n	8016e9a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e68:	4b20      	ldr	r3, [pc, #128]	; (8016eec <tcp_input+0x800>)
 8016e6a:	6819      	ldr	r1, [r3, #0]
 8016e6c:	4b20      	ldr	r3, [pc, #128]	; (8016ef0 <tcp_input+0x804>)
 8016e6e:	881b      	ldrh	r3, [r3, #0]
 8016e70:	461a      	mov	r2, r3
 8016e72:	4b20      	ldr	r3, [pc, #128]	; (8016ef4 <tcp_input+0x808>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e78:	4b1b      	ldr	r3, [pc, #108]	; (8016ee8 <tcp_input+0x7fc>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e7c:	885b      	ldrh	r3, [r3, #2]
 8016e7e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e80:	4a19      	ldr	r2, [pc, #100]	; (8016ee8 <tcp_input+0x7fc>)
 8016e82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e84:	8812      	ldrh	r2, [r2, #0]
 8016e86:	b292      	uxth	r2, r2
 8016e88:	9202      	str	r2, [sp, #8]
 8016e8a:	9301      	str	r3, [sp, #4]
 8016e8c:	4b1a      	ldr	r3, [pc, #104]	; (8016ef8 <tcp_input+0x80c>)
 8016e8e:	9300      	str	r3, [sp, #0]
 8016e90:	4b1a      	ldr	r3, [pc, #104]	; (8016efc <tcp_input+0x810>)
 8016e92:	4602      	mov	r2, r0
 8016e94:	2000      	movs	r0, #0
 8016e96:	f003 fc7d 	bl	801a794 <tcp_rst>
    pbuf_free(p);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f7fd fbda 	bl	8014654 <pbuf_free>
  return;
 8016ea0:	e00c      	b.n	8016ebc <tcp_input+0x7d0>
    goto dropped;
 8016ea2:	bf00      	nop
 8016ea4:	e006      	b.n	8016eb4 <tcp_input+0x7c8>
    goto dropped;
 8016ea6:	bf00      	nop
 8016ea8:	e004      	b.n	8016eb4 <tcp_input+0x7c8>
    goto dropped;
 8016eaa:	bf00      	nop
 8016eac:	e002      	b.n	8016eb4 <tcp_input+0x7c8>
      goto dropped;
 8016eae:	bf00      	nop
 8016eb0:	e000      	b.n	8016eb4 <tcp_input+0x7c8>
      goto dropped;
 8016eb2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f7fd fbcd 	bl	8014654 <pbuf_free>
 8016eba:	e000      	b.n	8016ebe <tcp_input+0x7d2>
  return;
 8016ebc:	bf00      	nop
}
 8016ebe:	3724      	adds	r7, #36	; 0x24
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd90      	pop	{r4, r7, pc}
 8016ec4:	2000e184 	.word	0x2000e184
 8016ec8:	20006e41 	.word	0x20006e41
 8016ecc:	2000e170 	.word	0x2000e170
 8016ed0:	20006e3c 	.word	0x20006e3c
 8016ed4:	20006e44 	.word	0x20006e44
 8016ed8:	080254fc 	.word	0x080254fc
 8016edc:	080256b0 	.word	0x080256b0
 8016ee0:	08025548 	.word	0x08025548
 8016ee4:	20006e14 	.word	0x20006e14
 8016ee8:	20006e24 	.word	0x20006e24
 8016eec:	20006e38 	.word	0x20006e38
 8016ef0:	20006e3e 	.word	0x20006e3e
 8016ef4:	20006e34 	.word	0x20006e34
 8016ef8:	2000aa6c 	.word	0x2000aa6c
 8016efc:	2000aa70 	.word	0x2000aa70

08016f00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d106      	bne.n	8016f1c <tcp_input_delayed_close+0x1c>
 8016f0e:	4b17      	ldr	r3, [pc, #92]	; (8016f6c <tcp_input_delayed_close+0x6c>)
 8016f10:	f240 225a 	movw	r2, #602	; 0x25a
 8016f14:	4916      	ldr	r1, [pc, #88]	; (8016f70 <tcp_input_delayed_close+0x70>)
 8016f16:	4817      	ldr	r0, [pc, #92]	; (8016f74 <tcp_input_delayed_close+0x74>)
 8016f18:	f008 f988 	bl	801f22c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016f1c:	4b16      	ldr	r3, [pc, #88]	; (8016f78 <tcp_input_delayed_close+0x78>)
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	f003 0310 	and.w	r3, r3, #16
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d01c      	beq.n	8016f62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	8b5b      	ldrh	r3, [r3, #26]
 8016f2c:	f003 0310 	and.w	r3, r3, #16
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d10d      	bne.n	8016f50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d008      	beq.n	8016f50 <tcp_input_delayed_close+0x50>
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	6912      	ldr	r2, [r2, #16]
 8016f48:	f06f 010e 	mvn.w	r1, #14
 8016f4c:	4610      	mov	r0, r2
 8016f4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016f50:	6879      	ldr	r1, [r7, #4]
 8016f52:	480a      	ldr	r0, [pc, #40]	; (8016f7c <tcp_input_delayed_close+0x7c>)
 8016f54:	f7ff fa52 	bl	80163fc <tcp_pcb_remove>
    tcp_free(pcb);
 8016f58:	6878      	ldr	r0, [r7, #4]
 8016f5a:	f7fd fe37 	bl	8014bcc <tcp_free>
    return 1;
 8016f5e:	2301      	movs	r3, #1
 8016f60:	e000      	b.n	8016f64 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016f62:	2300      	movs	r3, #0
}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3708      	adds	r7, #8
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}
 8016f6c:	080254fc 	.word	0x080254fc
 8016f70:	080256cc 	.word	0x080256cc
 8016f74:	08025548 	.word	0x08025548
 8016f78:	20006e41 	.word	0x20006e41
 8016f7c:	2000e170 	.word	0x2000e170

08016f80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016f80:	b590      	push	{r4, r7, lr}
 8016f82:	b08b      	sub	sp, #44	; 0x2c
 8016f84:	af04      	add	r7, sp, #16
 8016f86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016f88:	4b6f      	ldr	r3, [pc, #444]	; (8017148 <tcp_listen_input+0x1c8>)
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	f003 0304 	and.w	r3, r3, #4
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	f040 80d2 	bne.w	801713a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d106      	bne.n	8016faa <tcp_listen_input+0x2a>
 8016f9c:	4b6b      	ldr	r3, [pc, #428]	; (801714c <tcp_listen_input+0x1cc>)
 8016f9e:	f240 2281 	movw	r2, #641	; 0x281
 8016fa2:	496b      	ldr	r1, [pc, #428]	; (8017150 <tcp_listen_input+0x1d0>)
 8016fa4:	486b      	ldr	r0, [pc, #428]	; (8017154 <tcp_listen_input+0x1d4>)
 8016fa6:	f008 f941 	bl	801f22c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016faa:	4b67      	ldr	r3, [pc, #412]	; (8017148 <tcp_listen_input+0x1c8>)
 8016fac:	781b      	ldrb	r3, [r3, #0]
 8016fae:	f003 0310 	and.w	r3, r3, #16
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d019      	beq.n	8016fea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fb6:	4b68      	ldr	r3, [pc, #416]	; (8017158 <tcp_listen_input+0x1d8>)
 8016fb8:	6819      	ldr	r1, [r3, #0]
 8016fba:	4b68      	ldr	r3, [pc, #416]	; (801715c <tcp_listen_input+0x1dc>)
 8016fbc:	881b      	ldrh	r3, [r3, #0]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	4b67      	ldr	r3, [pc, #412]	; (8017160 <tcp_listen_input+0x1e0>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fc6:	4b67      	ldr	r3, [pc, #412]	; (8017164 <tcp_listen_input+0x1e4>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fca:	885b      	ldrh	r3, [r3, #2]
 8016fcc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fce:	4a65      	ldr	r2, [pc, #404]	; (8017164 <tcp_listen_input+0x1e4>)
 8016fd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fd2:	8812      	ldrh	r2, [r2, #0]
 8016fd4:	b292      	uxth	r2, r2
 8016fd6:	9202      	str	r2, [sp, #8]
 8016fd8:	9301      	str	r3, [sp, #4]
 8016fda:	4b63      	ldr	r3, [pc, #396]	; (8017168 <tcp_listen_input+0x1e8>)
 8016fdc:	9300      	str	r3, [sp, #0]
 8016fde:	4b63      	ldr	r3, [pc, #396]	; (801716c <tcp_listen_input+0x1ec>)
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	6878      	ldr	r0, [r7, #4]
 8016fe4:	f003 fbd6 	bl	801a794 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016fe8:	e0a9      	b.n	801713e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016fea:	4b57      	ldr	r3, [pc, #348]	; (8017148 <tcp_listen_input+0x1c8>)
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	f003 0302 	and.w	r3, r3, #2
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f000 80a3 	beq.w	801713e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	7d5b      	ldrb	r3, [r3, #21]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7ff f85b 	bl	80160b8 <tcp_alloc>
 8017002:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d111      	bne.n	801702e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	699b      	ldr	r3, [r3, #24]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d00a      	beq.n	8017028 <tcp_listen_input+0xa8>
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	699b      	ldr	r3, [r3, #24]
 8017016:	687a      	ldr	r2, [r7, #4]
 8017018:	6910      	ldr	r0, [r2, #16]
 801701a:	f04f 32ff 	mov.w	r2, #4294967295
 801701e:	2100      	movs	r1, #0
 8017020:	4798      	blx	r3
 8017022:	4603      	mov	r3, r0
 8017024:	73bb      	strb	r3, [r7, #14]
      return;
 8017026:	e08b      	b.n	8017140 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017028:	23f0      	movs	r3, #240	; 0xf0
 801702a:	73bb      	strb	r3, [r7, #14]
      return;
 801702c:	e088      	b.n	8017140 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801702e:	4b50      	ldr	r3, [pc, #320]	; (8017170 <tcp_listen_input+0x1f0>)
 8017030:	695a      	ldr	r2, [r3, #20]
 8017032:	697b      	ldr	r3, [r7, #20]
 8017034:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017036:	4b4e      	ldr	r3, [pc, #312]	; (8017170 <tcp_listen_input+0x1f0>)
 8017038:	691a      	ldr	r2, [r3, #16]
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	8ada      	ldrh	r2, [r3, #22]
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017046:	4b47      	ldr	r3, [pc, #284]	; (8017164 <tcp_listen_input+0x1e4>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	881b      	ldrh	r3, [r3, #0]
 801704c:	b29a      	uxth	r2, r3
 801704e:	697b      	ldr	r3, [r7, #20]
 8017050:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	2203      	movs	r2, #3
 8017056:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017058:	4b41      	ldr	r3, [pc, #260]	; (8017160 <tcp_listen_input+0x1e0>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	1c5a      	adds	r2, r3, #1
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801706a:	6978      	ldr	r0, [r7, #20]
 801706c:	f7ff fa5a 	bl	8016524 <tcp_next_iss>
 8017070:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017072:	697b      	ldr	r3, [r7, #20]
 8017074:	693a      	ldr	r2, [r7, #16]
 8017076:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	693a      	ldr	r2, [r7, #16]
 801707c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	693a      	ldr	r2, [r7, #16]
 8017082:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	693a      	ldr	r2, [r7, #16]
 8017088:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801708a:	4b35      	ldr	r3, [pc, #212]	; (8017160 <tcp_listen_input+0x1e0>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	1e5a      	subs	r2, r3, #1
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	691a      	ldr	r2, [r3, #16]
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	687a      	ldr	r2, [r7, #4]
 80170a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	7a5b      	ldrb	r3, [r3, #9]
 80170a6:	f003 030c 	and.w	r3, r3, #12
 80170aa:	b2da      	uxtb	r2, r3
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	7a1a      	ldrb	r2, [r3, #8]
 80170b4:	697b      	ldr	r3, [r7, #20]
 80170b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80170b8:	4b2e      	ldr	r3, [pc, #184]	; (8017174 <tcp_listen_input+0x1f4>)
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	697b      	ldr	r3, [r7, #20]
 80170be:	60da      	str	r2, [r3, #12]
 80170c0:	4a2c      	ldr	r2, [pc, #176]	; (8017174 <tcp_listen_input+0x1f4>)
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	6013      	str	r3, [r2, #0]
 80170c6:	f003 fd27 	bl	801ab18 <tcp_timer_needed>
 80170ca:	4b2b      	ldr	r3, [pc, #172]	; (8017178 <tcp_listen_input+0x1f8>)
 80170cc:	2201      	movs	r2, #1
 80170ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80170d0:	6978      	ldr	r0, [r7, #20]
 80170d2:	f001 fd8d 	bl	8018bf0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80170d6:	4b23      	ldr	r3, [pc, #140]	; (8017164 <tcp_listen_input+0x1e4>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	89db      	ldrh	r3, [r3, #14]
 80170dc:	b29a      	uxth	r2, r3
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	3304      	adds	r3, #4
 80170f8:	4618      	mov	r0, r3
 80170fa:	f005 fc4b 	bl	801c994 <ip4_route>
 80170fe:	4601      	mov	r1, r0
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	3304      	adds	r3, #4
 8017104:	461a      	mov	r2, r3
 8017106:	4620      	mov	r0, r4
 8017108:	f7ff fa32 	bl	8016570 <tcp_eff_send_mss_netif>
 801710c:	4603      	mov	r3, r0
 801710e:	461a      	mov	r2, r3
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017114:	2112      	movs	r1, #18
 8017116:	6978      	ldr	r0, [r7, #20]
 8017118:	f002 fc9a 	bl	8019a50 <tcp_enqueue_flags>
 801711c:	4603      	mov	r3, r0
 801711e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d004      	beq.n	8017132 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017128:	2100      	movs	r1, #0
 801712a:	6978      	ldr	r0, [r7, #20]
 801712c:	f7fd ffd4 	bl	80150d8 <tcp_abandon>
      return;
 8017130:	e006      	b.n	8017140 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017132:	6978      	ldr	r0, [r7, #20]
 8017134:	f002 fd7a 	bl	8019c2c <tcp_output>
  return;
 8017138:	e001      	b.n	801713e <tcp_listen_input+0x1be>
    return;
 801713a:	bf00      	nop
 801713c:	e000      	b.n	8017140 <tcp_listen_input+0x1c0>
  return;
 801713e:	bf00      	nop
}
 8017140:	371c      	adds	r7, #28
 8017142:	46bd      	mov	sp, r7
 8017144:	bd90      	pop	{r4, r7, pc}
 8017146:	bf00      	nop
 8017148:	20006e40 	.word	0x20006e40
 801714c:	080254fc 	.word	0x080254fc
 8017150:	080256f4 	.word	0x080256f4
 8017154:	08025548 	.word	0x08025548
 8017158:	20006e38 	.word	0x20006e38
 801715c:	20006e3e 	.word	0x20006e3e
 8017160:	20006e34 	.word	0x20006e34
 8017164:	20006e24 	.word	0x20006e24
 8017168:	2000aa6c 	.word	0x2000aa6c
 801716c:	2000aa70 	.word	0x2000aa70
 8017170:	2000aa5c 	.word	0x2000aa5c
 8017174:	2000e170 	.word	0x2000e170
 8017178:	2000e16c 	.word	0x2000e16c

0801717c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b086      	sub	sp, #24
 8017180:	af04      	add	r7, sp, #16
 8017182:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017184:	4b2f      	ldr	r3, [pc, #188]	; (8017244 <tcp_timewait_input+0xc8>)
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	f003 0304 	and.w	r3, r3, #4
 801718c:	2b00      	cmp	r3, #0
 801718e:	d153      	bne.n	8017238 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d106      	bne.n	80171a4 <tcp_timewait_input+0x28>
 8017196:	4b2c      	ldr	r3, [pc, #176]	; (8017248 <tcp_timewait_input+0xcc>)
 8017198:	f240 22ee 	movw	r2, #750	; 0x2ee
 801719c:	492b      	ldr	r1, [pc, #172]	; (801724c <tcp_timewait_input+0xd0>)
 801719e:	482c      	ldr	r0, [pc, #176]	; (8017250 <tcp_timewait_input+0xd4>)
 80171a0:	f008 f844 	bl	801f22c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80171a4:	4b27      	ldr	r3, [pc, #156]	; (8017244 <tcp_timewait_input+0xc8>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	f003 0302 	and.w	r3, r3, #2
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d02a      	beq.n	8017206 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80171b0:	4b28      	ldr	r3, [pc, #160]	; (8017254 <tcp_timewait_input+0xd8>)
 80171b2:	681a      	ldr	r2, [r3, #0]
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171b8:	1ad3      	subs	r3, r2, r3
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	db2d      	blt.n	801721a <tcp_timewait_input+0x9e>
 80171be:	4b25      	ldr	r3, [pc, #148]	; (8017254 <tcp_timewait_input+0xd8>)
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171c6:	6879      	ldr	r1, [r7, #4]
 80171c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80171ca:	440b      	add	r3, r1
 80171cc:	1ad3      	subs	r3, r2, r3
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	dc23      	bgt.n	801721a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171d2:	4b21      	ldr	r3, [pc, #132]	; (8017258 <tcp_timewait_input+0xdc>)
 80171d4:	6819      	ldr	r1, [r3, #0]
 80171d6:	4b21      	ldr	r3, [pc, #132]	; (801725c <tcp_timewait_input+0xe0>)
 80171d8:	881b      	ldrh	r3, [r3, #0]
 80171da:	461a      	mov	r2, r3
 80171dc:	4b1d      	ldr	r3, [pc, #116]	; (8017254 <tcp_timewait_input+0xd8>)
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171e2:	4b1f      	ldr	r3, [pc, #124]	; (8017260 <tcp_timewait_input+0xe4>)
 80171e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171e6:	885b      	ldrh	r3, [r3, #2]
 80171e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171ea:	4a1d      	ldr	r2, [pc, #116]	; (8017260 <tcp_timewait_input+0xe4>)
 80171ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171ee:	8812      	ldrh	r2, [r2, #0]
 80171f0:	b292      	uxth	r2, r2
 80171f2:	9202      	str	r2, [sp, #8]
 80171f4:	9301      	str	r3, [sp, #4]
 80171f6:	4b1b      	ldr	r3, [pc, #108]	; (8017264 <tcp_timewait_input+0xe8>)
 80171f8:	9300      	str	r3, [sp, #0]
 80171fa:	4b1b      	ldr	r3, [pc, #108]	; (8017268 <tcp_timewait_input+0xec>)
 80171fc:	4602      	mov	r2, r0
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f003 fac8 	bl	801a794 <tcp_rst>
      return;
 8017204:	e01b      	b.n	801723e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017206:	4b0f      	ldr	r3, [pc, #60]	; (8017244 <tcp_timewait_input+0xc8>)
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	f003 0301 	and.w	r3, r3, #1
 801720e:	2b00      	cmp	r3, #0
 8017210:	d003      	beq.n	801721a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017212:	4b16      	ldr	r3, [pc, #88]	; (801726c <tcp_timewait_input+0xf0>)
 8017214:	681a      	ldr	r2, [r3, #0]
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801721a:	4b10      	ldr	r3, [pc, #64]	; (801725c <tcp_timewait_input+0xe0>)
 801721c:	881b      	ldrh	r3, [r3, #0]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d00c      	beq.n	801723c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8b5b      	ldrh	r3, [r3, #26]
 8017226:	f043 0302 	orr.w	r3, r3, #2
 801722a:	b29a      	uxth	r2, r3
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f002 fcfb 	bl	8019c2c <tcp_output>
  }
  return;
 8017236:	e001      	b.n	801723c <tcp_timewait_input+0xc0>
    return;
 8017238:	bf00      	nop
 801723a:	e000      	b.n	801723e <tcp_timewait_input+0xc2>
  return;
 801723c:	bf00      	nop
}
 801723e:	3708      	adds	r7, #8
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	20006e40 	.word	0x20006e40
 8017248:	080254fc 	.word	0x080254fc
 801724c:	08025714 	.word	0x08025714
 8017250:	08025548 	.word	0x08025548
 8017254:	20006e34 	.word	0x20006e34
 8017258:	20006e38 	.word	0x20006e38
 801725c:	20006e3e 	.word	0x20006e3e
 8017260:	20006e24 	.word	0x20006e24
 8017264:	2000aa6c 	.word	0x2000aa6c
 8017268:	2000aa70 	.word	0x2000aa70
 801726c:	2000e174 	.word	0x2000e174

08017270 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017270:	b590      	push	{r4, r7, lr}
 8017272:	b08d      	sub	sp, #52	; 0x34
 8017274:	af04      	add	r7, sp, #16
 8017276:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017278:	2300      	movs	r3, #0
 801727a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801727c:	2300      	movs	r3, #0
 801727e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d106      	bne.n	8017294 <tcp_process+0x24>
 8017286:	4ba5      	ldr	r3, [pc, #660]	; (801751c <tcp_process+0x2ac>)
 8017288:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801728c:	49a4      	ldr	r1, [pc, #656]	; (8017520 <tcp_process+0x2b0>)
 801728e:	48a5      	ldr	r0, [pc, #660]	; (8017524 <tcp_process+0x2b4>)
 8017290:	f007 ffcc 	bl	801f22c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017294:	4ba4      	ldr	r3, [pc, #656]	; (8017528 <tcp_process+0x2b8>)
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	f003 0304 	and.w	r3, r3, #4
 801729c:	2b00      	cmp	r3, #0
 801729e:	d04e      	beq.n	801733e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	7d1b      	ldrb	r3, [r3, #20]
 80172a4:	2b02      	cmp	r3, #2
 80172a6:	d108      	bne.n	80172ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80172ac:	4b9f      	ldr	r3, [pc, #636]	; (801752c <tcp_process+0x2bc>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d123      	bne.n	80172fc <tcp_process+0x8c>
        acceptable = 1;
 80172b4:	2301      	movs	r3, #1
 80172b6:	76fb      	strb	r3, [r7, #27]
 80172b8:	e020      	b.n	80172fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172be:	4b9c      	ldr	r3, [pc, #624]	; (8017530 <tcp_process+0x2c0>)
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	429a      	cmp	r2, r3
 80172c4:	d102      	bne.n	80172cc <tcp_process+0x5c>
        acceptable = 1;
 80172c6:	2301      	movs	r3, #1
 80172c8:	76fb      	strb	r3, [r7, #27]
 80172ca:	e017      	b.n	80172fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80172cc:	4b98      	ldr	r3, [pc, #608]	; (8017530 <tcp_process+0x2c0>)
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d4:	1ad3      	subs	r3, r2, r3
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	db10      	blt.n	80172fc <tcp_process+0x8c>
 80172da:	4b95      	ldr	r3, [pc, #596]	; (8017530 <tcp_process+0x2c0>)
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172e2:	6879      	ldr	r1, [r7, #4]
 80172e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80172e6:	440b      	add	r3, r1
 80172e8:	1ad3      	subs	r3, r2, r3
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	dc06      	bgt.n	80172fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	8b5b      	ldrh	r3, [r3, #26]
 80172f2:	f043 0302 	orr.w	r3, r3, #2
 80172f6:	b29a      	uxth	r2, r3
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80172fc:	7efb      	ldrb	r3, [r7, #27]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d01b      	beq.n	801733a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	7d1b      	ldrb	r3, [r3, #20]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d106      	bne.n	8017318 <tcp_process+0xa8>
 801730a:	4b84      	ldr	r3, [pc, #528]	; (801751c <tcp_process+0x2ac>)
 801730c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017310:	4988      	ldr	r1, [pc, #544]	; (8017534 <tcp_process+0x2c4>)
 8017312:	4884      	ldr	r0, [pc, #528]	; (8017524 <tcp_process+0x2b4>)
 8017314:	f007 ff8a 	bl	801f22c <iprintf>
      recv_flags |= TF_RESET;
 8017318:	4b87      	ldr	r3, [pc, #540]	; (8017538 <tcp_process+0x2c8>)
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	f043 0308 	orr.w	r3, r3, #8
 8017320:	b2da      	uxtb	r2, r3
 8017322:	4b85      	ldr	r3, [pc, #532]	; (8017538 <tcp_process+0x2c8>)
 8017324:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	8b5b      	ldrh	r3, [r3, #26]
 801732a:	f023 0301 	bic.w	r3, r3, #1
 801732e:	b29a      	uxth	r2, r3
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017334:	f06f 030d 	mvn.w	r3, #13
 8017338:	e37a      	b.n	8017a30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801733a:	2300      	movs	r3, #0
 801733c:	e378      	b.n	8017a30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801733e:	4b7a      	ldr	r3, [pc, #488]	; (8017528 <tcp_process+0x2b8>)
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	f003 0302 	and.w	r3, r3, #2
 8017346:	2b00      	cmp	r3, #0
 8017348:	d010      	beq.n	801736c <tcp_process+0xfc>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	7d1b      	ldrb	r3, [r3, #20]
 801734e:	2b02      	cmp	r3, #2
 8017350:	d00c      	beq.n	801736c <tcp_process+0xfc>
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	7d1b      	ldrb	r3, [r3, #20]
 8017356:	2b03      	cmp	r3, #3
 8017358:	d008      	beq.n	801736c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	8b5b      	ldrh	r3, [r3, #26]
 801735e:	f043 0302 	orr.w	r3, r3, #2
 8017362:	b29a      	uxth	r2, r3
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017368:	2300      	movs	r3, #0
 801736a:	e361      	b.n	8017a30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	8b5b      	ldrh	r3, [r3, #26]
 8017370:	f003 0310 	and.w	r3, r3, #16
 8017374:	2b00      	cmp	r3, #0
 8017376:	d103      	bne.n	8017380 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017378:	4b70      	ldr	r3, [pc, #448]	; (801753c <tcp_process+0x2cc>)
 801737a:	681a      	ldr	r2, [r3, #0]
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2200      	movs	r2, #0
 8017384:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2200      	movs	r2, #0
 801738c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017390:	6878      	ldr	r0, [r7, #4]
 8017392:	f001 fc2d 	bl	8018bf0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	7d1b      	ldrb	r3, [r3, #20]
 801739a:	3b02      	subs	r3, #2
 801739c:	2b07      	cmp	r3, #7
 801739e:	f200 8337 	bhi.w	8017a10 <tcp_process+0x7a0>
 80173a2:	a201      	add	r2, pc, #4	; (adr r2, 80173a8 <tcp_process+0x138>)
 80173a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173a8:	080173c9 	.word	0x080173c9
 80173ac:	080175f9 	.word	0x080175f9
 80173b0:	08017771 	.word	0x08017771
 80173b4:	0801779b 	.word	0x0801779b
 80173b8:	080178bf 	.word	0x080178bf
 80173bc:	08017771 	.word	0x08017771
 80173c0:	0801794b 	.word	0x0801794b
 80173c4:	080179db 	.word	0x080179db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80173c8:	4b57      	ldr	r3, [pc, #348]	; (8017528 <tcp_process+0x2b8>)
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	f003 0310 	and.w	r3, r3, #16
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	f000 80e4 	beq.w	801759e <tcp_process+0x32e>
 80173d6:	4b54      	ldr	r3, [pc, #336]	; (8017528 <tcp_process+0x2b8>)
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	f003 0302 	and.w	r3, r3, #2
 80173de:	2b00      	cmp	r3, #0
 80173e0:	f000 80dd 	beq.w	801759e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173e8:	1c5a      	adds	r2, r3, #1
 80173ea:	4b50      	ldr	r3, [pc, #320]	; (801752c <tcp_process+0x2bc>)
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	429a      	cmp	r2, r3
 80173f0:	f040 80d5 	bne.w	801759e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80173f4:	4b4e      	ldr	r3, [pc, #312]	; (8017530 <tcp_process+0x2c0>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	1c5a      	adds	r2, r3, #1
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017406:	4b49      	ldr	r3, [pc, #292]	; (801752c <tcp_process+0x2bc>)
 8017408:	681a      	ldr	r2, [r3, #0]
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801740e:	4b4c      	ldr	r3, [pc, #304]	; (8017540 <tcp_process+0x2d0>)
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	89db      	ldrh	r3, [r3, #14]
 8017414:	b29a      	uxth	r2, r3
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017428:	4b41      	ldr	r3, [pc, #260]	; (8017530 <tcp_process+0x2c0>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	1e5a      	subs	r2, r3, #1
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2204      	movs	r2, #4
 8017436:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	3304      	adds	r3, #4
 8017440:	4618      	mov	r0, r3
 8017442:	f005 faa7 	bl	801c994 <ip4_route>
 8017446:	4601      	mov	r1, r0
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	3304      	adds	r3, #4
 801744c:	461a      	mov	r2, r3
 801744e:	4620      	mov	r0, r4
 8017450:	f7ff f88e 	bl	8016570 <tcp_eff_send_mss_netif>
 8017454:	4603      	mov	r3, r0
 8017456:	461a      	mov	r2, r3
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017460:	009a      	lsls	r2, r3, #2
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017466:	005b      	lsls	r3, r3, #1
 8017468:	f241 111c 	movw	r1, #4380	; 0x111c
 801746c:	428b      	cmp	r3, r1
 801746e:	bf38      	it	cc
 8017470:	460b      	movcc	r3, r1
 8017472:	429a      	cmp	r2, r3
 8017474:	d204      	bcs.n	8017480 <tcp_process+0x210>
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801747a:	009b      	lsls	r3, r3, #2
 801747c:	b29b      	uxth	r3, r3
 801747e:	e00d      	b.n	801749c <tcp_process+0x22c>
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017484:	005b      	lsls	r3, r3, #1
 8017486:	f241 121c 	movw	r2, #4380	; 0x111c
 801748a:	4293      	cmp	r3, r2
 801748c:	d904      	bls.n	8017498 <tcp_process+0x228>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017492:	005b      	lsls	r3, r3, #1
 8017494:	b29b      	uxth	r3, r3
 8017496:	e001      	b.n	801749c <tcp_process+0x22c>
 8017498:	f241 131c 	movw	r3, #4380	; 0x111c
 801749c:	687a      	ldr	r2, [r7, #4]
 801749e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d106      	bne.n	80174ba <tcp_process+0x24a>
 80174ac:	4b1b      	ldr	r3, [pc, #108]	; (801751c <tcp_process+0x2ac>)
 80174ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80174b2:	4924      	ldr	r1, [pc, #144]	; (8017544 <tcp_process+0x2d4>)
 80174b4:	481b      	ldr	r0, [pc, #108]	; (8017524 <tcp_process+0x2b4>)
 80174b6:	f007 feb9 	bl	801f22c <iprintf>
        --pcb->snd_queuelen;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174c0:	3b01      	subs	r3, #1
 80174c2:	b29a      	uxth	r2, r3
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80174d0:	69fb      	ldr	r3, [r7, #28]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d111      	bne.n	80174fa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d106      	bne.n	80174f0 <tcp_process+0x280>
 80174e2:	4b0e      	ldr	r3, [pc, #56]	; (801751c <tcp_process+0x2ac>)
 80174e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80174e8:	4917      	ldr	r1, [pc, #92]	; (8017548 <tcp_process+0x2d8>)
 80174ea:	480e      	ldr	r0, [pc, #56]	; (8017524 <tcp_process+0x2b4>)
 80174ec:	f007 fe9e 	bl	801f22c <iprintf>
          pcb->unsent = rseg->next;
 80174f0:	69fb      	ldr	r3, [r7, #28]
 80174f2:	681a      	ldr	r2, [r3, #0]
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80174f8:	e003      	b.n	8017502 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	681a      	ldr	r2, [r3, #0]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017502:	69f8      	ldr	r0, [r7, #28]
 8017504:	f7fe fc6f 	bl	8015de6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801750c:	2b00      	cmp	r3, #0
 801750e:	d11d      	bne.n	801754c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017516:	861a      	strh	r2, [r3, #48]	; 0x30
 8017518:	e01f      	b.n	801755a <tcp_process+0x2ea>
 801751a:	bf00      	nop
 801751c:	080254fc 	.word	0x080254fc
 8017520:	08025734 	.word	0x08025734
 8017524:	08025548 	.word	0x08025548
 8017528:	20006e40 	.word	0x20006e40
 801752c:	20006e38 	.word	0x20006e38
 8017530:	20006e34 	.word	0x20006e34
 8017534:	08025750 	.word	0x08025750
 8017538:	20006e41 	.word	0x20006e41
 801753c:	2000e174 	.word	0x2000e174
 8017540:	20006e24 	.word	0x20006e24
 8017544:	08025770 	.word	0x08025770
 8017548:	08025788 	.word	0x08025788
        } else {
          pcb->rtime = 0;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2200      	movs	r2, #0
 8017550:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2200      	movs	r2, #0
 8017556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017560:	2b00      	cmp	r3, #0
 8017562:	d00a      	beq.n	801757a <tcp_process+0x30a>
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801756a:	687a      	ldr	r2, [r7, #4]
 801756c:	6910      	ldr	r0, [r2, #16]
 801756e:	2200      	movs	r2, #0
 8017570:	6879      	ldr	r1, [r7, #4]
 8017572:	4798      	blx	r3
 8017574:	4603      	mov	r3, r0
 8017576:	76bb      	strb	r3, [r7, #26]
 8017578:	e001      	b.n	801757e <tcp_process+0x30e>
 801757a:	2300      	movs	r3, #0
 801757c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801757e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017582:	f113 0f0d 	cmn.w	r3, #13
 8017586:	d102      	bne.n	801758e <tcp_process+0x31e>
          return ERR_ABRT;
 8017588:	f06f 030c 	mvn.w	r3, #12
 801758c:	e250      	b.n	8017a30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	8b5b      	ldrh	r3, [r3, #26]
 8017592:	f043 0302 	orr.w	r3, r3, #2
 8017596:	b29a      	uxth	r2, r3
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801759c:	e23a      	b.n	8017a14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801759e:	4b9d      	ldr	r3, [pc, #628]	; (8017814 <tcp_process+0x5a4>)
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	f003 0310 	and.w	r3, r3, #16
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	f000 8234 	beq.w	8017a14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175ac:	4b9a      	ldr	r3, [pc, #616]	; (8017818 <tcp_process+0x5a8>)
 80175ae:	6819      	ldr	r1, [r3, #0]
 80175b0:	4b9a      	ldr	r3, [pc, #616]	; (801781c <tcp_process+0x5ac>)
 80175b2:	881b      	ldrh	r3, [r3, #0]
 80175b4:	461a      	mov	r2, r3
 80175b6:	4b9a      	ldr	r3, [pc, #616]	; (8017820 <tcp_process+0x5b0>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80175bc:	4b99      	ldr	r3, [pc, #612]	; (8017824 <tcp_process+0x5b4>)
 80175be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175c0:	885b      	ldrh	r3, [r3, #2]
 80175c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80175c4:	4a97      	ldr	r2, [pc, #604]	; (8017824 <tcp_process+0x5b4>)
 80175c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175c8:	8812      	ldrh	r2, [r2, #0]
 80175ca:	b292      	uxth	r2, r2
 80175cc:	9202      	str	r2, [sp, #8]
 80175ce:	9301      	str	r3, [sp, #4]
 80175d0:	4b95      	ldr	r3, [pc, #596]	; (8017828 <tcp_process+0x5b8>)
 80175d2:	9300      	str	r3, [sp, #0]
 80175d4:	4b95      	ldr	r3, [pc, #596]	; (801782c <tcp_process+0x5bc>)
 80175d6:	4602      	mov	r2, r0
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f003 f8db 	bl	801a794 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80175e4:	2b05      	cmp	r3, #5
 80175e6:	f200 8215 	bhi.w	8017a14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2200      	movs	r2, #0
 80175ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f002 fea5 	bl	801a340 <tcp_rexmit_rto>
      break;
 80175f6:	e20d      	b.n	8017a14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80175f8:	4b86      	ldr	r3, [pc, #536]	; (8017814 <tcp_process+0x5a4>)
 80175fa:	781b      	ldrb	r3, [r3, #0]
 80175fc:	f003 0310 	and.w	r3, r3, #16
 8017600:	2b00      	cmp	r3, #0
 8017602:	f000 80a1 	beq.w	8017748 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017606:	4b84      	ldr	r3, [pc, #528]	; (8017818 <tcp_process+0x5a8>)
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801760e:	1ad3      	subs	r3, r2, r3
 8017610:	3b01      	subs	r3, #1
 8017612:	2b00      	cmp	r3, #0
 8017614:	db7e      	blt.n	8017714 <tcp_process+0x4a4>
 8017616:	4b80      	ldr	r3, [pc, #512]	; (8017818 <tcp_process+0x5a8>)
 8017618:	681a      	ldr	r2, [r3, #0]
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801761e:	1ad3      	subs	r3, r2, r3
 8017620:	2b00      	cmp	r3, #0
 8017622:	dc77      	bgt.n	8017714 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2204      	movs	r2, #4
 8017628:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801762e:	2b00      	cmp	r3, #0
 8017630:	d102      	bne.n	8017638 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017632:	23fa      	movs	r3, #250	; 0xfa
 8017634:	76bb      	strb	r3, [r7, #26]
 8017636:	e01d      	b.n	8017674 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801763c:	699b      	ldr	r3, [r3, #24]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d106      	bne.n	8017650 <tcp_process+0x3e0>
 8017642:	4b7b      	ldr	r3, [pc, #492]	; (8017830 <tcp_process+0x5c0>)
 8017644:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017648:	497a      	ldr	r1, [pc, #488]	; (8017834 <tcp_process+0x5c4>)
 801764a:	487b      	ldr	r0, [pc, #492]	; (8017838 <tcp_process+0x5c8>)
 801764c:	f007 fdee 	bl	801f22c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017654:	699b      	ldr	r3, [r3, #24]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d00a      	beq.n	8017670 <tcp_process+0x400>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801765e:	699b      	ldr	r3, [r3, #24]
 8017660:	687a      	ldr	r2, [r7, #4]
 8017662:	6910      	ldr	r0, [r2, #16]
 8017664:	2200      	movs	r2, #0
 8017666:	6879      	ldr	r1, [r7, #4]
 8017668:	4798      	blx	r3
 801766a:	4603      	mov	r3, r0
 801766c:	76bb      	strb	r3, [r7, #26]
 801766e:	e001      	b.n	8017674 <tcp_process+0x404>
 8017670:	23f0      	movs	r3, #240	; 0xf0
 8017672:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017674:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d00a      	beq.n	8017692 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801767c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017680:	f113 0f0d 	cmn.w	r3, #13
 8017684:	d002      	beq.n	801768c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f7fd fde4 	bl	8015254 <tcp_abort>
            }
            return ERR_ABRT;
 801768c:	f06f 030c 	mvn.w	r3, #12
 8017690:	e1ce      	b.n	8017a30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f000 fae0 	bl	8017c58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017698:	4b68      	ldr	r3, [pc, #416]	; (801783c <tcp_process+0x5cc>)
 801769a:	881b      	ldrh	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d005      	beq.n	80176ac <tcp_process+0x43c>
            recv_acked--;
 80176a0:	4b66      	ldr	r3, [pc, #408]	; (801783c <tcp_process+0x5cc>)
 80176a2:	881b      	ldrh	r3, [r3, #0]
 80176a4:	3b01      	subs	r3, #1
 80176a6:	b29a      	uxth	r2, r3
 80176a8:	4b64      	ldr	r3, [pc, #400]	; (801783c <tcp_process+0x5cc>)
 80176aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80176b0:	009a      	lsls	r2, r3, #2
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80176b6:	005b      	lsls	r3, r3, #1
 80176b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80176bc:	428b      	cmp	r3, r1
 80176be:	bf38      	it	cc
 80176c0:	460b      	movcc	r3, r1
 80176c2:	429a      	cmp	r2, r3
 80176c4:	d204      	bcs.n	80176d0 <tcp_process+0x460>
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80176ca:	009b      	lsls	r3, r3, #2
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	e00d      	b.n	80176ec <tcp_process+0x47c>
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80176d4:	005b      	lsls	r3, r3, #1
 80176d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80176da:	4293      	cmp	r3, r2
 80176dc:	d904      	bls.n	80176e8 <tcp_process+0x478>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	e001      	b.n	80176ec <tcp_process+0x47c>
 80176e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80176f2:	4b53      	ldr	r3, [pc, #332]	; (8017840 <tcp_process+0x5d0>)
 80176f4:	781b      	ldrb	r3, [r3, #0]
 80176f6:	f003 0320 	and.w	r3, r3, #32
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d037      	beq.n	801776e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	8b5b      	ldrh	r3, [r3, #26]
 8017702:	f043 0302 	orr.w	r3, r3, #2
 8017706:	b29a      	uxth	r2, r3
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	2207      	movs	r2, #7
 8017710:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017712:	e02c      	b.n	801776e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017714:	4b40      	ldr	r3, [pc, #256]	; (8017818 <tcp_process+0x5a8>)
 8017716:	6819      	ldr	r1, [r3, #0]
 8017718:	4b40      	ldr	r3, [pc, #256]	; (801781c <tcp_process+0x5ac>)
 801771a:	881b      	ldrh	r3, [r3, #0]
 801771c:	461a      	mov	r2, r3
 801771e:	4b40      	ldr	r3, [pc, #256]	; (8017820 <tcp_process+0x5b0>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017724:	4b3f      	ldr	r3, [pc, #252]	; (8017824 <tcp_process+0x5b4>)
 8017726:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017728:	885b      	ldrh	r3, [r3, #2]
 801772a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801772c:	4a3d      	ldr	r2, [pc, #244]	; (8017824 <tcp_process+0x5b4>)
 801772e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017730:	8812      	ldrh	r2, [r2, #0]
 8017732:	b292      	uxth	r2, r2
 8017734:	9202      	str	r2, [sp, #8]
 8017736:	9301      	str	r3, [sp, #4]
 8017738:	4b3b      	ldr	r3, [pc, #236]	; (8017828 <tcp_process+0x5b8>)
 801773a:	9300      	str	r3, [sp, #0]
 801773c:	4b3b      	ldr	r3, [pc, #236]	; (801782c <tcp_process+0x5bc>)
 801773e:	4602      	mov	r2, r0
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f003 f827 	bl	801a794 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017746:	e167      	b.n	8017a18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017748:	4b32      	ldr	r3, [pc, #200]	; (8017814 <tcp_process+0x5a4>)
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	f003 0302 	and.w	r3, r3, #2
 8017750:	2b00      	cmp	r3, #0
 8017752:	f000 8161 	beq.w	8017a18 <tcp_process+0x7a8>
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801775a:	1e5a      	subs	r2, r3, #1
 801775c:	4b30      	ldr	r3, [pc, #192]	; (8017820 <tcp_process+0x5b0>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	429a      	cmp	r2, r3
 8017762:	f040 8159 	bne.w	8017a18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f002 fe0c 	bl	801a384 <tcp_rexmit>
      break;
 801776c:	e154      	b.n	8017a18 <tcp_process+0x7a8>
 801776e:	e153      	b.n	8017a18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f000 fa71 	bl	8017c58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017776:	4b32      	ldr	r3, [pc, #200]	; (8017840 <tcp_process+0x5d0>)
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	f003 0320 	and.w	r3, r3, #32
 801777e:	2b00      	cmp	r3, #0
 8017780:	f000 814c 	beq.w	8017a1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	8b5b      	ldrh	r3, [r3, #26]
 8017788:	f043 0302 	orr.w	r3, r3, #2
 801778c:	b29a      	uxth	r2, r3
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	2207      	movs	r2, #7
 8017796:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017798:	e140      	b.n	8017a1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f000 fa5c 	bl	8017c58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80177a0:	4b27      	ldr	r3, [pc, #156]	; (8017840 <tcp_process+0x5d0>)
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	f003 0320 	and.w	r3, r3, #32
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d071      	beq.n	8017890 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177ac:	4b19      	ldr	r3, [pc, #100]	; (8017814 <tcp_process+0x5a4>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	f003 0310 	and.w	r3, r3, #16
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d060      	beq.n	801787a <tcp_process+0x60a>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80177bc:	4b16      	ldr	r3, [pc, #88]	; (8017818 <tcp_process+0x5a8>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d15a      	bne.n	801787a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d156      	bne.n	801787a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	8b5b      	ldrh	r3, [r3, #26]
 80177d0:	f043 0302 	orr.w	r3, r3, #2
 80177d4:	b29a      	uxth	r2, r3
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f7fe fdbe 	bl	801635c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80177e0:	4b18      	ldr	r3, [pc, #96]	; (8017844 <tcp_process+0x5d4>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	687a      	ldr	r2, [r7, #4]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d105      	bne.n	80177f6 <tcp_process+0x586>
 80177ea:	4b16      	ldr	r3, [pc, #88]	; (8017844 <tcp_process+0x5d4>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	4a14      	ldr	r2, [pc, #80]	; (8017844 <tcp_process+0x5d4>)
 80177f2:	6013      	str	r3, [r2, #0]
 80177f4:	e02e      	b.n	8017854 <tcp_process+0x5e4>
 80177f6:	4b13      	ldr	r3, [pc, #76]	; (8017844 <tcp_process+0x5d4>)
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	617b      	str	r3, [r7, #20]
 80177fc:	e027      	b.n	801784e <tcp_process+0x5de>
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	687a      	ldr	r2, [r7, #4]
 8017804:	429a      	cmp	r2, r3
 8017806:	d11f      	bne.n	8017848 <tcp_process+0x5d8>
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	68da      	ldr	r2, [r3, #12]
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	60da      	str	r2, [r3, #12]
 8017810:	e020      	b.n	8017854 <tcp_process+0x5e4>
 8017812:	bf00      	nop
 8017814:	20006e40 	.word	0x20006e40
 8017818:	20006e38 	.word	0x20006e38
 801781c:	20006e3e 	.word	0x20006e3e
 8017820:	20006e34 	.word	0x20006e34
 8017824:	20006e24 	.word	0x20006e24
 8017828:	2000aa6c 	.word	0x2000aa6c
 801782c:	2000aa70 	.word	0x2000aa70
 8017830:	080254fc 	.word	0x080254fc
 8017834:	0802579c 	.word	0x0802579c
 8017838:	08025548 	.word	0x08025548
 801783c:	20006e3c 	.word	0x20006e3c
 8017840:	20006e41 	.word	0x20006e41
 8017844:	2000e170 	.word	0x2000e170
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	68db      	ldr	r3, [r3, #12]
 801784c:	617b      	str	r3, [r7, #20]
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d1d4      	bne.n	80177fe <tcp_process+0x58e>
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2200      	movs	r2, #0
 8017858:	60da      	str	r2, [r3, #12]
 801785a:	4b77      	ldr	r3, [pc, #476]	; (8017a38 <tcp_process+0x7c8>)
 801785c:	2201      	movs	r2, #1
 801785e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	220a      	movs	r2, #10
 8017864:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017866:	4b75      	ldr	r3, [pc, #468]	; (8017a3c <tcp_process+0x7cc>)
 8017868:	681a      	ldr	r2, [r3, #0]
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	60da      	str	r2, [r3, #12]
 801786e:	4a73      	ldr	r2, [pc, #460]	; (8017a3c <tcp_process+0x7cc>)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6013      	str	r3, [r2, #0]
 8017874:	f003 f950 	bl	801ab18 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017878:	e0d2      	b.n	8017a20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	8b5b      	ldrh	r3, [r3, #26]
 801787e:	f043 0302 	orr.w	r3, r3, #2
 8017882:	b29a      	uxth	r2, r3
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2208      	movs	r2, #8
 801788c:	751a      	strb	r2, [r3, #20]
      break;
 801788e:	e0c7      	b.n	8017a20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017890:	4b6b      	ldr	r3, [pc, #428]	; (8017a40 <tcp_process+0x7d0>)
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	f003 0310 	and.w	r3, r3, #16
 8017898:	2b00      	cmp	r3, #0
 801789a:	f000 80c1 	beq.w	8017a20 <tcp_process+0x7b0>
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80178a2:	4b68      	ldr	r3, [pc, #416]	; (8017a44 <tcp_process+0x7d4>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	f040 80ba 	bne.w	8017a20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	f040 80b5 	bne.w	8017a20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	2206      	movs	r2, #6
 80178ba:	751a      	strb	r2, [r3, #20]
      break;
 80178bc:	e0b0      	b.n	8017a20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f000 f9ca 	bl	8017c58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80178c4:	4b60      	ldr	r3, [pc, #384]	; (8017a48 <tcp_process+0x7d8>)
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	f003 0320 	and.w	r3, r3, #32
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	f000 80a9 	beq.w	8017a24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	8b5b      	ldrh	r3, [r3, #26]
 80178d6:	f043 0302 	orr.w	r3, r3, #2
 80178da:	b29a      	uxth	r2, r3
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f7fe fd3b 	bl	801635c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80178e6:	4b59      	ldr	r3, [pc, #356]	; (8017a4c <tcp_process+0x7dc>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	429a      	cmp	r2, r3
 80178ee:	d105      	bne.n	80178fc <tcp_process+0x68c>
 80178f0:	4b56      	ldr	r3, [pc, #344]	; (8017a4c <tcp_process+0x7dc>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	68db      	ldr	r3, [r3, #12]
 80178f6:	4a55      	ldr	r2, [pc, #340]	; (8017a4c <tcp_process+0x7dc>)
 80178f8:	6013      	str	r3, [r2, #0]
 80178fa:	e013      	b.n	8017924 <tcp_process+0x6b4>
 80178fc:	4b53      	ldr	r3, [pc, #332]	; (8017a4c <tcp_process+0x7dc>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	613b      	str	r3, [r7, #16]
 8017902:	e00c      	b.n	801791e <tcp_process+0x6ae>
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	68db      	ldr	r3, [r3, #12]
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	429a      	cmp	r2, r3
 801790c:	d104      	bne.n	8017918 <tcp_process+0x6a8>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	68da      	ldr	r2, [r3, #12]
 8017912:	693b      	ldr	r3, [r7, #16]
 8017914:	60da      	str	r2, [r3, #12]
 8017916:	e005      	b.n	8017924 <tcp_process+0x6b4>
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	613b      	str	r3, [r7, #16]
 801791e:	693b      	ldr	r3, [r7, #16]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d1ef      	bne.n	8017904 <tcp_process+0x694>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2200      	movs	r2, #0
 8017928:	60da      	str	r2, [r3, #12]
 801792a:	4b43      	ldr	r3, [pc, #268]	; (8017a38 <tcp_process+0x7c8>)
 801792c:	2201      	movs	r2, #1
 801792e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	220a      	movs	r2, #10
 8017934:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017936:	4b41      	ldr	r3, [pc, #260]	; (8017a3c <tcp_process+0x7cc>)
 8017938:	681a      	ldr	r2, [r3, #0]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	60da      	str	r2, [r3, #12]
 801793e:	4a3f      	ldr	r2, [pc, #252]	; (8017a3c <tcp_process+0x7cc>)
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6013      	str	r3, [r2, #0]
 8017944:	f003 f8e8 	bl	801ab18 <tcp_timer_needed>
      }
      break;
 8017948:	e06c      	b.n	8017a24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 f984 	bl	8017c58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017950:	4b3b      	ldr	r3, [pc, #236]	; (8017a40 <tcp_process+0x7d0>)
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	f003 0310 	and.w	r3, r3, #16
 8017958:	2b00      	cmp	r3, #0
 801795a:	d065      	beq.n	8017a28 <tcp_process+0x7b8>
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017960:	4b38      	ldr	r3, [pc, #224]	; (8017a44 <tcp_process+0x7d4>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	429a      	cmp	r2, r3
 8017966:	d15f      	bne.n	8017a28 <tcp_process+0x7b8>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801796c:	2b00      	cmp	r3, #0
 801796e:	d15b      	bne.n	8017a28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f7fe fcf3 	bl	801635c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017976:	4b35      	ldr	r3, [pc, #212]	; (8017a4c <tcp_process+0x7dc>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	429a      	cmp	r2, r3
 801797e:	d105      	bne.n	801798c <tcp_process+0x71c>
 8017980:	4b32      	ldr	r3, [pc, #200]	; (8017a4c <tcp_process+0x7dc>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	4a31      	ldr	r2, [pc, #196]	; (8017a4c <tcp_process+0x7dc>)
 8017988:	6013      	str	r3, [r2, #0]
 801798a:	e013      	b.n	80179b4 <tcp_process+0x744>
 801798c:	4b2f      	ldr	r3, [pc, #188]	; (8017a4c <tcp_process+0x7dc>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	60fb      	str	r3, [r7, #12]
 8017992:	e00c      	b.n	80179ae <tcp_process+0x73e>
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	68db      	ldr	r3, [r3, #12]
 8017998:	687a      	ldr	r2, [r7, #4]
 801799a:	429a      	cmp	r2, r3
 801799c:	d104      	bne.n	80179a8 <tcp_process+0x738>
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	68da      	ldr	r2, [r3, #12]
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	60da      	str	r2, [r3, #12]
 80179a6:	e005      	b.n	80179b4 <tcp_process+0x744>
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	68db      	ldr	r3, [r3, #12]
 80179ac:	60fb      	str	r3, [r7, #12]
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d1ef      	bne.n	8017994 <tcp_process+0x724>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2200      	movs	r2, #0
 80179b8:	60da      	str	r2, [r3, #12]
 80179ba:	4b1f      	ldr	r3, [pc, #124]	; (8017a38 <tcp_process+0x7c8>)
 80179bc:	2201      	movs	r2, #1
 80179be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	220a      	movs	r2, #10
 80179c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80179c6:	4b1d      	ldr	r3, [pc, #116]	; (8017a3c <tcp_process+0x7cc>)
 80179c8:	681a      	ldr	r2, [r3, #0]
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	60da      	str	r2, [r3, #12]
 80179ce:	4a1b      	ldr	r2, [pc, #108]	; (8017a3c <tcp_process+0x7cc>)
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	6013      	str	r3, [r2, #0]
 80179d4:	f003 f8a0 	bl	801ab18 <tcp_timer_needed>
      }
      break;
 80179d8:	e026      	b.n	8017a28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f000 f93c 	bl	8017c58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80179e0:	4b17      	ldr	r3, [pc, #92]	; (8017a40 <tcp_process+0x7d0>)
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	f003 0310 	and.w	r3, r3, #16
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d01f      	beq.n	8017a2c <tcp_process+0x7bc>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179f0:	4b14      	ldr	r3, [pc, #80]	; (8017a44 <tcp_process+0x7d4>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d119      	bne.n	8017a2c <tcp_process+0x7bc>
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d115      	bne.n	8017a2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017a00:	4b11      	ldr	r3, [pc, #68]	; (8017a48 <tcp_process+0x7d8>)
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	f043 0310 	orr.w	r3, r3, #16
 8017a08:	b2da      	uxtb	r2, r3
 8017a0a:	4b0f      	ldr	r3, [pc, #60]	; (8017a48 <tcp_process+0x7d8>)
 8017a0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017a0e:	e00d      	b.n	8017a2c <tcp_process+0x7bc>
    default:
      break;
 8017a10:	bf00      	nop
 8017a12:	e00c      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a14:	bf00      	nop
 8017a16:	e00a      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a18:	bf00      	nop
 8017a1a:	e008      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a1c:	bf00      	nop
 8017a1e:	e006      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a20:	bf00      	nop
 8017a22:	e004      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a24:	bf00      	nop
 8017a26:	e002      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a28:	bf00      	nop
 8017a2a:	e000      	b.n	8017a2e <tcp_process+0x7be>
      break;
 8017a2c:	bf00      	nop
  }
  return ERR_OK;
 8017a2e:	2300      	movs	r3, #0
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3724      	adds	r7, #36	; 0x24
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd90      	pop	{r4, r7, pc}
 8017a38:	2000e16c 	.word	0x2000e16c
 8017a3c:	2000e180 	.word	0x2000e180
 8017a40:	20006e40 	.word	0x20006e40
 8017a44:	20006e38 	.word	0x20006e38
 8017a48:	20006e41 	.word	0x20006e41
 8017a4c:	2000e170 	.word	0x2000e170

08017a50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017a50:	b590      	push	{r4, r7, lr}
 8017a52:	b085      	sub	sp, #20
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d106      	bne.n	8017a6e <tcp_oos_insert_segment+0x1e>
 8017a60:	4b3b      	ldr	r3, [pc, #236]	; (8017b50 <tcp_oos_insert_segment+0x100>)
 8017a62:	f240 421f 	movw	r2, #1055	; 0x41f
 8017a66:	493b      	ldr	r1, [pc, #236]	; (8017b54 <tcp_oos_insert_segment+0x104>)
 8017a68:	483b      	ldr	r0, [pc, #236]	; (8017b58 <tcp_oos_insert_segment+0x108>)
 8017a6a:	f007 fbdf 	bl	801f22c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	68db      	ldr	r3, [r3, #12]
 8017a72:	899b      	ldrh	r3, [r3, #12]
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	4618      	mov	r0, r3
 8017a78:	f7fb faa4 	bl	8012fc4 <lwip_htons>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	b2db      	uxtb	r3, r3
 8017a80:	f003 0301 	and.w	r3, r3, #1
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d028      	beq.n	8017ada <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017a88:	6838      	ldr	r0, [r7, #0]
 8017a8a:	f7fe f997 	bl	8015dbc <tcp_segs_free>
    next = NULL;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	603b      	str	r3, [r7, #0]
 8017a92:	e056      	b.n	8017b42 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	899b      	ldrh	r3, [r3, #12]
 8017a9a:	b29b      	uxth	r3, r3
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7fb fa91 	bl	8012fc4 <lwip_htons>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	f003 0301 	and.w	r3, r3, #1
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d00d      	beq.n	8017aca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	68db      	ldr	r3, [r3, #12]
 8017ab2:	899b      	ldrh	r3, [r3, #12]
 8017ab4:	b29c      	uxth	r4, r3
 8017ab6:	2001      	movs	r0, #1
 8017ab8:	f7fb fa84 	bl	8012fc4 <lwip_htons>
 8017abc:	4603      	mov	r3, r0
 8017abe:	461a      	mov	r2, r3
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	68db      	ldr	r3, [r3, #12]
 8017ac4:	4322      	orrs	r2, r4
 8017ac6:	b292      	uxth	r2, r2
 8017ac8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017ad4:	68f8      	ldr	r0, [r7, #12]
 8017ad6:	f7fe f986 	bl	8015de6 <tcp_seg_free>
    while (next &&
 8017ada:	683b      	ldr	r3, [r7, #0]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d00e      	beq.n	8017afe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	891b      	ldrh	r3, [r3, #8]
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	4b1d      	ldr	r3, [pc, #116]	; (8017b5c <tcp_oos_insert_segment+0x10c>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	441a      	add	r2, r3
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	68db      	ldr	r3, [r3, #12]
 8017af0:	685b      	ldr	r3, [r3, #4]
 8017af2:	6839      	ldr	r1, [r7, #0]
 8017af4:	8909      	ldrh	r1, [r1, #8]
 8017af6:	440b      	add	r3, r1
 8017af8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	daca      	bge.n	8017a94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d01e      	beq.n	8017b42 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	891b      	ldrh	r3, [r3, #8]
 8017b08:	461a      	mov	r2, r3
 8017b0a:	4b14      	ldr	r3, [pc, #80]	; (8017b5c <tcp_oos_insert_segment+0x10c>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	441a      	add	r2, r3
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	68db      	ldr	r3, [r3, #12]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	dd12      	ble.n	8017b42 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	68db      	ldr	r3, [r3, #12]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	b29a      	uxth	r2, r3
 8017b24:	4b0d      	ldr	r3, [pc, #52]	; (8017b5c <tcp_oos_insert_segment+0x10c>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	b29b      	uxth	r3, r3
 8017b2a:	1ad3      	subs	r3, r2, r3
 8017b2c:	b29a      	uxth	r2, r3
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	685a      	ldr	r2, [r3, #4]
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	891b      	ldrh	r3, [r3, #8]
 8017b3a:	4619      	mov	r1, r3
 8017b3c:	4610      	mov	r0, r2
 8017b3e:	f7fc fc03 	bl	8014348 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	683a      	ldr	r2, [r7, #0]
 8017b46:	601a      	str	r2, [r3, #0]
}
 8017b48:	bf00      	nop
 8017b4a:	3714      	adds	r7, #20
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd90      	pop	{r4, r7, pc}
 8017b50:	080254fc 	.word	0x080254fc
 8017b54:	080257bc 	.word	0x080257bc
 8017b58:	08025548 	.word	0x08025548
 8017b5c:	20006e34 	.word	0x20006e34

08017b60 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017b60:	b5b0      	push	{r4, r5, r7, lr}
 8017b62:	b086      	sub	sp, #24
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	60f8      	str	r0, [r7, #12]
 8017b68:	60b9      	str	r1, [r7, #8]
 8017b6a:	607a      	str	r2, [r7, #4]
 8017b6c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017b6e:	e03e      	b.n	8017bee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7fc fdf6 	bl	8014770 <pbuf_clen>
 8017b84:	4603      	mov	r3, r0
 8017b86:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b8e:	8a7a      	ldrh	r2, [r7, #18]
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d906      	bls.n	8017ba2 <tcp_free_acked_segments+0x42>
 8017b94:	4b2a      	ldr	r3, [pc, #168]	; (8017c40 <tcp_free_acked_segments+0xe0>)
 8017b96:	f240 4257 	movw	r2, #1111	; 0x457
 8017b9a:	492a      	ldr	r1, [pc, #168]	; (8017c44 <tcp_free_acked_segments+0xe4>)
 8017b9c:	482a      	ldr	r0, [pc, #168]	; (8017c48 <tcp_free_acked_segments+0xe8>)
 8017b9e:	f007 fb45 	bl	801f22c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017ba8:	8a7b      	ldrh	r3, [r7, #18]
 8017baa:	1ad3      	subs	r3, r2, r3
 8017bac:	b29a      	uxth	r2, r3
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017bb4:	697b      	ldr	r3, [r7, #20]
 8017bb6:	891a      	ldrh	r2, [r3, #8]
 8017bb8:	4b24      	ldr	r3, [pc, #144]	; (8017c4c <tcp_free_acked_segments+0xec>)
 8017bba:	881b      	ldrh	r3, [r3, #0]
 8017bbc:	4413      	add	r3, r2
 8017bbe:	b29a      	uxth	r2, r3
 8017bc0:	4b22      	ldr	r3, [pc, #136]	; (8017c4c <tcp_free_acked_segments+0xec>)
 8017bc2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017bc4:	6978      	ldr	r0, [r7, #20]
 8017bc6:	f7fe f90e 	bl	8015de6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d00c      	beq.n	8017bee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d109      	bne.n	8017bee <tcp_free_acked_segments+0x8e>
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d106      	bne.n	8017bee <tcp_free_acked_segments+0x8e>
 8017be0:	4b17      	ldr	r3, [pc, #92]	; (8017c40 <tcp_free_acked_segments+0xe0>)
 8017be2:	f240 4261 	movw	r2, #1121	; 0x461
 8017be6:	491a      	ldr	r1, [pc, #104]	; (8017c50 <tcp_free_acked_segments+0xf0>)
 8017be8:	4817      	ldr	r0, [pc, #92]	; (8017c48 <tcp_free_acked_segments+0xe8>)
 8017bea:	f007 fb1f 	bl	801f22c <iprintf>
  while (seg_list != NULL &&
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d020      	beq.n	8017c36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	68db      	ldr	r3, [r3, #12]
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7fb f9f7 	bl	8012fee <lwip_htonl>
 8017c00:	4604      	mov	r4, r0
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	891b      	ldrh	r3, [r3, #8]
 8017c06:	461d      	mov	r5, r3
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	899b      	ldrh	r3, [r3, #12]
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	4618      	mov	r0, r3
 8017c12:	f7fb f9d7 	bl	8012fc4 <lwip_htons>
 8017c16:	4603      	mov	r3, r0
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	f003 0303 	and.w	r3, r3, #3
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d001      	beq.n	8017c26 <tcp_free_acked_segments+0xc6>
 8017c22:	2301      	movs	r3, #1
 8017c24:	e000      	b.n	8017c28 <tcp_free_acked_segments+0xc8>
 8017c26:	2300      	movs	r3, #0
 8017c28:	442b      	add	r3, r5
 8017c2a:	18e2      	adds	r2, r4, r3
 8017c2c:	4b09      	ldr	r3, [pc, #36]	; (8017c54 <tcp_free_acked_segments+0xf4>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	dd9c      	ble.n	8017b70 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017c36:	68bb      	ldr	r3, [r7, #8]
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3718      	adds	r7, #24
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8017c40:	080254fc 	.word	0x080254fc
 8017c44:	080257e4 	.word	0x080257e4
 8017c48:	08025548 	.word	0x08025548
 8017c4c:	20006e3c 	.word	0x20006e3c
 8017c50:	0802580c 	.word	0x0802580c
 8017c54:	20006e38 	.word	0x20006e38

08017c58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017c58:	b5b0      	push	{r4, r5, r7, lr}
 8017c5a:	b094      	sub	sp, #80	; 0x50
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017c60:	2300      	movs	r3, #0
 8017c62:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d106      	bne.n	8017c78 <tcp_receive+0x20>
 8017c6a:	4ba6      	ldr	r3, [pc, #664]	; (8017f04 <tcp_receive+0x2ac>)
 8017c6c:	f240 427b 	movw	r2, #1147	; 0x47b
 8017c70:	49a5      	ldr	r1, [pc, #660]	; (8017f08 <tcp_receive+0x2b0>)
 8017c72:	48a6      	ldr	r0, [pc, #664]	; (8017f0c <tcp_receive+0x2b4>)
 8017c74:	f007 fada 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	7d1b      	ldrb	r3, [r3, #20]
 8017c7c:	2b03      	cmp	r3, #3
 8017c7e:	d806      	bhi.n	8017c8e <tcp_receive+0x36>
 8017c80:	4ba0      	ldr	r3, [pc, #640]	; (8017f04 <tcp_receive+0x2ac>)
 8017c82:	f240 427c 	movw	r2, #1148	; 0x47c
 8017c86:	49a2      	ldr	r1, [pc, #648]	; (8017f10 <tcp_receive+0x2b8>)
 8017c88:	48a0      	ldr	r0, [pc, #640]	; (8017f0c <tcp_receive+0x2b4>)
 8017c8a:	f007 facf 	bl	801f22c <iprintf>

  if (flags & TCP_ACK) {
 8017c8e:	4ba1      	ldr	r3, [pc, #644]	; (8017f14 <tcp_receive+0x2bc>)
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	f003 0310 	and.w	r3, r3, #16
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	f000 8263 	beq.w	8018162 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017ca2:	461a      	mov	r2, r3
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ca8:	4413      	add	r3, r2
 8017caa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017cb0:	4b99      	ldr	r3, [pc, #612]	; (8017f18 <tcp_receive+0x2c0>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	db1b      	blt.n	8017cf2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017cbe:	4b96      	ldr	r3, [pc, #600]	; (8017f18 <tcp_receive+0x2c0>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d106      	bne.n	8017cd4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017cca:	4b94      	ldr	r3, [pc, #592]	; (8017f1c <tcp_receive+0x2c4>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	1ad3      	subs	r3, r2, r3
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	db0e      	blt.n	8017cf2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017cd8:	4b90      	ldr	r3, [pc, #576]	; (8017f1c <tcp_receive+0x2c4>)
 8017cda:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d125      	bne.n	8017d2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017ce0:	4b8f      	ldr	r3, [pc, #572]	; (8017f20 <tcp_receive+0x2c8>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	89db      	ldrh	r3, [r3, #14]
 8017ce6:	b29a      	uxth	r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	d91c      	bls.n	8017d2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017cf2:	4b8b      	ldr	r3, [pc, #556]	; (8017f20 <tcp_receive+0x2c8>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	89db      	ldrh	r3, [r3, #14]
 8017cf8:	b29a      	uxth	r2, r3
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d205      	bcs.n	8017d1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017d1c:	4b7e      	ldr	r3, [pc, #504]	; (8017f18 <tcp_receive+0x2c0>)
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017d24:	4b7d      	ldr	r3, [pc, #500]	; (8017f1c <tcp_receive+0x2c4>)
 8017d26:	681a      	ldr	r2, [r3, #0]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017d2c:	4b7b      	ldr	r3, [pc, #492]	; (8017f1c <tcp_receive+0x2c4>)
 8017d2e:	681a      	ldr	r2, [r3, #0]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d34:	1ad3      	subs	r3, r2, r3
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	dc58      	bgt.n	8017dec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017d3a:	4b7a      	ldr	r3, [pc, #488]	; (8017f24 <tcp_receive+0x2cc>)
 8017d3c:	881b      	ldrh	r3, [r3, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d14b      	bne.n	8017dda <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d46:	687a      	ldr	r2, [r7, #4]
 8017d48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017d4c:	4413      	add	r3, r2
 8017d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d142      	bne.n	8017dda <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	db3d      	blt.n	8017dda <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017d62:	4b6e      	ldr	r3, [pc, #440]	; (8017f1c <tcp_receive+0x2c4>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d137      	bne.n	8017dda <tcp_receive+0x182>
              found_dupack = 1;
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d74:	2bff      	cmp	r3, #255	; 0xff
 8017d76:	d007      	beq.n	8017d88 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d7e:	3301      	adds	r3, #1
 8017d80:	b2da      	uxtb	r2, r3
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d8e:	2b03      	cmp	r3, #3
 8017d90:	d91b      	bls.n	8017dca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d9c:	4413      	add	r3, r2
 8017d9e:	b29a      	uxth	r2, r3
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d30a      	bcc.n	8017dc0 <tcp_receive+0x168>
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017db4:	4413      	add	r3, r2
 8017db6:	b29a      	uxth	r2, r3
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017dbe:	e004      	b.n	8017dca <tcp_receive+0x172>
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017dd0:	2b02      	cmp	r3, #2
 8017dd2:	d902      	bls.n	8017dda <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f002 fb41 	bl	801a45c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	f040 8160 	bne.w	80180a2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2200      	movs	r2, #0
 8017de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017dea:	e15a      	b.n	80180a2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017dec:	4b4b      	ldr	r3, [pc, #300]	; (8017f1c <tcp_receive+0x2c4>)
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017df4:	1ad3      	subs	r3, r2, r3
 8017df6:	3b01      	subs	r3, #1
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	f2c0 814d 	blt.w	8018098 <tcp_receive+0x440>
 8017dfe:	4b47      	ldr	r3, [pc, #284]	; (8017f1c <tcp_receive+0x2c4>)
 8017e00:	681a      	ldr	r2, [r3, #0]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e06:	1ad3      	subs	r3, r2, r3
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f300 8145 	bgt.w	8018098 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	8b5b      	ldrh	r3, [r3, #26]
 8017e12:	f003 0304 	and.w	r3, r3, #4
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d010      	beq.n	8017e3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	8b5b      	ldrh	r3, [r3, #26]
 8017e1e:	f023 0304 	bic.w	r3, r3, #4
 8017e22:	b29a      	uxth	r2, r3
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	2200      	movs	r2, #0
 8017e38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017e4a:	10db      	asrs	r3, r3, #3
 8017e4c:	b21b      	sxth	r3, r3
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	4413      	add	r3, r2
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	b21a      	sxth	r2, r3
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017e64:	4b2d      	ldr	r3, [pc, #180]	; (8017f1c <tcp_receive+0x2c4>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	b29a      	uxth	r2, r3
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	1ad3      	subs	r3, r2, r3
 8017e72:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	2200      	movs	r2, #0
 8017e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017e7c:	4b27      	ldr	r3, [pc, #156]	; (8017f1c <tcp_receive+0x2c4>)
 8017e7e:	681a      	ldr	r2, [r3, #0]
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	7d1b      	ldrb	r3, [r3, #20]
 8017e88:	2b03      	cmp	r3, #3
 8017e8a:	f240 8096 	bls.w	8017fba <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	d244      	bcs.n	8017f28 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	8b5b      	ldrh	r3, [r3, #26]
 8017ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d001      	beq.n	8017eae <tcp_receive+0x256>
 8017eaa:	2301      	movs	r3, #1
 8017eac:	e000      	b.n	8017eb0 <tcp_receive+0x258>
 8017eae:	2302      	movs	r3, #2
 8017eb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017eb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017eb8:	b29a      	uxth	r2, r3
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ebe:	fb12 f303 	smulbb	r3, r2, r3
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017ec6:	4293      	cmp	r3, r2
 8017ec8:	bf28      	it	cs
 8017eca:	4613      	movcs	r3, r2
 8017ecc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ed4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ed6:	4413      	add	r3, r2
 8017ed8:	b29a      	uxth	r2, r3
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d309      	bcc.n	8017ef8 <tcp_receive+0x2a0>
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017eea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017eec:	4413      	add	r3, r2
 8017eee:	b29a      	uxth	r2, r3
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017ef6:	e060      	b.n	8017fba <tcp_receive+0x362>
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017efe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f02:	e05a      	b.n	8017fba <tcp_receive+0x362>
 8017f04:	080254fc 	.word	0x080254fc
 8017f08:	0802582c 	.word	0x0802582c
 8017f0c:	08025548 	.word	0x08025548
 8017f10:	08025848 	.word	0x08025848
 8017f14:	20006e40 	.word	0x20006e40
 8017f18:	20006e34 	.word	0x20006e34
 8017f1c:	20006e38 	.word	0x20006e38
 8017f20:	20006e24 	.word	0x20006e24
 8017f24:	20006e3e 	.word	0x20006e3e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017f30:	4413      	add	r3, r2
 8017f32:	b29a      	uxth	r2, r3
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d309      	bcc.n	8017f52 <tcp_receive+0x2fa>
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017f46:	4413      	add	r3, r2
 8017f48:	b29a      	uxth	r2, r3
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017f50:	e004      	b.n	8017f5c <tcp_receive+0x304>
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d326      	bcc.n	8017fba <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f78:	1ad3      	subs	r3, r2, r3
 8017f7a:	b29a      	uxth	r2, r3
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f8c:	4413      	add	r3, r2
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d30a      	bcc.n	8017fb0 <tcp_receive+0x358>
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017fa4:	4413      	add	r3, r2
 8017fa6:	b29a      	uxth	r2, r3
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017fae:	e004      	b.n	8017fba <tcp_receive+0x362>
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fc2:	4a98      	ldr	r2, [pc, #608]	; (8018224 <tcp_receive+0x5cc>)
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7ff fdcb 	bl	8017b60 <tcp_free_acked_segments>
 8017fca:	4602      	mov	r2, r0
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fd8:	4a93      	ldr	r2, [pc, #588]	; (8018228 <tcp_receive+0x5d0>)
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f7ff fdc0 	bl	8017b60 <tcp_free_acked_segments>
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d104      	bne.n	8017ff8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ff4:	861a      	strh	r2, [r3, #48]	; 0x30
 8017ff6:	e002      	b.n	8017ffe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2200      	movs	r2, #0
 8018002:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018008:	2b00      	cmp	r3, #0
 801800a:	d103      	bne.n	8018014 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2200      	movs	r2, #0
 8018010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801801a:	4b84      	ldr	r3, [pc, #528]	; (801822c <tcp_receive+0x5d4>)
 801801c:	881b      	ldrh	r3, [r3, #0]
 801801e:	4413      	add	r3, r2
 8018020:	b29a      	uxth	r2, r3
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	8b5b      	ldrh	r3, [r3, #26]
 801802c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018030:	2b00      	cmp	r3, #0
 8018032:	d035      	beq.n	80180a0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018038:	2b00      	cmp	r3, #0
 801803a:	d118      	bne.n	801806e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018040:	2b00      	cmp	r3, #0
 8018042:	d00c      	beq.n	801805e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	685b      	ldr	r3, [r3, #4]
 8018050:	4618      	mov	r0, r3
 8018052:	f7fa ffcc 	bl	8012fee <lwip_htonl>
 8018056:	4603      	mov	r3, r0
 8018058:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801805a:	2b00      	cmp	r3, #0
 801805c:	dc20      	bgt.n	80180a0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	8b5b      	ldrh	r3, [r3, #26]
 8018062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018066:	b29a      	uxth	r2, r3
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801806c:	e018      	b.n	80180a0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	4618      	mov	r0, r3
 801807c:	f7fa ffb7 	bl	8012fee <lwip_htonl>
 8018080:	4603      	mov	r3, r0
 8018082:	1ae3      	subs	r3, r4, r3
 8018084:	2b00      	cmp	r3, #0
 8018086:	dc0b      	bgt.n	80180a0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	8b5b      	ldrh	r3, [r3, #26]
 801808c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018090:	b29a      	uxth	r2, r3
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018096:	e003      	b.n	80180a0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f002 fbcd 	bl	801a838 <tcp_send_empty_ack>
 801809e:	e000      	b.n	80180a2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80180a0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d05b      	beq.n	8018162 <tcp_receive+0x50a>
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180ae:	4b60      	ldr	r3, [pc, #384]	; (8018230 <tcp_receive+0x5d8>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	1ad3      	subs	r3, r2, r3
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	da54      	bge.n	8018162 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80180b8:	4b5e      	ldr	r3, [pc, #376]	; (8018234 <tcp_receive+0x5dc>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	b29a      	uxth	r2, r3
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	1ad3      	subs	r3, r2, r3
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80180cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80180d6:	10db      	asrs	r3, r3, #3
 80180d8:	b21b      	sxth	r3, r3
 80180da:	b29b      	uxth	r3, r3
 80180dc:	1ad3      	subs	r3, r2, r3
 80180de:	b29b      	uxth	r3, r3
 80180e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80180f0:	4413      	add	r3, r2
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	b21a      	sxth	r2, r3
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80180fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80180fe:	2b00      	cmp	r3, #0
 8018100:	da05      	bge.n	801810e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8018102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018106:	425b      	negs	r3, r3
 8018108:	b29b      	uxth	r3, r3
 801810a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801810e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018118:	109b      	asrs	r3, r3, #2
 801811a:	b21b      	sxth	r3, r3
 801811c:	b29b      	uxth	r3, r3
 801811e:	1ad3      	subs	r3, r2, r3
 8018120:	b29b      	uxth	r3, r3
 8018122:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801812c:	b29a      	uxth	r2, r3
 801812e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018132:	4413      	add	r3, r2
 8018134:	b29b      	uxth	r3, r3
 8018136:	b21a      	sxth	r2, r3
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018142:	10db      	asrs	r3, r3, #3
 8018144:	b21b      	sxth	r3, r3
 8018146:	b29a      	uxth	r2, r3
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801814e:	b29b      	uxth	r3, r3
 8018150:	4413      	add	r3, r2
 8018152:	b29b      	uxth	r3, r3
 8018154:	b21a      	sxth	r2, r3
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2200      	movs	r2, #0
 8018160:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018162:	4b35      	ldr	r3, [pc, #212]	; (8018238 <tcp_receive+0x5e0>)
 8018164:	881b      	ldrh	r3, [r3, #0]
 8018166:	2b00      	cmp	r3, #0
 8018168:	f000 84e1 	beq.w	8018b2e <tcp_receive+0xed6>
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	7d1b      	ldrb	r3, [r3, #20]
 8018170:	2b06      	cmp	r3, #6
 8018172:	f200 84dc 	bhi.w	8018b2e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801817a:	4b30      	ldr	r3, [pc, #192]	; (801823c <tcp_receive+0x5e4>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	1ad3      	subs	r3, r2, r3
 8018180:	3b01      	subs	r3, #1
 8018182:	2b00      	cmp	r3, #0
 8018184:	f2c0 808e 	blt.w	80182a4 <tcp_receive+0x64c>
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801818c:	4b2a      	ldr	r3, [pc, #168]	; (8018238 <tcp_receive+0x5e0>)
 801818e:	881b      	ldrh	r3, [r3, #0]
 8018190:	4619      	mov	r1, r3
 8018192:	4b2a      	ldr	r3, [pc, #168]	; (801823c <tcp_receive+0x5e4>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	440b      	add	r3, r1
 8018198:	1ad3      	subs	r3, r2, r3
 801819a:	3301      	adds	r3, #1
 801819c:	2b00      	cmp	r3, #0
 801819e:	f300 8081 	bgt.w	80182a4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80181a2:	4b27      	ldr	r3, [pc, #156]	; (8018240 <tcp_receive+0x5e8>)
 80181a4:	685b      	ldr	r3, [r3, #4]
 80181a6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181ac:	4b23      	ldr	r3, [pc, #140]	; (801823c <tcp_receive+0x5e4>)
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	1ad3      	subs	r3, r2, r3
 80181b2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80181b4:	4b22      	ldr	r3, [pc, #136]	; (8018240 <tcp_receive+0x5e8>)
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d106      	bne.n	80181ca <tcp_receive+0x572>
 80181bc:	4b21      	ldr	r3, [pc, #132]	; (8018244 <tcp_receive+0x5ec>)
 80181be:	f240 5294 	movw	r2, #1428	; 0x594
 80181c2:	4921      	ldr	r1, [pc, #132]	; (8018248 <tcp_receive+0x5f0>)
 80181c4:	4821      	ldr	r0, [pc, #132]	; (801824c <tcp_receive+0x5f4>)
 80181c6:	f007 f831 	bl	801f22c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80181ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80181d0:	4293      	cmp	r3, r2
 80181d2:	d906      	bls.n	80181e2 <tcp_receive+0x58a>
 80181d4:	4b1b      	ldr	r3, [pc, #108]	; (8018244 <tcp_receive+0x5ec>)
 80181d6:	f240 5295 	movw	r2, #1429	; 0x595
 80181da:	491d      	ldr	r1, [pc, #116]	; (8018250 <tcp_receive+0x5f8>)
 80181dc:	481b      	ldr	r0, [pc, #108]	; (801824c <tcp_receive+0x5f4>)
 80181de:	f007 f825 	bl	801f22c <iprintf>
      off = (u16_t)off32;
 80181e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80181e8:	4b15      	ldr	r3, [pc, #84]	; (8018240 <tcp_receive+0x5e8>)
 80181ea:	685b      	ldr	r3, [r3, #4]
 80181ec:	891b      	ldrh	r3, [r3, #8]
 80181ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d906      	bls.n	8018204 <tcp_receive+0x5ac>
 80181f6:	4b13      	ldr	r3, [pc, #76]	; (8018244 <tcp_receive+0x5ec>)
 80181f8:	f240 5297 	movw	r2, #1431	; 0x597
 80181fc:	4915      	ldr	r1, [pc, #84]	; (8018254 <tcp_receive+0x5fc>)
 80181fe:	4813      	ldr	r0, [pc, #76]	; (801824c <tcp_receive+0x5f4>)
 8018200:	f007 f814 	bl	801f22c <iprintf>
      inseg.len -= off;
 8018204:	4b0e      	ldr	r3, [pc, #56]	; (8018240 <tcp_receive+0x5e8>)
 8018206:	891a      	ldrh	r2, [r3, #8]
 8018208:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801820c:	1ad3      	subs	r3, r2, r3
 801820e:	b29a      	uxth	r2, r3
 8018210:	4b0b      	ldr	r3, [pc, #44]	; (8018240 <tcp_receive+0x5e8>)
 8018212:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018214:	4b0a      	ldr	r3, [pc, #40]	; (8018240 <tcp_receive+0x5e8>)
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	891a      	ldrh	r2, [r3, #8]
 801821a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801821e:	1ad3      	subs	r3, r2, r3
 8018220:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018222:	e029      	b.n	8018278 <tcp_receive+0x620>
 8018224:	08025864 	.word	0x08025864
 8018228:	0802586c 	.word	0x0802586c
 801822c:	20006e3c 	.word	0x20006e3c
 8018230:	20006e38 	.word	0x20006e38
 8018234:	2000e174 	.word	0x2000e174
 8018238:	20006e3e 	.word	0x20006e3e
 801823c:	20006e34 	.word	0x20006e34
 8018240:	20006e14 	.word	0x20006e14
 8018244:	080254fc 	.word	0x080254fc
 8018248:	08025874 	.word	0x08025874
 801824c:	08025548 	.word	0x08025548
 8018250:	08025884 	.word	0x08025884
 8018254:	08025894 	.word	0x08025894
        off -= p->len;
 8018258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801825a:	895b      	ldrh	r3, [r3, #10]
 801825c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018260:	1ad3      	subs	r3, r2, r3
 8018262:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018268:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801826a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801826c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801826e:	2200      	movs	r2, #0
 8018270:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801827a:	895b      	ldrh	r3, [r3, #10]
 801827c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018280:	429a      	cmp	r2, r3
 8018282:	d8e9      	bhi.n	8018258 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018288:	4619      	mov	r1, r3
 801828a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801828c:	f7fc f95c 	bl	8014548 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018294:	4a91      	ldr	r2, [pc, #580]	; (80184dc <tcp_receive+0x884>)
 8018296:	6013      	str	r3, [r2, #0]
 8018298:	4b91      	ldr	r3, [pc, #580]	; (80184e0 <tcp_receive+0x888>)
 801829a:	68db      	ldr	r3, [r3, #12]
 801829c:	4a8f      	ldr	r2, [pc, #572]	; (80184dc <tcp_receive+0x884>)
 801829e:	6812      	ldr	r2, [r2, #0]
 80182a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80182a2:	e00d      	b.n	80182c0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80182a4:	4b8d      	ldr	r3, [pc, #564]	; (80184dc <tcp_receive+0x884>)
 80182a6:	681a      	ldr	r2, [r3, #0]
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ac:	1ad3      	subs	r3, r2, r3
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	da06      	bge.n	80182c0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	8b5b      	ldrh	r3, [r3, #26]
 80182b6:	f043 0302 	orr.w	r3, r3, #2
 80182ba:	b29a      	uxth	r2, r3
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80182c0:	4b86      	ldr	r3, [pc, #536]	; (80184dc <tcp_receive+0x884>)
 80182c2:	681a      	ldr	r2, [r3, #0]
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182c8:	1ad3      	subs	r3, r2, r3
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	f2c0 842a 	blt.w	8018b24 <tcp_receive+0xecc>
 80182d0:	4b82      	ldr	r3, [pc, #520]	; (80184dc <tcp_receive+0x884>)
 80182d2:	681a      	ldr	r2, [r3, #0]
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182d8:	6879      	ldr	r1, [r7, #4]
 80182da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80182dc:	440b      	add	r3, r1
 80182de:	1ad3      	subs	r3, r2, r3
 80182e0:	3301      	adds	r3, #1
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	f300 841e 	bgt.w	8018b24 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182ec:	4b7b      	ldr	r3, [pc, #492]	; (80184dc <tcp_receive+0x884>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	f040 829a 	bne.w	801882a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80182f6:	4b7a      	ldr	r3, [pc, #488]	; (80184e0 <tcp_receive+0x888>)
 80182f8:	891c      	ldrh	r4, [r3, #8]
 80182fa:	4b79      	ldr	r3, [pc, #484]	; (80184e0 <tcp_receive+0x888>)
 80182fc:	68db      	ldr	r3, [r3, #12]
 80182fe:	899b      	ldrh	r3, [r3, #12]
 8018300:	b29b      	uxth	r3, r3
 8018302:	4618      	mov	r0, r3
 8018304:	f7fa fe5e 	bl	8012fc4 <lwip_htons>
 8018308:	4603      	mov	r3, r0
 801830a:	b2db      	uxtb	r3, r3
 801830c:	f003 0303 	and.w	r3, r3, #3
 8018310:	2b00      	cmp	r3, #0
 8018312:	d001      	beq.n	8018318 <tcp_receive+0x6c0>
 8018314:	2301      	movs	r3, #1
 8018316:	e000      	b.n	801831a <tcp_receive+0x6c2>
 8018318:	2300      	movs	r3, #0
 801831a:	4423      	add	r3, r4
 801831c:	b29a      	uxth	r2, r3
 801831e:	4b71      	ldr	r3, [pc, #452]	; (80184e4 <tcp_receive+0x88c>)
 8018320:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018326:	4b6f      	ldr	r3, [pc, #444]	; (80184e4 <tcp_receive+0x88c>)
 8018328:	881b      	ldrh	r3, [r3, #0]
 801832a:	429a      	cmp	r2, r3
 801832c:	d275      	bcs.n	801841a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801832e:	4b6c      	ldr	r3, [pc, #432]	; (80184e0 <tcp_receive+0x888>)
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	899b      	ldrh	r3, [r3, #12]
 8018334:	b29b      	uxth	r3, r3
 8018336:	4618      	mov	r0, r3
 8018338:	f7fa fe44 	bl	8012fc4 <lwip_htons>
 801833c:	4603      	mov	r3, r0
 801833e:	b2db      	uxtb	r3, r3
 8018340:	f003 0301 	and.w	r3, r3, #1
 8018344:	2b00      	cmp	r3, #0
 8018346:	d01f      	beq.n	8018388 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018348:	4b65      	ldr	r3, [pc, #404]	; (80184e0 <tcp_receive+0x888>)
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	899b      	ldrh	r3, [r3, #12]
 801834e:	b29b      	uxth	r3, r3
 8018350:	b21b      	sxth	r3, r3
 8018352:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018356:	b21c      	sxth	r4, r3
 8018358:	4b61      	ldr	r3, [pc, #388]	; (80184e0 <tcp_receive+0x888>)
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	899b      	ldrh	r3, [r3, #12]
 801835e:	b29b      	uxth	r3, r3
 8018360:	4618      	mov	r0, r3
 8018362:	f7fa fe2f 	bl	8012fc4 <lwip_htons>
 8018366:	4603      	mov	r3, r0
 8018368:	b2db      	uxtb	r3, r3
 801836a:	b29b      	uxth	r3, r3
 801836c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018370:	b29b      	uxth	r3, r3
 8018372:	4618      	mov	r0, r3
 8018374:	f7fa fe26 	bl	8012fc4 <lwip_htons>
 8018378:	4603      	mov	r3, r0
 801837a:	b21b      	sxth	r3, r3
 801837c:	4323      	orrs	r3, r4
 801837e:	b21a      	sxth	r2, r3
 8018380:	4b57      	ldr	r3, [pc, #348]	; (80184e0 <tcp_receive+0x888>)
 8018382:	68db      	ldr	r3, [r3, #12]
 8018384:	b292      	uxth	r2, r2
 8018386:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801838c:	4b54      	ldr	r3, [pc, #336]	; (80184e0 <tcp_receive+0x888>)
 801838e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018390:	4b53      	ldr	r3, [pc, #332]	; (80184e0 <tcp_receive+0x888>)
 8018392:	68db      	ldr	r3, [r3, #12]
 8018394:	899b      	ldrh	r3, [r3, #12]
 8018396:	b29b      	uxth	r3, r3
 8018398:	4618      	mov	r0, r3
 801839a:	f7fa fe13 	bl	8012fc4 <lwip_htons>
 801839e:	4603      	mov	r3, r0
 80183a0:	b2db      	uxtb	r3, r3
 80183a2:	f003 0302 	and.w	r3, r3, #2
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d005      	beq.n	80183b6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80183aa:	4b4d      	ldr	r3, [pc, #308]	; (80184e0 <tcp_receive+0x888>)
 80183ac:	891b      	ldrh	r3, [r3, #8]
 80183ae:	3b01      	subs	r3, #1
 80183b0:	b29a      	uxth	r2, r3
 80183b2:	4b4b      	ldr	r3, [pc, #300]	; (80184e0 <tcp_receive+0x888>)
 80183b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80183b6:	4b4a      	ldr	r3, [pc, #296]	; (80184e0 <tcp_receive+0x888>)
 80183b8:	685b      	ldr	r3, [r3, #4]
 80183ba:	4a49      	ldr	r2, [pc, #292]	; (80184e0 <tcp_receive+0x888>)
 80183bc:	8912      	ldrh	r2, [r2, #8]
 80183be:	4611      	mov	r1, r2
 80183c0:	4618      	mov	r0, r3
 80183c2:	f7fb ffc1 	bl	8014348 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80183c6:	4b46      	ldr	r3, [pc, #280]	; (80184e0 <tcp_receive+0x888>)
 80183c8:	891c      	ldrh	r4, [r3, #8]
 80183ca:	4b45      	ldr	r3, [pc, #276]	; (80184e0 <tcp_receive+0x888>)
 80183cc:	68db      	ldr	r3, [r3, #12]
 80183ce:	899b      	ldrh	r3, [r3, #12]
 80183d0:	b29b      	uxth	r3, r3
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7fa fdf6 	bl	8012fc4 <lwip_htons>
 80183d8:	4603      	mov	r3, r0
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	f003 0303 	and.w	r3, r3, #3
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d001      	beq.n	80183e8 <tcp_receive+0x790>
 80183e4:	2301      	movs	r3, #1
 80183e6:	e000      	b.n	80183ea <tcp_receive+0x792>
 80183e8:	2300      	movs	r3, #0
 80183ea:	4423      	add	r3, r4
 80183ec:	b29a      	uxth	r2, r3
 80183ee:	4b3d      	ldr	r3, [pc, #244]	; (80184e4 <tcp_receive+0x88c>)
 80183f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80183f2:	4b3c      	ldr	r3, [pc, #240]	; (80184e4 <tcp_receive+0x88c>)
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	461a      	mov	r2, r3
 80183f8:	4b38      	ldr	r3, [pc, #224]	; (80184dc <tcp_receive+0x884>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	441a      	add	r2, r3
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018402:	6879      	ldr	r1, [r7, #4]
 8018404:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018406:	440b      	add	r3, r1
 8018408:	429a      	cmp	r2, r3
 801840a:	d006      	beq.n	801841a <tcp_receive+0x7c2>
 801840c:	4b36      	ldr	r3, [pc, #216]	; (80184e8 <tcp_receive+0x890>)
 801840e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018412:	4936      	ldr	r1, [pc, #216]	; (80184ec <tcp_receive+0x894>)
 8018414:	4836      	ldr	r0, [pc, #216]	; (80184f0 <tcp_receive+0x898>)
 8018416:	f006 ff09 	bl	801f22c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801841e:	2b00      	cmp	r3, #0
 8018420:	f000 80e7 	beq.w	80185f2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018424:	4b2e      	ldr	r3, [pc, #184]	; (80184e0 <tcp_receive+0x888>)
 8018426:	68db      	ldr	r3, [r3, #12]
 8018428:	899b      	ldrh	r3, [r3, #12]
 801842a:	b29b      	uxth	r3, r3
 801842c:	4618      	mov	r0, r3
 801842e:	f7fa fdc9 	bl	8012fc4 <lwip_htons>
 8018432:	4603      	mov	r3, r0
 8018434:	b2db      	uxtb	r3, r3
 8018436:	f003 0301 	and.w	r3, r3, #1
 801843a:	2b00      	cmp	r3, #0
 801843c:	d010      	beq.n	8018460 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801843e:	e00a      	b.n	8018456 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018444:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018450:	68f8      	ldr	r0, [r7, #12]
 8018452:	f7fd fcc8 	bl	8015de6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801845a:	2b00      	cmp	r3, #0
 801845c:	d1f0      	bne.n	8018440 <tcp_receive+0x7e8>
 801845e:	e0c8      	b.n	80185f2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018464:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018466:	e052      	b.n	801850e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801846a:	68db      	ldr	r3, [r3, #12]
 801846c:	899b      	ldrh	r3, [r3, #12]
 801846e:	b29b      	uxth	r3, r3
 8018470:	4618      	mov	r0, r3
 8018472:	f7fa fda7 	bl	8012fc4 <lwip_htons>
 8018476:	4603      	mov	r3, r0
 8018478:	b2db      	uxtb	r3, r3
 801847a:	f003 0301 	and.w	r3, r3, #1
 801847e:	2b00      	cmp	r3, #0
 8018480:	d03d      	beq.n	80184fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018482:	4b17      	ldr	r3, [pc, #92]	; (80184e0 <tcp_receive+0x888>)
 8018484:	68db      	ldr	r3, [r3, #12]
 8018486:	899b      	ldrh	r3, [r3, #12]
 8018488:	b29b      	uxth	r3, r3
 801848a:	4618      	mov	r0, r3
 801848c:	f7fa fd9a 	bl	8012fc4 <lwip_htons>
 8018490:	4603      	mov	r3, r0
 8018492:	b2db      	uxtb	r3, r3
 8018494:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018498:	2b00      	cmp	r3, #0
 801849a:	d130      	bne.n	80184fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801849c:	4b10      	ldr	r3, [pc, #64]	; (80184e0 <tcp_receive+0x888>)
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	899b      	ldrh	r3, [r3, #12]
 80184a2:	b29c      	uxth	r4, r3
 80184a4:	2001      	movs	r0, #1
 80184a6:	f7fa fd8d 	bl	8012fc4 <lwip_htons>
 80184aa:	4603      	mov	r3, r0
 80184ac:	461a      	mov	r2, r3
 80184ae:	4b0c      	ldr	r3, [pc, #48]	; (80184e0 <tcp_receive+0x888>)
 80184b0:	68db      	ldr	r3, [r3, #12]
 80184b2:	4322      	orrs	r2, r4
 80184b4:	b292      	uxth	r2, r2
 80184b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80184b8:	4b09      	ldr	r3, [pc, #36]	; (80184e0 <tcp_receive+0x888>)
 80184ba:	891c      	ldrh	r4, [r3, #8]
 80184bc:	4b08      	ldr	r3, [pc, #32]	; (80184e0 <tcp_receive+0x888>)
 80184be:	68db      	ldr	r3, [r3, #12]
 80184c0:	899b      	ldrh	r3, [r3, #12]
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7fa fd7d 	bl	8012fc4 <lwip_htons>
 80184ca:	4603      	mov	r3, r0
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	f003 0303 	and.w	r3, r3, #3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00e      	beq.n	80184f4 <tcp_receive+0x89c>
 80184d6:	2301      	movs	r3, #1
 80184d8:	e00d      	b.n	80184f6 <tcp_receive+0x89e>
 80184da:	bf00      	nop
 80184dc:	20006e34 	.word	0x20006e34
 80184e0:	20006e14 	.word	0x20006e14
 80184e4:	20006e3e 	.word	0x20006e3e
 80184e8:	080254fc 	.word	0x080254fc
 80184ec:	080258a4 	.word	0x080258a4
 80184f0:	08025548 	.word	0x08025548
 80184f4:	2300      	movs	r3, #0
 80184f6:	4423      	add	r3, r4
 80184f8:	b29a      	uxth	r2, r3
 80184fa:	4b98      	ldr	r3, [pc, #608]	; (801875c <tcp_receive+0xb04>)
 80184fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80184fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018500:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018508:	6938      	ldr	r0, [r7, #16]
 801850a:	f7fd fc6c 	bl	8015de6 <tcp_seg_free>
            while (next &&
 801850e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018510:	2b00      	cmp	r3, #0
 8018512:	d00e      	beq.n	8018532 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018514:	4b91      	ldr	r3, [pc, #580]	; (801875c <tcp_receive+0xb04>)
 8018516:	881b      	ldrh	r3, [r3, #0]
 8018518:	461a      	mov	r2, r3
 801851a:	4b91      	ldr	r3, [pc, #580]	; (8018760 <tcp_receive+0xb08>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	441a      	add	r2, r3
 8018520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	685b      	ldr	r3, [r3, #4]
 8018526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018528:	8909      	ldrh	r1, [r1, #8]
 801852a:	440b      	add	r3, r1
 801852c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801852e:	2b00      	cmp	r3, #0
 8018530:	da9a      	bge.n	8018468 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018534:	2b00      	cmp	r3, #0
 8018536:	d059      	beq.n	80185ec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018538:	4b88      	ldr	r3, [pc, #544]	; (801875c <tcp_receive+0xb04>)
 801853a:	881b      	ldrh	r3, [r3, #0]
 801853c:	461a      	mov	r2, r3
 801853e:	4b88      	ldr	r3, [pc, #544]	; (8018760 <tcp_receive+0xb08>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	441a      	add	r2, r3
 8018544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018546:	68db      	ldr	r3, [r3, #12]
 8018548:	685b      	ldr	r3, [r3, #4]
 801854a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801854c:	2b00      	cmp	r3, #0
 801854e:	dd4d      	ble.n	80185ec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	b29a      	uxth	r2, r3
 8018558:	4b81      	ldr	r3, [pc, #516]	; (8018760 <tcp_receive+0xb08>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	b29b      	uxth	r3, r3
 801855e:	1ad3      	subs	r3, r2, r3
 8018560:	b29a      	uxth	r2, r3
 8018562:	4b80      	ldr	r3, [pc, #512]	; (8018764 <tcp_receive+0xb0c>)
 8018564:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018566:	4b7f      	ldr	r3, [pc, #508]	; (8018764 <tcp_receive+0xb0c>)
 8018568:	68db      	ldr	r3, [r3, #12]
 801856a:	899b      	ldrh	r3, [r3, #12]
 801856c:	b29b      	uxth	r3, r3
 801856e:	4618      	mov	r0, r3
 8018570:	f7fa fd28 	bl	8012fc4 <lwip_htons>
 8018574:	4603      	mov	r3, r0
 8018576:	b2db      	uxtb	r3, r3
 8018578:	f003 0302 	and.w	r3, r3, #2
 801857c:	2b00      	cmp	r3, #0
 801857e:	d005      	beq.n	801858c <tcp_receive+0x934>
                inseg.len -= 1;
 8018580:	4b78      	ldr	r3, [pc, #480]	; (8018764 <tcp_receive+0xb0c>)
 8018582:	891b      	ldrh	r3, [r3, #8]
 8018584:	3b01      	subs	r3, #1
 8018586:	b29a      	uxth	r2, r3
 8018588:	4b76      	ldr	r3, [pc, #472]	; (8018764 <tcp_receive+0xb0c>)
 801858a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801858c:	4b75      	ldr	r3, [pc, #468]	; (8018764 <tcp_receive+0xb0c>)
 801858e:	685b      	ldr	r3, [r3, #4]
 8018590:	4a74      	ldr	r2, [pc, #464]	; (8018764 <tcp_receive+0xb0c>)
 8018592:	8912      	ldrh	r2, [r2, #8]
 8018594:	4611      	mov	r1, r2
 8018596:	4618      	mov	r0, r3
 8018598:	f7fb fed6 	bl	8014348 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801859c:	4b71      	ldr	r3, [pc, #452]	; (8018764 <tcp_receive+0xb0c>)
 801859e:	891c      	ldrh	r4, [r3, #8]
 80185a0:	4b70      	ldr	r3, [pc, #448]	; (8018764 <tcp_receive+0xb0c>)
 80185a2:	68db      	ldr	r3, [r3, #12]
 80185a4:	899b      	ldrh	r3, [r3, #12]
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	4618      	mov	r0, r3
 80185aa:	f7fa fd0b 	bl	8012fc4 <lwip_htons>
 80185ae:	4603      	mov	r3, r0
 80185b0:	b2db      	uxtb	r3, r3
 80185b2:	f003 0303 	and.w	r3, r3, #3
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d001      	beq.n	80185be <tcp_receive+0x966>
 80185ba:	2301      	movs	r3, #1
 80185bc:	e000      	b.n	80185c0 <tcp_receive+0x968>
 80185be:	2300      	movs	r3, #0
 80185c0:	4423      	add	r3, r4
 80185c2:	b29a      	uxth	r2, r3
 80185c4:	4b65      	ldr	r3, [pc, #404]	; (801875c <tcp_receive+0xb04>)
 80185c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80185c8:	4b64      	ldr	r3, [pc, #400]	; (801875c <tcp_receive+0xb04>)
 80185ca:	881b      	ldrh	r3, [r3, #0]
 80185cc:	461a      	mov	r2, r3
 80185ce:	4b64      	ldr	r3, [pc, #400]	; (8018760 <tcp_receive+0xb08>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	441a      	add	r2, r3
 80185d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185d6:	68db      	ldr	r3, [r3, #12]
 80185d8:	685b      	ldr	r3, [r3, #4]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d006      	beq.n	80185ec <tcp_receive+0x994>
 80185de:	4b62      	ldr	r3, [pc, #392]	; (8018768 <tcp_receive+0xb10>)
 80185e0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80185e4:	4961      	ldr	r1, [pc, #388]	; (801876c <tcp_receive+0xb14>)
 80185e6:	4862      	ldr	r0, [pc, #392]	; (8018770 <tcp_receive+0xb18>)
 80185e8:	f006 fe20 	bl	801f22c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80185f0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80185f2:	4b5a      	ldr	r3, [pc, #360]	; (801875c <tcp_receive+0xb04>)
 80185f4:	881b      	ldrh	r3, [r3, #0]
 80185f6:	461a      	mov	r2, r3
 80185f8:	4b59      	ldr	r3, [pc, #356]	; (8018760 <tcp_receive+0xb08>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	441a      	add	r2, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018606:	4b55      	ldr	r3, [pc, #340]	; (801875c <tcp_receive+0xb04>)
 8018608:	881b      	ldrh	r3, [r3, #0]
 801860a:	429a      	cmp	r2, r3
 801860c:	d206      	bcs.n	801861c <tcp_receive+0x9c4>
 801860e:	4b56      	ldr	r3, [pc, #344]	; (8018768 <tcp_receive+0xb10>)
 8018610:	f240 6207 	movw	r2, #1543	; 0x607
 8018614:	4957      	ldr	r1, [pc, #348]	; (8018774 <tcp_receive+0xb1c>)
 8018616:	4856      	ldr	r0, [pc, #344]	; (8018770 <tcp_receive+0xb18>)
 8018618:	f006 fe08 	bl	801f22c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018620:	4b4e      	ldr	r3, [pc, #312]	; (801875c <tcp_receive+0xb04>)
 8018622:	881b      	ldrh	r3, [r3, #0]
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	b29a      	uxth	r2, r3
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801862c:	6878      	ldr	r0, [r7, #4]
 801862e:	f7fc feb5 	bl	801539c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018632:	4b4c      	ldr	r3, [pc, #304]	; (8018764 <tcp_receive+0xb0c>)
 8018634:	685b      	ldr	r3, [r3, #4]
 8018636:	891b      	ldrh	r3, [r3, #8]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d006      	beq.n	801864a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801863c:	4b49      	ldr	r3, [pc, #292]	; (8018764 <tcp_receive+0xb0c>)
 801863e:	685b      	ldr	r3, [r3, #4]
 8018640:	4a4d      	ldr	r2, [pc, #308]	; (8018778 <tcp_receive+0xb20>)
 8018642:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018644:	4b47      	ldr	r3, [pc, #284]	; (8018764 <tcp_receive+0xb0c>)
 8018646:	2200      	movs	r2, #0
 8018648:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801864a:	4b46      	ldr	r3, [pc, #280]	; (8018764 <tcp_receive+0xb0c>)
 801864c:	68db      	ldr	r3, [r3, #12]
 801864e:	899b      	ldrh	r3, [r3, #12]
 8018650:	b29b      	uxth	r3, r3
 8018652:	4618      	mov	r0, r3
 8018654:	f7fa fcb6 	bl	8012fc4 <lwip_htons>
 8018658:	4603      	mov	r3, r0
 801865a:	b2db      	uxtb	r3, r3
 801865c:	f003 0301 	and.w	r3, r3, #1
 8018660:	2b00      	cmp	r3, #0
 8018662:	f000 80b8 	beq.w	80187d6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018666:	4b45      	ldr	r3, [pc, #276]	; (801877c <tcp_receive+0xb24>)
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	f043 0320 	orr.w	r3, r3, #32
 801866e:	b2da      	uxtb	r2, r3
 8018670:	4b42      	ldr	r3, [pc, #264]	; (801877c <tcp_receive+0xb24>)
 8018672:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018674:	e0af      	b.n	80187d6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801867a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018680:	68db      	ldr	r3, [r3, #12]
 8018682:	685b      	ldr	r3, [r3, #4]
 8018684:	4a36      	ldr	r2, [pc, #216]	; (8018760 <tcp_receive+0xb08>)
 8018686:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	891b      	ldrh	r3, [r3, #8]
 801868c:	461c      	mov	r4, r3
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	68db      	ldr	r3, [r3, #12]
 8018692:	899b      	ldrh	r3, [r3, #12]
 8018694:	b29b      	uxth	r3, r3
 8018696:	4618      	mov	r0, r3
 8018698:	f7fa fc94 	bl	8012fc4 <lwip_htons>
 801869c:	4603      	mov	r3, r0
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	f003 0303 	and.w	r3, r3, #3
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d001      	beq.n	80186ac <tcp_receive+0xa54>
 80186a8:	2301      	movs	r3, #1
 80186aa:	e000      	b.n	80186ae <tcp_receive+0xa56>
 80186ac:	2300      	movs	r3, #0
 80186ae:	191a      	adds	r2, r3, r4
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186b4:	441a      	add	r2, r3
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80186be:	461c      	mov	r4, r3
 80186c0:	68bb      	ldr	r3, [r7, #8]
 80186c2:	891b      	ldrh	r3, [r3, #8]
 80186c4:	461d      	mov	r5, r3
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	68db      	ldr	r3, [r3, #12]
 80186ca:	899b      	ldrh	r3, [r3, #12]
 80186cc:	b29b      	uxth	r3, r3
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7fa fc78 	bl	8012fc4 <lwip_htons>
 80186d4:	4603      	mov	r3, r0
 80186d6:	b2db      	uxtb	r3, r3
 80186d8:	f003 0303 	and.w	r3, r3, #3
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d001      	beq.n	80186e4 <tcp_receive+0xa8c>
 80186e0:	2301      	movs	r3, #1
 80186e2:	e000      	b.n	80186e6 <tcp_receive+0xa8e>
 80186e4:	2300      	movs	r3, #0
 80186e6:	442b      	add	r3, r5
 80186e8:	429c      	cmp	r4, r3
 80186ea:	d206      	bcs.n	80186fa <tcp_receive+0xaa2>
 80186ec:	4b1e      	ldr	r3, [pc, #120]	; (8018768 <tcp_receive+0xb10>)
 80186ee:	f240 622b 	movw	r2, #1579	; 0x62b
 80186f2:	4923      	ldr	r1, [pc, #140]	; (8018780 <tcp_receive+0xb28>)
 80186f4:	481e      	ldr	r0, [pc, #120]	; (8018770 <tcp_receive+0xb18>)
 80186f6:	f006 fd99 	bl	801f22c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80186fa:	68bb      	ldr	r3, [r7, #8]
 80186fc:	891b      	ldrh	r3, [r3, #8]
 80186fe:	461c      	mov	r4, r3
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	68db      	ldr	r3, [r3, #12]
 8018704:	899b      	ldrh	r3, [r3, #12]
 8018706:	b29b      	uxth	r3, r3
 8018708:	4618      	mov	r0, r3
 801870a:	f7fa fc5b 	bl	8012fc4 <lwip_htons>
 801870e:	4603      	mov	r3, r0
 8018710:	b2db      	uxtb	r3, r3
 8018712:	f003 0303 	and.w	r3, r3, #3
 8018716:	2b00      	cmp	r3, #0
 8018718:	d001      	beq.n	801871e <tcp_receive+0xac6>
 801871a:	2301      	movs	r3, #1
 801871c:	e000      	b.n	8018720 <tcp_receive+0xac8>
 801871e:	2300      	movs	r3, #0
 8018720:	1919      	adds	r1, r3, r4
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018726:	b28b      	uxth	r3, r1
 8018728:	1ad3      	subs	r3, r2, r3
 801872a:	b29a      	uxth	r2, r3
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f7fc fe33 	bl	801539c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018736:	68bb      	ldr	r3, [r7, #8]
 8018738:	685b      	ldr	r3, [r3, #4]
 801873a:	891b      	ldrh	r3, [r3, #8]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d028      	beq.n	8018792 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018740:	4b0d      	ldr	r3, [pc, #52]	; (8018778 <tcp_receive+0xb20>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d01d      	beq.n	8018784 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018748:	4b0b      	ldr	r3, [pc, #44]	; (8018778 <tcp_receive+0xb20>)
 801874a:	681a      	ldr	r2, [r3, #0]
 801874c:	68bb      	ldr	r3, [r7, #8]
 801874e:	685b      	ldr	r3, [r3, #4]
 8018750:	4619      	mov	r1, r3
 8018752:	4610      	mov	r0, r2
 8018754:	f7fc f84c 	bl	80147f0 <pbuf_cat>
 8018758:	e018      	b.n	801878c <tcp_receive+0xb34>
 801875a:	bf00      	nop
 801875c:	20006e3e 	.word	0x20006e3e
 8018760:	20006e34 	.word	0x20006e34
 8018764:	20006e14 	.word	0x20006e14
 8018768:	080254fc 	.word	0x080254fc
 801876c:	080258dc 	.word	0x080258dc
 8018770:	08025548 	.word	0x08025548
 8018774:	08025918 	.word	0x08025918
 8018778:	20006e44 	.word	0x20006e44
 801877c:	20006e41 	.word	0x20006e41
 8018780:	08025938 	.word	0x08025938
            } else {
              recv_data = cseg->p;
 8018784:	68bb      	ldr	r3, [r7, #8]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	4a70      	ldr	r2, [pc, #448]	; (801894c <tcp_receive+0xcf4>)
 801878a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	2200      	movs	r2, #0
 8018790:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	68db      	ldr	r3, [r3, #12]
 8018796:	899b      	ldrh	r3, [r3, #12]
 8018798:	b29b      	uxth	r3, r3
 801879a:	4618      	mov	r0, r3
 801879c:	f7fa fc12 	bl	8012fc4 <lwip_htons>
 80187a0:	4603      	mov	r3, r0
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	f003 0301 	and.w	r3, r3, #1
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d00d      	beq.n	80187c8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80187ac:	4b68      	ldr	r3, [pc, #416]	; (8018950 <tcp_receive+0xcf8>)
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	f043 0320 	orr.w	r3, r3, #32
 80187b4:	b2da      	uxtb	r2, r3
 80187b6:	4b66      	ldr	r3, [pc, #408]	; (8018950 <tcp_receive+0xcf8>)
 80187b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	7d1b      	ldrb	r3, [r3, #20]
 80187be:	2b04      	cmp	r3, #4
 80187c0:	d102      	bne.n	80187c8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	2207      	movs	r2, #7
 80187c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	681a      	ldr	r2, [r3, #0]
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80187d0:	68b8      	ldr	r0, [r7, #8]
 80187d2:	f7fd fb08 	bl	8015de6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d008      	beq.n	80187f0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187e2:	68db      	ldr	r3, [r3, #12]
 80187e4:	685a      	ldr	r2, [r3, #4]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80187ea:	429a      	cmp	r2, r3
 80187ec:	f43f af43 	beq.w	8018676 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	8b5b      	ldrh	r3, [r3, #26]
 80187f4:	f003 0301 	and.w	r3, r3, #1
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d00e      	beq.n	801881a <tcp_receive+0xbc2>
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	8b5b      	ldrh	r3, [r3, #26]
 8018800:	f023 0301 	bic.w	r3, r3, #1
 8018804:	b29a      	uxth	r2, r3
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	835a      	strh	r2, [r3, #26]
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	8b5b      	ldrh	r3, [r3, #26]
 801880e:	f043 0302 	orr.w	r3, r3, #2
 8018812:	b29a      	uxth	r2, r3
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018818:	e188      	b.n	8018b2c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	8b5b      	ldrh	r3, [r3, #26]
 801881e:	f043 0301 	orr.w	r3, r3, #1
 8018822:	b29a      	uxth	r2, r3
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018828:	e180      	b.n	8018b2c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801882e:	2b00      	cmp	r3, #0
 8018830:	d106      	bne.n	8018840 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018832:	4848      	ldr	r0, [pc, #288]	; (8018954 <tcp_receive+0xcfc>)
 8018834:	f7fd faf0 	bl	8015e18 <tcp_seg_copy>
 8018838:	4602      	mov	r2, r0
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	675a      	str	r2, [r3, #116]	; 0x74
 801883e:	e16d      	b.n	8018b1c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018840:	2300      	movs	r3, #0
 8018842:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018848:	63bb      	str	r3, [r7, #56]	; 0x38
 801884a:	e157      	b.n	8018afc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	685a      	ldr	r2, [r3, #4]
 8018852:	4b41      	ldr	r3, [pc, #260]	; (8018958 <tcp_receive+0xd00>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	429a      	cmp	r2, r3
 8018858:	d11d      	bne.n	8018896 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801885a:	4b3e      	ldr	r3, [pc, #248]	; (8018954 <tcp_receive+0xcfc>)
 801885c:	891a      	ldrh	r2, [r3, #8]
 801885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018860:	891b      	ldrh	r3, [r3, #8]
 8018862:	429a      	cmp	r2, r3
 8018864:	f240 814f 	bls.w	8018b06 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018868:	483a      	ldr	r0, [pc, #232]	; (8018954 <tcp_receive+0xcfc>)
 801886a:	f7fd fad5 	bl	8015e18 <tcp_seg_copy>
 801886e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018870:	697b      	ldr	r3, [r7, #20]
 8018872:	2b00      	cmp	r3, #0
 8018874:	f000 8149 	beq.w	8018b0a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8018878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801887a:	2b00      	cmp	r3, #0
 801887c:	d003      	beq.n	8018886 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018880:	697a      	ldr	r2, [r7, #20]
 8018882:	601a      	str	r2, [r3, #0]
 8018884:	e002      	b.n	801888c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	697a      	ldr	r2, [r7, #20]
 801888a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801888c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801888e:	6978      	ldr	r0, [r7, #20]
 8018890:	f7ff f8de 	bl	8017a50 <tcp_oos_insert_segment>
                }
                break;
 8018894:	e139      	b.n	8018b0a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018898:	2b00      	cmp	r3, #0
 801889a:	d117      	bne.n	80188cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801889c:	4b2e      	ldr	r3, [pc, #184]	; (8018958 <tcp_receive+0xd00>)
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188a2:	68db      	ldr	r3, [r3, #12]
 80188a4:	685b      	ldr	r3, [r3, #4]
 80188a6:	1ad3      	subs	r3, r2, r3
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	da57      	bge.n	801895c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80188ac:	4829      	ldr	r0, [pc, #164]	; (8018954 <tcp_receive+0xcfc>)
 80188ae:	f7fd fab3 	bl	8015e18 <tcp_seg_copy>
 80188b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80188b4:	69bb      	ldr	r3, [r7, #24]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	f000 8129 	beq.w	8018b0e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	69ba      	ldr	r2, [r7, #24]
 80188c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80188c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80188c4:	69b8      	ldr	r0, [r7, #24]
 80188c6:	f7ff f8c3 	bl	8017a50 <tcp_oos_insert_segment>
                  }
                  break;
 80188ca:	e120      	b.n	8018b0e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80188cc:	4b22      	ldr	r3, [pc, #136]	; (8018958 <tcp_receive+0xd00>)
 80188ce:	681a      	ldr	r2, [r3, #0]
 80188d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188d2:	68db      	ldr	r3, [r3, #12]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	1ad3      	subs	r3, r2, r3
 80188d8:	3b01      	subs	r3, #1
 80188da:	2b00      	cmp	r3, #0
 80188dc:	db3e      	blt.n	801895c <tcp_receive+0xd04>
 80188de:	4b1e      	ldr	r3, [pc, #120]	; (8018958 <tcp_receive+0xd00>)
 80188e0:	681a      	ldr	r2, [r3, #0]
 80188e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188e4:	68db      	ldr	r3, [r3, #12]
 80188e6:	685b      	ldr	r3, [r3, #4]
 80188e8:	1ad3      	subs	r3, r2, r3
 80188ea:	3301      	adds	r3, #1
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	dc35      	bgt.n	801895c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80188f0:	4818      	ldr	r0, [pc, #96]	; (8018954 <tcp_receive+0xcfc>)
 80188f2:	f7fd fa91 	bl	8015e18 <tcp_seg_copy>
 80188f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80188f8:	69fb      	ldr	r3, [r7, #28]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	f000 8109 	beq.w	8018b12 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018902:	68db      	ldr	r3, [r3, #12]
 8018904:	685b      	ldr	r3, [r3, #4]
 8018906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018908:	8912      	ldrh	r2, [r2, #8]
 801890a:	441a      	add	r2, r3
 801890c:	4b12      	ldr	r3, [pc, #72]	; (8018958 <tcp_receive+0xd00>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	1ad3      	subs	r3, r2, r3
 8018912:	2b00      	cmp	r3, #0
 8018914:	dd12      	ble.n	801893c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018916:	4b10      	ldr	r3, [pc, #64]	; (8018958 <tcp_receive+0xd00>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	b29a      	uxth	r2, r3
 801891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801891e:	68db      	ldr	r3, [r3, #12]
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	b29b      	uxth	r3, r3
 8018924:	1ad3      	subs	r3, r2, r3
 8018926:	b29a      	uxth	r2, r3
 8018928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801892a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801892c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801892e:	685a      	ldr	r2, [r3, #4]
 8018930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018932:	891b      	ldrh	r3, [r3, #8]
 8018934:	4619      	mov	r1, r3
 8018936:	4610      	mov	r0, r2
 8018938:	f7fb fd06 	bl	8014348 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801893e:	69fa      	ldr	r2, [r7, #28]
 8018940:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018944:	69f8      	ldr	r0, [r7, #28]
 8018946:	f7ff f883 	bl	8017a50 <tcp_oos_insert_segment>
                  }
                  break;
 801894a:	e0e2      	b.n	8018b12 <tcp_receive+0xeba>
 801894c:	20006e44 	.word	0x20006e44
 8018950:	20006e41 	.word	0x20006e41
 8018954:	20006e14 	.word	0x20006e14
 8018958:	20006e34 	.word	0x20006e34
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801895e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2b00      	cmp	r3, #0
 8018966:	f040 80c6 	bne.w	8018af6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801896a:	4b80      	ldr	r3, [pc, #512]	; (8018b6c <tcp_receive+0xf14>)
 801896c:	681a      	ldr	r2, [r3, #0]
 801896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	685b      	ldr	r3, [r3, #4]
 8018974:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018976:	2b00      	cmp	r3, #0
 8018978:	f340 80bd 	ble.w	8018af6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	899b      	ldrh	r3, [r3, #12]
 8018982:	b29b      	uxth	r3, r3
 8018984:	4618      	mov	r0, r3
 8018986:	f7fa fb1d 	bl	8012fc4 <lwip_htons>
 801898a:	4603      	mov	r3, r0
 801898c:	b2db      	uxtb	r3, r3
 801898e:	f003 0301 	and.w	r3, r3, #1
 8018992:	2b00      	cmp	r3, #0
 8018994:	f040 80bf 	bne.w	8018b16 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018998:	4875      	ldr	r0, [pc, #468]	; (8018b70 <tcp_receive+0xf18>)
 801899a:	f7fd fa3d 	bl	8015e18 <tcp_seg_copy>
 801899e:	4602      	mov	r2, r0
 80189a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80189a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	f000 80b6 	beq.w	8018b1a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80189ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b0:	68db      	ldr	r3, [r3, #12]
 80189b2:	685b      	ldr	r3, [r3, #4]
 80189b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189b6:	8912      	ldrh	r2, [r2, #8]
 80189b8:	441a      	add	r2, r3
 80189ba:	4b6c      	ldr	r3, [pc, #432]	; (8018b6c <tcp_receive+0xf14>)
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	1ad3      	subs	r3, r2, r3
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	dd12      	ble.n	80189ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80189c4:	4b69      	ldr	r3, [pc, #420]	; (8018b6c <tcp_receive+0xf14>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189cc:	68db      	ldr	r3, [r3, #12]
 80189ce:	685b      	ldr	r3, [r3, #4]
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	1ad3      	subs	r3, r2, r3
 80189d4:	b29a      	uxth	r2, r3
 80189d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80189da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189dc:	685a      	ldr	r2, [r3, #4]
 80189de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e0:	891b      	ldrh	r3, [r3, #8]
 80189e2:	4619      	mov	r1, r3
 80189e4:	4610      	mov	r0, r2
 80189e6:	f7fb fcaf 	bl	8014348 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80189ea:	4b62      	ldr	r3, [pc, #392]	; (8018b74 <tcp_receive+0xf1c>)
 80189ec:	881b      	ldrh	r3, [r3, #0]
 80189ee:	461a      	mov	r2, r3
 80189f0:	4b5e      	ldr	r3, [pc, #376]	; (8018b6c <tcp_receive+0xf14>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	441a      	add	r2, r3
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189fa:	6879      	ldr	r1, [r7, #4]
 80189fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80189fe:	440b      	add	r3, r1
 8018a00:	1ad3      	subs	r3, r2, r3
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	f340 8089 	ble.w	8018b1a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	68db      	ldr	r3, [r3, #12]
 8018a0e:	899b      	ldrh	r3, [r3, #12]
 8018a10:	b29b      	uxth	r3, r3
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7fa fad6 	bl	8012fc4 <lwip_htons>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	b2db      	uxtb	r3, r3
 8018a1c:	f003 0301 	and.w	r3, r3, #1
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d022      	beq.n	8018a6a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	899b      	ldrh	r3, [r3, #12]
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	b21b      	sxth	r3, r3
 8018a30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018a34:	b21c      	sxth	r4, r3
 8018a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	68db      	ldr	r3, [r3, #12]
 8018a3c:	899b      	ldrh	r3, [r3, #12]
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7fa fabf 	bl	8012fc4 <lwip_htons>
 8018a46:	4603      	mov	r3, r0
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	b29b      	uxth	r3, r3
 8018a4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7fa fab6 	bl	8012fc4 <lwip_htons>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	b21b      	sxth	r3, r3
 8018a5c:	4323      	orrs	r3, r4
 8018a5e:	b21a      	sxth	r2, r3
 8018a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	68db      	ldr	r3, [r3, #12]
 8018a66:	b292      	uxth	r2, r2
 8018a68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6e:	b29a      	uxth	r2, r3
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a74:	4413      	add	r3, r2
 8018a76:	b299      	uxth	r1, r3
 8018a78:	4b3c      	ldr	r3, [pc, #240]	; (8018b6c <tcp_receive+0xf14>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	b29a      	uxth	r2, r3
 8018a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	1a8a      	subs	r2, r1, r2
 8018a84:	b292      	uxth	r2, r2
 8018a86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	685a      	ldr	r2, [r3, #4]
 8018a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	891b      	ldrh	r3, [r3, #8]
 8018a94:	4619      	mov	r1, r3
 8018a96:	4610      	mov	r0, r2
 8018a98:	f7fb fc56 	bl	8014348 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	891c      	ldrh	r4, [r3, #8]
 8018aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	899b      	ldrh	r3, [r3, #12]
 8018aaa:	b29b      	uxth	r3, r3
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7fa fa89 	bl	8012fc4 <lwip_htons>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	f003 0303 	and.w	r3, r3, #3
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d001      	beq.n	8018ac2 <tcp_receive+0xe6a>
 8018abe:	2301      	movs	r3, #1
 8018ac0:	e000      	b.n	8018ac4 <tcp_receive+0xe6c>
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	4423      	add	r3, r4
 8018ac6:	b29a      	uxth	r2, r3
 8018ac8:	4b2a      	ldr	r3, [pc, #168]	; (8018b74 <tcp_receive+0xf1c>)
 8018aca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018acc:	4b29      	ldr	r3, [pc, #164]	; (8018b74 <tcp_receive+0xf1c>)
 8018ace:	881b      	ldrh	r3, [r3, #0]
 8018ad0:	461a      	mov	r2, r3
 8018ad2:	4b26      	ldr	r3, [pc, #152]	; (8018b6c <tcp_receive+0xf14>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	441a      	add	r2, r3
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018adc:	6879      	ldr	r1, [r7, #4]
 8018ade:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018ae0:	440b      	add	r3, r1
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d019      	beq.n	8018b1a <tcp_receive+0xec2>
 8018ae6:	4b24      	ldr	r3, [pc, #144]	; (8018b78 <tcp_receive+0xf20>)
 8018ae8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018aec:	4923      	ldr	r1, [pc, #140]	; (8018b7c <tcp_receive+0xf24>)
 8018aee:	4824      	ldr	r0, [pc, #144]	; (8018b80 <tcp_receive+0xf28>)
 8018af0:	f006 fb9c 	bl	801f22c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018af4:	e011      	b.n	8018b1a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8018afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	f47f aea4 	bne.w	801884c <tcp_receive+0xbf4>
 8018b04:	e00a      	b.n	8018b1c <tcp_receive+0xec4>
                break;
 8018b06:	bf00      	nop
 8018b08:	e008      	b.n	8018b1c <tcp_receive+0xec4>
                break;
 8018b0a:	bf00      	nop
 8018b0c:	e006      	b.n	8018b1c <tcp_receive+0xec4>
                  break;
 8018b0e:	bf00      	nop
 8018b10:	e004      	b.n	8018b1c <tcp_receive+0xec4>
                  break;
 8018b12:	bf00      	nop
 8018b14:	e002      	b.n	8018b1c <tcp_receive+0xec4>
                  break;
 8018b16:	bf00      	nop
 8018b18:	e000      	b.n	8018b1c <tcp_receive+0xec4>
                break;
 8018b1a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018b1c:	6878      	ldr	r0, [r7, #4]
 8018b1e:	f001 fe8b 	bl	801a838 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018b22:	e003      	b.n	8018b2c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018b24:	6878      	ldr	r0, [r7, #4]
 8018b26:	f001 fe87 	bl	801a838 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018b2a:	e01a      	b.n	8018b62 <tcp_receive+0xf0a>
 8018b2c:	e019      	b.n	8018b62 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018b2e:	4b0f      	ldr	r3, [pc, #60]	; (8018b6c <tcp_receive+0xf14>)
 8018b30:	681a      	ldr	r2, [r3, #0]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b36:	1ad3      	subs	r3, r2, r3
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	db0a      	blt.n	8018b52 <tcp_receive+0xefa>
 8018b3c:	4b0b      	ldr	r3, [pc, #44]	; (8018b6c <tcp_receive+0xf14>)
 8018b3e:	681a      	ldr	r2, [r3, #0]
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b44:	6879      	ldr	r1, [r7, #4]
 8018b46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b48:	440b      	add	r3, r1
 8018b4a:	1ad3      	subs	r3, r2, r3
 8018b4c:	3301      	adds	r3, #1
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	dd07      	ble.n	8018b62 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	8b5b      	ldrh	r3, [r3, #26]
 8018b56:	f043 0302 	orr.w	r3, r3, #2
 8018b5a:	b29a      	uxth	r2, r3
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018b60:	e7ff      	b.n	8018b62 <tcp_receive+0xf0a>
 8018b62:	bf00      	nop
 8018b64:	3750      	adds	r7, #80	; 0x50
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bdb0      	pop	{r4, r5, r7, pc}
 8018b6a:	bf00      	nop
 8018b6c:	20006e34 	.word	0x20006e34
 8018b70:	20006e14 	.word	0x20006e14
 8018b74:	20006e3e 	.word	0x20006e3e
 8018b78:	080254fc 	.word	0x080254fc
 8018b7c:	080258a4 	.word	0x080258a4
 8018b80:	08025548 	.word	0x08025548

08018b84 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018b8a:	4b15      	ldr	r3, [pc, #84]	; (8018be0 <tcp_get_next_optbyte+0x5c>)
 8018b8c:	881b      	ldrh	r3, [r3, #0]
 8018b8e:	1c5a      	adds	r2, r3, #1
 8018b90:	b291      	uxth	r1, r2
 8018b92:	4a13      	ldr	r2, [pc, #76]	; (8018be0 <tcp_get_next_optbyte+0x5c>)
 8018b94:	8011      	strh	r1, [r2, #0]
 8018b96:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018b98:	4b12      	ldr	r3, [pc, #72]	; (8018be4 <tcp_get_next_optbyte+0x60>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d004      	beq.n	8018baa <tcp_get_next_optbyte+0x26>
 8018ba0:	4b11      	ldr	r3, [pc, #68]	; (8018be8 <tcp_get_next_optbyte+0x64>)
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	88fa      	ldrh	r2, [r7, #6]
 8018ba6:	429a      	cmp	r2, r3
 8018ba8:	d208      	bcs.n	8018bbc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018baa:	4b10      	ldr	r3, [pc, #64]	; (8018bec <tcp_get_next_optbyte+0x68>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	3314      	adds	r3, #20
 8018bb0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018bb2:	88fb      	ldrh	r3, [r7, #6]
 8018bb4:	683a      	ldr	r2, [r7, #0]
 8018bb6:	4413      	add	r3, r2
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	e00b      	b.n	8018bd4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018bbc:	88fb      	ldrh	r3, [r7, #6]
 8018bbe:	b2da      	uxtb	r2, r3
 8018bc0:	4b09      	ldr	r3, [pc, #36]	; (8018be8 <tcp_get_next_optbyte+0x64>)
 8018bc2:	881b      	ldrh	r3, [r3, #0]
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	1ad3      	subs	r3, r2, r3
 8018bc8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018bca:	4b06      	ldr	r3, [pc, #24]	; (8018be4 <tcp_get_next_optbyte+0x60>)
 8018bcc:	681a      	ldr	r2, [r3, #0]
 8018bce:	797b      	ldrb	r3, [r7, #5]
 8018bd0:	4413      	add	r3, r2
 8018bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	370c      	adds	r7, #12
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bde:	4770      	bx	lr
 8018be0:	20006e30 	.word	0x20006e30
 8018be4:	20006e2c 	.word	0x20006e2c
 8018be8:	20006e2a 	.word	0x20006e2a
 8018bec:	20006e24 	.word	0x20006e24

08018bf0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d106      	bne.n	8018c0c <tcp_parseopt+0x1c>
 8018bfe:	4b32      	ldr	r3, [pc, #200]	; (8018cc8 <tcp_parseopt+0xd8>)
 8018c00:	f240 727d 	movw	r2, #1917	; 0x77d
 8018c04:	4931      	ldr	r1, [pc, #196]	; (8018ccc <tcp_parseopt+0xdc>)
 8018c06:	4832      	ldr	r0, [pc, #200]	; (8018cd0 <tcp_parseopt+0xe0>)
 8018c08:	f006 fb10 	bl	801f22c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018c0c:	4b31      	ldr	r3, [pc, #196]	; (8018cd4 <tcp_parseopt+0xe4>)
 8018c0e:	881b      	ldrh	r3, [r3, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d055      	beq.n	8018cc0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c14:	4b30      	ldr	r3, [pc, #192]	; (8018cd8 <tcp_parseopt+0xe8>)
 8018c16:	2200      	movs	r2, #0
 8018c18:	801a      	strh	r2, [r3, #0]
 8018c1a:	e045      	b.n	8018ca8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018c1c:	f7ff ffb2 	bl	8018b84 <tcp_get_next_optbyte>
 8018c20:	4603      	mov	r3, r0
 8018c22:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
 8018c26:	2b02      	cmp	r3, #2
 8018c28:	d006      	beq.n	8018c38 <tcp_parseopt+0x48>
 8018c2a:	2b02      	cmp	r3, #2
 8018c2c:	dc2b      	bgt.n	8018c86 <tcp_parseopt+0x96>
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d041      	beq.n	8018cb6 <tcp_parseopt+0xc6>
 8018c32:	2b01      	cmp	r3, #1
 8018c34:	d127      	bne.n	8018c86 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018c36:	e037      	b.n	8018ca8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018c38:	f7ff ffa4 	bl	8018b84 <tcp_get_next_optbyte>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	2b04      	cmp	r3, #4
 8018c40:	d13b      	bne.n	8018cba <tcp_parseopt+0xca>
 8018c42:	4b25      	ldr	r3, [pc, #148]	; (8018cd8 <tcp_parseopt+0xe8>)
 8018c44:	881b      	ldrh	r3, [r3, #0]
 8018c46:	3301      	adds	r3, #1
 8018c48:	4a22      	ldr	r2, [pc, #136]	; (8018cd4 <tcp_parseopt+0xe4>)
 8018c4a:	8812      	ldrh	r2, [r2, #0]
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	da34      	bge.n	8018cba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018c50:	f7ff ff98 	bl	8018b84 <tcp_get_next_optbyte>
 8018c54:	4603      	mov	r3, r0
 8018c56:	b29b      	uxth	r3, r3
 8018c58:	021b      	lsls	r3, r3, #8
 8018c5a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018c5c:	f7ff ff92 	bl	8018b84 <tcp_get_next_optbyte>
 8018c60:	4603      	mov	r3, r0
 8018c62:	b29a      	uxth	r2, r3
 8018c64:	89bb      	ldrh	r3, [r7, #12]
 8018c66:	4313      	orrs	r3, r2
 8018c68:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018c6a:	89bb      	ldrh	r3, [r7, #12]
 8018c6c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018c70:	d804      	bhi.n	8018c7c <tcp_parseopt+0x8c>
 8018c72:	89bb      	ldrh	r3, [r7, #12]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d001      	beq.n	8018c7c <tcp_parseopt+0x8c>
 8018c78:	89ba      	ldrh	r2, [r7, #12]
 8018c7a:	e001      	b.n	8018c80 <tcp_parseopt+0x90>
 8018c7c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018c84:	e010      	b.n	8018ca8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018c86:	f7ff ff7d 	bl	8018b84 <tcp_get_next_optbyte>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018c8e:	7afb      	ldrb	r3, [r7, #11]
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d914      	bls.n	8018cbe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018c94:	7afb      	ldrb	r3, [r7, #11]
 8018c96:	b29a      	uxth	r2, r3
 8018c98:	4b0f      	ldr	r3, [pc, #60]	; (8018cd8 <tcp_parseopt+0xe8>)
 8018c9a:	881b      	ldrh	r3, [r3, #0]
 8018c9c:	4413      	add	r3, r2
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	3b02      	subs	r3, #2
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	4b0c      	ldr	r3, [pc, #48]	; (8018cd8 <tcp_parseopt+0xe8>)
 8018ca6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018ca8:	4b0b      	ldr	r3, [pc, #44]	; (8018cd8 <tcp_parseopt+0xe8>)
 8018caa:	881a      	ldrh	r2, [r3, #0]
 8018cac:	4b09      	ldr	r3, [pc, #36]	; (8018cd4 <tcp_parseopt+0xe4>)
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	d3b3      	bcc.n	8018c1c <tcp_parseopt+0x2c>
 8018cb4:	e004      	b.n	8018cc0 <tcp_parseopt+0xd0>
          return;
 8018cb6:	bf00      	nop
 8018cb8:	e002      	b.n	8018cc0 <tcp_parseopt+0xd0>
            return;
 8018cba:	bf00      	nop
 8018cbc:	e000      	b.n	8018cc0 <tcp_parseopt+0xd0>
            return;
 8018cbe:	bf00      	nop
      }
    }
  }
}
 8018cc0:	3710      	adds	r7, #16
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	bd80      	pop	{r7, pc}
 8018cc6:	bf00      	nop
 8018cc8:	080254fc 	.word	0x080254fc
 8018ccc:	08025960 	.word	0x08025960
 8018cd0:	08025548 	.word	0x08025548
 8018cd4:	20006e28 	.word	0x20006e28
 8018cd8:	20006e30 	.word	0x20006e30

08018cdc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018cdc:	b480      	push	{r7}
 8018cde:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018ce0:	4b05      	ldr	r3, [pc, #20]	; (8018cf8 <tcp_trigger_input_pcb_close+0x1c>)
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	f043 0310 	orr.w	r3, r3, #16
 8018ce8:	b2da      	uxtb	r2, r3
 8018cea:	4b03      	ldr	r3, [pc, #12]	; (8018cf8 <tcp_trigger_input_pcb_close+0x1c>)
 8018cec:	701a      	strb	r2, [r3, #0]
}
 8018cee:	bf00      	nop
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr
 8018cf8:	20006e41 	.word	0x20006e41

08018cfc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b084      	sub	sp, #16
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d00a      	beq.n	8018d24 <tcp_route+0x28>
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	7a1b      	ldrb	r3, [r3, #8]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d006      	beq.n	8018d24 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	7a1b      	ldrb	r3, [r3, #8]
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7fb f90c 	bl	8013f38 <netif_get_by_index>
 8018d20:	4603      	mov	r3, r0
 8018d22:	e003      	b.n	8018d2c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f003 fe35 	bl	801c994 <ip4_route>
 8018d2a:	4603      	mov	r3, r0
  }
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	3710      	adds	r7, #16
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}

08018d34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018d34:	b590      	push	{r4, r7, lr}
 8018d36:	b087      	sub	sp, #28
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	60f8      	str	r0, [r7, #12]
 8018d3c:	60b9      	str	r1, [r7, #8]
 8018d3e:	603b      	str	r3, [r7, #0]
 8018d40:	4613      	mov	r3, r2
 8018d42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d105      	bne.n	8018d56 <tcp_create_segment+0x22>
 8018d4a:	4b44      	ldr	r3, [pc, #272]	; (8018e5c <tcp_create_segment+0x128>)
 8018d4c:	22a3      	movs	r2, #163	; 0xa3
 8018d4e:	4944      	ldr	r1, [pc, #272]	; (8018e60 <tcp_create_segment+0x12c>)
 8018d50:	4844      	ldr	r0, [pc, #272]	; (8018e64 <tcp_create_segment+0x130>)
 8018d52:	f006 fa6b 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018d56:	68bb      	ldr	r3, [r7, #8]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d105      	bne.n	8018d68 <tcp_create_segment+0x34>
 8018d5c:	4b3f      	ldr	r3, [pc, #252]	; (8018e5c <tcp_create_segment+0x128>)
 8018d5e:	22a4      	movs	r2, #164	; 0xa4
 8018d60:	4941      	ldr	r1, [pc, #260]	; (8018e68 <tcp_create_segment+0x134>)
 8018d62:	4840      	ldr	r0, [pc, #256]	; (8018e64 <tcp_create_segment+0x130>)
 8018d64:	f006 fa62 	bl	801f22c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018d68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d6c:	009b      	lsls	r3, r3, #2
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	f003 0304 	and.w	r3, r3, #4
 8018d74:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018d76:	2003      	movs	r0, #3
 8018d78:	f7fa fdda 	bl	8013930 <memp_malloc>
 8018d7c:	6138      	str	r0, [r7, #16]
 8018d7e:	693b      	ldr	r3, [r7, #16]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d104      	bne.n	8018d8e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018d84:	68b8      	ldr	r0, [r7, #8]
 8018d86:	f7fb fc65 	bl	8014654 <pbuf_free>
    return NULL;
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	e061      	b.n	8018e52 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018d8e:	693b      	ldr	r3, [r7, #16]
 8018d90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018d94:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	2200      	movs	r2, #0
 8018d9a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	68ba      	ldr	r2, [r7, #8]
 8018da0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	891a      	ldrh	r2, [r3, #8]
 8018da6:	7dfb      	ldrb	r3, [r7, #23]
 8018da8:	b29b      	uxth	r3, r3
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d205      	bcs.n	8018dba <tcp_create_segment+0x86>
 8018dae:	4b2b      	ldr	r3, [pc, #172]	; (8018e5c <tcp_create_segment+0x128>)
 8018db0:	22b0      	movs	r2, #176	; 0xb0
 8018db2:	492e      	ldr	r1, [pc, #184]	; (8018e6c <tcp_create_segment+0x138>)
 8018db4:	482b      	ldr	r0, [pc, #172]	; (8018e64 <tcp_create_segment+0x130>)
 8018db6:	f006 fa39 	bl	801f22c <iprintf>
  seg->len = p->tot_len - optlen;
 8018dba:	68bb      	ldr	r3, [r7, #8]
 8018dbc:	891a      	ldrh	r2, [r3, #8]
 8018dbe:	7dfb      	ldrb	r3, [r7, #23]
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	1ad3      	subs	r3, r2, r3
 8018dc4:	b29a      	uxth	r2, r3
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018dca:	2114      	movs	r1, #20
 8018dcc:	68b8      	ldr	r0, [r7, #8]
 8018dce:	f7fb fbab 	bl	8014528 <pbuf_add_header>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d004      	beq.n	8018de2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018dd8:	6938      	ldr	r0, [r7, #16]
 8018dda:	f7fd f804 	bl	8015de6 <tcp_seg_free>
    return NULL;
 8018dde:	2300      	movs	r3, #0
 8018de0:	e037      	b.n	8018e52 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	685b      	ldr	r3, [r3, #4]
 8018de6:	685a      	ldr	r2, [r3, #4]
 8018de8:	693b      	ldr	r3, [r7, #16]
 8018dea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	8ada      	ldrh	r2, [r3, #22]
 8018df0:	693b      	ldr	r3, [r7, #16]
 8018df2:	68dc      	ldr	r4, [r3, #12]
 8018df4:	4610      	mov	r0, r2
 8018df6:	f7fa f8e5 	bl	8012fc4 <lwip_htons>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	8b1a      	ldrh	r2, [r3, #24]
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	68dc      	ldr	r4, [r3, #12]
 8018e06:	4610      	mov	r0, r2
 8018e08:	f7fa f8dc 	bl	8012fc4 <lwip_htons>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018e10:	693b      	ldr	r3, [r7, #16]
 8018e12:	68dc      	ldr	r4, [r3, #12]
 8018e14:	6838      	ldr	r0, [r7, #0]
 8018e16:	f7fa f8ea 	bl	8012fee <lwip_htonl>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018e1e:	7dfb      	ldrb	r3, [r7, #23]
 8018e20:	089b      	lsrs	r3, r3, #2
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	b29b      	uxth	r3, r3
 8018e26:	3305      	adds	r3, #5
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	031b      	lsls	r3, r3, #12
 8018e2c:	b29a      	uxth	r2, r3
 8018e2e:	79fb      	ldrb	r3, [r7, #7]
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	4313      	orrs	r3, r2
 8018e34:	b29a      	uxth	r2, r3
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	68dc      	ldr	r4, [r3, #12]
 8018e3a:	4610      	mov	r0, r2
 8018e3c:	f7fa f8c2 	bl	8012fc4 <lwip_htons>
 8018e40:	4603      	mov	r3, r0
 8018e42:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	2200      	movs	r2, #0
 8018e4a:	749a      	strb	r2, [r3, #18]
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	74da      	strb	r2, [r3, #19]
  return seg;
 8018e50:	693b      	ldr	r3, [r7, #16]
}
 8018e52:	4618      	mov	r0, r3
 8018e54:	371c      	adds	r7, #28
 8018e56:	46bd      	mov	sp, r7
 8018e58:	bd90      	pop	{r4, r7, pc}
 8018e5a:	bf00      	nop
 8018e5c:	0802597c 	.word	0x0802597c
 8018e60:	080259b0 	.word	0x080259b0
 8018e64:	080259d0 	.word	0x080259d0
 8018e68:	080259f8 	.word	0x080259f8
 8018e6c:	08025a1c 	.word	0x08025a1c

08018e70 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b086      	sub	sp, #24
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	607b      	str	r3, [r7, #4]
 8018e78:	4603      	mov	r3, r0
 8018e7a:	73fb      	strb	r3, [r7, #15]
 8018e7c:	460b      	mov	r3, r1
 8018e7e:	81bb      	strh	r3, [r7, #12]
 8018e80:	4613      	mov	r3, r2
 8018e82:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018e84:	89bb      	ldrh	r3, [r7, #12]
 8018e86:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d105      	bne.n	8018e9a <tcp_pbuf_prealloc+0x2a>
 8018e8e:	4b30      	ldr	r3, [pc, #192]	; (8018f50 <tcp_pbuf_prealloc+0xe0>)
 8018e90:	22e8      	movs	r2, #232	; 0xe8
 8018e92:	4930      	ldr	r1, [pc, #192]	; (8018f54 <tcp_pbuf_prealloc+0xe4>)
 8018e94:	4830      	ldr	r0, [pc, #192]	; (8018f58 <tcp_pbuf_prealloc+0xe8>)
 8018e96:	f006 f9c9 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018e9a:	6a3b      	ldr	r3, [r7, #32]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d105      	bne.n	8018eac <tcp_pbuf_prealloc+0x3c>
 8018ea0:	4b2b      	ldr	r3, [pc, #172]	; (8018f50 <tcp_pbuf_prealloc+0xe0>)
 8018ea2:	22e9      	movs	r2, #233	; 0xe9
 8018ea4:	492d      	ldr	r1, [pc, #180]	; (8018f5c <tcp_pbuf_prealloc+0xec>)
 8018ea6:	482c      	ldr	r0, [pc, #176]	; (8018f58 <tcp_pbuf_prealloc+0xe8>)
 8018ea8:	f006 f9c0 	bl	801f22c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018eac:	89ba      	ldrh	r2, [r7, #12]
 8018eae:	897b      	ldrh	r3, [r7, #10]
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d221      	bcs.n	8018ef8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018eb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018eb8:	f003 0302 	and.w	r3, r3, #2
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d111      	bne.n	8018ee4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018ec0:	6a3b      	ldr	r3, [r7, #32]
 8018ec2:	8b5b      	ldrh	r3, [r3, #26]
 8018ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d115      	bne.n	8018ef8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018ecc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d007      	beq.n	8018ee4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018ed4:	6a3b      	ldr	r3, [r7, #32]
 8018ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d103      	bne.n	8018ee4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018edc:	6a3b      	ldr	r3, [r7, #32]
 8018ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d009      	beq.n	8018ef8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018ee4:	89bb      	ldrh	r3, [r7, #12]
 8018ee6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018eea:	f023 0203 	bic.w	r2, r3, #3
 8018eee:	897b      	ldrh	r3, [r7, #10]
 8018ef0:	4293      	cmp	r3, r2
 8018ef2:	bf28      	it	cs
 8018ef4:	4613      	movcs	r3, r2
 8018ef6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018ef8:	8af9      	ldrh	r1, [r7, #22]
 8018efa:	7bfb      	ldrb	r3, [r7, #15]
 8018efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f00:	4618      	mov	r0, r3
 8018f02:	f7fb f8c3 	bl	801408c <pbuf_alloc>
 8018f06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d101      	bne.n	8018f12 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	e019      	b.n	8018f46 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d006      	beq.n	8018f28 <tcp_pbuf_prealloc+0xb8>
 8018f1a:	4b0d      	ldr	r3, [pc, #52]	; (8018f50 <tcp_pbuf_prealloc+0xe0>)
 8018f1c:	f240 120b 	movw	r2, #267	; 0x10b
 8018f20:	490f      	ldr	r1, [pc, #60]	; (8018f60 <tcp_pbuf_prealloc+0xf0>)
 8018f22:	480d      	ldr	r0, [pc, #52]	; (8018f58 <tcp_pbuf_prealloc+0xe8>)
 8018f24:	f006 f982 	bl	801f22c <iprintf>
  *oversize = p->len - length;
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	895a      	ldrh	r2, [r3, #10]
 8018f2c:	89bb      	ldrh	r3, [r7, #12]
 8018f2e:	1ad3      	subs	r3, r2, r3
 8018f30:	b29a      	uxth	r2, r3
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018f36:	693b      	ldr	r3, [r7, #16]
 8018f38:	89ba      	ldrh	r2, [r7, #12]
 8018f3a:	811a      	strh	r2, [r3, #8]
 8018f3c:	693b      	ldr	r3, [r7, #16]
 8018f3e:	891a      	ldrh	r2, [r3, #8]
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	815a      	strh	r2, [r3, #10]
  return p;
 8018f44:	693b      	ldr	r3, [r7, #16]
}
 8018f46:	4618      	mov	r0, r3
 8018f48:	3718      	adds	r7, #24
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	0802597c 	.word	0x0802597c
 8018f54:	08025a34 	.word	0x08025a34
 8018f58:	080259d0 	.word	0x080259d0
 8018f5c:	08025a58 	.word	0x08025a58
 8018f60:	08025a78 	.word	0x08025a78

08018f64 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b082      	sub	sp, #8
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
 8018f6c:	460b      	mov	r3, r1
 8018f6e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d106      	bne.n	8018f84 <tcp_write_checks+0x20>
 8018f76:	4b33      	ldr	r3, [pc, #204]	; (8019044 <tcp_write_checks+0xe0>)
 8018f78:	f240 1233 	movw	r2, #307	; 0x133
 8018f7c:	4932      	ldr	r1, [pc, #200]	; (8019048 <tcp_write_checks+0xe4>)
 8018f7e:	4833      	ldr	r0, [pc, #204]	; (801904c <tcp_write_checks+0xe8>)
 8018f80:	f006 f954 	bl	801f22c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	7d1b      	ldrb	r3, [r3, #20]
 8018f88:	2b04      	cmp	r3, #4
 8018f8a:	d00e      	beq.n	8018faa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018f90:	2b07      	cmp	r3, #7
 8018f92:	d00a      	beq.n	8018faa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018f98:	2b02      	cmp	r3, #2
 8018f9a:	d006      	beq.n	8018faa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018fa0:	2b03      	cmp	r3, #3
 8018fa2:	d002      	beq.n	8018faa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018fa4:	f06f 030a 	mvn.w	r3, #10
 8018fa8:	e048      	b.n	801903c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018faa:	887b      	ldrh	r3, [r7, #2]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d101      	bne.n	8018fb4 <tcp_write_checks+0x50>
    return ERR_OK;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	e043      	b.n	801903c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018fba:	887a      	ldrh	r2, [r7, #2]
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d909      	bls.n	8018fd4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	8b5b      	ldrh	r3, [r3, #26]
 8018fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fc8:	b29a      	uxth	r2, r3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018fce:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd2:	e033      	b.n	801903c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fda:	2b08      	cmp	r3, #8
 8018fdc:	d909      	bls.n	8018ff2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	8b5b      	ldrh	r3, [r3, #26]
 8018fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fe6:	b29a      	uxth	r2, r3
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018fec:	f04f 33ff 	mov.w	r3, #4294967295
 8018ff0:	e024      	b.n	801903c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d00f      	beq.n	801901c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019000:	2b00      	cmp	r3, #0
 8019002:	d11a      	bne.n	801903a <tcp_write_checks+0xd6>
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019008:	2b00      	cmp	r3, #0
 801900a:	d116      	bne.n	801903a <tcp_write_checks+0xd6>
 801900c:	4b0d      	ldr	r3, [pc, #52]	; (8019044 <tcp_write_checks+0xe0>)
 801900e:	f240 1255 	movw	r2, #341	; 0x155
 8019012:	490f      	ldr	r1, [pc, #60]	; (8019050 <tcp_write_checks+0xec>)
 8019014:	480d      	ldr	r0, [pc, #52]	; (801904c <tcp_write_checks+0xe8>)
 8019016:	f006 f909 	bl	801f22c <iprintf>
 801901a:	e00e      	b.n	801903a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019020:	2b00      	cmp	r3, #0
 8019022:	d103      	bne.n	801902c <tcp_write_checks+0xc8>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019028:	2b00      	cmp	r3, #0
 801902a:	d006      	beq.n	801903a <tcp_write_checks+0xd6>
 801902c:	4b05      	ldr	r3, [pc, #20]	; (8019044 <tcp_write_checks+0xe0>)
 801902e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8019032:	4908      	ldr	r1, [pc, #32]	; (8019054 <tcp_write_checks+0xf0>)
 8019034:	4805      	ldr	r0, [pc, #20]	; (801904c <tcp_write_checks+0xe8>)
 8019036:	f006 f8f9 	bl	801f22c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801903a:	2300      	movs	r3, #0
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	0802597c 	.word	0x0802597c
 8019048:	08025a8c 	.word	0x08025a8c
 801904c:	080259d0 	.word	0x080259d0
 8019050:	08025aac 	.word	0x08025aac
 8019054:	08025ae8 	.word	0x08025ae8

08019058 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019058:	b590      	push	{r4, r7, lr}
 801905a:	b09b      	sub	sp, #108	; 0x6c
 801905c:	af04      	add	r7, sp, #16
 801905e:	60f8      	str	r0, [r7, #12]
 8019060:	60b9      	str	r1, [r7, #8]
 8019062:	4611      	mov	r1, r2
 8019064:	461a      	mov	r2, r3
 8019066:	460b      	mov	r3, r1
 8019068:	80fb      	strh	r3, [r7, #6]
 801906a:	4613      	mov	r3, r2
 801906c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801906e:	2300      	movs	r3, #0
 8019070:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019072:	2300      	movs	r3, #0
 8019074:	653b      	str	r3, [r7, #80]	; 0x50
 8019076:	2300      	movs	r3, #0
 8019078:	64fb      	str	r3, [r7, #76]	; 0x4c
 801907a:	2300      	movs	r3, #0
 801907c:	64bb      	str	r3, [r7, #72]	; 0x48
 801907e:	2300      	movs	r3, #0
 8019080:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019082:	2300      	movs	r3, #0
 8019084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019088:	2300      	movs	r3, #0
 801908a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801908e:	2300      	movs	r3, #0
 8019090:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019092:	2300      	movs	r3, #0
 8019094:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019096:	2300      	movs	r3, #0
 8019098:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d109      	bne.n	80190b4 <tcp_write+0x5c>
 80190a0:	4ba4      	ldr	r3, [pc, #656]	; (8019334 <tcp_write+0x2dc>)
 80190a2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80190a6:	49a4      	ldr	r1, [pc, #656]	; (8019338 <tcp_write+0x2e0>)
 80190a8:	48a4      	ldr	r0, [pc, #656]	; (801933c <tcp_write+0x2e4>)
 80190aa:	f006 f8bf 	bl	801f22c <iprintf>
 80190ae:	f06f 030f 	mvn.w	r3, #15
 80190b2:	e32a      	b.n	801970a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80190ba:	085b      	lsrs	r3, r3, #1
 80190bc:	b29a      	uxth	r2, r3
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190c2:	4293      	cmp	r3, r2
 80190c4:	bf28      	it	cs
 80190c6:	4613      	movcs	r3, r2
 80190c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80190ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d102      	bne.n	80190d6 <tcp_write+0x7e>
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190d4:	e000      	b.n	80190d8 <tcp_write+0x80>
 80190d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80190da:	68bb      	ldr	r3, [r7, #8]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d109      	bne.n	80190f4 <tcp_write+0x9c>
 80190e0:	4b94      	ldr	r3, [pc, #592]	; (8019334 <tcp_write+0x2dc>)
 80190e2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80190e6:	4996      	ldr	r1, [pc, #600]	; (8019340 <tcp_write+0x2e8>)
 80190e8:	4894      	ldr	r0, [pc, #592]	; (801933c <tcp_write+0x2e4>)
 80190ea:	f006 f89f 	bl	801f22c <iprintf>
 80190ee:	f06f 030f 	mvn.w	r3, #15
 80190f2:	e30a      	b.n	801970a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80190f4:	88fb      	ldrh	r3, [r7, #6]
 80190f6:	4619      	mov	r1, r3
 80190f8:	68f8      	ldr	r0, [r7, #12]
 80190fa:	f7ff ff33 	bl	8018f64 <tcp_write_checks>
 80190fe:	4603      	mov	r3, r0
 8019100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019104:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019108:	2b00      	cmp	r3, #0
 801910a:	d002      	beq.n	8019112 <tcp_write+0xba>
    return err;
 801910c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019110:	e2fb      	b.n	801970a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019118:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801911c:	2300      	movs	r3, #0
 801911e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019126:	2b00      	cmp	r3, #0
 8019128:	f000 80f6 	beq.w	8019318 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019130:	653b      	str	r3, [r7, #80]	; 0x50
 8019132:	e002      	b.n	801913a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801913a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d1f8      	bne.n	8019134 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019144:	7a9b      	ldrb	r3, [r3, #10]
 8019146:	009b      	lsls	r3, r3, #2
 8019148:	b29b      	uxth	r3, r3
 801914a:	f003 0304 	and.w	r3, r3, #4
 801914e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019154:	891b      	ldrh	r3, [r3, #8]
 8019156:	4619      	mov	r1, r3
 8019158:	8c3b      	ldrh	r3, [r7, #32]
 801915a:	440b      	add	r3, r1
 801915c:	429a      	cmp	r2, r3
 801915e:	da06      	bge.n	801916e <tcp_write+0x116>
 8019160:	4b74      	ldr	r3, [pc, #464]	; (8019334 <tcp_write+0x2dc>)
 8019162:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019166:	4977      	ldr	r1, [pc, #476]	; (8019344 <tcp_write+0x2ec>)
 8019168:	4874      	ldr	r0, [pc, #464]	; (801933c <tcp_write+0x2e4>)
 801916a:	f006 f85f 	bl	801f22c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801916e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019170:	891a      	ldrh	r2, [r3, #8]
 8019172:	8c3b      	ldrh	r3, [r7, #32]
 8019174:	4413      	add	r3, r2
 8019176:	b29b      	uxth	r3, r3
 8019178:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801917a:	1ad3      	subs	r3, r2, r3
 801917c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019184:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019186:	8a7b      	ldrh	r3, [r7, #18]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d026      	beq.n	80191da <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801918c:	8a7b      	ldrh	r3, [r7, #18]
 801918e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019190:	429a      	cmp	r2, r3
 8019192:	d206      	bcs.n	80191a2 <tcp_write+0x14a>
 8019194:	4b67      	ldr	r3, [pc, #412]	; (8019334 <tcp_write+0x2dc>)
 8019196:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801919a:	496b      	ldr	r1, [pc, #428]	; (8019348 <tcp_write+0x2f0>)
 801919c:	4867      	ldr	r0, [pc, #412]	; (801933c <tcp_write+0x2e4>)
 801919e:	f006 f845 	bl	801f22c <iprintf>
      seg = last_unsent;
 80191a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80191a6:	8a7b      	ldrh	r3, [r7, #18]
 80191a8:	88fa      	ldrh	r2, [r7, #6]
 80191aa:	4293      	cmp	r3, r2
 80191ac:	bf28      	it	cs
 80191ae:	4613      	movcs	r3, r2
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191b4:	4293      	cmp	r3, r2
 80191b6:	bf28      	it	cs
 80191b8:	4613      	movcs	r3, r2
 80191ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80191bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191c2:	4413      	add	r3, r2
 80191c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80191c8:	8a7a      	ldrh	r2, [r7, #18]
 80191ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191cc:	1ad3      	subs	r3, r2, r3
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80191d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191d6:	1ad3      	subs	r3, r2, r3
 80191d8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80191da:	8a7b      	ldrh	r3, [r7, #18]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d00b      	beq.n	80191f8 <tcp_write+0x1a0>
 80191e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191e4:	88fb      	ldrh	r3, [r7, #6]
 80191e6:	429a      	cmp	r2, r3
 80191e8:	d006      	beq.n	80191f8 <tcp_write+0x1a0>
 80191ea:	4b52      	ldr	r3, [pc, #328]	; (8019334 <tcp_write+0x2dc>)
 80191ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191f0:	4956      	ldr	r1, [pc, #344]	; (801934c <tcp_write+0x2f4>)
 80191f2:	4852      	ldr	r0, [pc, #328]	; (801933c <tcp_write+0x2e4>)
 80191f4:	f006 f81a 	bl	801f22c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80191f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191fc:	88fb      	ldrh	r3, [r7, #6]
 80191fe:	429a      	cmp	r2, r3
 8019200:	f080 8167 	bcs.w	80194d2 <tcp_write+0x47a>
 8019204:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019206:	2b00      	cmp	r3, #0
 8019208:	f000 8163 	beq.w	80194d2 <tcp_write+0x47a>
 801920c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801920e:	891b      	ldrh	r3, [r3, #8]
 8019210:	2b00      	cmp	r3, #0
 8019212:	f000 815e 	beq.w	80194d2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019216:	88fa      	ldrh	r2, [r7, #6]
 8019218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801921c:	1ad2      	subs	r2, r2, r3
 801921e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019220:	4293      	cmp	r3, r2
 8019222:	bfa8      	it	ge
 8019224:	4613      	movge	r3, r2
 8019226:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801922a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801922c:	797b      	ldrb	r3, [r7, #5]
 801922e:	f003 0301 	and.w	r3, r3, #1
 8019232:	2b00      	cmp	r3, #0
 8019234:	d027      	beq.n	8019286 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019236:	f107 0012 	add.w	r0, r7, #18
 801923a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801923c:	8bf9      	ldrh	r1, [r7, #30]
 801923e:	2301      	movs	r3, #1
 8019240:	9302      	str	r3, [sp, #8]
 8019242:	797b      	ldrb	r3, [r7, #5]
 8019244:	9301      	str	r3, [sp, #4]
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	9300      	str	r3, [sp, #0]
 801924a:	4603      	mov	r3, r0
 801924c:	2000      	movs	r0, #0
 801924e:	f7ff fe0f 	bl	8018e70 <tcp_pbuf_prealloc>
 8019252:	6578      	str	r0, [r7, #84]	; 0x54
 8019254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019256:	2b00      	cmp	r3, #0
 8019258:	f000 8225 	beq.w	80196a6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801925c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801925e:	6858      	ldr	r0, [r3, #4]
 8019260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019264:	68ba      	ldr	r2, [r7, #8]
 8019266:	4413      	add	r3, r2
 8019268:	8bfa      	ldrh	r2, [r7, #30]
 801926a:	4619      	mov	r1, r3
 801926c:	f005 f88a 	bl	801e384 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019270:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019272:	f7fb fa7d 	bl	8014770 <pbuf_clen>
 8019276:	4603      	mov	r3, r0
 8019278:	461a      	mov	r2, r3
 801927a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801927e:	4413      	add	r3, r2
 8019280:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8019284:	e041      	b.n	801930a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	637b      	str	r3, [r7, #52]	; 0x34
 801928c:	e002      	b.n	8019294 <tcp_write+0x23c>
 801928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	637b      	str	r3, [r7, #52]	; 0x34
 8019294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d1f8      	bne.n	801928e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801929c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801929e:	7b1b      	ldrb	r3, [r3, #12]
 80192a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d115      	bne.n	80192d4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80192a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192aa:	685b      	ldr	r3, [r3, #4]
 80192ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192ae:	8952      	ldrh	r2, [r2, #10]
 80192b0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80192b2:	68ba      	ldr	r2, [r7, #8]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	d10d      	bne.n	80192d4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80192b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d006      	beq.n	80192ce <tcp_write+0x276>
 80192c0:	4b1c      	ldr	r3, [pc, #112]	; (8019334 <tcp_write+0x2dc>)
 80192c2:	f240 2231 	movw	r2, #561	; 0x231
 80192c6:	4922      	ldr	r1, [pc, #136]	; (8019350 <tcp_write+0x2f8>)
 80192c8:	481c      	ldr	r0, [pc, #112]	; (801933c <tcp_write+0x2e4>)
 80192ca:	f005 ffaf 	bl	801f22c <iprintf>
          extendlen = seglen;
 80192ce:	8bfb      	ldrh	r3, [r7, #30]
 80192d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80192d2:	e01a      	b.n	801930a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80192d4:	8bfb      	ldrh	r3, [r7, #30]
 80192d6:	2201      	movs	r2, #1
 80192d8:	4619      	mov	r1, r3
 80192da:	2000      	movs	r0, #0
 80192dc:	f7fa fed6 	bl	801408c <pbuf_alloc>
 80192e0:	6578      	str	r0, [r7, #84]	; 0x54
 80192e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	f000 81e0 	beq.w	80196aa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80192ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192ee:	68ba      	ldr	r2, [r7, #8]
 80192f0:	441a      	add	r2, r3
 80192f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192f4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80192f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80192f8:	f7fb fa3a 	bl	8014770 <pbuf_clen>
 80192fc:	4603      	mov	r3, r0
 80192fe:	461a      	mov	r2, r3
 8019300:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019304:	4413      	add	r3, r2
 8019306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801930a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801930e:	8bfb      	ldrh	r3, [r7, #30]
 8019310:	4413      	add	r3, r2
 8019312:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019316:	e0dc      	b.n	80194d2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801931e:	2b00      	cmp	r3, #0
 8019320:	f000 80d7 	beq.w	80194d2 <tcp_write+0x47a>
 8019324:	4b03      	ldr	r3, [pc, #12]	; (8019334 <tcp_write+0x2dc>)
 8019326:	f240 224a 	movw	r2, #586	; 0x24a
 801932a:	490a      	ldr	r1, [pc, #40]	; (8019354 <tcp_write+0x2fc>)
 801932c:	4803      	ldr	r0, [pc, #12]	; (801933c <tcp_write+0x2e4>)
 801932e:	f005 ff7d 	bl	801f22c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019332:	e0ce      	b.n	80194d2 <tcp_write+0x47a>
 8019334:	0802597c 	.word	0x0802597c
 8019338:	08025b1c 	.word	0x08025b1c
 801933c:	080259d0 	.word	0x080259d0
 8019340:	08025b34 	.word	0x08025b34
 8019344:	08025b68 	.word	0x08025b68
 8019348:	08025b80 	.word	0x08025b80
 801934c:	08025ba0 	.word	0x08025ba0
 8019350:	08025bc0 	.word	0x08025bc0
 8019354:	08025bec 	.word	0x08025bec
    struct pbuf *p;
    u16_t left = len - pos;
 8019358:	88fa      	ldrh	r2, [r7, #6]
 801935a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801935e:	1ad3      	subs	r3, r2, r3
 8019360:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019362:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019366:	b29b      	uxth	r3, r3
 8019368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801936a:	1ad3      	subs	r3, r2, r3
 801936c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801936e:	8b7a      	ldrh	r2, [r7, #26]
 8019370:	8bbb      	ldrh	r3, [r7, #28]
 8019372:	4293      	cmp	r3, r2
 8019374:	bf28      	it	cs
 8019376:	4613      	movcs	r3, r2
 8019378:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801937a:	797b      	ldrb	r3, [r7, #5]
 801937c:	f003 0301 	and.w	r3, r3, #1
 8019380:	2b00      	cmp	r3, #0
 8019382:	d036      	beq.n	80193f2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019384:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019388:	b29a      	uxth	r2, r3
 801938a:	8b3b      	ldrh	r3, [r7, #24]
 801938c:	4413      	add	r3, r2
 801938e:	b299      	uxth	r1, r3
 8019390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019392:	2b00      	cmp	r3, #0
 8019394:	bf0c      	ite	eq
 8019396:	2301      	moveq	r3, #1
 8019398:	2300      	movne	r3, #0
 801939a:	b2db      	uxtb	r3, r3
 801939c:	f107 0012 	add.w	r0, r7, #18
 80193a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80193a2:	9302      	str	r3, [sp, #8]
 80193a4:	797b      	ldrb	r3, [r7, #5]
 80193a6:	9301      	str	r3, [sp, #4]
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	9300      	str	r3, [sp, #0]
 80193ac:	4603      	mov	r3, r0
 80193ae:	2036      	movs	r0, #54	; 0x36
 80193b0:	f7ff fd5e 	bl	8018e70 <tcp_pbuf_prealloc>
 80193b4:	6338      	str	r0, [r7, #48]	; 0x30
 80193b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	f000 8178 	beq.w	80196ae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80193be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c0:	895b      	ldrh	r3, [r3, #10]
 80193c2:	8b3a      	ldrh	r2, [r7, #24]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d906      	bls.n	80193d6 <tcp_write+0x37e>
 80193c8:	4b8c      	ldr	r3, [pc, #560]	; (80195fc <tcp_write+0x5a4>)
 80193ca:	f240 2266 	movw	r2, #614	; 0x266
 80193ce:	498c      	ldr	r1, [pc, #560]	; (8019600 <tcp_write+0x5a8>)
 80193d0:	488c      	ldr	r0, [pc, #560]	; (8019604 <tcp_write+0x5ac>)
 80193d2:	f005 ff2b 	bl	801f22c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80193d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d8:	685a      	ldr	r2, [r3, #4]
 80193da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193de:	18d0      	adds	r0, r2, r3
 80193e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193e4:	68ba      	ldr	r2, [r7, #8]
 80193e6:	4413      	add	r3, r2
 80193e8:	8b3a      	ldrh	r2, [r7, #24]
 80193ea:	4619      	mov	r1, r3
 80193ec:	f004 ffca 	bl	801e384 <memcpy>
 80193f0:	e02f      	b.n	8019452 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80193f2:	8a7b      	ldrh	r3, [r7, #18]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d006      	beq.n	8019406 <tcp_write+0x3ae>
 80193f8:	4b80      	ldr	r3, [pc, #512]	; (80195fc <tcp_write+0x5a4>)
 80193fa:	f240 2271 	movw	r2, #625	; 0x271
 80193fe:	4982      	ldr	r1, [pc, #520]	; (8019608 <tcp_write+0x5b0>)
 8019400:	4880      	ldr	r0, [pc, #512]	; (8019604 <tcp_write+0x5ac>)
 8019402:	f005 ff13 	bl	801f22c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019406:	8b3b      	ldrh	r3, [r7, #24]
 8019408:	2201      	movs	r2, #1
 801940a:	4619      	mov	r1, r3
 801940c:	2036      	movs	r0, #54	; 0x36
 801940e:	f7fa fe3d 	bl	801408c <pbuf_alloc>
 8019412:	6178      	str	r0, [r7, #20]
 8019414:	697b      	ldr	r3, [r7, #20]
 8019416:	2b00      	cmp	r3, #0
 8019418:	f000 814b 	beq.w	80196b2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801941c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019420:	68ba      	ldr	r2, [r7, #8]
 8019422:	441a      	add	r2, r3
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801942c:	b29b      	uxth	r3, r3
 801942e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019432:	4619      	mov	r1, r3
 8019434:	2036      	movs	r0, #54	; 0x36
 8019436:	f7fa fe29 	bl	801408c <pbuf_alloc>
 801943a:	6338      	str	r0, [r7, #48]	; 0x30
 801943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801943e:	2b00      	cmp	r3, #0
 8019440:	d103      	bne.n	801944a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019442:	6978      	ldr	r0, [r7, #20]
 8019444:	f7fb f906 	bl	8014654 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019448:	e136      	b.n	80196b8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801944a:	6979      	ldr	r1, [r7, #20]
 801944c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801944e:	f7fb f9cf 	bl	80147f0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019454:	f7fb f98c 	bl	8014770 <pbuf_clen>
 8019458:	4603      	mov	r3, r0
 801945a:	461a      	mov	r2, r3
 801945c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019460:	4413      	add	r3, r2
 8019462:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019466:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801946a:	2b09      	cmp	r3, #9
 801946c:	d903      	bls.n	8019476 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801946e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019470:	f7fb f8f0 	bl	8014654 <pbuf_free>
      goto memerr;
 8019474:	e120      	b.n	80196b8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801947a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801947e:	441a      	add	r2, r3
 8019480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019484:	9300      	str	r3, [sp, #0]
 8019486:	4613      	mov	r3, r2
 8019488:	2200      	movs	r2, #0
 801948a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801948c:	68f8      	ldr	r0, [r7, #12]
 801948e:	f7ff fc51 	bl	8018d34 <tcp_create_segment>
 8019492:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019496:	2b00      	cmp	r3, #0
 8019498:	f000 810d 	beq.w	80196b6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801949c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d102      	bne.n	80194a8 <tcp_write+0x450>
      queue = seg;
 80194a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194a4:	647b      	str	r3, [r7, #68]	; 0x44
 80194a6:	e00c      	b.n	80194c2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80194a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d106      	bne.n	80194bc <tcp_write+0x464>
 80194ae:	4b53      	ldr	r3, [pc, #332]	; (80195fc <tcp_write+0x5a4>)
 80194b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80194b4:	4955      	ldr	r1, [pc, #340]	; (801960c <tcp_write+0x5b4>)
 80194b6:	4853      	ldr	r0, [pc, #332]	; (8019604 <tcp_write+0x5ac>)
 80194b8:	f005 feb8 	bl	801f22c <iprintf>
      prev_seg->next = seg;
 80194bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80194c0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80194c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194c4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80194c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80194ca:	8b3b      	ldrh	r3, [r7, #24]
 80194cc:	4413      	add	r3, r2
 80194ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80194d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80194d6:	88fb      	ldrh	r3, [r7, #6]
 80194d8:	429a      	cmp	r2, r3
 80194da:	f4ff af3d 	bcc.w	8019358 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80194de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d02c      	beq.n	801953e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80194e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194ea:	e01e      	b.n	801952a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80194ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ee:	891a      	ldrh	r2, [r3, #8]
 80194f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80194f2:	4413      	add	r3, r2
 80194f4:	b29a      	uxth	r2, r3
 80194f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80194fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d110      	bne.n	8019524 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019504:	685b      	ldr	r3, [r3, #4]
 8019506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019508:	8952      	ldrh	r2, [r2, #10]
 801950a:	4413      	add	r3, r2
 801950c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801950e:	68b9      	ldr	r1, [r7, #8]
 8019510:	4618      	mov	r0, r3
 8019512:	f004 ff37 	bl	801e384 <memcpy>
        p->len += oversize_used;
 8019516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019518:	895a      	ldrh	r2, [r3, #10]
 801951a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801951c:	4413      	add	r3, r2
 801951e:	b29a      	uxth	r2, r3
 8019520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019522:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	62fb      	str	r3, [r7, #44]	; 0x2c
 801952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952c:	2b00      	cmp	r3, #0
 801952e:	d1dd      	bne.n	80194ec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019532:	891a      	ldrh	r2, [r3, #8]
 8019534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019536:	4413      	add	r3, r2
 8019538:	b29a      	uxth	r2, r3
 801953a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801953c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801953e:	8a7a      	ldrh	r2, [r7, #18]
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019548:	2b00      	cmp	r3, #0
 801954a:	d018      	beq.n	801957e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801954c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801954e:	2b00      	cmp	r3, #0
 8019550:	d106      	bne.n	8019560 <tcp_write+0x508>
 8019552:	4b2a      	ldr	r3, [pc, #168]	; (80195fc <tcp_write+0x5a4>)
 8019554:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8019558:	492d      	ldr	r1, [pc, #180]	; (8019610 <tcp_write+0x5b8>)
 801955a:	482a      	ldr	r0, [pc, #168]	; (8019604 <tcp_write+0x5ac>)
 801955c:	f005 fe66 	bl	801f22c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019566:	4618      	mov	r0, r3
 8019568:	f7fb f942 	bl	80147f0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801956c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801956e:	891a      	ldrh	r2, [r3, #8]
 8019570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019572:	891b      	ldrh	r3, [r3, #8]
 8019574:	4413      	add	r3, r2
 8019576:	b29a      	uxth	r2, r3
 8019578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801957a:	811a      	strh	r2, [r3, #8]
 801957c:	e037      	b.n	80195ee <tcp_write+0x596>
  } else if (extendlen > 0) {
 801957e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019580:	2b00      	cmp	r3, #0
 8019582:	d034      	beq.n	80195ee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019586:	2b00      	cmp	r3, #0
 8019588:	d003      	beq.n	8019592 <tcp_write+0x53a>
 801958a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801958c:	685b      	ldr	r3, [r3, #4]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d106      	bne.n	80195a0 <tcp_write+0x548>
 8019592:	4b1a      	ldr	r3, [pc, #104]	; (80195fc <tcp_write+0x5a4>)
 8019594:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019598:	491e      	ldr	r1, [pc, #120]	; (8019614 <tcp_write+0x5bc>)
 801959a:	481a      	ldr	r0, [pc, #104]	; (8019604 <tcp_write+0x5ac>)
 801959c:	f005 fe46 	bl	801f22c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80195a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195a2:	685b      	ldr	r3, [r3, #4]
 80195a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80195a6:	e009      	b.n	80195bc <tcp_write+0x564>
      p->tot_len += extendlen;
 80195a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195aa:	891a      	ldrh	r2, [r3, #8]
 80195ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195ae:	4413      	add	r3, r2
 80195b0:	b29a      	uxth	r2, r3
 80195b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80195b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80195bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d1f1      	bne.n	80195a8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80195c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195c6:	891a      	ldrh	r2, [r3, #8]
 80195c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195ca:	4413      	add	r3, r2
 80195cc:	b29a      	uxth	r2, r3
 80195ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195d0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80195d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195d4:	895a      	ldrh	r2, [r3, #10]
 80195d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195d8:	4413      	add	r3, r2
 80195da:	b29a      	uxth	r2, r3
 80195dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195de:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80195e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195e2:	891a      	ldrh	r2, [r3, #8]
 80195e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195e6:	4413      	add	r3, r2
 80195e8:	b29a      	uxth	r2, r3
 80195ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80195ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d111      	bne.n	8019618 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80195f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80195fa:	e010      	b.n	801961e <tcp_write+0x5c6>
 80195fc:	0802597c 	.word	0x0802597c
 8019600:	08025c1c 	.word	0x08025c1c
 8019604:	080259d0 	.word	0x080259d0
 8019608:	08025c5c 	.word	0x08025c5c
 801960c:	08025c6c 	.word	0x08025c6c
 8019610:	08025c80 	.word	0x08025c80
 8019614:	08025cb8 	.word	0x08025cb8
  } else {
    last_unsent->next = queue;
 8019618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801961a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801961c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019622:	88fb      	ldrh	r3, [r7, #6]
 8019624:	441a      	add	r2, r3
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019630:	88fb      	ldrh	r3, [r7, #6]
 8019632:	1ad3      	subs	r3, r2, r3
 8019634:	b29a      	uxth	r2, r3
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019642:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801964c:	2b00      	cmp	r3, #0
 801964e:	d00e      	beq.n	801966e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019654:	2b00      	cmp	r3, #0
 8019656:	d10a      	bne.n	801966e <tcp_write+0x616>
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801965c:	2b00      	cmp	r3, #0
 801965e:	d106      	bne.n	801966e <tcp_write+0x616>
 8019660:	4b2c      	ldr	r3, [pc, #176]	; (8019714 <tcp_write+0x6bc>)
 8019662:	f240 3212 	movw	r2, #786	; 0x312
 8019666:	492c      	ldr	r1, [pc, #176]	; (8019718 <tcp_write+0x6c0>)
 8019668:	482c      	ldr	r0, [pc, #176]	; (801971c <tcp_write+0x6c4>)
 801966a:	f005 fddf 	bl	801f22c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801966e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019670:	2b00      	cmp	r3, #0
 8019672:	d016      	beq.n	80196a2 <tcp_write+0x64a>
 8019674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019676:	68db      	ldr	r3, [r3, #12]
 8019678:	2b00      	cmp	r3, #0
 801967a:	d012      	beq.n	80196a2 <tcp_write+0x64a>
 801967c:	797b      	ldrb	r3, [r7, #5]
 801967e:	f003 0302 	and.w	r3, r3, #2
 8019682:	2b00      	cmp	r3, #0
 8019684:	d10d      	bne.n	80196a2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019688:	68db      	ldr	r3, [r3, #12]
 801968a:	899b      	ldrh	r3, [r3, #12]
 801968c:	b29c      	uxth	r4, r3
 801968e:	2008      	movs	r0, #8
 8019690:	f7f9 fc98 	bl	8012fc4 <lwip_htons>
 8019694:	4603      	mov	r3, r0
 8019696:	461a      	mov	r2, r3
 8019698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801969a:	68db      	ldr	r3, [r3, #12]
 801969c:	4322      	orrs	r2, r4
 801969e:	b292      	uxth	r2, r2
 80196a0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80196a2:	2300      	movs	r3, #0
 80196a4:	e031      	b.n	801970a <tcp_write+0x6b2>
          goto memerr;
 80196a6:	bf00      	nop
 80196a8:	e006      	b.n	80196b8 <tcp_write+0x660>
            goto memerr;
 80196aa:	bf00      	nop
 80196ac:	e004      	b.n	80196b8 <tcp_write+0x660>
        goto memerr;
 80196ae:	bf00      	nop
 80196b0:	e002      	b.n	80196b8 <tcp_write+0x660>
        goto memerr;
 80196b2:	bf00      	nop
 80196b4:	e000      	b.n	80196b8 <tcp_write+0x660>
      goto memerr;
 80196b6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	8b5b      	ldrh	r3, [r3, #26]
 80196bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196c0:	b29a      	uxth	r2, r3
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80196c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d002      	beq.n	80196d2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80196cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80196ce:	f7fa ffc1 	bl	8014654 <pbuf_free>
  }
  if (queue != NULL) {
 80196d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d002      	beq.n	80196de <tcp_write+0x686>
    tcp_segs_free(queue);
 80196d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80196da:	f7fc fb6f 	bl	8015dbc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d00e      	beq.n	8019706 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d10a      	bne.n	8019706 <tcp_write+0x6ae>
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d106      	bne.n	8019706 <tcp_write+0x6ae>
 80196f8:	4b06      	ldr	r3, [pc, #24]	; (8019714 <tcp_write+0x6bc>)
 80196fa:	f240 3227 	movw	r2, #807	; 0x327
 80196fe:	4906      	ldr	r1, [pc, #24]	; (8019718 <tcp_write+0x6c0>)
 8019700:	4806      	ldr	r0, [pc, #24]	; (801971c <tcp_write+0x6c4>)
 8019702:	f005 fd93 	bl	801f22c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019706:	f04f 33ff 	mov.w	r3, #4294967295
}
 801970a:	4618      	mov	r0, r3
 801970c:	375c      	adds	r7, #92	; 0x5c
 801970e:	46bd      	mov	sp, r7
 8019710:	bd90      	pop	{r4, r7, pc}
 8019712:	bf00      	nop
 8019714:	0802597c 	.word	0x0802597c
 8019718:	08025cf0 	.word	0x08025cf0
 801971c:	080259d0 	.word	0x080259d0

08019720 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019720:	b590      	push	{r4, r7, lr}
 8019722:	b08b      	sub	sp, #44	; 0x2c
 8019724:	af02      	add	r7, sp, #8
 8019726:	6078      	str	r0, [r7, #4]
 8019728:	460b      	mov	r3, r1
 801972a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801972c:	2300      	movs	r3, #0
 801972e:	61fb      	str	r3, [r7, #28]
 8019730:	2300      	movs	r3, #0
 8019732:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019734:	2300      	movs	r3, #0
 8019736:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d106      	bne.n	801974c <tcp_split_unsent_seg+0x2c>
 801973e:	4b95      	ldr	r3, [pc, #596]	; (8019994 <tcp_split_unsent_seg+0x274>)
 8019740:	f240 324b 	movw	r2, #843	; 0x34b
 8019744:	4994      	ldr	r1, [pc, #592]	; (8019998 <tcp_split_unsent_seg+0x278>)
 8019746:	4895      	ldr	r0, [pc, #596]	; (801999c <tcp_split_unsent_seg+0x27c>)
 8019748:	f005 fd70 	bl	801f22c <iprintf>

  useg = pcb->unsent;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019750:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019752:	697b      	ldr	r3, [r7, #20]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d102      	bne.n	801975e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019758:	f04f 33ff 	mov.w	r3, #4294967295
 801975c:	e116      	b.n	801998c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801975e:	887b      	ldrh	r3, [r7, #2]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d109      	bne.n	8019778 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019764:	4b8b      	ldr	r3, [pc, #556]	; (8019994 <tcp_split_unsent_seg+0x274>)
 8019766:	f240 3253 	movw	r2, #851	; 0x353
 801976a:	498d      	ldr	r1, [pc, #564]	; (80199a0 <tcp_split_unsent_seg+0x280>)
 801976c:	488b      	ldr	r0, [pc, #556]	; (801999c <tcp_split_unsent_seg+0x27c>)
 801976e:	f005 fd5d 	bl	801f22c <iprintf>
    return ERR_VAL;
 8019772:	f06f 0305 	mvn.w	r3, #5
 8019776:	e109      	b.n	801998c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	891b      	ldrh	r3, [r3, #8]
 801977c:	887a      	ldrh	r2, [r7, #2]
 801977e:	429a      	cmp	r2, r3
 8019780:	d301      	bcc.n	8019786 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019782:	2300      	movs	r3, #0
 8019784:	e102      	b.n	801998c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801978a:	887a      	ldrh	r2, [r7, #2]
 801978c:	429a      	cmp	r2, r3
 801978e:	d906      	bls.n	801979e <tcp_split_unsent_seg+0x7e>
 8019790:	4b80      	ldr	r3, [pc, #512]	; (8019994 <tcp_split_unsent_seg+0x274>)
 8019792:	f240 325b 	movw	r2, #859	; 0x35b
 8019796:	4983      	ldr	r1, [pc, #524]	; (80199a4 <tcp_split_unsent_seg+0x284>)
 8019798:	4880      	ldr	r0, [pc, #512]	; (801999c <tcp_split_unsent_seg+0x27c>)
 801979a:	f005 fd47 	bl	801f22c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801979e:	697b      	ldr	r3, [r7, #20]
 80197a0:	891b      	ldrh	r3, [r3, #8]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d106      	bne.n	80197b4 <tcp_split_unsent_seg+0x94>
 80197a6:	4b7b      	ldr	r3, [pc, #492]	; (8019994 <tcp_split_unsent_seg+0x274>)
 80197a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80197ac:	497e      	ldr	r1, [pc, #504]	; (80199a8 <tcp_split_unsent_seg+0x288>)
 80197ae:	487b      	ldr	r0, [pc, #492]	; (801999c <tcp_split_unsent_seg+0x27c>)
 80197b0:	f005 fd3c 	bl	801f22c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	7a9b      	ldrb	r3, [r3, #10]
 80197b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80197ba:	7bfb      	ldrb	r3, [r7, #15]
 80197bc:	009b      	lsls	r3, r3, #2
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	f003 0304 	and.w	r3, r3, #4
 80197c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	891a      	ldrh	r2, [r3, #8]
 80197ca:	887b      	ldrh	r3, [r7, #2]
 80197cc:	1ad3      	subs	r3, r2, r3
 80197ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80197d0:	7bbb      	ldrb	r3, [r7, #14]
 80197d2:	b29a      	uxth	r2, r3
 80197d4:	89bb      	ldrh	r3, [r7, #12]
 80197d6:	4413      	add	r3, r2
 80197d8:	b29b      	uxth	r3, r3
 80197da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80197de:	4619      	mov	r1, r3
 80197e0:	2036      	movs	r0, #54	; 0x36
 80197e2:	f7fa fc53 	bl	801408c <pbuf_alloc>
 80197e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80197e8:	693b      	ldr	r3, [r7, #16]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	f000 80b7 	beq.w	801995e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80197f0:	697b      	ldr	r3, [r7, #20]
 80197f2:	685b      	ldr	r3, [r3, #4]
 80197f4:	891a      	ldrh	r2, [r3, #8]
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	891b      	ldrh	r3, [r3, #8]
 80197fa:	1ad3      	subs	r3, r2, r3
 80197fc:	b29a      	uxth	r2, r3
 80197fe:	887b      	ldrh	r3, [r7, #2]
 8019800:	4413      	add	r3, r2
 8019802:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019804:	697b      	ldr	r3, [r7, #20]
 8019806:	6858      	ldr	r0, [r3, #4]
 8019808:	693b      	ldr	r3, [r7, #16]
 801980a:	685a      	ldr	r2, [r3, #4]
 801980c:	7bbb      	ldrb	r3, [r7, #14]
 801980e:	18d1      	adds	r1, r2, r3
 8019810:	897b      	ldrh	r3, [r7, #10]
 8019812:	89ba      	ldrh	r2, [r7, #12]
 8019814:	f7fb f924 	bl	8014a60 <pbuf_copy_partial>
 8019818:	4603      	mov	r3, r0
 801981a:	461a      	mov	r2, r3
 801981c:	89bb      	ldrh	r3, [r7, #12]
 801981e:	4293      	cmp	r3, r2
 8019820:	f040 809f 	bne.w	8019962 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	68db      	ldr	r3, [r3, #12]
 8019828:	899b      	ldrh	r3, [r3, #12]
 801982a:	b29b      	uxth	r3, r3
 801982c:	4618      	mov	r0, r3
 801982e:	f7f9 fbc9 	bl	8012fc4 <lwip_htons>
 8019832:	4603      	mov	r3, r0
 8019834:	b2db      	uxtb	r3, r3
 8019836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801983a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801983c:	2300      	movs	r3, #0
 801983e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019840:	7efb      	ldrb	r3, [r7, #27]
 8019842:	f003 0308 	and.w	r3, r3, #8
 8019846:	2b00      	cmp	r3, #0
 8019848:	d007      	beq.n	801985a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801984a:	7efb      	ldrb	r3, [r7, #27]
 801984c:	f023 0308 	bic.w	r3, r3, #8
 8019850:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019852:	7ebb      	ldrb	r3, [r7, #26]
 8019854:	f043 0308 	orr.w	r3, r3, #8
 8019858:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801985a:	7efb      	ldrb	r3, [r7, #27]
 801985c:	f003 0301 	and.w	r3, r3, #1
 8019860:	2b00      	cmp	r3, #0
 8019862:	d007      	beq.n	8019874 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019864:	7efb      	ldrb	r3, [r7, #27]
 8019866:	f023 0301 	bic.w	r3, r3, #1
 801986a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801986c:	7ebb      	ldrb	r3, [r7, #26]
 801986e:	f043 0301 	orr.w	r3, r3, #1
 8019872:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019874:	697b      	ldr	r3, [r7, #20]
 8019876:	68db      	ldr	r3, [r3, #12]
 8019878:	685b      	ldr	r3, [r3, #4]
 801987a:	4618      	mov	r0, r3
 801987c:	f7f9 fbb7 	bl	8012fee <lwip_htonl>
 8019880:	4602      	mov	r2, r0
 8019882:	887b      	ldrh	r3, [r7, #2]
 8019884:	18d1      	adds	r1, r2, r3
 8019886:	7eba      	ldrb	r2, [r7, #26]
 8019888:	7bfb      	ldrb	r3, [r7, #15]
 801988a:	9300      	str	r3, [sp, #0]
 801988c:	460b      	mov	r3, r1
 801988e:	6939      	ldr	r1, [r7, #16]
 8019890:	6878      	ldr	r0, [r7, #4]
 8019892:	f7ff fa4f 	bl	8018d34 <tcp_create_segment>
 8019896:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019898:	69fb      	ldr	r3, [r7, #28]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d063      	beq.n	8019966 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	685b      	ldr	r3, [r3, #4]
 80198a2:	4618      	mov	r0, r3
 80198a4:	f7fa ff64 	bl	8014770 <pbuf_clen>
 80198a8:	4603      	mov	r3, r0
 80198aa:	461a      	mov	r2, r3
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198b2:	1a9b      	subs	r3, r3, r2
 80198b4:	b29a      	uxth	r2, r3
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	6858      	ldr	r0, [r3, #4]
 80198c0:	697b      	ldr	r3, [r7, #20]
 80198c2:	685b      	ldr	r3, [r3, #4]
 80198c4:	891a      	ldrh	r2, [r3, #8]
 80198c6:	89bb      	ldrh	r3, [r7, #12]
 80198c8:	1ad3      	subs	r3, r2, r3
 80198ca:	b29b      	uxth	r3, r3
 80198cc:	4619      	mov	r1, r3
 80198ce:	f7fa fd3b 	bl	8014348 <pbuf_realloc>
  useg->len -= remainder;
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	891a      	ldrh	r2, [r3, #8]
 80198d6:	89bb      	ldrh	r3, [r7, #12]
 80198d8:	1ad3      	subs	r3, r2, r3
 80198da:	b29a      	uxth	r2, r3
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80198e0:	697b      	ldr	r3, [r7, #20]
 80198e2:	68db      	ldr	r3, [r3, #12]
 80198e4:	899b      	ldrh	r3, [r3, #12]
 80198e6:	b29c      	uxth	r4, r3
 80198e8:	7efb      	ldrb	r3, [r7, #27]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7f9 fb69 	bl	8012fc4 <lwip_htons>
 80198f2:	4603      	mov	r3, r0
 80198f4:	461a      	mov	r2, r3
 80198f6:	697b      	ldr	r3, [r7, #20]
 80198f8:	68db      	ldr	r3, [r3, #12]
 80198fa:	4322      	orrs	r2, r4
 80198fc:	b292      	uxth	r2, r2
 80198fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	685b      	ldr	r3, [r3, #4]
 8019904:	4618      	mov	r0, r3
 8019906:	f7fa ff33 	bl	8014770 <pbuf_clen>
 801990a:	4603      	mov	r3, r0
 801990c:	461a      	mov	r2, r3
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019914:	4413      	add	r3, r2
 8019916:	b29a      	uxth	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801991e:	69fb      	ldr	r3, [r7, #28]
 8019920:	685b      	ldr	r3, [r3, #4]
 8019922:	4618      	mov	r0, r3
 8019924:	f7fa ff24 	bl	8014770 <pbuf_clen>
 8019928:	4603      	mov	r3, r0
 801992a:	461a      	mov	r2, r3
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019932:	4413      	add	r3, r2
 8019934:	b29a      	uxth	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801993c:	697b      	ldr	r3, [r7, #20]
 801993e:	681a      	ldr	r2, [r3, #0]
 8019940:	69fb      	ldr	r3, [r7, #28]
 8019942:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	69fa      	ldr	r2, [r7, #28]
 8019948:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801994a:	69fb      	ldr	r3, [r7, #28]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d103      	bne.n	801995a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2200      	movs	r2, #0
 8019956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801995a:	2300      	movs	r3, #0
 801995c:	e016      	b.n	801998c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801995e:	bf00      	nop
 8019960:	e002      	b.n	8019968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019962:	bf00      	nop
 8019964:	e000      	b.n	8019968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019966:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019968:	69fb      	ldr	r3, [r7, #28]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d006      	beq.n	801997c <tcp_split_unsent_seg+0x25c>
 801996e:	4b09      	ldr	r3, [pc, #36]	; (8019994 <tcp_split_unsent_seg+0x274>)
 8019970:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019974:	490d      	ldr	r1, [pc, #52]	; (80199ac <tcp_split_unsent_seg+0x28c>)
 8019976:	4809      	ldr	r0, [pc, #36]	; (801999c <tcp_split_unsent_seg+0x27c>)
 8019978:	f005 fc58 	bl	801f22c <iprintf>
  if (p != NULL) {
 801997c:	693b      	ldr	r3, [r7, #16]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d002      	beq.n	8019988 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019982:	6938      	ldr	r0, [r7, #16]
 8019984:	f7fa fe66 	bl	8014654 <pbuf_free>
  }

  return ERR_MEM;
 8019988:	f04f 33ff 	mov.w	r3, #4294967295
}
 801998c:	4618      	mov	r0, r3
 801998e:	3724      	adds	r7, #36	; 0x24
 8019990:	46bd      	mov	sp, r7
 8019992:	bd90      	pop	{r4, r7, pc}
 8019994:	0802597c 	.word	0x0802597c
 8019998:	08025d10 	.word	0x08025d10
 801999c:	080259d0 	.word	0x080259d0
 80199a0:	08025d34 	.word	0x08025d34
 80199a4:	08025d58 	.word	0x08025d58
 80199a8:	08025d68 	.word	0x08025d68
 80199ac:	08025d78 	.word	0x08025d78

080199b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80199b0:	b590      	push	{r4, r7, lr}
 80199b2:	b085      	sub	sp, #20
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d106      	bne.n	80199cc <tcp_send_fin+0x1c>
 80199be:	4b21      	ldr	r3, [pc, #132]	; (8019a44 <tcp_send_fin+0x94>)
 80199c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80199c4:	4920      	ldr	r1, [pc, #128]	; (8019a48 <tcp_send_fin+0x98>)
 80199c6:	4821      	ldr	r0, [pc, #132]	; (8019a4c <tcp_send_fin+0x9c>)
 80199c8:	f005 fc30 	bl	801f22c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d02e      	beq.n	8019a32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199d8:	60fb      	str	r3, [r7, #12]
 80199da:	e002      	b.n	80199e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d1f8      	bne.n	80199dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	68db      	ldr	r3, [r3, #12]
 80199ee:	899b      	ldrh	r3, [r3, #12]
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	4618      	mov	r0, r3
 80199f4:	f7f9 fae6 	bl	8012fc4 <lwip_htons>
 80199f8:	4603      	mov	r3, r0
 80199fa:	b2db      	uxtb	r3, r3
 80199fc:	f003 0307 	and.w	r3, r3, #7
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d116      	bne.n	8019a32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	68db      	ldr	r3, [r3, #12]
 8019a08:	899b      	ldrh	r3, [r3, #12]
 8019a0a:	b29c      	uxth	r4, r3
 8019a0c:	2001      	movs	r0, #1
 8019a0e:	f7f9 fad9 	bl	8012fc4 <lwip_htons>
 8019a12:	4603      	mov	r3, r0
 8019a14:	461a      	mov	r2, r3
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	68db      	ldr	r3, [r3, #12]
 8019a1a:	4322      	orrs	r2, r4
 8019a1c:	b292      	uxth	r2, r2
 8019a1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	8b5b      	ldrh	r3, [r3, #26]
 8019a24:	f043 0320 	orr.w	r3, r3, #32
 8019a28:	b29a      	uxth	r2, r3
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	e004      	b.n	8019a3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019a32:	2101      	movs	r1, #1
 8019a34:	6878      	ldr	r0, [r7, #4]
 8019a36:	f000 f80b 	bl	8019a50 <tcp_enqueue_flags>
 8019a3a:	4603      	mov	r3, r0
}
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	3714      	adds	r7, #20
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd90      	pop	{r4, r7, pc}
 8019a44:	0802597c 	.word	0x0802597c
 8019a48:	08025d84 	.word	0x08025d84
 8019a4c:	080259d0 	.word	0x080259d0

08019a50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b08a      	sub	sp, #40	; 0x28
 8019a54:	af02      	add	r7, sp, #8
 8019a56:	6078      	str	r0, [r7, #4]
 8019a58:	460b      	mov	r3, r1
 8019a5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019a60:	2300      	movs	r3, #0
 8019a62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019a64:	78fb      	ldrb	r3, [r7, #3]
 8019a66:	f003 0303 	and.w	r3, r3, #3
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d106      	bne.n	8019a7c <tcp_enqueue_flags+0x2c>
 8019a6e:	4b67      	ldr	r3, [pc, #412]	; (8019c0c <tcp_enqueue_flags+0x1bc>)
 8019a70:	f240 4211 	movw	r2, #1041	; 0x411
 8019a74:	4966      	ldr	r1, [pc, #408]	; (8019c10 <tcp_enqueue_flags+0x1c0>)
 8019a76:	4867      	ldr	r0, [pc, #412]	; (8019c14 <tcp_enqueue_flags+0x1c4>)
 8019a78:	f005 fbd8 	bl	801f22c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d106      	bne.n	8019a90 <tcp_enqueue_flags+0x40>
 8019a82:	4b62      	ldr	r3, [pc, #392]	; (8019c0c <tcp_enqueue_flags+0x1bc>)
 8019a84:	f240 4213 	movw	r2, #1043	; 0x413
 8019a88:	4963      	ldr	r1, [pc, #396]	; (8019c18 <tcp_enqueue_flags+0x1c8>)
 8019a8a:	4862      	ldr	r0, [pc, #392]	; (8019c14 <tcp_enqueue_flags+0x1c4>)
 8019a8c:	f005 fbce 	bl	801f22c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019a90:	78fb      	ldrb	r3, [r7, #3]
 8019a92:	f003 0302 	and.w	r3, r3, #2
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d001      	beq.n	8019a9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a9e:	7ffb      	ldrb	r3, [r7, #31]
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	b2db      	uxtb	r3, r3
 8019aa4:	f003 0304 	and.w	r3, r3, #4
 8019aa8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019aaa:	7dfb      	ldrb	r3, [r7, #23]
 8019aac:	b29b      	uxth	r3, r3
 8019aae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	2036      	movs	r0, #54	; 0x36
 8019ab6:	f7fa fae9 	bl	801408c <pbuf_alloc>
 8019aba:	6138      	str	r0, [r7, #16]
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d109      	bne.n	8019ad6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	8b5b      	ldrh	r3, [r3, #26]
 8019ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019aca:	b29a      	uxth	r2, r3
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ad4:	e095      	b.n	8019c02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019ad6:	693b      	ldr	r3, [r7, #16]
 8019ad8:	895a      	ldrh	r2, [r3, #10]
 8019ada:	7dfb      	ldrb	r3, [r7, #23]
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	d206      	bcs.n	8019af0 <tcp_enqueue_flags+0xa0>
 8019ae2:	4b4a      	ldr	r3, [pc, #296]	; (8019c0c <tcp_enqueue_flags+0x1bc>)
 8019ae4:	f240 4239 	movw	r2, #1081	; 0x439
 8019ae8:	494c      	ldr	r1, [pc, #304]	; (8019c1c <tcp_enqueue_flags+0x1cc>)
 8019aea:	484a      	ldr	r0, [pc, #296]	; (8019c14 <tcp_enqueue_flags+0x1c4>)
 8019aec:	f005 fb9e 	bl	801f22c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019af4:	78fa      	ldrb	r2, [r7, #3]
 8019af6:	7ffb      	ldrb	r3, [r7, #31]
 8019af8:	9300      	str	r3, [sp, #0]
 8019afa:	460b      	mov	r3, r1
 8019afc:	6939      	ldr	r1, [r7, #16]
 8019afe:	6878      	ldr	r0, [r7, #4]
 8019b00:	f7ff f918 	bl	8018d34 <tcp_create_segment>
 8019b04:	60f8      	str	r0, [r7, #12]
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d109      	bne.n	8019b20 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	8b5b      	ldrh	r3, [r3, #26]
 8019b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b14:	b29a      	uxth	r2, r3
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b1e:	e070      	b.n	8019c02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	68db      	ldr	r3, [r3, #12]
 8019b24:	f003 0303 	and.w	r3, r3, #3
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d006      	beq.n	8019b3a <tcp_enqueue_flags+0xea>
 8019b2c:	4b37      	ldr	r3, [pc, #220]	; (8019c0c <tcp_enqueue_flags+0x1bc>)
 8019b2e:	f240 4242 	movw	r2, #1090	; 0x442
 8019b32:	493b      	ldr	r1, [pc, #236]	; (8019c20 <tcp_enqueue_flags+0x1d0>)
 8019b34:	4837      	ldr	r0, [pc, #220]	; (8019c14 <tcp_enqueue_flags+0x1c4>)
 8019b36:	f005 fb79 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	891b      	ldrh	r3, [r3, #8]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d006      	beq.n	8019b50 <tcp_enqueue_flags+0x100>
 8019b42:	4b32      	ldr	r3, [pc, #200]	; (8019c0c <tcp_enqueue_flags+0x1bc>)
 8019b44:	f240 4243 	movw	r2, #1091	; 0x443
 8019b48:	4936      	ldr	r1, [pc, #216]	; (8019c24 <tcp_enqueue_flags+0x1d4>)
 8019b4a:	4832      	ldr	r0, [pc, #200]	; (8019c14 <tcp_enqueue_flags+0x1c4>)
 8019b4c:	f005 fb6e 	bl	801f22c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d103      	bne.n	8019b60 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	68fa      	ldr	r2, [r7, #12]
 8019b5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8019b5e:	e00d      	b.n	8019b7c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b64:	61bb      	str	r3, [r7, #24]
 8019b66:	e002      	b.n	8019b6e <tcp_enqueue_flags+0x11e>
 8019b68:	69bb      	ldr	r3, [r7, #24]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	61bb      	str	r3, [r7, #24]
 8019b6e:	69bb      	ldr	r3, [r7, #24]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d1f8      	bne.n	8019b68 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019b76:	69bb      	ldr	r3, [r7, #24]
 8019b78:	68fa      	ldr	r2, [r7, #12]
 8019b7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2200      	movs	r2, #0
 8019b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019b84:	78fb      	ldrb	r3, [r7, #3]
 8019b86:	f003 0302 	and.w	r3, r3, #2
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d104      	bne.n	8019b98 <tcp_enqueue_flags+0x148>
 8019b8e:	78fb      	ldrb	r3, [r7, #3]
 8019b90:	f003 0301 	and.w	r3, r3, #1
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d004      	beq.n	8019ba2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b9c:	1c5a      	adds	r2, r3, #1
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019ba2:	78fb      	ldrb	r3, [r7, #3]
 8019ba4:	f003 0301 	and.w	r3, r3, #1
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d006      	beq.n	8019bba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	8b5b      	ldrh	r3, [r3, #26]
 8019bb0:	f043 0320 	orr.w	r3, r3, #32
 8019bb4:	b29a      	uxth	r2, r3
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	685b      	ldr	r3, [r3, #4]
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f7fa fdd6 	bl	8014770 <pbuf_clen>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	461a      	mov	r2, r3
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019bce:	4413      	add	r3, r2
 8019bd0:	b29a      	uxth	r2, r3
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d00e      	beq.n	8019c00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d10a      	bne.n	8019c00 <tcp_enqueue_flags+0x1b0>
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d106      	bne.n	8019c00 <tcp_enqueue_flags+0x1b0>
 8019bf2:	4b06      	ldr	r3, [pc, #24]	; (8019c0c <tcp_enqueue_flags+0x1bc>)
 8019bf4:	f240 4265 	movw	r2, #1125	; 0x465
 8019bf8:	490b      	ldr	r1, [pc, #44]	; (8019c28 <tcp_enqueue_flags+0x1d8>)
 8019bfa:	4806      	ldr	r0, [pc, #24]	; (8019c14 <tcp_enqueue_flags+0x1c4>)
 8019bfc:	f005 fb16 	bl	801f22c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019c00:	2300      	movs	r3, #0
}
 8019c02:	4618      	mov	r0, r3
 8019c04:	3720      	adds	r7, #32
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
 8019c0a:	bf00      	nop
 8019c0c:	0802597c 	.word	0x0802597c
 8019c10:	08025da0 	.word	0x08025da0
 8019c14:	080259d0 	.word	0x080259d0
 8019c18:	08025df8 	.word	0x08025df8
 8019c1c:	08025e18 	.word	0x08025e18
 8019c20:	08025e54 	.word	0x08025e54
 8019c24:	08025e6c 	.word	0x08025e6c
 8019c28:	08025e98 	.word	0x08025e98

08019c2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019c2c:	b5b0      	push	{r4, r5, r7, lr}
 8019c2e:	b08a      	sub	sp, #40	; 0x28
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d106      	bne.n	8019c48 <tcp_output+0x1c>
 8019c3a:	4b9e      	ldr	r3, [pc, #632]	; (8019eb4 <tcp_output+0x288>)
 8019c3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019c40:	499d      	ldr	r1, [pc, #628]	; (8019eb8 <tcp_output+0x28c>)
 8019c42:	489e      	ldr	r0, [pc, #632]	; (8019ebc <tcp_output+0x290>)
 8019c44:	f005 faf2 	bl	801f22c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	7d1b      	ldrb	r3, [r3, #20]
 8019c4c:	2b01      	cmp	r3, #1
 8019c4e:	d106      	bne.n	8019c5e <tcp_output+0x32>
 8019c50:	4b98      	ldr	r3, [pc, #608]	; (8019eb4 <tcp_output+0x288>)
 8019c52:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019c56:	499a      	ldr	r1, [pc, #616]	; (8019ec0 <tcp_output+0x294>)
 8019c58:	4898      	ldr	r0, [pc, #608]	; (8019ebc <tcp_output+0x290>)
 8019c5a:	f005 fae7 	bl	801f22c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019c5e:	4b99      	ldr	r3, [pc, #612]	; (8019ec4 <tcp_output+0x298>)
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	687a      	ldr	r2, [r7, #4]
 8019c64:	429a      	cmp	r2, r3
 8019c66:	d101      	bne.n	8019c6c <tcp_output+0x40>
    return ERR_OK;
 8019c68:	2300      	movs	r3, #0
 8019c6a:	e1ce      	b.n	801a00a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	bf28      	it	cs
 8019c7c:	4613      	movcs	r3, r2
 8019c7e:	b29b      	uxth	r3, r3
 8019c80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d10b      	bne.n	8019ca6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	8b5b      	ldrh	r3, [r3, #26]
 8019c92:	f003 0302 	and.w	r3, r3, #2
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	f000 81aa 	beq.w	8019ff0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019c9c:	6878      	ldr	r0, [r7, #4]
 8019c9e:	f000 fdcb 	bl	801a838 <tcp_send_empty_ack>
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	e1b1      	b.n	801a00a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019ca6:	6879      	ldr	r1, [r7, #4]
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	3304      	adds	r3, #4
 8019cac:	461a      	mov	r2, r3
 8019cae:	6878      	ldr	r0, [r7, #4]
 8019cb0:	f7ff f824 	bl	8018cfc <tcp_route>
 8019cb4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019cb6:	697b      	ldr	r3, [r7, #20]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d102      	bne.n	8019cc2 <tcp_output+0x96>
    return ERR_RTE;
 8019cbc:	f06f 0303 	mvn.w	r3, #3
 8019cc0:	e1a3      	b.n	801a00a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d003      	beq.n	8019cd0 <tcp_output+0xa4>
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d111      	bne.n	8019cf4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019cd0:	697b      	ldr	r3, [r7, #20]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d002      	beq.n	8019cdc <tcp_output+0xb0>
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	3304      	adds	r3, #4
 8019cda:	e000      	b.n	8019cde <tcp_output+0xb2>
 8019cdc:	2300      	movs	r3, #0
 8019cde:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019ce0:	693b      	ldr	r3, [r7, #16]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d102      	bne.n	8019cec <tcp_output+0xc0>
      return ERR_RTE;
 8019ce6:	f06f 0303 	mvn.w	r3, #3
 8019cea:	e18e      	b.n	801a00a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019cec:	693b      	ldr	r3, [r7, #16]
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf6:	68db      	ldr	r3, [r3, #12]
 8019cf8:	685b      	ldr	r3, [r3, #4]
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f7f9 f977 	bl	8012fee <lwip_htonl>
 8019d00:	4602      	mov	r2, r0
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d06:	1ad3      	subs	r3, r2, r3
 8019d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d0a:	8912      	ldrh	r2, [r2, #8]
 8019d0c:	4413      	add	r3, r2
 8019d0e:	69ba      	ldr	r2, [r7, #24]
 8019d10:	429a      	cmp	r2, r3
 8019d12:	d227      	bcs.n	8019d64 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d1a:	461a      	mov	r2, r3
 8019d1c:	69bb      	ldr	r3, [r7, #24]
 8019d1e:	4293      	cmp	r3, r2
 8019d20:	d114      	bne.n	8019d4c <tcp_output+0x120>
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d110      	bne.n	8019d4c <tcp_output+0x120>
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d10b      	bne.n	8019d4c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	2200      	movs	r2, #0
 8019d38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	2201      	movs	r2, #1
 8019d40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2200      	movs	r2, #0
 8019d48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	8b5b      	ldrh	r3, [r3, #26]
 8019d50:	f003 0302 	and.w	r3, r3, #2
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	f000 814d 	beq.w	8019ff4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019d5a:	6878      	ldr	r0, [r7, #4]
 8019d5c:	f000 fd6c 	bl	801a838 <tcp_send_empty_ack>
 8019d60:	4603      	mov	r3, r0
 8019d62:	e152      	b.n	801a00a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2200      	movs	r2, #0
 8019d68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d70:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019d72:	6a3b      	ldr	r3, [r7, #32]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	f000 811c 	beq.w	8019fb2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019d7a:	e002      	b.n	8019d82 <tcp_output+0x156>
 8019d7c:	6a3b      	ldr	r3, [r7, #32]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	623b      	str	r3, [r7, #32]
 8019d82:	6a3b      	ldr	r3, [r7, #32]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d1f8      	bne.n	8019d7c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019d8a:	e112      	b.n	8019fb2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d8e:	68db      	ldr	r3, [r3, #12]
 8019d90:	899b      	ldrh	r3, [r3, #12]
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7f9 f915 	bl	8012fc4 <lwip_htons>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	b2db      	uxtb	r3, r3
 8019d9e:	f003 0304 	and.w	r3, r3, #4
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d006      	beq.n	8019db4 <tcp_output+0x188>
 8019da6:	4b43      	ldr	r3, [pc, #268]	; (8019eb4 <tcp_output+0x288>)
 8019da8:	f240 5236 	movw	r2, #1334	; 0x536
 8019dac:	4946      	ldr	r1, [pc, #280]	; (8019ec8 <tcp_output+0x29c>)
 8019dae:	4843      	ldr	r0, [pc, #268]	; (8019ebc <tcp_output+0x290>)
 8019db0:	f005 fa3c 	bl	801f22c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d01f      	beq.n	8019dfc <tcp_output+0x1d0>
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	8b5b      	ldrh	r3, [r3, #26]
 8019dc0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d119      	bne.n	8019dfc <tcp_output+0x1d0>
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d00b      	beq.n	8019de8 <tcp_output+0x1bc>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d110      	bne.n	8019dfc <tcp_output+0x1d0>
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019dde:	891a      	ldrh	r2, [r3, #8]
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019de4:	429a      	cmp	r2, r3
 8019de6:	d209      	bcs.n	8019dfc <tcp_output+0x1d0>
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d004      	beq.n	8019dfc <tcp_output+0x1d0>
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019df8:	2b08      	cmp	r3, #8
 8019dfa:	d901      	bls.n	8019e00 <tcp_output+0x1d4>
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	e000      	b.n	8019e02 <tcp_output+0x1d6>
 8019e00:	2300      	movs	r3, #0
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d106      	bne.n	8019e14 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	8b5b      	ldrh	r3, [r3, #26]
 8019e0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	f000 80e4 	beq.w	8019fdc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	7d1b      	ldrb	r3, [r3, #20]
 8019e18:	2b02      	cmp	r3, #2
 8019e1a:	d00d      	beq.n	8019e38 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1e:	68db      	ldr	r3, [r3, #12]
 8019e20:	899b      	ldrh	r3, [r3, #12]
 8019e22:	b29c      	uxth	r4, r3
 8019e24:	2010      	movs	r0, #16
 8019e26:	f7f9 f8cd 	bl	8012fc4 <lwip_htons>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e30:	68db      	ldr	r3, [r3, #12]
 8019e32:	4322      	orrs	r2, r4
 8019e34:	b292      	uxth	r2, r2
 8019e36:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019e38:	697a      	ldr	r2, [r7, #20]
 8019e3a:	6879      	ldr	r1, [r7, #4]
 8019e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e3e:	f000 f909 	bl	801a054 <tcp_output_segment>
 8019e42:	4603      	mov	r3, r0
 8019e44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d009      	beq.n	8019e62 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	8b5b      	ldrh	r3, [r3, #26]
 8019e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e56:	b29a      	uxth	r2, r3
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	835a      	strh	r2, [r3, #26]
      return err;
 8019e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e60:	e0d3      	b.n	801a00a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e64:	681a      	ldr	r2, [r3, #0]
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	7d1b      	ldrb	r3, [r3, #20]
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	d006      	beq.n	8019e80 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	8b5b      	ldrh	r3, [r3, #26]
 8019e76:	f023 0303 	bic.w	r3, r3, #3
 8019e7a:	b29a      	uxth	r2, r3
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e82:	68db      	ldr	r3, [r3, #12]
 8019e84:	685b      	ldr	r3, [r3, #4]
 8019e86:	4618      	mov	r0, r3
 8019e88:	f7f9 f8b1 	bl	8012fee <lwip_htonl>
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e90:	891b      	ldrh	r3, [r3, #8]
 8019e92:	461d      	mov	r5, r3
 8019e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e96:	68db      	ldr	r3, [r3, #12]
 8019e98:	899b      	ldrh	r3, [r3, #12]
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7f9 f891 	bl	8012fc4 <lwip_htons>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	b2db      	uxtb	r3, r3
 8019ea6:	f003 0303 	and.w	r3, r3, #3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d00e      	beq.n	8019ecc <tcp_output+0x2a0>
 8019eae:	2301      	movs	r3, #1
 8019eb0:	e00d      	b.n	8019ece <tcp_output+0x2a2>
 8019eb2:	bf00      	nop
 8019eb4:	0802597c 	.word	0x0802597c
 8019eb8:	08025ec0 	.word	0x08025ec0
 8019ebc:	080259d0 	.word	0x080259d0
 8019ec0:	08025ed8 	.word	0x08025ed8
 8019ec4:	2000e184 	.word	0x2000e184
 8019ec8:	08025f00 	.word	0x08025f00
 8019ecc:	2300      	movs	r3, #0
 8019ece:	442b      	add	r3, r5
 8019ed0:	4423      	add	r3, r4
 8019ed2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019ed8:	68bb      	ldr	r3, [r7, #8]
 8019eda:	1ad3      	subs	r3, r2, r3
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	da02      	bge.n	8019ee6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	68ba      	ldr	r2, [r7, #8]
 8019ee4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee8:	891b      	ldrh	r3, [r3, #8]
 8019eea:	461c      	mov	r4, r3
 8019eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eee:	68db      	ldr	r3, [r3, #12]
 8019ef0:	899b      	ldrh	r3, [r3, #12]
 8019ef2:	b29b      	uxth	r3, r3
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f9 f865 	bl	8012fc4 <lwip_htons>
 8019efa:	4603      	mov	r3, r0
 8019efc:	b2db      	uxtb	r3, r3
 8019efe:	f003 0303 	and.w	r3, r3, #3
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d001      	beq.n	8019f0a <tcp_output+0x2de>
 8019f06:	2301      	movs	r3, #1
 8019f08:	e000      	b.n	8019f0c <tcp_output+0x2e0>
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	4423      	add	r3, r4
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d049      	beq.n	8019fa6 <tcp_output+0x37a>
      seg->next = NULL;
 8019f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f14:	2200      	movs	r2, #0
 8019f16:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d105      	bne.n	8019f2c <tcp_output+0x300>
        pcb->unacked = seg;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f24:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f28:	623b      	str	r3, [r7, #32]
 8019f2a:	e03f      	b.n	8019fac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2e:	68db      	ldr	r3, [r3, #12]
 8019f30:	685b      	ldr	r3, [r3, #4]
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7f9 f85b 	bl	8012fee <lwip_htonl>
 8019f38:	4604      	mov	r4, r0
 8019f3a:	6a3b      	ldr	r3, [r7, #32]
 8019f3c:	68db      	ldr	r3, [r3, #12]
 8019f3e:	685b      	ldr	r3, [r3, #4]
 8019f40:	4618      	mov	r0, r3
 8019f42:	f7f9 f854 	bl	8012fee <lwip_htonl>
 8019f46:	4603      	mov	r3, r0
 8019f48:	1ae3      	subs	r3, r4, r3
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	da24      	bge.n	8019f98 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	3370      	adds	r3, #112	; 0x70
 8019f52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019f54:	e002      	b.n	8019f5c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019f56:	69fb      	ldr	r3, [r7, #28]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019f5c:	69fb      	ldr	r3, [r7, #28]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d011      	beq.n	8019f88 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019f64:	69fb      	ldr	r3, [r7, #28]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	68db      	ldr	r3, [r3, #12]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7f9 f83e 	bl	8012fee <lwip_htonl>
 8019f72:	4604      	mov	r4, r0
 8019f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f76:	68db      	ldr	r3, [r3, #12]
 8019f78:	685b      	ldr	r3, [r3, #4]
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7f9 f837 	bl	8012fee <lwip_htonl>
 8019f80:	4603      	mov	r3, r0
 8019f82:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	dbe6      	blt.n	8019f56 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019f88:	69fb      	ldr	r3, [r7, #28]
 8019f8a:	681a      	ldr	r2, [r3, #0]
 8019f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019f90:	69fb      	ldr	r3, [r7, #28]
 8019f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f94:	601a      	str	r2, [r3, #0]
 8019f96:	e009      	b.n	8019fac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019f98:	6a3b      	ldr	r3, [r7, #32]
 8019f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f9c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019f9e:	6a3b      	ldr	r3, [r7, #32]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	623b      	str	r3, [r7, #32]
 8019fa4:	e002      	b.n	8019fac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019fa8:	f7fb ff1d 	bl	8015de6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019fb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d012      	beq.n	8019fde <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7f9 f815 	bl	8012fee <lwip_htonl>
 8019fc4:	4602      	mov	r2, r0
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fca:	1ad3      	subs	r3, r2, r3
 8019fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fce:	8912      	ldrh	r2, [r2, #8]
 8019fd0:	4413      	add	r3, r2
  while (seg != NULL &&
 8019fd2:	69ba      	ldr	r2, [r7, #24]
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	f4bf aed9 	bcs.w	8019d8c <tcp_output+0x160>
 8019fda:	e000      	b.n	8019fde <tcp_output+0x3b2>
      break;
 8019fdc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d108      	bne.n	8019ff8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	2200      	movs	r2, #0
 8019fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019fee:	e004      	b.n	8019ffa <tcp_output+0x3ce>
    goto output_done;
 8019ff0:	bf00      	nop
 8019ff2:	e002      	b.n	8019ffa <tcp_output+0x3ce>
    goto output_done;
 8019ff4:	bf00      	nop
 8019ff6:	e000      	b.n	8019ffa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019ff8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	8b5b      	ldrh	r3, [r3, #26]
 8019ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a002:	b29a      	uxth	r2, r3
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a008:	2300      	movs	r3, #0
}
 801a00a:	4618      	mov	r0, r3
 801a00c:	3728      	adds	r7, #40	; 0x28
 801a00e:	46bd      	mov	sp, r7
 801a010:	bdb0      	pop	{r4, r5, r7, pc}
 801a012:	bf00      	nop

0801a014 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a014:	b580      	push	{r7, lr}
 801a016:	b082      	sub	sp, #8
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d106      	bne.n	801a030 <tcp_output_segment_busy+0x1c>
 801a022:	4b09      	ldr	r3, [pc, #36]	; (801a048 <tcp_output_segment_busy+0x34>)
 801a024:	f240 529a 	movw	r2, #1434	; 0x59a
 801a028:	4908      	ldr	r1, [pc, #32]	; (801a04c <tcp_output_segment_busy+0x38>)
 801a02a:	4809      	ldr	r0, [pc, #36]	; (801a050 <tcp_output_segment_busy+0x3c>)
 801a02c:	f005 f8fe 	bl	801f22c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	685b      	ldr	r3, [r3, #4]
 801a034:	7b9b      	ldrb	r3, [r3, #14]
 801a036:	2b01      	cmp	r3, #1
 801a038:	d001      	beq.n	801a03e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a03a:	2301      	movs	r3, #1
 801a03c:	e000      	b.n	801a040 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a03e:	2300      	movs	r3, #0
}
 801a040:	4618      	mov	r0, r3
 801a042:	3708      	adds	r7, #8
 801a044:	46bd      	mov	sp, r7
 801a046:	bd80      	pop	{r7, pc}
 801a048:	0802597c 	.word	0x0802597c
 801a04c:	08025f18 	.word	0x08025f18
 801a050:	080259d0 	.word	0x080259d0

0801a054 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a054:	b5b0      	push	{r4, r5, r7, lr}
 801a056:	b08c      	sub	sp, #48	; 0x30
 801a058:	af04      	add	r7, sp, #16
 801a05a:	60f8      	str	r0, [r7, #12]
 801a05c:	60b9      	str	r1, [r7, #8]
 801a05e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d106      	bne.n	801a074 <tcp_output_segment+0x20>
 801a066:	4b63      	ldr	r3, [pc, #396]	; (801a1f4 <tcp_output_segment+0x1a0>)
 801a068:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a06c:	4962      	ldr	r1, [pc, #392]	; (801a1f8 <tcp_output_segment+0x1a4>)
 801a06e:	4863      	ldr	r0, [pc, #396]	; (801a1fc <tcp_output_segment+0x1a8>)
 801a070:	f005 f8dc 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d106      	bne.n	801a088 <tcp_output_segment+0x34>
 801a07a:	4b5e      	ldr	r3, [pc, #376]	; (801a1f4 <tcp_output_segment+0x1a0>)
 801a07c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a080:	495f      	ldr	r1, [pc, #380]	; (801a200 <tcp_output_segment+0x1ac>)
 801a082:	485e      	ldr	r0, [pc, #376]	; (801a1fc <tcp_output_segment+0x1a8>)
 801a084:	f005 f8d2 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d106      	bne.n	801a09c <tcp_output_segment+0x48>
 801a08e:	4b59      	ldr	r3, [pc, #356]	; (801a1f4 <tcp_output_segment+0x1a0>)
 801a090:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a094:	495b      	ldr	r1, [pc, #364]	; (801a204 <tcp_output_segment+0x1b0>)
 801a096:	4859      	ldr	r0, [pc, #356]	; (801a1fc <tcp_output_segment+0x1a8>)
 801a098:	f005 f8c8 	bl	801f22c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a09c:	68f8      	ldr	r0, [r7, #12]
 801a09e:	f7ff ffb9 	bl	801a014 <tcp_output_segment_busy>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d001      	beq.n	801a0ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	e09f      	b.n	801a1ec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	68dc      	ldr	r4, [r3, #12]
 801a0b4:	4610      	mov	r0, r2
 801a0b6:	f7f8 ff9a 	bl	8012fee <lwip_htonl>
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	68dc      	ldr	r4, [r3, #12]
 801a0c6:	4610      	mov	r0, r2
 801a0c8:	f7f8 ff7c 	bl	8012fc4 <lwip_htons>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0d4:	68ba      	ldr	r2, [r7, #8]
 801a0d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a0d8:	441a      	add	r2, r3
 801a0da:	68bb      	ldr	r3, [r7, #8]
 801a0dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	68db      	ldr	r3, [r3, #12]
 801a0e2:	3314      	adds	r3, #20
 801a0e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	7a9b      	ldrb	r3, [r3, #10]
 801a0ea:	f003 0301 	and.w	r3, r3, #1
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d015      	beq.n	801a11e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	3304      	adds	r3, #4
 801a0f6:	461a      	mov	r2, r3
 801a0f8:	6879      	ldr	r1, [r7, #4]
 801a0fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a0fe:	f7fc fa37 	bl	8016570 <tcp_eff_send_mss_netif>
 801a102:	4603      	mov	r3, r0
 801a104:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a106:	8b7b      	ldrh	r3, [r7, #26]
 801a108:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7f8 ff6e 	bl	8012fee <lwip_htonl>
 801a112:	4602      	mov	r2, r0
 801a114:	69fb      	ldr	r3, [r7, #28]
 801a116:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a118:	69fb      	ldr	r3, [r7, #28]
 801a11a:	3304      	adds	r3, #4
 801a11c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a124:	2b00      	cmp	r3, #0
 801a126:	da02      	bge.n	801a12e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	2200      	movs	r2, #0
 801a12c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a132:	2b00      	cmp	r3, #0
 801a134:	d10c      	bne.n	801a150 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a136:	4b34      	ldr	r3, [pc, #208]	; (801a208 <tcp_output_segment+0x1b4>)
 801a138:	681a      	ldr	r2, [r3, #0]
 801a13a:	68bb      	ldr	r3, [r7, #8]
 801a13c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	68db      	ldr	r3, [r3, #12]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	4618      	mov	r0, r3
 801a146:	f7f8 ff52 	bl	8012fee <lwip_htonl>
 801a14a:	4602      	mov	r2, r0
 801a14c:	68bb      	ldr	r3, [r7, #8]
 801a14e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	68da      	ldr	r2, [r3, #12]
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	685b      	ldr	r3, [r3, #4]
 801a158:	685b      	ldr	r3, [r3, #4]
 801a15a:	1ad3      	subs	r3, r2, r3
 801a15c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	685b      	ldr	r3, [r3, #4]
 801a162:	8959      	ldrh	r1, [r3, #10]
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	685b      	ldr	r3, [r3, #4]
 801a168:	8b3a      	ldrh	r2, [r7, #24]
 801a16a:	1a8a      	subs	r2, r1, r2
 801a16c:	b292      	uxth	r2, r2
 801a16e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	685b      	ldr	r3, [r3, #4]
 801a174:	8919      	ldrh	r1, [r3, #8]
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	685b      	ldr	r3, [r3, #4]
 801a17a:	8b3a      	ldrh	r2, [r7, #24]
 801a17c:	1a8a      	subs	r2, r1, r2
 801a17e:	b292      	uxth	r2, r2
 801a180:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	685b      	ldr	r3, [r3, #4]
 801a186:	68fa      	ldr	r2, [r7, #12]
 801a188:	68d2      	ldr	r2, [r2, #12]
 801a18a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	68db      	ldr	r3, [r3, #12]
 801a190:	2200      	movs	r2, #0
 801a192:	741a      	strb	r2, [r3, #16]
 801a194:	2200      	movs	r2, #0
 801a196:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	68db      	ldr	r3, [r3, #12]
 801a19c:	f103 0214 	add.w	r2, r3, #20
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	7a9b      	ldrb	r3, [r3, #10]
 801a1a4:	009b      	lsls	r3, r3, #2
 801a1a6:	f003 0304 	and.w	r3, r3, #4
 801a1aa:	4413      	add	r3, r2
 801a1ac:	69fa      	ldr	r2, [r7, #28]
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	d006      	beq.n	801a1c0 <tcp_output_segment+0x16c>
 801a1b2:	4b10      	ldr	r3, [pc, #64]	; (801a1f4 <tcp_output_segment+0x1a0>)
 801a1b4:	f240 621c 	movw	r2, #1564	; 0x61c
 801a1b8:	4914      	ldr	r1, [pc, #80]	; (801a20c <tcp_output_segment+0x1b8>)
 801a1ba:	4810      	ldr	r0, [pc, #64]	; (801a1fc <tcp_output_segment+0x1a8>)
 801a1bc:	f005 f836 	bl	801f22c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	6858      	ldr	r0, [r3, #4]
 801a1c4:	68b9      	ldr	r1, [r7, #8]
 801a1c6:	68bb      	ldr	r3, [r7, #8]
 801a1c8:	1d1c      	adds	r4, r3, #4
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	7add      	ldrb	r5, [r3, #11]
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	7a9b      	ldrb	r3, [r3, #10]
 801a1d2:	687a      	ldr	r2, [r7, #4]
 801a1d4:	9202      	str	r2, [sp, #8]
 801a1d6:	2206      	movs	r2, #6
 801a1d8:	9201      	str	r2, [sp, #4]
 801a1da:	9300      	str	r3, [sp, #0]
 801a1dc:	462b      	mov	r3, r5
 801a1de:	4622      	mov	r2, r4
 801a1e0:	f002 fd96 	bl	801cd10 <ip4_output_if>
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3720      	adds	r7, #32
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bdb0      	pop	{r4, r5, r7, pc}
 801a1f4:	0802597c 	.word	0x0802597c
 801a1f8:	08025f40 	.word	0x08025f40
 801a1fc:	080259d0 	.word	0x080259d0
 801a200:	08025f60 	.word	0x08025f60
 801a204:	08025f80 	.word	0x08025f80
 801a208:	2000e174 	.word	0x2000e174
 801a20c:	08025fa4 	.word	0x08025fa4

0801a210 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a210:	b5b0      	push	{r4, r5, r7, lr}
 801a212:	b084      	sub	sp, #16
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d106      	bne.n	801a22c <tcp_rexmit_rto_prepare+0x1c>
 801a21e:	4b31      	ldr	r3, [pc, #196]	; (801a2e4 <tcp_rexmit_rto_prepare+0xd4>)
 801a220:	f240 6263 	movw	r2, #1635	; 0x663
 801a224:	4930      	ldr	r1, [pc, #192]	; (801a2e8 <tcp_rexmit_rto_prepare+0xd8>)
 801a226:	4831      	ldr	r0, [pc, #196]	; (801a2ec <tcp_rexmit_rto_prepare+0xdc>)
 801a228:	f005 f800 	bl	801f22c <iprintf>

  if (pcb->unacked == NULL) {
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a230:	2b00      	cmp	r3, #0
 801a232:	d102      	bne.n	801a23a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a234:	f06f 0305 	mvn.w	r3, #5
 801a238:	e050      	b.n	801a2dc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a23e:	60fb      	str	r3, [r7, #12]
 801a240:	e00b      	b.n	801a25a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a242:	68f8      	ldr	r0, [r7, #12]
 801a244:	f7ff fee6 	bl	801a014 <tcp_output_segment_busy>
 801a248:	4603      	mov	r3, r0
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d002      	beq.n	801a254 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a24e:	f06f 0305 	mvn.w	r3, #5
 801a252:	e043      	b.n	801a2dc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	60fb      	str	r3, [r7, #12]
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d1ef      	bne.n	801a242 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a262:	68f8      	ldr	r0, [r7, #12]
 801a264:	f7ff fed6 	bl	801a014 <tcp_output_segment_busy>
 801a268:	4603      	mov	r3, r0
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d002      	beq.n	801a274 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a26e:	f06f 0305 	mvn.w	r3, #5
 801a272:	e033      	b.n	801a2dc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2200      	movs	r2, #0
 801a288:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	8b5b      	ldrh	r3, [r3, #26]
 801a28e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a292:	b29a      	uxth	r2, r3
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	68db      	ldr	r3, [r3, #12]
 801a29c:	685b      	ldr	r3, [r3, #4]
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f7f8 fea5 	bl	8012fee <lwip_htonl>
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	891b      	ldrh	r3, [r3, #8]
 801a2aa:	461d      	mov	r5, r3
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	68db      	ldr	r3, [r3, #12]
 801a2b0:	899b      	ldrh	r3, [r3, #12]
 801a2b2:	b29b      	uxth	r3, r3
 801a2b4:	4618      	mov	r0, r3
 801a2b6:	f7f8 fe85 	bl	8012fc4 <lwip_htons>
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	b2db      	uxtb	r3, r3
 801a2be:	f003 0303 	and.w	r3, r3, #3
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d001      	beq.n	801a2ca <tcp_rexmit_rto_prepare+0xba>
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	e000      	b.n	801a2cc <tcp_rexmit_rto_prepare+0xbc>
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	442b      	add	r3, r5
 801a2ce:	18e2      	adds	r2, r4, r3
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a2da:	2300      	movs	r3, #0
}
 801a2dc:	4618      	mov	r0, r3
 801a2de:	3710      	adds	r7, #16
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bdb0      	pop	{r4, r5, r7, pc}
 801a2e4:	0802597c 	.word	0x0802597c
 801a2e8:	08025fb8 	.word	0x08025fb8
 801a2ec:	080259d0 	.word	0x080259d0

0801a2f0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b082      	sub	sp, #8
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d106      	bne.n	801a30c <tcp_rexmit_rto_commit+0x1c>
 801a2fe:	4b0d      	ldr	r3, [pc, #52]	; (801a334 <tcp_rexmit_rto_commit+0x44>)
 801a300:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a304:	490c      	ldr	r1, [pc, #48]	; (801a338 <tcp_rexmit_rto_commit+0x48>)
 801a306:	480d      	ldr	r0, [pc, #52]	; (801a33c <tcp_rexmit_rto_commit+0x4c>)
 801a308:	f004 ff90 	bl	801f22c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a312:	2bff      	cmp	r3, #255	; 0xff
 801a314:	d007      	beq.n	801a326 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a31c:	3301      	adds	r3, #1
 801a31e:	b2da      	uxtb	r2, r3
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a326:	6878      	ldr	r0, [r7, #4]
 801a328:	f7ff fc80 	bl	8019c2c <tcp_output>
}
 801a32c:	bf00      	nop
 801a32e:	3708      	adds	r7, #8
 801a330:	46bd      	mov	sp, r7
 801a332:	bd80      	pop	{r7, pc}
 801a334:	0802597c 	.word	0x0802597c
 801a338:	08025fdc 	.word	0x08025fdc
 801a33c:	080259d0 	.word	0x080259d0

0801a340 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b082      	sub	sp, #8
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d106      	bne.n	801a35c <tcp_rexmit_rto+0x1c>
 801a34e:	4b0a      	ldr	r3, [pc, #40]	; (801a378 <tcp_rexmit_rto+0x38>)
 801a350:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a354:	4909      	ldr	r1, [pc, #36]	; (801a37c <tcp_rexmit_rto+0x3c>)
 801a356:	480a      	ldr	r0, [pc, #40]	; (801a380 <tcp_rexmit_rto+0x40>)
 801a358:	f004 ff68 	bl	801f22c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	f7ff ff57 	bl	801a210 <tcp_rexmit_rto_prepare>
 801a362:	4603      	mov	r3, r0
 801a364:	2b00      	cmp	r3, #0
 801a366:	d102      	bne.n	801a36e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	f7ff ffc1 	bl	801a2f0 <tcp_rexmit_rto_commit>
  }
}
 801a36e:	bf00      	nop
 801a370:	3708      	adds	r7, #8
 801a372:	46bd      	mov	sp, r7
 801a374:	bd80      	pop	{r7, pc}
 801a376:	bf00      	nop
 801a378:	0802597c 	.word	0x0802597c
 801a37c:	08026000 	.word	0x08026000
 801a380:	080259d0 	.word	0x080259d0

0801a384 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a384:	b590      	push	{r4, r7, lr}
 801a386:	b085      	sub	sp, #20
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d106      	bne.n	801a3a0 <tcp_rexmit+0x1c>
 801a392:	4b2f      	ldr	r3, [pc, #188]	; (801a450 <tcp_rexmit+0xcc>)
 801a394:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a398:	492e      	ldr	r1, [pc, #184]	; (801a454 <tcp_rexmit+0xd0>)
 801a39a:	482f      	ldr	r0, [pc, #188]	; (801a458 <tcp_rexmit+0xd4>)
 801a39c:	f004 ff46 	bl	801f22c <iprintf>

  if (pcb->unacked == NULL) {
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d102      	bne.n	801a3ae <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a3a8:	f06f 0305 	mvn.w	r3, #5
 801a3ac:	e04c      	b.n	801a448 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3b2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a3b4:	68b8      	ldr	r0, [r7, #8]
 801a3b6:	f7ff fe2d 	bl	801a014 <tcp_output_segment_busy>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d002      	beq.n	801a3c6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a3c0:	f06f 0305 	mvn.w	r3, #5
 801a3c4:	e040      	b.n	801a448 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	681a      	ldr	r2, [r3, #0]
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	336c      	adds	r3, #108	; 0x6c
 801a3d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a3d4:	e002      	b.n	801a3dc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d011      	beq.n	801a408 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	68db      	ldr	r3, [r3, #12]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f7f8 fdfe 	bl	8012fee <lwip_htonl>
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	68bb      	ldr	r3, [r7, #8]
 801a3f6:	68db      	ldr	r3, [r3, #12]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f7f8 fdf7 	bl	8012fee <lwip_htonl>
 801a400:	4603      	mov	r3, r0
 801a402:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a404:	2b00      	cmp	r3, #0
 801a406:	dbe6      	blt.n	801a3d6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	681a      	ldr	r2, [r3, #0]
 801a40c:	68bb      	ldr	r3, [r7, #8]
 801a40e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	68ba      	ldr	r2, [r7, #8]
 801a414:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d103      	bne.n	801a426 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	2200      	movs	r2, #0
 801a422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a42c:	2bff      	cmp	r3, #255	; 0xff
 801a42e:	d007      	beq.n	801a440 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a436:	3301      	adds	r3, #1
 801a438:	b2da      	uxtb	r2, r3
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	2200      	movs	r2, #0
 801a444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a446:	2300      	movs	r3, #0
}
 801a448:	4618      	mov	r0, r3
 801a44a:	3714      	adds	r7, #20
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd90      	pop	{r4, r7, pc}
 801a450:	0802597c 	.word	0x0802597c
 801a454:	0802601c 	.word	0x0802601c
 801a458:	080259d0 	.word	0x080259d0

0801a45c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d106      	bne.n	801a478 <tcp_rexmit_fast+0x1c>
 801a46a:	4b2a      	ldr	r3, [pc, #168]	; (801a514 <tcp_rexmit_fast+0xb8>)
 801a46c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a470:	4929      	ldr	r1, [pc, #164]	; (801a518 <tcp_rexmit_fast+0xbc>)
 801a472:	482a      	ldr	r0, [pc, #168]	; (801a51c <tcp_rexmit_fast+0xc0>)
 801a474:	f004 feda 	bl	801f22c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d044      	beq.n	801a50a <tcp_rexmit_fast+0xae>
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	8b5b      	ldrh	r3, [r3, #26]
 801a484:	f003 0304 	and.w	r3, r3, #4
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d13e      	bne.n	801a50a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f7ff ff79 	bl	801a384 <tcp_rexmit>
 801a492:	4603      	mov	r3, r0
 801a494:	2b00      	cmp	r3, #0
 801a496:	d138      	bne.n	801a50a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a4a4:	4293      	cmp	r3, r2
 801a4a6:	bf28      	it	cs
 801a4a8:	4613      	movcs	r3, r2
 801a4aa:	b29b      	uxth	r3, r3
 801a4ac:	0fda      	lsrs	r2, r3, #31
 801a4ae:	4413      	add	r3, r2
 801a4b0:	105b      	asrs	r3, r3, #1
 801a4b2:	b29a      	uxth	r2, r3
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4c6:	005b      	lsls	r3, r3, #1
 801a4c8:	429a      	cmp	r2, r3
 801a4ca:	d206      	bcs.n	801a4da <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4d0:	005b      	lsls	r3, r3, #1
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4e4:	4619      	mov	r1, r3
 801a4e6:	0049      	lsls	r1, r1, #1
 801a4e8:	440b      	add	r3, r1
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	4413      	add	r3, r2
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	8b5b      	ldrh	r3, [r3, #26]
 801a4fa:	f043 0304 	orr.w	r3, r3, #4
 801a4fe:	b29a      	uxth	r2, r3
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	2200      	movs	r2, #0
 801a508:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a50a:	bf00      	nop
 801a50c:	3708      	adds	r7, #8
 801a50e:	46bd      	mov	sp, r7
 801a510:	bd80      	pop	{r7, pc}
 801a512:	bf00      	nop
 801a514:	0802597c 	.word	0x0802597c
 801a518:	08026034 	.word	0x08026034
 801a51c:	080259d0 	.word	0x080259d0

0801a520 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b086      	sub	sp, #24
 801a524:	af00      	add	r7, sp, #0
 801a526:	60f8      	str	r0, [r7, #12]
 801a528:	607b      	str	r3, [r7, #4]
 801a52a:	460b      	mov	r3, r1
 801a52c:	817b      	strh	r3, [r7, #10]
 801a52e:	4613      	mov	r3, r2
 801a530:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a532:	897a      	ldrh	r2, [r7, #10]
 801a534:	893b      	ldrh	r3, [r7, #8]
 801a536:	4413      	add	r3, r2
 801a538:	b29b      	uxth	r3, r3
 801a53a:	3314      	adds	r3, #20
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a542:	4619      	mov	r1, r3
 801a544:	2022      	movs	r0, #34	; 0x22
 801a546:	f7f9 fda1 	bl	801408c <pbuf_alloc>
 801a54a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d04d      	beq.n	801a5ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a552:	897b      	ldrh	r3, [r7, #10]
 801a554:	3313      	adds	r3, #19
 801a556:	697a      	ldr	r2, [r7, #20]
 801a558:	8952      	ldrh	r2, [r2, #10]
 801a55a:	4293      	cmp	r3, r2
 801a55c:	db06      	blt.n	801a56c <tcp_output_alloc_header_common+0x4c>
 801a55e:	4b26      	ldr	r3, [pc, #152]	; (801a5f8 <tcp_output_alloc_header_common+0xd8>)
 801a560:	f240 7223 	movw	r2, #1827	; 0x723
 801a564:	4925      	ldr	r1, [pc, #148]	; (801a5fc <tcp_output_alloc_header_common+0xdc>)
 801a566:	4826      	ldr	r0, [pc, #152]	; (801a600 <tcp_output_alloc_header_common+0xe0>)
 801a568:	f004 fe60 	bl	801f22c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a56c:	697b      	ldr	r3, [r7, #20]
 801a56e:	685b      	ldr	r3, [r3, #4]
 801a570:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a572:	8c3b      	ldrh	r3, [r7, #32]
 801a574:	4618      	mov	r0, r3
 801a576:	f7f8 fd25 	bl	8012fc4 <lwip_htons>
 801a57a:	4603      	mov	r3, r0
 801a57c:	461a      	mov	r2, r3
 801a57e:	693b      	ldr	r3, [r7, #16]
 801a580:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a584:	4618      	mov	r0, r3
 801a586:	f7f8 fd1d 	bl	8012fc4 <lwip_htons>
 801a58a:	4603      	mov	r3, r0
 801a58c:	461a      	mov	r2, r3
 801a58e:	693b      	ldr	r3, [r7, #16]
 801a590:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a592:	693b      	ldr	r3, [r7, #16]
 801a594:	687a      	ldr	r2, [r7, #4]
 801a596:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a598:	68f8      	ldr	r0, [r7, #12]
 801a59a:	f7f8 fd28 	bl	8012fee <lwip_htonl>
 801a59e:	4602      	mov	r2, r0
 801a5a0:	693b      	ldr	r3, [r7, #16]
 801a5a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a5a4:	897b      	ldrh	r3, [r7, #10]
 801a5a6:	089b      	lsrs	r3, r3, #2
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	3305      	adds	r3, #5
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	031b      	lsls	r3, r3, #12
 801a5b0:	b29a      	uxth	r2, r3
 801a5b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	4313      	orrs	r3, r2
 801a5ba:	b29b      	uxth	r3, r3
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7f8 fd01 	bl	8012fc4 <lwip_htons>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	461a      	mov	r2, r3
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a5ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f7f8 fcf9 	bl	8012fc4 <lwip_htons>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	461a      	mov	r2, r3
 801a5d6:	693b      	ldr	r3, [r7, #16]
 801a5d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	2200      	movs	r2, #0
 801a5de:	741a      	strb	r2, [r3, #16]
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a5e4:	693b      	ldr	r3, [r7, #16]
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	749a      	strb	r2, [r3, #18]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a5ee:	697b      	ldr	r3, [r7, #20]
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3718      	adds	r7, #24
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}
 801a5f8:	0802597c 	.word	0x0802597c
 801a5fc:	08026054 	.word	0x08026054
 801a600:	080259d0 	.word	0x080259d0

0801a604 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a604:	b5b0      	push	{r4, r5, r7, lr}
 801a606:	b08a      	sub	sp, #40	; 0x28
 801a608:	af04      	add	r7, sp, #16
 801a60a:	60f8      	str	r0, [r7, #12]
 801a60c:	607b      	str	r3, [r7, #4]
 801a60e:	460b      	mov	r3, r1
 801a610:	817b      	strh	r3, [r7, #10]
 801a612:	4613      	mov	r3, r2
 801a614:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d106      	bne.n	801a62a <tcp_output_alloc_header+0x26>
 801a61c:	4b15      	ldr	r3, [pc, #84]	; (801a674 <tcp_output_alloc_header+0x70>)
 801a61e:	f240 7242 	movw	r2, #1858	; 0x742
 801a622:	4915      	ldr	r1, [pc, #84]	; (801a678 <tcp_output_alloc_header+0x74>)
 801a624:	4815      	ldr	r0, [pc, #84]	; (801a67c <tcp_output_alloc_header+0x78>)
 801a626:	f004 fe01 	bl	801f22c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	8adb      	ldrh	r3, [r3, #22]
 801a632:	68fa      	ldr	r2, [r7, #12]
 801a634:	8b12      	ldrh	r2, [r2, #24]
 801a636:	68f9      	ldr	r1, [r7, #12]
 801a638:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a63a:	893d      	ldrh	r5, [r7, #8]
 801a63c:	897c      	ldrh	r4, [r7, #10]
 801a63e:	9103      	str	r1, [sp, #12]
 801a640:	2110      	movs	r1, #16
 801a642:	9102      	str	r1, [sp, #8]
 801a644:	9201      	str	r2, [sp, #4]
 801a646:	9300      	str	r3, [sp, #0]
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	462a      	mov	r2, r5
 801a64c:	4621      	mov	r1, r4
 801a64e:	f7ff ff67 	bl	801a520 <tcp_output_alloc_header_common>
 801a652:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a654:	697b      	ldr	r3, [r7, #20]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d006      	beq.n	801a668 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a65e:	68fa      	ldr	r2, [r7, #12]
 801a660:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a662:	441a      	add	r2, r3
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a668:	697b      	ldr	r3, [r7, #20]
}
 801a66a:	4618      	mov	r0, r3
 801a66c:	3718      	adds	r7, #24
 801a66e:	46bd      	mov	sp, r7
 801a670:	bdb0      	pop	{r4, r5, r7, pc}
 801a672:	bf00      	nop
 801a674:	0802597c 	.word	0x0802597c
 801a678:	08026084 	.word	0x08026084
 801a67c:	080259d0 	.word	0x080259d0

0801a680 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b088      	sub	sp, #32
 801a684:	af00      	add	r7, sp, #0
 801a686:	60f8      	str	r0, [r7, #12]
 801a688:	60b9      	str	r1, [r7, #8]
 801a68a:	4611      	mov	r1, r2
 801a68c:	461a      	mov	r2, r3
 801a68e:	460b      	mov	r3, r1
 801a690:	71fb      	strb	r3, [r7, #7]
 801a692:	4613      	mov	r3, r2
 801a694:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a696:	2300      	movs	r3, #0
 801a698:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a69a:	68bb      	ldr	r3, [r7, #8]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d106      	bne.n	801a6ae <tcp_output_fill_options+0x2e>
 801a6a0:	4b13      	ldr	r3, [pc, #76]	; (801a6f0 <tcp_output_fill_options+0x70>)
 801a6a2:	f240 7256 	movw	r2, #1878	; 0x756
 801a6a6:	4913      	ldr	r1, [pc, #76]	; (801a6f4 <tcp_output_fill_options+0x74>)
 801a6a8:	4813      	ldr	r0, [pc, #76]	; (801a6f8 <tcp_output_fill_options+0x78>)
 801a6aa:	f004 fdbf 	bl	801f22c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a6ae:	68bb      	ldr	r3, [r7, #8]
 801a6b0:	685b      	ldr	r3, [r3, #4]
 801a6b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a6b4:	69bb      	ldr	r3, [r7, #24]
 801a6b6:	3314      	adds	r3, #20
 801a6b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a6ba:	69bb      	ldr	r3, [r7, #24]
 801a6bc:	f103 0214 	add.w	r2, r3, #20
 801a6c0:	8bfb      	ldrh	r3, [r7, #30]
 801a6c2:	009b      	lsls	r3, r3, #2
 801a6c4:	4619      	mov	r1, r3
 801a6c6:	79fb      	ldrb	r3, [r7, #7]
 801a6c8:	009b      	lsls	r3, r3, #2
 801a6ca:	f003 0304 	and.w	r3, r3, #4
 801a6ce:	440b      	add	r3, r1
 801a6d0:	4413      	add	r3, r2
 801a6d2:	697a      	ldr	r2, [r7, #20]
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	d006      	beq.n	801a6e6 <tcp_output_fill_options+0x66>
 801a6d8:	4b05      	ldr	r3, [pc, #20]	; (801a6f0 <tcp_output_fill_options+0x70>)
 801a6da:	f240 7275 	movw	r2, #1909	; 0x775
 801a6de:	4907      	ldr	r1, [pc, #28]	; (801a6fc <tcp_output_fill_options+0x7c>)
 801a6e0:	4805      	ldr	r0, [pc, #20]	; (801a6f8 <tcp_output_fill_options+0x78>)
 801a6e2:	f004 fda3 	bl	801f22c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a6e6:	bf00      	nop
 801a6e8:	3720      	adds	r7, #32
 801a6ea:	46bd      	mov	sp, r7
 801a6ec:	bd80      	pop	{r7, pc}
 801a6ee:	bf00      	nop
 801a6f0:	0802597c 	.word	0x0802597c
 801a6f4:	080260ac 	.word	0x080260ac
 801a6f8:	080259d0 	.word	0x080259d0
 801a6fc:	08025fa4 	.word	0x08025fa4

0801a700 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b08a      	sub	sp, #40	; 0x28
 801a704:	af04      	add	r7, sp, #16
 801a706:	60f8      	str	r0, [r7, #12]
 801a708:	60b9      	str	r1, [r7, #8]
 801a70a:	607a      	str	r2, [r7, #4]
 801a70c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a70e:	68bb      	ldr	r3, [r7, #8]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d106      	bne.n	801a722 <tcp_output_control_segment+0x22>
 801a714:	4b1c      	ldr	r3, [pc, #112]	; (801a788 <tcp_output_control_segment+0x88>)
 801a716:	f240 7287 	movw	r2, #1927	; 0x787
 801a71a:	491c      	ldr	r1, [pc, #112]	; (801a78c <tcp_output_control_segment+0x8c>)
 801a71c:	481c      	ldr	r0, [pc, #112]	; (801a790 <tcp_output_control_segment+0x90>)
 801a71e:	f004 fd85 	bl	801f22c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a722:	683a      	ldr	r2, [r7, #0]
 801a724:	6879      	ldr	r1, [r7, #4]
 801a726:	68f8      	ldr	r0, [r7, #12]
 801a728:	f7fe fae8 	bl	8018cfc <tcp_route>
 801a72c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a72e:	693b      	ldr	r3, [r7, #16]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d102      	bne.n	801a73a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a734:	23fc      	movs	r3, #252	; 0xfc
 801a736:	75fb      	strb	r3, [r7, #23]
 801a738:	e01c      	b.n	801a774 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d006      	beq.n	801a74e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	7adb      	ldrb	r3, [r3, #11]
 801a744:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	7a9b      	ldrb	r3, [r3, #10]
 801a74a:	757b      	strb	r3, [r7, #21]
 801a74c:	e003      	b.n	801a756 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a74e:	23ff      	movs	r3, #255	; 0xff
 801a750:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a752:	2300      	movs	r3, #0
 801a754:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a756:	7dba      	ldrb	r2, [r7, #22]
 801a758:	693b      	ldr	r3, [r7, #16]
 801a75a:	9302      	str	r3, [sp, #8]
 801a75c:	2306      	movs	r3, #6
 801a75e:	9301      	str	r3, [sp, #4]
 801a760:	7d7b      	ldrb	r3, [r7, #21]
 801a762:	9300      	str	r3, [sp, #0]
 801a764:	4613      	mov	r3, r2
 801a766:	683a      	ldr	r2, [r7, #0]
 801a768:	6879      	ldr	r1, [r7, #4]
 801a76a:	68b8      	ldr	r0, [r7, #8]
 801a76c:	f002 fad0 	bl	801cd10 <ip4_output_if>
 801a770:	4603      	mov	r3, r0
 801a772:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a774:	68b8      	ldr	r0, [r7, #8]
 801a776:	f7f9 ff6d 	bl	8014654 <pbuf_free>
  return err;
 801a77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a77e:	4618      	mov	r0, r3
 801a780:	3718      	adds	r7, #24
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}
 801a786:	bf00      	nop
 801a788:	0802597c 	.word	0x0802597c
 801a78c:	080260d4 	.word	0x080260d4
 801a790:	080259d0 	.word	0x080259d0

0801a794 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a794:	b590      	push	{r4, r7, lr}
 801a796:	b08b      	sub	sp, #44	; 0x2c
 801a798:	af04      	add	r7, sp, #16
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	60b9      	str	r1, [r7, #8]
 801a79e:	607a      	str	r2, [r7, #4]
 801a7a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d106      	bne.n	801a7b6 <tcp_rst+0x22>
 801a7a8:	4b1f      	ldr	r3, [pc, #124]	; (801a828 <tcp_rst+0x94>)
 801a7aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a7ae:	491f      	ldr	r1, [pc, #124]	; (801a82c <tcp_rst+0x98>)
 801a7b0:	481f      	ldr	r0, [pc, #124]	; (801a830 <tcp_rst+0x9c>)
 801a7b2:	f004 fd3b 	bl	801f22c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d106      	bne.n	801a7ca <tcp_rst+0x36>
 801a7bc:	4b1a      	ldr	r3, [pc, #104]	; (801a828 <tcp_rst+0x94>)
 801a7be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a7c2:	491c      	ldr	r1, [pc, #112]	; (801a834 <tcp_rst+0xa0>)
 801a7c4:	481a      	ldr	r0, [pc, #104]	; (801a830 <tcp_rst+0x9c>)
 801a7c6:	f004 fd31 	bl	801f22c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a7ce:	f246 0308 	movw	r3, #24584	; 0x6008
 801a7d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a7d4:	7dfb      	ldrb	r3, [r7, #23]
 801a7d6:	b29c      	uxth	r4, r3
 801a7d8:	68b8      	ldr	r0, [r7, #8]
 801a7da:	f7f8 fc08 	bl	8012fee <lwip_htonl>
 801a7de:	4602      	mov	r2, r0
 801a7e0:	8abb      	ldrh	r3, [r7, #20]
 801a7e2:	9303      	str	r3, [sp, #12]
 801a7e4:	2314      	movs	r3, #20
 801a7e6:	9302      	str	r3, [sp, #8]
 801a7e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a7ea:	9301      	str	r3, [sp, #4]
 801a7ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	4613      	mov	r3, r2
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	4621      	mov	r1, r4
 801a7f6:	6878      	ldr	r0, [r7, #4]
 801a7f8:	f7ff fe92 	bl	801a520 <tcp_output_alloc_header_common>
 801a7fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d00c      	beq.n	801a81e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a804:	7dfb      	ldrb	r3, [r7, #23]
 801a806:	2200      	movs	r2, #0
 801a808:	6939      	ldr	r1, [r7, #16]
 801a80a:	68f8      	ldr	r0, [r7, #12]
 801a80c:	f7ff ff38 	bl	801a680 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a812:	683a      	ldr	r2, [r7, #0]
 801a814:	6939      	ldr	r1, [r7, #16]
 801a816:	68f8      	ldr	r0, [r7, #12]
 801a818:	f7ff ff72 	bl	801a700 <tcp_output_control_segment>
 801a81c:	e000      	b.n	801a820 <tcp_rst+0x8c>
    return;
 801a81e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a820:	371c      	adds	r7, #28
 801a822:	46bd      	mov	sp, r7
 801a824:	bd90      	pop	{r4, r7, pc}
 801a826:	bf00      	nop
 801a828:	0802597c 	.word	0x0802597c
 801a82c:	08026100 	.word	0x08026100
 801a830:	080259d0 	.word	0x080259d0
 801a834:	0802611c 	.word	0x0802611c

0801a838 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a838:	b590      	push	{r4, r7, lr}
 801a83a:	b087      	sub	sp, #28
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a840:	2300      	movs	r3, #0
 801a842:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a844:	2300      	movs	r3, #0
 801a846:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d106      	bne.n	801a85c <tcp_send_empty_ack+0x24>
 801a84e:	4b28      	ldr	r3, [pc, #160]	; (801a8f0 <tcp_send_empty_ack+0xb8>)
 801a850:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a854:	4927      	ldr	r1, [pc, #156]	; (801a8f4 <tcp_send_empty_ack+0xbc>)
 801a856:	4828      	ldr	r0, [pc, #160]	; (801a8f8 <tcp_send_empty_ack+0xc0>)
 801a858:	f004 fce8 	bl	801f22c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a85c:	7dfb      	ldrb	r3, [r7, #23]
 801a85e:	009b      	lsls	r3, r3, #2
 801a860:	b2db      	uxtb	r3, r3
 801a862:	f003 0304 	and.w	r3, r3, #4
 801a866:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a868:	7d7b      	ldrb	r3, [r7, #21]
 801a86a:	b29c      	uxth	r4, r3
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a870:	4618      	mov	r0, r3
 801a872:	f7f8 fbbc 	bl	8012fee <lwip_htonl>
 801a876:	4603      	mov	r3, r0
 801a878:	2200      	movs	r2, #0
 801a87a:	4621      	mov	r1, r4
 801a87c:	6878      	ldr	r0, [r7, #4]
 801a87e:	f7ff fec1 	bl	801a604 <tcp_output_alloc_header>
 801a882:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a884:	693b      	ldr	r3, [r7, #16]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d109      	bne.n	801a89e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	8b5b      	ldrh	r3, [r3, #26]
 801a88e:	f043 0303 	orr.w	r3, r3, #3
 801a892:	b29a      	uxth	r2, r3
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a898:	f06f 0301 	mvn.w	r3, #1
 801a89c:	e023      	b.n	801a8e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a89e:	7dbb      	ldrb	r3, [r7, #22]
 801a8a0:	7dfa      	ldrb	r2, [r7, #23]
 801a8a2:	6939      	ldr	r1, [r7, #16]
 801a8a4:	6878      	ldr	r0, [r7, #4]
 801a8a6:	f7ff feeb 	bl	801a680 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a8aa:	687a      	ldr	r2, [r7, #4]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	3304      	adds	r3, #4
 801a8b0:	6939      	ldr	r1, [r7, #16]
 801a8b2:	6878      	ldr	r0, [r7, #4]
 801a8b4:	f7ff ff24 	bl	801a700 <tcp_output_control_segment>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d007      	beq.n	801a8d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	8b5b      	ldrh	r3, [r3, #26]
 801a8c8:	f043 0303 	orr.w	r3, r3, #3
 801a8cc:	b29a      	uxth	r2, r3
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	835a      	strh	r2, [r3, #26]
 801a8d2:	e006      	b.n	801a8e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	8b5b      	ldrh	r3, [r3, #26]
 801a8d8:	f023 0303 	bic.w	r3, r3, #3
 801a8dc:	b29a      	uxth	r2, r3
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	371c      	adds	r7, #28
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd90      	pop	{r4, r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	0802597c 	.word	0x0802597c
 801a8f4:	08026138 	.word	0x08026138
 801a8f8:	080259d0 	.word	0x080259d0

0801a8fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a8fc:	b590      	push	{r4, r7, lr}
 801a8fe:	b087      	sub	sp, #28
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a904:	2300      	movs	r3, #0
 801a906:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d106      	bne.n	801a91c <tcp_keepalive+0x20>
 801a90e:	4b18      	ldr	r3, [pc, #96]	; (801a970 <tcp_keepalive+0x74>)
 801a910:	f640 0224 	movw	r2, #2084	; 0x824
 801a914:	4917      	ldr	r1, [pc, #92]	; (801a974 <tcp_keepalive+0x78>)
 801a916:	4818      	ldr	r0, [pc, #96]	; (801a978 <tcp_keepalive+0x7c>)
 801a918:	f004 fc88 	bl	801f22c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a91c:	7dfb      	ldrb	r3, [r7, #23]
 801a91e:	b29c      	uxth	r4, r3
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a924:	3b01      	subs	r3, #1
 801a926:	4618      	mov	r0, r3
 801a928:	f7f8 fb61 	bl	8012fee <lwip_htonl>
 801a92c:	4603      	mov	r3, r0
 801a92e:	2200      	movs	r2, #0
 801a930:	4621      	mov	r1, r4
 801a932:	6878      	ldr	r0, [r7, #4]
 801a934:	f7ff fe66 	bl	801a604 <tcp_output_alloc_header>
 801a938:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a93a:	693b      	ldr	r3, [r7, #16]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d102      	bne.n	801a946 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a940:	f04f 33ff 	mov.w	r3, #4294967295
 801a944:	e010      	b.n	801a968 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a946:	7dfb      	ldrb	r3, [r7, #23]
 801a948:	2200      	movs	r2, #0
 801a94a:	6939      	ldr	r1, [r7, #16]
 801a94c:	6878      	ldr	r0, [r7, #4]
 801a94e:	f7ff fe97 	bl	801a680 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a952:	687a      	ldr	r2, [r7, #4]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	3304      	adds	r3, #4
 801a958:	6939      	ldr	r1, [r7, #16]
 801a95a:	6878      	ldr	r0, [r7, #4]
 801a95c:	f7ff fed0 	bl	801a700 <tcp_output_control_segment>
 801a960:	4603      	mov	r3, r0
 801a962:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a968:	4618      	mov	r0, r3
 801a96a:	371c      	adds	r7, #28
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd90      	pop	{r4, r7, pc}
 801a970:	0802597c 	.word	0x0802597c
 801a974:	08026158 	.word	0x08026158
 801a978:	080259d0 	.word	0x080259d0

0801a97c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a97c:	b590      	push	{r4, r7, lr}
 801a97e:	b08b      	sub	sp, #44	; 0x2c
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a984:	2300      	movs	r3, #0
 801a986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d106      	bne.n	801a99e <tcp_zero_window_probe+0x22>
 801a990:	4b4c      	ldr	r3, [pc, #304]	; (801aac4 <tcp_zero_window_probe+0x148>)
 801a992:	f640 024f 	movw	r2, #2127	; 0x84f
 801a996:	494c      	ldr	r1, [pc, #304]	; (801aac8 <tcp_zero_window_probe+0x14c>)
 801a998:	484c      	ldr	r0, [pc, #304]	; (801aacc <tcp_zero_window_probe+0x150>)
 801a99a:	f004 fc47 	bl	801f22c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a9a4:	6a3b      	ldr	r3, [r7, #32]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d101      	bne.n	801a9ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a9aa:	2300      	movs	r3, #0
 801a9ac:	e086      	b.n	801aabc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a9b4:	2bff      	cmp	r3, #255	; 0xff
 801a9b6:	d007      	beq.n	801a9c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a9be:	3301      	adds	r3, #1
 801a9c0:	b2da      	uxtb	r2, r3
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a9c8:	6a3b      	ldr	r3, [r7, #32]
 801a9ca:	68db      	ldr	r3, [r3, #12]
 801a9cc:	899b      	ldrh	r3, [r3, #12]
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	f7f8 faf7 	bl	8012fc4 <lwip_htons>
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	b2db      	uxtb	r3, r3
 801a9da:	f003 0301 	and.w	r3, r3, #1
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d005      	beq.n	801a9ee <tcp_zero_window_probe+0x72>
 801a9e2:	6a3b      	ldr	r3, [r7, #32]
 801a9e4:	891b      	ldrh	r3, [r3, #8]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d101      	bne.n	801a9ee <tcp_zero_window_probe+0x72>
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	e000      	b.n	801a9f0 <tcp_zero_window_probe+0x74>
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a9f2:	7ffb      	ldrb	r3, [r7, #31]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	bf0c      	ite	eq
 801a9f8:	2301      	moveq	r3, #1
 801a9fa:	2300      	movne	r3, #0
 801a9fc:	b2db      	uxtb	r3, r3
 801a9fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa04:	b299      	uxth	r1, r3
 801aa06:	6a3b      	ldr	r3, [r7, #32]
 801aa08:	68db      	ldr	r3, [r3, #12]
 801aa0a:	685b      	ldr	r3, [r3, #4]
 801aa0c:	8bba      	ldrh	r2, [r7, #28]
 801aa0e:	6878      	ldr	r0, [r7, #4]
 801aa10:	f7ff fdf8 	bl	801a604 <tcp_output_alloc_header>
 801aa14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801aa16:	69bb      	ldr	r3, [r7, #24]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d102      	bne.n	801aa22 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801aa1c:	f04f 33ff 	mov.w	r3, #4294967295
 801aa20:	e04c      	b.n	801aabc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801aa22:	69bb      	ldr	r3, [r7, #24]
 801aa24:	685b      	ldr	r3, [r3, #4]
 801aa26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801aa28:	7ffb      	ldrb	r3, [r7, #31]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d011      	beq.n	801aa52 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801aa2e:	697b      	ldr	r3, [r7, #20]
 801aa30:	899b      	ldrh	r3, [r3, #12]
 801aa32:	b29b      	uxth	r3, r3
 801aa34:	b21b      	sxth	r3, r3
 801aa36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801aa3a:	b21c      	sxth	r4, r3
 801aa3c:	2011      	movs	r0, #17
 801aa3e:	f7f8 fac1 	bl	8012fc4 <lwip_htons>
 801aa42:	4603      	mov	r3, r0
 801aa44:	b21b      	sxth	r3, r3
 801aa46:	4323      	orrs	r3, r4
 801aa48:	b21b      	sxth	r3, r3
 801aa4a:	b29a      	uxth	r2, r3
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	819a      	strh	r2, [r3, #12]
 801aa50:	e010      	b.n	801aa74 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801aa52:	69bb      	ldr	r3, [r7, #24]
 801aa54:	685b      	ldr	r3, [r3, #4]
 801aa56:	3314      	adds	r3, #20
 801aa58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801aa5a:	6a3b      	ldr	r3, [r7, #32]
 801aa5c:	6858      	ldr	r0, [r3, #4]
 801aa5e:	6a3b      	ldr	r3, [r7, #32]
 801aa60:	685b      	ldr	r3, [r3, #4]
 801aa62:	891a      	ldrh	r2, [r3, #8]
 801aa64:	6a3b      	ldr	r3, [r7, #32]
 801aa66:	891b      	ldrh	r3, [r3, #8]
 801aa68:	1ad3      	subs	r3, r2, r3
 801aa6a:	b29b      	uxth	r3, r3
 801aa6c:	2201      	movs	r2, #1
 801aa6e:	6939      	ldr	r1, [r7, #16]
 801aa70:	f7f9 fff6 	bl	8014a60 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801aa74:	6a3b      	ldr	r3, [r7, #32]
 801aa76:	68db      	ldr	r3, [r3, #12]
 801aa78:	685b      	ldr	r3, [r3, #4]
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	f7f8 fab7 	bl	8012fee <lwip_htonl>
 801aa80:	4603      	mov	r3, r0
 801aa82:	3301      	adds	r3, #1
 801aa84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	1ad3      	subs	r3, r2, r3
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	da02      	bge.n	801aa98 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	68fa      	ldr	r2, [r7, #12]
 801aa96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aa98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	69b9      	ldr	r1, [r7, #24]
 801aaa0:	6878      	ldr	r0, [r7, #4]
 801aaa2:	f7ff fded 	bl	801a680 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aaa6:	687a      	ldr	r2, [r7, #4]
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	3304      	adds	r3, #4
 801aaac:	69b9      	ldr	r1, [r7, #24]
 801aaae:	6878      	ldr	r0, [r7, #4]
 801aab0:	f7ff fe26 	bl	801a700 <tcp_output_control_segment>
 801aab4:	4603      	mov	r3, r0
 801aab6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	372c      	adds	r7, #44	; 0x2c
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd90      	pop	{r4, r7, pc}
 801aac4:	0802597c 	.word	0x0802597c
 801aac8:	08026174 	.word	0x08026174
 801aacc:	080259d0 	.word	0x080259d0

0801aad0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b082      	sub	sp, #8
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801aad8:	f7fa f8b0 	bl	8014c3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801aadc:	4b0a      	ldr	r3, [pc, #40]	; (801ab08 <tcpip_tcp_timer+0x38>)
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d103      	bne.n	801aaec <tcpip_tcp_timer+0x1c>
 801aae4:	4b09      	ldr	r3, [pc, #36]	; (801ab0c <tcpip_tcp_timer+0x3c>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d005      	beq.n	801aaf8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aaec:	2200      	movs	r2, #0
 801aaee:	4908      	ldr	r1, [pc, #32]	; (801ab10 <tcpip_tcp_timer+0x40>)
 801aaf0:	20fa      	movs	r0, #250	; 0xfa
 801aaf2:	f000 f8f3 	bl	801acdc <sys_timeout>
 801aaf6:	e003      	b.n	801ab00 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801aaf8:	4b06      	ldr	r3, [pc, #24]	; (801ab14 <tcpip_tcp_timer+0x44>)
 801aafa:	2200      	movs	r2, #0
 801aafc:	601a      	str	r2, [r3, #0]
  }
}
 801aafe:	bf00      	nop
 801ab00:	bf00      	nop
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}
 801ab08:	2000e170 	.word	0x2000e170
 801ab0c:	2000e180 	.word	0x2000e180
 801ab10:	0801aad1 	.word	0x0801aad1
 801ab14:	20006e50 	.word	0x20006e50

0801ab18 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ab1c:	4b0a      	ldr	r3, [pc, #40]	; (801ab48 <tcp_timer_needed+0x30>)
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d10f      	bne.n	801ab44 <tcp_timer_needed+0x2c>
 801ab24:	4b09      	ldr	r3, [pc, #36]	; (801ab4c <tcp_timer_needed+0x34>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d103      	bne.n	801ab34 <tcp_timer_needed+0x1c>
 801ab2c:	4b08      	ldr	r3, [pc, #32]	; (801ab50 <tcp_timer_needed+0x38>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d007      	beq.n	801ab44 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ab34:	4b04      	ldr	r3, [pc, #16]	; (801ab48 <tcp_timer_needed+0x30>)
 801ab36:	2201      	movs	r2, #1
 801ab38:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ab3a:	2200      	movs	r2, #0
 801ab3c:	4905      	ldr	r1, [pc, #20]	; (801ab54 <tcp_timer_needed+0x3c>)
 801ab3e:	20fa      	movs	r0, #250	; 0xfa
 801ab40:	f000 f8cc 	bl	801acdc <sys_timeout>
  }
}
 801ab44:	bf00      	nop
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	20006e50 	.word	0x20006e50
 801ab4c:	2000e170 	.word	0x2000e170
 801ab50:	2000e180 	.word	0x2000e180
 801ab54:	0801aad1 	.word	0x0801aad1

0801ab58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b086      	sub	sp, #24
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	60f8      	str	r0, [r7, #12]
 801ab60:	60b9      	str	r1, [r7, #8]
 801ab62:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ab64:	200a      	movs	r0, #10
 801ab66:	f7f8 fee3 	bl	8013930 <memp_malloc>
 801ab6a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ab6c:	693b      	ldr	r3, [r7, #16]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d109      	bne.n	801ab86 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ab72:	693b      	ldr	r3, [r7, #16]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d151      	bne.n	801ac1c <sys_timeout_abs+0xc4>
 801ab78:	4b2a      	ldr	r3, [pc, #168]	; (801ac24 <sys_timeout_abs+0xcc>)
 801ab7a:	22be      	movs	r2, #190	; 0xbe
 801ab7c:	492a      	ldr	r1, [pc, #168]	; (801ac28 <sys_timeout_abs+0xd0>)
 801ab7e:	482b      	ldr	r0, [pc, #172]	; (801ac2c <sys_timeout_abs+0xd4>)
 801ab80:	f004 fb54 	bl	801f22c <iprintf>
    return;
 801ab84:	e04a      	b.n	801ac1c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ab86:	693b      	ldr	r3, [r7, #16]
 801ab88:	2200      	movs	r2, #0
 801ab8a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ab8c:	693b      	ldr	r3, [r7, #16]
 801ab8e:	68ba      	ldr	r2, [r7, #8]
 801ab90:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ab92:	693b      	ldr	r3, [r7, #16]
 801ab94:	687a      	ldr	r2, [r7, #4]
 801ab96:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ab98:	693b      	ldr	r3, [r7, #16]
 801ab9a:	68fa      	ldr	r2, [r7, #12]
 801ab9c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ab9e:	4b24      	ldr	r3, [pc, #144]	; (801ac30 <sys_timeout_abs+0xd8>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d103      	bne.n	801abae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801aba6:	4a22      	ldr	r2, [pc, #136]	; (801ac30 <sys_timeout_abs+0xd8>)
 801aba8:	693b      	ldr	r3, [r7, #16]
 801abaa:	6013      	str	r3, [r2, #0]
    return;
 801abac:	e037      	b.n	801ac1e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801abae:	693b      	ldr	r3, [r7, #16]
 801abb0:	685a      	ldr	r2, [r3, #4]
 801abb2:	4b1f      	ldr	r3, [pc, #124]	; (801ac30 <sys_timeout_abs+0xd8>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	685b      	ldr	r3, [r3, #4]
 801abb8:	1ad3      	subs	r3, r2, r3
 801abba:	0fdb      	lsrs	r3, r3, #31
 801abbc:	f003 0301 	and.w	r3, r3, #1
 801abc0:	b2db      	uxtb	r3, r3
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d007      	beq.n	801abd6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801abc6:	4b1a      	ldr	r3, [pc, #104]	; (801ac30 <sys_timeout_abs+0xd8>)
 801abc8:	681a      	ldr	r2, [r3, #0]
 801abca:	693b      	ldr	r3, [r7, #16]
 801abcc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801abce:	4a18      	ldr	r2, [pc, #96]	; (801ac30 <sys_timeout_abs+0xd8>)
 801abd0:	693b      	ldr	r3, [r7, #16]
 801abd2:	6013      	str	r3, [r2, #0]
 801abd4:	e023      	b.n	801ac1e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801abd6:	4b16      	ldr	r3, [pc, #88]	; (801ac30 <sys_timeout_abs+0xd8>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	617b      	str	r3, [r7, #20]
 801abdc:	e01a      	b.n	801ac14 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801abde:	697b      	ldr	r3, [r7, #20]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d00b      	beq.n	801abfe <sys_timeout_abs+0xa6>
 801abe6:	693b      	ldr	r3, [r7, #16]
 801abe8:	685a      	ldr	r2, [r3, #4]
 801abea:	697b      	ldr	r3, [r7, #20]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	1ad3      	subs	r3, r2, r3
 801abf2:	0fdb      	lsrs	r3, r3, #31
 801abf4:	f003 0301 	and.w	r3, r3, #1
 801abf8:	b2db      	uxtb	r3, r3
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d007      	beq.n	801ac0e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	681a      	ldr	r2, [r3, #0]
 801ac02:	693b      	ldr	r3, [r7, #16]
 801ac04:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ac06:	697b      	ldr	r3, [r7, #20]
 801ac08:	693a      	ldr	r2, [r7, #16]
 801ac0a:	601a      	str	r2, [r3, #0]
        break;
 801ac0c:	e007      	b.n	801ac1e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ac0e:	697b      	ldr	r3, [r7, #20]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	617b      	str	r3, [r7, #20]
 801ac14:	697b      	ldr	r3, [r7, #20]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d1e1      	bne.n	801abde <sys_timeout_abs+0x86>
 801ac1a:	e000      	b.n	801ac1e <sys_timeout_abs+0xc6>
    return;
 801ac1c:	bf00      	nop
      }
    }
  }
}
 801ac1e:	3718      	adds	r7, #24
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	08026198 	.word	0x08026198
 801ac28:	080261cc 	.word	0x080261cc
 801ac2c:	0802620c 	.word	0x0802620c
 801ac30:	20006e48 	.word	0x20006e48

0801ac34 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b086      	sub	sp, #24
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ac40:	697b      	ldr	r3, [r7, #20]
 801ac42:	685b      	ldr	r3, [r3, #4]
 801ac44:	4798      	blx	r3

  now = sys_now();
 801ac46:	f7f2 fe95 	bl	800d974 <sys_now>
 801ac4a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ac4c:	697b      	ldr	r3, [r7, #20]
 801ac4e:	681a      	ldr	r2, [r3, #0]
 801ac50:	4b0f      	ldr	r3, [pc, #60]	; (801ac90 <lwip_cyclic_timer+0x5c>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4413      	add	r3, r2
 801ac56:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ac58:	68fa      	ldr	r2, [r7, #12]
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	1ad3      	subs	r3, r2, r3
 801ac5e:	0fdb      	lsrs	r3, r3, #31
 801ac60:	f003 0301 	and.w	r3, r3, #1
 801ac64:	b2db      	uxtb	r3, r3
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d009      	beq.n	801ac7e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	681a      	ldr	r2, [r3, #0]
 801ac6e:	693b      	ldr	r3, [r7, #16]
 801ac70:	4413      	add	r3, r2
 801ac72:	687a      	ldr	r2, [r7, #4]
 801ac74:	4907      	ldr	r1, [pc, #28]	; (801ac94 <lwip_cyclic_timer+0x60>)
 801ac76:	4618      	mov	r0, r3
 801ac78:	f7ff ff6e 	bl	801ab58 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ac7c:	e004      	b.n	801ac88 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ac7e:	687a      	ldr	r2, [r7, #4]
 801ac80:	4904      	ldr	r1, [pc, #16]	; (801ac94 <lwip_cyclic_timer+0x60>)
 801ac82:	68f8      	ldr	r0, [r7, #12]
 801ac84:	f7ff ff68 	bl	801ab58 <sys_timeout_abs>
}
 801ac88:	bf00      	nop
 801ac8a:	3718      	adds	r7, #24
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}
 801ac90:	20006e4c 	.word	0x20006e4c
 801ac94:	0801ac35 	.word	0x0801ac35

0801ac98 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b082      	sub	sp, #8
 801ac9c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ac9e:	2301      	movs	r3, #1
 801aca0:	607b      	str	r3, [r7, #4]
 801aca2:	e00e      	b.n	801acc2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801aca4:	4a0b      	ldr	r2, [pc, #44]	; (801acd4 <sys_timeouts_init+0x3c>)
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	00db      	lsls	r3, r3, #3
 801acb0:	4a08      	ldr	r2, [pc, #32]	; (801acd4 <sys_timeouts_init+0x3c>)
 801acb2:	4413      	add	r3, r2
 801acb4:	461a      	mov	r2, r3
 801acb6:	4908      	ldr	r1, [pc, #32]	; (801acd8 <sys_timeouts_init+0x40>)
 801acb8:	f000 f810 	bl	801acdc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	3301      	adds	r3, #1
 801acc0:	607b      	str	r3, [r7, #4]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2b02      	cmp	r3, #2
 801acc6:	d9ed      	bls.n	801aca4 <sys_timeouts_init+0xc>
  }
}
 801acc8:	bf00      	nop
 801acca:	bf00      	nop
 801accc:	3708      	adds	r7, #8
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}
 801acd2:	bf00      	nop
 801acd4:	08026f88 	.word	0x08026f88
 801acd8:	0801ac35 	.word	0x0801ac35

0801acdc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b086      	sub	sp, #24
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	60f8      	str	r0, [r7, #12]
 801ace4:	60b9      	str	r1, [r7, #8]
 801ace6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801acee:	d306      	bcc.n	801acfe <sys_timeout+0x22>
 801acf0:	4b0a      	ldr	r3, [pc, #40]	; (801ad1c <sys_timeout+0x40>)
 801acf2:	f240 1229 	movw	r2, #297	; 0x129
 801acf6:	490a      	ldr	r1, [pc, #40]	; (801ad20 <sys_timeout+0x44>)
 801acf8:	480a      	ldr	r0, [pc, #40]	; (801ad24 <sys_timeout+0x48>)
 801acfa:	f004 fa97 	bl	801f22c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801acfe:	f7f2 fe39 	bl	800d974 <sys_now>
 801ad02:	4602      	mov	r2, r0
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	4413      	add	r3, r2
 801ad08:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ad0a:	687a      	ldr	r2, [r7, #4]
 801ad0c:	68b9      	ldr	r1, [r7, #8]
 801ad0e:	6978      	ldr	r0, [r7, #20]
 801ad10:	f7ff ff22 	bl	801ab58 <sys_timeout_abs>
#endif
}
 801ad14:	bf00      	nop
 801ad16:	3718      	adds	r7, #24
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bd80      	pop	{r7, pc}
 801ad1c:	08026198 	.word	0x08026198
 801ad20:	08026234 	.word	0x08026234
 801ad24:	0802620c 	.word	0x0802620c

0801ad28 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b084      	sub	sp, #16
 801ad2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ad2e:	f7f2 fe21 	bl	800d974 <sys_now>
 801ad32:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ad34:	4b17      	ldr	r3, [pc, #92]	; (801ad94 <sys_check_timeouts+0x6c>)
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ad3a:	68bb      	ldr	r3, [r7, #8]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d022      	beq.n	801ad86 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	685b      	ldr	r3, [r3, #4]
 801ad44:	68fa      	ldr	r2, [r7, #12]
 801ad46:	1ad3      	subs	r3, r2, r3
 801ad48:	0fdb      	lsrs	r3, r3, #31
 801ad4a:	f003 0301 	and.w	r3, r3, #1
 801ad4e:	b2db      	uxtb	r3, r3
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d11a      	bne.n	801ad8a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	4a0e      	ldr	r2, [pc, #56]	; (801ad94 <sys_check_timeouts+0x6c>)
 801ad5a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	689b      	ldr	r3, [r3, #8]
 801ad60:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ad62:	68bb      	ldr	r3, [r7, #8]
 801ad64:	68db      	ldr	r3, [r3, #12]
 801ad66:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	685b      	ldr	r3, [r3, #4]
 801ad6c:	4a0a      	ldr	r2, [pc, #40]	; (801ad98 <sys_check_timeouts+0x70>)
 801ad6e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ad70:	68b9      	ldr	r1, [r7, #8]
 801ad72:	200a      	movs	r0, #10
 801ad74:	f7f8 fe2e 	bl	80139d4 <memp_free>
    if (handler != NULL) {
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d0da      	beq.n	801ad34 <sys_check_timeouts+0xc>
      handler(arg);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	6838      	ldr	r0, [r7, #0]
 801ad82:	4798      	blx	r3
  do {
 801ad84:	e7d6      	b.n	801ad34 <sys_check_timeouts+0xc>
      return;
 801ad86:	bf00      	nop
 801ad88:	e000      	b.n	801ad8c <sys_check_timeouts+0x64>
      return;
 801ad8a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ad8c:	3710      	adds	r7, #16
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd80      	pop	{r7, pc}
 801ad92:	bf00      	nop
 801ad94:	20006e48 	.word	0x20006e48
 801ad98:	20006e4c 	.word	0x20006e4c

0801ad9c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b082      	sub	sp, #8
 801ada0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ada2:	4b16      	ldr	r3, [pc, #88]	; (801adfc <sys_timeouts_sleeptime+0x60>)
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d102      	bne.n	801adb0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801adaa:	f04f 33ff 	mov.w	r3, #4294967295
 801adae:	e020      	b.n	801adf2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801adb0:	f7f2 fde0 	bl	800d974 <sys_now>
 801adb4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801adb6:	4b11      	ldr	r3, [pc, #68]	; (801adfc <sys_timeouts_sleeptime+0x60>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	685a      	ldr	r2, [r3, #4]
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	1ad3      	subs	r3, r2, r3
 801adc0:	0fdb      	lsrs	r3, r3, #31
 801adc2:	f003 0301 	and.w	r3, r3, #1
 801adc6:	b2db      	uxtb	r3, r3
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d001      	beq.n	801add0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801adcc:	2300      	movs	r3, #0
 801adce:	e010      	b.n	801adf2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801add0:	4b0a      	ldr	r3, [pc, #40]	; (801adfc <sys_timeouts_sleeptime+0x60>)
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	685a      	ldr	r2, [r3, #4]
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	1ad3      	subs	r3, r2, r3
 801adda:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	da06      	bge.n	801adf0 <sys_timeouts_sleeptime+0x54>
 801ade2:	4b07      	ldr	r3, [pc, #28]	; (801ae00 <sys_timeouts_sleeptime+0x64>)
 801ade4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ade8:	4906      	ldr	r1, [pc, #24]	; (801ae04 <sys_timeouts_sleeptime+0x68>)
 801adea:	4807      	ldr	r0, [pc, #28]	; (801ae08 <sys_timeouts_sleeptime+0x6c>)
 801adec:	f004 fa1e 	bl	801f22c <iprintf>
    return ret;
 801adf0:	683b      	ldr	r3, [r7, #0]
  }
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3708      	adds	r7, #8
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}
 801adfa:	bf00      	nop
 801adfc:	20006e48 	.word	0x20006e48
 801ae00:	08026198 	.word	0x08026198
 801ae04:	0802626c 	.word	0x0802626c
 801ae08:	0802620c 	.word	0x0802620c

0801ae0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ae10:	f004 fa24 	bl	801f25c <rand>
 801ae14:	4603      	mov	r3, r0
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ae1c:	b29b      	uxth	r3, r3
 801ae1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ae22:	b29a      	uxth	r2, r3
 801ae24:	4b01      	ldr	r3, [pc, #4]	; (801ae2c <udp_init+0x20>)
 801ae26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ae28:	bf00      	nop
 801ae2a:	bd80      	pop	{r7, pc}
 801ae2c:	200003b4 	.word	0x200003b4

0801ae30 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ae30:	b480      	push	{r7}
 801ae32:	b083      	sub	sp, #12
 801ae34:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ae36:	2300      	movs	r3, #0
 801ae38:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ae3a:	4b17      	ldr	r3, [pc, #92]	; (801ae98 <udp_new_port+0x68>)
 801ae3c:	881b      	ldrh	r3, [r3, #0]
 801ae3e:	1c5a      	adds	r2, r3, #1
 801ae40:	b291      	uxth	r1, r2
 801ae42:	4a15      	ldr	r2, [pc, #84]	; (801ae98 <udp_new_port+0x68>)
 801ae44:	8011      	strh	r1, [r2, #0]
 801ae46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d103      	bne.n	801ae56 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ae4e:	4b12      	ldr	r3, [pc, #72]	; (801ae98 <udp_new_port+0x68>)
 801ae50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ae54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae56:	4b11      	ldr	r3, [pc, #68]	; (801ae9c <udp_new_port+0x6c>)
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	603b      	str	r3, [r7, #0]
 801ae5c:	e011      	b.n	801ae82 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	8a5a      	ldrh	r2, [r3, #18]
 801ae62:	4b0d      	ldr	r3, [pc, #52]	; (801ae98 <udp_new_port+0x68>)
 801ae64:	881b      	ldrh	r3, [r3, #0]
 801ae66:	429a      	cmp	r2, r3
 801ae68:	d108      	bne.n	801ae7c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ae6a:	88fb      	ldrh	r3, [r7, #6]
 801ae6c:	3301      	adds	r3, #1
 801ae6e:	80fb      	strh	r3, [r7, #6]
 801ae70:	88fb      	ldrh	r3, [r7, #6]
 801ae72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ae76:	d3e0      	bcc.n	801ae3a <udp_new_port+0xa>
        return 0;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	e007      	b.n	801ae8c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae7c:	683b      	ldr	r3, [r7, #0]
 801ae7e:	68db      	ldr	r3, [r3, #12]
 801ae80:	603b      	str	r3, [r7, #0]
 801ae82:	683b      	ldr	r3, [r7, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d1ea      	bne.n	801ae5e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ae88:	4b03      	ldr	r3, [pc, #12]	; (801ae98 <udp_new_port+0x68>)
 801ae8a:	881b      	ldrh	r3, [r3, #0]
}
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	370c      	adds	r7, #12
 801ae90:	46bd      	mov	sp, r7
 801ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae96:	4770      	bx	lr
 801ae98:	200003b4 	.word	0x200003b4
 801ae9c:	2000e188 	.word	0x2000e188

0801aea0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b084      	sub	sp, #16
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	60f8      	str	r0, [r7, #12]
 801aea8:	60b9      	str	r1, [r7, #8]
 801aeaa:	4613      	mov	r3, r2
 801aeac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d105      	bne.n	801aec0 <udp_input_local_match+0x20>
 801aeb4:	4b27      	ldr	r3, [pc, #156]	; (801af54 <udp_input_local_match+0xb4>)
 801aeb6:	2287      	movs	r2, #135	; 0x87
 801aeb8:	4927      	ldr	r1, [pc, #156]	; (801af58 <udp_input_local_match+0xb8>)
 801aeba:	4828      	ldr	r0, [pc, #160]	; (801af5c <udp_input_local_match+0xbc>)
 801aebc:	f004 f9b6 	bl	801f22c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801aec0:	68bb      	ldr	r3, [r7, #8]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d105      	bne.n	801aed2 <udp_input_local_match+0x32>
 801aec6:	4b23      	ldr	r3, [pc, #140]	; (801af54 <udp_input_local_match+0xb4>)
 801aec8:	2288      	movs	r2, #136	; 0x88
 801aeca:	4925      	ldr	r1, [pc, #148]	; (801af60 <udp_input_local_match+0xc0>)
 801aecc:	4823      	ldr	r0, [pc, #140]	; (801af5c <udp_input_local_match+0xbc>)
 801aece:	f004 f9ad 	bl	801f22c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	7a1b      	ldrb	r3, [r3, #8]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d00b      	beq.n	801aef2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	7a1a      	ldrb	r2, [r3, #8]
 801aede:	4b21      	ldr	r3, [pc, #132]	; (801af64 <udp_input_local_match+0xc4>)
 801aee0:	685b      	ldr	r3, [r3, #4]
 801aee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aee6:	3301      	adds	r3, #1
 801aee8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801aeea:	429a      	cmp	r2, r3
 801aeec:	d001      	beq.n	801aef2 <udp_input_local_match+0x52>
    return 0;
 801aeee:	2300      	movs	r3, #0
 801aef0:	e02b      	b.n	801af4a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801aef2:	79fb      	ldrb	r3, [r7, #7]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d018      	beq.n	801af2a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d013      	beq.n	801af26 <udp_input_local_match+0x86>
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d00f      	beq.n	801af26 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801af06:	4b17      	ldr	r3, [pc, #92]	; (801af64 <udp_input_local_match+0xc4>)
 801af08:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af0e:	d00a      	beq.n	801af26 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	4b13      	ldr	r3, [pc, #76]	; (801af64 <udp_input_local_match+0xc4>)
 801af16:	695b      	ldr	r3, [r3, #20]
 801af18:	405a      	eors	r2, r3
 801af1a:	68bb      	ldr	r3, [r7, #8]
 801af1c:	3308      	adds	r3, #8
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801af22:	2b00      	cmp	r3, #0
 801af24:	d110      	bne.n	801af48 <udp_input_local_match+0xa8>
          return 1;
 801af26:	2301      	movs	r3, #1
 801af28:	e00f      	b.n	801af4a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d009      	beq.n	801af44 <udp_input_local_match+0xa4>
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d005      	beq.n	801af44 <udp_input_local_match+0xa4>
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	681a      	ldr	r2, [r3, #0]
 801af3c:	4b09      	ldr	r3, [pc, #36]	; (801af64 <udp_input_local_match+0xc4>)
 801af3e:	695b      	ldr	r3, [r3, #20]
 801af40:	429a      	cmp	r2, r3
 801af42:	d101      	bne.n	801af48 <udp_input_local_match+0xa8>
        return 1;
 801af44:	2301      	movs	r3, #1
 801af46:	e000      	b.n	801af4a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	3710      	adds	r7, #16
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
 801af52:	bf00      	nop
 801af54:	08026280 	.word	0x08026280
 801af58:	080262b0 	.word	0x080262b0
 801af5c:	080262d4 	.word	0x080262d4
 801af60:	080262fc 	.word	0x080262fc
 801af64:	2000aa5c 	.word	0x2000aa5c

0801af68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801af68:	b590      	push	{r4, r7, lr}
 801af6a:	b08d      	sub	sp, #52	; 0x34
 801af6c:	af02      	add	r7, sp, #8
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801af72:	2300      	movs	r3, #0
 801af74:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d105      	bne.n	801af88 <udp_input+0x20>
 801af7c:	4b7c      	ldr	r3, [pc, #496]	; (801b170 <udp_input+0x208>)
 801af7e:	22cf      	movs	r2, #207	; 0xcf
 801af80:	497c      	ldr	r1, [pc, #496]	; (801b174 <udp_input+0x20c>)
 801af82:	487d      	ldr	r0, [pc, #500]	; (801b178 <udp_input+0x210>)
 801af84:	f004 f952 	bl	801f22c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d105      	bne.n	801af9a <udp_input+0x32>
 801af8e:	4b78      	ldr	r3, [pc, #480]	; (801b170 <udp_input+0x208>)
 801af90:	22d0      	movs	r2, #208	; 0xd0
 801af92:	497a      	ldr	r1, [pc, #488]	; (801b17c <udp_input+0x214>)
 801af94:	4878      	ldr	r0, [pc, #480]	; (801b178 <udp_input+0x210>)
 801af96:	f004 f949 	bl	801f22c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	895b      	ldrh	r3, [r3, #10]
 801af9e:	2b07      	cmp	r3, #7
 801afa0:	d803      	bhi.n	801afaa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801afa2:	6878      	ldr	r0, [r7, #4]
 801afa4:	f7f9 fb56 	bl	8014654 <pbuf_free>
    goto end;
 801afa8:	e0de      	b.n	801b168 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	685b      	ldr	r3, [r3, #4]
 801afae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801afb0:	4b73      	ldr	r3, [pc, #460]	; (801b180 <udp_input+0x218>)
 801afb2:	695b      	ldr	r3, [r3, #20]
 801afb4:	4a72      	ldr	r2, [pc, #456]	; (801b180 <udp_input+0x218>)
 801afb6:	6812      	ldr	r2, [r2, #0]
 801afb8:	4611      	mov	r1, r2
 801afba:	4618      	mov	r0, r3
 801afbc:	f001 ff80 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801afc0:	4603      	mov	r3, r0
 801afc2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801afc4:	697b      	ldr	r3, [r7, #20]
 801afc6:	881b      	ldrh	r3, [r3, #0]
 801afc8:	b29b      	uxth	r3, r3
 801afca:	4618      	mov	r0, r3
 801afcc:	f7f7 fffa 	bl	8012fc4 <lwip_htons>
 801afd0:	4603      	mov	r3, r0
 801afd2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801afd4:	697b      	ldr	r3, [r7, #20]
 801afd6:	885b      	ldrh	r3, [r3, #2]
 801afd8:	b29b      	uxth	r3, r3
 801afda:	4618      	mov	r0, r3
 801afdc:	f7f7 fff2 	bl	8012fc4 <lwip_htons>
 801afe0:	4603      	mov	r3, r0
 801afe2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801afe4:	2300      	movs	r3, #0
 801afe6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801afe8:	2300      	movs	r3, #0
 801afea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801afec:	2300      	movs	r3, #0
 801afee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aff0:	4b64      	ldr	r3, [pc, #400]	; (801b184 <udp_input+0x21c>)
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	627b      	str	r3, [r7, #36]	; 0x24
 801aff6:	e054      	b.n	801b0a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801affa:	8a5b      	ldrh	r3, [r3, #18]
 801affc:	89fa      	ldrh	r2, [r7, #14]
 801affe:	429a      	cmp	r2, r3
 801b000:	d14a      	bne.n	801b098 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b002:	7cfb      	ldrb	r3, [r7, #19]
 801b004:	461a      	mov	r2, r3
 801b006:	6839      	ldr	r1, [r7, #0]
 801b008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b00a:	f7ff ff49 	bl	801aea0 <udp_input_local_match>
 801b00e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b010:	2b00      	cmp	r3, #0
 801b012:	d041      	beq.n	801b098 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b016:	7c1b      	ldrb	r3, [r3, #16]
 801b018:	f003 0304 	and.w	r3, r3, #4
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d11d      	bne.n	801b05c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b020:	69fb      	ldr	r3, [r7, #28]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d102      	bne.n	801b02c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b028:	61fb      	str	r3, [r7, #28]
 801b02a:	e017      	b.n	801b05c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b02c:	7cfb      	ldrb	r3, [r7, #19]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d014      	beq.n	801b05c <udp_input+0xf4>
 801b032:	4b53      	ldr	r3, [pc, #332]	; (801b180 <udp_input+0x218>)
 801b034:	695b      	ldr	r3, [r3, #20]
 801b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b03a:	d10f      	bne.n	801b05c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b03c:	69fb      	ldr	r3, [r7, #28]
 801b03e:	681a      	ldr	r2, [r3, #0]
 801b040:	683b      	ldr	r3, [r7, #0]
 801b042:	3304      	adds	r3, #4
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	429a      	cmp	r2, r3
 801b048:	d008      	beq.n	801b05c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04c:	681a      	ldr	r2, [r3, #0]
 801b04e:	683b      	ldr	r3, [r7, #0]
 801b050:	3304      	adds	r3, #4
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	429a      	cmp	r2, r3
 801b056:	d101      	bne.n	801b05c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05e:	8a9b      	ldrh	r3, [r3, #20]
 801b060:	8a3a      	ldrh	r2, [r7, #16]
 801b062:	429a      	cmp	r2, r3
 801b064:	d118      	bne.n	801b098 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b068:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d005      	beq.n	801b07a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b070:	685a      	ldr	r2, [r3, #4]
 801b072:	4b43      	ldr	r3, [pc, #268]	; (801b180 <udp_input+0x218>)
 801b074:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b076:	429a      	cmp	r2, r3
 801b078:	d10e      	bne.n	801b098 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b07a:	6a3b      	ldr	r3, [r7, #32]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d014      	beq.n	801b0aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b082:	68da      	ldr	r2, [r3, #12]
 801b084:	6a3b      	ldr	r3, [r7, #32]
 801b086:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b088:	4b3e      	ldr	r3, [pc, #248]	; (801b184 <udp_input+0x21c>)
 801b08a:	681a      	ldr	r2, [r3, #0]
 801b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b08e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b090:	4a3c      	ldr	r2, [pc, #240]	; (801b184 <udp_input+0x21c>)
 801b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b094:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b096:	e008      	b.n	801b0aa <udp_input+0x142>
      }
    }

    prev = pcb;
 801b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b09a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b09e:	68db      	ldr	r3, [r3, #12]
 801b0a0:	627b      	str	r3, [r7, #36]	; 0x24
 801b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d1a7      	bne.n	801aff8 <udp_input+0x90>
 801b0a8:	e000      	b.n	801b0ac <udp_input+0x144>
        break;
 801b0aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d101      	bne.n	801b0b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b0b2:	69fb      	ldr	r3, [r7, #28]
 801b0b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d002      	beq.n	801b0c2 <udp_input+0x15a>
    for_us = 1;
 801b0bc:	2301      	movs	r3, #1
 801b0be:	76fb      	strb	r3, [r7, #27]
 801b0c0:	e00a      	b.n	801b0d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	3304      	adds	r3, #4
 801b0c6:	681a      	ldr	r2, [r3, #0]
 801b0c8:	4b2d      	ldr	r3, [pc, #180]	; (801b180 <udp_input+0x218>)
 801b0ca:	695b      	ldr	r3, [r3, #20]
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	bf0c      	ite	eq
 801b0d0:	2301      	moveq	r3, #1
 801b0d2:	2300      	movne	r3, #0
 801b0d4:	b2db      	uxtb	r3, r3
 801b0d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b0d8:	7efb      	ldrb	r3, [r7, #27]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d041      	beq.n	801b162 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b0de:	2108      	movs	r1, #8
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	f7f9 fa31 	bl	8014548 <pbuf_remove_header>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d00a      	beq.n	801b102 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b0ec:	4b20      	ldr	r3, [pc, #128]	; (801b170 <udp_input+0x208>)
 801b0ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b0f2:	4925      	ldr	r1, [pc, #148]	; (801b188 <udp_input+0x220>)
 801b0f4:	4820      	ldr	r0, [pc, #128]	; (801b178 <udp_input+0x210>)
 801b0f6:	f004 f899 	bl	801f22c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b0fa:	6878      	ldr	r0, [r7, #4]
 801b0fc:	f7f9 faaa 	bl	8014654 <pbuf_free>
      goto end;
 801b100:	e032      	b.n	801b168 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b104:	2b00      	cmp	r3, #0
 801b106:	d012      	beq.n	801b12e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b10a:	699b      	ldr	r3, [r3, #24]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d00a      	beq.n	801b126 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b112:	699c      	ldr	r4, [r3, #24]
 801b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b116:	69d8      	ldr	r0, [r3, #28]
 801b118:	8a3b      	ldrh	r3, [r7, #16]
 801b11a:	9300      	str	r3, [sp, #0]
 801b11c:	4b1b      	ldr	r3, [pc, #108]	; (801b18c <udp_input+0x224>)
 801b11e:	687a      	ldr	r2, [r7, #4]
 801b120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b122:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b124:	e021      	b.n	801b16a <udp_input+0x202>
        pbuf_free(p);
 801b126:	6878      	ldr	r0, [r7, #4]
 801b128:	f7f9 fa94 	bl	8014654 <pbuf_free>
        goto end;
 801b12c:	e01c      	b.n	801b168 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b12e:	7cfb      	ldrb	r3, [r7, #19]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d112      	bne.n	801b15a <udp_input+0x1f2>
 801b134:	4b12      	ldr	r3, [pc, #72]	; (801b180 <udp_input+0x218>)
 801b136:	695b      	ldr	r3, [r3, #20]
 801b138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b13c:	2be0      	cmp	r3, #224	; 0xe0
 801b13e:	d00c      	beq.n	801b15a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b140:	4b0f      	ldr	r3, [pc, #60]	; (801b180 <udp_input+0x218>)
 801b142:	899b      	ldrh	r3, [r3, #12]
 801b144:	3308      	adds	r3, #8
 801b146:	b29b      	uxth	r3, r3
 801b148:	b21b      	sxth	r3, r3
 801b14a:	4619      	mov	r1, r3
 801b14c:	6878      	ldr	r0, [r7, #4]
 801b14e:	f7f9 fa6e 	bl	801462e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b152:	2103      	movs	r1, #3
 801b154:	6878      	ldr	r0, [r7, #4]
 801b156:	f001 fb93 	bl	801c880 <icmp_dest_unreach>
      pbuf_free(p);
 801b15a:	6878      	ldr	r0, [r7, #4]
 801b15c:	f7f9 fa7a 	bl	8014654 <pbuf_free>
  return;
 801b160:	e003      	b.n	801b16a <udp_input+0x202>
    pbuf_free(p);
 801b162:	6878      	ldr	r0, [r7, #4]
 801b164:	f7f9 fa76 	bl	8014654 <pbuf_free>
  return;
 801b168:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b16a:	372c      	adds	r7, #44	; 0x2c
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd90      	pop	{r4, r7, pc}
 801b170:	08026280 	.word	0x08026280
 801b174:	08026324 	.word	0x08026324
 801b178:	080262d4 	.word	0x080262d4
 801b17c:	0802633c 	.word	0x0802633c
 801b180:	2000aa5c 	.word	0x2000aa5c
 801b184:	2000e188 	.word	0x2000e188
 801b188:	08026358 	.word	0x08026358
 801b18c:	2000aa6c 	.word	0x2000aa6c

0801b190 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
 801b198:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d109      	bne.n	801b1b4 <udp_send+0x24>
 801b1a0:	4b11      	ldr	r3, [pc, #68]	; (801b1e8 <udp_send+0x58>)
 801b1a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 801b1a6:	4911      	ldr	r1, [pc, #68]	; (801b1ec <udp_send+0x5c>)
 801b1a8:	4811      	ldr	r0, [pc, #68]	; (801b1f0 <udp_send+0x60>)
 801b1aa:	f004 f83f 	bl	801f22c <iprintf>
 801b1ae:	f06f 030f 	mvn.w	r3, #15
 801b1b2:	e015      	b.n	801b1e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801b1b4:	683b      	ldr	r3, [r7, #0]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d109      	bne.n	801b1ce <udp_send+0x3e>
 801b1ba:	4b0b      	ldr	r3, [pc, #44]	; (801b1e8 <udp_send+0x58>)
 801b1bc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b1c0:	490c      	ldr	r1, [pc, #48]	; (801b1f4 <udp_send+0x64>)
 801b1c2:	480b      	ldr	r0, [pc, #44]	; (801b1f0 <udp_send+0x60>)
 801b1c4:	f004 f832 	bl	801f22c <iprintf>
 801b1c8:	f06f 030f 	mvn.w	r3, #15
 801b1cc:	e008      	b.n	801b1e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	1d1a      	adds	r2, r3, #4
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	8a9b      	ldrh	r3, [r3, #20]
 801b1d6:	6839      	ldr	r1, [r7, #0]
 801b1d8:	6878      	ldr	r0, [r7, #4]
 801b1da:	f000 f80d 	bl	801b1f8 <udp_sendto>
 801b1de:	4603      	mov	r3, r0
}
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	3708      	adds	r7, #8
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}
 801b1e8:	08026280 	.word	0x08026280
 801b1ec:	08026374 	.word	0x08026374
 801b1f0:	080262d4 	.word	0x080262d4
 801b1f4:	0802638c 	.word	0x0802638c

0801b1f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b088      	sub	sp, #32
 801b1fc:	af02      	add	r7, sp, #8
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	60b9      	str	r1, [r7, #8]
 801b202:	607a      	str	r2, [r7, #4]
 801b204:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d109      	bne.n	801b220 <udp_sendto+0x28>
 801b20c:	4b23      	ldr	r3, [pc, #140]	; (801b29c <udp_sendto+0xa4>)
 801b20e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b212:	4923      	ldr	r1, [pc, #140]	; (801b2a0 <udp_sendto+0xa8>)
 801b214:	4823      	ldr	r0, [pc, #140]	; (801b2a4 <udp_sendto+0xac>)
 801b216:	f004 f809 	bl	801f22c <iprintf>
 801b21a:	f06f 030f 	mvn.w	r3, #15
 801b21e:	e038      	b.n	801b292 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d109      	bne.n	801b23a <udp_sendto+0x42>
 801b226:	4b1d      	ldr	r3, [pc, #116]	; (801b29c <udp_sendto+0xa4>)
 801b228:	f240 2219 	movw	r2, #537	; 0x219
 801b22c:	491e      	ldr	r1, [pc, #120]	; (801b2a8 <udp_sendto+0xb0>)
 801b22e:	481d      	ldr	r0, [pc, #116]	; (801b2a4 <udp_sendto+0xac>)
 801b230:	f003 fffc 	bl	801f22c <iprintf>
 801b234:	f06f 030f 	mvn.w	r3, #15
 801b238:	e02b      	b.n	801b292 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d109      	bne.n	801b254 <udp_sendto+0x5c>
 801b240:	4b16      	ldr	r3, [pc, #88]	; (801b29c <udp_sendto+0xa4>)
 801b242:	f240 221a 	movw	r2, #538	; 0x21a
 801b246:	4919      	ldr	r1, [pc, #100]	; (801b2ac <udp_sendto+0xb4>)
 801b248:	4816      	ldr	r0, [pc, #88]	; (801b2a4 <udp_sendto+0xac>)
 801b24a:	f003 ffef 	bl	801f22c <iprintf>
 801b24e:	f06f 030f 	mvn.w	r3, #15
 801b252:	e01e      	b.n	801b292 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	7a1b      	ldrb	r3, [r3, #8]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d006      	beq.n	801b26a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	7a1b      	ldrb	r3, [r3, #8]
 801b260:	4618      	mov	r0, r3
 801b262:	f7f8 fe69 	bl	8013f38 <netif_get_by_index>
 801b266:	6178      	str	r0, [r7, #20]
 801b268:	e003      	b.n	801b272 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b26a:	6878      	ldr	r0, [r7, #4]
 801b26c:	f001 fb92 	bl	801c994 <ip4_route>
 801b270:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801b272:	697b      	ldr	r3, [r7, #20]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d102      	bne.n	801b27e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801b278:	f06f 0303 	mvn.w	r3, #3
 801b27c:	e009      	b.n	801b292 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801b27e:	887a      	ldrh	r2, [r7, #2]
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	9300      	str	r3, [sp, #0]
 801b284:	4613      	mov	r3, r2
 801b286:	687a      	ldr	r2, [r7, #4]
 801b288:	68b9      	ldr	r1, [r7, #8]
 801b28a:	68f8      	ldr	r0, [r7, #12]
 801b28c:	f000 f810 	bl	801b2b0 <udp_sendto_if>
 801b290:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b292:	4618      	mov	r0, r3
 801b294:	3718      	adds	r7, #24
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	bf00      	nop
 801b29c:	08026280 	.word	0x08026280
 801b2a0:	080263a4 	.word	0x080263a4
 801b2a4:	080262d4 	.word	0x080262d4
 801b2a8:	080263bc 	.word	0x080263bc
 801b2ac:	080263d8 	.word	0x080263d8

0801b2b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b088      	sub	sp, #32
 801b2b4:	af02      	add	r7, sp, #8
 801b2b6:	60f8      	str	r0, [r7, #12]
 801b2b8:	60b9      	str	r1, [r7, #8]
 801b2ba:	607a      	str	r2, [r7, #4]
 801b2bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d109      	bne.n	801b2d8 <udp_sendto_if+0x28>
 801b2c4:	4b2e      	ldr	r3, [pc, #184]	; (801b380 <udp_sendto_if+0xd0>)
 801b2c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b2ca:	492e      	ldr	r1, [pc, #184]	; (801b384 <udp_sendto_if+0xd4>)
 801b2cc:	482e      	ldr	r0, [pc, #184]	; (801b388 <udp_sendto_if+0xd8>)
 801b2ce:	f003 ffad 	bl	801f22c <iprintf>
 801b2d2:	f06f 030f 	mvn.w	r3, #15
 801b2d6:	e04f      	b.n	801b378 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b2d8:	68bb      	ldr	r3, [r7, #8]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d109      	bne.n	801b2f2 <udp_sendto_if+0x42>
 801b2de:	4b28      	ldr	r3, [pc, #160]	; (801b380 <udp_sendto_if+0xd0>)
 801b2e0:	f240 2281 	movw	r2, #641	; 0x281
 801b2e4:	4929      	ldr	r1, [pc, #164]	; (801b38c <udp_sendto_if+0xdc>)
 801b2e6:	4828      	ldr	r0, [pc, #160]	; (801b388 <udp_sendto_if+0xd8>)
 801b2e8:	f003 ffa0 	bl	801f22c <iprintf>
 801b2ec:	f06f 030f 	mvn.w	r3, #15
 801b2f0:	e042      	b.n	801b378 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d109      	bne.n	801b30c <udp_sendto_if+0x5c>
 801b2f8:	4b21      	ldr	r3, [pc, #132]	; (801b380 <udp_sendto_if+0xd0>)
 801b2fa:	f240 2282 	movw	r2, #642	; 0x282
 801b2fe:	4924      	ldr	r1, [pc, #144]	; (801b390 <udp_sendto_if+0xe0>)
 801b300:	4821      	ldr	r0, [pc, #132]	; (801b388 <udp_sendto_if+0xd8>)
 801b302:	f003 ff93 	bl	801f22c <iprintf>
 801b306:	f06f 030f 	mvn.w	r3, #15
 801b30a:	e035      	b.n	801b378 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b30c:	6a3b      	ldr	r3, [r7, #32]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d109      	bne.n	801b326 <udp_sendto_if+0x76>
 801b312:	4b1b      	ldr	r3, [pc, #108]	; (801b380 <udp_sendto_if+0xd0>)
 801b314:	f240 2283 	movw	r2, #643	; 0x283
 801b318:	491e      	ldr	r1, [pc, #120]	; (801b394 <udp_sendto_if+0xe4>)
 801b31a:	481b      	ldr	r0, [pc, #108]	; (801b388 <udp_sendto_if+0xd8>)
 801b31c:	f003 ff86 	bl	801f22c <iprintf>
 801b320:	f06f 030f 	mvn.w	r3, #15
 801b324:	e028      	b.n	801b378 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d009      	beq.n	801b340 <udp_sendto_if+0x90>
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d005      	beq.n	801b340 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b33c:	2be0      	cmp	r3, #224	; 0xe0
 801b33e:	d103      	bne.n	801b348 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b340:	6a3b      	ldr	r3, [r7, #32]
 801b342:	3304      	adds	r3, #4
 801b344:	617b      	str	r3, [r7, #20]
 801b346:	e00b      	b.n	801b360 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	681a      	ldr	r2, [r3, #0]
 801b34c:	6a3b      	ldr	r3, [r7, #32]
 801b34e:	3304      	adds	r3, #4
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	429a      	cmp	r2, r3
 801b354:	d002      	beq.n	801b35c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b356:	f06f 0303 	mvn.w	r3, #3
 801b35a:	e00d      	b.n	801b378 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b360:	887a      	ldrh	r2, [r7, #2]
 801b362:	697b      	ldr	r3, [r7, #20]
 801b364:	9301      	str	r3, [sp, #4]
 801b366:	6a3b      	ldr	r3, [r7, #32]
 801b368:	9300      	str	r3, [sp, #0]
 801b36a:	4613      	mov	r3, r2
 801b36c:	687a      	ldr	r2, [r7, #4]
 801b36e:	68b9      	ldr	r1, [r7, #8]
 801b370:	68f8      	ldr	r0, [r7, #12]
 801b372:	f000 f811 	bl	801b398 <udp_sendto_if_src>
 801b376:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b378:	4618      	mov	r0, r3
 801b37a:	3718      	adds	r7, #24
 801b37c:	46bd      	mov	sp, r7
 801b37e:	bd80      	pop	{r7, pc}
 801b380:	08026280 	.word	0x08026280
 801b384:	080263f4 	.word	0x080263f4
 801b388:	080262d4 	.word	0x080262d4
 801b38c:	08026410 	.word	0x08026410
 801b390:	0802642c 	.word	0x0802642c
 801b394:	0802644c 	.word	0x0802644c

0801b398 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b398:	b580      	push	{r7, lr}
 801b39a:	b08c      	sub	sp, #48	; 0x30
 801b39c:	af04      	add	r7, sp, #16
 801b39e:	60f8      	str	r0, [r7, #12]
 801b3a0:	60b9      	str	r1, [r7, #8]
 801b3a2:	607a      	str	r2, [r7, #4]
 801b3a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d109      	bne.n	801b3c0 <udp_sendto_if_src+0x28>
 801b3ac:	4b65      	ldr	r3, [pc, #404]	; (801b544 <udp_sendto_if_src+0x1ac>)
 801b3ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b3b2:	4965      	ldr	r1, [pc, #404]	; (801b548 <udp_sendto_if_src+0x1b0>)
 801b3b4:	4865      	ldr	r0, [pc, #404]	; (801b54c <udp_sendto_if_src+0x1b4>)
 801b3b6:	f003 ff39 	bl	801f22c <iprintf>
 801b3ba:	f06f 030f 	mvn.w	r3, #15
 801b3be:	e0bc      	b.n	801b53a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d109      	bne.n	801b3da <udp_sendto_if_src+0x42>
 801b3c6:	4b5f      	ldr	r3, [pc, #380]	; (801b544 <udp_sendto_if_src+0x1ac>)
 801b3c8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b3cc:	4960      	ldr	r1, [pc, #384]	; (801b550 <udp_sendto_if_src+0x1b8>)
 801b3ce:	485f      	ldr	r0, [pc, #380]	; (801b54c <udp_sendto_if_src+0x1b4>)
 801b3d0:	f003 ff2c 	bl	801f22c <iprintf>
 801b3d4:	f06f 030f 	mvn.w	r3, #15
 801b3d8:	e0af      	b.n	801b53a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d109      	bne.n	801b3f4 <udp_sendto_if_src+0x5c>
 801b3e0:	4b58      	ldr	r3, [pc, #352]	; (801b544 <udp_sendto_if_src+0x1ac>)
 801b3e2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b3e6:	495b      	ldr	r1, [pc, #364]	; (801b554 <udp_sendto_if_src+0x1bc>)
 801b3e8:	4858      	ldr	r0, [pc, #352]	; (801b54c <udp_sendto_if_src+0x1b4>)
 801b3ea:	f003 ff1f 	bl	801f22c <iprintf>
 801b3ee:	f06f 030f 	mvn.w	r3, #15
 801b3f2:	e0a2      	b.n	801b53a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d109      	bne.n	801b40e <udp_sendto_if_src+0x76>
 801b3fa:	4b52      	ldr	r3, [pc, #328]	; (801b544 <udp_sendto_if_src+0x1ac>)
 801b3fc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b400:	4955      	ldr	r1, [pc, #340]	; (801b558 <udp_sendto_if_src+0x1c0>)
 801b402:	4852      	ldr	r0, [pc, #328]	; (801b54c <udp_sendto_if_src+0x1b4>)
 801b404:	f003 ff12 	bl	801f22c <iprintf>
 801b408:	f06f 030f 	mvn.w	r3, #15
 801b40c:	e095      	b.n	801b53a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b410:	2b00      	cmp	r3, #0
 801b412:	d109      	bne.n	801b428 <udp_sendto_if_src+0x90>
 801b414:	4b4b      	ldr	r3, [pc, #300]	; (801b544 <udp_sendto_if_src+0x1ac>)
 801b416:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b41a:	4950      	ldr	r1, [pc, #320]	; (801b55c <udp_sendto_if_src+0x1c4>)
 801b41c:	484b      	ldr	r0, [pc, #300]	; (801b54c <udp_sendto_if_src+0x1b4>)
 801b41e:	f003 ff05 	bl	801f22c <iprintf>
 801b422:	f06f 030f 	mvn.w	r3, #15
 801b426:	e088      	b.n	801b53a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	8a5b      	ldrh	r3, [r3, #18]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d10f      	bne.n	801b450 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b430:	68f9      	ldr	r1, [r7, #12]
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	8a5b      	ldrh	r3, [r3, #18]
 801b436:	461a      	mov	r2, r3
 801b438:	68f8      	ldr	r0, [r7, #12]
 801b43a:	f000 f893 	bl	801b564 <udp_bind>
 801b43e:	4603      	mov	r3, r0
 801b440:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b442:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d002      	beq.n	801b450 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b44a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b44e:	e074      	b.n	801b53a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	891b      	ldrh	r3, [r3, #8]
 801b454:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b458:	4293      	cmp	r3, r2
 801b45a:	d902      	bls.n	801b462 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b45c:	f04f 33ff 	mov.w	r3, #4294967295
 801b460:	e06b      	b.n	801b53a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b462:	2108      	movs	r1, #8
 801b464:	68b8      	ldr	r0, [r7, #8]
 801b466:	f7f9 f85f 	bl	8014528 <pbuf_add_header>
 801b46a:	4603      	mov	r3, r0
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d015      	beq.n	801b49c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b470:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b474:	2108      	movs	r1, #8
 801b476:	2022      	movs	r0, #34	; 0x22
 801b478:	f7f8 fe08 	bl	801408c <pbuf_alloc>
 801b47c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b47e:	69fb      	ldr	r3, [r7, #28]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d102      	bne.n	801b48a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b484:	f04f 33ff 	mov.w	r3, #4294967295
 801b488:	e057      	b.n	801b53a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b48a:	68bb      	ldr	r3, [r7, #8]
 801b48c:	891b      	ldrh	r3, [r3, #8]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d006      	beq.n	801b4a0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b492:	68b9      	ldr	r1, [r7, #8]
 801b494:	69f8      	ldr	r0, [r7, #28]
 801b496:	f7f9 fa01 	bl	801489c <pbuf_chain>
 801b49a:	e001      	b.n	801b4a0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b49c:	68bb      	ldr	r3, [r7, #8]
 801b49e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b4a0:	69fb      	ldr	r3, [r7, #28]
 801b4a2:	895b      	ldrh	r3, [r3, #10]
 801b4a4:	2b07      	cmp	r3, #7
 801b4a6:	d806      	bhi.n	801b4b6 <udp_sendto_if_src+0x11e>
 801b4a8:	4b26      	ldr	r3, [pc, #152]	; (801b544 <udp_sendto_if_src+0x1ac>)
 801b4aa:	f240 320d 	movw	r2, #781	; 0x30d
 801b4ae:	492c      	ldr	r1, [pc, #176]	; (801b560 <udp_sendto_if_src+0x1c8>)
 801b4b0:	4826      	ldr	r0, [pc, #152]	; (801b54c <udp_sendto_if_src+0x1b4>)
 801b4b2:	f003 febb 	bl	801f22c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b4b6:	69fb      	ldr	r3, [r7, #28]
 801b4b8:	685b      	ldr	r3, [r3, #4]
 801b4ba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	8a5b      	ldrh	r3, [r3, #18]
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	f7f7 fd7f 	bl	8012fc4 <lwip_htons>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	461a      	mov	r2, r3
 801b4ca:	697b      	ldr	r3, [r7, #20]
 801b4cc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b4ce:	887b      	ldrh	r3, [r7, #2]
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	f7f7 fd77 	bl	8012fc4 <lwip_htons>
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	461a      	mov	r2, r3
 801b4da:	697b      	ldr	r3, [r7, #20]
 801b4dc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b4de:	697b      	ldr	r3, [r7, #20]
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	719a      	strb	r2, [r3, #6]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b4e8:	69fb      	ldr	r3, [r7, #28]
 801b4ea:	891b      	ldrh	r3, [r3, #8]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7f7 fd69 	bl	8012fc4 <lwip_htons>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	461a      	mov	r2, r3
 801b4f6:	697b      	ldr	r3, [r7, #20]
 801b4f8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b4fa:	2311      	movs	r3, #17
 801b4fc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	7adb      	ldrb	r3, [r3, #11]
 801b502:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	7a9b      	ldrb	r3, [r3, #10]
 801b508:	7cb9      	ldrb	r1, [r7, #18]
 801b50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b50c:	9202      	str	r2, [sp, #8]
 801b50e:	7cfa      	ldrb	r2, [r7, #19]
 801b510:	9201      	str	r2, [sp, #4]
 801b512:	9300      	str	r3, [sp, #0]
 801b514:	460b      	mov	r3, r1
 801b516:	687a      	ldr	r2, [r7, #4]
 801b518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b51a:	69f8      	ldr	r0, [r7, #28]
 801b51c:	f001 fc22 	bl	801cd64 <ip4_output_if_src>
 801b520:	4603      	mov	r3, r0
 801b522:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b524:	69fa      	ldr	r2, [r7, #28]
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	429a      	cmp	r2, r3
 801b52a:	d004      	beq.n	801b536 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b52c:	69f8      	ldr	r0, [r7, #28]
 801b52e:	f7f9 f891 	bl	8014654 <pbuf_free>
    q = NULL;
 801b532:	2300      	movs	r3, #0
 801b534:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b536:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b53a:	4618      	mov	r0, r3
 801b53c:	3720      	adds	r7, #32
 801b53e:	46bd      	mov	sp, r7
 801b540:	bd80      	pop	{r7, pc}
 801b542:	bf00      	nop
 801b544:	08026280 	.word	0x08026280
 801b548:	0802646c 	.word	0x0802646c
 801b54c:	080262d4 	.word	0x080262d4
 801b550:	0802648c 	.word	0x0802648c
 801b554:	080264ac 	.word	0x080264ac
 801b558:	080264d0 	.word	0x080264d0
 801b55c:	080264f4 	.word	0x080264f4
 801b560:	08026518 	.word	0x08026518

0801b564 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b086      	sub	sp, #24
 801b568:	af00      	add	r7, sp, #0
 801b56a:	60f8      	str	r0, [r7, #12]
 801b56c:	60b9      	str	r1, [r7, #8]
 801b56e:	4613      	mov	r3, r2
 801b570:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b572:	68bb      	ldr	r3, [r7, #8]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d101      	bne.n	801b57c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b578:	4b39      	ldr	r3, [pc, #228]	; (801b660 <udp_bind+0xfc>)
 801b57a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d109      	bne.n	801b596 <udp_bind+0x32>
 801b582:	4b38      	ldr	r3, [pc, #224]	; (801b664 <udp_bind+0x100>)
 801b584:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b588:	4937      	ldr	r1, [pc, #220]	; (801b668 <udp_bind+0x104>)
 801b58a:	4838      	ldr	r0, [pc, #224]	; (801b66c <udp_bind+0x108>)
 801b58c:	f003 fe4e 	bl	801f22c <iprintf>
 801b590:	f06f 030f 	mvn.w	r3, #15
 801b594:	e060      	b.n	801b658 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b596:	2300      	movs	r3, #0
 801b598:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b59a:	4b35      	ldr	r3, [pc, #212]	; (801b670 <udp_bind+0x10c>)
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	617b      	str	r3, [r7, #20]
 801b5a0:	e009      	b.n	801b5b6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b5a2:	68fa      	ldr	r2, [r7, #12]
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	d102      	bne.n	801b5b0 <udp_bind+0x4c>
      rebind = 1;
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	74fb      	strb	r3, [r7, #19]
      break;
 801b5ae:	e005      	b.n	801b5bc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b5b0:	697b      	ldr	r3, [r7, #20]
 801b5b2:	68db      	ldr	r3, [r3, #12]
 801b5b4:	617b      	str	r3, [r7, #20]
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d1f2      	bne.n	801b5a2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b5bc:	88fb      	ldrh	r3, [r7, #6]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d109      	bne.n	801b5d6 <udp_bind+0x72>
    port = udp_new_port();
 801b5c2:	f7ff fc35 	bl	801ae30 <udp_new_port>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b5ca:	88fb      	ldrh	r3, [r7, #6]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d12c      	bne.n	801b62a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b5d0:	f06f 0307 	mvn.w	r3, #7
 801b5d4:	e040      	b.n	801b658 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b5d6:	4b26      	ldr	r3, [pc, #152]	; (801b670 <udp_bind+0x10c>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	617b      	str	r3, [r7, #20]
 801b5dc:	e022      	b.n	801b624 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b5de:	68fa      	ldr	r2, [r7, #12]
 801b5e0:	697b      	ldr	r3, [r7, #20]
 801b5e2:	429a      	cmp	r2, r3
 801b5e4:	d01b      	beq.n	801b61e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	8a5b      	ldrh	r3, [r3, #18]
 801b5ea:	88fa      	ldrh	r2, [r7, #6]
 801b5ec:	429a      	cmp	r2, r3
 801b5ee:	d116      	bne.n	801b61e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	681a      	ldr	r2, [r3, #0]
 801b5f4:	68bb      	ldr	r3, [r7, #8]
 801b5f6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b5f8:	429a      	cmp	r2, r3
 801b5fa:	d00d      	beq.n	801b618 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d00a      	beq.n	801b618 <udp_bind+0xb4>
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d006      	beq.n	801b618 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b60a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d003      	beq.n	801b618 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b610:	697b      	ldr	r3, [r7, #20]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d102      	bne.n	801b61e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b618:	f06f 0307 	mvn.w	r3, #7
 801b61c:	e01c      	b.n	801b658 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b61e:	697b      	ldr	r3, [r7, #20]
 801b620:	68db      	ldr	r3, [r3, #12]
 801b622:	617b      	str	r3, [r7, #20]
 801b624:	697b      	ldr	r3, [r7, #20]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d1d9      	bne.n	801b5de <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d002      	beq.n	801b636 <udp_bind+0xd2>
 801b630:	68bb      	ldr	r3, [r7, #8]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	e000      	b.n	801b638 <udp_bind+0xd4>
 801b636:	2300      	movs	r3, #0
 801b638:	68fa      	ldr	r2, [r7, #12]
 801b63a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	88fa      	ldrh	r2, [r7, #6]
 801b640:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b642:	7cfb      	ldrb	r3, [r7, #19]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d106      	bne.n	801b656 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b648:	4b09      	ldr	r3, [pc, #36]	; (801b670 <udp_bind+0x10c>)
 801b64a:	681a      	ldr	r2, [r3, #0]
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b650:	4a07      	ldr	r2, [pc, #28]	; (801b670 <udp_bind+0x10c>)
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b656:	2300      	movs	r3, #0
}
 801b658:	4618      	mov	r0, r3
 801b65a:	3718      	adds	r7, #24
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}
 801b660:	08026fa0 	.word	0x08026fa0
 801b664:	08026280 	.word	0x08026280
 801b668:	08026548 	.word	0x08026548
 801b66c:	080262d4 	.word	0x080262d4
 801b670:	2000e188 	.word	0x2000e188

0801b674 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b084      	sub	sp, #16
 801b678:	af00      	add	r7, sp, #0
 801b67a:	60f8      	str	r0, [r7, #12]
 801b67c:	60b9      	str	r1, [r7, #8]
 801b67e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d107      	bne.n	801b696 <udp_recv+0x22>
 801b686:	4b08      	ldr	r3, [pc, #32]	; (801b6a8 <udp_recv+0x34>)
 801b688:	f240 428a 	movw	r2, #1162	; 0x48a
 801b68c:	4907      	ldr	r1, [pc, #28]	; (801b6ac <udp_recv+0x38>)
 801b68e:	4808      	ldr	r0, [pc, #32]	; (801b6b0 <udp_recv+0x3c>)
 801b690:	f003 fdcc 	bl	801f22c <iprintf>
 801b694:	e005      	b.n	801b6a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	68ba      	ldr	r2, [r7, #8]
 801b69a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	687a      	ldr	r2, [r7, #4]
 801b6a0:	61da      	str	r2, [r3, #28]
}
 801b6a2:	3710      	adds	r7, #16
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}
 801b6a8:	08026280 	.word	0x08026280
 801b6ac:	080265b4 	.word	0x080265b4
 801b6b0:	080262d4 	.word	0x080262d4

0801b6b4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b084      	sub	sp, #16
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d107      	bne.n	801b6d2 <udp_remove+0x1e>
 801b6c2:	4b19      	ldr	r3, [pc, #100]	; (801b728 <udp_remove+0x74>)
 801b6c4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b6c8:	4918      	ldr	r1, [pc, #96]	; (801b72c <udp_remove+0x78>)
 801b6ca:	4819      	ldr	r0, [pc, #100]	; (801b730 <udp_remove+0x7c>)
 801b6cc:	f003 fdae 	bl	801f22c <iprintf>
 801b6d0:	e026      	b.n	801b720 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b6d2:	4b18      	ldr	r3, [pc, #96]	; (801b734 <udp_remove+0x80>)
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	687a      	ldr	r2, [r7, #4]
 801b6d8:	429a      	cmp	r2, r3
 801b6da:	d105      	bne.n	801b6e8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b6dc:	4b15      	ldr	r3, [pc, #84]	; (801b734 <udp_remove+0x80>)
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	68db      	ldr	r3, [r3, #12]
 801b6e2:	4a14      	ldr	r2, [pc, #80]	; (801b734 <udp_remove+0x80>)
 801b6e4:	6013      	str	r3, [r2, #0]
 801b6e6:	e017      	b.n	801b718 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b6e8:	4b12      	ldr	r3, [pc, #72]	; (801b734 <udp_remove+0x80>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	60fb      	str	r3, [r7, #12]
 801b6ee:	e010      	b.n	801b712 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	68db      	ldr	r3, [r3, #12]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d009      	beq.n	801b70c <udp_remove+0x58>
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	68db      	ldr	r3, [r3, #12]
 801b6fc:	687a      	ldr	r2, [r7, #4]
 801b6fe:	429a      	cmp	r2, r3
 801b700:	d104      	bne.n	801b70c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	68da      	ldr	r2, [r3, #12]
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	60da      	str	r2, [r3, #12]
        break;
 801b70a:	e005      	b.n	801b718 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	68db      	ldr	r3, [r3, #12]
 801b710:	60fb      	str	r3, [r7, #12]
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d1eb      	bne.n	801b6f0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b718:	6879      	ldr	r1, [r7, #4]
 801b71a:	2000      	movs	r0, #0
 801b71c:	f7f8 f95a 	bl	80139d4 <memp_free>
}
 801b720:	3710      	adds	r7, #16
 801b722:	46bd      	mov	sp, r7
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop
 801b728:	08026280 	.word	0x08026280
 801b72c:	080265cc 	.word	0x080265cc
 801b730:	080262d4 	.word	0x080262d4
 801b734:	2000e188 	.word	0x2000e188

0801b738 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b73e:	2000      	movs	r0, #0
 801b740:	f7f8 f8f6 	bl	8013930 <memp_malloc>
 801b744:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d007      	beq.n	801b75c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b74c:	2220      	movs	r2, #32
 801b74e:	2100      	movs	r1, #0
 801b750:	6878      	ldr	r0, [r7, #4]
 801b752:	f002 fe3f 	bl	801e3d4 <memset>
    pcb->ttl = UDP_TTL;
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	22ff      	movs	r2, #255	; 0xff
 801b75a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b75c:	687b      	ldr	r3, [r7, #4]
}
 801b75e:	4618      	mov	r0, r3
 801b760:	3708      	adds	r7, #8
 801b762:	46bd      	mov	sp, r7
 801b764:	bd80      	pop	{r7, pc}

0801b766 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b766:	b580      	push	{r7, lr}
 801b768:	b084      	sub	sp, #16
 801b76a:	af00      	add	r7, sp, #0
 801b76c:	4603      	mov	r3, r0
 801b76e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b770:	f7ff ffe2 	bl	801b738 <udp_new>
 801b774:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b776:	68fb      	ldr	r3, [r7, #12]
}
 801b778:	4618      	mov	r0, r3
 801b77a:	3710      	adds	r7, #16
 801b77c:	46bd      	mov	sp, r7
 801b77e:	bd80      	pop	{r7, pc}

0801b780 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b780:	b480      	push	{r7}
 801b782:	b085      	sub	sp, #20
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
 801b788:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d01e      	beq.n	801b7ce <udp_netif_ip_addr_changed+0x4e>
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d01a      	beq.n	801b7ce <udp_netif_ip_addr_changed+0x4e>
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d017      	beq.n	801b7ce <udp_netif_ip_addr_changed+0x4e>
 801b79e:	683b      	ldr	r3, [r7, #0]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d013      	beq.n	801b7ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b7a6:	4b0d      	ldr	r3, [pc, #52]	; (801b7dc <udp_netif_ip_addr_changed+0x5c>)
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	60fb      	str	r3, [r7, #12]
 801b7ac:	e00c      	b.n	801b7c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	681a      	ldr	r2, [r3, #0]
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d103      	bne.n	801b7c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	681a      	ldr	r2, [r3, #0]
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	68db      	ldr	r3, [r3, #12]
 801b7c6:	60fb      	str	r3, [r7, #12]
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d1ef      	bne.n	801b7ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b7ce:	bf00      	nop
 801b7d0:	3714      	adds	r7, #20
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d8:	4770      	bx	lr
 801b7da:	bf00      	nop
 801b7dc:	2000e188 	.word	0x2000e188

0801b7e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b082      	sub	sp, #8
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b7e8:	4915      	ldr	r1, [pc, #84]	; (801b840 <etharp_free_entry+0x60>)
 801b7ea:	687a      	ldr	r2, [r7, #4]
 801b7ec:	4613      	mov	r3, r2
 801b7ee:	005b      	lsls	r3, r3, #1
 801b7f0:	4413      	add	r3, r2
 801b7f2:	00db      	lsls	r3, r3, #3
 801b7f4:	440b      	add	r3, r1
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d013      	beq.n	801b824 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b7fc:	4910      	ldr	r1, [pc, #64]	; (801b840 <etharp_free_entry+0x60>)
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	4613      	mov	r3, r2
 801b802:	005b      	lsls	r3, r3, #1
 801b804:	4413      	add	r3, r2
 801b806:	00db      	lsls	r3, r3, #3
 801b808:	440b      	add	r3, r1
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	4618      	mov	r0, r3
 801b80e:	f7f8 ff21 	bl	8014654 <pbuf_free>
    arp_table[i].q = NULL;
 801b812:	490b      	ldr	r1, [pc, #44]	; (801b840 <etharp_free_entry+0x60>)
 801b814:	687a      	ldr	r2, [r7, #4]
 801b816:	4613      	mov	r3, r2
 801b818:	005b      	lsls	r3, r3, #1
 801b81a:	4413      	add	r3, r2
 801b81c:	00db      	lsls	r3, r3, #3
 801b81e:	440b      	add	r3, r1
 801b820:	2200      	movs	r2, #0
 801b822:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b824:	4906      	ldr	r1, [pc, #24]	; (801b840 <etharp_free_entry+0x60>)
 801b826:	687a      	ldr	r2, [r7, #4]
 801b828:	4613      	mov	r3, r2
 801b82a:	005b      	lsls	r3, r3, #1
 801b82c:	4413      	add	r3, r2
 801b82e:	00db      	lsls	r3, r3, #3
 801b830:	440b      	add	r3, r1
 801b832:	3314      	adds	r3, #20
 801b834:	2200      	movs	r2, #0
 801b836:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b838:	bf00      	nop
 801b83a:	3708      	adds	r7, #8
 801b83c:	46bd      	mov	sp, r7
 801b83e:	bd80      	pop	{r7, pc}
 801b840:	20006e54 	.word	0x20006e54

0801b844 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b082      	sub	sp, #8
 801b848:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b84a:	2300      	movs	r3, #0
 801b84c:	607b      	str	r3, [r7, #4]
 801b84e:	e096      	b.n	801b97e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b850:	494f      	ldr	r1, [pc, #316]	; (801b990 <etharp_tmr+0x14c>)
 801b852:	687a      	ldr	r2, [r7, #4]
 801b854:	4613      	mov	r3, r2
 801b856:	005b      	lsls	r3, r3, #1
 801b858:	4413      	add	r3, r2
 801b85a:	00db      	lsls	r3, r3, #3
 801b85c:	440b      	add	r3, r1
 801b85e:	3314      	adds	r3, #20
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b864:	78fb      	ldrb	r3, [r7, #3]
 801b866:	2b00      	cmp	r3, #0
 801b868:	f000 8086 	beq.w	801b978 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b86c:	4948      	ldr	r1, [pc, #288]	; (801b990 <etharp_tmr+0x14c>)
 801b86e:	687a      	ldr	r2, [r7, #4]
 801b870:	4613      	mov	r3, r2
 801b872:	005b      	lsls	r3, r3, #1
 801b874:	4413      	add	r3, r2
 801b876:	00db      	lsls	r3, r3, #3
 801b878:	440b      	add	r3, r1
 801b87a:	3312      	adds	r3, #18
 801b87c:	881b      	ldrh	r3, [r3, #0]
 801b87e:	3301      	adds	r3, #1
 801b880:	b298      	uxth	r0, r3
 801b882:	4943      	ldr	r1, [pc, #268]	; (801b990 <etharp_tmr+0x14c>)
 801b884:	687a      	ldr	r2, [r7, #4]
 801b886:	4613      	mov	r3, r2
 801b888:	005b      	lsls	r3, r3, #1
 801b88a:	4413      	add	r3, r2
 801b88c:	00db      	lsls	r3, r3, #3
 801b88e:	440b      	add	r3, r1
 801b890:	3312      	adds	r3, #18
 801b892:	4602      	mov	r2, r0
 801b894:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b896:	493e      	ldr	r1, [pc, #248]	; (801b990 <etharp_tmr+0x14c>)
 801b898:	687a      	ldr	r2, [r7, #4]
 801b89a:	4613      	mov	r3, r2
 801b89c:	005b      	lsls	r3, r3, #1
 801b89e:	4413      	add	r3, r2
 801b8a0:	00db      	lsls	r3, r3, #3
 801b8a2:	440b      	add	r3, r1
 801b8a4:	3312      	adds	r3, #18
 801b8a6:	881b      	ldrh	r3, [r3, #0]
 801b8a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b8ac:	d215      	bcs.n	801b8da <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b8ae:	4938      	ldr	r1, [pc, #224]	; (801b990 <etharp_tmr+0x14c>)
 801b8b0:	687a      	ldr	r2, [r7, #4]
 801b8b2:	4613      	mov	r3, r2
 801b8b4:	005b      	lsls	r3, r3, #1
 801b8b6:	4413      	add	r3, r2
 801b8b8:	00db      	lsls	r3, r3, #3
 801b8ba:	440b      	add	r3, r1
 801b8bc:	3314      	adds	r3, #20
 801b8be:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b8c0:	2b01      	cmp	r3, #1
 801b8c2:	d10e      	bne.n	801b8e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b8c4:	4932      	ldr	r1, [pc, #200]	; (801b990 <etharp_tmr+0x14c>)
 801b8c6:	687a      	ldr	r2, [r7, #4]
 801b8c8:	4613      	mov	r3, r2
 801b8ca:	005b      	lsls	r3, r3, #1
 801b8cc:	4413      	add	r3, r2
 801b8ce:	00db      	lsls	r3, r3, #3
 801b8d0:	440b      	add	r3, r1
 801b8d2:	3312      	adds	r3, #18
 801b8d4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b8d6:	2b04      	cmp	r3, #4
 801b8d8:	d903      	bls.n	801b8e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b8da:	6878      	ldr	r0, [r7, #4]
 801b8dc:	f7ff ff80 	bl	801b7e0 <etharp_free_entry>
 801b8e0:	e04a      	b.n	801b978 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b8e2:	492b      	ldr	r1, [pc, #172]	; (801b990 <etharp_tmr+0x14c>)
 801b8e4:	687a      	ldr	r2, [r7, #4]
 801b8e6:	4613      	mov	r3, r2
 801b8e8:	005b      	lsls	r3, r3, #1
 801b8ea:	4413      	add	r3, r2
 801b8ec:	00db      	lsls	r3, r3, #3
 801b8ee:	440b      	add	r3, r1
 801b8f0:	3314      	adds	r3, #20
 801b8f2:	781b      	ldrb	r3, [r3, #0]
 801b8f4:	2b03      	cmp	r3, #3
 801b8f6:	d10a      	bne.n	801b90e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b8f8:	4925      	ldr	r1, [pc, #148]	; (801b990 <etharp_tmr+0x14c>)
 801b8fa:	687a      	ldr	r2, [r7, #4]
 801b8fc:	4613      	mov	r3, r2
 801b8fe:	005b      	lsls	r3, r3, #1
 801b900:	4413      	add	r3, r2
 801b902:	00db      	lsls	r3, r3, #3
 801b904:	440b      	add	r3, r1
 801b906:	3314      	adds	r3, #20
 801b908:	2204      	movs	r2, #4
 801b90a:	701a      	strb	r2, [r3, #0]
 801b90c:	e034      	b.n	801b978 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b90e:	4920      	ldr	r1, [pc, #128]	; (801b990 <etharp_tmr+0x14c>)
 801b910:	687a      	ldr	r2, [r7, #4]
 801b912:	4613      	mov	r3, r2
 801b914:	005b      	lsls	r3, r3, #1
 801b916:	4413      	add	r3, r2
 801b918:	00db      	lsls	r3, r3, #3
 801b91a:	440b      	add	r3, r1
 801b91c:	3314      	adds	r3, #20
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	2b04      	cmp	r3, #4
 801b922:	d10a      	bne.n	801b93a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b924:	491a      	ldr	r1, [pc, #104]	; (801b990 <etharp_tmr+0x14c>)
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	4613      	mov	r3, r2
 801b92a:	005b      	lsls	r3, r3, #1
 801b92c:	4413      	add	r3, r2
 801b92e:	00db      	lsls	r3, r3, #3
 801b930:	440b      	add	r3, r1
 801b932:	3314      	adds	r3, #20
 801b934:	2202      	movs	r2, #2
 801b936:	701a      	strb	r2, [r3, #0]
 801b938:	e01e      	b.n	801b978 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b93a:	4915      	ldr	r1, [pc, #84]	; (801b990 <etharp_tmr+0x14c>)
 801b93c:	687a      	ldr	r2, [r7, #4]
 801b93e:	4613      	mov	r3, r2
 801b940:	005b      	lsls	r3, r3, #1
 801b942:	4413      	add	r3, r2
 801b944:	00db      	lsls	r3, r3, #3
 801b946:	440b      	add	r3, r1
 801b948:	3314      	adds	r3, #20
 801b94a:	781b      	ldrb	r3, [r3, #0]
 801b94c:	2b01      	cmp	r3, #1
 801b94e:	d113      	bne.n	801b978 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b950:	490f      	ldr	r1, [pc, #60]	; (801b990 <etharp_tmr+0x14c>)
 801b952:	687a      	ldr	r2, [r7, #4]
 801b954:	4613      	mov	r3, r2
 801b956:	005b      	lsls	r3, r3, #1
 801b958:	4413      	add	r3, r2
 801b95a:	00db      	lsls	r3, r3, #3
 801b95c:	440b      	add	r3, r1
 801b95e:	3308      	adds	r3, #8
 801b960:	6818      	ldr	r0, [r3, #0]
 801b962:	687a      	ldr	r2, [r7, #4]
 801b964:	4613      	mov	r3, r2
 801b966:	005b      	lsls	r3, r3, #1
 801b968:	4413      	add	r3, r2
 801b96a:	00db      	lsls	r3, r3, #3
 801b96c:	4a08      	ldr	r2, [pc, #32]	; (801b990 <etharp_tmr+0x14c>)
 801b96e:	4413      	add	r3, r2
 801b970:	3304      	adds	r3, #4
 801b972:	4619      	mov	r1, r3
 801b974:	f000 fe6e 	bl	801c654 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	3301      	adds	r3, #1
 801b97c:	607b      	str	r3, [r7, #4]
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	2b09      	cmp	r3, #9
 801b982:	f77f af65 	ble.w	801b850 <etharp_tmr+0xc>
      }
    }
  }
}
 801b986:	bf00      	nop
 801b988:	bf00      	nop
 801b98a:	3708      	adds	r7, #8
 801b98c:	46bd      	mov	sp, r7
 801b98e:	bd80      	pop	{r7, pc}
 801b990:	20006e54 	.word	0x20006e54

0801b994 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b08a      	sub	sp, #40	; 0x28
 801b998:	af00      	add	r7, sp, #0
 801b99a:	60f8      	str	r0, [r7, #12]
 801b99c:	460b      	mov	r3, r1
 801b99e:	607a      	str	r2, [r7, #4]
 801b9a0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b9a2:	230a      	movs	r3, #10
 801b9a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b9a6:	230a      	movs	r3, #10
 801b9a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b9aa:	230a      	movs	r3, #10
 801b9ac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b9b2:	230a      	movs	r3, #10
 801b9b4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	83bb      	strh	r3, [r7, #28]
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	837b      	strh	r3, [r7, #26]
 801b9be:	2300      	movs	r3, #0
 801b9c0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	843b      	strh	r3, [r7, #32]
 801b9c6:	e0ae      	b.n	801bb26 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9cc:	49a6      	ldr	r1, [pc, #664]	; (801bc68 <etharp_find_entry+0x2d4>)
 801b9ce:	4613      	mov	r3, r2
 801b9d0:	005b      	lsls	r3, r3, #1
 801b9d2:	4413      	add	r3, r2
 801b9d4:	00db      	lsls	r3, r3, #3
 801b9d6:	440b      	add	r3, r1
 801b9d8:	3314      	adds	r3, #20
 801b9da:	781b      	ldrb	r3, [r3, #0]
 801b9dc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b9de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b9e2:	2b0a      	cmp	r3, #10
 801b9e4:	d105      	bne.n	801b9f2 <etharp_find_entry+0x5e>
 801b9e6:	7dfb      	ldrb	r3, [r7, #23]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d102      	bne.n	801b9f2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b9ec:	8c3b      	ldrh	r3, [r7, #32]
 801b9ee:	847b      	strh	r3, [r7, #34]	; 0x22
 801b9f0:	e095      	b.n	801bb1e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b9f2:	7dfb      	ldrb	r3, [r7, #23]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	f000 8092 	beq.w	801bb1e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b9fa:	7dfb      	ldrb	r3, [r7, #23]
 801b9fc:	2b01      	cmp	r3, #1
 801b9fe:	d009      	beq.n	801ba14 <etharp_find_entry+0x80>
 801ba00:	7dfb      	ldrb	r3, [r7, #23]
 801ba02:	2b01      	cmp	r3, #1
 801ba04:	d806      	bhi.n	801ba14 <etharp_find_entry+0x80>
 801ba06:	4b99      	ldr	r3, [pc, #612]	; (801bc6c <etharp_find_entry+0x2d8>)
 801ba08:	f240 1223 	movw	r2, #291	; 0x123
 801ba0c:	4998      	ldr	r1, [pc, #608]	; (801bc70 <etharp_find_entry+0x2dc>)
 801ba0e:	4899      	ldr	r0, [pc, #612]	; (801bc74 <etharp_find_entry+0x2e0>)
 801ba10:	f003 fc0c 	bl	801f22c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d020      	beq.n	801ba5c <etharp_find_entry+0xc8>
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	6819      	ldr	r1, [r3, #0]
 801ba1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba22:	4891      	ldr	r0, [pc, #580]	; (801bc68 <etharp_find_entry+0x2d4>)
 801ba24:	4613      	mov	r3, r2
 801ba26:	005b      	lsls	r3, r3, #1
 801ba28:	4413      	add	r3, r2
 801ba2a:	00db      	lsls	r3, r3, #3
 801ba2c:	4403      	add	r3, r0
 801ba2e:	3304      	adds	r3, #4
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	4299      	cmp	r1, r3
 801ba34:	d112      	bne.n	801ba5c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d00c      	beq.n	801ba56 <etharp_find_entry+0xc2>
 801ba3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba40:	4989      	ldr	r1, [pc, #548]	; (801bc68 <etharp_find_entry+0x2d4>)
 801ba42:	4613      	mov	r3, r2
 801ba44:	005b      	lsls	r3, r3, #1
 801ba46:	4413      	add	r3, r2
 801ba48:	00db      	lsls	r3, r3, #3
 801ba4a:	440b      	add	r3, r1
 801ba4c:	3308      	adds	r3, #8
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	687a      	ldr	r2, [r7, #4]
 801ba52:	429a      	cmp	r2, r3
 801ba54:	d102      	bne.n	801ba5c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ba56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ba5a:	e100      	b.n	801bc5e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ba5c:	7dfb      	ldrb	r3, [r7, #23]
 801ba5e:	2b01      	cmp	r3, #1
 801ba60:	d140      	bne.n	801bae4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ba62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba66:	4980      	ldr	r1, [pc, #512]	; (801bc68 <etharp_find_entry+0x2d4>)
 801ba68:	4613      	mov	r3, r2
 801ba6a:	005b      	lsls	r3, r3, #1
 801ba6c:	4413      	add	r3, r2
 801ba6e:	00db      	lsls	r3, r3, #3
 801ba70:	440b      	add	r3, r1
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d01a      	beq.n	801baae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ba78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba7c:	497a      	ldr	r1, [pc, #488]	; (801bc68 <etharp_find_entry+0x2d4>)
 801ba7e:	4613      	mov	r3, r2
 801ba80:	005b      	lsls	r3, r3, #1
 801ba82:	4413      	add	r3, r2
 801ba84:	00db      	lsls	r3, r3, #3
 801ba86:	440b      	add	r3, r1
 801ba88:	3312      	adds	r3, #18
 801ba8a:	881b      	ldrh	r3, [r3, #0]
 801ba8c:	8bba      	ldrh	r2, [r7, #28]
 801ba8e:	429a      	cmp	r2, r3
 801ba90:	d845      	bhi.n	801bb1e <etharp_find_entry+0x18a>
            old_queue = i;
 801ba92:	8c3b      	ldrh	r3, [r7, #32]
 801ba94:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ba96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba9a:	4973      	ldr	r1, [pc, #460]	; (801bc68 <etharp_find_entry+0x2d4>)
 801ba9c:	4613      	mov	r3, r2
 801ba9e:	005b      	lsls	r3, r3, #1
 801baa0:	4413      	add	r3, r2
 801baa2:	00db      	lsls	r3, r3, #3
 801baa4:	440b      	add	r3, r1
 801baa6:	3312      	adds	r3, #18
 801baa8:	881b      	ldrh	r3, [r3, #0]
 801baaa:	83bb      	strh	r3, [r7, #28]
 801baac:	e037      	b.n	801bb1e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801baae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bab2:	496d      	ldr	r1, [pc, #436]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bab4:	4613      	mov	r3, r2
 801bab6:	005b      	lsls	r3, r3, #1
 801bab8:	4413      	add	r3, r2
 801baba:	00db      	lsls	r3, r3, #3
 801babc:	440b      	add	r3, r1
 801babe:	3312      	adds	r3, #18
 801bac0:	881b      	ldrh	r3, [r3, #0]
 801bac2:	8b7a      	ldrh	r2, [r7, #26]
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d82a      	bhi.n	801bb1e <etharp_find_entry+0x18a>
            old_pending = i;
 801bac8:	8c3b      	ldrh	r3, [r7, #32]
 801baca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801bacc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bad0:	4965      	ldr	r1, [pc, #404]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bad2:	4613      	mov	r3, r2
 801bad4:	005b      	lsls	r3, r3, #1
 801bad6:	4413      	add	r3, r2
 801bad8:	00db      	lsls	r3, r3, #3
 801bada:	440b      	add	r3, r1
 801badc:	3312      	adds	r3, #18
 801bade:	881b      	ldrh	r3, [r3, #0]
 801bae0:	837b      	strh	r3, [r7, #26]
 801bae2:	e01c      	b.n	801bb1e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801bae4:	7dfb      	ldrb	r3, [r7, #23]
 801bae6:	2b01      	cmp	r3, #1
 801bae8:	d919      	bls.n	801bb1e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801baea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801baee:	495e      	ldr	r1, [pc, #376]	; (801bc68 <etharp_find_entry+0x2d4>)
 801baf0:	4613      	mov	r3, r2
 801baf2:	005b      	lsls	r3, r3, #1
 801baf4:	4413      	add	r3, r2
 801baf6:	00db      	lsls	r3, r3, #3
 801baf8:	440b      	add	r3, r1
 801bafa:	3312      	adds	r3, #18
 801bafc:	881b      	ldrh	r3, [r3, #0]
 801bafe:	8b3a      	ldrh	r2, [r7, #24]
 801bb00:	429a      	cmp	r2, r3
 801bb02:	d80c      	bhi.n	801bb1e <etharp_find_entry+0x18a>
            old_stable = i;
 801bb04:	8c3b      	ldrh	r3, [r7, #32]
 801bb06:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801bb08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb0c:	4956      	ldr	r1, [pc, #344]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bb0e:	4613      	mov	r3, r2
 801bb10:	005b      	lsls	r3, r3, #1
 801bb12:	4413      	add	r3, r2
 801bb14:	00db      	lsls	r3, r3, #3
 801bb16:	440b      	add	r3, r1
 801bb18:	3312      	adds	r3, #18
 801bb1a:	881b      	ldrh	r3, [r3, #0]
 801bb1c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bb1e:	8c3b      	ldrh	r3, [r7, #32]
 801bb20:	3301      	adds	r3, #1
 801bb22:	b29b      	uxth	r3, r3
 801bb24:	843b      	strh	r3, [r7, #32]
 801bb26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb2a:	2b09      	cmp	r3, #9
 801bb2c:	f77f af4c 	ble.w	801b9c8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bb30:	7afb      	ldrb	r3, [r7, #11]
 801bb32:	f003 0302 	and.w	r3, r3, #2
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d108      	bne.n	801bb4c <etharp_find_entry+0x1b8>
 801bb3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bb3e:	2b0a      	cmp	r3, #10
 801bb40:	d107      	bne.n	801bb52 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bb42:	7afb      	ldrb	r3, [r7, #11]
 801bb44:	f003 0301 	and.w	r3, r3, #1
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d102      	bne.n	801bb52 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bb4c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb50:	e085      	b.n	801bc5e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bb52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bb56:	2b09      	cmp	r3, #9
 801bb58:	dc02      	bgt.n	801bb60 <etharp_find_entry+0x1cc>
    i = empty;
 801bb5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bb5c:	843b      	strh	r3, [r7, #32]
 801bb5e:	e039      	b.n	801bbd4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bb60:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bb64:	2b09      	cmp	r3, #9
 801bb66:	dc14      	bgt.n	801bb92 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bb68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb6a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bb6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb70:	493d      	ldr	r1, [pc, #244]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bb72:	4613      	mov	r3, r2
 801bb74:	005b      	lsls	r3, r3, #1
 801bb76:	4413      	add	r3, r2
 801bb78:	00db      	lsls	r3, r3, #3
 801bb7a:	440b      	add	r3, r1
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d018      	beq.n	801bbb4 <etharp_find_entry+0x220>
 801bb82:	4b3a      	ldr	r3, [pc, #232]	; (801bc6c <etharp_find_entry+0x2d8>)
 801bb84:	f240 126d 	movw	r2, #365	; 0x16d
 801bb88:	493b      	ldr	r1, [pc, #236]	; (801bc78 <etharp_find_entry+0x2e4>)
 801bb8a:	483a      	ldr	r0, [pc, #232]	; (801bc74 <etharp_find_entry+0x2e0>)
 801bb8c:	f003 fb4e 	bl	801f22c <iprintf>
 801bb90:	e010      	b.n	801bbb4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bb92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bb96:	2b09      	cmp	r3, #9
 801bb98:	dc02      	bgt.n	801bba0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bb9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bb9c:	843b      	strh	r3, [r7, #32]
 801bb9e:	e009      	b.n	801bbb4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bba0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bba4:	2b09      	cmp	r3, #9
 801bba6:	dc02      	bgt.n	801bbae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bba8:	8bfb      	ldrh	r3, [r7, #30]
 801bbaa:	843b      	strh	r3, [r7, #32]
 801bbac:	e002      	b.n	801bbb4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bbae:	f04f 33ff 	mov.w	r3, #4294967295
 801bbb2:	e054      	b.n	801bc5e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bbb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bbb8:	2b09      	cmp	r3, #9
 801bbba:	dd06      	ble.n	801bbca <etharp_find_entry+0x236>
 801bbbc:	4b2b      	ldr	r3, [pc, #172]	; (801bc6c <etharp_find_entry+0x2d8>)
 801bbbe:	f240 127f 	movw	r2, #383	; 0x17f
 801bbc2:	492e      	ldr	r1, [pc, #184]	; (801bc7c <etharp_find_entry+0x2e8>)
 801bbc4:	482b      	ldr	r0, [pc, #172]	; (801bc74 <etharp_find_entry+0x2e0>)
 801bbc6:	f003 fb31 	bl	801f22c <iprintf>
    etharp_free_entry(i);
 801bbca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bbce:	4618      	mov	r0, r3
 801bbd0:	f7ff fe06 	bl	801b7e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bbd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bbd8:	2b09      	cmp	r3, #9
 801bbda:	dd06      	ble.n	801bbea <etharp_find_entry+0x256>
 801bbdc:	4b23      	ldr	r3, [pc, #140]	; (801bc6c <etharp_find_entry+0x2d8>)
 801bbde:	f240 1283 	movw	r2, #387	; 0x183
 801bbe2:	4926      	ldr	r1, [pc, #152]	; (801bc7c <etharp_find_entry+0x2e8>)
 801bbe4:	4823      	ldr	r0, [pc, #140]	; (801bc74 <etharp_find_entry+0x2e0>)
 801bbe6:	f003 fb21 	bl	801f22c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bbea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbee:	491e      	ldr	r1, [pc, #120]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bbf0:	4613      	mov	r3, r2
 801bbf2:	005b      	lsls	r3, r3, #1
 801bbf4:	4413      	add	r3, r2
 801bbf6:	00db      	lsls	r3, r3, #3
 801bbf8:	440b      	add	r3, r1
 801bbfa:	3314      	adds	r3, #20
 801bbfc:	781b      	ldrb	r3, [r3, #0]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d006      	beq.n	801bc10 <etharp_find_entry+0x27c>
 801bc02:	4b1a      	ldr	r3, [pc, #104]	; (801bc6c <etharp_find_entry+0x2d8>)
 801bc04:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801bc08:	491d      	ldr	r1, [pc, #116]	; (801bc80 <etharp_find_entry+0x2ec>)
 801bc0a:	481a      	ldr	r0, [pc, #104]	; (801bc74 <etharp_find_entry+0x2e0>)
 801bc0c:	f003 fb0e 	bl	801f22c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d00b      	beq.n	801bc2e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bc16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	6819      	ldr	r1, [r3, #0]
 801bc1e:	4812      	ldr	r0, [pc, #72]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bc20:	4613      	mov	r3, r2
 801bc22:	005b      	lsls	r3, r3, #1
 801bc24:	4413      	add	r3, r2
 801bc26:	00db      	lsls	r3, r3, #3
 801bc28:	4403      	add	r3, r0
 801bc2a:	3304      	adds	r3, #4
 801bc2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bc2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc32:	490d      	ldr	r1, [pc, #52]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bc34:	4613      	mov	r3, r2
 801bc36:	005b      	lsls	r3, r3, #1
 801bc38:	4413      	add	r3, r2
 801bc3a:	00db      	lsls	r3, r3, #3
 801bc3c:	440b      	add	r3, r1
 801bc3e:	3312      	adds	r3, #18
 801bc40:	2200      	movs	r2, #0
 801bc42:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bc44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc48:	4907      	ldr	r1, [pc, #28]	; (801bc68 <etharp_find_entry+0x2d4>)
 801bc4a:	4613      	mov	r3, r2
 801bc4c:	005b      	lsls	r3, r3, #1
 801bc4e:	4413      	add	r3, r2
 801bc50:	00db      	lsls	r3, r3, #3
 801bc52:	440b      	add	r3, r1
 801bc54:	3308      	adds	r3, #8
 801bc56:	687a      	ldr	r2, [r7, #4]
 801bc58:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bc5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bc5e:	4618      	mov	r0, r3
 801bc60:	3728      	adds	r7, #40	; 0x28
 801bc62:	46bd      	mov	sp, r7
 801bc64:	bd80      	pop	{r7, pc}
 801bc66:	bf00      	nop
 801bc68:	20006e54 	.word	0x20006e54
 801bc6c:	080265e4 	.word	0x080265e4
 801bc70:	0802661c 	.word	0x0802661c
 801bc74:	0802665c 	.word	0x0802665c
 801bc78:	08026684 	.word	0x08026684
 801bc7c:	0802669c 	.word	0x0802669c
 801bc80:	080266b0 	.word	0x080266b0

0801bc84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b088      	sub	sp, #32
 801bc88:	af02      	add	r7, sp, #8
 801bc8a:	60f8      	str	r0, [r7, #12]
 801bc8c:	60b9      	str	r1, [r7, #8]
 801bc8e:	607a      	str	r2, [r7, #4]
 801bc90:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bc98:	2b06      	cmp	r3, #6
 801bc9a:	d006      	beq.n	801bcaa <etharp_update_arp_entry+0x26>
 801bc9c:	4b48      	ldr	r3, [pc, #288]	; (801bdc0 <etharp_update_arp_entry+0x13c>)
 801bc9e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801bca2:	4948      	ldr	r1, [pc, #288]	; (801bdc4 <etharp_update_arp_entry+0x140>)
 801bca4:	4848      	ldr	r0, [pc, #288]	; (801bdc8 <etharp_update_arp_entry+0x144>)
 801bca6:	f003 fac1 	bl	801f22c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bcaa:	68bb      	ldr	r3, [r7, #8]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d012      	beq.n	801bcd6 <etharp_update_arp_entry+0x52>
 801bcb0:	68bb      	ldr	r3, [r7, #8]
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d00e      	beq.n	801bcd6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bcb8:	68bb      	ldr	r3, [r7, #8]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	68f9      	ldr	r1, [r7, #12]
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f001 f8fe 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801bcc4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d105      	bne.n	801bcd6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bcca:	68bb      	ldr	r3, [r7, #8]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bcd2:	2be0      	cmp	r3, #224	; 0xe0
 801bcd4:	d102      	bne.n	801bcdc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bcd6:	f06f 030f 	mvn.w	r3, #15
 801bcda:	e06c      	b.n	801bdb6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bcdc:	78fb      	ldrb	r3, [r7, #3]
 801bcde:	68fa      	ldr	r2, [r7, #12]
 801bce0:	4619      	mov	r1, r3
 801bce2:	68b8      	ldr	r0, [r7, #8]
 801bce4:	f7ff fe56 	bl	801b994 <etharp_find_entry>
 801bce8:	4603      	mov	r3, r0
 801bcea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bcec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	da02      	bge.n	801bcfa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bcf4:	8afb      	ldrh	r3, [r7, #22]
 801bcf6:	b25b      	sxtb	r3, r3
 801bcf8:	e05d      	b.n	801bdb6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bcfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcfe:	4933      	ldr	r1, [pc, #204]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd00:	4613      	mov	r3, r2
 801bd02:	005b      	lsls	r3, r3, #1
 801bd04:	4413      	add	r3, r2
 801bd06:	00db      	lsls	r3, r3, #3
 801bd08:	440b      	add	r3, r1
 801bd0a:	3314      	adds	r3, #20
 801bd0c:	2202      	movs	r2, #2
 801bd0e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bd10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd14:	492d      	ldr	r1, [pc, #180]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd16:	4613      	mov	r3, r2
 801bd18:	005b      	lsls	r3, r3, #1
 801bd1a:	4413      	add	r3, r2
 801bd1c:	00db      	lsls	r3, r3, #3
 801bd1e:	440b      	add	r3, r1
 801bd20:	3308      	adds	r3, #8
 801bd22:	68fa      	ldr	r2, [r7, #12]
 801bd24:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bd26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd2a:	4613      	mov	r3, r2
 801bd2c:	005b      	lsls	r3, r3, #1
 801bd2e:	4413      	add	r3, r2
 801bd30:	00db      	lsls	r3, r3, #3
 801bd32:	3308      	adds	r3, #8
 801bd34:	4a25      	ldr	r2, [pc, #148]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd36:	4413      	add	r3, r2
 801bd38:	3304      	adds	r3, #4
 801bd3a:	2206      	movs	r2, #6
 801bd3c:	6879      	ldr	r1, [r7, #4]
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f002 fb20 	bl	801e384 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bd44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd48:	4920      	ldr	r1, [pc, #128]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd4a:	4613      	mov	r3, r2
 801bd4c:	005b      	lsls	r3, r3, #1
 801bd4e:	4413      	add	r3, r2
 801bd50:	00db      	lsls	r3, r3, #3
 801bd52:	440b      	add	r3, r1
 801bd54:	3312      	adds	r3, #18
 801bd56:	2200      	movs	r2, #0
 801bd58:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801bd5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd5e:	491b      	ldr	r1, [pc, #108]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd60:	4613      	mov	r3, r2
 801bd62:	005b      	lsls	r3, r3, #1
 801bd64:	4413      	add	r3, r2
 801bd66:	00db      	lsls	r3, r3, #3
 801bd68:	440b      	add	r3, r1
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d021      	beq.n	801bdb4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bd70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd74:	4915      	ldr	r1, [pc, #84]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd76:	4613      	mov	r3, r2
 801bd78:	005b      	lsls	r3, r3, #1
 801bd7a:	4413      	add	r3, r2
 801bd7c:	00db      	lsls	r3, r3, #3
 801bd7e:	440b      	add	r3, r1
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bd84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd88:	4910      	ldr	r1, [pc, #64]	; (801bdcc <etharp_update_arp_entry+0x148>)
 801bd8a:	4613      	mov	r3, r2
 801bd8c:	005b      	lsls	r3, r3, #1
 801bd8e:	4413      	add	r3, r2
 801bd90:	00db      	lsls	r3, r3, #3
 801bd92:	440b      	add	r3, r1
 801bd94:	2200      	movs	r2, #0
 801bd96:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801bd9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bda2:	9300      	str	r3, [sp, #0]
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	6939      	ldr	r1, [r7, #16]
 801bda8:	68f8      	ldr	r0, [r7, #12]
 801bdaa:	f001 ff91 	bl	801dcd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801bdae:	6938      	ldr	r0, [r7, #16]
 801bdb0:	f7f8 fc50 	bl	8014654 <pbuf_free>
  }
  return ERR_OK;
 801bdb4:	2300      	movs	r3, #0
}
 801bdb6:	4618      	mov	r0, r3
 801bdb8:	3718      	adds	r7, #24
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	bd80      	pop	{r7, pc}
 801bdbe:	bf00      	nop
 801bdc0:	080265e4 	.word	0x080265e4
 801bdc4:	080266dc 	.word	0x080266dc
 801bdc8:	0802665c 	.word	0x0802665c
 801bdcc:	20006e54 	.word	0x20006e54

0801bdd0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b084      	sub	sp, #16
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bdd8:	2300      	movs	r3, #0
 801bdda:	60fb      	str	r3, [r7, #12]
 801bddc:	e01e      	b.n	801be1c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801bdde:	4913      	ldr	r1, [pc, #76]	; (801be2c <etharp_cleanup_netif+0x5c>)
 801bde0:	68fa      	ldr	r2, [r7, #12]
 801bde2:	4613      	mov	r3, r2
 801bde4:	005b      	lsls	r3, r3, #1
 801bde6:	4413      	add	r3, r2
 801bde8:	00db      	lsls	r3, r3, #3
 801bdea:	440b      	add	r3, r1
 801bdec:	3314      	adds	r3, #20
 801bdee:	781b      	ldrb	r3, [r3, #0]
 801bdf0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bdf2:	7afb      	ldrb	r3, [r7, #11]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d00e      	beq.n	801be16 <etharp_cleanup_netif+0x46>
 801bdf8:	490c      	ldr	r1, [pc, #48]	; (801be2c <etharp_cleanup_netif+0x5c>)
 801bdfa:	68fa      	ldr	r2, [r7, #12]
 801bdfc:	4613      	mov	r3, r2
 801bdfe:	005b      	lsls	r3, r3, #1
 801be00:	4413      	add	r3, r2
 801be02:	00db      	lsls	r3, r3, #3
 801be04:	440b      	add	r3, r1
 801be06:	3308      	adds	r3, #8
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	687a      	ldr	r2, [r7, #4]
 801be0c:	429a      	cmp	r2, r3
 801be0e:	d102      	bne.n	801be16 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801be10:	68f8      	ldr	r0, [r7, #12]
 801be12:	f7ff fce5 	bl	801b7e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	3301      	adds	r3, #1
 801be1a:	60fb      	str	r3, [r7, #12]
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	2b09      	cmp	r3, #9
 801be20:	dddd      	ble.n	801bdde <etharp_cleanup_netif+0xe>
    }
  }
}
 801be22:	bf00      	nop
 801be24:	bf00      	nop
 801be26:	3710      	adds	r7, #16
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}
 801be2c:	20006e54 	.word	0x20006e54

0801be30 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801be30:	b5b0      	push	{r4, r5, r7, lr}
 801be32:	b08a      	sub	sp, #40	; 0x28
 801be34:	af04      	add	r7, sp, #16
 801be36:	6078      	str	r0, [r7, #4]
 801be38:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801be3a:	683b      	ldr	r3, [r7, #0]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d107      	bne.n	801be50 <etharp_input+0x20>
 801be40:	4b3d      	ldr	r3, [pc, #244]	; (801bf38 <etharp_input+0x108>)
 801be42:	f240 228a 	movw	r2, #650	; 0x28a
 801be46:	493d      	ldr	r1, [pc, #244]	; (801bf3c <etharp_input+0x10c>)
 801be48:	483d      	ldr	r0, [pc, #244]	; (801bf40 <etharp_input+0x110>)
 801be4a:	f003 f9ef 	bl	801f22c <iprintf>
 801be4e:	e06f      	b.n	801bf30 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	685b      	ldr	r3, [r3, #4]
 801be54:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801be56:	693b      	ldr	r3, [r7, #16]
 801be58:	881b      	ldrh	r3, [r3, #0]
 801be5a:	b29b      	uxth	r3, r3
 801be5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801be60:	d10c      	bne.n	801be7c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801be62:	693b      	ldr	r3, [r7, #16]
 801be64:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801be66:	2b06      	cmp	r3, #6
 801be68:	d108      	bne.n	801be7c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801be6a:	693b      	ldr	r3, [r7, #16]
 801be6c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801be6e:	2b04      	cmp	r3, #4
 801be70:	d104      	bne.n	801be7c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801be72:	693b      	ldr	r3, [r7, #16]
 801be74:	885b      	ldrh	r3, [r3, #2]
 801be76:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801be78:	2b08      	cmp	r3, #8
 801be7a:	d003      	beq.n	801be84 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801be7c:	6878      	ldr	r0, [r7, #4]
 801be7e:	f7f8 fbe9 	bl	8014654 <pbuf_free>
    return;
 801be82:	e055      	b.n	801bf30 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801be84:	693b      	ldr	r3, [r7, #16]
 801be86:	330e      	adds	r3, #14
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801be8c:	693b      	ldr	r3, [r7, #16]
 801be8e:	3318      	adds	r3, #24
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801be94:	683b      	ldr	r3, [r7, #0]
 801be96:	3304      	adds	r3, #4
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d102      	bne.n	801bea4 <etharp_input+0x74>
    for_us = 0;
 801be9e:	2300      	movs	r3, #0
 801bea0:	75fb      	strb	r3, [r7, #23]
 801bea2:	e009      	b.n	801beb8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801bea4:	68ba      	ldr	r2, [r7, #8]
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	3304      	adds	r3, #4
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	429a      	cmp	r2, r3
 801beae:	bf0c      	ite	eq
 801beb0:	2301      	moveq	r3, #1
 801beb2:	2300      	movne	r3, #0
 801beb4:	b2db      	uxtb	r3, r3
 801beb6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801beb8:	693b      	ldr	r3, [r7, #16]
 801beba:	f103 0208 	add.w	r2, r3, #8
 801bebe:	7dfb      	ldrb	r3, [r7, #23]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d001      	beq.n	801bec8 <etharp_input+0x98>
 801bec4:	2301      	movs	r3, #1
 801bec6:	e000      	b.n	801beca <etharp_input+0x9a>
 801bec8:	2302      	movs	r3, #2
 801beca:	f107 010c 	add.w	r1, r7, #12
 801bece:	6838      	ldr	r0, [r7, #0]
 801bed0:	f7ff fed8 	bl	801bc84 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801bed4:	693b      	ldr	r3, [r7, #16]
 801bed6:	88db      	ldrh	r3, [r3, #6]
 801bed8:	b29b      	uxth	r3, r3
 801beda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bede:	d003      	beq.n	801bee8 <etharp_input+0xb8>
 801bee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bee4:	d01e      	beq.n	801bf24 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801bee6:	e020      	b.n	801bf2a <etharp_input+0xfa>
      if (for_us) {
 801bee8:	7dfb      	ldrb	r3, [r7, #23]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d01c      	beq.n	801bf28 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801beee:	683b      	ldr	r3, [r7, #0]
 801bef0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801bef4:	693b      	ldr	r3, [r7, #16]
 801bef6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801befa:	683b      	ldr	r3, [r7, #0]
 801befc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801bf00:	683b      	ldr	r3, [r7, #0]
 801bf02:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801bf04:	693a      	ldr	r2, [r7, #16]
 801bf06:	3208      	adds	r2, #8
        etharp_raw(netif,
 801bf08:	2102      	movs	r1, #2
 801bf0a:	9103      	str	r1, [sp, #12]
 801bf0c:	f107 010c 	add.w	r1, r7, #12
 801bf10:	9102      	str	r1, [sp, #8]
 801bf12:	9201      	str	r2, [sp, #4]
 801bf14:	9300      	str	r3, [sp, #0]
 801bf16:	462b      	mov	r3, r5
 801bf18:	4622      	mov	r2, r4
 801bf1a:	4601      	mov	r1, r0
 801bf1c:	6838      	ldr	r0, [r7, #0]
 801bf1e:	f000 faeb 	bl	801c4f8 <etharp_raw>
      break;
 801bf22:	e001      	b.n	801bf28 <etharp_input+0xf8>
      break;
 801bf24:	bf00      	nop
 801bf26:	e000      	b.n	801bf2a <etharp_input+0xfa>
      break;
 801bf28:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bf2a:	6878      	ldr	r0, [r7, #4]
 801bf2c:	f7f8 fb92 	bl	8014654 <pbuf_free>
}
 801bf30:	3718      	adds	r7, #24
 801bf32:	46bd      	mov	sp, r7
 801bf34:	bdb0      	pop	{r4, r5, r7, pc}
 801bf36:	bf00      	nop
 801bf38:	080265e4 	.word	0x080265e4
 801bf3c:	08026734 	.word	0x08026734
 801bf40:	0802665c 	.word	0x0802665c

0801bf44 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b086      	sub	sp, #24
 801bf48:	af02      	add	r7, sp, #8
 801bf4a:	60f8      	str	r0, [r7, #12]
 801bf4c:	60b9      	str	r1, [r7, #8]
 801bf4e:	4613      	mov	r3, r2
 801bf50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bf52:	79fa      	ldrb	r2, [r7, #7]
 801bf54:	4944      	ldr	r1, [pc, #272]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bf56:	4613      	mov	r3, r2
 801bf58:	005b      	lsls	r3, r3, #1
 801bf5a:	4413      	add	r3, r2
 801bf5c:	00db      	lsls	r3, r3, #3
 801bf5e:	440b      	add	r3, r1
 801bf60:	3314      	adds	r3, #20
 801bf62:	781b      	ldrb	r3, [r3, #0]
 801bf64:	2b01      	cmp	r3, #1
 801bf66:	d806      	bhi.n	801bf76 <etharp_output_to_arp_index+0x32>
 801bf68:	4b40      	ldr	r3, [pc, #256]	; (801c06c <etharp_output_to_arp_index+0x128>)
 801bf6a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bf6e:	4940      	ldr	r1, [pc, #256]	; (801c070 <etharp_output_to_arp_index+0x12c>)
 801bf70:	4840      	ldr	r0, [pc, #256]	; (801c074 <etharp_output_to_arp_index+0x130>)
 801bf72:	f003 f95b 	bl	801f22c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bf76:	79fa      	ldrb	r2, [r7, #7]
 801bf78:	493b      	ldr	r1, [pc, #236]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bf7a:	4613      	mov	r3, r2
 801bf7c:	005b      	lsls	r3, r3, #1
 801bf7e:	4413      	add	r3, r2
 801bf80:	00db      	lsls	r3, r3, #3
 801bf82:	440b      	add	r3, r1
 801bf84:	3314      	adds	r3, #20
 801bf86:	781b      	ldrb	r3, [r3, #0]
 801bf88:	2b02      	cmp	r3, #2
 801bf8a:	d153      	bne.n	801c034 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bf8c:	79fa      	ldrb	r2, [r7, #7]
 801bf8e:	4936      	ldr	r1, [pc, #216]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bf90:	4613      	mov	r3, r2
 801bf92:	005b      	lsls	r3, r3, #1
 801bf94:	4413      	add	r3, r2
 801bf96:	00db      	lsls	r3, r3, #3
 801bf98:	440b      	add	r3, r1
 801bf9a:	3312      	adds	r3, #18
 801bf9c:	881b      	ldrh	r3, [r3, #0]
 801bf9e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801bfa2:	d919      	bls.n	801bfd8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bfa4:	79fa      	ldrb	r2, [r7, #7]
 801bfa6:	4613      	mov	r3, r2
 801bfa8:	005b      	lsls	r3, r3, #1
 801bfaa:	4413      	add	r3, r2
 801bfac:	00db      	lsls	r3, r3, #3
 801bfae:	4a2e      	ldr	r2, [pc, #184]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bfb0:	4413      	add	r3, r2
 801bfb2:	3304      	adds	r3, #4
 801bfb4:	4619      	mov	r1, r3
 801bfb6:	68f8      	ldr	r0, [r7, #12]
 801bfb8:	f000 fb4c 	bl	801c654 <etharp_request>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d138      	bne.n	801c034 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bfc2:	79fa      	ldrb	r2, [r7, #7]
 801bfc4:	4928      	ldr	r1, [pc, #160]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bfc6:	4613      	mov	r3, r2
 801bfc8:	005b      	lsls	r3, r3, #1
 801bfca:	4413      	add	r3, r2
 801bfcc:	00db      	lsls	r3, r3, #3
 801bfce:	440b      	add	r3, r1
 801bfd0:	3314      	adds	r3, #20
 801bfd2:	2203      	movs	r2, #3
 801bfd4:	701a      	strb	r2, [r3, #0]
 801bfd6:	e02d      	b.n	801c034 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bfd8:	79fa      	ldrb	r2, [r7, #7]
 801bfda:	4923      	ldr	r1, [pc, #140]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bfdc:	4613      	mov	r3, r2
 801bfde:	005b      	lsls	r3, r3, #1
 801bfe0:	4413      	add	r3, r2
 801bfe2:	00db      	lsls	r3, r3, #3
 801bfe4:	440b      	add	r3, r1
 801bfe6:	3312      	adds	r3, #18
 801bfe8:	881b      	ldrh	r3, [r3, #0]
 801bfea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801bfee:	d321      	bcc.n	801c034 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bff0:	79fa      	ldrb	r2, [r7, #7]
 801bff2:	4613      	mov	r3, r2
 801bff4:	005b      	lsls	r3, r3, #1
 801bff6:	4413      	add	r3, r2
 801bff8:	00db      	lsls	r3, r3, #3
 801bffa:	4a1b      	ldr	r2, [pc, #108]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801bffc:	4413      	add	r3, r2
 801bffe:	1d19      	adds	r1, r3, #4
 801c000:	79fa      	ldrb	r2, [r7, #7]
 801c002:	4613      	mov	r3, r2
 801c004:	005b      	lsls	r3, r3, #1
 801c006:	4413      	add	r3, r2
 801c008:	00db      	lsls	r3, r3, #3
 801c00a:	3308      	adds	r3, #8
 801c00c:	4a16      	ldr	r2, [pc, #88]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801c00e:	4413      	add	r3, r2
 801c010:	3304      	adds	r3, #4
 801c012:	461a      	mov	r2, r3
 801c014:	68f8      	ldr	r0, [r7, #12]
 801c016:	f000 fafb 	bl	801c610 <etharp_request_dst>
 801c01a:	4603      	mov	r3, r0
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d109      	bne.n	801c034 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c020:	79fa      	ldrb	r2, [r7, #7]
 801c022:	4911      	ldr	r1, [pc, #68]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801c024:	4613      	mov	r3, r2
 801c026:	005b      	lsls	r3, r3, #1
 801c028:	4413      	add	r3, r2
 801c02a:	00db      	lsls	r3, r3, #3
 801c02c:	440b      	add	r3, r1
 801c02e:	3314      	adds	r3, #20
 801c030:	2203      	movs	r2, #3
 801c032:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801c03a:	79fa      	ldrb	r2, [r7, #7]
 801c03c:	4613      	mov	r3, r2
 801c03e:	005b      	lsls	r3, r3, #1
 801c040:	4413      	add	r3, r2
 801c042:	00db      	lsls	r3, r3, #3
 801c044:	3308      	adds	r3, #8
 801c046:	4a08      	ldr	r2, [pc, #32]	; (801c068 <etharp_output_to_arp_index+0x124>)
 801c048:	4413      	add	r3, r2
 801c04a:	3304      	adds	r3, #4
 801c04c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c050:	9200      	str	r2, [sp, #0]
 801c052:	460a      	mov	r2, r1
 801c054:	68b9      	ldr	r1, [r7, #8]
 801c056:	68f8      	ldr	r0, [r7, #12]
 801c058:	f001 fe3a 	bl	801dcd0 <ethernet_output>
 801c05c:	4603      	mov	r3, r0
}
 801c05e:	4618      	mov	r0, r3
 801c060:	3710      	adds	r7, #16
 801c062:	46bd      	mov	sp, r7
 801c064:	bd80      	pop	{r7, pc}
 801c066:	bf00      	nop
 801c068:	20006e54 	.word	0x20006e54
 801c06c:	080265e4 	.word	0x080265e4
 801c070:	08026754 	.word	0x08026754
 801c074:	0802665c 	.word	0x0802665c

0801c078 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b08a      	sub	sp, #40	; 0x28
 801c07c:	af02      	add	r7, sp, #8
 801c07e:	60f8      	str	r0, [r7, #12]
 801c080:	60b9      	str	r1, [r7, #8]
 801c082:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d106      	bne.n	801c09c <etharp_output+0x24>
 801c08e:	4b73      	ldr	r3, [pc, #460]	; (801c25c <etharp_output+0x1e4>)
 801c090:	f240 321e 	movw	r2, #798	; 0x31e
 801c094:	4972      	ldr	r1, [pc, #456]	; (801c260 <etharp_output+0x1e8>)
 801c096:	4873      	ldr	r0, [pc, #460]	; (801c264 <etharp_output+0x1ec>)
 801c098:	f003 f8c8 	bl	801f22c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c09c:	68bb      	ldr	r3, [r7, #8]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d106      	bne.n	801c0b0 <etharp_output+0x38>
 801c0a2:	4b6e      	ldr	r3, [pc, #440]	; (801c25c <etharp_output+0x1e4>)
 801c0a4:	f240 321f 	movw	r2, #799	; 0x31f
 801c0a8:	496f      	ldr	r1, [pc, #444]	; (801c268 <etharp_output+0x1f0>)
 801c0aa:	486e      	ldr	r0, [pc, #440]	; (801c264 <etharp_output+0x1ec>)
 801c0ac:	f003 f8be 	bl	801f22c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d106      	bne.n	801c0c4 <etharp_output+0x4c>
 801c0b6:	4b69      	ldr	r3, [pc, #420]	; (801c25c <etharp_output+0x1e4>)
 801c0b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c0bc:	496b      	ldr	r1, [pc, #428]	; (801c26c <etharp_output+0x1f4>)
 801c0be:	4869      	ldr	r0, [pc, #420]	; (801c264 <etharp_output+0x1ec>)
 801c0c0:	f003 f8b4 	bl	801f22c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	68f9      	ldr	r1, [r7, #12]
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	f000 fef8 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d002      	beq.n	801c0dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c0d6:	4b66      	ldr	r3, [pc, #408]	; (801c270 <etharp_output+0x1f8>)
 801c0d8:	61fb      	str	r3, [r7, #28]
 801c0da:	e0af      	b.n	801c23c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c0e4:	2be0      	cmp	r3, #224	; 0xe0
 801c0e6:	d118      	bne.n	801c11a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c0e8:	2301      	movs	r3, #1
 801c0ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c0f0:	235e      	movs	r3, #94	; 0x5e
 801c0f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	3301      	adds	r3, #1
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c0fe:	b2db      	uxtb	r3, r3
 801c100:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	3302      	adds	r3, #2
 801c106:	781b      	ldrb	r3, [r3, #0]
 801c108:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	3303      	adds	r3, #3
 801c10e:	781b      	ldrb	r3, [r3, #0]
 801c110:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c112:	f107 0310 	add.w	r3, r7, #16
 801c116:	61fb      	str	r3, [r7, #28]
 801c118:	e090      	b.n	801c23c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	3304      	adds	r3, #4
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	405a      	eors	r2, r3
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	3308      	adds	r3, #8
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	4013      	ands	r3, r2
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d012      	beq.n	801c158 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c138:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c13c:	4293      	cmp	r3, r2
 801c13e:	d00b      	beq.n	801c158 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	330c      	adds	r3, #12
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d003      	beq.n	801c152 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	330c      	adds	r3, #12
 801c14e:	61bb      	str	r3, [r7, #24]
 801c150:	e002      	b.n	801c158 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c152:	f06f 0303 	mvn.w	r3, #3
 801c156:	e07d      	b.n	801c254 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c158:	4b46      	ldr	r3, [pc, #280]	; (801c274 <etharp_output+0x1fc>)
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	4619      	mov	r1, r3
 801c15e:	4a46      	ldr	r2, [pc, #280]	; (801c278 <etharp_output+0x200>)
 801c160:	460b      	mov	r3, r1
 801c162:	005b      	lsls	r3, r3, #1
 801c164:	440b      	add	r3, r1
 801c166:	00db      	lsls	r3, r3, #3
 801c168:	4413      	add	r3, r2
 801c16a:	3314      	adds	r3, #20
 801c16c:	781b      	ldrb	r3, [r3, #0]
 801c16e:	2b01      	cmp	r3, #1
 801c170:	d925      	bls.n	801c1be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c172:	4b40      	ldr	r3, [pc, #256]	; (801c274 <etharp_output+0x1fc>)
 801c174:	781b      	ldrb	r3, [r3, #0]
 801c176:	4619      	mov	r1, r3
 801c178:	4a3f      	ldr	r2, [pc, #252]	; (801c278 <etharp_output+0x200>)
 801c17a:	460b      	mov	r3, r1
 801c17c:	005b      	lsls	r3, r3, #1
 801c17e:	440b      	add	r3, r1
 801c180:	00db      	lsls	r3, r3, #3
 801c182:	4413      	add	r3, r2
 801c184:	3308      	adds	r3, #8
 801c186:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c188:	68fa      	ldr	r2, [r7, #12]
 801c18a:	429a      	cmp	r2, r3
 801c18c:	d117      	bne.n	801c1be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c18e:	69bb      	ldr	r3, [r7, #24]
 801c190:	681a      	ldr	r2, [r3, #0]
 801c192:	4b38      	ldr	r3, [pc, #224]	; (801c274 <etharp_output+0x1fc>)
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	4618      	mov	r0, r3
 801c198:	4937      	ldr	r1, [pc, #220]	; (801c278 <etharp_output+0x200>)
 801c19a:	4603      	mov	r3, r0
 801c19c:	005b      	lsls	r3, r3, #1
 801c19e:	4403      	add	r3, r0
 801c1a0:	00db      	lsls	r3, r3, #3
 801c1a2:	440b      	add	r3, r1
 801c1a4:	3304      	adds	r3, #4
 801c1a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c1a8:	429a      	cmp	r2, r3
 801c1aa:	d108      	bne.n	801c1be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c1ac:	4b31      	ldr	r3, [pc, #196]	; (801c274 <etharp_output+0x1fc>)
 801c1ae:	781b      	ldrb	r3, [r3, #0]
 801c1b0:	461a      	mov	r2, r3
 801c1b2:	68b9      	ldr	r1, [r7, #8]
 801c1b4:	68f8      	ldr	r0, [r7, #12]
 801c1b6:	f7ff fec5 	bl	801bf44 <etharp_output_to_arp_index>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	e04a      	b.n	801c254 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c1be:	2300      	movs	r3, #0
 801c1c0:	75fb      	strb	r3, [r7, #23]
 801c1c2:	e031      	b.n	801c228 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c1c4:	7dfa      	ldrb	r2, [r7, #23]
 801c1c6:	492c      	ldr	r1, [pc, #176]	; (801c278 <etharp_output+0x200>)
 801c1c8:	4613      	mov	r3, r2
 801c1ca:	005b      	lsls	r3, r3, #1
 801c1cc:	4413      	add	r3, r2
 801c1ce:	00db      	lsls	r3, r3, #3
 801c1d0:	440b      	add	r3, r1
 801c1d2:	3314      	adds	r3, #20
 801c1d4:	781b      	ldrb	r3, [r3, #0]
 801c1d6:	2b01      	cmp	r3, #1
 801c1d8:	d923      	bls.n	801c222 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c1da:	7dfa      	ldrb	r2, [r7, #23]
 801c1dc:	4926      	ldr	r1, [pc, #152]	; (801c278 <etharp_output+0x200>)
 801c1de:	4613      	mov	r3, r2
 801c1e0:	005b      	lsls	r3, r3, #1
 801c1e2:	4413      	add	r3, r2
 801c1e4:	00db      	lsls	r3, r3, #3
 801c1e6:	440b      	add	r3, r1
 801c1e8:	3308      	adds	r3, #8
 801c1ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c1ec:	68fa      	ldr	r2, [r7, #12]
 801c1ee:	429a      	cmp	r2, r3
 801c1f0:	d117      	bne.n	801c222 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c1f2:	69bb      	ldr	r3, [r7, #24]
 801c1f4:	6819      	ldr	r1, [r3, #0]
 801c1f6:	7dfa      	ldrb	r2, [r7, #23]
 801c1f8:	481f      	ldr	r0, [pc, #124]	; (801c278 <etharp_output+0x200>)
 801c1fa:	4613      	mov	r3, r2
 801c1fc:	005b      	lsls	r3, r3, #1
 801c1fe:	4413      	add	r3, r2
 801c200:	00db      	lsls	r3, r3, #3
 801c202:	4403      	add	r3, r0
 801c204:	3304      	adds	r3, #4
 801c206:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c208:	4299      	cmp	r1, r3
 801c20a:	d10a      	bne.n	801c222 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c20c:	4a19      	ldr	r2, [pc, #100]	; (801c274 <etharp_output+0x1fc>)
 801c20e:	7dfb      	ldrb	r3, [r7, #23]
 801c210:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c212:	7dfb      	ldrb	r3, [r7, #23]
 801c214:	461a      	mov	r2, r3
 801c216:	68b9      	ldr	r1, [r7, #8]
 801c218:	68f8      	ldr	r0, [r7, #12]
 801c21a:	f7ff fe93 	bl	801bf44 <etharp_output_to_arp_index>
 801c21e:	4603      	mov	r3, r0
 801c220:	e018      	b.n	801c254 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c222:	7dfb      	ldrb	r3, [r7, #23]
 801c224:	3301      	adds	r3, #1
 801c226:	75fb      	strb	r3, [r7, #23]
 801c228:	7dfb      	ldrb	r3, [r7, #23]
 801c22a:	2b09      	cmp	r3, #9
 801c22c:	d9ca      	bls.n	801c1c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c22e:	68ba      	ldr	r2, [r7, #8]
 801c230:	69b9      	ldr	r1, [r7, #24]
 801c232:	68f8      	ldr	r0, [r7, #12]
 801c234:	f000 f822 	bl	801c27c <etharp_query>
 801c238:	4603      	mov	r3, r0
 801c23a:	e00b      	b.n	801c254 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801c242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c246:	9300      	str	r3, [sp, #0]
 801c248:	69fb      	ldr	r3, [r7, #28]
 801c24a:	68b9      	ldr	r1, [r7, #8]
 801c24c:	68f8      	ldr	r0, [r7, #12]
 801c24e:	f001 fd3f 	bl	801dcd0 <ethernet_output>
 801c252:	4603      	mov	r3, r0
}
 801c254:	4618      	mov	r0, r3
 801c256:	3720      	adds	r7, #32
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd80      	pop	{r7, pc}
 801c25c:	080265e4 	.word	0x080265e4
 801c260:	08026734 	.word	0x08026734
 801c264:	0802665c 	.word	0x0802665c
 801c268:	08026784 	.word	0x08026784
 801c26c:	08026724 	.word	0x08026724
 801c270:	08026fa4 	.word	0x08026fa4
 801c274:	20006f44 	.word	0x20006f44
 801c278:	20006e54 	.word	0x20006e54

0801c27c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	b08c      	sub	sp, #48	; 0x30
 801c280:	af02      	add	r7, sp, #8
 801c282:	60f8      	str	r0, [r7, #12]
 801c284:	60b9      	str	r1, [r7, #8]
 801c286:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	3326      	adds	r3, #38	; 0x26
 801c28c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c28e:	23ff      	movs	r3, #255	; 0xff
 801c290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c294:	2300      	movs	r3, #0
 801c296:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	68f9      	ldr	r1, [r7, #12]
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f000 fe0e 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d10c      	bne.n	801c2c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c2aa:	68bb      	ldr	r3, [r7, #8]
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c2b2:	2be0      	cmp	r3, #224	; 0xe0
 801c2b4:	d006      	beq.n	801c2c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c2b6:	68bb      	ldr	r3, [r7, #8]
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d003      	beq.n	801c2c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c2bc:	68bb      	ldr	r3, [r7, #8]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d102      	bne.n	801c2ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c2c4:	f06f 030f 	mvn.w	r3, #15
 801c2c8:	e101      	b.n	801c4ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c2ca:	68fa      	ldr	r2, [r7, #12]
 801c2cc:	2101      	movs	r1, #1
 801c2ce:	68b8      	ldr	r0, [r7, #8]
 801c2d0:	f7ff fb60 	bl	801b994 <etharp_find_entry>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c2d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	da02      	bge.n	801c2e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c2e0:	8a7b      	ldrh	r3, [r7, #18]
 801c2e2:	b25b      	sxtb	r3, r3
 801c2e4:	e0f3      	b.n	801c4ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c2e6:	8a7b      	ldrh	r3, [r7, #18]
 801c2e8:	2b7e      	cmp	r3, #126	; 0x7e
 801c2ea:	d906      	bls.n	801c2fa <etharp_query+0x7e>
 801c2ec:	4b7a      	ldr	r3, [pc, #488]	; (801c4d8 <etharp_query+0x25c>)
 801c2ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c2f2:	497a      	ldr	r1, [pc, #488]	; (801c4dc <etharp_query+0x260>)
 801c2f4:	487a      	ldr	r0, [pc, #488]	; (801c4e0 <etharp_query+0x264>)
 801c2f6:	f002 ff99 	bl	801f22c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c2fa:	8a7b      	ldrh	r3, [r7, #18]
 801c2fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c2fe:	7c7a      	ldrb	r2, [r7, #17]
 801c300:	4978      	ldr	r1, [pc, #480]	; (801c4e4 <etharp_query+0x268>)
 801c302:	4613      	mov	r3, r2
 801c304:	005b      	lsls	r3, r3, #1
 801c306:	4413      	add	r3, r2
 801c308:	00db      	lsls	r3, r3, #3
 801c30a:	440b      	add	r3, r1
 801c30c:	3314      	adds	r3, #20
 801c30e:	781b      	ldrb	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d115      	bne.n	801c340 <etharp_query+0xc4>
    is_new_entry = 1;
 801c314:	2301      	movs	r3, #1
 801c316:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c318:	7c7a      	ldrb	r2, [r7, #17]
 801c31a:	4972      	ldr	r1, [pc, #456]	; (801c4e4 <etharp_query+0x268>)
 801c31c:	4613      	mov	r3, r2
 801c31e:	005b      	lsls	r3, r3, #1
 801c320:	4413      	add	r3, r2
 801c322:	00db      	lsls	r3, r3, #3
 801c324:	440b      	add	r3, r1
 801c326:	3314      	adds	r3, #20
 801c328:	2201      	movs	r2, #1
 801c32a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c32c:	7c7a      	ldrb	r2, [r7, #17]
 801c32e:	496d      	ldr	r1, [pc, #436]	; (801c4e4 <etharp_query+0x268>)
 801c330:	4613      	mov	r3, r2
 801c332:	005b      	lsls	r3, r3, #1
 801c334:	4413      	add	r3, r2
 801c336:	00db      	lsls	r3, r3, #3
 801c338:	440b      	add	r3, r1
 801c33a:	3308      	adds	r3, #8
 801c33c:	68fa      	ldr	r2, [r7, #12]
 801c33e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c340:	7c7a      	ldrb	r2, [r7, #17]
 801c342:	4968      	ldr	r1, [pc, #416]	; (801c4e4 <etharp_query+0x268>)
 801c344:	4613      	mov	r3, r2
 801c346:	005b      	lsls	r3, r3, #1
 801c348:	4413      	add	r3, r2
 801c34a:	00db      	lsls	r3, r3, #3
 801c34c:	440b      	add	r3, r1
 801c34e:	3314      	adds	r3, #20
 801c350:	781b      	ldrb	r3, [r3, #0]
 801c352:	2b01      	cmp	r3, #1
 801c354:	d011      	beq.n	801c37a <etharp_query+0xfe>
 801c356:	7c7a      	ldrb	r2, [r7, #17]
 801c358:	4962      	ldr	r1, [pc, #392]	; (801c4e4 <etharp_query+0x268>)
 801c35a:	4613      	mov	r3, r2
 801c35c:	005b      	lsls	r3, r3, #1
 801c35e:	4413      	add	r3, r2
 801c360:	00db      	lsls	r3, r3, #3
 801c362:	440b      	add	r3, r1
 801c364:	3314      	adds	r3, #20
 801c366:	781b      	ldrb	r3, [r3, #0]
 801c368:	2b01      	cmp	r3, #1
 801c36a:	d806      	bhi.n	801c37a <etharp_query+0xfe>
 801c36c:	4b5a      	ldr	r3, [pc, #360]	; (801c4d8 <etharp_query+0x25c>)
 801c36e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c372:	495d      	ldr	r1, [pc, #372]	; (801c4e8 <etharp_query+0x26c>)
 801c374:	485a      	ldr	r0, [pc, #360]	; (801c4e0 <etharp_query+0x264>)
 801c376:	f002 ff59 	bl	801f22c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c37a:	6a3b      	ldr	r3, [r7, #32]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d102      	bne.n	801c386 <etharp_query+0x10a>
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d10c      	bne.n	801c3a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c386:	68b9      	ldr	r1, [r7, #8]
 801c388:	68f8      	ldr	r0, [r7, #12]
 801c38a:	f000 f963 	bl	801c654 <etharp_request>
 801c38e:	4603      	mov	r3, r0
 801c390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d102      	bne.n	801c3a0 <etharp_query+0x124>
      return result;
 801c39a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c39e:	e096      	b.n	801c4ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d106      	bne.n	801c3b4 <etharp_query+0x138>
 801c3a6:	4b4c      	ldr	r3, [pc, #304]	; (801c4d8 <etharp_query+0x25c>)
 801c3a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c3ac:	494f      	ldr	r1, [pc, #316]	; (801c4ec <etharp_query+0x270>)
 801c3ae:	484c      	ldr	r0, [pc, #304]	; (801c4e0 <etharp_query+0x264>)
 801c3b0:	f002 ff3c 	bl	801f22c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c3b4:	7c7a      	ldrb	r2, [r7, #17]
 801c3b6:	494b      	ldr	r1, [pc, #300]	; (801c4e4 <etharp_query+0x268>)
 801c3b8:	4613      	mov	r3, r2
 801c3ba:	005b      	lsls	r3, r3, #1
 801c3bc:	4413      	add	r3, r2
 801c3be:	00db      	lsls	r3, r3, #3
 801c3c0:	440b      	add	r3, r1
 801c3c2:	3314      	adds	r3, #20
 801c3c4:	781b      	ldrb	r3, [r3, #0]
 801c3c6:	2b01      	cmp	r3, #1
 801c3c8:	d917      	bls.n	801c3fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c3ca:	4a49      	ldr	r2, [pc, #292]	; (801c4f0 <etharp_query+0x274>)
 801c3cc:	7c7b      	ldrb	r3, [r7, #17]
 801c3ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c3d0:	7c7a      	ldrb	r2, [r7, #17]
 801c3d2:	4613      	mov	r3, r2
 801c3d4:	005b      	lsls	r3, r3, #1
 801c3d6:	4413      	add	r3, r2
 801c3d8:	00db      	lsls	r3, r3, #3
 801c3da:	3308      	adds	r3, #8
 801c3dc:	4a41      	ldr	r2, [pc, #260]	; (801c4e4 <etharp_query+0x268>)
 801c3de:	4413      	add	r3, r2
 801c3e0:	3304      	adds	r3, #4
 801c3e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c3e6:	9200      	str	r2, [sp, #0]
 801c3e8:	697a      	ldr	r2, [r7, #20]
 801c3ea:	6879      	ldr	r1, [r7, #4]
 801c3ec:	68f8      	ldr	r0, [r7, #12]
 801c3ee:	f001 fc6f 	bl	801dcd0 <ethernet_output>
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c3f8:	e067      	b.n	801c4ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c3fa:	7c7a      	ldrb	r2, [r7, #17]
 801c3fc:	4939      	ldr	r1, [pc, #228]	; (801c4e4 <etharp_query+0x268>)
 801c3fe:	4613      	mov	r3, r2
 801c400:	005b      	lsls	r3, r3, #1
 801c402:	4413      	add	r3, r2
 801c404:	00db      	lsls	r3, r3, #3
 801c406:	440b      	add	r3, r1
 801c408:	3314      	adds	r3, #20
 801c40a:	781b      	ldrb	r3, [r3, #0]
 801c40c:	2b01      	cmp	r3, #1
 801c40e:	d15c      	bne.n	801c4ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c410:	2300      	movs	r3, #0
 801c412:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c418:	e01c      	b.n	801c454 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c41a:	69fb      	ldr	r3, [r7, #28]
 801c41c:	895a      	ldrh	r2, [r3, #10]
 801c41e:	69fb      	ldr	r3, [r7, #28]
 801c420:	891b      	ldrh	r3, [r3, #8]
 801c422:	429a      	cmp	r2, r3
 801c424:	d10a      	bne.n	801c43c <etharp_query+0x1c0>
 801c426:	69fb      	ldr	r3, [r7, #28]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d006      	beq.n	801c43c <etharp_query+0x1c0>
 801c42e:	4b2a      	ldr	r3, [pc, #168]	; (801c4d8 <etharp_query+0x25c>)
 801c430:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c434:	492f      	ldr	r1, [pc, #188]	; (801c4f4 <etharp_query+0x278>)
 801c436:	482a      	ldr	r0, [pc, #168]	; (801c4e0 <etharp_query+0x264>)
 801c438:	f002 fef8 	bl	801f22c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c43c:	69fb      	ldr	r3, [r7, #28]
 801c43e:	7b1b      	ldrb	r3, [r3, #12]
 801c440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c444:	2b00      	cmp	r3, #0
 801c446:	d002      	beq.n	801c44e <etharp_query+0x1d2>
        copy_needed = 1;
 801c448:	2301      	movs	r3, #1
 801c44a:	61bb      	str	r3, [r7, #24]
        break;
 801c44c:	e005      	b.n	801c45a <etharp_query+0x1de>
      }
      p = p->next;
 801c44e:	69fb      	ldr	r3, [r7, #28]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c454:	69fb      	ldr	r3, [r7, #28]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d1df      	bne.n	801c41a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c45a:	69bb      	ldr	r3, [r7, #24]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d007      	beq.n	801c470 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c466:	200e      	movs	r0, #14
 801c468:	f7f8 fb6c 	bl	8014b44 <pbuf_clone>
 801c46c:	61f8      	str	r0, [r7, #28]
 801c46e:	e004      	b.n	801c47a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c474:	69f8      	ldr	r0, [r7, #28]
 801c476:	f7f8 f993 	bl	80147a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c47a:	69fb      	ldr	r3, [r7, #28]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d021      	beq.n	801c4c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c480:	7c7a      	ldrb	r2, [r7, #17]
 801c482:	4918      	ldr	r1, [pc, #96]	; (801c4e4 <etharp_query+0x268>)
 801c484:	4613      	mov	r3, r2
 801c486:	005b      	lsls	r3, r3, #1
 801c488:	4413      	add	r3, r2
 801c48a:	00db      	lsls	r3, r3, #3
 801c48c:	440b      	add	r3, r1
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d00a      	beq.n	801c4aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c494:	7c7a      	ldrb	r2, [r7, #17]
 801c496:	4913      	ldr	r1, [pc, #76]	; (801c4e4 <etharp_query+0x268>)
 801c498:	4613      	mov	r3, r2
 801c49a:	005b      	lsls	r3, r3, #1
 801c49c:	4413      	add	r3, r2
 801c49e:	00db      	lsls	r3, r3, #3
 801c4a0:	440b      	add	r3, r1
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7f8 f8d5 	bl	8014654 <pbuf_free>
      }
      arp_table[i].q = p;
 801c4aa:	7c7a      	ldrb	r2, [r7, #17]
 801c4ac:	490d      	ldr	r1, [pc, #52]	; (801c4e4 <etharp_query+0x268>)
 801c4ae:	4613      	mov	r3, r2
 801c4b0:	005b      	lsls	r3, r3, #1
 801c4b2:	4413      	add	r3, r2
 801c4b4:	00db      	lsls	r3, r3, #3
 801c4b6:	440b      	add	r3, r1
 801c4b8:	69fa      	ldr	r2, [r7, #28]
 801c4ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c4c2:	e002      	b.n	801c4ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c4c4:	23ff      	movs	r3, #255	; 0xff
 801c4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c4ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c4ce:	4618      	mov	r0, r3
 801c4d0:	3728      	adds	r7, #40	; 0x28
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}
 801c4d6:	bf00      	nop
 801c4d8:	080265e4 	.word	0x080265e4
 801c4dc:	08026790 	.word	0x08026790
 801c4e0:	0802665c 	.word	0x0802665c
 801c4e4:	20006e54 	.word	0x20006e54
 801c4e8:	080267a0 	.word	0x080267a0
 801c4ec:	08026784 	.word	0x08026784
 801c4f0:	20006f44 	.word	0x20006f44
 801c4f4:	080267c8 	.word	0x080267c8

0801c4f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b08a      	sub	sp, #40	; 0x28
 801c4fc:	af02      	add	r7, sp, #8
 801c4fe:	60f8      	str	r0, [r7, #12]
 801c500:	60b9      	str	r1, [r7, #8]
 801c502:	607a      	str	r2, [r7, #4]
 801c504:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c506:	2300      	movs	r3, #0
 801c508:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d106      	bne.n	801c51e <etharp_raw+0x26>
 801c510:	4b3a      	ldr	r3, [pc, #232]	; (801c5fc <etharp_raw+0x104>)
 801c512:	f240 4257 	movw	r2, #1111	; 0x457
 801c516:	493a      	ldr	r1, [pc, #232]	; (801c600 <etharp_raw+0x108>)
 801c518:	483a      	ldr	r0, [pc, #232]	; (801c604 <etharp_raw+0x10c>)
 801c51a:	f002 fe87 	bl	801f22c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c51e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c522:	211c      	movs	r1, #28
 801c524:	200e      	movs	r0, #14
 801c526:	f7f7 fdb1 	bl	801408c <pbuf_alloc>
 801c52a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c52c:	69bb      	ldr	r3, [r7, #24]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d102      	bne.n	801c538 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c532:	f04f 33ff 	mov.w	r3, #4294967295
 801c536:	e05d      	b.n	801c5f4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c538:	69bb      	ldr	r3, [r7, #24]
 801c53a:	895b      	ldrh	r3, [r3, #10]
 801c53c:	2b1b      	cmp	r3, #27
 801c53e:	d806      	bhi.n	801c54e <etharp_raw+0x56>
 801c540:	4b2e      	ldr	r3, [pc, #184]	; (801c5fc <etharp_raw+0x104>)
 801c542:	f240 4262 	movw	r2, #1122	; 0x462
 801c546:	4930      	ldr	r1, [pc, #192]	; (801c608 <etharp_raw+0x110>)
 801c548:	482e      	ldr	r0, [pc, #184]	; (801c604 <etharp_raw+0x10c>)
 801c54a:	f002 fe6f 	bl	801f22c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c54e:	69bb      	ldr	r3, [r7, #24]
 801c550:	685b      	ldr	r3, [r3, #4]
 801c552:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c554:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c556:	4618      	mov	r0, r3
 801c558:	f7f6 fd34 	bl	8012fc4 <lwip_htons>
 801c55c:	4603      	mov	r3, r0
 801c55e:	461a      	mov	r2, r3
 801c560:	697b      	ldr	r3, [r7, #20]
 801c562:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c56a:	2b06      	cmp	r3, #6
 801c56c:	d006      	beq.n	801c57c <etharp_raw+0x84>
 801c56e:	4b23      	ldr	r3, [pc, #140]	; (801c5fc <etharp_raw+0x104>)
 801c570:	f240 4269 	movw	r2, #1129	; 0x469
 801c574:	4925      	ldr	r1, [pc, #148]	; (801c60c <etharp_raw+0x114>)
 801c576:	4823      	ldr	r0, [pc, #140]	; (801c604 <etharp_raw+0x10c>)
 801c578:	f002 fe58 	bl	801f22c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c57c:	697b      	ldr	r3, [r7, #20]
 801c57e:	3308      	adds	r3, #8
 801c580:	2206      	movs	r2, #6
 801c582:	6839      	ldr	r1, [r7, #0]
 801c584:	4618      	mov	r0, r3
 801c586:	f001 fefd 	bl	801e384 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c58a:	697b      	ldr	r3, [r7, #20]
 801c58c:	3312      	adds	r3, #18
 801c58e:	2206      	movs	r2, #6
 801c590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c592:	4618      	mov	r0, r3
 801c594:	f001 fef6 	bl	801e384 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	330e      	adds	r3, #14
 801c59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c59e:	6812      	ldr	r2, [r2, #0]
 801c5a0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c5a2:	697b      	ldr	r3, [r7, #20]
 801c5a4:	3318      	adds	r3, #24
 801c5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c5a8:	6812      	ldr	r2, [r2, #0]
 801c5aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c5ac:	697b      	ldr	r3, [r7, #20]
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	701a      	strb	r2, [r3, #0]
 801c5b2:	2200      	movs	r2, #0
 801c5b4:	f042 0201 	orr.w	r2, r2, #1
 801c5b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	f042 0208 	orr.w	r2, r2, #8
 801c5c2:	709a      	strb	r2, [r3, #2]
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c5c8:	697b      	ldr	r3, [r7, #20]
 801c5ca:	2206      	movs	r2, #6
 801c5cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c5ce:	697b      	ldr	r3, [r7, #20]
 801c5d0:	2204      	movs	r2, #4
 801c5d2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c5d4:	f640 0306 	movw	r3, #2054	; 0x806
 801c5d8:	9300      	str	r3, [sp, #0]
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	68ba      	ldr	r2, [r7, #8]
 801c5de:	69b9      	ldr	r1, [r7, #24]
 801c5e0:	68f8      	ldr	r0, [r7, #12]
 801c5e2:	f001 fb75 	bl	801dcd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c5e6:	69b8      	ldr	r0, [r7, #24]
 801c5e8:	f7f8 f834 	bl	8014654 <pbuf_free>
  p = NULL;
 801c5ec:	2300      	movs	r3, #0
 801c5ee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c5f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	3720      	adds	r7, #32
 801c5f8:	46bd      	mov	sp, r7
 801c5fa:	bd80      	pop	{r7, pc}
 801c5fc:	080265e4 	.word	0x080265e4
 801c600:	08026734 	.word	0x08026734
 801c604:	0802665c 	.word	0x0802665c
 801c608:	080267e4 	.word	0x080267e4
 801c60c:	08026818 	.word	0x08026818

0801c610 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b088      	sub	sp, #32
 801c614:	af04      	add	r7, sp, #16
 801c616:	60f8      	str	r0, [r7, #12]
 801c618:	60b9      	str	r1, [r7, #8]
 801c61a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c62c:	2201      	movs	r2, #1
 801c62e:	9203      	str	r2, [sp, #12]
 801c630:	68ba      	ldr	r2, [r7, #8]
 801c632:	9202      	str	r2, [sp, #8]
 801c634:	4a06      	ldr	r2, [pc, #24]	; (801c650 <etharp_request_dst+0x40>)
 801c636:	9201      	str	r2, [sp, #4]
 801c638:	9300      	str	r3, [sp, #0]
 801c63a:	4603      	mov	r3, r0
 801c63c:	687a      	ldr	r2, [r7, #4]
 801c63e:	68f8      	ldr	r0, [r7, #12]
 801c640:	f7ff ff5a 	bl	801c4f8 <etharp_raw>
 801c644:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c646:	4618      	mov	r0, r3
 801c648:	3710      	adds	r7, #16
 801c64a:	46bd      	mov	sp, r7
 801c64c:	bd80      	pop	{r7, pc}
 801c64e:	bf00      	nop
 801c650:	08026fac 	.word	0x08026fac

0801c654 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b082      	sub	sp, #8
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
 801c65c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c65e:	4a05      	ldr	r2, [pc, #20]	; (801c674 <etharp_request+0x20>)
 801c660:	6839      	ldr	r1, [r7, #0]
 801c662:	6878      	ldr	r0, [r7, #4]
 801c664:	f7ff ffd4 	bl	801c610 <etharp_request_dst>
 801c668:	4603      	mov	r3, r0
}
 801c66a:	4618      	mov	r0, r3
 801c66c:	3708      	adds	r7, #8
 801c66e:	46bd      	mov	sp, r7
 801c670:	bd80      	pop	{r7, pc}
 801c672:	bf00      	nop
 801c674:	08026fa4 	.word	0x08026fa4

0801c678 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b08e      	sub	sp, #56	; 0x38
 801c67c:	af04      	add	r7, sp, #16
 801c67e:	6078      	str	r0, [r7, #4]
 801c680:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c682:	4b79      	ldr	r3, [pc, #484]	; (801c868 <icmp_input+0x1f0>)
 801c684:	689b      	ldr	r3, [r3, #8]
 801c686:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c68a:	781b      	ldrb	r3, [r3, #0]
 801c68c:	f003 030f 	and.w	r3, r3, #15
 801c690:	b2db      	uxtb	r3, r3
 801c692:	009b      	lsls	r3, r3, #2
 801c694:	b2db      	uxtb	r3, r3
 801c696:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c69a:	2b13      	cmp	r3, #19
 801c69c:	f240 80cd 	bls.w	801c83a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	895b      	ldrh	r3, [r3, #10]
 801c6a4:	2b03      	cmp	r3, #3
 801c6a6:	f240 80ca 	bls.w	801c83e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	685b      	ldr	r3, [r3, #4]
 801c6ae:	781b      	ldrb	r3, [r3, #0]
 801c6b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c6b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	f000 80b7 	beq.w	801c82c <icmp_input+0x1b4>
 801c6be:	2b08      	cmp	r3, #8
 801c6c0:	f040 80b7 	bne.w	801c832 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c6c4:	4b69      	ldr	r3, [pc, #420]	; (801c86c <icmp_input+0x1f4>)
 801c6c6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c6c8:	4b67      	ldr	r3, [pc, #412]	; (801c868 <icmp_input+0x1f0>)
 801c6ca:	695b      	ldr	r3, [r3, #20]
 801c6cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c6d0:	2be0      	cmp	r3, #224	; 0xe0
 801c6d2:	f000 80bb 	beq.w	801c84c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c6d6:	4b64      	ldr	r3, [pc, #400]	; (801c868 <icmp_input+0x1f0>)
 801c6d8:	695b      	ldr	r3, [r3, #20]
 801c6da:	4a63      	ldr	r2, [pc, #396]	; (801c868 <icmp_input+0x1f0>)
 801c6dc:	6812      	ldr	r2, [r2, #0]
 801c6de:	4611      	mov	r1, r2
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f000 fbed 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	f040 80b1 	bne.w	801c850 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	891b      	ldrh	r3, [r3, #8]
 801c6f2:	2b07      	cmp	r3, #7
 801c6f4:	f240 80a5 	bls.w	801c842 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c6f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c6fa:	330e      	adds	r3, #14
 801c6fc:	4619      	mov	r1, r3
 801c6fe:	6878      	ldr	r0, [r7, #4]
 801c700:	f7f7 ff12 	bl	8014528 <pbuf_add_header>
 801c704:	4603      	mov	r3, r0
 801c706:	2b00      	cmp	r3, #0
 801c708:	d04b      	beq.n	801c7a2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	891a      	ldrh	r2, [r3, #8]
 801c70e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c710:	4413      	add	r3, r2
 801c712:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	891b      	ldrh	r3, [r3, #8]
 801c718:	8b7a      	ldrh	r2, [r7, #26]
 801c71a:	429a      	cmp	r2, r3
 801c71c:	f0c0 809a 	bcc.w	801c854 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c720:	8b7b      	ldrh	r3, [r7, #26]
 801c722:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c726:	4619      	mov	r1, r3
 801c728:	200e      	movs	r0, #14
 801c72a:	f7f7 fcaf 	bl	801408c <pbuf_alloc>
 801c72e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c730:	697b      	ldr	r3, [r7, #20]
 801c732:	2b00      	cmp	r3, #0
 801c734:	f000 8090 	beq.w	801c858 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c738:	697b      	ldr	r3, [r7, #20]
 801c73a:	895b      	ldrh	r3, [r3, #10]
 801c73c:	461a      	mov	r2, r3
 801c73e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c740:	3308      	adds	r3, #8
 801c742:	429a      	cmp	r2, r3
 801c744:	d203      	bcs.n	801c74e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c746:	6978      	ldr	r0, [r7, #20]
 801c748:	f7f7 ff84 	bl	8014654 <pbuf_free>
          goto icmperr;
 801c74c:	e085      	b.n	801c85a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c74e:	697b      	ldr	r3, [r7, #20]
 801c750:	685b      	ldr	r3, [r3, #4]
 801c752:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c756:	4618      	mov	r0, r3
 801c758:	f001 fe14 	bl	801e384 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c75c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c75e:	4619      	mov	r1, r3
 801c760:	6978      	ldr	r0, [r7, #20]
 801c762:	f7f7 fef1 	bl	8014548 <pbuf_remove_header>
 801c766:	4603      	mov	r3, r0
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d009      	beq.n	801c780 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c76c:	4b40      	ldr	r3, [pc, #256]	; (801c870 <icmp_input+0x1f8>)
 801c76e:	22b6      	movs	r2, #182	; 0xb6
 801c770:	4940      	ldr	r1, [pc, #256]	; (801c874 <icmp_input+0x1fc>)
 801c772:	4841      	ldr	r0, [pc, #260]	; (801c878 <icmp_input+0x200>)
 801c774:	f002 fd5a 	bl	801f22c <iprintf>
          pbuf_free(r);
 801c778:	6978      	ldr	r0, [r7, #20]
 801c77a:	f7f7 ff6b 	bl	8014654 <pbuf_free>
          goto icmperr;
 801c77e:	e06c      	b.n	801c85a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c780:	6879      	ldr	r1, [r7, #4]
 801c782:	6978      	ldr	r0, [r7, #20]
 801c784:	f7f8 f89a 	bl	80148bc <pbuf_copy>
 801c788:	4603      	mov	r3, r0
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d003      	beq.n	801c796 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c78e:	6978      	ldr	r0, [r7, #20]
 801c790:	f7f7 ff60 	bl	8014654 <pbuf_free>
          goto icmperr;
 801c794:	e061      	b.n	801c85a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c796:	6878      	ldr	r0, [r7, #4]
 801c798:	f7f7 ff5c 	bl	8014654 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	607b      	str	r3, [r7, #4]
 801c7a0:	e00f      	b.n	801c7c2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c7a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c7a4:	330e      	adds	r3, #14
 801c7a6:	4619      	mov	r1, r3
 801c7a8:	6878      	ldr	r0, [r7, #4]
 801c7aa:	f7f7 fecd 	bl	8014548 <pbuf_remove_header>
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d006      	beq.n	801c7c2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c7b4:	4b2e      	ldr	r3, [pc, #184]	; (801c870 <icmp_input+0x1f8>)
 801c7b6:	22c7      	movs	r2, #199	; 0xc7
 801c7b8:	4930      	ldr	r1, [pc, #192]	; (801c87c <icmp_input+0x204>)
 801c7ba:	482f      	ldr	r0, [pc, #188]	; (801c878 <icmp_input+0x200>)
 801c7bc:	f002 fd36 	bl	801f22c <iprintf>
          goto icmperr;
 801c7c0:	e04b      	b.n	801c85a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	685b      	ldr	r3, [r3, #4]
 801c7c6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c7c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c7ca:	4619      	mov	r1, r3
 801c7cc:	6878      	ldr	r0, [r7, #4]
 801c7ce:	f7f7 feab 	bl	8014528 <pbuf_add_header>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d12b      	bne.n	801c830 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	685b      	ldr	r3, [r3, #4]
 801c7dc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c7de:	69fb      	ldr	r3, [r7, #28]
 801c7e0:	681a      	ldr	r2, [r3, #0]
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c7e6:	4b20      	ldr	r3, [pc, #128]	; (801c868 <icmp_input+0x1f0>)
 801c7e8:	691a      	ldr	r2, [r3, #16]
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c7ee:	693b      	ldr	r3, [r7, #16]
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c7f4:	693b      	ldr	r3, [r7, #16]
 801c7f6:	2200      	movs	r2, #0
 801c7f8:	709a      	strb	r2, [r3, #2]
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	22ff      	movs	r2, #255	; 0xff
 801c802:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	2200      	movs	r2, #0
 801c808:	729a      	strb	r2, [r3, #10]
 801c80a:	2200      	movs	r2, #0
 801c80c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c80e:	683b      	ldr	r3, [r7, #0]
 801c810:	9302      	str	r3, [sp, #8]
 801c812:	2301      	movs	r3, #1
 801c814:	9301      	str	r3, [sp, #4]
 801c816:	2300      	movs	r3, #0
 801c818:	9300      	str	r3, [sp, #0]
 801c81a:	23ff      	movs	r3, #255	; 0xff
 801c81c:	2200      	movs	r2, #0
 801c81e:	69f9      	ldr	r1, [r7, #28]
 801c820:	6878      	ldr	r0, [r7, #4]
 801c822:	f000 fa75 	bl	801cd10 <ip4_output_if>
 801c826:	4603      	mov	r3, r0
 801c828:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c82a:	e001      	b.n	801c830 <icmp_input+0x1b8>
      break;
 801c82c:	bf00      	nop
 801c82e:	e000      	b.n	801c832 <icmp_input+0x1ba>
      break;
 801c830:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c832:	6878      	ldr	r0, [r7, #4]
 801c834:	f7f7 ff0e 	bl	8014654 <pbuf_free>
  return;
 801c838:	e013      	b.n	801c862 <icmp_input+0x1ea>
    goto lenerr;
 801c83a:	bf00      	nop
 801c83c:	e002      	b.n	801c844 <icmp_input+0x1cc>
    goto lenerr;
 801c83e:	bf00      	nop
 801c840:	e000      	b.n	801c844 <icmp_input+0x1cc>
        goto lenerr;
 801c842:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	f7f7 ff05 	bl	8014654 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c84a:	e00a      	b.n	801c862 <icmp_input+0x1ea>
        goto icmperr;
 801c84c:	bf00      	nop
 801c84e:	e004      	b.n	801c85a <icmp_input+0x1e2>
        goto icmperr;
 801c850:	bf00      	nop
 801c852:	e002      	b.n	801c85a <icmp_input+0x1e2>
          goto icmperr;
 801c854:	bf00      	nop
 801c856:	e000      	b.n	801c85a <icmp_input+0x1e2>
          goto icmperr;
 801c858:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c85a:	6878      	ldr	r0, [r7, #4]
 801c85c:	f7f7 fefa 	bl	8014654 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c860:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c862:	3728      	adds	r7, #40	; 0x28
 801c864:	46bd      	mov	sp, r7
 801c866:	bd80      	pop	{r7, pc}
 801c868:	2000aa5c 	.word	0x2000aa5c
 801c86c:	2000aa70 	.word	0x2000aa70
 801c870:	0802685c 	.word	0x0802685c
 801c874:	08026894 	.word	0x08026894
 801c878:	080268cc 	.word	0x080268cc
 801c87c:	080268f4 	.word	0x080268f4

0801c880 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b082      	sub	sp, #8
 801c884:	af00      	add	r7, sp, #0
 801c886:	6078      	str	r0, [r7, #4]
 801c888:	460b      	mov	r3, r1
 801c88a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c88c:	78fb      	ldrb	r3, [r7, #3]
 801c88e:	461a      	mov	r2, r3
 801c890:	2103      	movs	r1, #3
 801c892:	6878      	ldr	r0, [r7, #4]
 801c894:	f000 f814 	bl	801c8c0 <icmp_send_response>
}
 801c898:	bf00      	nop
 801c89a:	3708      	adds	r7, #8
 801c89c:	46bd      	mov	sp, r7
 801c89e:	bd80      	pop	{r7, pc}

0801c8a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b082      	sub	sp, #8
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	6078      	str	r0, [r7, #4]
 801c8a8:	460b      	mov	r3, r1
 801c8aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c8ac:	78fb      	ldrb	r3, [r7, #3]
 801c8ae:	461a      	mov	r2, r3
 801c8b0:	210b      	movs	r1, #11
 801c8b2:	6878      	ldr	r0, [r7, #4]
 801c8b4:	f000 f804 	bl	801c8c0 <icmp_send_response>
}
 801c8b8:	bf00      	nop
 801c8ba:	3708      	adds	r7, #8
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd80      	pop	{r7, pc}

0801c8c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b08c      	sub	sp, #48	; 0x30
 801c8c4:	af04      	add	r7, sp, #16
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	460b      	mov	r3, r1
 801c8ca:	70fb      	strb	r3, [r7, #3]
 801c8cc:	4613      	mov	r3, r2
 801c8ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c8d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c8d4:	2124      	movs	r1, #36	; 0x24
 801c8d6:	2022      	movs	r0, #34	; 0x22
 801c8d8:	f7f7 fbd8 	bl	801408c <pbuf_alloc>
 801c8dc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c8de:	69fb      	ldr	r3, [r7, #28]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d04c      	beq.n	801c97e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c8e4:	69fb      	ldr	r3, [r7, #28]
 801c8e6:	895b      	ldrh	r3, [r3, #10]
 801c8e8:	2b23      	cmp	r3, #35	; 0x23
 801c8ea:	d806      	bhi.n	801c8fa <icmp_send_response+0x3a>
 801c8ec:	4b26      	ldr	r3, [pc, #152]	; (801c988 <icmp_send_response+0xc8>)
 801c8ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c8f2:	4926      	ldr	r1, [pc, #152]	; (801c98c <icmp_send_response+0xcc>)
 801c8f4:	4826      	ldr	r0, [pc, #152]	; (801c990 <icmp_send_response+0xd0>)
 801c8f6:	f002 fc99 	bl	801f22c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	685b      	ldr	r3, [r3, #4]
 801c8fe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c900:	69fb      	ldr	r3, [r7, #28]
 801c902:	685b      	ldr	r3, [r3, #4]
 801c904:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	78fa      	ldrb	r2, [r7, #3]
 801c90a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	78ba      	ldrb	r2, [r7, #2]
 801c910:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c912:	697b      	ldr	r3, [r7, #20]
 801c914:	2200      	movs	r2, #0
 801c916:	711a      	strb	r2, [r3, #4]
 801c918:	2200      	movs	r2, #0
 801c91a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c91c:	697b      	ldr	r3, [r7, #20]
 801c91e:	2200      	movs	r2, #0
 801c920:	719a      	strb	r2, [r3, #6]
 801c922:	2200      	movs	r2, #0
 801c924:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c926:	69fb      	ldr	r3, [r7, #28]
 801c928:	685b      	ldr	r3, [r3, #4]
 801c92a:	f103 0008 	add.w	r0, r3, #8
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	685b      	ldr	r3, [r3, #4]
 801c932:	221c      	movs	r2, #28
 801c934:	4619      	mov	r1, r3
 801c936:	f001 fd25 	bl	801e384 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c93a:	69bb      	ldr	r3, [r7, #24]
 801c93c:	68db      	ldr	r3, [r3, #12]
 801c93e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c940:	f107 030c 	add.w	r3, r7, #12
 801c944:	4618      	mov	r0, r3
 801c946:	f000 f825 	bl	801c994 <ip4_route>
 801c94a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c94c:	693b      	ldr	r3, [r7, #16]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d011      	beq.n	801c976 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	2200      	movs	r2, #0
 801c956:	709a      	strb	r2, [r3, #2]
 801c958:	2200      	movs	r2, #0
 801c95a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c95c:	f107 020c 	add.w	r2, r7, #12
 801c960:	693b      	ldr	r3, [r7, #16]
 801c962:	9302      	str	r3, [sp, #8]
 801c964:	2301      	movs	r3, #1
 801c966:	9301      	str	r3, [sp, #4]
 801c968:	2300      	movs	r3, #0
 801c96a:	9300      	str	r3, [sp, #0]
 801c96c:	23ff      	movs	r3, #255	; 0xff
 801c96e:	2100      	movs	r1, #0
 801c970:	69f8      	ldr	r0, [r7, #28]
 801c972:	f000 f9cd 	bl	801cd10 <ip4_output_if>
  }
  pbuf_free(q);
 801c976:	69f8      	ldr	r0, [r7, #28]
 801c978:	f7f7 fe6c 	bl	8014654 <pbuf_free>
 801c97c:	e000      	b.n	801c980 <icmp_send_response+0xc0>
    return;
 801c97e:	bf00      	nop
}
 801c980:	3720      	adds	r7, #32
 801c982:	46bd      	mov	sp, r7
 801c984:	bd80      	pop	{r7, pc}
 801c986:	bf00      	nop
 801c988:	0802685c 	.word	0x0802685c
 801c98c:	08026928 	.word	0x08026928
 801c990:	080268cc 	.word	0x080268cc

0801c994 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c994:	b480      	push	{r7}
 801c996:	b085      	sub	sp, #20
 801c998:	af00      	add	r7, sp, #0
 801c99a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c99c:	4b33      	ldr	r3, [pc, #204]	; (801ca6c <ip4_route+0xd8>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	60fb      	str	r3, [r7, #12]
 801c9a2:	e036      	b.n	801ca12 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c9aa:	f003 0301 	and.w	r3, r3, #1
 801c9ae:	b2db      	uxtb	r3, r3
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d02b      	beq.n	801ca0c <ip4_route+0x78>
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c9ba:	089b      	lsrs	r3, r3, #2
 801c9bc:	f003 0301 	and.w	r3, r3, #1
 801c9c0:	b2db      	uxtb	r3, r3
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d022      	beq.n	801ca0c <ip4_route+0x78>
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	3304      	adds	r3, #4
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d01d      	beq.n	801ca0c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	681a      	ldr	r2, [r3, #0]
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	3304      	adds	r3, #4
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	405a      	eors	r2, r3
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	3308      	adds	r3, #8
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	4013      	ands	r3, r2
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d101      	bne.n	801c9ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	e038      	b.n	801ca5e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c9f2:	f003 0302 	and.w	r3, r3, #2
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d108      	bne.n	801ca0c <ip4_route+0x78>
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	681a      	ldr	r2, [r3, #0]
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	330c      	adds	r3, #12
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	429a      	cmp	r2, r3
 801ca06:	d101      	bne.n	801ca0c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	e028      	b.n	801ca5e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	60fb      	str	r3, [r7, #12]
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d1c5      	bne.n	801c9a4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ca18:	4b15      	ldr	r3, [pc, #84]	; (801ca70 <ip4_route+0xdc>)
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d01a      	beq.n	801ca56 <ip4_route+0xc2>
 801ca20:	4b13      	ldr	r3, [pc, #76]	; (801ca70 <ip4_route+0xdc>)
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ca28:	f003 0301 	and.w	r3, r3, #1
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d012      	beq.n	801ca56 <ip4_route+0xc2>
 801ca30:	4b0f      	ldr	r3, [pc, #60]	; (801ca70 <ip4_route+0xdc>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ca38:	f003 0304 	and.w	r3, r3, #4
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d00a      	beq.n	801ca56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ca40:	4b0b      	ldr	r3, [pc, #44]	; (801ca70 <ip4_route+0xdc>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	3304      	adds	r3, #4
 801ca46:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d004      	beq.n	801ca56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	b2db      	uxtb	r3, r3
 801ca52:	2b7f      	cmp	r3, #127	; 0x7f
 801ca54:	d101      	bne.n	801ca5a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ca56:	2300      	movs	r3, #0
 801ca58:	e001      	b.n	801ca5e <ip4_route+0xca>
  }

  return netif_default;
 801ca5a:	4b05      	ldr	r3, [pc, #20]	; (801ca70 <ip4_route+0xdc>)
 801ca5c:	681b      	ldr	r3, [r3, #0]
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	3714      	adds	r7, #20
 801ca62:	46bd      	mov	sp, r7
 801ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca68:	4770      	bx	lr
 801ca6a:	bf00      	nop
 801ca6c:	2000e160 	.word	0x2000e160
 801ca70:	2000e164 	.word	0x2000e164

0801ca74 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b082      	sub	sp, #8
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ca82:	f003 0301 	and.w	r3, r3, #1
 801ca86:	b2db      	uxtb	r3, r3
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d016      	beq.n	801caba <ip4_input_accept+0x46>
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	3304      	adds	r3, #4
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d011      	beq.n	801caba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ca96:	4b0b      	ldr	r3, [pc, #44]	; (801cac4 <ip4_input_accept+0x50>)
 801ca98:	695a      	ldr	r2, [r3, #20]
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	3304      	adds	r3, #4
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	429a      	cmp	r2, r3
 801caa2:	d008      	beq.n	801cab6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801caa4:	4b07      	ldr	r3, [pc, #28]	; (801cac4 <ip4_input_accept+0x50>)
 801caa6:	695b      	ldr	r3, [r3, #20]
 801caa8:	6879      	ldr	r1, [r7, #4]
 801caaa:	4618      	mov	r0, r3
 801caac:	f000 fa08 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801cab0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d001      	beq.n	801caba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cab6:	2301      	movs	r3, #1
 801cab8:	e000      	b.n	801cabc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801caba:	2300      	movs	r3, #0
}
 801cabc:	4618      	mov	r0, r3
 801cabe:	3708      	adds	r7, #8
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}
 801cac4:	2000aa5c 	.word	0x2000aa5c

0801cac8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b086      	sub	sp, #24
 801cacc:	af00      	add	r7, sp, #0
 801cace:	6078      	str	r0, [r7, #4]
 801cad0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	685b      	ldr	r3, [r3, #4]
 801cad6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801cad8:	697b      	ldr	r3, [r7, #20]
 801cada:	781b      	ldrb	r3, [r3, #0]
 801cadc:	091b      	lsrs	r3, r3, #4
 801cade:	b2db      	uxtb	r3, r3
 801cae0:	2b04      	cmp	r3, #4
 801cae2:	d004      	beq.n	801caee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cae4:	6878      	ldr	r0, [r7, #4]
 801cae6:	f7f7 fdb5 	bl	8014654 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801caea:	2300      	movs	r3, #0
 801caec:	e107      	b.n	801ccfe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801caee:	697b      	ldr	r3, [r7, #20]
 801caf0:	781b      	ldrb	r3, [r3, #0]
 801caf2:	f003 030f 	and.w	r3, r3, #15
 801caf6:	b2db      	uxtb	r3, r3
 801caf8:	009b      	lsls	r3, r3, #2
 801cafa:	b2db      	uxtb	r3, r3
 801cafc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	885b      	ldrh	r3, [r3, #2]
 801cb02:	b29b      	uxth	r3, r3
 801cb04:	4618      	mov	r0, r3
 801cb06:	f7f6 fa5d 	bl	8012fc4 <lwip_htons>
 801cb0a:	4603      	mov	r3, r0
 801cb0c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	891b      	ldrh	r3, [r3, #8]
 801cb12:	89ba      	ldrh	r2, [r7, #12]
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d204      	bcs.n	801cb22 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801cb18:	89bb      	ldrh	r3, [r7, #12]
 801cb1a:	4619      	mov	r1, r3
 801cb1c:	6878      	ldr	r0, [r7, #4]
 801cb1e:	f7f7 fc13 	bl	8014348 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	895b      	ldrh	r3, [r3, #10]
 801cb26:	89fa      	ldrh	r2, [r7, #14]
 801cb28:	429a      	cmp	r2, r3
 801cb2a:	d807      	bhi.n	801cb3c <ip4_input+0x74>
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	891b      	ldrh	r3, [r3, #8]
 801cb30:	89ba      	ldrh	r2, [r7, #12]
 801cb32:	429a      	cmp	r2, r3
 801cb34:	d802      	bhi.n	801cb3c <ip4_input+0x74>
 801cb36:	89fb      	ldrh	r3, [r7, #14]
 801cb38:	2b13      	cmp	r3, #19
 801cb3a:	d804      	bhi.n	801cb46 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cb3c:	6878      	ldr	r0, [r7, #4]
 801cb3e:	f7f7 fd89 	bl	8014654 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cb42:	2300      	movs	r3, #0
 801cb44:	e0db      	b.n	801ccfe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	691b      	ldr	r3, [r3, #16]
 801cb4a:	4a6f      	ldr	r2, [pc, #444]	; (801cd08 <ip4_input+0x240>)
 801cb4c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cb4e:	697b      	ldr	r3, [r7, #20]
 801cb50:	68db      	ldr	r3, [r3, #12]
 801cb52:	4a6d      	ldr	r2, [pc, #436]	; (801cd08 <ip4_input+0x240>)
 801cb54:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cb56:	4b6c      	ldr	r3, [pc, #432]	; (801cd08 <ip4_input+0x240>)
 801cb58:	695b      	ldr	r3, [r3, #20]
 801cb5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cb5e:	2be0      	cmp	r3, #224	; 0xe0
 801cb60:	d112      	bne.n	801cb88 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cb62:	683b      	ldr	r3, [r7, #0]
 801cb64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cb68:	f003 0301 	and.w	r3, r3, #1
 801cb6c:	b2db      	uxtb	r3, r3
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d007      	beq.n	801cb82 <ip4_input+0xba>
 801cb72:	683b      	ldr	r3, [r7, #0]
 801cb74:	3304      	adds	r3, #4
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d002      	beq.n	801cb82 <ip4_input+0xba>
      netif = inp;
 801cb7c:	683b      	ldr	r3, [r7, #0]
 801cb7e:	613b      	str	r3, [r7, #16]
 801cb80:	e02a      	b.n	801cbd8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cb82:	2300      	movs	r3, #0
 801cb84:	613b      	str	r3, [r7, #16]
 801cb86:	e027      	b.n	801cbd8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cb88:	6838      	ldr	r0, [r7, #0]
 801cb8a:	f7ff ff73 	bl	801ca74 <ip4_input_accept>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d002      	beq.n	801cb9a <ip4_input+0xd2>
      netif = inp;
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	613b      	str	r3, [r7, #16]
 801cb98:	e01e      	b.n	801cbd8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cb9e:	4b5a      	ldr	r3, [pc, #360]	; (801cd08 <ip4_input+0x240>)
 801cba0:	695b      	ldr	r3, [r3, #20]
 801cba2:	b2db      	uxtb	r3, r3
 801cba4:	2b7f      	cmp	r3, #127	; 0x7f
 801cba6:	d017      	beq.n	801cbd8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801cba8:	4b58      	ldr	r3, [pc, #352]	; (801cd0c <ip4_input+0x244>)
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	613b      	str	r3, [r7, #16]
 801cbae:	e00e      	b.n	801cbce <ip4_input+0x106>
          if (netif == inp) {
 801cbb0:	693a      	ldr	r2, [r7, #16]
 801cbb2:	683b      	ldr	r3, [r7, #0]
 801cbb4:	429a      	cmp	r2, r3
 801cbb6:	d006      	beq.n	801cbc6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801cbb8:	6938      	ldr	r0, [r7, #16]
 801cbba:	f7ff ff5b 	bl	801ca74 <ip4_input_accept>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d108      	bne.n	801cbd6 <ip4_input+0x10e>
 801cbc4:	e000      	b.n	801cbc8 <ip4_input+0x100>
            continue;
 801cbc6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801cbc8:	693b      	ldr	r3, [r7, #16]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	613b      	str	r3, [r7, #16]
 801cbce:	693b      	ldr	r3, [r7, #16]
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d1ed      	bne.n	801cbb0 <ip4_input+0xe8>
 801cbd4:	e000      	b.n	801cbd8 <ip4_input+0x110>
            break;
 801cbd6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cbd8:	4b4b      	ldr	r3, [pc, #300]	; (801cd08 <ip4_input+0x240>)
 801cbda:	691b      	ldr	r3, [r3, #16]
 801cbdc:	6839      	ldr	r1, [r7, #0]
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f000 f96e 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d105      	bne.n	801cbf6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801cbea:	4b47      	ldr	r3, [pc, #284]	; (801cd08 <ip4_input+0x240>)
 801cbec:	691b      	ldr	r3, [r3, #16]
 801cbee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cbf2:	2be0      	cmp	r3, #224	; 0xe0
 801cbf4:	d104      	bne.n	801cc00 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801cbf6:	6878      	ldr	r0, [r7, #4]
 801cbf8:	f7f7 fd2c 	bl	8014654 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	e07e      	b.n	801ccfe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cc00:	693b      	ldr	r3, [r7, #16]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d104      	bne.n	801cc10 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cc06:	6878      	ldr	r0, [r7, #4]
 801cc08:	f7f7 fd24 	bl	8014654 <pbuf_free>
    return ERR_OK;
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	e076      	b.n	801ccfe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801cc10:	697b      	ldr	r3, [r7, #20]
 801cc12:	88db      	ldrh	r3, [r3, #6]
 801cc14:	b29b      	uxth	r3, r3
 801cc16:	461a      	mov	r2, r3
 801cc18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801cc1c:	4013      	ands	r3, r2
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d00b      	beq.n	801cc3a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f000 fc92 	bl	801d54c <ip4_reass>
 801cc28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d101      	bne.n	801cc34 <ip4_input+0x16c>
      return ERR_OK;
 801cc30:	2300      	movs	r3, #0
 801cc32:	e064      	b.n	801ccfe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	685b      	ldr	r3, [r3, #4]
 801cc38:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cc3a:	4a33      	ldr	r2, [pc, #204]	; (801cd08 <ip4_input+0x240>)
 801cc3c:	693b      	ldr	r3, [r7, #16]
 801cc3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801cc40:	4a31      	ldr	r2, [pc, #196]	; (801cd08 <ip4_input+0x240>)
 801cc42:	683b      	ldr	r3, [r7, #0]
 801cc44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801cc46:	4a30      	ldr	r2, [pc, #192]	; (801cd08 <ip4_input+0x240>)
 801cc48:	697b      	ldr	r3, [r7, #20]
 801cc4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	781b      	ldrb	r3, [r3, #0]
 801cc50:	f003 030f 	and.w	r3, r3, #15
 801cc54:	b2db      	uxtb	r3, r3
 801cc56:	009b      	lsls	r3, r3, #2
 801cc58:	b2db      	uxtb	r3, r3
 801cc5a:	b29a      	uxth	r2, r3
 801cc5c:	4b2a      	ldr	r3, [pc, #168]	; (801cd08 <ip4_input+0x240>)
 801cc5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cc60:	89fb      	ldrh	r3, [r7, #14]
 801cc62:	4619      	mov	r1, r3
 801cc64:	6878      	ldr	r0, [r7, #4]
 801cc66:	f7f7 fc6f 	bl	8014548 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cc6a:	697b      	ldr	r3, [r7, #20]
 801cc6c:	7a5b      	ldrb	r3, [r3, #9]
 801cc6e:	2b11      	cmp	r3, #17
 801cc70:	d006      	beq.n	801cc80 <ip4_input+0x1b8>
 801cc72:	2b11      	cmp	r3, #17
 801cc74:	dc13      	bgt.n	801cc9e <ip4_input+0x1d6>
 801cc76:	2b01      	cmp	r3, #1
 801cc78:	d00c      	beq.n	801cc94 <ip4_input+0x1cc>
 801cc7a:	2b06      	cmp	r3, #6
 801cc7c:	d005      	beq.n	801cc8a <ip4_input+0x1c2>
 801cc7e:	e00e      	b.n	801cc9e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cc80:	6839      	ldr	r1, [r7, #0]
 801cc82:	6878      	ldr	r0, [r7, #4]
 801cc84:	f7fe f970 	bl	801af68 <udp_input>
        break;
 801cc88:	e026      	b.n	801ccd8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cc8a:	6839      	ldr	r1, [r7, #0]
 801cc8c:	6878      	ldr	r0, [r7, #4]
 801cc8e:	f7f9 fd2d 	bl	80166ec <tcp_input>
        break;
 801cc92:	e021      	b.n	801ccd8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cc94:	6839      	ldr	r1, [r7, #0]
 801cc96:	6878      	ldr	r0, [r7, #4]
 801cc98:	f7ff fcee 	bl	801c678 <icmp_input>
        break;
 801cc9c:	e01c      	b.n	801ccd8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cc9e:	4b1a      	ldr	r3, [pc, #104]	; (801cd08 <ip4_input+0x240>)
 801cca0:	695b      	ldr	r3, [r3, #20]
 801cca2:	6939      	ldr	r1, [r7, #16]
 801cca4:	4618      	mov	r0, r3
 801cca6:	f000 f90b 	bl	801cec0 <ip4_addr_isbroadcast_u32>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d10f      	bne.n	801ccd0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ccb0:	4b15      	ldr	r3, [pc, #84]	; (801cd08 <ip4_input+0x240>)
 801ccb2:	695b      	ldr	r3, [r3, #20]
 801ccb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ccb8:	2be0      	cmp	r3, #224	; 0xe0
 801ccba:	d009      	beq.n	801ccd0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ccbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ccc0:	4619      	mov	r1, r3
 801ccc2:	6878      	ldr	r0, [r7, #4]
 801ccc4:	f7f7 fcb3 	bl	801462e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ccc8:	2102      	movs	r1, #2
 801ccca:	6878      	ldr	r0, [r7, #4]
 801cccc:	f7ff fdd8 	bl	801c880 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ccd0:	6878      	ldr	r0, [r7, #4]
 801ccd2:	f7f7 fcbf 	bl	8014654 <pbuf_free>
        break;
 801ccd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ccd8:	4b0b      	ldr	r3, [pc, #44]	; (801cd08 <ip4_input+0x240>)
 801ccda:	2200      	movs	r2, #0
 801ccdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ccde:	4b0a      	ldr	r3, [pc, #40]	; (801cd08 <ip4_input+0x240>)
 801cce0:	2200      	movs	r2, #0
 801cce2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801cce4:	4b08      	ldr	r3, [pc, #32]	; (801cd08 <ip4_input+0x240>)
 801cce6:	2200      	movs	r2, #0
 801cce8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ccea:	4b07      	ldr	r3, [pc, #28]	; (801cd08 <ip4_input+0x240>)
 801ccec:	2200      	movs	r2, #0
 801ccee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ccf0:	4b05      	ldr	r3, [pc, #20]	; (801cd08 <ip4_input+0x240>)
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ccf6:	4b04      	ldr	r3, [pc, #16]	; (801cd08 <ip4_input+0x240>)
 801ccf8:	2200      	movs	r2, #0
 801ccfa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ccfc:	2300      	movs	r3, #0
}
 801ccfe:	4618      	mov	r0, r3
 801cd00:	3718      	adds	r7, #24
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bd80      	pop	{r7, pc}
 801cd06:	bf00      	nop
 801cd08:	2000aa5c 	.word	0x2000aa5c
 801cd0c:	2000e160 	.word	0x2000e160

0801cd10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b08a      	sub	sp, #40	; 0x28
 801cd14:	af04      	add	r7, sp, #16
 801cd16:	60f8      	str	r0, [r7, #12]
 801cd18:	60b9      	str	r1, [r7, #8]
 801cd1a:	607a      	str	r2, [r7, #4]
 801cd1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801cd1e:	68bb      	ldr	r3, [r7, #8]
 801cd20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d009      	beq.n	801cd3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801cd28:	68bb      	ldr	r3, [r7, #8]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d003      	beq.n	801cd36 <ip4_output_if+0x26>
 801cd2e:	68bb      	ldr	r3, [r7, #8]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d102      	bne.n	801cd3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd38:	3304      	adds	r3, #4
 801cd3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cd3c:	78fa      	ldrb	r2, [r7, #3]
 801cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd40:	9302      	str	r3, [sp, #8]
 801cd42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cd46:	9301      	str	r3, [sp, #4]
 801cd48:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	4613      	mov	r3, r2
 801cd50:	687a      	ldr	r2, [r7, #4]
 801cd52:	6979      	ldr	r1, [r7, #20]
 801cd54:	68f8      	ldr	r0, [r7, #12]
 801cd56:	f000 f805 	bl	801cd64 <ip4_output_if_src>
 801cd5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	3718      	adds	r7, #24
 801cd60:	46bd      	mov	sp, r7
 801cd62:	bd80      	pop	{r7, pc}

0801cd64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b088      	sub	sp, #32
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	60f8      	str	r0, [r7, #12]
 801cd6c:	60b9      	str	r1, [r7, #8]
 801cd6e:	607a      	str	r2, [r7, #4]
 801cd70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	7b9b      	ldrb	r3, [r3, #14]
 801cd76:	2b01      	cmp	r3, #1
 801cd78:	d006      	beq.n	801cd88 <ip4_output_if_src+0x24>
 801cd7a:	4b4b      	ldr	r3, [pc, #300]	; (801cea8 <ip4_output_if_src+0x144>)
 801cd7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801cd80:	494a      	ldr	r1, [pc, #296]	; (801ceac <ip4_output_if_src+0x148>)
 801cd82:	484b      	ldr	r0, [pc, #300]	; (801ceb0 <ip4_output_if_src+0x14c>)
 801cd84:	f002 fa52 	bl	801f22c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d060      	beq.n	801ce50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801cd8e:	2314      	movs	r3, #20
 801cd90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801cd92:	2114      	movs	r1, #20
 801cd94:	68f8      	ldr	r0, [r7, #12]
 801cd96:	f7f7 fbc7 	bl	8014528 <pbuf_add_header>
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d002      	beq.n	801cda6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cda0:	f06f 0301 	mvn.w	r3, #1
 801cda4:	e07c      	b.n	801cea0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801cda6:	68fb      	ldr	r3, [r7, #12]
 801cda8:	685b      	ldr	r3, [r3, #4]
 801cdaa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	895b      	ldrh	r3, [r3, #10]
 801cdb0:	2b13      	cmp	r3, #19
 801cdb2:	d806      	bhi.n	801cdc2 <ip4_output_if_src+0x5e>
 801cdb4:	4b3c      	ldr	r3, [pc, #240]	; (801cea8 <ip4_output_if_src+0x144>)
 801cdb6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801cdba:	493e      	ldr	r1, [pc, #248]	; (801ceb4 <ip4_output_if_src+0x150>)
 801cdbc:	483c      	ldr	r0, [pc, #240]	; (801ceb0 <ip4_output_if_src+0x14c>)
 801cdbe:	f002 fa35 	bl	801f22c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801cdc2:	69fb      	ldr	r3, [r7, #28]
 801cdc4:	78fa      	ldrb	r2, [r7, #3]
 801cdc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801cdc8:	69fb      	ldr	r3, [r7, #28]
 801cdca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cdce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	681a      	ldr	r2, [r3, #0]
 801cdd4:	69fb      	ldr	r3, [r7, #28]
 801cdd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cdd8:	8b7b      	ldrh	r3, [r7, #26]
 801cdda:	089b      	lsrs	r3, r3, #2
 801cddc:	b29b      	uxth	r3, r3
 801cdde:	b2db      	uxtb	r3, r3
 801cde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cde4:	b2da      	uxtb	r2, r3
 801cde6:	69fb      	ldr	r3, [r7, #28]
 801cde8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cdea:	69fb      	ldr	r3, [r7, #28]
 801cdec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cdf0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	891b      	ldrh	r3, [r3, #8]
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f7f6 f8e4 	bl	8012fc4 <lwip_htons>
 801cdfc:	4603      	mov	r3, r0
 801cdfe:	461a      	mov	r2, r3
 801ce00:	69fb      	ldr	r3, [r7, #28]
 801ce02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801ce04:	69fb      	ldr	r3, [r7, #28]
 801ce06:	2200      	movs	r2, #0
 801ce08:	719a      	strb	r2, [r3, #6]
 801ce0a:	2200      	movs	r2, #0
 801ce0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ce0e:	4b2a      	ldr	r3, [pc, #168]	; (801ceb8 <ip4_output_if_src+0x154>)
 801ce10:	881b      	ldrh	r3, [r3, #0]
 801ce12:	4618      	mov	r0, r3
 801ce14:	f7f6 f8d6 	bl	8012fc4 <lwip_htons>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	461a      	mov	r2, r3
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ce20:	4b25      	ldr	r3, [pc, #148]	; (801ceb8 <ip4_output_if_src+0x154>)
 801ce22:	881b      	ldrh	r3, [r3, #0]
 801ce24:	3301      	adds	r3, #1
 801ce26:	b29a      	uxth	r2, r3
 801ce28:	4b23      	ldr	r3, [pc, #140]	; (801ceb8 <ip4_output_if_src+0x154>)
 801ce2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d104      	bne.n	801ce3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ce32:	4b22      	ldr	r3, [pc, #136]	; (801cebc <ip4_output_if_src+0x158>)
 801ce34:	681a      	ldr	r2, [r3, #0]
 801ce36:	69fb      	ldr	r3, [r7, #28]
 801ce38:	60da      	str	r2, [r3, #12]
 801ce3a:	e003      	b.n	801ce44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ce3c:	68bb      	ldr	r3, [r7, #8]
 801ce3e:	681a      	ldr	r2, [r3, #0]
 801ce40:	69fb      	ldr	r3, [r7, #28]
 801ce42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ce44:	69fb      	ldr	r3, [r7, #28]
 801ce46:	2200      	movs	r2, #0
 801ce48:	729a      	strb	r2, [r3, #10]
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	72da      	strb	r2, [r3, #11]
 801ce4e:	e00f      	b.n	801ce70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	895b      	ldrh	r3, [r3, #10]
 801ce54:	2b13      	cmp	r3, #19
 801ce56:	d802      	bhi.n	801ce5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ce58:	f06f 0301 	mvn.w	r3, #1
 801ce5c:	e020      	b.n	801cea0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	685b      	ldr	r3, [r3, #4]
 801ce62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ce64:	69fb      	ldr	r3, [r7, #28]
 801ce66:	691b      	ldr	r3, [r3, #16]
 801ce68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ce6a:	f107 0314 	add.w	r3, r7, #20
 801ce6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d00c      	beq.n	801ce92 <ip4_output_if_src+0x12e>
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	891a      	ldrh	r2, [r3, #8]
 801ce7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ce80:	429a      	cmp	r2, r3
 801ce82:	d906      	bls.n	801ce92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ce84:	687a      	ldr	r2, [r7, #4]
 801ce86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ce88:	68f8      	ldr	r0, [r7, #12]
 801ce8a:	f000 fd4d 	bl	801d928 <ip4_frag>
 801ce8e:	4603      	mov	r3, r0
 801ce90:	e006      	b.n	801cea0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce94:	695b      	ldr	r3, [r3, #20]
 801ce96:	687a      	ldr	r2, [r7, #4]
 801ce98:	68f9      	ldr	r1, [r7, #12]
 801ce9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ce9c:	4798      	blx	r3
 801ce9e:	4603      	mov	r3, r0
}
 801cea0:	4618      	mov	r0, r3
 801cea2:	3720      	adds	r7, #32
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd80      	pop	{r7, pc}
 801cea8:	08026954 	.word	0x08026954
 801ceac:	08026988 	.word	0x08026988
 801ceb0:	08026994 	.word	0x08026994
 801ceb4:	080269bc 	.word	0x080269bc
 801ceb8:	20006f46 	.word	0x20006f46
 801cebc:	08026fa0 	.word	0x08026fa0

0801cec0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cec0:	b480      	push	{r7}
 801cec2:	b085      	sub	sp, #20
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
 801cec8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ced4:	d002      	beq.n	801cedc <ip4_addr_isbroadcast_u32+0x1c>
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d101      	bne.n	801cee0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cedc:	2301      	movs	r3, #1
 801cede:	e02a      	b.n	801cf36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cee0:	683b      	ldr	r3, [r7, #0]
 801cee2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cee6:	f003 0302 	and.w	r3, r3, #2
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d101      	bne.n	801cef2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ceee:	2300      	movs	r3, #0
 801cef0:	e021      	b.n	801cf36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	3304      	adds	r3, #4
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	687a      	ldr	r2, [r7, #4]
 801cefa:	429a      	cmp	r2, r3
 801cefc:	d101      	bne.n	801cf02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801cefe:	2300      	movs	r3, #0
 801cf00:	e019      	b.n	801cf36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801cf02:	68fa      	ldr	r2, [r7, #12]
 801cf04:	683b      	ldr	r3, [r7, #0]
 801cf06:	3304      	adds	r3, #4
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	405a      	eors	r2, r3
 801cf0c:	683b      	ldr	r3, [r7, #0]
 801cf0e:	3308      	adds	r3, #8
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	4013      	ands	r3, r2
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d10d      	bne.n	801cf34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cf18:	683b      	ldr	r3, [r7, #0]
 801cf1a:	3308      	adds	r3, #8
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	43da      	mvns	r2, r3
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cf24:	683b      	ldr	r3, [r7, #0]
 801cf26:	3308      	adds	r3, #8
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cf2c:	429a      	cmp	r2, r3
 801cf2e:	d101      	bne.n	801cf34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cf30:	2301      	movs	r3, #1
 801cf32:	e000      	b.n	801cf36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cf34:	2300      	movs	r3, #0
  }
}
 801cf36:	4618      	mov	r0, r3
 801cf38:	3714      	adds	r7, #20
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf40:	4770      	bx	lr
	...

0801cf44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b084      	sub	sp, #16
 801cf48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cf4e:	4b12      	ldr	r3, [pc, #72]	; (801cf98 <ip_reass_tmr+0x54>)
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cf54:	e018      	b.n	801cf88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	7fdb      	ldrb	r3, [r3, #31]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d00b      	beq.n	801cf76 <ip_reass_tmr+0x32>
      r->timer--;
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	7fdb      	ldrb	r3, [r3, #31]
 801cf62:	3b01      	subs	r3, #1
 801cf64:	b2da      	uxtb	r2, r3
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	60fb      	str	r3, [r7, #12]
 801cf74:	e008      	b.n	801cf88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cf80:	68b9      	ldr	r1, [r7, #8]
 801cf82:	6878      	ldr	r0, [r7, #4]
 801cf84:	f000 f80a 	bl	801cf9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d1e3      	bne.n	801cf56 <ip_reass_tmr+0x12>
    }
  }
}
 801cf8e:	bf00      	nop
 801cf90:	bf00      	nop
 801cf92:	3710      	adds	r7, #16
 801cf94:	46bd      	mov	sp, r7
 801cf96:	bd80      	pop	{r7, pc}
 801cf98:	20006f48 	.word	0x20006f48

0801cf9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cf9c:	b580      	push	{r7, lr}
 801cf9e:	b088      	sub	sp, #32
 801cfa0:	af00      	add	r7, sp, #0
 801cfa2:	6078      	str	r0, [r7, #4]
 801cfa4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cfaa:	683a      	ldr	r2, [r7, #0]
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	429a      	cmp	r2, r3
 801cfb0:	d105      	bne.n	801cfbe <ip_reass_free_complete_datagram+0x22>
 801cfb2:	4b45      	ldr	r3, [pc, #276]	; (801d0c8 <ip_reass_free_complete_datagram+0x12c>)
 801cfb4:	22ab      	movs	r2, #171	; 0xab
 801cfb6:	4945      	ldr	r1, [pc, #276]	; (801d0cc <ip_reass_free_complete_datagram+0x130>)
 801cfb8:	4845      	ldr	r0, [pc, #276]	; (801d0d0 <ip_reass_free_complete_datagram+0x134>)
 801cfba:	f002 f937 	bl	801f22c <iprintf>
  if (prev != NULL) {
 801cfbe:	683b      	ldr	r3, [r7, #0]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d00a      	beq.n	801cfda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cfc4:	683b      	ldr	r3, [r7, #0]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	687a      	ldr	r2, [r7, #4]
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	d005      	beq.n	801cfda <ip_reass_free_complete_datagram+0x3e>
 801cfce:	4b3e      	ldr	r3, [pc, #248]	; (801d0c8 <ip_reass_free_complete_datagram+0x12c>)
 801cfd0:	22ad      	movs	r2, #173	; 0xad
 801cfd2:	4940      	ldr	r1, [pc, #256]	; (801d0d4 <ip_reass_free_complete_datagram+0x138>)
 801cfd4:	483e      	ldr	r0, [pc, #248]	; (801d0d0 <ip_reass_free_complete_datagram+0x134>)
 801cfd6:	f002 f929 	bl	801f22c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	685b      	ldr	r3, [r3, #4]
 801cfde:	685b      	ldr	r3, [r3, #4]
 801cfe0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cfe2:	697b      	ldr	r3, [r7, #20]
 801cfe4:	889b      	ldrh	r3, [r3, #4]
 801cfe6:	b29b      	uxth	r3, r3
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d12a      	bne.n	801d042 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	685b      	ldr	r3, [r3, #4]
 801cff0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cff2:	697b      	ldr	r3, [r7, #20]
 801cff4:	681a      	ldr	r2, [r3, #0]
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cffa:	69bb      	ldr	r3, [r7, #24]
 801cffc:	6858      	ldr	r0, [r3, #4]
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	3308      	adds	r3, #8
 801d002:	2214      	movs	r2, #20
 801d004:	4619      	mov	r1, r3
 801d006:	f001 f9bd 	bl	801e384 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d00a:	2101      	movs	r1, #1
 801d00c:	69b8      	ldr	r0, [r7, #24]
 801d00e:	f7ff fc47 	bl	801c8a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d012:	69b8      	ldr	r0, [r7, #24]
 801d014:	f7f7 fbac 	bl	8014770 <pbuf_clen>
 801d018:	4603      	mov	r3, r0
 801d01a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d01c:	8bfa      	ldrh	r2, [r7, #30]
 801d01e:	8a7b      	ldrh	r3, [r7, #18]
 801d020:	4413      	add	r3, r2
 801d022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d026:	db05      	blt.n	801d034 <ip_reass_free_complete_datagram+0x98>
 801d028:	4b27      	ldr	r3, [pc, #156]	; (801d0c8 <ip_reass_free_complete_datagram+0x12c>)
 801d02a:	22bc      	movs	r2, #188	; 0xbc
 801d02c:	492a      	ldr	r1, [pc, #168]	; (801d0d8 <ip_reass_free_complete_datagram+0x13c>)
 801d02e:	4828      	ldr	r0, [pc, #160]	; (801d0d0 <ip_reass_free_complete_datagram+0x134>)
 801d030:	f002 f8fc 	bl	801f22c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d034:	8bfa      	ldrh	r2, [r7, #30]
 801d036:	8a7b      	ldrh	r3, [r7, #18]
 801d038:	4413      	add	r3, r2
 801d03a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d03c:	69b8      	ldr	r0, [r7, #24]
 801d03e:	f7f7 fb09 	bl	8014654 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	685b      	ldr	r3, [r3, #4]
 801d046:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d048:	e01f      	b.n	801d08a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d04a:	69bb      	ldr	r3, [r7, #24]
 801d04c:	685b      	ldr	r3, [r3, #4]
 801d04e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d050:	69bb      	ldr	r3, [r7, #24]
 801d052:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d054:	697b      	ldr	r3, [r7, #20]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d05a:	68f8      	ldr	r0, [r7, #12]
 801d05c:	f7f7 fb88 	bl	8014770 <pbuf_clen>
 801d060:	4603      	mov	r3, r0
 801d062:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d064:	8bfa      	ldrh	r2, [r7, #30]
 801d066:	8a7b      	ldrh	r3, [r7, #18]
 801d068:	4413      	add	r3, r2
 801d06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d06e:	db05      	blt.n	801d07c <ip_reass_free_complete_datagram+0xe0>
 801d070:	4b15      	ldr	r3, [pc, #84]	; (801d0c8 <ip_reass_free_complete_datagram+0x12c>)
 801d072:	22cc      	movs	r2, #204	; 0xcc
 801d074:	4918      	ldr	r1, [pc, #96]	; (801d0d8 <ip_reass_free_complete_datagram+0x13c>)
 801d076:	4816      	ldr	r0, [pc, #88]	; (801d0d0 <ip_reass_free_complete_datagram+0x134>)
 801d078:	f002 f8d8 	bl	801f22c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d07c:	8bfa      	ldrh	r2, [r7, #30]
 801d07e:	8a7b      	ldrh	r3, [r7, #18]
 801d080:	4413      	add	r3, r2
 801d082:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d084:	68f8      	ldr	r0, [r7, #12]
 801d086:	f7f7 fae5 	bl	8014654 <pbuf_free>
  while (p != NULL) {
 801d08a:	69bb      	ldr	r3, [r7, #24]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d1dc      	bne.n	801d04a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d090:	6839      	ldr	r1, [r7, #0]
 801d092:	6878      	ldr	r0, [r7, #4]
 801d094:	f000 f8c2 	bl	801d21c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d098:	4b10      	ldr	r3, [pc, #64]	; (801d0dc <ip_reass_free_complete_datagram+0x140>)
 801d09a:	881b      	ldrh	r3, [r3, #0]
 801d09c:	8bfa      	ldrh	r2, [r7, #30]
 801d09e:	429a      	cmp	r2, r3
 801d0a0:	d905      	bls.n	801d0ae <ip_reass_free_complete_datagram+0x112>
 801d0a2:	4b09      	ldr	r3, [pc, #36]	; (801d0c8 <ip_reass_free_complete_datagram+0x12c>)
 801d0a4:	22d2      	movs	r2, #210	; 0xd2
 801d0a6:	490e      	ldr	r1, [pc, #56]	; (801d0e0 <ip_reass_free_complete_datagram+0x144>)
 801d0a8:	4809      	ldr	r0, [pc, #36]	; (801d0d0 <ip_reass_free_complete_datagram+0x134>)
 801d0aa:	f002 f8bf 	bl	801f22c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d0ae:	4b0b      	ldr	r3, [pc, #44]	; (801d0dc <ip_reass_free_complete_datagram+0x140>)
 801d0b0:	881a      	ldrh	r2, [r3, #0]
 801d0b2:	8bfb      	ldrh	r3, [r7, #30]
 801d0b4:	1ad3      	subs	r3, r2, r3
 801d0b6:	b29a      	uxth	r2, r3
 801d0b8:	4b08      	ldr	r3, [pc, #32]	; (801d0dc <ip_reass_free_complete_datagram+0x140>)
 801d0ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d0bc:	8bfb      	ldrh	r3, [r7, #30]
}
 801d0be:	4618      	mov	r0, r3
 801d0c0:	3720      	adds	r7, #32
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
 801d0c6:	bf00      	nop
 801d0c8:	080269ec 	.word	0x080269ec
 801d0cc:	08026a28 	.word	0x08026a28
 801d0d0:	08026a34 	.word	0x08026a34
 801d0d4:	08026a5c 	.word	0x08026a5c
 801d0d8:	08026a70 	.word	0x08026a70
 801d0dc:	20006f4c 	.word	0x20006f4c
 801d0e0:	08026a90 	.word	0x08026a90

0801d0e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b08a      	sub	sp, #40	; 0x28
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
 801d0ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d0fa:	2300      	movs	r3, #0
 801d0fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d0fe:	2300      	movs	r3, #0
 801d100:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d102:	4b28      	ldr	r3, [pc, #160]	; (801d1a4 <ip_reass_remove_oldest_datagram+0xc0>)
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d108:	e030      	b.n	801d16c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d10c:	695a      	ldr	r2, [r3, #20]
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	68db      	ldr	r3, [r3, #12]
 801d112:	429a      	cmp	r2, r3
 801d114:	d10c      	bne.n	801d130 <ip_reass_remove_oldest_datagram+0x4c>
 801d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d118:	699a      	ldr	r2, [r3, #24]
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	691b      	ldr	r3, [r3, #16]
 801d11e:	429a      	cmp	r2, r3
 801d120:	d106      	bne.n	801d130 <ip_reass_remove_oldest_datagram+0x4c>
 801d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d124:	899a      	ldrh	r2, [r3, #12]
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	889b      	ldrh	r3, [r3, #4]
 801d12a:	b29b      	uxth	r3, r3
 801d12c:	429a      	cmp	r2, r3
 801d12e:	d014      	beq.n	801d15a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d130:	693b      	ldr	r3, [r7, #16]
 801d132:	3301      	adds	r3, #1
 801d134:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d136:	6a3b      	ldr	r3, [r7, #32]
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d104      	bne.n	801d146 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d13e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d140:	69fb      	ldr	r3, [r7, #28]
 801d142:	61bb      	str	r3, [r7, #24]
 801d144:	e009      	b.n	801d15a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d148:	7fda      	ldrb	r2, [r3, #31]
 801d14a:	6a3b      	ldr	r3, [r7, #32]
 801d14c:	7fdb      	ldrb	r3, [r3, #31]
 801d14e:	429a      	cmp	r2, r3
 801d150:	d803      	bhi.n	801d15a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d154:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d156:	69fb      	ldr	r3, [r7, #28]
 801d158:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d001      	beq.n	801d166 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d164:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d1cb      	bne.n	801d10a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d172:	6a3b      	ldr	r3, [r7, #32]
 801d174:	2b00      	cmp	r3, #0
 801d176:	d008      	beq.n	801d18a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d178:	69b9      	ldr	r1, [r7, #24]
 801d17a:	6a38      	ldr	r0, [r7, #32]
 801d17c:	f7ff ff0e 	bl	801cf9c <ip_reass_free_complete_datagram>
 801d180:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d182:	697a      	ldr	r2, [r7, #20]
 801d184:	68fb      	ldr	r3, [r7, #12]
 801d186:	4413      	add	r3, r2
 801d188:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d18a:	697a      	ldr	r2, [r7, #20]
 801d18c:	683b      	ldr	r3, [r7, #0]
 801d18e:	429a      	cmp	r2, r3
 801d190:	da02      	bge.n	801d198 <ip_reass_remove_oldest_datagram+0xb4>
 801d192:	693b      	ldr	r3, [r7, #16]
 801d194:	2b01      	cmp	r3, #1
 801d196:	dcac      	bgt.n	801d0f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d198:	697b      	ldr	r3, [r7, #20]
}
 801d19a:	4618      	mov	r0, r3
 801d19c:	3728      	adds	r7, #40	; 0x28
 801d19e:	46bd      	mov	sp, r7
 801d1a0:	bd80      	pop	{r7, pc}
 801d1a2:	bf00      	nop
 801d1a4:	20006f48 	.word	0x20006f48

0801d1a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b084      	sub	sp, #16
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	6078      	str	r0, [r7, #4]
 801d1b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d1b2:	2004      	movs	r0, #4
 801d1b4:	f7f6 fbbc 	bl	8013930 <memp_malloc>
 801d1b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d110      	bne.n	801d1e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d1c0:	6839      	ldr	r1, [r7, #0]
 801d1c2:	6878      	ldr	r0, [r7, #4]
 801d1c4:	f7ff ff8e 	bl	801d0e4 <ip_reass_remove_oldest_datagram>
 801d1c8:	4602      	mov	r2, r0
 801d1ca:	683b      	ldr	r3, [r7, #0]
 801d1cc:	4293      	cmp	r3, r2
 801d1ce:	dc03      	bgt.n	801d1d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d1d0:	2004      	movs	r0, #4
 801d1d2:	f7f6 fbad 	bl	8013930 <memp_malloc>
 801d1d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d101      	bne.n	801d1e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d1de:	2300      	movs	r3, #0
 801d1e0:	e016      	b.n	801d210 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d1e2:	2220      	movs	r2, #32
 801d1e4:	2100      	movs	r1, #0
 801d1e6:	68f8      	ldr	r0, [r7, #12]
 801d1e8:	f001 f8f4 	bl	801e3d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	220f      	movs	r2, #15
 801d1f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d1f2:	4b09      	ldr	r3, [pc, #36]	; (801d218 <ip_reass_enqueue_new_datagram+0x70>)
 801d1f4:	681a      	ldr	r2, [r3, #0]
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d1fa:	4a07      	ldr	r2, [pc, #28]	; (801d218 <ip_reass_enqueue_new_datagram+0x70>)
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	3308      	adds	r3, #8
 801d204:	2214      	movs	r2, #20
 801d206:	6879      	ldr	r1, [r7, #4]
 801d208:	4618      	mov	r0, r3
 801d20a:	f001 f8bb 	bl	801e384 <memcpy>
  return ipr;
 801d20e:	68fb      	ldr	r3, [r7, #12]
}
 801d210:	4618      	mov	r0, r3
 801d212:	3710      	adds	r7, #16
 801d214:	46bd      	mov	sp, r7
 801d216:	bd80      	pop	{r7, pc}
 801d218:	20006f48 	.word	0x20006f48

0801d21c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b082      	sub	sp, #8
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
 801d224:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d226:	4b10      	ldr	r3, [pc, #64]	; (801d268 <ip_reass_dequeue_datagram+0x4c>)
 801d228:	681b      	ldr	r3, [r3, #0]
 801d22a:	687a      	ldr	r2, [r7, #4]
 801d22c:	429a      	cmp	r2, r3
 801d22e:	d104      	bne.n	801d23a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	4a0c      	ldr	r2, [pc, #48]	; (801d268 <ip_reass_dequeue_datagram+0x4c>)
 801d236:	6013      	str	r3, [r2, #0]
 801d238:	e00d      	b.n	801d256 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d23a:	683b      	ldr	r3, [r7, #0]
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d106      	bne.n	801d24e <ip_reass_dequeue_datagram+0x32>
 801d240:	4b0a      	ldr	r3, [pc, #40]	; (801d26c <ip_reass_dequeue_datagram+0x50>)
 801d242:	f240 1245 	movw	r2, #325	; 0x145
 801d246:	490a      	ldr	r1, [pc, #40]	; (801d270 <ip_reass_dequeue_datagram+0x54>)
 801d248:	480a      	ldr	r0, [pc, #40]	; (801d274 <ip_reass_dequeue_datagram+0x58>)
 801d24a:	f001 ffef 	bl	801f22c <iprintf>
    prev->next = ipr->next;
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	681a      	ldr	r2, [r3, #0]
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d256:	6879      	ldr	r1, [r7, #4]
 801d258:	2004      	movs	r0, #4
 801d25a:	f7f6 fbbb 	bl	80139d4 <memp_free>
}
 801d25e:	bf00      	nop
 801d260:	3708      	adds	r7, #8
 801d262:	46bd      	mov	sp, r7
 801d264:	bd80      	pop	{r7, pc}
 801d266:	bf00      	nop
 801d268:	20006f48 	.word	0x20006f48
 801d26c:	080269ec 	.word	0x080269ec
 801d270:	08026ab4 	.word	0x08026ab4
 801d274:	08026a34 	.word	0x08026a34

0801d278 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b08c      	sub	sp, #48	; 0x30
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	60f8      	str	r0, [r7, #12]
 801d280:	60b9      	str	r1, [r7, #8]
 801d282:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d284:	2300      	movs	r3, #0
 801d286:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d288:	2301      	movs	r3, #1
 801d28a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d28c:	68bb      	ldr	r3, [r7, #8]
 801d28e:	685b      	ldr	r3, [r3, #4]
 801d290:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d292:	69fb      	ldr	r3, [r7, #28]
 801d294:	885b      	ldrh	r3, [r3, #2]
 801d296:	b29b      	uxth	r3, r3
 801d298:	4618      	mov	r0, r3
 801d29a:	f7f5 fe93 	bl	8012fc4 <lwip_htons>
 801d29e:	4603      	mov	r3, r0
 801d2a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d2a2:	69fb      	ldr	r3, [r7, #28]
 801d2a4:	781b      	ldrb	r3, [r3, #0]
 801d2a6:	f003 030f 	and.w	r3, r3, #15
 801d2aa:	b2db      	uxtb	r3, r3
 801d2ac:	009b      	lsls	r3, r3, #2
 801d2ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d2b0:	7e7b      	ldrb	r3, [r7, #25]
 801d2b2:	b29b      	uxth	r3, r3
 801d2b4:	8b7a      	ldrh	r2, [r7, #26]
 801d2b6:	429a      	cmp	r2, r3
 801d2b8:	d202      	bcs.n	801d2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d2ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d2be:	e135      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d2c0:	7e7b      	ldrb	r3, [r7, #25]
 801d2c2:	b29b      	uxth	r3, r3
 801d2c4:	8b7a      	ldrh	r2, [r7, #26]
 801d2c6:	1ad3      	subs	r3, r2, r3
 801d2c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d2ca:	69fb      	ldr	r3, [r7, #28]
 801d2cc:	88db      	ldrh	r3, [r3, #6]
 801d2ce:	b29b      	uxth	r3, r3
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7f5 fe77 	bl	8012fc4 <lwip_htons>
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d2dc:	b29b      	uxth	r3, r3
 801d2de:	00db      	lsls	r3, r3, #3
 801d2e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d2e2:	68bb      	ldr	r3, [r7, #8]
 801d2e4:	685b      	ldr	r3, [r3, #4]
 801d2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	701a      	strb	r2, [r3, #0]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	705a      	strb	r2, [r3, #1]
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	709a      	strb	r2, [r3, #2]
 801d2f6:	2200      	movs	r2, #0
 801d2f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2fc:	8afa      	ldrh	r2, [r7, #22]
 801d2fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d300:	8afa      	ldrh	r2, [r7, #22]
 801d302:	8b7b      	ldrh	r3, [r7, #26]
 801d304:	4413      	add	r3, r2
 801d306:	b29a      	uxth	r2, r3
 801d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d30a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d30e:	88db      	ldrh	r3, [r3, #6]
 801d310:	b29b      	uxth	r3, r3
 801d312:	8afa      	ldrh	r2, [r7, #22]
 801d314:	429a      	cmp	r2, r3
 801d316:	d902      	bls.n	801d31e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d318:	f04f 33ff 	mov.w	r3, #4294967295
 801d31c:	e106      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	685b      	ldr	r3, [r3, #4]
 801d322:	627b      	str	r3, [r7, #36]	; 0x24
 801d324:	e068      	b.n	801d3f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d328:	685b      	ldr	r3, [r3, #4]
 801d32a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d32e:	889b      	ldrh	r3, [r3, #4]
 801d330:	b29a      	uxth	r2, r3
 801d332:	693b      	ldr	r3, [r7, #16]
 801d334:	889b      	ldrh	r3, [r3, #4]
 801d336:	b29b      	uxth	r3, r3
 801d338:	429a      	cmp	r2, r3
 801d33a:	d235      	bcs.n	801d3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d340:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d344:	2b00      	cmp	r3, #0
 801d346:	d020      	beq.n	801d38a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d34a:	889b      	ldrh	r3, [r3, #4]
 801d34c:	b29a      	uxth	r2, r3
 801d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d350:	88db      	ldrh	r3, [r3, #6]
 801d352:	b29b      	uxth	r3, r3
 801d354:	429a      	cmp	r2, r3
 801d356:	d307      	bcc.n	801d368 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d35a:	88db      	ldrh	r3, [r3, #6]
 801d35c:	b29a      	uxth	r2, r3
 801d35e:	693b      	ldr	r3, [r7, #16]
 801d360:	889b      	ldrh	r3, [r3, #4]
 801d362:	b29b      	uxth	r3, r3
 801d364:	429a      	cmp	r2, r3
 801d366:	d902      	bls.n	801d36e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d368:	f04f 33ff 	mov.w	r3, #4294967295
 801d36c:	e0de      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d370:	68ba      	ldr	r2, [r7, #8]
 801d372:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d376:	88db      	ldrh	r3, [r3, #6]
 801d378:	b29a      	uxth	r2, r3
 801d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d37c:	889b      	ldrh	r3, [r3, #4]
 801d37e:	b29b      	uxth	r3, r3
 801d380:	429a      	cmp	r2, r3
 801d382:	d03d      	beq.n	801d400 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d384:	2300      	movs	r3, #0
 801d386:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d388:	e03a      	b.n	801d400 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d38c:	88db      	ldrh	r3, [r3, #6]
 801d38e:	b29a      	uxth	r2, r3
 801d390:	693b      	ldr	r3, [r7, #16]
 801d392:	889b      	ldrh	r3, [r3, #4]
 801d394:	b29b      	uxth	r3, r3
 801d396:	429a      	cmp	r2, r3
 801d398:	d902      	bls.n	801d3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d39a:	f04f 33ff 	mov.w	r3, #4294967295
 801d39e:	e0c5      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	68ba      	ldr	r2, [r7, #8]
 801d3a4:	605a      	str	r2, [r3, #4]
      break;
 801d3a6:	e02b      	b.n	801d400 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3aa:	889b      	ldrh	r3, [r3, #4]
 801d3ac:	b29a      	uxth	r2, r3
 801d3ae:	693b      	ldr	r3, [r7, #16]
 801d3b0:	889b      	ldrh	r3, [r3, #4]
 801d3b2:	b29b      	uxth	r3, r3
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	d102      	bne.n	801d3be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d3b8:	f04f 33ff 	mov.w	r3, #4294967295
 801d3bc:	e0b6      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3c0:	889b      	ldrh	r3, [r3, #4]
 801d3c2:	b29a      	uxth	r2, r3
 801d3c4:	693b      	ldr	r3, [r7, #16]
 801d3c6:	88db      	ldrh	r3, [r3, #6]
 801d3c8:	b29b      	uxth	r3, r3
 801d3ca:	429a      	cmp	r2, r3
 801d3cc:	d202      	bcs.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d3ce:	f04f 33ff 	mov.w	r3, #4294967295
 801d3d2:	e0ab      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	d009      	beq.n	801d3ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3dc:	88db      	ldrh	r3, [r3, #6]
 801d3de:	b29a      	uxth	r2, r3
 801d3e0:	693b      	ldr	r3, [r7, #16]
 801d3e2:	889b      	ldrh	r3, [r3, #4]
 801d3e4:	b29b      	uxth	r3, r3
 801d3e6:	429a      	cmp	r2, r3
 801d3e8:	d001      	beq.n	801d3ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d3ee:	693b      	ldr	r3, [r7, #16]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d3f4:	693b      	ldr	r3, [r7, #16]
 801d3f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d193      	bne.n	801d326 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d3fe:	e000      	b.n	801d402 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d400:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d404:	2b00      	cmp	r3, #0
 801d406:	d12d      	bne.n	801d464 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d01c      	beq.n	801d448 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d410:	88db      	ldrh	r3, [r3, #6]
 801d412:	b29a      	uxth	r2, r3
 801d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d416:	889b      	ldrh	r3, [r3, #4]
 801d418:	b29b      	uxth	r3, r3
 801d41a:	429a      	cmp	r2, r3
 801d41c:	d906      	bls.n	801d42c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d41e:	4b45      	ldr	r3, [pc, #276]	; (801d534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d420:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d424:	4944      	ldr	r1, [pc, #272]	; (801d538 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d426:	4845      	ldr	r0, [pc, #276]	; (801d53c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d428:	f001 ff00 	bl	801f22c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d42e:	68ba      	ldr	r2, [r7, #8]
 801d430:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d434:	88db      	ldrh	r3, [r3, #6]
 801d436:	b29a      	uxth	r2, r3
 801d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d43a:	889b      	ldrh	r3, [r3, #4]
 801d43c:	b29b      	uxth	r3, r3
 801d43e:	429a      	cmp	r2, r3
 801d440:	d010      	beq.n	801d464 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d442:	2300      	movs	r3, #0
 801d444:	623b      	str	r3, [r7, #32]
 801d446:	e00d      	b.n	801d464 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	685b      	ldr	r3, [r3, #4]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d006      	beq.n	801d45e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d450:	4b38      	ldr	r3, [pc, #224]	; (801d534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d452:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d456:	493a      	ldr	r1, [pc, #232]	; (801d540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d458:	4838      	ldr	r0, [pc, #224]	; (801d53c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d45a:	f001 fee7 	bl	801f22c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	68ba      	ldr	r2, [r7, #8]
 801d462:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	2b00      	cmp	r3, #0
 801d468:	d105      	bne.n	801d476 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	7f9b      	ldrb	r3, [r3, #30]
 801d46e:	f003 0301 	and.w	r3, r3, #1
 801d472:	2b00      	cmp	r3, #0
 801d474:	d059      	beq.n	801d52a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d476:	6a3b      	ldr	r3, [r7, #32]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d04f      	beq.n	801d51c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d006      	beq.n	801d492 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d484:	68fb      	ldr	r3, [r7, #12]
 801d486:	685b      	ldr	r3, [r3, #4]
 801d488:	685b      	ldr	r3, [r3, #4]
 801d48a:	889b      	ldrh	r3, [r3, #4]
 801d48c:	b29b      	uxth	r3, r3
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d002      	beq.n	801d498 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d492:	2300      	movs	r3, #0
 801d494:	623b      	str	r3, [r7, #32]
 801d496:	e041      	b.n	801d51c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d49a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d4a2:	e012      	b.n	801d4ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4a6:	685b      	ldr	r3, [r3, #4]
 801d4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4ac:	88db      	ldrh	r3, [r3, #6]
 801d4ae:	b29a      	uxth	r2, r3
 801d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4b2:	889b      	ldrh	r3, [r3, #4]
 801d4b4:	b29b      	uxth	r3, r3
 801d4b6:	429a      	cmp	r2, r3
 801d4b8:	d002      	beq.n	801d4c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	623b      	str	r3, [r7, #32]
            break;
 801d4be:	e007      	b.n	801d4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d1e9      	bne.n	801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d4d0:	6a3b      	ldr	r3, [r7, #32]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d022      	beq.n	801d51c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	685b      	ldr	r3, [r3, #4]
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d106      	bne.n	801d4ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d4de:	4b15      	ldr	r3, [pc, #84]	; (801d534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d4e0:	f240 12df 	movw	r2, #479	; 0x1df
 801d4e4:	4917      	ldr	r1, [pc, #92]	; (801d544 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d4e6:	4815      	ldr	r0, [pc, #84]	; (801d53c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d4e8:	f001 fea0 	bl	801f22c <iprintf>
          LWIP_ASSERT("sanity check",
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	685b      	ldr	r3, [r3, #4]
 801d4f0:	685b      	ldr	r3, [r3, #4]
 801d4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4f4:	429a      	cmp	r2, r3
 801d4f6:	d106      	bne.n	801d506 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d4f8:	4b0e      	ldr	r3, [pc, #56]	; (801d534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d4fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d4fe:	4911      	ldr	r1, [pc, #68]	; (801d544 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d500:	480e      	ldr	r0, [pc, #56]	; (801d53c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d502:	f001 fe93 	bl	801f22c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d006      	beq.n	801d51c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d50e:	4b09      	ldr	r3, [pc, #36]	; (801d534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d510:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d514:	490c      	ldr	r1, [pc, #48]	; (801d548 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d516:	4809      	ldr	r0, [pc, #36]	; (801d53c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d518:	f001 fe88 	bl	801f22c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d51c:	6a3b      	ldr	r3, [r7, #32]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	bf14      	ite	ne
 801d522:	2301      	movne	r3, #1
 801d524:	2300      	moveq	r3, #0
 801d526:	b2db      	uxtb	r3, r3
 801d528:	e000      	b.n	801d52c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d52a:	2300      	movs	r3, #0
}
 801d52c:	4618      	mov	r0, r3
 801d52e:	3730      	adds	r7, #48	; 0x30
 801d530:	46bd      	mov	sp, r7
 801d532:	bd80      	pop	{r7, pc}
 801d534:	080269ec 	.word	0x080269ec
 801d538:	08026ad0 	.word	0x08026ad0
 801d53c:	08026a34 	.word	0x08026a34
 801d540:	08026af0 	.word	0x08026af0
 801d544:	08026b28 	.word	0x08026b28
 801d548:	08026b38 	.word	0x08026b38

0801d54c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b08e      	sub	sp, #56	; 0x38
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	685b      	ldr	r3, [r3, #4]
 801d558:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d55c:	781b      	ldrb	r3, [r3, #0]
 801d55e:	f003 030f 	and.w	r3, r3, #15
 801d562:	b2db      	uxtb	r3, r3
 801d564:	009b      	lsls	r3, r3, #2
 801d566:	b2db      	uxtb	r3, r3
 801d568:	2b14      	cmp	r3, #20
 801d56a:	f040 8167 	bne.w	801d83c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d570:	88db      	ldrh	r3, [r3, #6]
 801d572:	b29b      	uxth	r3, r3
 801d574:	4618      	mov	r0, r3
 801d576:	f7f5 fd25 	bl	8012fc4 <lwip_htons>
 801d57a:	4603      	mov	r3, r0
 801d57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d580:	b29b      	uxth	r3, r3
 801d582:	00db      	lsls	r3, r3, #3
 801d584:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d588:	885b      	ldrh	r3, [r3, #2]
 801d58a:	b29b      	uxth	r3, r3
 801d58c:	4618      	mov	r0, r3
 801d58e:	f7f5 fd19 	bl	8012fc4 <lwip_htons>
 801d592:	4603      	mov	r3, r0
 801d594:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d598:	781b      	ldrb	r3, [r3, #0]
 801d59a:	f003 030f 	and.w	r3, r3, #15
 801d59e:	b2db      	uxtb	r3, r3
 801d5a0:	009b      	lsls	r3, r3, #2
 801d5a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d5a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d5aa:	b29b      	uxth	r3, r3
 801d5ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d5ae:	429a      	cmp	r2, r3
 801d5b0:	f0c0 8146 	bcc.w	801d840 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d5b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d5b8:	b29b      	uxth	r3, r3
 801d5ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d5bc:	1ad3      	subs	r3, r2, r3
 801d5be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d5c0:	6878      	ldr	r0, [r7, #4]
 801d5c2:	f7f7 f8d5 	bl	8014770 <pbuf_clen>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d5ca:	4b9f      	ldr	r3, [pc, #636]	; (801d848 <ip4_reass+0x2fc>)
 801d5cc:	881b      	ldrh	r3, [r3, #0]
 801d5ce:	461a      	mov	r2, r3
 801d5d0:	8c3b      	ldrh	r3, [r7, #32]
 801d5d2:	4413      	add	r3, r2
 801d5d4:	2b0a      	cmp	r3, #10
 801d5d6:	dd10      	ble.n	801d5fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d5d8:	8c3b      	ldrh	r3, [r7, #32]
 801d5da:	4619      	mov	r1, r3
 801d5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5de:	f7ff fd81 	bl	801d0e4 <ip_reass_remove_oldest_datagram>
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	f000 812d 	beq.w	801d844 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d5ea:	4b97      	ldr	r3, [pc, #604]	; (801d848 <ip4_reass+0x2fc>)
 801d5ec:	881b      	ldrh	r3, [r3, #0]
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	8c3b      	ldrh	r3, [r7, #32]
 801d5f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d5f4:	2b0a      	cmp	r3, #10
 801d5f6:	f300 8125 	bgt.w	801d844 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d5fa:	4b94      	ldr	r3, [pc, #592]	; (801d84c <ip4_reass+0x300>)
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	633b      	str	r3, [r7, #48]	; 0x30
 801d600:	e015      	b.n	801d62e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d604:	695a      	ldr	r2, [r3, #20]
 801d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d608:	68db      	ldr	r3, [r3, #12]
 801d60a:	429a      	cmp	r2, r3
 801d60c:	d10c      	bne.n	801d628 <ip4_reass+0xdc>
 801d60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d610:	699a      	ldr	r2, [r3, #24]
 801d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d614:	691b      	ldr	r3, [r3, #16]
 801d616:	429a      	cmp	r2, r3
 801d618:	d106      	bne.n	801d628 <ip4_reass+0xdc>
 801d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d61c:	899a      	ldrh	r2, [r3, #12]
 801d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d620:	889b      	ldrh	r3, [r3, #4]
 801d622:	b29b      	uxth	r3, r3
 801d624:	429a      	cmp	r2, r3
 801d626:	d006      	beq.n	801d636 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	633b      	str	r3, [r7, #48]	; 0x30
 801d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d630:	2b00      	cmp	r3, #0
 801d632:	d1e6      	bne.n	801d602 <ip4_reass+0xb6>
 801d634:	e000      	b.n	801d638 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d636:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d109      	bne.n	801d652 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d63e:	8c3b      	ldrh	r3, [r7, #32]
 801d640:	4619      	mov	r1, r3
 801d642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d644:	f7ff fdb0 	bl	801d1a8 <ip_reass_enqueue_new_datagram>
 801d648:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d11c      	bne.n	801d68a <ip4_reass+0x13e>
      goto nullreturn;
 801d650:	e109      	b.n	801d866 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d654:	88db      	ldrh	r3, [r3, #6]
 801d656:	b29b      	uxth	r3, r3
 801d658:	4618      	mov	r0, r3
 801d65a:	f7f5 fcb3 	bl	8012fc4 <lwip_htons>
 801d65e:	4603      	mov	r3, r0
 801d660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d664:	2b00      	cmp	r3, #0
 801d666:	d110      	bne.n	801d68a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d66a:	89db      	ldrh	r3, [r3, #14]
 801d66c:	4618      	mov	r0, r3
 801d66e:	f7f5 fca9 	bl	8012fc4 <lwip_htons>
 801d672:	4603      	mov	r3, r0
 801d674:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d006      	beq.n	801d68a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d67e:	3308      	adds	r3, #8
 801d680:	2214      	movs	r2, #20
 801d682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d684:	4618      	mov	r0, r3
 801d686:	f000 fe7d 	bl	801e384 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d68c:	88db      	ldrh	r3, [r3, #6]
 801d68e:	b29b      	uxth	r3, r3
 801d690:	f003 0320 	and.w	r3, r3, #32
 801d694:	2b00      	cmp	r3, #0
 801d696:	bf0c      	ite	eq
 801d698:	2301      	moveq	r3, #1
 801d69a:	2300      	movne	r3, #0
 801d69c:	b2db      	uxtb	r3, r3
 801d69e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d6a0:	69fb      	ldr	r3, [r7, #28]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d00e      	beq.n	801d6c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d6a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d6a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d6aa:	4413      	add	r3, r2
 801d6ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d6ae:	8b7a      	ldrh	r2, [r7, #26]
 801d6b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d6b2:	429a      	cmp	r2, r3
 801d6b4:	f0c0 80a0 	bcc.w	801d7f8 <ip4_reass+0x2ac>
 801d6b8:	8b7b      	ldrh	r3, [r7, #26]
 801d6ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d6be:	4293      	cmp	r3, r2
 801d6c0:	f200 809a 	bhi.w	801d7f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d6c4:	69fa      	ldr	r2, [r7, #28]
 801d6c6:	6879      	ldr	r1, [r7, #4]
 801d6c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d6ca:	f7ff fdd5 	bl	801d278 <ip_reass_chain_frag_into_datagram_and_validate>
 801d6ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d6d0:	697b      	ldr	r3, [r7, #20]
 801d6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6d6:	f000 8091 	beq.w	801d7fc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d6da:	4b5b      	ldr	r3, [pc, #364]	; (801d848 <ip4_reass+0x2fc>)
 801d6dc:	881a      	ldrh	r2, [r3, #0]
 801d6de:	8c3b      	ldrh	r3, [r7, #32]
 801d6e0:	4413      	add	r3, r2
 801d6e2:	b29a      	uxth	r2, r3
 801d6e4:	4b58      	ldr	r3, [pc, #352]	; (801d848 <ip4_reass+0x2fc>)
 801d6e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d6e8:	69fb      	ldr	r3, [r7, #28]
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d00d      	beq.n	801d70a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d6ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d6f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d6f2:	4413      	add	r3, r2
 801d6f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6f8:	8a7a      	ldrh	r2, [r7, #18]
 801d6fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6fe:	7f9b      	ldrb	r3, [r3, #30]
 801d700:	f043 0301 	orr.w	r3, r3, #1
 801d704:	b2da      	uxtb	r2, r3
 801d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d708:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d70a:	697b      	ldr	r3, [r7, #20]
 801d70c:	2b01      	cmp	r3, #1
 801d70e:	d171      	bne.n	801d7f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d712:	8b9b      	ldrh	r3, [r3, #28]
 801d714:	3314      	adds	r3, #20
 801d716:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d71a:	685b      	ldr	r3, [r3, #4]
 801d71c:	685b      	ldr	r3, [r3, #4]
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d724:	685b      	ldr	r3, [r3, #4]
 801d726:	685b      	ldr	r3, [r3, #4]
 801d728:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d72c:	3308      	adds	r3, #8
 801d72e:	2214      	movs	r2, #20
 801d730:	4619      	mov	r1, r3
 801d732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d734:	f000 fe26 	bl	801e384 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d738:	8a3b      	ldrh	r3, [r7, #16]
 801d73a:	4618      	mov	r0, r3
 801d73c:	f7f5 fc42 	bl	8012fc4 <lwip_htons>
 801d740:	4603      	mov	r3, r0
 801d742:	461a      	mov	r2, r3
 801d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d746:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d74a:	2200      	movs	r2, #0
 801d74c:	719a      	strb	r2, [r3, #6]
 801d74e:	2200      	movs	r2, #0
 801d750:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d754:	2200      	movs	r2, #0
 801d756:	729a      	strb	r2, [r3, #10]
 801d758:	2200      	movs	r2, #0
 801d75a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d75e:	685b      	ldr	r3, [r3, #4]
 801d760:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d762:	e00d      	b.n	801d780 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d766:	685b      	ldr	r3, [r3, #4]
 801d768:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d76a:	2114      	movs	r1, #20
 801d76c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d76e:	f7f6 feeb 	bl	8014548 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d774:	6878      	ldr	r0, [r7, #4]
 801d776:	f7f7 f83b 	bl	80147f0 <pbuf_cat>
      r = iprh->next_pbuf;
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d782:	2b00      	cmp	r3, #0
 801d784:	d1ee      	bne.n	801d764 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d786:	4b31      	ldr	r3, [pc, #196]	; (801d84c <ip4_reass+0x300>)
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d78c:	429a      	cmp	r2, r3
 801d78e:	d102      	bne.n	801d796 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d790:	2300      	movs	r3, #0
 801d792:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d794:	e010      	b.n	801d7b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d796:	4b2d      	ldr	r3, [pc, #180]	; (801d84c <ip4_reass+0x300>)
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d79c:	e007      	b.n	801d7ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d006      	beq.n	801d7b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d1f4      	bne.n	801d79e <ip4_reass+0x252>
 801d7b4:	e000      	b.n	801d7b8 <ip4_reass+0x26c>
          break;
 801d7b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d7b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d7ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d7bc:	f7ff fd2e 	bl	801d21c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d7c0:	6878      	ldr	r0, [r7, #4]
 801d7c2:	f7f6 ffd5 	bl	8014770 <pbuf_clen>
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d7ca:	4b1f      	ldr	r3, [pc, #124]	; (801d848 <ip4_reass+0x2fc>)
 801d7cc:	881b      	ldrh	r3, [r3, #0]
 801d7ce:	8c3a      	ldrh	r2, [r7, #32]
 801d7d0:	429a      	cmp	r2, r3
 801d7d2:	d906      	bls.n	801d7e2 <ip4_reass+0x296>
 801d7d4:	4b1e      	ldr	r3, [pc, #120]	; (801d850 <ip4_reass+0x304>)
 801d7d6:	f240 229b 	movw	r2, #667	; 0x29b
 801d7da:	491e      	ldr	r1, [pc, #120]	; (801d854 <ip4_reass+0x308>)
 801d7dc:	481e      	ldr	r0, [pc, #120]	; (801d858 <ip4_reass+0x30c>)
 801d7de:	f001 fd25 	bl	801f22c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d7e2:	4b19      	ldr	r3, [pc, #100]	; (801d848 <ip4_reass+0x2fc>)
 801d7e4:	881a      	ldrh	r2, [r3, #0]
 801d7e6:	8c3b      	ldrh	r3, [r7, #32]
 801d7e8:	1ad3      	subs	r3, r2, r3
 801d7ea:	b29a      	uxth	r2, r3
 801d7ec:	4b16      	ldr	r3, [pc, #88]	; (801d848 <ip4_reass+0x2fc>)
 801d7ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	e03c      	b.n	801d86e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	e03a      	b.n	801d86e <ip4_reass+0x322>
      goto nullreturn_ipr;
 801d7f8:	bf00      	nop
 801d7fa:	e000      	b.n	801d7fe <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d7fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d800:	2b00      	cmp	r3, #0
 801d802:	d106      	bne.n	801d812 <ip4_reass+0x2c6>
 801d804:	4b12      	ldr	r3, [pc, #72]	; (801d850 <ip4_reass+0x304>)
 801d806:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d80a:	4914      	ldr	r1, [pc, #80]	; (801d85c <ip4_reass+0x310>)
 801d80c:	4812      	ldr	r0, [pc, #72]	; (801d858 <ip4_reass+0x30c>)
 801d80e:	f001 fd0d 	bl	801f22c <iprintf>
  if (ipr->p == NULL) {
 801d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d814:	685b      	ldr	r3, [r3, #4]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d124      	bne.n	801d864 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d81a:	4b0c      	ldr	r3, [pc, #48]	; (801d84c <ip4_reass+0x300>)
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d820:	429a      	cmp	r2, r3
 801d822:	d006      	beq.n	801d832 <ip4_reass+0x2e6>
 801d824:	4b0a      	ldr	r3, [pc, #40]	; (801d850 <ip4_reass+0x304>)
 801d826:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d82a:	490d      	ldr	r1, [pc, #52]	; (801d860 <ip4_reass+0x314>)
 801d82c:	480a      	ldr	r0, [pc, #40]	; (801d858 <ip4_reass+0x30c>)
 801d82e:	f001 fcfd 	bl	801f22c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d832:	2100      	movs	r1, #0
 801d834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d836:	f7ff fcf1 	bl	801d21c <ip_reass_dequeue_datagram>
 801d83a:	e014      	b.n	801d866 <ip4_reass+0x31a>
    goto nullreturn;
 801d83c:	bf00      	nop
 801d83e:	e012      	b.n	801d866 <ip4_reass+0x31a>
    goto nullreturn;
 801d840:	bf00      	nop
 801d842:	e010      	b.n	801d866 <ip4_reass+0x31a>
      goto nullreturn;
 801d844:	bf00      	nop
 801d846:	e00e      	b.n	801d866 <ip4_reass+0x31a>
 801d848:	20006f4c 	.word	0x20006f4c
 801d84c:	20006f48 	.word	0x20006f48
 801d850:	080269ec 	.word	0x080269ec
 801d854:	08026b5c 	.word	0x08026b5c
 801d858:	08026a34 	.word	0x08026a34
 801d85c:	08026b78 	.word	0x08026b78
 801d860:	08026b84 	.word	0x08026b84
  }

nullreturn:
 801d864:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d866:	6878      	ldr	r0, [r7, #4]
 801d868:	f7f6 fef4 	bl	8014654 <pbuf_free>
  return NULL;
 801d86c:	2300      	movs	r3, #0
}
 801d86e:	4618      	mov	r0, r3
 801d870:	3738      	adds	r7, #56	; 0x38
 801d872:	46bd      	mov	sp, r7
 801d874:	bd80      	pop	{r7, pc}
 801d876:	bf00      	nop

0801d878 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d878:	b580      	push	{r7, lr}
 801d87a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d87c:	2005      	movs	r0, #5
 801d87e:	f7f6 f857 	bl	8013930 <memp_malloc>
 801d882:	4603      	mov	r3, r0
}
 801d884:	4618      	mov	r0, r3
 801d886:	bd80      	pop	{r7, pc}

0801d888 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b082      	sub	sp, #8
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d106      	bne.n	801d8a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d896:	4b07      	ldr	r3, [pc, #28]	; (801d8b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d898:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d89c:	4906      	ldr	r1, [pc, #24]	; (801d8b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d89e:	4807      	ldr	r0, [pc, #28]	; (801d8bc <ip_frag_free_pbuf_custom_ref+0x34>)
 801d8a0:	f001 fcc4 	bl	801f22c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d8a4:	6879      	ldr	r1, [r7, #4]
 801d8a6:	2005      	movs	r0, #5
 801d8a8:	f7f6 f894 	bl	80139d4 <memp_free>
}
 801d8ac:	bf00      	nop
 801d8ae:	3708      	adds	r7, #8
 801d8b0:	46bd      	mov	sp, r7
 801d8b2:	bd80      	pop	{r7, pc}
 801d8b4:	080269ec 	.word	0x080269ec
 801d8b8:	08026ba4 	.word	0x08026ba4
 801d8bc:	08026a34 	.word	0x08026a34

0801d8c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d8c0:	b580      	push	{r7, lr}
 801d8c2:	b084      	sub	sp, #16
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d106      	bne.n	801d8e0 <ipfrag_free_pbuf_custom+0x20>
 801d8d2:	4b11      	ldr	r3, [pc, #68]	; (801d918 <ipfrag_free_pbuf_custom+0x58>)
 801d8d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d8d8:	4910      	ldr	r1, [pc, #64]	; (801d91c <ipfrag_free_pbuf_custom+0x5c>)
 801d8da:	4811      	ldr	r0, [pc, #68]	; (801d920 <ipfrag_free_pbuf_custom+0x60>)
 801d8dc:	f001 fca6 	bl	801f22c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d8e0:	68fa      	ldr	r2, [r7, #12]
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	d006      	beq.n	801d8f6 <ipfrag_free_pbuf_custom+0x36>
 801d8e8:	4b0b      	ldr	r3, [pc, #44]	; (801d918 <ipfrag_free_pbuf_custom+0x58>)
 801d8ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d8ee:	490d      	ldr	r1, [pc, #52]	; (801d924 <ipfrag_free_pbuf_custom+0x64>)
 801d8f0:	480b      	ldr	r0, [pc, #44]	; (801d920 <ipfrag_free_pbuf_custom+0x60>)
 801d8f2:	f001 fc9b 	bl	801f22c <iprintf>
  if (pcr->original != NULL) {
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	695b      	ldr	r3, [r3, #20]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d004      	beq.n	801d908 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	695b      	ldr	r3, [r3, #20]
 801d902:	4618      	mov	r0, r3
 801d904:	f7f6 fea6 	bl	8014654 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d908:	68f8      	ldr	r0, [r7, #12]
 801d90a:	f7ff ffbd 	bl	801d888 <ip_frag_free_pbuf_custom_ref>
}
 801d90e:	bf00      	nop
 801d910:	3710      	adds	r7, #16
 801d912:	46bd      	mov	sp, r7
 801d914:	bd80      	pop	{r7, pc}
 801d916:	bf00      	nop
 801d918:	080269ec 	.word	0x080269ec
 801d91c:	08026bb0 	.word	0x08026bb0
 801d920:	08026a34 	.word	0x08026a34
 801d924:	08026bbc 	.word	0x08026bbc

0801d928 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b094      	sub	sp, #80	; 0x50
 801d92c:	af02      	add	r7, sp, #8
 801d92e:	60f8      	str	r0, [r7, #12]
 801d930:	60b9      	str	r1, [r7, #8]
 801d932:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d934:	2300      	movs	r3, #0
 801d936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d93a:	68bb      	ldr	r3, [r7, #8]
 801d93c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d93e:	3b14      	subs	r3, #20
 801d940:	2b00      	cmp	r3, #0
 801d942:	da00      	bge.n	801d946 <ip4_frag+0x1e>
 801d944:	3307      	adds	r3, #7
 801d946:	10db      	asrs	r3, r3, #3
 801d948:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d94a:	2314      	movs	r3, #20
 801d94c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	685b      	ldr	r3, [r3, #4]
 801d952:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d956:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d95a:	781b      	ldrb	r3, [r3, #0]
 801d95c:	f003 030f 	and.w	r3, r3, #15
 801d960:	b2db      	uxtb	r3, r3
 801d962:	009b      	lsls	r3, r3, #2
 801d964:	b2db      	uxtb	r3, r3
 801d966:	2b14      	cmp	r3, #20
 801d968:	d002      	beq.n	801d970 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d96a:	f06f 0305 	mvn.w	r3, #5
 801d96e:	e110      	b.n	801db92 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	895b      	ldrh	r3, [r3, #10]
 801d974:	2b13      	cmp	r3, #19
 801d976:	d809      	bhi.n	801d98c <ip4_frag+0x64>
 801d978:	4b88      	ldr	r3, [pc, #544]	; (801db9c <ip4_frag+0x274>)
 801d97a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d97e:	4988      	ldr	r1, [pc, #544]	; (801dba0 <ip4_frag+0x278>)
 801d980:	4888      	ldr	r0, [pc, #544]	; (801dba4 <ip4_frag+0x27c>)
 801d982:	f001 fc53 	bl	801f22c <iprintf>
 801d986:	f06f 0305 	mvn.w	r3, #5
 801d98a:	e102      	b.n	801db92 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d98e:	88db      	ldrh	r3, [r3, #6]
 801d990:	b29b      	uxth	r3, r3
 801d992:	4618      	mov	r0, r3
 801d994:	f7f5 fb16 	bl	8012fc4 <lwip_htons>
 801d998:	4603      	mov	r3, r0
 801d99a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d99c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d99e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d9a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d9a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d9a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d9ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	891b      	ldrh	r3, [r3, #8]
 801d9b2:	3b14      	subs	r3, #20
 801d9b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d9b8:	e0e1      	b.n	801db7e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d9ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d9bc:	00db      	lsls	r3, r3, #3
 801d9be:	b29b      	uxth	r3, r3
 801d9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9c4:	4293      	cmp	r3, r2
 801d9c6:	bf28      	it	cs
 801d9c8:	4613      	movcs	r3, r2
 801d9ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d9cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d9d0:	2114      	movs	r1, #20
 801d9d2:	200e      	movs	r0, #14
 801d9d4:	f7f6 fb5a 	bl	801408c <pbuf_alloc>
 801d9d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	f000 80d5 	beq.w	801db8c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9e4:	895b      	ldrh	r3, [r3, #10]
 801d9e6:	2b13      	cmp	r3, #19
 801d9e8:	d806      	bhi.n	801d9f8 <ip4_frag+0xd0>
 801d9ea:	4b6c      	ldr	r3, [pc, #432]	; (801db9c <ip4_frag+0x274>)
 801d9ec:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d9f0:	496d      	ldr	r1, [pc, #436]	; (801dba8 <ip4_frag+0x280>)
 801d9f2:	486c      	ldr	r0, [pc, #432]	; (801dba4 <ip4_frag+0x27c>)
 801d9f4:	f001 fc1a 	bl	801f22c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9fa:	685b      	ldr	r3, [r3, #4]
 801d9fc:	2214      	movs	r2, #20
 801d9fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801da00:	4618      	mov	r0, r3
 801da02:	f000 fcbf 	bl	801e384 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da08:	685b      	ldr	r3, [r3, #4]
 801da0a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801da0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801da0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801da12:	e064      	b.n	801dade <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	895a      	ldrh	r2, [r3, #10]
 801da18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da1a:	1ad3      	subs	r3, r2, r3
 801da1c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	895b      	ldrh	r3, [r3, #10]
 801da22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801da24:	429a      	cmp	r2, r3
 801da26:	d906      	bls.n	801da36 <ip4_frag+0x10e>
 801da28:	4b5c      	ldr	r3, [pc, #368]	; (801db9c <ip4_frag+0x274>)
 801da2a:	f240 322d 	movw	r2, #813	; 0x32d
 801da2e:	495f      	ldr	r1, [pc, #380]	; (801dbac <ip4_frag+0x284>)
 801da30:	485c      	ldr	r0, [pc, #368]	; (801dba4 <ip4_frag+0x27c>)
 801da32:	f001 fbfb 	bl	801f22c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801da36:	8bfa      	ldrh	r2, [r7, #30]
 801da38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801da3c:	4293      	cmp	r3, r2
 801da3e:	bf28      	it	cs
 801da40:	4613      	movcs	r3, r2
 801da42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801da46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d105      	bne.n	801da5a <ip4_frag+0x132>
        poff = 0;
 801da4e:	2300      	movs	r3, #0
 801da50:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801da52:	68fb      	ldr	r3, [r7, #12]
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	60fb      	str	r3, [r7, #12]
        continue;
 801da58:	e041      	b.n	801dade <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801da5a:	f7ff ff0d 	bl	801d878 <ip_frag_alloc_pbuf_custom_ref>
 801da5e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801da60:	69bb      	ldr	r3, [r7, #24]
 801da62:	2b00      	cmp	r3, #0
 801da64:	d103      	bne.n	801da6e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801da66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da68:	f7f6 fdf4 	bl	8014654 <pbuf_free>
        goto memerr;
 801da6c:	e08f      	b.n	801db8e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801da6e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801da74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da76:	4413      	add	r3, r2
 801da78:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801da7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801da80:	9201      	str	r2, [sp, #4]
 801da82:	9300      	str	r3, [sp, #0]
 801da84:	4603      	mov	r3, r0
 801da86:	2241      	movs	r2, #65	; 0x41
 801da88:	2000      	movs	r0, #0
 801da8a:	f7f6 fc29 	bl	80142e0 <pbuf_alloced_custom>
 801da8e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801da90:	697b      	ldr	r3, [r7, #20]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d106      	bne.n	801daa4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801da96:	69b8      	ldr	r0, [r7, #24]
 801da98:	f7ff fef6 	bl	801d888 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801da9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da9e:	f7f6 fdd9 	bl	8014654 <pbuf_free>
        goto memerr;
 801daa2:	e074      	b.n	801db8e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801daa4:	68f8      	ldr	r0, [r7, #12]
 801daa6:	f7f6 fe7b 	bl	80147a0 <pbuf_ref>
      pcr->original = p;
 801daaa:	69bb      	ldr	r3, [r7, #24]
 801daac:	68fa      	ldr	r2, [r7, #12]
 801daae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801dab0:	69bb      	ldr	r3, [r7, #24]
 801dab2:	4a3f      	ldr	r2, [pc, #252]	; (801dbb0 <ip4_frag+0x288>)
 801dab4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801dab6:	6979      	ldr	r1, [r7, #20]
 801dab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801daba:	f7f6 fe99 	bl	80147f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801dabe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801dac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dac6:	1ad3      	subs	r3, r2, r3
 801dac8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801dacc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d004      	beq.n	801dade <ip4_frag+0x1b6>
        poff = 0;
 801dad4:	2300      	movs	r3, #0
 801dad6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801dade:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d196      	bne.n	801da14 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801dae6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dae8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801daec:	4413      	add	r3, r2
 801daee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801daf0:	68bb      	ldr	r3, [r7, #8]
 801daf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801daf4:	f1a3 0213 	sub.w	r2, r3, #19
 801daf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dafc:	429a      	cmp	r2, r3
 801dafe:	bfcc      	ite	gt
 801db00:	2301      	movgt	r3, #1
 801db02:	2300      	movle	r3, #0
 801db04:	b2db      	uxtb	r3, r3
 801db06:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801db08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801db0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db10:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801db12:	6a3b      	ldr	r3, [r7, #32]
 801db14:	2b00      	cmp	r3, #0
 801db16:	d002      	beq.n	801db1e <ip4_frag+0x1f6>
 801db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d003      	beq.n	801db26 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801db1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801db20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801db24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801db26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801db28:	4618      	mov	r0, r3
 801db2a:	f7f5 fa4b 	bl	8012fc4 <lwip_htons>
 801db2e:	4603      	mov	r3, r0
 801db30:	461a      	mov	r2, r3
 801db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db34:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801db36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801db38:	3314      	adds	r3, #20
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7f5 fa41 	bl	8012fc4 <lwip_htons>
 801db42:	4603      	mov	r3, r0
 801db44:	461a      	mov	r2, r3
 801db46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db48:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db4c:	2200      	movs	r2, #0
 801db4e:	729a      	strb	r2, [r3, #10]
 801db50:	2200      	movs	r2, #0
 801db52:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801db54:	68bb      	ldr	r3, [r7, #8]
 801db56:	695b      	ldr	r3, [r3, #20]
 801db58:	687a      	ldr	r2, [r7, #4]
 801db5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801db5c:	68b8      	ldr	r0, [r7, #8]
 801db5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801db60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db62:	f7f6 fd77 	bl	8014654 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801db66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801db6c:	1ad3      	subs	r3, r2, r3
 801db6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801db72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801db76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db78:	4413      	add	r3, r2
 801db7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801db7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db82:	2b00      	cmp	r3, #0
 801db84:	f47f af19 	bne.w	801d9ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801db88:	2300      	movs	r3, #0
 801db8a:	e002      	b.n	801db92 <ip4_frag+0x26a>
      goto memerr;
 801db8c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801db8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801db92:	4618      	mov	r0, r3
 801db94:	3748      	adds	r7, #72	; 0x48
 801db96:	46bd      	mov	sp, r7
 801db98:	bd80      	pop	{r7, pc}
 801db9a:	bf00      	nop
 801db9c:	080269ec 	.word	0x080269ec
 801dba0:	08026bc8 	.word	0x08026bc8
 801dba4:	08026a34 	.word	0x08026a34
 801dba8:	08026be4 	.word	0x08026be4
 801dbac:	08026c04 	.word	0x08026c04
 801dbb0:	0801d8c1 	.word	0x0801d8c1

0801dbb4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801dbb4:	b580      	push	{r7, lr}
 801dbb6:	b086      	sub	sp, #24
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	6078      	str	r0, [r7, #4]
 801dbbc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801dbbe:	230e      	movs	r3, #14
 801dbc0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	895b      	ldrh	r3, [r3, #10]
 801dbc6:	2b0e      	cmp	r3, #14
 801dbc8:	d96e      	bls.n	801dca8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	7bdb      	ldrb	r3, [r3, #15]
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d106      	bne.n	801dbe0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dbd2:	683b      	ldr	r3, [r7, #0]
 801dbd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dbd8:	3301      	adds	r3, #1
 801dbda:	b2da      	uxtb	r2, r3
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	685b      	ldr	r3, [r3, #4]
 801dbe4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dbe6:	693b      	ldr	r3, [r7, #16]
 801dbe8:	7b1a      	ldrb	r2, [r3, #12]
 801dbea:	7b5b      	ldrb	r3, [r3, #13]
 801dbec:	021b      	lsls	r3, r3, #8
 801dbee:	4313      	orrs	r3, r2
 801dbf0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dbf2:	693b      	ldr	r3, [r7, #16]
 801dbf4:	781b      	ldrb	r3, [r3, #0]
 801dbf6:	f003 0301 	and.w	r3, r3, #1
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d023      	beq.n	801dc46 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dbfe:	693b      	ldr	r3, [r7, #16]
 801dc00:	781b      	ldrb	r3, [r3, #0]
 801dc02:	2b01      	cmp	r3, #1
 801dc04:	d10f      	bne.n	801dc26 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dc06:	693b      	ldr	r3, [r7, #16]
 801dc08:	785b      	ldrb	r3, [r3, #1]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	d11b      	bne.n	801dc46 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dc0e:	693b      	ldr	r3, [r7, #16]
 801dc10:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dc12:	2b5e      	cmp	r3, #94	; 0x5e
 801dc14:	d117      	bne.n	801dc46 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	7b5b      	ldrb	r3, [r3, #13]
 801dc1a:	f043 0310 	orr.w	r3, r3, #16
 801dc1e:	b2da      	uxtb	r2, r3
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	735a      	strb	r2, [r3, #13]
 801dc24:	e00f      	b.n	801dc46 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dc26:	693b      	ldr	r3, [r7, #16]
 801dc28:	2206      	movs	r2, #6
 801dc2a:	4928      	ldr	r1, [pc, #160]	; (801dccc <ethernet_input+0x118>)
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	f000 fb9b 	bl	801e368 <memcmp>
 801dc32:	4603      	mov	r3, r0
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d106      	bne.n	801dc46 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	7b5b      	ldrb	r3, [r3, #13]
 801dc3c:	f043 0308 	orr.w	r3, r3, #8
 801dc40:	b2da      	uxtb	r2, r3
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dc46:	89fb      	ldrh	r3, [r7, #14]
 801dc48:	2b08      	cmp	r3, #8
 801dc4a:	d003      	beq.n	801dc54 <ethernet_input+0xa0>
 801dc4c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801dc50:	d014      	beq.n	801dc7c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dc52:	e032      	b.n	801dcba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc54:	683b      	ldr	r3, [r7, #0]
 801dc56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dc5a:	f003 0308 	and.w	r3, r3, #8
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d024      	beq.n	801dcac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc62:	8afb      	ldrh	r3, [r7, #22]
 801dc64:	4619      	mov	r1, r3
 801dc66:	6878      	ldr	r0, [r7, #4]
 801dc68:	f7f6 fc6e 	bl	8014548 <pbuf_remove_header>
 801dc6c:	4603      	mov	r3, r0
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d11e      	bne.n	801dcb0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dc72:	6839      	ldr	r1, [r7, #0]
 801dc74:	6878      	ldr	r0, [r7, #4]
 801dc76:	f7fe ff27 	bl	801cac8 <ip4_input>
      break;
 801dc7a:	e013      	b.n	801dca4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc7c:	683b      	ldr	r3, [r7, #0]
 801dc7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dc82:	f003 0308 	and.w	r3, r3, #8
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d014      	beq.n	801dcb4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc8a:	8afb      	ldrh	r3, [r7, #22]
 801dc8c:	4619      	mov	r1, r3
 801dc8e:	6878      	ldr	r0, [r7, #4]
 801dc90:	f7f6 fc5a 	bl	8014548 <pbuf_remove_header>
 801dc94:	4603      	mov	r3, r0
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d10e      	bne.n	801dcb8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801dc9a:	6839      	ldr	r1, [r7, #0]
 801dc9c:	6878      	ldr	r0, [r7, #4]
 801dc9e:	f7fe f8c7 	bl	801be30 <etharp_input>
      break;
 801dca2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801dca4:	2300      	movs	r3, #0
 801dca6:	e00c      	b.n	801dcc2 <ethernet_input+0x10e>
    goto free_and_return;
 801dca8:	bf00      	nop
 801dcaa:	e006      	b.n	801dcba <ethernet_input+0x106>
        goto free_and_return;
 801dcac:	bf00      	nop
 801dcae:	e004      	b.n	801dcba <ethernet_input+0x106>
        goto free_and_return;
 801dcb0:	bf00      	nop
 801dcb2:	e002      	b.n	801dcba <ethernet_input+0x106>
        goto free_and_return;
 801dcb4:	bf00      	nop
 801dcb6:	e000      	b.n	801dcba <ethernet_input+0x106>
        goto free_and_return;
 801dcb8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801dcba:	6878      	ldr	r0, [r7, #4]
 801dcbc:	f7f6 fcca 	bl	8014654 <pbuf_free>
  return ERR_OK;
 801dcc0:	2300      	movs	r3, #0
}
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	3718      	adds	r7, #24
 801dcc6:	46bd      	mov	sp, r7
 801dcc8:	bd80      	pop	{r7, pc}
 801dcca:	bf00      	nop
 801dccc:	08026fa4 	.word	0x08026fa4

0801dcd0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b086      	sub	sp, #24
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	60f8      	str	r0, [r7, #12]
 801dcd8:	60b9      	str	r1, [r7, #8]
 801dcda:	607a      	str	r2, [r7, #4]
 801dcdc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dcde:	8c3b      	ldrh	r3, [r7, #32]
 801dce0:	4618      	mov	r0, r3
 801dce2:	f7f5 f96f 	bl	8012fc4 <lwip_htons>
 801dce6:	4603      	mov	r3, r0
 801dce8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dcea:	210e      	movs	r1, #14
 801dcec:	68b8      	ldr	r0, [r7, #8]
 801dcee:	f7f6 fc1b 	bl	8014528 <pbuf_add_header>
 801dcf2:	4603      	mov	r3, r0
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d125      	bne.n	801dd44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dcf8:	68bb      	ldr	r3, [r7, #8]
 801dcfa:	685b      	ldr	r3, [r3, #4]
 801dcfc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801dcfe:	693b      	ldr	r3, [r7, #16]
 801dd00:	8afa      	ldrh	r2, [r7, #22]
 801dd02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801dd04:	693b      	ldr	r3, [r7, #16]
 801dd06:	2206      	movs	r2, #6
 801dd08:	6839      	ldr	r1, [r7, #0]
 801dd0a:	4618      	mov	r0, r3
 801dd0c:	f000 fb3a 	bl	801e384 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801dd10:	693b      	ldr	r3, [r7, #16]
 801dd12:	3306      	adds	r3, #6
 801dd14:	2206      	movs	r2, #6
 801dd16:	6879      	ldr	r1, [r7, #4]
 801dd18:	4618      	mov	r0, r3
 801dd1a:	f000 fb33 	bl	801e384 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801dd24:	2b06      	cmp	r3, #6
 801dd26:	d006      	beq.n	801dd36 <ethernet_output+0x66>
 801dd28:	4b0a      	ldr	r3, [pc, #40]	; (801dd54 <ethernet_output+0x84>)
 801dd2a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801dd2e:	490a      	ldr	r1, [pc, #40]	; (801dd58 <ethernet_output+0x88>)
 801dd30:	480a      	ldr	r0, [pc, #40]	; (801dd5c <ethernet_output+0x8c>)
 801dd32:	f001 fa7b 	bl	801f22c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	699b      	ldr	r3, [r3, #24]
 801dd3a:	68b9      	ldr	r1, [r7, #8]
 801dd3c:	68f8      	ldr	r0, [r7, #12]
 801dd3e:	4798      	blx	r3
 801dd40:	4603      	mov	r3, r0
 801dd42:	e002      	b.n	801dd4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801dd44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801dd46:	f06f 0301 	mvn.w	r3, #1
}
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	3718      	adds	r7, #24
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	bd80      	pop	{r7, pc}
 801dd52:	bf00      	nop
 801dd54:	08026c14 	.word	0x08026c14
 801dd58:	08026c4c 	.word	0x08026c4c
 801dd5c:	08026c80 	.word	0x08026c80

0801dd60 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801dd60:	b580      	push	{r7, lr}
 801dd62:	b086      	sub	sp, #24
 801dd64:	af00      	add	r7, sp, #0
 801dd66:	6078      	str	r0, [r7, #4]
 801dd68:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801dd6a:	683b      	ldr	r3, [r7, #0]
 801dd6c:	60bb      	str	r3, [r7, #8]
 801dd6e:	2304      	movs	r3, #4
 801dd70:	60fb      	str	r3, [r7, #12]
 801dd72:	2300      	movs	r3, #0
 801dd74:	613b      	str	r3, [r7, #16]
 801dd76:	2300      	movs	r3, #0
 801dd78:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801dd7a:	f107 0308 	add.w	r3, r7, #8
 801dd7e:	2100      	movs	r1, #0
 801dd80:	4618      	mov	r0, r3
 801dd82:	f7f0 f98c 	bl	800e09e <osMessageCreate>
 801dd86:	4602      	mov	r2, r0
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d102      	bne.n	801dd9a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801dd94:	f04f 33ff 	mov.w	r3, #4294967295
 801dd98:	e000      	b.n	801dd9c <sys_mbox_new+0x3c>

  return ERR_OK;
 801dd9a:	2300      	movs	r3, #0
}
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	3718      	adds	r7, #24
 801dda0:	46bd      	mov	sp, r7
 801dda2:	bd80      	pop	{r7, pc}

0801dda4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801dda4:	b580      	push	{r7, lr}
 801dda6:	b082      	sub	sp, #8
 801dda8:	af00      	add	r7, sp, #0
 801ddaa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f7f0 fb86 	bl	800e4c2 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7f0 fb97 	bl	800e4ee <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ddc0:	bf00      	nop
 801ddc2:	3708      	adds	r7, #8
 801ddc4:	46bd      	mov	sp, r7
 801ddc6:	bd80      	pop	{r7, pc}

0801ddc8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ddc8:	b580      	push	{r7, lr}
 801ddca:	b084      	sub	sp, #16
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	6078      	str	r0, [r7, #4]
 801ddd0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	6839      	ldr	r1, [r7, #0]
 801ddd8:	2200      	movs	r2, #0
 801ddda:	4618      	mov	r0, r3
 801dddc:	f7f0 f988 	bl	800e0f0 <osMessagePut>
 801dde0:	4603      	mov	r3, r0
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d102      	bne.n	801ddec <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801dde6:	2300      	movs	r3, #0
 801dde8:	73fb      	strb	r3, [r7, #15]
 801ddea:	e001      	b.n	801ddf0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ddec:	23ff      	movs	r3, #255	; 0xff
 801ddee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ddf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	3710      	adds	r7, #16
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	bd80      	pop	{r7, pc}

0801ddfc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b08c      	sub	sp, #48	; 0x30
 801de00:	af00      	add	r7, sp, #0
 801de02:	61f8      	str	r0, [r7, #28]
 801de04:	61b9      	str	r1, [r7, #24]
 801de06:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801de08:	f7ef fe73 	bl	800daf2 <osKernelSysTick>
 801de0c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801de0e:	697b      	ldr	r3, [r7, #20]
 801de10:	2b00      	cmp	r3, #0
 801de12:	d017      	beq.n	801de44 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801de14:	69fb      	ldr	r3, [r7, #28]
 801de16:	6819      	ldr	r1, [r3, #0]
 801de18:	f107 0320 	add.w	r3, r7, #32
 801de1c:	697a      	ldr	r2, [r7, #20]
 801de1e:	4618      	mov	r0, r3
 801de20:	f7f0 f9a6 	bl	800e170 <osMessageGet>

    if(event.status == osEventMessage)
 801de24:	6a3b      	ldr	r3, [r7, #32]
 801de26:	2b10      	cmp	r3, #16
 801de28:	d109      	bne.n	801de3e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de2c:	461a      	mov	r2, r3
 801de2e:	69bb      	ldr	r3, [r7, #24]
 801de30:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801de32:	f7ef fe5e 	bl	800daf2 <osKernelSysTick>
 801de36:	4602      	mov	r2, r0
 801de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de3a:	1ad3      	subs	r3, r2, r3
 801de3c:	e019      	b.n	801de72 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801de3e:	f04f 33ff 	mov.w	r3, #4294967295
 801de42:	e016      	b.n	801de72 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801de44:	69fb      	ldr	r3, [r7, #28]
 801de46:	6819      	ldr	r1, [r3, #0]
 801de48:	463b      	mov	r3, r7
 801de4a:	f04f 32ff 	mov.w	r2, #4294967295
 801de4e:	4618      	mov	r0, r3
 801de50:	f7f0 f98e 	bl	800e170 <osMessageGet>
 801de54:	f107 0320 	add.w	r3, r7, #32
 801de58:	463a      	mov	r2, r7
 801de5a:	ca07      	ldmia	r2, {r0, r1, r2}
 801de5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de62:	461a      	mov	r2, r3
 801de64:	69bb      	ldr	r3, [r7, #24]
 801de66:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801de68:	f7ef fe43 	bl	800daf2 <osKernelSysTick>
 801de6c:	4602      	mov	r2, r0
 801de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de70:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801de72:	4618      	mov	r0, r3
 801de74:	3730      	adds	r7, #48	; 0x30
 801de76:	46bd      	mov	sp, r7
 801de78:	bd80      	pop	{r7, pc}

0801de7a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801de7a:	b580      	push	{r7, lr}
 801de7c:	b086      	sub	sp, #24
 801de7e:	af00      	add	r7, sp, #0
 801de80:	6078      	str	r0, [r7, #4]
 801de82:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	6819      	ldr	r1, [r3, #0]
 801de88:	f107 030c 	add.w	r3, r7, #12
 801de8c:	2200      	movs	r2, #0
 801de8e:	4618      	mov	r0, r3
 801de90:	f7f0 f96e 	bl	800e170 <osMessageGet>

  if(event.status == osEventMessage)
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	2b10      	cmp	r3, #16
 801de98:	d105      	bne.n	801dea6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801de9a:	693b      	ldr	r3, [r7, #16]
 801de9c:	461a      	mov	r2, r3
 801de9e:	683b      	ldr	r3, [r7, #0]
 801dea0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801dea2:	2300      	movs	r3, #0
 801dea4:	e001      	b.n	801deaa <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801dea6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801deaa:	4618      	mov	r0, r3
 801deac:	3718      	adds	r7, #24
 801deae:	46bd      	mov	sp, r7
 801deb0:	bd80      	pop	{r7, pc}

0801deb2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801deb2:	b480      	push	{r7}
 801deb4:	b083      	sub	sp, #12
 801deb6:	af00      	add	r7, sp, #0
 801deb8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d101      	bne.n	801dec6 <sys_mbox_valid+0x14>
    return 0;
 801dec2:	2300      	movs	r3, #0
 801dec4:	e000      	b.n	801dec8 <sys_mbox_valid+0x16>
  else
    return 1;
 801dec6:	2301      	movs	r3, #1
}
 801dec8:	4618      	mov	r0, r3
 801deca:	370c      	adds	r7, #12
 801decc:	46bd      	mov	sp, r7
 801dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ded2:	4770      	bx	lr

0801ded4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ded4:	b480      	push	{r7}
 801ded6:	b083      	sub	sp, #12
 801ded8:	af00      	add	r7, sp, #0
 801deda:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	2200      	movs	r2, #0
 801dee0:	601a      	str	r2, [r3, #0]
}
 801dee2:	bf00      	nop
 801dee4:	370c      	adds	r7, #12
 801dee6:	46bd      	mov	sp, r7
 801dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deec:	4770      	bx	lr

0801deee <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801deee:	b580      	push	{r7, lr}
 801def0:	b084      	sub	sp, #16
 801def2:	af00      	add	r7, sp, #0
 801def4:	6078      	str	r0, [r7, #4]
 801def6:	460b      	mov	r3, r1
 801def8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801defa:	2300      	movs	r3, #0
 801defc:	60bb      	str	r3, [r7, #8]
 801defe:	2300      	movs	r3, #0
 801df00:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801df02:	f107 0308 	add.w	r3, r7, #8
 801df06:	2101      	movs	r1, #1
 801df08:	4618      	mov	r0, r3
 801df0a:	f7ef feff 	bl	800dd0c <osSemaphoreCreate>
 801df0e:	4602      	mov	r2, r0
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d102      	bne.n	801df22 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801df1c:	f04f 33ff 	mov.w	r3, #4294967295
 801df20:	e009      	b.n	801df36 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801df22:	78fb      	ldrb	r3, [r7, #3]
 801df24:	2b00      	cmp	r3, #0
 801df26:	d105      	bne.n	801df34 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	2100      	movs	r1, #0
 801df2e:	4618      	mov	r0, r3
 801df30:	f7ef ff1e 	bl	800dd70 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801df34:	2300      	movs	r3, #0
}
 801df36:	4618      	mov	r0, r3
 801df38:	3710      	adds	r7, #16
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}

0801df3e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801df3e:	b580      	push	{r7, lr}
 801df40:	b084      	sub	sp, #16
 801df42:	af00      	add	r7, sp, #0
 801df44:	6078      	str	r0, [r7, #4]
 801df46:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801df48:	f7ef fdd3 	bl	800daf2 <osKernelSysTick>
 801df4c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801df4e:	683b      	ldr	r3, [r7, #0]
 801df50:	2b00      	cmp	r3, #0
 801df52:	d011      	beq.n	801df78 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	6839      	ldr	r1, [r7, #0]
 801df5a:	4618      	mov	r0, r3
 801df5c:	f7ef ff08 	bl	800dd70 <osSemaphoreWait>
 801df60:	4603      	mov	r3, r0
 801df62:	2b00      	cmp	r3, #0
 801df64:	d105      	bne.n	801df72 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801df66:	f7ef fdc4 	bl	800daf2 <osKernelSysTick>
 801df6a:	4602      	mov	r2, r0
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	1ad3      	subs	r3, r2, r3
 801df70:	e012      	b.n	801df98 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801df72:	f04f 33ff 	mov.w	r3, #4294967295
 801df76:	e00f      	b.n	801df98 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801df78:	bf00      	nop
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	f04f 31ff 	mov.w	r1, #4294967295
 801df82:	4618      	mov	r0, r3
 801df84:	f7ef fef4 	bl	800dd70 <osSemaphoreWait>
 801df88:	4603      	mov	r3, r0
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d1f5      	bne.n	801df7a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801df8e:	f7ef fdb0 	bl	800daf2 <osKernelSysTick>
 801df92:	4602      	mov	r2, r0
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801df98:	4618      	mov	r0, r3
 801df9a:	3710      	adds	r7, #16
 801df9c:	46bd      	mov	sp, r7
 801df9e:	bd80      	pop	{r7, pc}

0801dfa0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b082      	sub	sp, #8
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	4618      	mov	r0, r3
 801dfae:	f7ef ff2d 	bl	800de0c <osSemaphoreRelease>
}
 801dfb2:	bf00      	nop
 801dfb4:	3708      	adds	r7, #8
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	bd80      	pop	{r7, pc}

0801dfba <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801dfba:	b580      	push	{r7, lr}
 801dfbc:	b082      	sub	sp, #8
 801dfbe:	af00      	add	r7, sp, #0
 801dfc0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	f7ef ff56 	bl	800de78 <osSemaphoreDelete>
}
 801dfcc:	bf00      	nop
 801dfce:	3708      	adds	r7, #8
 801dfd0:	46bd      	mov	sp, r7
 801dfd2:	bd80      	pop	{r7, pc}

0801dfd4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dfd4:	b480      	push	{r7}
 801dfd6:	b083      	sub	sp, #12
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d101      	bne.n	801dfe8 <sys_sem_valid+0x14>
    return 0;
 801dfe4:	2300      	movs	r3, #0
 801dfe6:	e000      	b.n	801dfea <sys_sem_valid+0x16>
  else
    return 1;
 801dfe8:	2301      	movs	r3, #1
}
 801dfea:	4618      	mov	r0, r3
 801dfec:	370c      	adds	r7, #12
 801dfee:	46bd      	mov	sp, r7
 801dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff4:	4770      	bx	lr

0801dff6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dff6:	b480      	push	{r7}
 801dff8:	b083      	sub	sp, #12
 801dffa:	af00      	add	r7, sp, #0
 801dffc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	2200      	movs	r2, #0
 801e002:	601a      	str	r2, [r3, #0]
}
 801e004:	bf00      	nop
 801e006:	370c      	adds	r7, #12
 801e008:	46bd      	mov	sp, r7
 801e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e00e:	4770      	bx	lr

0801e010 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801e014:	4803      	ldr	r0, [pc, #12]	; (801e024 <sys_init+0x14>)
 801e016:	f7ef fddc 	bl	800dbd2 <osMutexCreate>
 801e01a:	4603      	mov	r3, r0
 801e01c:	4a02      	ldr	r2, [pc, #8]	; (801e028 <sys_init+0x18>)
 801e01e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e020:	bf00      	nop
 801e022:	bd80      	pop	{r7, pc}
 801e024:	08026fb4 	.word	0x08026fb4
 801e028:	2000e18c 	.word	0x2000e18c

0801e02c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e02c:	b580      	push	{r7, lr}
 801e02e:	b084      	sub	sp, #16
 801e030:	af00      	add	r7, sp, #0
 801e032:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e034:	2300      	movs	r3, #0
 801e036:	60bb      	str	r3, [r7, #8]
 801e038:	2300      	movs	r3, #0
 801e03a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e03c:	f107 0308 	add.w	r3, r7, #8
 801e040:	4618      	mov	r0, r3
 801e042:	f7ef fdc6 	bl	800dbd2 <osMutexCreate>
 801e046:	4602      	mov	r2, r0
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	2b00      	cmp	r3, #0
 801e052:	d102      	bne.n	801e05a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e054:	f04f 33ff 	mov.w	r3, #4294967295
 801e058:	e000      	b.n	801e05c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e05a:	2300      	movs	r3, #0
}
 801e05c:	4618      	mov	r0, r3
 801e05e:	3710      	adds	r7, #16
 801e060:	46bd      	mov	sp, r7
 801e062:	bd80      	pop	{r7, pc}

0801e064 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e064:	b580      	push	{r7, lr}
 801e066:	b082      	sub	sp, #8
 801e068:	af00      	add	r7, sp, #0
 801e06a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	f04f 31ff 	mov.w	r1, #4294967295
 801e074:	4618      	mov	r0, r3
 801e076:	f7ef fdc5 	bl	800dc04 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e07a:	bf00      	nop
 801e07c:	3708      	adds	r7, #8
 801e07e:	46bd      	mov	sp, r7
 801e080:	bd80      	pop	{r7, pc}

0801e082 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e082:	b580      	push	{r7, lr}
 801e084:	b082      	sub	sp, #8
 801e086:	af00      	add	r7, sp, #0
 801e088:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	4618      	mov	r0, r3
 801e090:	f7ef fe06 	bl	800dca0 <osMutexRelease>
}
 801e094:	bf00      	nop
 801e096:	3708      	adds	r7, #8
 801e098:	46bd      	mov	sp, r7
 801e09a:	bd80      	pop	{r7, pc}

0801e09c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b08c      	sub	sp, #48	; 0x30
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	60f8      	str	r0, [r7, #12]
 801e0a4:	60b9      	str	r1, [r7, #8]
 801e0a6:	607a      	str	r2, [r7, #4]
 801e0a8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e0aa:	f107 0314 	add.w	r3, r7, #20
 801e0ae:	2200      	movs	r2, #0
 801e0b0:	601a      	str	r2, [r3, #0]
 801e0b2:	605a      	str	r2, [r3, #4]
 801e0b4:	609a      	str	r2, [r3, #8]
 801e0b6:	60da      	str	r2, [r3, #12]
 801e0b8:	611a      	str	r2, [r3, #16]
 801e0ba:	615a      	str	r2, [r3, #20]
 801e0bc:	619a      	str	r2, [r3, #24]
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	617b      	str	r3, [r7, #20]
 801e0c2:	68bb      	ldr	r3, [r7, #8]
 801e0c4:	61bb      	str	r3, [r7, #24]
 801e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0c8:	b21b      	sxth	r3, r3
 801e0ca:	83bb      	strh	r3, [r7, #28]
 801e0cc:	683b      	ldr	r3, [r7, #0]
 801e0ce:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e0d0:	f107 0314 	add.w	r3, r7, #20
 801e0d4:	6879      	ldr	r1, [r7, #4]
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f7ef fd1b 	bl	800db12 <osThreadCreate>
 801e0dc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e0de:	4618      	mov	r0, r3
 801e0e0:	3730      	adds	r7, #48	; 0x30
 801e0e2:	46bd      	mov	sp, r7
 801e0e4:	bd80      	pop	{r7, pc}
	...

0801e0e8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e0ec:	4b04      	ldr	r3, [pc, #16]	; (801e100 <sys_arch_protect+0x18>)
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	f04f 31ff 	mov.w	r1, #4294967295
 801e0f4:	4618      	mov	r0, r3
 801e0f6:	f7ef fd85 	bl	800dc04 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e0fa:	2301      	movs	r3, #1
}
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	bd80      	pop	{r7, pc}
 801e100:	2000e18c 	.word	0x2000e18c

0801e104 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b082      	sub	sp, #8
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e10c:	4b04      	ldr	r3, [pc, #16]	; (801e120 <sys_arch_unprotect+0x1c>)
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	4618      	mov	r0, r3
 801e112:	f7ef fdc5 	bl	800dca0 <osMutexRelease>
}
 801e116:	bf00      	nop
 801e118:	3708      	adds	r7, #8
 801e11a:	46bd      	mov	sp, r7
 801e11c:	bd80      	pop	{r7, pc}
 801e11e:	bf00      	nop
 801e120:	2000e18c 	.word	0x2000e18c

0801e124 <std>:
 801e124:	2300      	movs	r3, #0
 801e126:	b510      	push	{r4, lr}
 801e128:	4604      	mov	r4, r0
 801e12a:	e9c0 3300 	strd	r3, r3, [r0]
 801e12e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e132:	6083      	str	r3, [r0, #8]
 801e134:	8181      	strh	r1, [r0, #12]
 801e136:	6643      	str	r3, [r0, #100]	; 0x64
 801e138:	81c2      	strh	r2, [r0, #14]
 801e13a:	6183      	str	r3, [r0, #24]
 801e13c:	4619      	mov	r1, r3
 801e13e:	2208      	movs	r2, #8
 801e140:	305c      	adds	r0, #92	; 0x5c
 801e142:	f000 f947 	bl	801e3d4 <memset>
 801e146:	4b05      	ldr	r3, [pc, #20]	; (801e15c <std+0x38>)
 801e148:	6263      	str	r3, [r4, #36]	; 0x24
 801e14a:	4b05      	ldr	r3, [pc, #20]	; (801e160 <std+0x3c>)
 801e14c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e14e:	4b05      	ldr	r3, [pc, #20]	; (801e164 <std+0x40>)
 801e150:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e152:	4b05      	ldr	r3, [pc, #20]	; (801e168 <std+0x44>)
 801e154:	6224      	str	r4, [r4, #32]
 801e156:	6323      	str	r3, [r4, #48]	; 0x30
 801e158:	bd10      	pop	{r4, pc}
 801e15a:	bf00      	nop
 801e15c:	0801f475 	.word	0x0801f475
 801e160:	0801f49b 	.word	0x0801f49b
 801e164:	0801f4d3 	.word	0x0801f4d3
 801e168:	0801f4f7 	.word	0x0801f4f7

0801e16c <_cleanup_r>:
 801e16c:	4901      	ldr	r1, [pc, #4]	; (801e174 <_cleanup_r+0x8>)
 801e16e:	f000 b8af 	b.w	801e2d0 <_fwalk_reent>
 801e172:	bf00      	nop
 801e174:	08021159 	.word	0x08021159

0801e178 <__sfmoreglue>:
 801e178:	b570      	push	{r4, r5, r6, lr}
 801e17a:	1e4a      	subs	r2, r1, #1
 801e17c:	2568      	movs	r5, #104	; 0x68
 801e17e:	4355      	muls	r5, r2
 801e180:	460e      	mov	r6, r1
 801e182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e186:	f000 f97d 	bl	801e484 <_malloc_r>
 801e18a:	4604      	mov	r4, r0
 801e18c:	b140      	cbz	r0, 801e1a0 <__sfmoreglue+0x28>
 801e18e:	2100      	movs	r1, #0
 801e190:	e9c0 1600 	strd	r1, r6, [r0]
 801e194:	300c      	adds	r0, #12
 801e196:	60a0      	str	r0, [r4, #8]
 801e198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e19c:	f000 f91a 	bl	801e3d4 <memset>
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	bd70      	pop	{r4, r5, r6, pc}

0801e1a4 <__sfp_lock_acquire>:
 801e1a4:	4801      	ldr	r0, [pc, #4]	; (801e1ac <__sfp_lock_acquire+0x8>)
 801e1a6:	f7e8 beeb 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 801e1aa:	bf00      	nop
 801e1ac:	2000093c 	.word	0x2000093c

0801e1b0 <__sfp_lock_release>:
 801e1b0:	4801      	ldr	r0, [pc, #4]	; (801e1b8 <__sfp_lock_release+0x8>)
 801e1b2:	f7e8 bef9 	b.w	8006fa8 <__retarget_lock_release_recursive>
 801e1b6:	bf00      	nop
 801e1b8:	2000093c 	.word	0x2000093c

0801e1bc <__sinit_lock_acquire>:
 801e1bc:	4801      	ldr	r0, [pc, #4]	; (801e1c4 <__sinit_lock_acquire+0x8>)
 801e1be:	f7e8 bedf 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 801e1c2:	bf00      	nop
 801e1c4:	20000930 	.word	0x20000930

0801e1c8 <__sinit_lock_release>:
 801e1c8:	4801      	ldr	r0, [pc, #4]	; (801e1d0 <__sinit_lock_release+0x8>)
 801e1ca:	f7e8 beed 	b.w	8006fa8 <__retarget_lock_release_recursive>
 801e1ce:	bf00      	nop
 801e1d0:	20000930 	.word	0x20000930

0801e1d4 <__sinit>:
 801e1d4:	b510      	push	{r4, lr}
 801e1d6:	4604      	mov	r4, r0
 801e1d8:	f7ff fff0 	bl	801e1bc <__sinit_lock_acquire>
 801e1dc:	69a3      	ldr	r3, [r4, #24]
 801e1de:	b11b      	cbz	r3, 801e1e8 <__sinit+0x14>
 801e1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1e4:	f7ff bff0 	b.w	801e1c8 <__sinit_lock_release>
 801e1e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e1ec:	6523      	str	r3, [r4, #80]	; 0x50
 801e1ee:	4b13      	ldr	r3, [pc, #76]	; (801e23c <__sinit+0x68>)
 801e1f0:	4a13      	ldr	r2, [pc, #76]	; (801e240 <__sinit+0x6c>)
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	62a2      	str	r2, [r4, #40]	; 0x28
 801e1f6:	42a3      	cmp	r3, r4
 801e1f8:	bf04      	itt	eq
 801e1fa:	2301      	moveq	r3, #1
 801e1fc:	61a3      	streq	r3, [r4, #24]
 801e1fe:	4620      	mov	r0, r4
 801e200:	f000 f820 	bl	801e244 <__sfp>
 801e204:	6060      	str	r0, [r4, #4]
 801e206:	4620      	mov	r0, r4
 801e208:	f000 f81c 	bl	801e244 <__sfp>
 801e20c:	60a0      	str	r0, [r4, #8]
 801e20e:	4620      	mov	r0, r4
 801e210:	f000 f818 	bl	801e244 <__sfp>
 801e214:	2200      	movs	r2, #0
 801e216:	60e0      	str	r0, [r4, #12]
 801e218:	2104      	movs	r1, #4
 801e21a:	6860      	ldr	r0, [r4, #4]
 801e21c:	f7ff ff82 	bl	801e124 <std>
 801e220:	68a0      	ldr	r0, [r4, #8]
 801e222:	2201      	movs	r2, #1
 801e224:	2109      	movs	r1, #9
 801e226:	f7ff ff7d 	bl	801e124 <std>
 801e22a:	68e0      	ldr	r0, [r4, #12]
 801e22c:	2202      	movs	r2, #2
 801e22e:	2112      	movs	r1, #18
 801e230:	f7ff ff78 	bl	801e124 <std>
 801e234:	2301      	movs	r3, #1
 801e236:	61a3      	str	r3, [r4, #24]
 801e238:	e7d2      	b.n	801e1e0 <__sinit+0xc>
 801e23a:	bf00      	nop
 801e23c:	08027120 	.word	0x08027120
 801e240:	0801e16d 	.word	0x0801e16d

0801e244 <__sfp>:
 801e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e246:	4607      	mov	r7, r0
 801e248:	f7ff ffac 	bl	801e1a4 <__sfp_lock_acquire>
 801e24c:	4b1e      	ldr	r3, [pc, #120]	; (801e2c8 <__sfp+0x84>)
 801e24e:	681e      	ldr	r6, [r3, #0]
 801e250:	69b3      	ldr	r3, [r6, #24]
 801e252:	b913      	cbnz	r3, 801e25a <__sfp+0x16>
 801e254:	4630      	mov	r0, r6
 801e256:	f7ff ffbd 	bl	801e1d4 <__sinit>
 801e25a:	3648      	adds	r6, #72	; 0x48
 801e25c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e260:	3b01      	subs	r3, #1
 801e262:	d503      	bpl.n	801e26c <__sfp+0x28>
 801e264:	6833      	ldr	r3, [r6, #0]
 801e266:	b30b      	cbz	r3, 801e2ac <__sfp+0x68>
 801e268:	6836      	ldr	r6, [r6, #0]
 801e26a:	e7f7      	b.n	801e25c <__sfp+0x18>
 801e26c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e270:	b9d5      	cbnz	r5, 801e2a8 <__sfp+0x64>
 801e272:	4b16      	ldr	r3, [pc, #88]	; (801e2cc <__sfp+0x88>)
 801e274:	60e3      	str	r3, [r4, #12]
 801e276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e27a:	6665      	str	r5, [r4, #100]	; 0x64
 801e27c:	f7e8 fe5a 	bl	8006f34 <__retarget_lock_init_recursive>
 801e280:	f7ff ff96 	bl	801e1b0 <__sfp_lock_release>
 801e284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e28c:	6025      	str	r5, [r4, #0]
 801e28e:	61a5      	str	r5, [r4, #24]
 801e290:	2208      	movs	r2, #8
 801e292:	4629      	mov	r1, r5
 801e294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e298:	f000 f89c 	bl	801e3d4 <memset>
 801e29c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e2a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2a8:	3468      	adds	r4, #104	; 0x68
 801e2aa:	e7d9      	b.n	801e260 <__sfp+0x1c>
 801e2ac:	2104      	movs	r1, #4
 801e2ae:	4638      	mov	r0, r7
 801e2b0:	f7ff ff62 	bl	801e178 <__sfmoreglue>
 801e2b4:	4604      	mov	r4, r0
 801e2b6:	6030      	str	r0, [r6, #0]
 801e2b8:	2800      	cmp	r0, #0
 801e2ba:	d1d5      	bne.n	801e268 <__sfp+0x24>
 801e2bc:	f7ff ff78 	bl	801e1b0 <__sfp_lock_release>
 801e2c0:	230c      	movs	r3, #12
 801e2c2:	603b      	str	r3, [r7, #0]
 801e2c4:	e7ee      	b.n	801e2a4 <__sfp+0x60>
 801e2c6:	bf00      	nop
 801e2c8:	08027120 	.word	0x08027120
 801e2cc:	ffff0001 	.word	0xffff0001

0801e2d0 <_fwalk_reent>:
 801e2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2d4:	4606      	mov	r6, r0
 801e2d6:	4688      	mov	r8, r1
 801e2d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e2dc:	2700      	movs	r7, #0
 801e2de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e2e2:	f1b9 0901 	subs.w	r9, r9, #1
 801e2e6:	d505      	bpl.n	801e2f4 <_fwalk_reent+0x24>
 801e2e8:	6824      	ldr	r4, [r4, #0]
 801e2ea:	2c00      	cmp	r4, #0
 801e2ec:	d1f7      	bne.n	801e2de <_fwalk_reent+0xe>
 801e2ee:	4638      	mov	r0, r7
 801e2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2f4:	89ab      	ldrh	r3, [r5, #12]
 801e2f6:	2b01      	cmp	r3, #1
 801e2f8:	d907      	bls.n	801e30a <_fwalk_reent+0x3a>
 801e2fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e2fe:	3301      	adds	r3, #1
 801e300:	d003      	beq.n	801e30a <_fwalk_reent+0x3a>
 801e302:	4629      	mov	r1, r5
 801e304:	4630      	mov	r0, r6
 801e306:	47c0      	blx	r8
 801e308:	4307      	orrs	r7, r0
 801e30a:	3568      	adds	r5, #104	; 0x68
 801e30c:	e7e9      	b.n	801e2e2 <_fwalk_reent+0x12>
	...

0801e310 <__libc_init_array>:
 801e310:	b570      	push	{r4, r5, r6, lr}
 801e312:	4d0d      	ldr	r5, [pc, #52]	; (801e348 <__libc_init_array+0x38>)
 801e314:	4c0d      	ldr	r4, [pc, #52]	; (801e34c <__libc_init_array+0x3c>)
 801e316:	1b64      	subs	r4, r4, r5
 801e318:	10a4      	asrs	r4, r4, #2
 801e31a:	2600      	movs	r6, #0
 801e31c:	42a6      	cmp	r6, r4
 801e31e:	d109      	bne.n	801e334 <__libc_init_array+0x24>
 801e320:	4d0b      	ldr	r5, [pc, #44]	; (801e350 <__libc_init_array+0x40>)
 801e322:	4c0c      	ldr	r4, [pc, #48]	; (801e354 <__libc_init_array+0x44>)
 801e324:	f005 f884 	bl	8023430 <_init>
 801e328:	1b64      	subs	r4, r4, r5
 801e32a:	10a4      	asrs	r4, r4, #2
 801e32c:	2600      	movs	r6, #0
 801e32e:	42a6      	cmp	r6, r4
 801e330:	d105      	bne.n	801e33e <__libc_init_array+0x2e>
 801e332:	bd70      	pop	{r4, r5, r6, pc}
 801e334:	f855 3b04 	ldr.w	r3, [r5], #4
 801e338:	4798      	blx	r3
 801e33a:	3601      	adds	r6, #1
 801e33c:	e7ee      	b.n	801e31c <__libc_init_array+0xc>
 801e33e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e342:	4798      	blx	r3
 801e344:	3601      	adds	r6, #1
 801e346:	e7f2      	b.n	801e32e <__libc_init_array+0x1e>
 801e348:	080274f0 	.word	0x080274f0
 801e34c:	080274f0 	.word	0x080274f0
 801e350:	080274f0 	.word	0x080274f0
 801e354:	080274f4 	.word	0x080274f4

0801e358 <malloc>:
 801e358:	4b02      	ldr	r3, [pc, #8]	; (801e364 <malloc+0xc>)
 801e35a:	4601      	mov	r1, r0
 801e35c:	6818      	ldr	r0, [r3, #0]
 801e35e:	f000 b891 	b.w	801e484 <_malloc_r>
 801e362:	bf00      	nop
 801e364:	200003b8 	.word	0x200003b8

0801e368 <memcmp>:
 801e368:	b530      	push	{r4, r5, lr}
 801e36a:	3901      	subs	r1, #1
 801e36c:	2400      	movs	r4, #0
 801e36e:	42a2      	cmp	r2, r4
 801e370:	d101      	bne.n	801e376 <memcmp+0xe>
 801e372:	2000      	movs	r0, #0
 801e374:	e005      	b.n	801e382 <memcmp+0x1a>
 801e376:	5d03      	ldrb	r3, [r0, r4]
 801e378:	3401      	adds	r4, #1
 801e37a:	5d0d      	ldrb	r5, [r1, r4]
 801e37c:	42ab      	cmp	r3, r5
 801e37e:	d0f6      	beq.n	801e36e <memcmp+0x6>
 801e380:	1b58      	subs	r0, r3, r5
 801e382:	bd30      	pop	{r4, r5, pc}

0801e384 <memcpy>:
 801e384:	440a      	add	r2, r1
 801e386:	4291      	cmp	r1, r2
 801e388:	f100 33ff 	add.w	r3, r0, #4294967295
 801e38c:	d100      	bne.n	801e390 <memcpy+0xc>
 801e38e:	4770      	bx	lr
 801e390:	b510      	push	{r4, lr}
 801e392:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e396:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e39a:	4291      	cmp	r1, r2
 801e39c:	d1f9      	bne.n	801e392 <memcpy+0xe>
 801e39e:	bd10      	pop	{r4, pc}

0801e3a0 <memmove>:
 801e3a0:	4288      	cmp	r0, r1
 801e3a2:	b510      	push	{r4, lr}
 801e3a4:	eb01 0402 	add.w	r4, r1, r2
 801e3a8:	d902      	bls.n	801e3b0 <memmove+0x10>
 801e3aa:	4284      	cmp	r4, r0
 801e3ac:	4623      	mov	r3, r4
 801e3ae:	d807      	bhi.n	801e3c0 <memmove+0x20>
 801e3b0:	1e43      	subs	r3, r0, #1
 801e3b2:	42a1      	cmp	r1, r4
 801e3b4:	d008      	beq.n	801e3c8 <memmove+0x28>
 801e3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e3be:	e7f8      	b.n	801e3b2 <memmove+0x12>
 801e3c0:	4402      	add	r2, r0
 801e3c2:	4601      	mov	r1, r0
 801e3c4:	428a      	cmp	r2, r1
 801e3c6:	d100      	bne.n	801e3ca <memmove+0x2a>
 801e3c8:	bd10      	pop	{r4, pc}
 801e3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e3d2:	e7f7      	b.n	801e3c4 <memmove+0x24>

0801e3d4 <memset>:
 801e3d4:	4402      	add	r2, r0
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	4293      	cmp	r3, r2
 801e3da:	d100      	bne.n	801e3de <memset+0xa>
 801e3dc:	4770      	bx	lr
 801e3de:	f803 1b01 	strb.w	r1, [r3], #1
 801e3e2:	e7f9      	b.n	801e3d8 <memset+0x4>

0801e3e4 <_free_r>:
 801e3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e3e6:	2900      	cmp	r1, #0
 801e3e8:	d048      	beq.n	801e47c <_free_r+0x98>
 801e3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e3ee:	9001      	str	r0, [sp, #4]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	f1a1 0404 	sub.w	r4, r1, #4
 801e3f6:	bfb8      	it	lt
 801e3f8:	18e4      	addlt	r4, r4, r3
 801e3fa:	f003 fa93 	bl	8021924 <__malloc_lock>
 801e3fe:	4a20      	ldr	r2, [pc, #128]	; (801e480 <_free_r+0x9c>)
 801e400:	9801      	ldr	r0, [sp, #4]
 801e402:	6813      	ldr	r3, [r2, #0]
 801e404:	4615      	mov	r5, r2
 801e406:	b933      	cbnz	r3, 801e416 <_free_r+0x32>
 801e408:	6063      	str	r3, [r4, #4]
 801e40a:	6014      	str	r4, [r2, #0]
 801e40c:	b003      	add	sp, #12
 801e40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e412:	f003 ba8d 	b.w	8021930 <__malloc_unlock>
 801e416:	42a3      	cmp	r3, r4
 801e418:	d90b      	bls.n	801e432 <_free_r+0x4e>
 801e41a:	6821      	ldr	r1, [r4, #0]
 801e41c:	1862      	adds	r2, r4, r1
 801e41e:	4293      	cmp	r3, r2
 801e420:	bf04      	itt	eq
 801e422:	681a      	ldreq	r2, [r3, #0]
 801e424:	685b      	ldreq	r3, [r3, #4]
 801e426:	6063      	str	r3, [r4, #4]
 801e428:	bf04      	itt	eq
 801e42a:	1852      	addeq	r2, r2, r1
 801e42c:	6022      	streq	r2, [r4, #0]
 801e42e:	602c      	str	r4, [r5, #0]
 801e430:	e7ec      	b.n	801e40c <_free_r+0x28>
 801e432:	461a      	mov	r2, r3
 801e434:	685b      	ldr	r3, [r3, #4]
 801e436:	b10b      	cbz	r3, 801e43c <_free_r+0x58>
 801e438:	42a3      	cmp	r3, r4
 801e43a:	d9fa      	bls.n	801e432 <_free_r+0x4e>
 801e43c:	6811      	ldr	r1, [r2, #0]
 801e43e:	1855      	adds	r5, r2, r1
 801e440:	42a5      	cmp	r5, r4
 801e442:	d10b      	bne.n	801e45c <_free_r+0x78>
 801e444:	6824      	ldr	r4, [r4, #0]
 801e446:	4421      	add	r1, r4
 801e448:	1854      	adds	r4, r2, r1
 801e44a:	42a3      	cmp	r3, r4
 801e44c:	6011      	str	r1, [r2, #0]
 801e44e:	d1dd      	bne.n	801e40c <_free_r+0x28>
 801e450:	681c      	ldr	r4, [r3, #0]
 801e452:	685b      	ldr	r3, [r3, #4]
 801e454:	6053      	str	r3, [r2, #4]
 801e456:	4421      	add	r1, r4
 801e458:	6011      	str	r1, [r2, #0]
 801e45a:	e7d7      	b.n	801e40c <_free_r+0x28>
 801e45c:	d902      	bls.n	801e464 <_free_r+0x80>
 801e45e:	230c      	movs	r3, #12
 801e460:	6003      	str	r3, [r0, #0]
 801e462:	e7d3      	b.n	801e40c <_free_r+0x28>
 801e464:	6825      	ldr	r5, [r4, #0]
 801e466:	1961      	adds	r1, r4, r5
 801e468:	428b      	cmp	r3, r1
 801e46a:	bf04      	itt	eq
 801e46c:	6819      	ldreq	r1, [r3, #0]
 801e46e:	685b      	ldreq	r3, [r3, #4]
 801e470:	6063      	str	r3, [r4, #4]
 801e472:	bf04      	itt	eq
 801e474:	1949      	addeq	r1, r1, r5
 801e476:	6021      	streq	r1, [r4, #0]
 801e478:	6054      	str	r4, [r2, #4]
 801e47a:	e7c7      	b.n	801e40c <_free_r+0x28>
 801e47c:	b003      	add	sp, #12
 801e47e:	bd30      	pop	{r4, r5, pc}
 801e480:	20006f50 	.word	0x20006f50

0801e484 <_malloc_r>:
 801e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e486:	1ccd      	adds	r5, r1, #3
 801e488:	f025 0503 	bic.w	r5, r5, #3
 801e48c:	3508      	adds	r5, #8
 801e48e:	2d0c      	cmp	r5, #12
 801e490:	bf38      	it	cc
 801e492:	250c      	movcc	r5, #12
 801e494:	2d00      	cmp	r5, #0
 801e496:	4606      	mov	r6, r0
 801e498:	db01      	blt.n	801e49e <_malloc_r+0x1a>
 801e49a:	42a9      	cmp	r1, r5
 801e49c:	d903      	bls.n	801e4a6 <_malloc_r+0x22>
 801e49e:	230c      	movs	r3, #12
 801e4a0:	6033      	str	r3, [r6, #0]
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4a6:	f003 fa3d 	bl	8021924 <__malloc_lock>
 801e4aa:	4921      	ldr	r1, [pc, #132]	; (801e530 <_malloc_r+0xac>)
 801e4ac:	680a      	ldr	r2, [r1, #0]
 801e4ae:	4614      	mov	r4, r2
 801e4b0:	b99c      	cbnz	r4, 801e4da <_malloc_r+0x56>
 801e4b2:	4f20      	ldr	r7, [pc, #128]	; (801e534 <_malloc_r+0xb0>)
 801e4b4:	683b      	ldr	r3, [r7, #0]
 801e4b6:	b923      	cbnz	r3, 801e4c2 <_malloc_r+0x3e>
 801e4b8:	4621      	mov	r1, r4
 801e4ba:	4630      	mov	r0, r6
 801e4bc:	f000 ff78 	bl	801f3b0 <_sbrk_r>
 801e4c0:	6038      	str	r0, [r7, #0]
 801e4c2:	4629      	mov	r1, r5
 801e4c4:	4630      	mov	r0, r6
 801e4c6:	f000 ff73 	bl	801f3b0 <_sbrk_r>
 801e4ca:	1c43      	adds	r3, r0, #1
 801e4cc:	d123      	bne.n	801e516 <_malloc_r+0x92>
 801e4ce:	230c      	movs	r3, #12
 801e4d0:	6033      	str	r3, [r6, #0]
 801e4d2:	4630      	mov	r0, r6
 801e4d4:	f003 fa2c 	bl	8021930 <__malloc_unlock>
 801e4d8:	e7e3      	b.n	801e4a2 <_malloc_r+0x1e>
 801e4da:	6823      	ldr	r3, [r4, #0]
 801e4dc:	1b5b      	subs	r3, r3, r5
 801e4de:	d417      	bmi.n	801e510 <_malloc_r+0x8c>
 801e4e0:	2b0b      	cmp	r3, #11
 801e4e2:	d903      	bls.n	801e4ec <_malloc_r+0x68>
 801e4e4:	6023      	str	r3, [r4, #0]
 801e4e6:	441c      	add	r4, r3
 801e4e8:	6025      	str	r5, [r4, #0]
 801e4ea:	e004      	b.n	801e4f6 <_malloc_r+0x72>
 801e4ec:	6863      	ldr	r3, [r4, #4]
 801e4ee:	42a2      	cmp	r2, r4
 801e4f0:	bf0c      	ite	eq
 801e4f2:	600b      	streq	r3, [r1, #0]
 801e4f4:	6053      	strne	r3, [r2, #4]
 801e4f6:	4630      	mov	r0, r6
 801e4f8:	f003 fa1a 	bl	8021930 <__malloc_unlock>
 801e4fc:	f104 000b 	add.w	r0, r4, #11
 801e500:	1d23      	adds	r3, r4, #4
 801e502:	f020 0007 	bic.w	r0, r0, #7
 801e506:	1ac2      	subs	r2, r0, r3
 801e508:	d0cc      	beq.n	801e4a4 <_malloc_r+0x20>
 801e50a:	1a1b      	subs	r3, r3, r0
 801e50c:	50a3      	str	r3, [r4, r2]
 801e50e:	e7c9      	b.n	801e4a4 <_malloc_r+0x20>
 801e510:	4622      	mov	r2, r4
 801e512:	6864      	ldr	r4, [r4, #4]
 801e514:	e7cc      	b.n	801e4b0 <_malloc_r+0x2c>
 801e516:	1cc4      	adds	r4, r0, #3
 801e518:	f024 0403 	bic.w	r4, r4, #3
 801e51c:	42a0      	cmp	r0, r4
 801e51e:	d0e3      	beq.n	801e4e8 <_malloc_r+0x64>
 801e520:	1a21      	subs	r1, r4, r0
 801e522:	4630      	mov	r0, r6
 801e524:	f000 ff44 	bl	801f3b0 <_sbrk_r>
 801e528:	3001      	adds	r0, #1
 801e52a:	d1dd      	bne.n	801e4e8 <_malloc_r+0x64>
 801e52c:	e7cf      	b.n	801e4ce <_malloc_r+0x4a>
 801e52e:	bf00      	nop
 801e530:	20006f50 	.word	0x20006f50
 801e534:	20006f54 	.word	0x20006f54

0801e538 <__cvt>:
 801e538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e53c:	ec55 4b10 	vmov	r4, r5, d0
 801e540:	2d00      	cmp	r5, #0
 801e542:	460e      	mov	r6, r1
 801e544:	4619      	mov	r1, r3
 801e546:	462b      	mov	r3, r5
 801e548:	bfbb      	ittet	lt
 801e54a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e54e:	461d      	movlt	r5, r3
 801e550:	2300      	movge	r3, #0
 801e552:	232d      	movlt	r3, #45	; 0x2d
 801e554:	700b      	strb	r3, [r1, #0]
 801e556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e55c:	4691      	mov	r9, r2
 801e55e:	f023 0820 	bic.w	r8, r3, #32
 801e562:	bfbc      	itt	lt
 801e564:	4622      	movlt	r2, r4
 801e566:	4614      	movlt	r4, r2
 801e568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e56c:	d005      	beq.n	801e57a <__cvt+0x42>
 801e56e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e572:	d100      	bne.n	801e576 <__cvt+0x3e>
 801e574:	3601      	adds	r6, #1
 801e576:	2102      	movs	r1, #2
 801e578:	e000      	b.n	801e57c <__cvt+0x44>
 801e57a:	2103      	movs	r1, #3
 801e57c:	ab03      	add	r3, sp, #12
 801e57e:	9301      	str	r3, [sp, #4]
 801e580:	ab02      	add	r3, sp, #8
 801e582:	9300      	str	r3, [sp, #0]
 801e584:	ec45 4b10 	vmov	d0, r4, r5
 801e588:	4653      	mov	r3, sl
 801e58a:	4632      	mov	r2, r6
 801e58c:	f001 ff6c 	bl	8020468 <_dtoa_r>
 801e590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e594:	4607      	mov	r7, r0
 801e596:	d102      	bne.n	801e59e <__cvt+0x66>
 801e598:	f019 0f01 	tst.w	r9, #1
 801e59c:	d022      	beq.n	801e5e4 <__cvt+0xac>
 801e59e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e5a2:	eb07 0906 	add.w	r9, r7, r6
 801e5a6:	d110      	bne.n	801e5ca <__cvt+0x92>
 801e5a8:	783b      	ldrb	r3, [r7, #0]
 801e5aa:	2b30      	cmp	r3, #48	; 0x30
 801e5ac:	d10a      	bne.n	801e5c4 <__cvt+0x8c>
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	2300      	movs	r3, #0
 801e5b2:	4620      	mov	r0, r4
 801e5b4:	4629      	mov	r1, r5
 801e5b6:	f7e2 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 801e5ba:	b918      	cbnz	r0, 801e5c4 <__cvt+0x8c>
 801e5bc:	f1c6 0601 	rsb	r6, r6, #1
 801e5c0:	f8ca 6000 	str.w	r6, [sl]
 801e5c4:	f8da 3000 	ldr.w	r3, [sl]
 801e5c8:	4499      	add	r9, r3
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	2300      	movs	r3, #0
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	4629      	mov	r1, r5
 801e5d2:	f7e2 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 801e5d6:	b108      	cbz	r0, 801e5dc <__cvt+0xa4>
 801e5d8:	f8cd 900c 	str.w	r9, [sp, #12]
 801e5dc:	2230      	movs	r2, #48	; 0x30
 801e5de:	9b03      	ldr	r3, [sp, #12]
 801e5e0:	454b      	cmp	r3, r9
 801e5e2:	d307      	bcc.n	801e5f4 <__cvt+0xbc>
 801e5e4:	9b03      	ldr	r3, [sp, #12]
 801e5e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e5e8:	1bdb      	subs	r3, r3, r7
 801e5ea:	4638      	mov	r0, r7
 801e5ec:	6013      	str	r3, [r2, #0]
 801e5ee:	b004      	add	sp, #16
 801e5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5f4:	1c59      	adds	r1, r3, #1
 801e5f6:	9103      	str	r1, [sp, #12]
 801e5f8:	701a      	strb	r2, [r3, #0]
 801e5fa:	e7f0      	b.n	801e5de <__cvt+0xa6>

0801e5fc <__exponent>:
 801e5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e5fe:	4603      	mov	r3, r0
 801e600:	2900      	cmp	r1, #0
 801e602:	bfb8      	it	lt
 801e604:	4249      	neglt	r1, r1
 801e606:	f803 2b02 	strb.w	r2, [r3], #2
 801e60a:	bfb4      	ite	lt
 801e60c:	222d      	movlt	r2, #45	; 0x2d
 801e60e:	222b      	movge	r2, #43	; 0x2b
 801e610:	2909      	cmp	r1, #9
 801e612:	7042      	strb	r2, [r0, #1]
 801e614:	dd2a      	ble.n	801e66c <__exponent+0x70>
 801e616:	f10d 0407 	add.w	r4, sp, #7
 801e61a:	46a4      	mov	ip, r4
 801e61c:	270a      	movs	r7, #10
 801e61e:	46a6      	mov	lr, r4
 801e620:	460a      	mov	r2, r1
 801e622:	fb91 f6f7 	sdiv	r6, r1, r7
 801e626:	fb07 1516 	mls	r5, r7, r6, r1
 801e62a:	3530      	adds	r5, #48	; 0x30
 801e62c:	2a63      	cmp	r2, #99	; 0x63
 801e62e:	f104 34ff 	add.w	r4, r4, #4294967295
 801e632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e636:	4631      	mov	r1, r6
 801e638:	dcf1      	bgt.n	801e61e <__exponent+0x22>
 801e63a:	3130      	adds	r1, #48	; 0x30
 801e63c:	f1ae 0502 	sub.w	r5, lr, #2
 801e640:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e644:	1c44      	adds	r4, r0, #1
 801e646:	4629      	mov	r1, r5
 801e648:	4561      	cmp	r1, ip
 801e64a:	d30a      	bcc.n	801e662 <__exponent+0x66>
 801e64c:	f10d 0209 	add.w	r2, sp, #9
 801e650:	eba2 020e 	sub.w	r2, r2, lr
 801e654:	4565      	cmp	r5, ip
 801e656:	bf88      	it	hi
 801e658:	2200      	movhi	r2, #0
 801e65a:	4413      	add	r3, r2
 801e65c:	1a18      	subs	r0, r3, r0
 801e65e:	b003      	add	sp, #12
 801e660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e662:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e666:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e66a:	e7ed      	b.n	801e648 <__exponent+0x4c>
 801e66c:	2330      	movs	r3, #48	; 0x30
 801e66e:	3130      	adds	r1, #48	; 0x30
 801e670:	7083      	strb	r3, [r0, #2]
 801e672:	70c1      	strb	r1, [r0, #3]
 801e674:	1d03      	adds	r3, r0, #4
 801e676:	e7f1      	b.n	801e65c <__exponent+0x60>

0801e678 <_printf_float>:
 801e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e67c:	ed2d 8b02 	vpush	{d8}
 801e680:	b08d      	sub	sp, #52	; 0x34
 801e682:	460c      	mov	r4, r1
 801e684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e688:	4616      	mov	r6, r2
 801e68a:	461f      	mov	r7, r3
 801e68c:	4605      	mov	r5, r0
 801e68e:	f003 f921 	bl	80218d4 <_localeconv_r>
 801e692:	f8d0 a000 	ldr.w	sl, [r0]
 801e696:	4650      	mov	r0, sl
 801e698:	f7e1 fd9a 	bl	80001d0 <strlen>
 801e69c:	2300      	movs	r3, #0
 801e69e:	930a      	str	r3, [sp, #40]	; 0x28
 801e6a0:	6823      	ldr	r3, [r4, #0]
 801e6a2:	9305      	str	r3, [sp, #20]
 801e6a4:	f8d8 3000 	ldr.w	r3, [r8]
 801e6a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e6ac:	3307      	adds	r3, #7
 801e6ae:	f023 0307 	bic.w	r3, r3, #7
 801e6b2:	f103 0208 	add.w	r2, r3, #8
 801e6b6:	f8c8 2000 	str.w	r2, [r8]
 801e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e6c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e6c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e6ca:	9307      	str	r3, [sp, #28]
 801e6cc:	f8cd 8018 	str.w	r8, [sp, #24]
 801e6d0:	ee08 0a10 	vmov	s16, r0
 801e6d4:	4b9f      	ldr	r3, [pc, #636]	; (801e954 <_printf_float+0x2dc>)
 801e6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e6da:	f04f 32ff 	mov.w	r2, #4294967295
 801e6de:	f7e2 fa25 	bl	8000b2c <__aeabi_dcmpun>
 801e6e2:	bb88      	cbnz	r0, 801e748 <_printf_float+0xd0>
 801e6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e6e8:	4b9a      	ldr	r3, [pc, #616]	; (801e954 <_printf_float+0x2dc>)
 801e6ea:	f04f 32ff 	mov.w	r2, #4294967295
 801e6ee:	f7e2 f9ff 	bl	8000af0 <__aeabi_dcmple>
 801e6f2:	bb48      	cbnz	r0, 801e748 <_printf_float+0xd0>
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	2300      	movs	r3, #0
 801e6f8:	4640      	mov	r0, r8
 801e6fa:	4649      	mov	r1, r9
 801e6fc:	f7e2 f9ee 	bl	8000adc <__aeabi_dcmplt>
 801e700:	b110      	cbz	r0, 801e708 <_printf_float+0x90>
 801e702:	232d      	movs	r3, #45	; 0x2d
 801e704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e708:	4b93      	ldr	r3, [pc, #588]	; (801e958 <_printf_float+0x2e0>)
 801e70a:	4894      	ldr	r0, [pc, #592]	; (801e95c <_printf_float+0x2e4>)
 801e70c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e710:	bf94      	ite	ls
 801e712:	4698      	movls	r8, r3
 801e714:	4680      	movhi	r8, r0
 801e716:	2303      	movs	r3, #3
 801e718:	6123      	str	r3, [r4, #16]
 801e71a:	9b05      	ldr	r3, [sp, #20]
 801e71c:	f023 0204 	bic.w	r2, r3, #4
 801e720:	6022      	str	r2, [r4, #0]
 801e722:	f04f 0900 	mov.w	r9, #0
 801e726:	9700      	str	r7, [sp, #0]
 801e728:	4633      	mov	r3, r6
 801e72a:	aa0b      	add	r2, sp, #44	; 0x2c
 801e72c:	4621      	mov	r1, r4
 801e72e:	4628      	mov	r0, r5
 801e730:	f000 f9d8 	bl	801eae4 <_printf_common>
 801e734:	3001      	adds	r0, #1
 801e736:	f040 8090 	bne.w	801e85a <_printf_float+0x1e2>
 801e73a:	f04f 30ff 	mov.w	r0, #4294967295
 801e73e:	b00d      	add	sp, #52	; 0x34
 801e740:	ecbd 8b02 	vpop	{d8}
 801e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e748:	4642      	mov	r2, r8
 801e74a:	464b      	mov	r3, r9
 801e74c:	4640      	mov	r0, r8
 801e74e:	4649      	mov	r1, r9
 801e750:	f7e2 f9ec 	bl	8000b2c <__aeabi_dcmpun>
 801e754:	b140      	cbz	r0, 801e768 <_printf_float+0xf0>
 801e756:	464b      	mov	r3, r9
 801e758:	2b00      	cmp	r3, #0
 801e75a:	bfbc      	itt	lt
 801e75c:	232d      	movlt	r3, #45	; 0x2d
 801e75e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e762:	487f      	ldr	r0, [pc, #508]	; (801e960 <_printf_float+0x2e8>)
 801e764:	4b7f      	ldr	r3, [pc, #508]	; (801e964 <_printf_float+0x2ec>)
 801e766:	e7d1      	b.n	801e70c <_printf_float+0x94>
 801e768:	6863      	ldr	r3, [r4, #4]
 801e76a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e76e:	9206      	str	r2, [sp, #24]
 801e770:	1c5a      	adds	r2, r3, #1
 801e772:	d13f      	bne.n	801e7f4 <_printf_float+0x17c>
 801e774:	2306      	movs	r3, #6
 801e776:	6063      	str	r3, [r4, #4]
 801e778:	9b05      	ldr	r3, [sp, #20]
 801e77a:	6861      	ldr	r1, [r4, #4]
 801e77c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e780:	2300      	movs	r3, #0
 801e782:	9303      	str	r3, [sp, #12]
 801e784:	ab0a      	add	r3, sp, #40	; 0x28
 801e786:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e78a:	ab09      	add	r3, sp, #36	; 0x24
 801e78c:	ec49 8b10 	vmov	d0, r8, r9
 801e790:	9300      	str	r3, [sp, #0]
 801e792:	6022      	str	r2, [r4, #0]
 801e794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e798:	4628      	mov	r0, r5
 801e79a:	f7ff fecd 	bl	801e538 <__cvt>
 801e79e:	9b06      	ldr	r3, [sp, #24]
 801e7a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e7a2:	2b47      	cmp	r3, #71	; 0x47
 801e7a4:	4680      	mov	r8, r0
 801e7a6:	d108      	bne.n	801e7ba <_printf_float+0x142>
 801e7a8:	1cc8      	adds	r0, r1, #3
 801e7aa:	db02      	blt.n	801e7b2 <_printf_float+0x13a>
 801e7ac:	6863      	ldr	r3, [r4, #4]
 801e7ae:	4299      	cmp	r1, r3
 801e7b0:	dd41      	ble.n	801e836 <_printf_float+0x1be>
 801e7b2:	f1ab 0b02 	sub.w	fp, fp, #2
 801e7b6:	fa5f fb8b 	uxtb.w	fp, fp
 801e7ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e7be:	d820      	bhi.n	801e802 <_printf_float+0x18a>
 801e7c0:	3901      	subs	r1, #1
 801e7c2:	465a      	mov	r2, fp
 801e7c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e7c8:	9109      	str	r1, [sp, #36]	; 0x24
 801e7ca:	f7ff ff17 	bl	801e5fc <__exponent>
 801e7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e7d0:	1813      	adds	r3, r2, r0
 801e7d2:	2a01      	cmp	r2, #1
 801e7d4:	4681      	mov	r9, r0
 801e7d6:	6123      	str	r3, [r4, #16]
 801e7d8:	dc02      	bgt.n	801e7e0 <_printf_float+0x168>
 801e7da:	6822      	ldr	r2, [r4, #0]
 801e7dc:	07d2      	lsls	r2, r2, #31
 801e7de:	d501      	bpl.n	801e7e4 <_printf_float+0x16c>
 801e7e0:	3301      	adds	r3, #1
 801e7e2:	6123      	str	r3, [r4, #16]
 801e7e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d09c      	beq.n	801e726 <_printf_float+0xae>
 801e7ec:	232d      	movs	r3, #45	; 0x2d
 801e7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e7f2:	e798      	b.n	801e726 <_printf_float+0xae>
 801e7f4:	9a06      	ldr	r2, [sp, #24]
 801e7f6:	2a47      	cmp	r2, #71	; 0x47
 801e7f8:	d1be      	bne.n	801e778 <_printf_float+0x100>
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d1bc      	bne.n	801e778 <_printf_float+0x100>
 801e7fe:	2301      	movs	r3, #1
 801e800:	e7b9      	b.n	801e776 <_printf_float+0xfe>
 801e802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e806:	d118      	bne.n	801e83a <_printf_float+0x1c2>
 801e808:	2900      	cmp	r1, #0
 801e80a:	6863      	ldr	r3, [r4, #4]
 801e80c:	dd0b      	ble.n	801e826 <_printf_float+0x1ae>
 801e80e:	6121      	str	r1, [r4, #16]
 801e810:	b913      	cbnz	r3, 801e818 <_printf_float+0x1a0>
 801e812:	6822      	ldr	r2, [r4, #0]
 801e814:	07d0      	lsls	r0, r2, #31
 801e816:	d502      	bpl.n	801e81e <_printf_float+0x1a6>
 801e818:	3301      	adds	r3, #1
 801e81a:	440b      	add	r3, r1
 801e81c:	6123      	str	r3, [r4, #16]
 801e81e:	65a1      	str	r1, [r4, #88]	; 0x58
 801e820:	f04f 0900 	mov.w	r9, #0
 801e824:	e7de      	b.n	801e7e4 <_printf_float+0x16c>
 801e826:	b913      	cbnz	r3, 801e82e <_printf_float+0x1b6>
 801e828:	6822      	ldr	r2, [r4, #0]
 801e82a:	07d2      	lsls	r2, r2, #31
 801e82c:	d501      	bpl.n	801e832 <_printf_float+0x1ba>
 801e82e:	3302      	adds	r3, #2
 801e830:	e7f4      	b.n	801e81c <_printf_float+0x1a4>
 801e832:	2301      	movs	r3, #1
 801e834:	e7f2      	b.n	801e81c <_printf_float+0x1a4>
 801e836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e83c:	4299      	cmp	r1, r3
 801e83e:	db05      	blt.n	801e84c <_printf_float+0x1d4>
 801e840:	6823      	ldr	r3, [r4, #0]
 801e842:	6121      	str	r1, [r4, #16]
 801e844:	07d8      	lsls	r0, r3, #31
 801e846:	d5ea      	bpl.n	801e81e <_printf_float+0x1a6>
 801e848:	1c4b      	adds	r3, r1, #1
 801e84a:	e7e7      	b.n	801e81c <_printf_float+0x1a4>
 801e84c:	2900      	cmp	r1, #0
 801e84e:	bfd4      	ite	le
 801e850:	f1c1 0202 	rsble	r2, r1, #2
 801e854:	2201      	movgt	r2, #1
 801e856:	4413      	add	r3, r2
 801e858:	e7e0      	b.n	801e81c <_printf_float+0x1a4>
 801e85a:	6823      	ldr	r3, [r4, #0]
 801e85c:	055a      	lsls	r2, r3, #21
 801e85e:	d407      	bmi.n	801e870 <_printf_float+0x1f8>
 801e860:	6923      	ldr	r3, [r4, #16]
 801e862:	4642      	mov	r2, r8
 801e864:	4631      	mov	r1, r6
 801e866:	4628      	mov	r0, r5
 801e868:	47b8      	blx	r7
 801e86a:	3001      	adds	r0, #1
 801e86c:	d12c      	bne.n	801e8c8 <_printf_float+0x250>
 801e86e:	e764      	b.n	801e73a <_printf_float+0xc2>
 801e870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e874:	f240 80e0 	bls.w	801ea38 <_printf_float+0x3c0>
 801e878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e87c:	2200      	movs	r2, #0
 801e87e:	2300      	movs	r3, #0
 801e880:	f7e2 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 801e884:	2800      	cmp	r0, #0
 801e886:	d034      	beq.n	801e8f2 <_printf_float+0x27a>
 801e888:	4a37      	ldr	r2, [pc, #220]	; (801e968 <_printf_float+0x2f0>)
 801e88a:	2301      	movs	r3, #1
 801e88c:	4631      	mov	r1, r6
 801e88e:	4628      	mov	r0, r5
 801e890:	47b8      	blx	r7
 801e892:	3001      	adds	r0, #1
 801e894:	f43f af51 	beq.w	801e73a <_printf_float+0xc2>
 801e898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e89c:	429a      	cmp	r2, r3
 801e89e:	db02      	blt.n	801e8a6 <_printf_float+0x22e>
 801e8a0:	6823      	ldr	r3, [r4, #0]
 801e8a2:	07d8      	lsls	r0, r3, #31
 801e8a4:	d510      	bpl.n	801e8c8 <_printf_float+0x250>
 801e8a6:	ee18 3a10 	vmov	r3, s16
 801e8aa:	4652      	mov	r2, sl
 801e8ac:	4631      	mov	r1, r6
 801e8ae:	4628      	mov	r0, r5
 801e8b0:	47b8      	blx	r7
 801e8b2:	3001      	adds	r0, #1
 801e8b4:	f43f af41 	beq.w	801e73a <_printf_float+0xc2>
 801e8b8:	f04f 0800 	mov.w	r8, #0
 801e8bc:	f104 091a 	add.w	r9, r4, #26
 801e8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8c2:	3b01      	subs	r3, #1
 801e8c4:	4543      	cmp	r3, r8
 801e8c6:	dc09      	bgt.n	801e8dc <_printf_float+0x264>
 801e8c8:	6823      	ldr	r3, [r4, #0]
 801e8ca:	079b      	lsls	r3, r3, #30
 801e8cc:	f100 8105 	bmi.w	801eada <_printf_float+0x462>
 801e8d0:	68e0      	ldr	r0, [r4, #12]
 801e8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8d4:	4298      	cmp	r0, r3
 801e8d6:	bfb8      	it	lt
 801e8d8:	4618      	movlt	r0, r3
 801e8da:	e730      	b.n	801e73e <_printf_float+0xc6>
 801e8dc:	2301      	movs	r3, #1
 801e8de:	464a      	mov	r2, r9
 801e8e0:	4631      	mov	r1, r6
 801e8e2:	4628      	mov	r0, r5
 801e8e4:	47b8      	blx	r7
 801e8e6:	3001      	adds	r0, #1
 801e8e8:	f43f af27 	beq.w	801e73a <_printf_float+0xc2>
 801e8ec:	f108 0801 	add.w	r8, r8, #1
 801e8f0:	e7e6      	b.n	801e8c0 <_printf_float+0x248>
 801e8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	dc39      	bgt.n	801e96c <_printf_float+0x2f4>
 801e8f8:	4a1b      	ldr	r2, [pc, #108]	; (801e968 <_printf_float+0x2f0>)
 801e8fa:	2301      	movs	r3, #1
 801e8fc:	4631      	mov	r1, r6
 801e8fe:	4628      	mov	r0, r5
 801e900:	47b8      	blx	r7
 801e902:	3001      	adds	r0, #1
 801e904:	f43f af19 	beq.w	801e73a <_printf_float+0xc2>
 801e908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e90c:	4313      	orrs	r3, r2
 801e90e:	d102      	bne.n	801e916 <_printf_float+0x29e>
 801e910:	6823      	ldr	r3, [r4, #0]
 801e912:	07d9      	lsls	r1, r3, #31
 801e914:	d5d8      	bpl.n	801e8c8 <_printf_float+0x250>
 801e916:	ee18 3a10 	vmov	r3, s16
 801e91a:	4652      	mov	r2, sl
 801e91c:	4631      	mov	r1, r6
 801e91e:	4628      	mov	r0, r5
 801e920:	47b8      	blx	r7
 801e922:	3001      	adds	r0, #1
 801e924:	f43f af09 	beq.w	801e73a <_printf_float+0xc2>
 801e928:	f04f 0900 	mov.w	r9, #0
 801e92c:	f104 0a1a 	add.w	sl, r4, #26
 801e930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e932:	425b      	negs	r3, r3
 801e934:	454b      	cmp	r3, r9
 801e936:	dc01      	bgt.n	801e93c <_printf_float+0x2c4>
 801e938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e93a:	e792      	b.n	801e862 <_printf_float+0x1ea>
 801e93c:	2301      	movs	r3, #1
 801e93e:	4652      	mov	r2, sl
 801e940:	4631      	mov	r1, r6
 801e942:	4628      	mov	r0, r5
 801e944:	47b8      	blx	r7
 801e946:	3001      	adds	r0, #1
 801e948:	f43f aef7 	beq.w	801e73a <_printf_float+0xc2>
 801e94c:	f109 0901 	add.w	r9, r9, #1
 801e950:	e7ee      	b.n	801e930 <_printf_float+0x2b8>
 801e952:	bf00      	nop
 801e954:	7fefffff 	.word	0x7fefffff
 801e958:	08027124 	.word	0x08027124
 801e95c:	08027128 	.word	0x08027128
 801e960:	08027130 	.word	0x08027130
 801e964:	0802712c 	.word	0x0802712c
 801e968:	080274d1 	.word	0x080274d1
 801e96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e970:	429a      	cmp	r2, r3
 801e972:	bfa8      	it	ge
 801e974:	461a      	movge	r2, r3
 801e976:	2a00      	cmp	r2, #0
 801e978:	4691      	mov	r9, r2
 801e97a:	dc37      	bgt.n	801e9ec <_printf_float+0x374>
 801e97c:	f04f 0b00 	mov.w	fp, #0
 801e980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e984:	f104 021a 	add.w	r2, r4, #26
 801e988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e98a:	9305      	str	r3, [sp, #20]
 801e98c:	eba3 0309 	sub.w	r3, r3, r9
 801e990:	455b      	cmp	r3, fp
 801e992:	dc33      	bgt.n	801e9fc <_printf_float+0x384>
 801e994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e998:	429a      	cmp	r2, r3
 801e99a:	db3b      	blt.n	801ea14 <_printf_float+0x39c>
 801e99c:	6823      	ldr	r3, [r4, #0]
 801e99e:	07da      	lsls	r2, r3, #31
 801e9a0:	d438      	bmi.n	801ea14 <_printf_float+0x39c>
 801e9a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e9a4:	9b05      	ldr	r3, [sp, #20]
 801e9a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e9a8:	1ad3      	subs	r3, r2, r3
 801e9aa:	eba2 0901 	sub.w	r9, r2, r1
 801e9ae:	4599      	cmp	r9, r3
 801e9b0:	bfa8      	it	ge
 801e9b2:	4699      	movge	r9, r3
 801e9b4:	f1b9 0f00 	cmp.w	r9, #0
 801e9b8:	dc35      	bgt.n	801ea26 <_printf_float+0x3ae>
 801e9ba:	f04f 0800 	mov.w	r8, #0
 801e9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e9c2:	f104 0a1a 	add.w	sl, r4, #26
 801e9c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e9ca:	1a9b      	subs	r3, r3, r2
 801e9cc:	eba3 0309 	sub.w	r3, r3, r9
 801e9d0:	4543      	cmp	r3, r8
 801e9d2:	f77f af79 	ble.w	801e8c8 <_printf_float+0x250>
 801e9d6:	2301      	movs	r3, #1
 801e9d8:	4652      	mov	r2, sl
 801e9da:	4631      	mov	r1, r6
 801e9dc:	4628      	mov	r0, r5
 801e9de:	47b8      	blx	r7
 801e9e0:	3001      	adds	r0, #1
 801e9e2:	f43f aeaa 	beq.w	801e73a <_printf_float+0xc2>
 801e9e6:	f108 0801 	add.w	r8, r8, #1
 801e9ea:	e7ec      	b.n	801e9c6 <_printf_float+0x34e>
 801e9ec:	4613      	mov	r3, r2
 801e9ee:	4631      	mov	r1, r6
 801e9f0:	4642      	mov	r2, r8
 801e9f2:	4628      	mov	r0, r5
 801e9f4:	47b8      	blx	r7
 801e9f6:	3001      	adds	r0, #1
 801e9f8:	d1c0      	bne.n	801e97c <_printf_float+0x304>
 801e9fa:	e69e      	b.n	801e73a <_printf_float+0xc2>
 801e9fc:	2301      	movs	r3, #1
 801e9fe:	4631      	mov	r1, r6
 801ea00:	4628      	mov	r0, r5
 801ea02:	9205      	str	r2, [sp, #20]
 801ea04:	47b8      	blx	r7
 801ea06:	3001      	adds	r0, #1
 801ea08:	f43f ae97 	beq.w	801e73a <_printf_float+0xc2>
 801ea0c:	9a05      	ldr	r2, [sp, #20]
 801ea0e:	f10b 0b01 	add.w	fp, fp, #1
 801ea12:	e7b9      	b.n	801e988 <_printf_float+0x310>
 801ea14:	ee18 3a10 	vmov	r3, s16
 801ea18:	4652      	mov	r2, sl
 801ea1a:	4631      	mov	r1, r6
 801ea1c:	4628      	mov	r0, r5
 801ea1e:	47b8      	blx	r7
 801ea20:	3001      	adds	r0, #1
 801ea22:	d1be      	bne.n	801e9a2 <_printf_float+0x32a>
 801ea24:	e689      	b.n	801e73a <_printf_float+0xc2>
 801ea26:	9a05      	ldr	r2, [sp, #20]
 801ea28:	464b      	mov	r3, r9
 801ea2a:	4442      	add	r2, r8
 801ea2c:	4631      	mov	r1, r6
 801ea2e:	4628      	mov	r0, r5
 801ea30:	47b8      	blx	r7
 801ea32:	3001      	adds	r0, #1
 801ea34:	d1c1      	bne.n	801e9ba <_printf_float+0x342>
 801ea36:	e680      	b.n	801e73a <_printf_float+0xc2>
 801ea38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ea3a:	2a01      	cmp	r2, #1
 801ea3c:	dc01      	bgt.n	801ea42 <_printf_float+0x3ca>
 801ea3e:	07db      	lsls	r3, r3, #31
 801ea40:	d538      	bpl.n	801eab4 <_printf_float+0x43c>
 801ea42:	2301      	movs	r3, #1
 801ea44:	4642      	mov	r2, r8
 801ea46:	4631      	mov	r1, r6
 801ea48:	4628      	mov	r0, r5
 801ea4a:	47b8      	blx	r7
 801ea4c:	3001      	adds	r0, #1
 801ea4e:	f43f ae74 	beq.w	801e73a <_printf_float+0xc2>
 801ea52:	ee18 3a10 	vmov	r3, s16
 801ea56:	4652      	mov	r2, sl
 801ea58:	4631      	mov	r1, r6
 801ea5a:	4628      	mov	r0, r5
 801ea5c:	47b8      	blx	r7
 801ea5e:	3001      	adds	r0, #1
 801ea60:	f43f ae6b 	beq.w	801e73a <_printf_float+0xc2>
 801ea64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ea68:	2200      	movs	r2, #0
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	f7e2 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 801ea70:	b9d8      	cbnz	r0, 801eaaa <_printf_float+0x432>
 801ea72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea74:	f108 0201 	add.w	r2, r8, #1
 801ea78:	3b01      	subs	r3, #1
 801ea7a:	4631      	mov	r1, r6
 801ea7c:	4628      	mov	r0, r5
 801ea7e:	47b8      	blx	r7
 801ea80:	3001      	adds	r0, #1
 801ea82:	d10e      	bne.n	801eaa2 <_printf_float+0x42a>
 801ea84:	e659      	b.n	801e73a <_printf_float+0xc2>
 801ea86:	2301      	movs	r3, #1
 801ea88:	4652      	mov	r2, sl
 801ea8a:	4631      	mov	r1, r6
 801ea8c:	4628      	mov	r0, r5
 801ea8e:	47b8      	blx	r7
 801ea90:	3001      	adds	r0, #1
 801ea92:	f43f ae52 	beq.w	801e73a <_printf_float+0xc2>
 801ea96:	f108 0801 	add.w	r8, r8, #1
 801ea9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea9c:	3b01      	subs	r3, #1
 801ea9e:	4543      	cmp	r3, r8
 801eaa0:	dcf1      	bgt.n	801ea86 <_printf_float+0x40e>
 801eaa2:	464b      	mov	r3, r9
 801eaa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801eaa8:	e6dc      	b.n	801e864 <_printf_float+0x1ec>
 801eaaa:	f04f 0800 	mov.w	r8, #0
 801eaae:	f104 0a1a 	add.w	sl, r4, #26
 801eab2:	e7f2      	b.n	801ea9a <_printf_float+0x422>
 801eab4:	2301      	movs	r3, #1
 801eab6:	4642      	mov	r2, r8
 801eab8:	e7df      	b.n	801ea7a <_printf_float+0x402>
 801eaba:	2301      	movs	r3, #1
 801eabc:	464a      	mov	r2, r9
 801eabe:	4631      	mov	r1, r6
 801eac0:	4628      	mov	r0, r5
 801eac2:	47b8      	blx	r7
 801eac4:	3001      	adds	r0, #1
 801eac6:	f43f ae38 	beq.w	801e73a <_printf_float+0xc2>
 801eaca:	f108 0801 	add.w	r8, r8, #1
 801eace:	68e3      	ldr	r3, [r4, #12]
 801ead0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ead2:	1a5b      	subs	r3, r3, r1
 801ead4:	4543      	cmp	r3, r8
 801ead6:	dcf0      	bgt.n	801eaba <_printf_float+0x442>
 801ead8:	e6fa      	b.n	801e8d0 <_printf_float+0x258>
 801eada:	f04f 0800 	mov.w	r8, #0
 801eade:	f104 0919 	add.w	r9, r4, #25
 801eae2:	e7f4      	b.n	801eace <_printf_float+0x456>

0801eae4 <_printf_common>:
 801eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eae8:	4616      	mov	r6, r2
 801eaea:	4699      	mov	r9, r3
 801eaec:	688a      	ldr	r2, [r1, #8]
 801eaee:	690b      	ldr	r3, [r1, #16]
 801eaf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eaf4:	4293      	cmp	r3, r2
 801eaf6:	bfb8      	it	lt
 801eaf8:	4613      	movlt	r3, r2
 801eafa:	6033      	str	r3, [r6, #0]
 801eafc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eb00:	4607      	mov	r7, r0
 801eb02:	460c      	mov	r4, r1
 801eb04:	b10a      	cbz	r2, 801eb0a <_printf_common+0x26>
 801eb06:	3301      	adds	r3, #1
 801eb08:	6033      	str	r3, [r6, #0]
 801eb0a:	6823      	ldr	r3, [r4, #0]
 801eb0c:	0699      	lsls	r1, r3, #26
 801eb0e:	bf42      	ittt	mi
 801eb10:	6833      	ldrmi	r3, [r6, #0]
 801eb12:	3302      	addmi	r3, #2
 801eb14:	6033      	strmi	r3, [r6, #0]
 801eb16:	6825      	ldr	r5, [r4, #0]
 801eb18:	f015 0506 	ands.w	r5, r5, #6
 801eb1c:	d106      	bne.n	801eb2c <_printf_common+0x48>
 801eb1e:	f104 0a19 	add.w	sl, r4, #25
 801eb22:	68e3      	ldr	r3, [r4, #12]
 801eb24:	6832      	ldr	r2, [r6, #0]
 801eb26:	1a9b      	subs	r3, r3, r2
 801eb28:	42ab      	cmp	r3, r5
 801eb2a:	dc26      	bgt.n	801eb7a <_printf_common+0x96>
 801eb2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801eb30:	1e13      	subs	r3, r2, #0
 801eb32:	6822      	ldr	r2, [r4, #0]
 801eb34:	bf18      	it	ne
 801eb36:	2301      	movne	r3, #1
 801eb38:	0692      	lsls	r2, r2, #26
 801eb3a:	d42b      	bmi.n	801eb94 <_printf_common+0xb0>
 801eb3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eb40:	4649      	mov	r1, r9
 801eb42:	4638      	mov	r0, r7
 801eb44:	47c0      	blx	r8
 801eb46:	3001      	adds	r0, #1
 801eb48:	d01e      	beq.n	801eb88 <_printf_common+0xa4>
 801eb4a:	6823      	ldr	r3, [r4, #0]
 801eb4c:	68e5      	ldr	r5, [r4, #12]
 801eb4e:	6832      	ldr	r2, [r6, #0]
 801eb50:	f003 0306 	and.w	r3, r3, #6
 801eb54:	2b04      	cmp	r3, #4
 801eb56:	bf08      	it	eq
 801eb58:	1aad      	subeq	r5, r5, r2
 801eb5a:	68a3      	ldr	r3, [r4, #8]
 801eb5c:	6922      	ldr	r2, [r4, #16]
 801eb5e:	bf0c      	ite	eq
 801eb60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eb64:	2500      	movne	r5, #0
 801eb66:	4293      	cmp	r3, r2
 801eb68:	bfc4      	itt	gt
 801eb6a:	1a9b      	subgt	r3, r3, r2
 801eb6c:	18ed      	addgt	r5, r5, r3
 801eb6e:	2600      	movs	r6, #0
 801eb70:	341a      	adds	r4, #26
 801eb72:	42b5      	cmp	r5, r6
 801eb74:	d11a      	bne.n	801ebac <_printf_common+0xc8>
 801eb76:	2000      	movs	r0, #0
 801eb78:	e008      	b.n	801eb8c <_printf_common+0xa8>
 801eb7a:	2301      	movs	r3, #1
 801eb7c:	4652      	mov	r2, sl
 801eb7e:	4649      	mov	r1, r9
 801eb80:	4638      	mov	r0, r7
 801eb82:	47c0      	blx	r8
 801eb84:	3001      	adds	r0, #1
 801eb86:	d103      	bne.n	801eb90 <_printf_common+0xac>
 801eb88:	f04f 30ff 	mov.w	r0, #4294967295
 801eb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb90:	3501      	adds	r5, #1
 801eb92:	e7c6      	b.n	801eb22 <_printf_common+0x3e>
 801eb94:	18e1      	adds	r1, r4, r3
 801eb96:	1c5a      	adds	r2, r3, #1
 801eb98:	2030      	movs	r0, #48	; 0x30
 801eb9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801eb9e:	4422      	add	r2, r4
 801eba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801eba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801eba8:	3302      	adds	r3, #2
 801ebaa:	e7c7      	b.n	801eb3c <_printf_common+0x58>
 801ebac:	2301      	movs	r3, #1
 801ebae:	4622      	mov	r2, r4
 801ebb0:	4649      	mov	r1, r9
 801ebb2:	4638      	mov	r0, r7
 801ebb4:	47c0      	blx	r8
 801ebb6:	3001      	adds	r0, #1
 801ebb8:	d0e6      	beq.n	801eb88 <_printf_common+0xa4>
 801ebba:	3601      	adds	r6, #1
 801ebbc:	e7d9      	b.n	801eb72 <_printf_common+0x8e>
	...

0801ebc0 <_printf_i>:
 801ebc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ebc4:	460c      	mov	r4, r1
 801ebc6:	4691      	mov	r9, r2
 801ebc8:	7e27      	ldrb	r7, [r4, #24]
 801ebca:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ebcc:	2f78      	cmp	r7, #120	; 0x78
 801ebce:	4680      	mov	r8, r0
 801ebd0:	469a      	mov	sl, r3
 801ebd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ebd6:	d807      	bhi.n	801ebe8 <_printf_i+0x28>
 801ebd8:	2f62      	cmp	r7, #98	; 0x62
 801ebda:	d80a      	bhi.n	801ebf2 <_printf_i+0x32>
 801ebdc:	2f00      	cmp	r7, #0
 801ebde:	f000 80d8 	beq.w	801ed92 <_printf_i+0x1d2>
 801ebe2:	2f58      	cmp	r7, #88	; 0x58
 801ebe4:	f000 80a3 	beq.w	801ed2e <_printf_i+0x16e>
 801ebe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ebec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ebf0:	e03a      	b.n	801ec68 <_printf_i+0xa8>
 801ebf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ebf6:	2b15      	cmp	r3, #21
 801ebf8:	d8f6      	bhi.n	801ebe8 <_printf_i+0x28>
 801ebfa:	a001      	add	r0, pc, #4	; (adr r0, 801ec00 <_printf_i+0x40>)
 801ebfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ec00:	0801ec59 	.word	0x0801ec59
 801ec04:	0801ec6d 	.word	0x0801ec6d
 801ec08:	0801ebe9 	.word	0x0801ebe9
 801ec0c:	0801ebe9 	.word	0x0801ebe9
 801ec10:	0801ebe9 	.word	0x0801ebe9
 801ec14:	0801ebe9 	.word	0x0801ebe9
 801ec18:	0801ec6d 	.word	0x0801ec6d
 801ec1c:	0801ebe9 	.word	0x0801ebe9
 801ec20:	0801ebe9 	.word	0x0801ebe9
 801ec24:	0801ebe9 	.word	0x0801ebe9
 801ec28:	0801ebe9 	.word	0x0801ebe9
 801ec2c:	0801ed79 	.word	0x0801ed79
 801ec30:	0801ec9d 	.word	0x0801ec9d
 801ec34:	0801ed5b 	.word	0x0801ed5b
 801ec38:	0801ebe9 	.word	0x0801ebe9
 801ec3c:	0801ebe9 	.word	0x0801ebe9
 801ec40:	0801ed9b 	.word	0x0801ed9b
 801ec44:	0801ebe9 	.word	0x0801ebe9
 801ec48:	0801ec9d 	.word	0x0801ec9d
 801ec4c:	0801ebe9 	.word	0x0801ebe9
 801ec50:	0801ebe9 	.word	0x0801ebe9
 801ec54:	0801ed63 	.word	0x0801ed63
 801ec58:	680b      	ldr	r3, [r1, #0]
 801ec5a:	1d1a      	adds	r2, r3, #4
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	600a      	str	r2, [r1, #0]
 801ec60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ec64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ec68:	2301      	movs	r3, #1
 801ec6a:	e0a3      	b.n	801edb4 <_printf_i+0x1f4>
 801ec6c:	6825      	ldr	r5, [r4, #0]
 801ec6e:	6808      	ldr	r0, [r1, #0]
 801ec70:	062e      	lsls	r6, r5, #24
 801ec72:	f100 0304 	add.w	r3, r0, #4
 801ec76:	d50a      	bpl.n	801ec8e <_printf_i+0xce>
 801ec78:	6805      	ldr	r5, [r0, #0]
 801ec7a:	600b      	str	r3, [r1, #0]
 801ec7c:	2d00      	cmp	r5, #0
 801ec7e:	da03      	bge.n	801ec88 <_printf_i+0xc8>
 801ec80:	232d      	movs	r3, #45	; 0x2d
 801ec82:	426d      	negs	r5, r5
 801ec84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ec88:	485e      	ldr	r0, [pc, #376]	; (801ee04 <_printf_i+0x244>)
 801ec8a:	230a      	movs	r3, #10
 801ec8c:	e019      	b.n	801ecc2 <_printf_i+0x102>
 801ec8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ec92:	6805      	ldr	r5, [r0, #0]
 801ec94:	600b      	str	r3, [r1, #0]
 801ec96:	bf18      	it	ne
 801ec98:	b22d      	sxthne	r5, r5
 801ec9a:	e7ef      	b.n	801ec7c <_printf_i+0xbc>
 801ec9c:	680b      	ldr	r3, [r1, #0]
 801ec9e:	6825      	ldr	r5, [r4, #0]
 801eca0:	1d18      	adds	r0, r3, #4
 801eca2:	6008      	str	r0, [r1, #0]
 801eca4:	0628      	lsls	r0, r5, #24
 801eca6:	d501      	bpl.n	801ecac <_printf_i+0xec>
 801eca8:	681d      	ldr	r5, [r3, #0]
 801ecaa:	e002      	b.n	801ecb2 <_printf_i+0xf2>
 801ecac:	0669      	lsls	r1, r5, #25
 801ecae:	d5fb      	bpl.n	801eca8 <_printf_i+0xe8>
 801ecb0:	881d      	ldrh	r5, [r3, #0]
 801ecb2:	4854      	ldr	r0, [pc, #336]	; (801ee04 <_printf_i+0x244>)
 801ecb4:	2f6f      	cmp	r7, #111	; 0x6f
 801ecb6:	bf0c      	ite	eq
 801ecb8:	2308      	moveq	r3, #8
 801ecba:	230a      	movne	r3, #10
 801ecbc:	2100      	movs	r1, #0
 801ecbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ecc2:	6866      	ldr	r6, [r4, #4]
 801ecc4:	60a6      	str	r6, [r4, #8]
 801ecc6:	2e00      	cmp	r6, #0
 801ecc8:	bfa2      	ittt	ge
 801ecca:	6821      	ldrge	r1, [r4, #0]
 801eccc:	f021 0104 	bicge.w	r1, r1, #4
 801ecd0:	6021      	strge	r1, [r4, #0]
 801ecd2:	b90d      	cbnz	r5, 801ecd8 <_printf_i+0x118>
 801ecd4:	2e00      	cmp	r6, #0
 801ecd6:	d04d      	beq.n	801ed74 <_printf_i+0x1b4>
 801ecd8:	4616      	mov	r6, r2
 801ecda:	fbb5 f1f3 	udiv	r1, r5, r3
 801ecde:	fb03 5711 	mls	r7, r3, r1, r5
 801ece2:	5dc7      	ldrb	r7, [r0, r7]
 801ece4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ece8:	462f      	mov	r7, r5
 801ecea:	42bb      	cmp	r3, r7
 801ecec:	460d      	mov	r5, r1
 801ecee:	d9f4      	bls.n	801ecda <_printf_i+0x11a>
 801ecf0:	2b08      	cmp	r3, #8
 801ecf2:	d10b      	bne.n	801ed0c <_printf_i+0x14c>
 801ecf4:	6823      	ldr	r3, [r4, #0]
 801ecf6:	07df      	lsls	r7, r3, #31
 801ecf8:	d508      	bpl.n	801ed0c <_printf_i+0x14c>
 801ecfa:	6923      	ldr	r3, [r4, #16]
 801ecfc:	6861      	ldr	r1, [r4, #4]
 801ecfe:	4299      	cmp	r1, r3
 801ed00:	bfde      	ittt	le
 801ed02:	2330      	movle	r3, #48	; 0x30
 801ed04:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ed08:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ed0c:	1b92      	subs	r2, r2, r6
 801ed0e:	6122      	str	r2, [r4, #16]
 801ed10:	f8cd a000 	str.w	sl, [sp]
 801ed14:	464b      	mov	r3, r9
 801ed16:	aa03      	add	r2, sp, #12
 801ed18:	4621      	mov	r1, r4
 801ed1a:	4640      	mov	r0, r8
 801ed1c:	f7ff fee2 	bl	801eae4 <_printf_common>
 801ed20:	3001      	adds	r0, #1
 801ed22:	d14c      	bne.n	801edbe <_printf_i+0x1fe>
 801ed24:	f04f 30ff 	mov.w	r0, #4294967295
 801ed28:	b004      	add	sp, #16
 801ed2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed2e:	4835      	ldr	r0, [pc, #212]	; (801ee04 <_printf_i+0x244>)
 801ed30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ed34:	6823      	ldr	r3, [r4, #0]
 801ed36:	680e      	ldr	r6, [r1, #0]
 801ed38:	061f      	lsls	r7, r3, #24
 801ed3a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ed3e:	600e      	str	r6, [r1, #0]
 801ed40:	d514      	bpl.n	801ed6c <_printf_i+0x1ac>
 801ed42:	07d9      	lsls	r1, r3, #31
 801ed44:	bf44      	itt	mi
 801ed46:	f043 0320 	orrmi.w	r3, r3, #32
 801ed4a:	6023      	strmi	r3, [r4, #0]
 801ed4c:	b91d      	cbnz	r5, 801ed56 <_printf_i+0x196>
 801ed4e:	6823      	ldr	r3, [r4, #0]
 801ed50:	f023 0320 	bic.w	r3, r3, #32
 801ed54:	6023      	str	r3, [r4, #0]
 801ed56:	2310      	movs	r3, #16
 801ed58:	e7b0      	b.n	801ecbc <_printf_i+0xfc>
 801ed5a:	6823      	ldr	r3, [r4, #0]
 801ed5c:	f043 0320 	orr.w	r3, r3, #32
 801ed60:	6023      	str	r3, [r4, #0]
 801ed62:	2378      	movs	r3, #120	; 0x78
 801ed64:	4828      	ldr	r0, [pc, #160]	; (801ee08 <_printf_i+0x248>)
 801ed66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ed6a:	e7e3      	b.n	801ed34 <_printf_i+0x174>
 801ed6c:	065e      	lsls	r6, r3, #25
 801ed6e:	bf48      	it	mi
 801ed70:	b2ad      	uxthmi	r5, r5
 801ed72:	e7e6      	b.n	801ed42 <_printf_i+0x182>
 801ed74:	4616      	mov	r6, r2
 801ed76:	e7bb      	b.n	801ecf0 <_printf_i+0x130>
 801ed78:	680b      	ldr	r3, [r1, #0]
 801ed7a:	6826      	ldr	r6, [r4, #0]
 801ed7c:	6960      	ldr	r0, [r4, #20]
 801ed7e:	1d1d      	adds	r5, r3, #4
 801ed80:	600d      	str	r5, [r1, #0]
 801ed82:	0635      	lsls	r5, r6, #24
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	d501      	bpl.n	801ed8c <_printf_i+0x1cc>
 801ed88:	6018      	str	r0, [r3, #0]
 801ed8a:	e002      	b.n	801ed92 <_printf_i+0x1d2>
 801ed8c:	0671      	lsls	r1, r6, #25
 801ed8e:	d5fb      	bpl.n	801ed88 <_printf_i+0x1c8>
 801ed90:	8018      	strh	r0, [r3, #0]
 801ed92:	2300      	movs	r3, #0
 801ed94:	6123      	str	r3, [r4, #16]
 801ed96:	4616      	mov	r6, r2
 801ed98:	e7ba      	b.n	801ed10 <_printf_i+0x150>
 801ed9a:	680b      	ldr	r3, [r1, #0]
 801ed9c:	1d1a      	adds	r2, r3, #4
 801ed9e:	600a      	str	r2, [r1, #0]
 801eda0:	681e      	ldr	r6, [r3, #0]
 801eda2:	6862      	ldr	r2, [r4, #4]
 801eda4:	2100      	movs	r1, #0
 801eda6:	4630      	mov	r0, r6
 801eda8:	f7e1 fa1a 	bl	80001e0 <memchr>
 801edac:	b108      	cbz	r0, 801edb2 <_printf_i+0x1f2>
 801edae:	1b80      	subs	r0, r0, r6
 801edb0:	6060      	str	r0, [r4, #4]
 801edb2:	6863      	ldr	r3, [r4, #4]
 801edb4:	6123      	str	r3, [r4, #16]
 801edb6:	2300      	movs	r3, #0
 801edb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801edbc:	e7a8      	b.n	801ed10 <_printf_i+0x150>
 801edbe:	6923      	ldr	r3, [r4, #16]
 801edc0:	4632      	mov	r2, r6
 801edc2:	4649      	mov	r1, r9
 801edc4:	4640      	mov	r0, r8
 801edc6:	47d0      	blx	sl
 801edc8:	3001      	adds	r0, #1
 801edca:	d0ab      	beq.n	801ed24 <_printf_i+0x164>
 801edcc:	6823      	ldr	r3, [r4, #0]
 801edce:	079b      	lsls	r3, r3, #30
 801edd0:	d413      	bmi.n	801edfa <_printf_i+0x23a>
 801edd2:	68e0      	ldr	r0, [r4, #12]
 801edd4:	9b03      	ldr	r3, [sp, #12]
 801edd6:	4298      	cmp	r0, r3
 801edd8:	bfb8      	it	lt
 801edda:	4618      	movlt	r0, r3
 801eddc:	e7a4      	b.n	801ed28 <_printf_i+0x168>
 801edde:	2301      	movs	r3, #1
 801ede0:	4632      	mov	r2, r6
 801ede2:	4649      	mov	r1, r9
 801ede4:	4640      	mov	r0, r8
 801ede6:	47d0      	blx	sl
 801ede8:	3001      	adds	r0, #1
 801edea:	d09b      	beq.n	801ed24 <_printf_i+0x164>
 801edec:	3501      	adds	r5, #1
 801edee:	68e3      	ldr	r3, [r4, #12]
 801edf0:	9903      	ldr	r1, [sp, #12]
 801edf2:	1a5b      	subs	r3, r3, r1
 801edf4:	42ab      	cmp	r3, r5
 801edf6:	dcf2      	bgt.n	801edde <_printf_i+0x21e>
 801edf8:	e7eb      	b.n	801edd2 <_printf_i+0x212>
 801edfa:	2500      	movs	r5, #0
 801edfc:	f104 0619 	add.w	r6, r4, #25
 801ee00:	e7f5      	b.n	801edee <_printf_i+0x22e>
 801ee02:	bf00      	nop
 801ee04:	08027134 	.word	0x08027134
 801ee08:	08027145 	.word	0x08027145

0801ee0c <_scanf_float>:
 801ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee10:	b087      	sub	sp, #28
 801ee12:	4617      	mov	r7, r2
 801ee14:	9303      	str	r3, [sp, #12]
 801ee16:	688b      	ldr	r3, [r1, #8]
 801ee18:	1e5a      	subs	r2, r3, #1
 801ee1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ee1e:	bf83      	ittte	hi
 801ee20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ee24:	195b      	addhi	r3, r3, r5
 801ee26:	9302      	strhi	r3, [sp, #8]
 801ee28:	2300      	movls	r3, #0
 801ee2a:	bf86      	itte	hi
 801ee2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ee30:	608b      	strhi	r3, [r1, #8]
 801ee32:	9302      	strls	r3, [sp, #8]
 801ee34:	680b      	ldr	r3, [r1, #0]
 801ee36:	468b      	mov	fp, r1
 801ee38:	2500      	movs	r5, #0
 801ee3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ee3e:	f84b 3b1c 	str.w	r3, [fp], #28
 801ee42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ee46:	4680      	mov	r8, r0
 801ee48:	460c      	mov	r4, r1
 801ee4a:	465e      	mov	r6, fp
 801ee4c:	46aa      	mov	sl, r5
 801ee4e:	46a9      	mov	r9, r5
 801ee50:	9501      	str	r5, [sp, #4]
 801ee52:	68a2      	ldr	r2, [r4, #8]
 801ee54:	b152      	cbz	r2, 801ee6c <_scanf_float+0x60>
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	781b      	ldrb	r3, [r3, #0]
 801ee5a:	2b4e      	cmp	r3, #78	; 0x4e
 801ee5c:	d864      	bhi.n	801ef28 <_scanf_float+0x11c>
 801ee5e:	2b40      	cmp	r3, #64	; 0x40
 801ee60:	d83c      	bhi.n	801eedc <_scanf_float+0xd0>
 801ee62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ee66:	b2c8      	uxtb	r0, r1
 801ee68:	280e      	cmp	r0, #14
 801ee6a:	d93a      	bls.n	801eee2 <_scanf_float+0xd6>
 801ee6c:	f1b9 0f00 	cmp.w	r9, #0
 801ee70:	d003      	beq.n	801ee7a <_scanf_float+0x6e>
 801ee72:	6823      	ldr	r3, [r4, #0]
 801ee74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ee78:	6023      	str	r3, [r4, #0]
 801ee7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ee7e:	f1ba 0f01 	cmp.w	sl, #1
 801ee82:	f200 8113 	bhi.w	801f0ac <_scanf_float+0x2a0>
 801ee86:	455e      	cmp	r6, fp
 801ee88:	f200 8105 	bhi.w	801f096 <_scanf_float+0x28a>
 801ee8c:	2501      	movs	r5, #1
 801ee8e:	4628      	mov	r0, r5
 801ee90:	b007      	add	sp, #28
 801ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ee9a:	2a0d      	cmp	r2, #13
 801ee9c:	d8e6      	bhi.n	801ee6c <_scanf_float+0x60>
 801ee9e:	a101      	add	r1, pc, #4	; (adr r1, 801eea4 <_scanf_float+0x98>)
 801eea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801eea4:	0801efe3 	.word	0x0801efe3
 801eea8:	0801ee6d 	.word	0x0801ee6d
 801eeac:	0801ee6d 	.word	0x0801ee6d
 801eeb0:	0801ee6d 	.word	0x0801ee6d
 801eeb4:	0801f043 	.word	0x0801f043
 801eeb8:	0801f01b 	.word	0x0801f01b
 801eebc:	0801ee6d 	.word	0x0801ee6d
 801eec0:	0801ee6d 	.word	0x0801ee6d
 801eec4:	0801eff1 	.word	0x0801eff1
 801eec8:	0801ee6d 	.word	0x0801ee6d
 801eecc:	0801ee6d 	.word	0x0801ee6d
 801eed0:	0801ee6d 	.word	0x0801ee6d
 801eed4:	0801ee6d 	.word	0x0801ee6d
 801eed8:	0801efa9 	.word	0x0801efa9
 801eedc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801eee0:	e7db      	b.n	801ee9a <_scanf_float+0x8e>
 801eee2:	290e      	cmp	r1, #14
 801eee4:	d8c2      	bhi.n	801ee6c <_scanf_float+0x60>
 801eee6:	a001      	add	r0, pc, #4	; (adr r0, 801eeec <_scanf_float+0xe0>)
 801eee8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801eeec:	0801ef9b 	.word	0x0801ef9b
 801eef0:	0801ee6d 	.word	0x0801ee6d
 801eef4:	0801ef9b 	.word	0x0801ef9b
 801eef8:	0801f02f 	.word	0x0801f02f
 801eefc:	0801ee6d 	.word	0x0801ee6d
 801ef00:	0801ef49 	.word	0x0801ef49
 801ef04:	0801ef85 	.word	0x0801ef85
 801ef08:	0801ef85 	.word	0x0801ef85
 801ef0c:	0801ef85 	.word	0x0801ef85
 801ef10:	0801ef85 	.word	0x0801ef85
 801ef14:	0801ef85 	.word	0x0801ef85
 801ef18:	0801ef85 	.word	0x0801ef85
 801ef1c:	0801ef85 	.word	0x0801ef85
 801ef20:	0801ef85 	.word	0x0801ef85
 801ef24:	0801ef85 	.word	0x0801ef85
 801ef28:	2b6e      	cmp	r3, #110	; 0x6e
 801ef2a:	d809      	bhi.n	801ef40 <_scanf_float+0x134>
 801ef2c:	2b60      	cmp	r3, #96	; 0x60
 801ef2e:	d8b2      	bhi.n	801ee96 <_scanf_float+0x8a>
 801ef30:	2b54      	cmp	r3, #84	; 0x54
 801ef32:	d077      	beq.n	801f024 <_scanf_float+0x218>
 801ef34:	2b59      	cmp	r3, #89	; 0x59
 801ef36:	d199      	bne.n	801ee6c <_scanf_float+0x60>
 801ef38:	2d07      	cmp	r5, #7
 801ef3a:	d197      	bne.n	801ee6c <_scanf_float+0x60>
 801ef3c:	2508      	movs	r5, #8
 801ef3e:	e029      	b.n	801ef94 <_scanf_float+0x188>
 801ef40:	2b74      	cmp	r3, #116	; 0x74
 801ef42:	d06f      	beq.n	801f024 <_scanf_float+0x218>
 801ef44:	2b79      	cmp	r3, #121	; 0x79
 801ef46:	e7f6      	b.n	801ef36 <_scanf_float+0x12a>
 801ef48:	6821      	ldr	r1, [r4, #0]
 801ef4a:	05c8      	lsls	r0, r1, #23
 801ef4c:	d51a      	bpl.n	801ef84 <_scanf_float+0x178>
 801ef4e:	9b02      	ldr	r3, [sp, #8]
 801ef50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ef54:	6021      	str	r1, [r4, #0]
 801ef56:	f109 0901 	add.w	r9, r9, #1
 801ef5a:	b11b      	cbz	r3, 801ef64 <_scanf_float+0x158>
 801ef5c:	3b01      	subs	r3, #1
 801ef5e:	3201      	adds	r2, #1
 801ef60:	9302      	str	r3, [sp, #8]
 801ef62:	60a2      	str	r2, [r4, #8]
 801ef64:	68a3      	ldr	r3, [r4, #8]
 801ef66:	3b01      	subs	r3, #1
 801ef68:	60a3      	str	r3, [r4, #8]
 801ef6a:	6923      	ldr	r3, [r4, #16]
 801ef6c:	3301      	adds	r3, #1
 801ef6e:	6123      	str	r3, [r4, #16]
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	3b01      	subs	r3, #1
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	607b      	str	r3, [r7, #4]
 801ef78:	f340 8084 	ble.w	801f084 <_scanf_float+0x278>
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	3301      	adds	r3, #1
 801ef80:	603b      	str	r3, [r7, #0]
 801ef82:	e766      	b.n	801ee52 <_scanf_float+0x46>
 801ef84:	eb1a 0f05 	cmn.w	sl, r5
 801ef88:	f47f af70 	bne.w	801ee6c <_scanf_float+0x60>
 801ef8c:	6822      	ldr	r2, [r4, #0]
 801ef8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ef92:	6022      	str	r2, [r4, #0]
 801ef94:	f806 3b01 	strb.w	r3, [r6], #1
 801ef98:	e7e4      	b.n	801ef64 <_scanf_float+0x158>
 801ef9a:	6822      	ldr	r2, [r4, #0]
 801ef9c:	0610      	lsls	r0, r2, #24
 801ef9e:	f57f af65 	bpl.w	801ee6c <_scanf_float+0x60>
 801efa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801efa6:	e7f4      	b.n	801ef92 <_scanf_float+0x186>
 801efa8:	f1ba 0f00 	cmp.w	sl, #0
 801efac:	d10e      	bne.n	801efcc <_scanf_float+0x1c0>
 801efae:	f1b9 0f00 	cmp.w	r9, #0
 801efb2:	d10e      	bne.n	801efd2 <_scanf_float+0x1c6>
 801efb4:	6822      	ldr	r2, [r4, #0]
 801efb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801efba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801efbe:	d108      	bne.n	801efd2 <_scanf_float+0x1c6>
 801efc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801efc4:	6022      	str	r2, [r4, #0]
 801efc6:	f04f 0a01 	mov.w	sl, #1
 801efca:	e7e3      	b.n	801ef94 <_scanf_float+0x188>
 801efcc:	f1ba 0f02 	cmp.w	sl, #2
 801efd0:	d055      	beq.n	801f07e <_scanf_float+0x272>
 801efd2:	2d01      	cmp	r5, #1
 801efd4:	d002      	beq.n	801efdc <_scanf_float+0x1d0>
 801efd6:	2d04      	cmp	r5, #4
 801efd8:	f47f af48 	bne.w	801ee6c <_scanf_float+0x60>
 801efdc:	3501      	adds	r5, #1
 801efde:	b2ed      	uxtb	r5, r5
 801efe0:	e7d8      	b.n	801ef94 <_scanf_float+0x188>
 801efe2:	f1ba 0f01 	cmp.w	sl, #1
 801efe6:	f47f af41 	bne.w	801ee6c <_scanf_float+0x60>
 801efea:	f04f 0a02 	mov.w	sl, #2
 801efee:	e7d1      	b.n	801ef94 <_scanf_float+0x188>
 801eff0:	b97d      	cbnz	r5, 801f012 <_scanf_float+0x206>
 801eff2:	f1b9 0f00 	cmp.w	r9, #0
 801eff6:	f47f af3c 	bne.w	801ee72 <_scanf_float+0x66>
 801effa:	6822      	ldr	r2, [r4, #0]
 801effc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f000:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f004:	f47f af39 	bne.w	801ee7a <_scanf_float+0x6e>
 801f008:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f00c:	6022      	str	r2, [r4, #0]
 801f00e:	2501      	movs	r5, #1
 801f010:	e7c0      	b.n	801ef94 <_scanf_float+0x188>
 801f012:	2d03      	cmp	r5, #3
 801f014:	d0e2      	beq.n	801efdc <_scanf_float+0x1d0>
 801f016:	2d05      	cmp	r5, #5
 801f018:	e7de      	b.n	801efd8 <_scanf_float+0x1cc>
 801f01a:	2d02      	cmp	r5, #2
 801f01c:	f47f af26 	bne.w	801ee6c <_scanf_float+0x60>
 801f020:	2503      	movs	r5, #3
 801f022:	e7b7      	b.n	801ef94 <_scanf_float+0x188>
 801f024:	2d06      	cmp	r5, #6
 801f026:	f47f af21 	bne.w	801ee6c <_scanf_float+0x60>
 801f02a:	2507      	movs	r5, #7
 801f02c:	e7b2      	b.n	801ef94 <_scanf_float+0x188>
 801f02e:	6822      	ldr	r2, [r4, #0]
 801f030:	0591      	lsls	r1, r2, #22
 801f032:	f57f af1b 	bpl.w	801ee6c <_scanf_float+0x60>
 801f036:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f03a:	6022      	str	r2, [r4, #0]
 801f03c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f040:	e7a8      	b.n	801ef94 <_scanf_float+0x188>
 801f042:	6822      	ldr	r2, [r4, #0]
 801f044:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f048:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f04c:	d006      	beq.n	801f05c <_scanf_float+0x250>
 801f04e:	0550      	lsls	r0, r2, #21
 801f050:	f57f af0c 	bpl.w	801ee6c <_scanf_float+0x60>
 801f054:	f1b9 0f00 	cmp.w	r9, #0
 801f058:	f43f af0f 	beq.w	801ee7a <_scanf_float+0x6e>
 801f05c:	0591      	lsls	r1, r2, #22
 801f05e:	bf58      	it	pl
 801f060:	9901      	ldrpl	r1, [sp, #4]
 801f062:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f066:	bf58      	it	pl
 801f068:	eba9 0101 	subpl.w	r1, r9, r1
 801f06c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f070:	bf58      	it	pl
 801f072:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f076:	6022      	str	r2, [r4, #0]
 801f078:	f04f 0900 	mov.w	r9, #0
 801f07c:	e78a      	b.n	801ef94 <_scanf_float+0x188>
 801f07e:	f04f 0a03 	mov.w	sl, #3
 801f082:	e787      	b.n	801ef94 <_scanf_float+0x188>
 801f084:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f088:	4639      	mov	r1, r7
 801f08a:	4640      	mov	r0, r8
 801f08c:	4798      	blx	r3
 801f08e:	2800      	cmp	r0, #0
 801f090:	f43f aedf 	beq.w	801ee52 <_scanf_float+0x46>
 801f094:	e6ea      	b.n	801ee6c <_scanf_float+0x60>
 801f096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f09a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f09e:	463a      	mov	r2, r7
 801f0a0:	4640      	mov	r0, r8
 801f0a2:	4798      	blx	r3
 801f0a4:	6923      	ldr	r3, [r4, #16]
 801f0a6:	3b01      	subs	r3, #1
 801f0a8:	6123      	str	r3, [r4, #16]
 801f0aa:	e6ec      	b.n	801ee86 <_scanf_float+0x7a>
 801f0ac:	1e6b      	subs	r3, r5, #1
 801f0ae:	2b06      	cmp	r3, #6
 801f0b0:	d825      	bhi.n	801f0fe <_scanf_float+0x2f2>
 801f0b2:	2d02      	cmp	r5, #2
 801f0b4:	d836      	bhi.n	801f124 <_scanf_float+0x318>
 801f0b6:	455e      	cmp	r6, fp
 801f0b8:	f67f aee8 	bls.w	801ee8c <_scanf_float+0x80>
 801f0bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f0c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f0c4:	463a      	mov	r2, r7
 801f0c6:	4640      	mov	r0, r8
 801f0c8:	4798      	blx	r3
 801f0ca:	6923      	ldr	r3, [r4, #16]
 801f0cc:	3b01      	subs	r3, #1
 801f0ce:	6123      	str	r3, [r4, #16]
 801f0d0:	e7f1      	b.n	801f0b6 <_scanf_float+0x2aa>
 801f0d2:	9802      	ldr	r0, [sp, #8]
 801f0d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f0d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f0dc:	9002      	str	r0, [sp, #8]
 801f0de:	463a      	mov	r2, r7
 801f0e0:	4640      	mov	r0, r8
 801f0e2:	4798      	blx	r3
 801f0e4:	6923      	ldr	r3, [r4, #16]
 801f0e6:	3b01      	subs	r3, #1
 801f0e8:	6123      	str	r3, [r4, #16]
 801f0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f0ee:	fa5f fa8a 	uxtb.w	sl, sl
 801f0f2:	f1ba 0f02 	cmp.w	sl, #2
 801f0f6:	d1ec      	bne.n	801f0d2 <_scanf_float+0x2c6>
 801f0f8:	3d03      	subs	r5, #3
 801f0fa:	b2ed      	uxtb	r5, r5
 801f0fc:	1b76      	subs	r6, r6, r5
 801f0fe:	6823      	ldr	r3, [r4, #0]
 801f100:	05da      	lsls	r2, r3, #23
 801f102:	d52f      	bpl.n	801f164 <_scanf_float+0x358>
 801f104:	055b      	lsls	r3, r3, #21
 801f106:	d510      	bpl.n	801f12a <_scanf_float+0x31e>
 801f108:	455e      	cmp	r6, fp
 801f10a:	f67f aebf 	bls.w	801ee8c <_scanf_float+0x80>
 801f10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f116:	463a      	mov	r2, r7
 801f118:	4640      	mov	r0, r8
 801f11a:	4798      	blx	r3
 801f11c:	6923      	ldr	r3, [r4, #16]
 801f11e:	3b01      	subs	r3, #1
 801f120:	6123      	str	r3, [r4, #16]
 801f122:	e7f1      	b.n	801f108 <_scanf_float+0x2fc>
 801f124:	46aa      	mov	sl, r5
 801f126:	9602      	str	r6, [sp, #8]
 801f128:	e7df      	b.n	801f0ea <_scanf_float+0x2de>
 801f12a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f12e:	6923      	ldr	r3, [r4, #16]
 801f130:	2965      	cmp	r1, #101	; 0x65
 801f132:	f103 33ff 	add.w	r3, r3, #4294967295
 801f136:	f106 35ff 	add.w	r5, r6, #4294967295
 801f13a:	6123      	str	r3, [r4, #16]
 801f13c:	d00c      	beq.n	801f158 <_scanf_float+0x34c>
 801f13e:	2945      	cmp	r1, #69	; 0x45
 801f140:	d00a      	beq.n	801f158 <_scanf_float+0x34c>
 801f142:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f146:	463a      	mov	r2, r7
 801f148:	4640      	mov	r0, r8
 801f14a:	4798      	blx	r3
 801f14c:	6923      	ldr	r3, [r4, #16]
 801f14e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f152:	3b01      	subs	r3, #1
 801f154:	1eb5      	subs	r5, r6, #2
 801f156:	6123      	str	r3, [r4, #16]
 801f158:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f15c:	463a      	mov	r2, r7
 801f15e:	4640      	mov	r0, r8
 801f160:	4798      	blx	r3
 801f162:	462e      	mov	r6, r5
 801f164:	6825      	ldr	r5, [r4, #0]
 801f166:	f015 0510 	ands.w	r5, r5, #16
 801f16a:	d158      	bne.n	801f21e <_scanf_float+0x412>
 801f16c:	7035      	strb	r5, [r6, #0]
 801f16e:	6823      	ldr	r3, [r4, #0]
 801f170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f178:	d11c      	bne.n	801f1b4 <_scanf_float+0x3a8>
 801f17a:	9b01      	ldr	r3, [sp, #4]
 801f17c:	454b      	cmp	r3, r9
 801f17e:	eba3 0209 	sub.w	r2, r3, r9
 801f182:	d124      	bne.n	801f1ce <_scanf_float+0x3c2>
 801f184:	2200      	movs	r2, #0
 801f186:	4659      	mov	r1, fp
 801f188:	4640      	mov	r0, r8
 801f18a:	f001 f813 	bl	80201b4 <_strtod_r>
 801f18e:	9b03      	ldr	r3, [sp, #12]
 801f190:	6821      	ldr	r1, [r4, #0]
 801f192:	681b      	ldr	r3, [r3, #0]
 801f194:	f011 0f02 	tst.w	r1, #2
 801f198:	ec57 6b10 	vmov	r6, r7, d0
 801f19c:	f103 0204 	add.w	r2, r3, #4
 801f1a0:	d020      	beq.n	801f1e4 <_scanf_float+0x3d8>
 801f1a2:	9903      	ldr	r1, [sp, #12]
 801f1a4:	600a      	str	r2, [r1, #0]
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	e9c3 6700 	strd	r6, r7, [r3]
 801f1ac:	68e3      	ldr	r3, [r4, #12]
 801f1ae:	3301      	adds	r3, #1
 801f1b0:	60e3      	str	r3, [r4, #12]
 801f1b2:	e66c      	b.n	801ee8e <_scanf_float+0x82>
 801f1b4:	9b04      	ldr	r3, [sp, #16]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d0e4      	beq.n	801f184 <_scanf_float+0x378>
 801f1ba:	9905      	ldr	r1, [sp, #20]
 801f1bc:	230a      	movs	r3, #10
 801f1be:	462a      	mov	r2, r5
 801f1c0:	3101      	adds	r1, #1
 801f1c2:	4640      	mov	r0, r8
 801f1c4:	f001 f880 	bl	80202c8 <_strtol_r>
 801f1c8:	9b04      	ldr	r3, [sp, #16]
 801f1ca:	9e05      	ldr	r6, [sp, #20]
 801f1cc:	1ac2      	subs	r2, r0, r3
 801f1ce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f1d2:	429e      	cmp	r6, r3
 801f1d4:	bf28      	it	cs
 801f1d6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f1da:	4912      	ldr	r1, [pc, #72]	; (801f224 <_scanf_float+0x418>)
 801f1dc:	4630      	mov	r0, r6
 801f1de:	f000 f8fd 	bl	801f3dc <siprintf>
 801f1e2:	e7cf      	b.n	801f184 <_scanf_float+0x378>
 801f1e4:	f011 0f04 	tst.w	r1, #4
 801f1e8:	9903      	ldr	r1, [sp, #12]
 801f1ea:	600a      	str	r2, [r1, #0]
 801f1ec:	d1db      	bne.n	801f1a6 <_scanf_float+0x39a>
 801f1ee:	f8d3 8000 	ldr.w	r8, [r3]
 801f1f2:	ee10 2a10 	vmov	r2, s0
 801f1f6:	ee10 0a10 	vmov	r0, s0
 801f1fa:	463b      	mov	r3, r7
 801f1fc:	4639      	mov	r1, r7
 801f1fe:	f7e1 fc95 	bl	8000b2c <__aeabi_dcmpun>
 801f202:	b128      	cbz	r0, 801f210 <_scanf_float+0x404>
 801f204:	4808      	ldr	r0, [pc, #32]	; (801f228 <_scanf_float+0x41c>)
 801f206:	f000 f8e3 	bl	801f3d0 <nanf>
 801f20a:	ed88 0a00 	vstr	s0, [r8]
 801f20e:	e7cd      	b.n	801f1ac <_scanf_float+0x3a0>
 801f210:	4630      	mov	r0, r6
 801f212:	4639      	mov	r1, r7
 801f214:	f7e1 fce8 	bl	8000be8 <__aeabi_d2f>
 801f218:	f8c8 0000 	str.w	r0, [r8]
 801f21c:	e7c6      	b.n	801f1ac <_scanf_float+0x3a0>
 801f21e:	2500      	movs	r5, #0
 801f220:	e635      	b.n	801ee8e <_scanf_float+0x82>
 801f222:	bf00      	nop
 801f224:	08027156 	.word	0x08027156
 801f228:	08027263 	.word	0x08027263

0801f22c <iprintf>:
 801f22c:	b40f      	push	{r0, r1, r2, r3}
 801f22e:	4b0a      	ldr	r3, [pc, #40]	; (801f258 <iprintf+0x2c>)
 801f230:	b513      	push	{r0, r1, r4, lr}
 801f232:	681c      	ldr	r4, [r3, #0]
 801f234:	b124      	cbz	r4, 801f240 <iprintf+0x14>
 801f236:	69a3      	ldr	r3, [r4, #24]
 801f238:	b913      	cbnz	r3, 801f240 <iprintf+0x14>
 801f23a:	4620      	mov	r0, r4
 801f23c:	f7fe ffca 	bl	801e1d4 <__sinit>
 801f240:	ab05      	add	r3, sp, #20
 801f242:	9a04      	ldr	r2, [sp, #16]
 801f244:	68a1      	ldr	r1, [r4, #8]
 801f246:	9301      	str	r3, [sp, #4]
 801f248:	4620      	mov	r0, r4
 801f24a:	f003 fb99 	bl	8022980 <_vfiprintf_r>
 801f24e:	b002      	add	sp, #8
 801f250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f254:	b004      	add	sp, #16
 801f256:	4770      	bx	lr
 801f258:	200003b8 	.word	0x200003b8

0801f25c <rand>:
 801f25c:	4b17      	ldr	r3, [pc, #92]	; (801f2bc <rand+0x60>)
 801f25e:	b510      	push	{r4, lr}
 801f260:	681c      	ldr	r4, [r3, #0]
 801f262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f264:	b9b3      	cbnz	r3, 801f294 <rand+0x38>
 801f266:	2018      	movs	r0, #24
 801f268:	f7ff f876 	bl	801e358 <malloc>
 801f26c:	63a0      	str	r0, [r4, #56]	; 0x38
 801f26e:	b928      	cbnz	r0, 801f27c <rand+0x20>
 801f270:	4602      	mov	r2, r0
 801f272:	4b13      	ldr	r3, [pc, #76]	; (801f2c0 <rand+0x64>)
 801f274:	4813      	ldr	r0, [pc, #76]	; (801f2c4 <rand+0x68>)
 801f276:	214e      	movs	r1, #78	; 0x4e
 801f278:	f001 f83a 	bl	80202f0 <__assert_func>
 801f27c:	4a12      	ldr	r2, [pc, #72]	; (801f2c8 <rand+0x6c>)
 801f27e:	4b13      	ldr	r3, [pc, #76]	; (801f2cc <rand+0x70>)
 801f280:	e9c0 2300 	strd	r2, r3, [r0]
 801f284:	4b12      	ldr	r3, [pc, #72]	; (801f2d0 <rand+0x74>)
 801f286:	6083      	str	r3, [r0, #8]
 801f288:	230b      	movs	r3, #11
 801f28a:	8183      	strh	r3, [r0, #12]
 801f28c:	2201      	movs	r2, #1
 801f28e:	2300      	movs	r3, #0
 801f290:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f294:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f296:	480f      	ldr	r0, [pc, #60]	; (801f2d4 <rand+0x78>)
 801f298:	690a      	ldr	r2, [r1, #16]
 801f29a:	694b      	ldr	r3, [r1, #20]
 801f29c:	4c0e      	ldr	r4, [pc, #56]	; (801f2d8 <rand+0x7c>)
 801f29e:	4350      	muls	r0, r2
 801f2a0:	fb04 0003 	mla	r0, r4, r3, r0
 801f2a4:	fba2 3404 	umull	r3, r4, r2, r4
 801f2a8:	1c5a      	adds	r2, r3, #1
 801f2aa:	4404      	add	r4, r0
 801f2ac:	f144 0000 	adc.w	r0, r4, #0
 801f2b0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f2b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f2b8:	bd10      	pop	{r4, pc}
 801f2ba:	bf00      	nop
 801f2bc:	200003b8 	.word	0x200003b8
 801f2c0:	0802715b 	.word	0x0802715b
 801f2c4:	08027172 	.word	0x08027172
 801f2c8:	abcd330e 	.word	0xabcd330e
 801f2cc:	e66d1234 	.word	0xe66d1234
 801f2d0:	0005deec 	.word	0x0005deec
 801f2d4:	5851f42d 	.word	0x5851f42d
 801f2d8:	4c957f2d 	.word	0x4c957f2d

0801f2dc <cleanup_glue>:
 801f2dc:	b538      	push	{r3, r4, r5, lr}
 801f2de:	460c      	mov	r4, r1
 801f2e0:	6809      	ldr	r1, [r1, #0]
 801f2e2:	4605      	mov	r5, r0
 801f2e4:	b109      	cbz	r1, 801f2ea <cleanup_glue+0xe>
 801f2e6:	f7ff fff9 	bl	801f2dc <cleanup_glue>
 801f2ea:	4621      	mov	r1, r4
 801f2ec:	4628      	mov	r0, r5
 801f2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f2f2:	f7ff b877 	b.w	801e3e4 <_free_r>
	...

0801f2f8 <_reclaim_reent>:
 801f2f8:	4b2c      	ldr	r3, [pc, #176]	; (801f3ac <_reclaim_reent+0xb4>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	4283      	cmp	r3, r0
 801f2fe:	b570      	push	{r4, r5, r6, lr}
 801f300:	4604      	mov	r4, r0
 801f302:	d051      	beq.n	801f3a8 <_reclaim_reent+0xb0>
 801f304:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f306:	b143      	cbz	r3, 801f31a <_reclaim_reent+0x22>
 801f308:	68db      	ldr	r3, [r3, #12]
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d14a      	bne.n	801f3a4 <_reclaim_reent+0xac>
 801f30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f310:	6819      	ldr	r1, [r3, #0]
 801f312:	b111      	cbz	r1, 801f31a <_reclaim_reent+0x22>
 801f314:	4620      	mov	r0, r4
 801f316:	f7ff f865 	bl	801e3e4 <_free_r>
 801f31a:	6961      	ldr	r1, [r4, #20]
 801f31c:	b111      	cbz	r1, 801f324 <_reclaim_reent+0x2c>
 801f31e:	4620      	mov	r0, r4
 801f320:	f7ff f860 	bl	801e3e4 <_free_r>
 801f324:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f326:	b111      	cbz	r1, 801f32e <_reclaim_reent+0x36>
 801f328:	4620      	mov	r0, r4
 801f32a:	f7ff f85b 	bl	801e3e4 <_free_r>
 801f32e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f330:	b111      	cbz	r1, 801f338 <_reclaim_reent+0x40>
 801f332:	4620      	mov	r0, r4
 801f334:	f7ff f856 	bl	801e3e4 <_free_r>
 801f338:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f33a:	b111      	cbz	r1, 801f342 <_reclaim_reent+0x4a>
 801f33c:	4620      	mov	r0, r4
 801f33e:	f7ff f851 	bl	801e3e4 <_free_r>
 801f342:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f344:	b111      	cbz	r1, 801f34c <_reclaim_reent+0x54>
 801f346:	4620      	mov	r0, r4
 801f348:	f7ff f84c 	bl	801e3e4 <_free_r>
 801f34c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f34e:	b111      	cbz	r1, 801f356 <_reclaim_reent+0x5e>
 801f350:	4620      	mov	r0, r4
 801f352:	f7ff f847 	bl	801e3e4 <_free_r>
 801f356:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f358:	b111      	cbz	r1, 801f360 <_reclaim_reent+0x68>
 801f35a:	4620      	mov	r0, r4
 801f35c:	f7ff f842 	bl	801e3e4 <_free_r>
 801f360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f362:	b111      	cbz	r1, 801f36a <_reclaim_reent+0x72>
 801f364:	4620      	mov	r0, r4
 801f366:	f7ff f83d 	bl	801e3e4 <_free_r>
 801f36a:	69a3      	ldr	r3, [r4, #24]
 801f36c:	b1e3      	cbz	r3, 801f3a8 <_reclaim_reent+0xb0>
 801f36e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f370:	4620      	mov	r0, r4
 801f372:	4798      	blx	r3
 801f374:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f376:	b1b9      	cbz	r1, 801f3a8 <_reclaim_reent+0xb0>
 801f378:	4620      	mov	r0, r4
 801f37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f37e:	f7ff bfad 	b.w	801f2dc <cleanup_glue>
 801f382:	5949      	ldr	r1, [r1, r5]
 801f384:	b941      	cbnz	r1, 801f398 <_reclaim_reent+0xa0>
 801f386:	3504      	adds	r5, #4
 801f388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f38a:	2d80      	cmp	r5, #128	; 0x80
 801f38c:	68d9      	ldr	r1, [r3, #12]
 801f38e:	d1f8      	bne.n	801f382 <_reclaim_reent+0x8a>
 801f390:	4620      	mov	r0, r4
 801f392:	f7ff f827 	bl	801e3e4 <_free_r>
 801f396:	e7ba      	b.n	801f30e <_reclaim_reent+0x16>
 801f398:	680e      	ldr	r6, [r1, #0]
 801f39a:	4620      	mov	r0, r4
 801f39c:	f7ff f822 	bl	801e3e4 <_free_r>
 801f3a0:	4631      	mov	r1, r6
 801f3a2:	e7ef      	b.n	801f384 <_reclaim_reent+0x8c>
 801f3a4:	2500      	movs	r5, #0
 801f3a6:	e7ef      	b.n	801f388 <_reclaim_reent+0x90>
 801f3a8:	bd70      	pop	{r4, r5, r6, pc}
 801f3aa:	bf00      	nop
 801f3ac:	200003b8 	.word	0x200003b8

0801f3b0 <_sbrk_r>:
 801f3b0:	b538      	push	{r3, r4, r5, lr}
 801f3b2:	4d06      	ldr	r5, [pc, #24]	; (801f3cc <_sbrk_r+0x1c>)
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	4604      	mov	r4, r0
 801f3b8:	4608      	mov	r0, r1
 801f3ba:	602b      	str	r3, [r5, #0]
 801f3bc:	f7e7 fa8c 	bl	80068d8 <_sbrk>
 801f3c0:	1c43      	adds	r3, r0, #1
 801f3c2:	d102      	bne.n	801f3ca <_sbrk_r+0x1a>
 801f3c4:	682b      	ldr	r3, [r5, #0]
 801f3c6:	b103      	cbz	r3, 801f3ca <_sbrk_r+0x1a>
 801f3c8:	6023      	str	r3, [r4, #0]
 801f3ca:	bd38      	pop	{r3, r4, r5, pc}
 801f3cc:	2000e190 	.word	0x2000e190

0801f3d0 <nanf>:
 801f3d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f3d8 <nanf+0x8>
 801f3d4:	4770      	bx	lr
 801f3d6:	bf00      	nop
 801f3d8:	7fc00000 	.word	0x7fc00000

0801f3dc <siprintf>:
 801f3dc:	b40e      	push	{r1, r2, r3}
 801f3de:	b500      	push	{lr}
 801f3e0:	b09c      	sub	sp, #112	; 0x70
 801f3e2:	ab1d      	add	r3, sp, #116	; 0x74
 801f3e4:	9002      	str	r0, [sp, #8]
 801f3e6:	9006      	str	r0, [sp, #24]
 801f3e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f3ec:	4809      	ldr	r0, [pc, #36]	; (801f414 <siprintf+0x38>)
 801f3ee:	9107      	str	r1, [sp, #28]
 801f3f0:	9104      	str	r1, [sp, #16]
 801f3f2:	4909      	ldr	r1, [pc, #36]	; (801f418 <siprintf+0x3c>)
 801f3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801f3f8:	9105      	str	r1, [sp, #20]
 801f3fa:	6800      	ldr	r0, [r0, #0]
 801f3fc:	9301      	str	r3, [sp, #4]
 801f3fe:	a902      	add	r1, sp, #8
 801f400:	f002 ffc2 	bl	8022388 <_svfiprintf_r>
 801f404:	9b02      	ldr	r3, [sp, #8]
 801f406:	2200      	movs	r2, #0
 801f408:	701a      	strb	r2, [r3, #0]
 801f40a:	b01c      	add	sp, #112	; 0x70
 801f40c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f410:	b003      	add	sp, #12
 801f412:	4770      	bx	lr
 801f414:	200003b8 	.word	0x200003b8
 801f418:	ffff0208 	.word	0xffff0208

0801f41c <siscanf>:
 801f41c:	b40e      	push	{r1, r2, r3}
 801f41e:	b510      	push	{r4, lr}
 801f420:	b09f      	sub	sp, #124	; 0x7c
 801f422:	ac21      	add	r4, sp, #132	; 0x84
 801f424:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f428:	f854 2b04 	ldr.w	r2, [r4], #4
 801f42c:	9201      	str	r2, [sp, #4]
 801f42e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f432:	9004      	str	r0, [sp, #16]
 801f434:	9008      	str	r0, [sp, #32]
 801f436:	f7e0 fecb 	bl	80001d0 <strlen>
 801f43a:	4b0c      	ldr	r3, [pc, #48]	; (801f46c <siscanf+0x50>)
 801f43c:	9005      	str	r0, [sp, #20]
 801f43e:	9009      	str	r0, [sp, #36]	; 0x24
 801f440:	930d      	str	r3, [sp, #52]	; 0x34
 801f442:	480b      	ldr	r0, [pc, #44]	; (801f470 <siscanf+0x54>)
 801f444:	9a01      	ldr	r2, [sp, #4]
 801f446:	6800      	ldr	r0, [r0, #0]
 801f448:	9403      	str	r4, [sp, #12]
 801f44a:	2300      	movs	r3, #0
 801f44c:	9311      	str	r3, [sp, #68]	; 0x44
 801f44e:	9316      	str	r3, [sp, #88]	; 0x58
 801f450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f454:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f458:	a904      	add	r1, sp, #16
 801f45a:	4623      	mov	r3, r4
 801f45c:	f003 f8ee 	bl	802263c <__ssvfiscanf_r>
 801f460:	b01f      	add	sp, #124	; 0x7c
 801f462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f466:	b003      	add	sp, #12
 801f468:	4770      	bx	lr
 801f46a:	bf00      	nop
 801f46c:	0801f497 	.word	0x0801f497
 801f470:	200003b8 	.word	0x200003b8

0801f474 <__sread>:
 801f474:	b510      	push	{r4, lr}
 801f476:	460c      	mov	r4, r1
 801f478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f47c:	f003 fcfc 	bl	8022e78 <_read_r>
 801f480:	2800      	cmp	r0, #0
 801f482:	bfab      	itete	ge
 801f484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f486:	89a3      	ldrhlt	r3, [r4, #12]
 801f488:	181b      	addge	r3, r3, r0
 801f48a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f48e:	bfac      	ite	ge
 801f490:	6563      	strge	r3, [r4, #84]	; 0x54
 801f492:	81a3      	strhlt	r3, [r4, #12]
 801f494:	bd10      	pop	{r4, pc}

0801f496 <__seofread>:
 801f496:	2000      	movs	r0, #0
 801f498:	4770      	bx	lr

0801f49a <__swrite>:
 801f49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f49e:	461f      	mov	r7, r3
 801f4a0:	898b      	ldrh	r3, [r1, #12]
 801f4a2:	05db      	lsls	r3, r3, #23
 801f4a4:	4605      	mov	r5, r0
 801f4a6:	460c      	mov	r4, r1
 801f4a8:	4616      	mov	r6, r2
 801f4aa:	d505      	bpl.n	801f4b8 <__swrite+0x1e>
 801f4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4b0:	2302      	movs	r3, #2
 801f4b2:	2200      	movs	r2, #0
 801f4b4:	f002 fa12 	bl	80218dc <_lseek_r>
 801f4b8:	89a3      	ldrh	r3, [r4, #12]
 801f4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f4be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f4c2:	81a3      	strh	r3, [r4, #12]
 801f4c4:	4632      	mov	r2, r6
 801f4c6:	463b      	mov	r3, r7
 801f4c8:	4628      	mov	r0, r5
 801f4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f4ce:	f000 befd 	b.w	80202cc <_write_r>

0801f4d2 <__sseek>:
 801f4d2:	b510      	push	{r4, lr}
 801f4d4:	460c      	mov	r4, r1
 801f4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4da:	f002 f9ff 	bl	80218dc <_lseek_r>
 801f4de:	1c43      	adds	r3, r0, #1
 801f4e0:	89a3      	ldrh	r3, [r4, #12]
 801f4e2:	bf15      	itete	ne
 801f4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f4ee:	81a3      	strheq	r3, [r4, #12]
 801f4f0:	bf18      	it	ne
 801f4f2:	81a3      	strhne	r3, [r4, #12]
 801f4f4:	bd10      	pop	{r4, pc}

0801f4f6 <__sclose>:
 801f4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4fa:	f000 bf17 	b.w	802032c <_close_r>

0801f4fe <strchr>:
 801f4fe:	b2c9      	uxtb	r1, r1
 801f500:	4603      	mov	r3, r0
 801f502:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f506:	b11a      	cbz	r2, 801f510 <strchr+0x12>
 801f508:	428a      	cmp	r2, r1
 801f50a:	d1f9      	bne.n	801f500 <strchr+0x2>
 801f50c:	4618      	mov	r0, r3
 801f50e:	4770      	bx	lr
 801f510:	2900      	cmp	r1, #0
 801f512:	bf18      	it	ne
 801f514:	2300      	movne	r3, #0
 801f516:	e7f9      	b.n	801f50c <strchr+0xe>

0801f518 <strncmp>:
 801f518:	b510      	push	{r4, lr}
 801f51a:	b16a      	cbz	r2, 801f538 <strncmp+0x20>
 801f51c:	3901      	subs	r1, #1
 801f51e:	1884      	adds	r4, r0, r2
 801f520:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f528:	4293      	cmp	r3, r2
 801f52a:	d103      	bne.n	801f534 <strncmp+0x1c>
 801f52c:	42a0      	cmp	r0, r4
 801f52e:	d001      	beq.n	801f534 <strncmp+0x1c>
 801f530:	2b00      	cmp	r3, #0
 801f532:	d1f5      	bne.n	801f520 <strncmp+0x8>
 801f534:	1a98      	subs	r0, r3, r2
 801f536:	bd10      	pop	{r4, pc}
 801f538:	4610      	mov	r0, r2
 801f53a:	e7fc      	b.n	801f536 <strncmp+0x1e>

0801f53c <strncpy>:
 801f53c:	b510      	push	{r4, lr}
 801f53e:	3901      	subs	r1, #1
 801f540:	4603      	mov	r3, r0
 801f542:	b132      	cbz	r2, 801f552 <strncpy+0x16>
 801f544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f548:	f803 4b01 	strb.w	r4, [r3], #1
 801f54c:	3a01      	subs	r2, #1
 801f54e:	2c00      	cmp	r4, #0
 801f550:	d1f7      	bne.n	801f542 <strncpy+0x6>
 801f552:	441a      	add	r2, r3
 801f554:	2100      	movs	r1, #0
 801f556:	4293      	cmp	r3, r2
 801f558:	d100      	bne.n	801f55c <strncpy+0x20>
 801f55a:	bd10      	pop	{r4, pc}
 801f55c:	f803 1b01 	strb.w	r1, [r3], #1
 801f560:	e7f9      	b.n	801f556 <strncpy+0x1a>

0801f562 <sulp>:
 801f562:	b570      	push	{r4, r5, r6, lr}
 801f564:	4604      	mov	r4, r0
 801f566:	460d      	mov	r5, r1
 801f568:	ec45 4b10 	vmov	d0, r4, r5
 801f56c:	4616      	mov	r6, r2
 801f56e:	f002 fd51 	bl	8022014 <__ulp>
 801f572:	ec51 0b10 	vmov	r0, r1, d0
 801f576:	b17e      	cbz	r6, 801f598 <sulp+0x36>
 801f578:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f57c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f580:	2b00      	cmp	r3, #0
 801f582:	dd09      	ble.n	801f598 <sulp+0x36>
 801f584:	051b      	lsls	r3, r3, #20
 801f586:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f58a:	2400      	movs	r4, #0
 801f58c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f590:	4622      	mov	r2, r4
 801f592:	462b      	mov	r3, r5
 801f594:	f7e1 f830 	bl	80005f8 <__aeabi_dmul>
 801f598:	bd70      	pop	{r4, r5, r6, pc}
 801f59a:	0000      	movs	r0, r0
 801f59c:	0000      	movs	r0, r0
	...

0801f5a0 <_strtod_l>:
 801f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5a4:	b0a3      	sub	sp, #140	; 0x8c
 801f5a6:	461f      	mov	r7, r3
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	931e      	str	r3, [sp, #120]	; 0x78
 801f5ac:	4ba4      	ldr	r3, [pc, #656]	; (801f840 <_strtod_l+0x2a0>)
 801f5ae:	9219      	str	r2, [sp, #100]	; 0x64
 801f5b0:	681b      	ldr	r3, [r3, #0]
 801f5b2:	9307      	str	r3, [sp, #28]
 801f5b4:	4604      	mov	r4, r0
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	4688      	mov	r8, r1
 801f5ba:	f7e0 fe09 	bl	80001d0 <strlen>
 801f5be:	f04f 0a00 	mov.w	sl, #0
 801f5c2:	4605      	mov	r5, r0
 801f5c4:	f04f 0b00 	mov.w	fp, #0
 801f5c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f5cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f5ce:	781a      	ldrb	r2, [r3, #0]
 801f5d0:	2a2b      	cmp	r2, #43	; 0x2b
 801f5d2:	d04c      	beq.n	801f66e <_strtod_l+0xce>
 801f5d4:	d839      	bhi.n	801f64a <_strtod_l+0xaa>
 801f5d6:	2a0d      	cmp	r2, #13
 801f5d8:	d832      	bhi.n	801f640 <_strtod_l+0xa0>
 801f5da:	2a08      	cmp	r2, #8
 801f5dc:	d832      	bhi.n	801f644 <_strtod_l+0xa4>
 801f5de:	2a00      	cmp	r2, #0
 801f5e0:	d03c      	beq.n	801f65c <_strtod_l+0xbc>
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	930e      	str	r3, [sp, #56]	; 0x38
 801f5e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f5e8:	7833      	ldrb	r3, [r6, #0]
 801f5ea:	2b30      	cmp	r3, #48	; 0x30
 801f5ec:	f040 80b4 	bne.w	801f758 <_strtod_l+0x1b8>
 801f5f0:	7873      	ldrb	r3, [r6, #1]
 801f5f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f5f6:	2b58      	cmp	r3, #88	; 0x58
 801f5f8:	d16c      	bne.n	801f6d4 <_strtod_l+0x134>
 801f5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5fc:	9301      	str	r3, [sp, #4]
 801f5fe:	ab1e      	add	r3, sp, #120	; 0x78
 801f600:	9702      	str	r7, [sp, #8]
 801f602:	9300      	str	r3, [sp, #0]
 801f604:	4a8f      	ldr	r2, [pc, #572]	; (801f844 <_strtod_l+0x2a4>)
 801f606:	ab1f      	add	r3, sp, #124	; 0x7c
 801f608:	a91d      	add	r1, sp, #116	; 0x74
 801f60a:	4620      	mov	r0, r4
 801f60c:	f001 fe5a 	bl	80212c4 <__gethex>
 801f610:	f010 0707 	ands.w	r7, r0, #7
 801f614:	4605      	mov	r5, r0
 801f616:	d005      	beq.n	801f624 <_strtod_l+0x84>
 801f618:	2f06      	cmp	r7, #6
 801f61a:	d12a      	bne.n	801f672 <_strtod_l+0xd2>
 801f61c:	3601      	adds	r6, #1
 801f61e:	2300      	movs	r3, #0
 801f620:	961d      	str	r6, [sp, #116]	; 0x74
 801f622:	930e      	str	r3, [sp, #56]	; 0x38
 801f624:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f626:	2b00      	cmp	r3, #0
 801f628:	f040 8596 	bne.w	8020158 <_strtod_l+0xbb8>
 801f62c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f62e:	b1db      	cbz	r3, 801f668 <_strtod_l+0xc8>
 801f630:	4652      	mov	r2, sl
 801f632:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801f636:	ec43 2b10 	vmov	d0, r2, r3
 801f63a:	b023      	add	sp, #140	; 0x8c
 801f63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f640:	2a20      	cmp	r2, #32
 801f642:	d1ce      	bne.n	801f5e2 <_strtod_l+0x42>
 801f644:	3301      	adds	r3, #1
 801f646:	931d      	str	r3, [sp, #116]	; 0x74
 801f648:	e7c0      	b.n	801f5cc <_strtod_l+0x2c>
 801f64a:	2a2d      	cmp	r2, #45	; 0x2d
 801f64c:	d1c9      	bne.n	801f5e2 <_strtod_l+0x42>
 801f64e:	2201      	movs	r2, #1
 801f650:	920e      	str	r2, [sp, #56]	; 0x38
 801f652:	1c5a      	adds	r2, r3, #1
 801f654:	921d      	str	r2, [sp, #116]	; 0x74
 801f656:	785b      	ldrb	r3, [r3, #1]
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d1c4      	bne.n	801f5e6 <_strtod_l+0x46>
 801f65c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f65e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f662:	2b00      	cmp	r3, #0
 801f664:	f040 8576 	bne.w	8020154 <_strtod_l+0xbb4>
 801f668:	4652      	mov	r2, sl
 801f66a:	465b      	mov	r3, fp
 801f66c:	e7e3      	b.n	801f636 <_strtod_l+0x96>
 801f66e:	2200      	movs	r2, #0
 801f670:	e7ee      	b.n	801f650 <_strtod_l+0xb0>
 801f672:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f674:	b13a      	cbz	r2, 801f686 <_strtod_l+0xe6>
 801f676:	2135      	movs	r1, #53	; 0x35
 801f678:	a820      	add	r0, sp, #128	; 0x80
 801f67a:	f002 fdd6 	bl	802222a <__copybits>
 801f67e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f680:	4620      	mov	r0, r4
 801f682:	f002 f99b 	bl	80219bc <_Bfree>
 801f686:	3f01      	subs	r7, #1
 801f688:	2f05      	cmp	r7, #5
 801f68a:	d807      	bhi.n	801f69c <_strtod_l+0xfc>
 801f68c:	e8df f007 	tbb	[pc, r7]
 801f690:	1d180b0e 	.word	0x1d180b0e
 801f694:	030e      	.short	0x030e
 801f696:	f04f 0b00 	mov.w	fp, #0
 801f69a:	46da      	mov	sl, fp
 801f69c:	0728      	lsls	r0, r5, #28
 801f69e:	d5c1      	bpl.n	801f624 <_strtod_l+0x84>
 801f6a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801f6a4:	e7be      	b.n	801f624 <_strtod_l+0x84>
 801f6a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801f6aa:	e7f7      	b.n	801f69c <_strtod_l+0xfc>
 801f6ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801f6b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f6b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f6b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f6ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f6be:	e7ed      	b.n	801f69c <_strtod_l+0xfc>
 801f6c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801f848 <_strtod_l+0x2a8>
 801f6c4:	f04f 0a00 	mov.w	sl, #0
 801f6c8:	e7e8      	b.n	801f69c <_strtod_l+0xfc>
 801f6ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801f6ce:	f04f 3aff 	mov.w	sl, #4294967295
 801f6d2:	e7e3      	b.n	801f69c <_strtod_l+0xfc>
 801f6d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f6d6:	1c5a      	adds	r2, r3, #1
 801f6d8:	921d      	str	r2, [sp, #116]	; 0x74
 801f6da:	785b      	ldrb	r3, [r3, #1]
 801f6dc:	2b30      	cmp	r3, #48	; 0x30
 801f6de:	d0f9      	beq.n	801f6d4 <_strtod_l+0x134>
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d09f      	beq.n	801f624 <_strtod_l+0x84>
 801f6e4:	2301      	movs	r3, #1
 801f6e6:	f04f 0900 	mov.w	r9, #0
 801f6ea:	9304      	str	r3, [sp, #16]
 801f6ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f6ee:	930a      	str	r3, [sp, #40]	; 0x28
 801f6f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f6f4:	464f      	mov	r7, r9
 801f6f6:	220a      	movs	r2, #10
 801f6f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f6fa:	7806      	ldrb	r6, [r0, #0]
 801f6fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f700:	b2d9      	uxtb	r1, r3
 801f702:	2909      	cmp	r1, #9
 801f704:	d92a      	bls.n	801f75c <_strtod_l+0x1bc>
 801f706:	9907      	ldr	r1, [sp, #28]
 801f708:	462a      	mov	r2, r5
 801f70a:	f7ff ff05 	bl	801f518 <strncmp>
 801f70e:	b398      	cbz	r0, 801f778 <_strtod_l+0x1d8>
 801f710:	2000      	movs	r0, #0
 801f712:	4633      	mov	r3, r6
 801f714:	463d      	mov	r5, r7
 801f716:	9007      	str	r0, [sp, #28]
 801f718:	4602      	mov	r2, r0
 801f71a:	2b65      	cmp	r3, #101	; 0x65
 801f71c:	d001      	beq.n	801f722 <_strtod_l+0x182>
 801f71e:	2b45      	cmp	r3, #69	; 0x45
 801f720:	d118      	bne.n	801f754 <_strtod_l+0x1b4>
 801f722:	b91d      	cbnz	r5, 801f72c <_strtod_l+0x18c>
 801f724:	9b04      	ldr	r3, [sp, #16]
 801f726:	4303      	orrs	r3, r0
 801f728:	d098      	beq.n	801f65c <_strtod_l+0xbc>
 801f72a:	2500      	movs	r5, #0
 801f72c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801f730:	f108 0301 	add.w	r3, r8, #1
 801f734:	931d      	str	r3, [sp, #116]	; 0x74
 801f736:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f73a:	2b2b      	cmp	r3, #43	; 0x2b
 801f73c:	d075      	beq.n	801f82a <_strtod_l+0x28a>
 801f73e:	2b2d      	cmp	r3, #45	; 0x2d
 801f740:	d07b      	beq.n	801f83a <_strtod_l+0x29a>
 801f742:	f04f 0c00 	mov.w	ip, #0
 801f746:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801f74a:	2909      	cmp	r1, #9
 801f74c:	f240 8082 	bls.w	801f854 <_strtod_l+0x2b4>
 801f750:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f754:	2600      	movs	r6, #0
 801f756:	e09d      	b.n	801f894 <_strtod_l+0x2f4>
 801f758:	2300      	movs	r3, #0
 801f75a:	e7c4      	b.n	801f6e6 <_strtod_l+0x146>
 801f75c:	2f08      	cmp	r7, #8
 801f75e:	bfd8      	it	le
 801f760:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801f762:	f100 0001 	add.w	r0, r0, #1
 801f766:	bfda      	itte	le
 801f768:	fb02 3301 	mlale	r3, r2, r1, r3
 801f76c:	9309      	strle	r3, [sp, #36]	; 0x24
 801f76e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801f772:	3701      	adds	r7, #1
 801f774:	901d      	str	r0, [sp, #116]	; 0x74
 801f776:	e7bf      	b.n	801f6f8 <_strtod_l+0x158>
 801f778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f77a:	195a      	adds	r2, r3, r5
 801f77c:	921d      	str	r2, [sp, #116]	; 0x74
 801f77e:	5d5b      	ldrb	r3, [r3, r5]
 801f780:	2f00      	cmp	r7, #0
 801f782:	d037      	beq.n	801f7f4 <_strtod_l+0x254>
 801f784:	9007      	str	r0, [sp, #28]
 801f786:	463d      	mov	r5, r7
 801f788:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f78c:	2a09      	cmp	r2, #9
 801f78e:	d912      	bls.n	801f7b6 <_strtod_l+0x216>
 801f790:	2201      	movs	r2, #1
 801f792:	e7c2      	b.n	801f71a <_strtod_l+0x17a>
 801f794:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f796:	1c5a      	adds	r2, r3, #1
 801f798:	921d      	str	r2, [sp, #116]	; 0x74
 801f79a:	785b      	ldrb	r3, [r3, #1]
 801f79c:	3001      	adds	r0, #1
 801f79e:	2b30      	cmp	r3, #48	; 0x30
 801f7a0:	d0f8      	beq.n	801f794 <_strtod_l+0x1f4>
 801f7a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801f7a6:	2a08      	cmp	r2, #8
 801f7a8:	f200 84db 	bhi.w	8020162 <_strtod_l+0xbc2>
 801f7ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f7ae:	9007      	str	r0, [sp, #28]
 801f7b0:	2000      	movs	r0, #0
 801f7b2:	920a      	str	r2, [sp, #40]	; 0x28
 801f7b4:	4605      	mov	r5, r0
 801f7b6:	3b30      	subs	r3, #48	; 0x30
 801f7b8:	f100 0201 	add.w	r2, r0, #1
 801f7bc:	d014      	beq.n	801f7e8 <_strtod_l+0x248>
 801f7be:	9907      	ldr	r1, [sp, #28]
 801f7c0:	4411      	add	r1, r2
 801f7c2:	9107      	str	r1, [sp, #28]
 801f7c4:	462a      	mov	r2, r5
 801f7c6:	eb00 0e05 	add.w	lr, r0, r5
 801f7ca:	210a      	movs	r1, #10
 801f7cc:	4572      	cmp	r2, lr
 801f7ce:	d113      	bne.n	801f7f8 <_strtod_l+0x258>
 801f7d0:	182a      	adds	r2, r5, r0
 801f7d2:	2a08      	cmp	r2, #8
 801f7d4:	f105 0501 	add.w	r5, r5, #1
 801f7d8:	4405      	add	r5, r0
 801f7da:	dc1c      	bgt.n	801f816 <_strtod_l+0x276>
 801f7dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f7de:	220a      	movs	r2, #10
 801f7e0:	fb02 3301 	mla	r3, r2, r1, r3
 801f7e4:	9309      	str	r3, [sp, #36]	; 0x24
 801f7e6:	2200      	movs	r2, #0
 801f7e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7ea:	1c59      	adds	r1, r3, #1
 801f7ec:	911d      	str	r1, [sp, #116]	; 0x74
 801f7ee:	785b      	ldrb	r3, [r3, #1]
 801f7f0:	4610      	mov	r0, r2
 801f7f2:	e7c9      	b.n	801f788 <_strtod_l+0x1e8>
 801f7f4:	4638      	mov	r0, r7
 801f7f6:	e7d2      	b.n	801f79e <_strtod_l+0x1fe>
 801f7f8:	2a08      	cmp	r2, #8
 801f7fa:	dc04      	bgt.n	801f806 <_strtod_l+0x266>
 801f7fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f7fe:	434e      	muls	r6, r1
 801f800:	9609      	str	r6, [sp, #36]	; 0x24
 801f802:	3201      	adds	r2, #1
 801f804:	e7e2      	b.n	801f7cc <_strtod_l+0x22c>
 801f806:	f102 0c01 	add.w	ip, r2, #1
 801f80a:	f1bc 0f10 	cmp.w	ip, #16
 801f80e:	bfd8      	it	le
 801f810:	fb01 f909 	mulle.w	r9, r1, r9
 801f814:	e7f5      	b.n	801f802 <_strtod_l+0x262>
 801f816:	2d10      	cmp	r5, #16
 801f818:	bfdc      	itt	le
 801f81a:	220a      	movle	r2, #10
 801f81c:	fb02 3909 	mlale	r9, r2, r9, r3
 801f820:	e7e1      	b.n	801f7e6 <_strtod_l+0x246>
 801f822:	2300      	movs	r3, #0
 801f824:	9307      	str	r3, [sp, #28]
 801f826:	2201      	movs	r2, #1
 801f828:	e77c      	b.n	801f724 <_strtod_l+0x184>
 801f82a:	f04f 0c00 	mov.w	ip, #0
 801f82e:	f108 0302 	add.w	r3, r8, #2
 801f832:	931d      	str	r3, [sp, #116]	; 0x74
 801f834:	f898 3002 	ldrb.w	r3, [r8, #2]
 801f838:	e785      	b.n	801f746 <_strtod_l+0x1a6>
 801f83a:	f04f 0c01 	mov.w	ip, #1
 801f83e:	e7f6      	b.n	801f82e <_strtod_l+0x28e>
 801f840:	0802734c 	.word	0x0802734c
 801f844:	080271d4 	.word	0x080271d4
 801f848:	7ff00000 	.word	0x7ff00000
 801f84c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f84e:	1c59      	adds	r1, r3, #1
 801f850:	911d      	str	r1, [sp, #116]	; 0x74
 801f852:	785b      	ldrb	r3, [r3, #1]
 801f854:	2b30      	cmp	r3, #48	; 0x30
 801f856:	d0f9      	beq.n	801f84c <_strtod_l+0x2ac>
 801f858:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801f85c:	2908      	cmp	r1, #8
 801f85e:	f63f af79 	bhi.w	801f754 <_strtod_l+0x1b4>
 801f862:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801f866:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f868:	9308      	str	r3, [sp, #32]
 801f86a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f86c:	1c59      	adds	r1, r3, #1
 801f86e:	911d      	str	r1, [sp, #116]	; 0x74
 801f870:	785b      	ldrb	r3, [r3, #1]
 801f872:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801f876:	2e09      	cmp	r6, #9
 801f878:	d937      	bls.n	801f8ea <_strtod_l+0x34a>
 801f87a:	9e08      	ldr	r6, [sp, #32]
 801f87c:	1b89      	subs	r1, r1, r6
 801f87e:	2908      	cmp	r1, #8
 801f880:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801f884:	dc02      	bgt.n	801f88c <_strtod_l+0x2ec>
 801f886:	4576      	cmp	r6, lr
 801f888:	bfa8      	it	ge
 801f88a:	4676      	movge	r6, lr
 801f88c:	f1bc 0f00 	cmp.w	ip, #0
 801f890:	d000      	beq.n	801f894 <_strtod_l+0x2f4>
 801f892:	4276      	negs	r6, r6
 801f894:	2d00      	cmp	r5, #0
 801f896:	d14f      	bne.n	801f938 <_strtod_l+0x398>
 801f898:	9904      	ldr	r1, [sp, #16]
 801f89a:	4301      	orrs	r1, r0
 801f89c:	f47f aec2 	bne.w	801f624 <_strtod_l+0x84>
 801f8a0:	2a00      	cmp	r2, #0
 801f8a2:	f47f aedb 	bne.w	801f65c <_strtod_l+0xbc>
 801f8a6:	2b69      	cmp	r3, #105	; 0x69
 801f8a8:	d027      	beq.n	801f8fa <_strtod_l+0x35a>
 801f8aa:	dc24      	bgt.n	801f8f6 <_strtod_l+0x356>
 801f8ac:	2b49      	cmp	r3, #73	; 0x49
 801f8ae:	d024      	beq.n	801f8fa <_strtod_l+0x35a>
 801f8b0:	2b4e      	cmp	r3, #78	; 0x4e
 801f8b2:	f47f aed3 	bne.w	801f65c <_strtod_l+0xbc>
 801f8b6:	499e      	ldr	r1, [pc, #632]	; (801fb30 <_strtod_l+0x590>)
 801f8b8:	a81d      	add	r0, sp, #116	; 0x74
 801f8ba:	f001 ff5b 	bl	8021774 <__match>
 801f8be:	2800      	cmp	r0, #0
 801f8c0:	f43f aecc 	beq.w	801f65c <_strtod_l+0xbc>
 801f8c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f8c6:	781b      	ldrb	r3, [r3, #0]
 801f8c8:	2b28      	cmp	r3, #40	; 0x28
 801f8ca:	d12d      	bne.n	801f928 <_strtod_l+0x388>
 801f8cc:	4999      	ldr	r1, [pc, #612]	; (801fb34 <_strtod_l+0x594>)
 801f8ce:	aa20      	add	r2, sp, #128	; 0x80
 801f8d0:	a81d      	add	r0, sp, #116	; 0x74
 801f8d2:	f001 ff63 	bl	802179c <__hexnan>
 801f8d6:	2805      	cmp	r0, #5
 801f8d8:	d126      	bne.n	801f928 <_strtod_l+0x388>
 801f8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f8dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801f8e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801f8e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801f8e8:	e69c      	b.n	801f624 <_strtod_l+0x84>
 801f8ea:	210a      	movs	r1, #10
 801f8ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 801f8f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801f8f4:	e7b9      	b.n	801f86a <_strtod_l+0x2ca>
 801f8f6:	2b6e      	cmp	r3, #110	; 0x6e
 801f8f8:	e7db      	b.n	801f8b2 <_strtod_l+0x312>
 801f8fa:	498f      	ldr	r1, [pc, #572]	; (801fb38 <_strtod_l+0x598>)
 801f8fc:	a81d      	add	r0, sp, #116	; 0x74
 801f8fe:	f001 ff39 	bl	8021774 <__match>
 801f902:	2800      	cmp	r0, #0
 801f904:	f43f aeaa 	beq.w	801f65c <_strtod_l+0xbc>
 801f908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f90a:	498c      	ldr	r1, [pc, #560]	; (801fb3c <_strtod_l+0x59c>)
 801f90c:	3b01      	subs	r3, #1
 801f90e:	a81d      	add	r0, sp, #116	; 0x74
 801f910:	931d      	str	r3, [sp, #116]	; 0x74
 801f912:	f001 ff2f 	bl	8021774 <__match>
 801f916:	b910      	cbnz	r0, 801f91e <_strtod_l+0x37e>
 801f918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f91a:	3301      	adds	r3, #1
 801f91c:	931d      	str	r3, [sp, #116]	; 0x74
 801f91e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801fb4c <_strtod_l+0x5ac>
 801f922:	f04f 0a00 	mov.w	sl, #0
 801f926:	e67d      	b.n	801f624 <_strtod_l+0x84>
 801f928:	4885      	ldr	r0, [pc, #532]	; (801fb40 <_strtod_l+0x5a0>)
 801f92a:	f003 fab9 	bl	8022ea0 <nan>
 801f92e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f932:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f936:	e675      	b.n	801f624 <_strtod_l+0x84>
 801f938:	9b07      	ldr	r3, [sp, #28]
 801f93a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f93c:	1af3      	subs	r3, r6, r3
 801f93e:	2f00      	cmp	r7, #0
 801f940:	bf08      	it	eq
 801f942:	462f      	moveq	r7, r5
 801f944:	2d10      	cmp	r5, #16
 801f946:	9308      	str	r3, [sp, #32]
 801f948:	46a8      	mov	r8, r5
 801f94a:	bfa8      	it	ge
 801f94c:	f04f 0810 	movge.w	r8, #16
 801f950:	f7e0 fdd8 	bl	8000504 <__aeabi_ui2d>
 801f954:	2d09      	cmp	r5, #9
 801f956:	4682      	mov	sl, r0
 801f958:	468b      	mov	fp, r1
 801f95a:	dd13      	ble.n	801f984 <_strtod_l+0x3e4>
 801f95c:	4b79      	ldr	r3, [pc, #484]	; (801fb44 <_strtod_l+0x5a4>)
 801f95e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f962:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801f966:	f7e0 fe47 	bl	80005f8 <__aeabi_dmul>
 801f96a:	4682      	mov	sl, r0
 801f96c:	4648      	mov	r0, r9
 801f96e:	468b      	mov	fp, r1
 801f970:	f7e0 fdc8 	bl	8000504 <__aeabi_ui2d>
 801f974:	4602      	mov	r2, r0
 801f976:	460b      	mov	r3, r1
 801f978:	4650      	mov	r0, sl
 801f97a:	4659      	mov	r1, fp
 801f97c:	f7e0 fc86 	bl	800028c <__adddf3>
 801f980:	4682      	mov	sl, r0
 801f982:	468b      	mov	fp, r1
 801f984:	2d0f      	cmp	r5, #15
 801f986:	dc38      	bgt.n	801f9fa <_strtod_l+0x45a>
 801f988:	9b08      	ldr	r3, [sp, #32]
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	f43f ae4a 	beq.w	801f624 <_strtod_l+0x84>
 801f990:	dd24      	ble.n	801f9dc <_strtod_l+0x43c>
 801f992:	2b16      	cmp	r3, #22
 801f994:	dc0b      	bgt.n	801f9ae <_strtod_l+0x40e>
 801f996:	4d6b      	ldr	r5, [pc, #428]	; (801fb44 <_strtod_l+0x5a4>)
 801f998:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801f99c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801f9a0:	4652      	mov	r2, sl
 801f9a2:	465b      	mov	r3, fp
 801f9a4:	f7e0 fe28 	bl	80005f8 <__aeabi_dmul>
 801f9a8:	4682      	mov	sl, r0
 801f9aa:	468b      	mov	fp, r1
 801f9ac:	e63a      	b.n	801f624 <_strtod_l+0x84>
 801f9ae:	9a08      	ldr	r2, [sp, #32]
 801f9b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801f9b4:	4293      	cmp	r3, r2
 801f9b6:	db20      	blt.n	801f9fa <_strtod_l+0x45a>
 801f9b8:	4c62      	ldr	r4, [pc, #392]	; (801fb44 <_strtod_l+0x5a4>)
 801f9ba:	f1c5 050f 	rsb	r5, r5, #15
 801f9be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801f9c2:	4652      	mov	r2, sl
 801f9c4:	465b      	mov	r3, fp
 801f9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f9ca:	f7e0 fe15 	bl	80005f8 <__aeabi_dmul>
 801f9ce:	9b08      	ldr	r3, [sp, #32]
 801f9d0:	1b5d      	subs	r5, r3, r5
 801f9d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801f9d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f9da:	e7e3      	b.n	801f9a4 <_strtod_l+0x404>
 801f9dc:	9b08      	ldr	r3, [sp, #32]
 801f9de:	3316      	adds	r3, #22
 801f9e0:	db0b      	blt.n	801f9fa <_strtod_l+0x45a>
 801f9e2:	9b07      	ldr	r3, [sp, #28]
 801f9e4:	4a57      	ldr	r2, [pc, #348]	; (801fb44 <_strtod_l+0x5a4>)
 801f9e6:	1b9e      	subs	r6, r3, r6
 801f9e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801f9ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f9f0:	4650      	mov	r0, sl
 801f9f2:	4659      	mov	r1, fp
 801f9f4:	f7e0 ff2a 	bl	800084c <__aeabi_ddiv>
 801f9f8:	e7d6      	b.n	801f9a8 <_strtod_l+0x408>
 801f9fa:	9b08      	ldr	r3, [sp, #32]
 801f9fc:	eba5 0808 	sub.w	r8, r5, r8
 801fa00:	4498      	add	r8, r3
 801fa02:	f1b8 0f00 	cmp.w	r8, #0
 801fa06:	dd71      	ble.n	801faec <_strtod_l+0x54c>
 801fa08:	f018 030f 	ands.w	r3, r8, #15
 801fa0c:	d00a      	beq.n	801fa24 <_strtod_l+0x484>
 801fa0e:	494d      	ldr	r1, [pc, #308]	; (801fb44 <_strtod_l+0x5a4>)
 801fa10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fa14:	4652      	mov	r2, sl
 801fa16:	465b      	mov	r3, fp
 801fa18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa1c:	f7e0 fdec 	bl	80005f8 <__aeabi_dmul>
 801fa20:	4682      	mov	sl, r0
 801fa22:	468b      	mov	fp, r1
 801fa24:	f038 080f 	bics.w	r8, r8, #15
 801fa28:	d04d      	beq.n	801fac6 <_strtod_l+0x526>
 801fa2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801fa2e:	dd22      	ble.n	801fa76 <_strtod_l+0x4d6>
 801fa30:	2500      	movs	r5, #0
 801fa32:	462e      	mov	r6, r5
 801fa34:	9509      	str	r5, [sp, #36]	; 0x24
 801fa36:	9507      	str	r5, [sp, #28]
 801fa38:	2322      	movs	r3, #34	; 0x22
 801fa3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801fb4c <_strtod_l+0x5ac>
 801fa3e:	6023      	str	r3, [r4, #0]
 801fa40:	f04f 0a00 	mov.w	sl, #0
 801fa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	f43f adec 	beq.w	801f624 <_strtod_l+0x84>
 801fa4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fa4e:	4620      	mov	r0, r4
 801fa50:	f001 ffb4 	bl	80219bc <_Bfree>
 801fa54:	9907      	ldr	r1, [sp, #28]
 801fa56:	4620      	mov	r0, r4
 801fa58:	f001 ffb0 	bl	80219bc <_Bfree>
 801fa5c:	4631      	mov	r1, r6
 801fa5e:	4620      	mov	r0, r4
 801fa60:	f001 ffac 	bl	80219bc <_Bfree>
 801fa64:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fa66:	4620      	mov	r0, r4
 801fa68:	f001 ffa8 	bl	80219bc <_Bfree>
 801fa6c:	4629      	mov	r1, r5
 801fa6e:	4620      	mov	r0, r4
 801fa70:	f001 ffa4 	bl	80219bc <_Bfree>
 801fa74:	e5d6      	b.n	801f624 <_strtod_l+0x84>
 801fa76:	2300      	movs	r3, #0
 801fa78:	ea4f 1828 	mov.w	r8, r8, asr #4
 801fa7c:	4650      	mov	r0, sl
 801fa7e:	4659      	mov	r1, fp
 801fa80:	4699      	mov	r9, r3
 801fa82:	f1b8 0f01 	cmp.w	r8, #1
 801fa86:	dc21      	bgt.n	801facc <_strtod_l+0x52c>
 801fa88:	b10b      	cbz	r3, 801fa8e <_strtod_l+0x4ee>
 801fa8a:	4682      	mov	sl, r0
 801fa8c:	468b      	mov	fp, r1
 801fa8e:	4b2e      	ldr	r3, [pc, #184]	; (801fb48 <_strtod_l+0x5a8>)
 801fa90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801fa94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801fa98:	4652      	mov	r2, sl
 801fa9a:	465b      	mov	r3, fp
 801fa9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801faa0:	f7e0 fdaa 	bl	80005f8 <__aeabi_dmul>
 801faa4:	4b29      	ldr	r3, [pc, #164]	; (801fb4c <_strtod_l+0x5ac>)
 801faa6:	460a      	mov	r2, r1
 801faa8:	400b      	ands	r3, r1
 801faaa:	4929      	ldr	r1, [pc, #164]	; (801fb50 <_strtod_l+0x5b0>)
 801faac:	428b      	cmp	r3, r1
 801faae:	4682      	mov	sl, r0
 801fab0:	d8be      	bhi.n	801fa30 <_strtod_l+0x490>
 801fab2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801fab6:	428b      	cmp	r3, r1
 801fab8:	bf86      	itte	hi
 801faba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801fb54 <_strtod_l+0x5b4>
 801fabe:	f04f 3aff 	movhi.w	sl, #4294967295
 801fac2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801fac6:	2300      	movs	r3, #0
 801fac8:	9304      	str	r3, [sp, #16]
 801faca:	e081      	b.n	801fbd0 <_strtod_l+0x630>
 801facc:	f018 0f01 	tst.w	r8, #1
 801fad0:	d007      	beq.n	801fae2 <_strtod_l+0x542>
 801fad2:	4b1d      	ldr	r3, [pc, #116]	; (801fb48 <_strtod_l+0x5a8>)
 801fad4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801fad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fadc:	f7e0 fd8c 	bl	80005f8 <__aeabi_dmul>
 801fae0:	2301      	movs	r3, #1
 801fae2:	f109 0901 	add.w	r9, r9, #1
 801fae6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801faea:	e7ca      	b.n	801fa82 <_strtod_l+0x4e2>
 801faec:	d0eb      	beq.n	801fac6 <_strtod_l+0x526>
 801faee:	f1c8 0800 	rsb	r8, r8, #0
 801faf2:	f018 020f 	ands.w	r2, r8, #15
 801faf6:	d00a      	beq.n	801fb0e <_strtod_l+0x56e>
 801faf8:	4b12      	ldr	r3, [pc, #72]	; (801fb44 <_strtod_l+0x5a4>)
 801fafa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fafe:	4650      	mov	r0, sl
 801fb00:	4659      	mov	r1, fp
 801fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb06:	f7e0 fea1 	bl	800084c <__aeabi_ddiv>
 801fb0a:	4682      	mov	sl, r0
 801fb0c:	468b      	mov	fp, r1
 801fb0e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801fb12:	d0d8      	beq.n	801fac6 <_strtod_l+0x526>
 801fb14:	f1b8 0f1f 	cmp.w	r8, #31
 801fb18:	dd1e      	ble.n	801fb58 <_strtod_l+0x5b8>
 801fb1a:	2500      	movs	r5, #0
 801fb1c:	462e      	mov	r6, r5
 801fb1e:	9509      	str	r5, [sp, #36]	; 0x24
 801fb20:	9507      	str	r5, [sp, #28]
 801fb22:	2322      	movs	r3, #34	; 0x22
 801fb24:	f04f 0a00 	mov.w	sl, #0
 801fb28:	f04f 0b00 	mov.w	fp, #0
 801fb2c:	6023      	str	r3, [r4, #0]
 801fb2e:	e789      	b.n	801fa44 <_strtod_l+0x4a4>
 801fb30:	08027131 	.word	0x08027131
 801fb34:	080271e8 	.word	0x080271e8
 801fb38:	08027129 	.word	0x08027129
 801fb3c:	08027267 	.word	0x08027267
 801fb40:	08027263 	.word	0x08027263
 801fb44:	080273e8 	.word	0x080273e8
 801fb48:	080273c0 	.word	0x080273c0
 801fb4c:	7ff00000 	.word	0x7ff00000
 801fb50:	7ca00000 	.word	0x7ca00000
 801fb54:	7fefffff 	.word	0x7fefffff
 801fb58:	f018 0310 	ands.w	r3, r8, #16
 801fb5c:	bf18      	it	ne
 801fb5e:	236a      	movne	r3, #106	; 0x6a
 801fb60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801ff18 <_strtod_l+0x978>
 801fb64:	9304      	str	r3, [sp, #16]
 801fb66:	4650      	mov	r0, sl
 801fb68:	4659      	mov	r1, fp
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	f018 0f01 	tst.w	r8, #1
 801fb70:	d004      	beq.n	801fb7c <_strtod_l+0x5dc>
 801fb72:	e9d9 2300 	ldrd	r2, r3, [r9]
 801fb76:	f7e0 fd3f 	bl	80005f8 <__aeabi_dmul>
 801fb7a:	2301      	movs	r3, #1
 801fb7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801fb80:	f109 0908 	add.w	r9, r9, #8
 801fb84:	d1f2      	bne.n	801fb6c <_strtod_l+0x5cc>
 801fb86:	b10b      	cbz	r3, 801fb8c <_strtod_l+0x5ec>
 801fb88:	4682      	mov	sl, r0
 801fb8a:	468b      	mov	fp, r1
 801fb8c:	9b04      	ldr	r3, [sp, #16]
 801fb8e:	b1bb      	cbz	r3, 801fbc0 <_strtod_l+0x620>
 801fb90:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801fb94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	4659      	mov	r1, fp
 801fb9c:	dd10      	ble.n	801fbc0 <_strtod_l+0x620>
 801fb9e:	2b1f      	cmp	r3, #31
 801fba0:	f340 8128 	ble.w	801fdf4 <_strtod_l+0x854>
 801fba4:	2b34      	cmp	r3, #52	; 0x34
 801fba6:	bfde      	ittt	le
 801fba8:	3b20      	suble	r3, #32
 801fbaa:	f04f 32ff 	movle.w	r2, #4294967295
 801fbae:	fa02 f303 	lslle.w	r3, r2, r3
 801fbb2:	f04f 0a00 	mov.w	sl, #0
 801fbb6:	bfcc      	ite	gt
 801fbb8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801fbbc:	ea03 0b01 	andle.w	fp, r3, r1
 801fbc0:	2200      	movs	r2, #0
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	4650      	mov	r0, sl
 801fbc6:	4659      	mov	r1, fp
 801fbc8:	f7e0 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 801fbcc:	2800      	cmp	r0, #0
 801fbce:	d1a4      	bne.n	801fb1a <_strtod_l+0x57a>
 801fbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbd2:	9300      	str	r3, [sp, #0]
 801fbd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fbd6:	462b      	mov	r3, r5
 801fbd8:	463a      	mov	r2, r7
 801fbda:	4620      	mov	r0, r4
 801fbdc:	f001 ff5a 	bl	8021a94 <__s2b>
 801fbe0:	9009      	str	r0, [sp, #36]	; 0x24
 801fbe2:	2800      	cmp	r0, #0
 801fbe4:	f43f af24 	beq.w	801fa30 <_strtod_l+0x490>
 801fbe8:	9b07      	ldr	r3, [sp, #28]
 801fbea:	1b9e      	subs	r6, r3, r6
 801fbec:	9b08      	ldr	r3, [sp, #32]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	bfb4      	ite	lt
 801fbf2:	4633      	movlt	r3, r6
 801fbf4:	2300      	movge	r3, #0
 801fbf6:	9310      	str	r3, [sp, #64]	; 0x40
 801fbf8:	9b08      	ldr	r3, [sp, #32]
 801fbfa:	2500      	movs	r5, #0
 801fbfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc00:	9318      	str	r3, [sp, #96]	; 0x60
 801fc02:	462e      	mov	r6, r5
 801fc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc06:	4620      	mov	r0, r4
 801fc08:	6859      	ldr	r1, [r3, #4]
 801fc0a:	f001 fe97 	bl	802193c <_Balloc>
 801fc0e:	9007      	str	r0, [sp, #28]
 801fc10:	2800      	cmp	r0, #0
 801fc12:	f43f af11 	beq.w	801fa38 <_strtod_l+0x498>
 801fc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc18:	691a      	ldr	r2, [r3, #16]
 801fc1a:	3202      	adds	r2, #2
 801fc1c:	f103 010c 	add.w	r1, r3, #12
 801fc20:	0092      	lsls	r2, r2, #2
 801fc22:	300c      	adds	r0, #12
 801fc24:	f7fe fbae 	bl	801e384 <memcpy>
 801fc28:	ec4b ab10 	vmov	d0, sl, fp
 801fc2c:	aa20      	add	r2, sp, #128	; 0x80
 801fc2e:	a91f      	add	r1, sp, #124	; 0x7c
 801fc30:	4620      	mov	r0, r4
 801fc32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801fc36:	f002 fa69 	bl	802210c <__d2b>
 801fc3a:	901e      	str	r0, [sp, #120]	; 0x78
 801fc3c:	2800      	cmp	r0, #0
 801fc3e:	f43f aefb 	beq.w	801fa38 <_strtod_l+0x498>
 801fc42:	2101      	movs	r1, #1
 801fc44:	4620      	mov	r0, r4
 801fc46:	f001 ffbf 	bl	8021bc8 <__i2b>
 801fc4a:	4606      	mov	r6, r0
 801fc4c:	2800      	cmp	r0, #0
 801fc4e:	f43f aef3 	beq.w	801fa38 <_strtod_l+0x498>
 801fc52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fc54:	9904      	ldr	r1, [sp, #16]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	bfab      	itete	ge
 801fc5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801fc5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801fc5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801fc60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801fc64:	bfac      	ite	ge
 801fc66:	eb03 0902 	addge.w	r9, r3, r2
 801fc6a:	1ad7      	sublt	r7, r2, r3
 801fc6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fc6e:	eba3 0801 	sub.w	r8, r3, r1
 801fc72:	4490      	add	r8, r2
 801fc74:	4ba3      	ldr	r3, [pc, #652]	; (801ff04 <_strtod_l+0x964>)
 801fc76:	f108 38ff 	add.w	r8, r8, #4294967295
 801fc7a:	4598      	cmp	r8, r3
 801fc7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801fc80:	f280 80cc 	bge.w	801fe1c <_strtod_l+0x87c>
 801fc84:	eba3 0308 	sub.w	r3, r3, r8
 801fc88:	2b1f      	cmp	r3, #31
 801fc8a:	eba2 0203 	sub.w	r2, r2, r3
 801fc8e:	f04f 0101 	mov.w	r1, #1
 801fc92:	f300 80b6 	bgt.w	801fe02 <_strtod_l+0x862>
 801fc96:	fa01 f303 	lsl.w	r3, r1, r3
 801fc9a:	9311      	str	r3, [sp, #68]	; 0x44
 801fc9c:	2300      	movs	r3, #0
 801fc9e:	930c      	str	r3, [sp, #48]	; 0x30
 801fca0:	eb09 0802 	add.w	r8, r9, r2
 801fca4:	9b04      	ldr	r3, [sp, #16]
 801fca6:	45c1      	cmp	r9, r8
 801fca8:	4417      	add	r7, r2
 801fcaa:	441f      	add	r7, r3
 801fcac:	464b      	mov	r3, r9
 801fcae:	bfa8      	it	ge
 801fcb0:	4643      	movge	r3, r8
 801fcb2:	42bb      	cmp	r3, r7
 801fcb4:	bfa8      	it	ge
 801fcb6:	463b      	movge	r3, r7
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	bfc2      	ittt	gt
 801fcbc:	eba8 0803 	subgt.w	r8, r8, r3
 801fcc0:	1aff      	subgt	r7, r7, r3
 801fcc2:	eba9 0903 	subgt.w	r9, r9, r3
 801fcc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	dd17      	ble.n	801fcfc <_strtod_l+0x75c>
 801fccc:	4631      	mov	r1, r6
 801fcce:	461a      	mov	r2, r3
 801fcd0:	4620      	mov	r0, r4
 801fcd2:	f002 f835 	bl	8021d40 <__pow5mult>
 801fcd6:	4606      	mov	r6, r0
 801fcd8:	2800      	cmp	r0, #0
 801fcda:	f43f aead 	beq.w	801fa38 <_strtod_l+0x498>
 801fcde:	4601      	mov	r1, r0
 801fce0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fce2:	4620      	mov	r0, r4
 801fce4:	f001 ff86 	bl	8021bf4 <__multiply>
 801fce8:	900f      	str	r0, [sp, #60]	; 0x3c
 801fcea:	2800      	cmp	r0, #0
 801fcec:	f43f aea4 	beq.w	801fa38 <_strtod_l+0x498>
 801fcf0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fcf2:	4620      	mov	r0, r4
 801fcf4:	f001 fe62 	bl	80219bc <_Bfree>
 801fcf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcfa:	931e      	str	r3, [sp, #120]	; 0x78
 801fcfc:	f1b8 0f00 	cmp.w	r8, #0
 801fd00:	f300 8091 	bgt.w	801fe26 <_strtod_l+0x886>
 801fd04:	9b08      	ldr	r3, [sp, #32]
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	dd08      	ble.n	801fd1c <_strtod_l+0x77c>
 801fd0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fd0c:	9907      	ldr	r1, [sp, #28]
 801fd0e:	4620      	mov	r0, r4
 801fd10:	f002 f816 	bl	8021d40 <__pow5mult>
 801fd14:	9007      	str	r0, [sp, #28]
 801fd16:	2800      	cmp	r0, #0
 801fd18:	f43f ae8e 	beq.w	801fa38 <_strtod_l+0x498>
 801fd1c:	2f00      	cmp	r7, #0
 801fd1e:	dd08      	ble.n	801fd32 <_strtod_l+0x792>
 801fd20:	9907      	ldr	r1, [sp, #28]
 801fd22:	463a      	mov	r2, r7
 801fd24:	4620      	mov	r0, r4
 801fd26:	f002 f865 	bl	8021df4 <__lshift>
 801fd2a:	9007      	str	r0, [sp, #28]
 801fd2c:	2800      	cmp	r0, #0
 801fd2e:	f43f ae83 	beq.w	801fa38 <_strtod_l+0x498>
 801fd32:	f1b9 0f00 	cmp.w	r9, #0
 801fd36:	dd08      	ble.n	801fd4a <_strtod_l+0x7aa>
 801fd38:	4631      	mov	r1, r6
 801fd3a:	464a      	mov	r2, r9
 801fd3c:	4620      	mov	r0, r4
 801fd3e:	f002 f859 	bl	8021df4 <__lshift>
 801fd42:	4606      	mov	r6, r0
 801fd44:	2800      	cmp	r0, #0
 801fd46:	f43f ae77 	beq.w	801fa38 <_strtod_l+0x498>
 801fd4a:	9a07      	ldr	r2, [sp, #28]
 801fd4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fd4e:	4620      	mov	r0, r4
 801fd50:	f002 f8d8 	bl	8021f04 <__mdiff>
 801fd54:	4605      	mov	r5, r0
 801fd56:	2800      	cmp	r0, #0
 801fd58:	f43f ae6e 	beq.w	801fa38 <_strtod_l+0x498>
 801fd5c:	68c3      	ldr	r3, [r0, #12]
 801fd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801fd60:	2300      	movs	r3, #0
 801fd62:	60c3      	str	r3, [r0, #12]
 801fd64:	4631      	mov	r1, r6
 801fd66:	f002 f8b1 	bl	8021ecc <__mcmp>
 801fd6a:	2800      	cmp	r0, #0
 801fd6c:	da65      	bge.n	801fe3a <_strtod_l+0x89a>
 801fd6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd70:	ea53 030a 	orrs.w	r3, r3, sl
 801fd74:	f040 8087 	bne.w	801fe86 <_strtod_l+0x8e6>
 801fd78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	f040 8082 	bne.w	801fe86 <_strtod_l+0x8e6>
 801fd82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fd86:	0d1b      	lsrs	r3, r3, #20
 801fd88:	051b      	lsls	r3, r3, #20
 801fd8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fd8e:	d97a      	bls.n	801fe86 <_strtod_l+0x8e6>
 801fd90:	696b      	ldr	r3, [r5, #20]
 801fd92:	b913      	cbnz	r3, 801fd9a <_strtod_l+0x7fa>
 801fd94:	692b      	ldr	r3, [r5, #16]
 801fd96:	2b01      	cmp	r3, #1
 801fd98:	dd75      	ble.n	801fe86 <_strtod_l+0x8e6>
 801fd9a:	4629      	mov	r1, r5
 801fd9c:	2201      	movs	r2, #1
 801fd9e:	4620      	mov	r0, r4
 801fda0:	f002 f828 	bl	8021df4 <__lshift>
 801fda4:	4631      	mov	r1, r6
 801fda6:	4605      	mov	r5, r0
 801fda8:	f002 f890 	bl	8021ecc <__mcmp>
 801fdac:	2800      	cmp	r0, #0
 801fdae:	dd6a      	ble.n	801fe86 <_strtod_l+0x8e6>
 801fdb0:	9904      	ldr	r1, [sp, #16]
 801fdb2:	4a55      	ldr	r2, [pc, #340]	; (801ff08 <_strtod_l+0x968>)
 801fdb4:	465b      	mov	r3, fp
 801fdb6:	2900      	cmp	r1, #0
 801fdb8:	f000 8085 	beq.w	801fec6 <_strtod_l+0x926>
 801fdbc:	ea02 010b 	and.w	r1, r2, fp
 801fdc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801fdc4:	dc7f      	bgt.n	801fec6 <_strtod_l+0x926>
 801fdc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fdca:	f77f aeaa 	ble.w	801fb22 <_strtod_l+0x582>
 801fdce:	4a4f      	ldr	r2, [pc, #316]	; (801ff0c <_strtod_l+0x96c>)
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801fdd6:	4650      	mov	r0, sl
 801fdd8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801fddc:	4659      	mov	r1, fp
 801fdde:	f7e0 fc0b 	bl	80005f8 <__aeabi_dmul>
 801fde2:	460b      	mov	r3, r1
 801fde4:	4303      	orrs	r3, r0
 801fde6:	bf08      	it	eq
 801fde8:	2322      	moveq	r3, #34	; 0x22
 801fdea:	4682      	mov	sl, r0
 801fdec:	468b      	mov	fp, r1
 801fdee:	bf08      	it	eq
 801fdf0:	6023      	streq	r3, [r4, #0]
 801fdf2:	e62b      	b.n	801fa4c <_strtod_l+0x4ac>
 801fdf4:	f04f 32ff 	mov.w	r2, #4294967295
 801fdf8:	fa02 f303 	lsl.w	r3, r2, r3
 801fdfc:	ea03 0a0a 	and.w	sl, r3, sl
 801fe00:	e6de      	b.n	801fbc0 <_strtod_l+0x620>
 801fe02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801fe06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801fe0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801fe0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801fe12:	fa01 f308 	lsl.w	r3, r1, r8
 801fe16:	930c      	str	r3, [sp, #48]	; 0x30
 801fe18:	9111      	str	r1, [sp, #68]	; 0x44
 801fe1a:	e741      	b.n	801fca0 <_strtod_l+0x700>
 801fe1c:	2300      	movs	r3, #0
 801fe1e:	930c      	str	r3, [sp, #48]	; 0x30
 801fe20:	2301      	movs	r3, #1
 801fe22:	9311      	str	r3, [sp, #68]	; 0x44
 801fe24:	e73c      	b.n	801fca0 <_strtod_l+0x700>
 801fe26:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fe28:	4642      	mov	r2, r8
 801fe2a:	4620      	mov	r0, r4
 801fe2c:	f001 ffe2 	bl	8021df4 <__lshift>
 801fe30:	901e      	str	r0, [sp, #120]	; 0x78
 801fe32:	2800      	cmp	r0, #0
 801fe34:	f47f af66 	bne.w	801fd04 <_strtod_l+0x764>
 801fe38:	e5fe      	b.n	801fa38 <_strtod_l+0x498>
 801fe3a:	465f      	mov	r7, fp
 801fe3c:	d16e      	bne.n	801ff1c <_strtod_l+0x97c>
 801fe3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fe44:	b342      	cbz	r2, 801fe98 <_strtod_l+0x8f8>
 801fe46:	4a32      	ldr	r2, [pc, #200]	; (801ff10 <_strtod_l+0x970>)
 801fe48:	4293      	cmp	r3, r2
 801fe4a:	d128      	bne.n	801fe9e <_strtod_l+0x8fe>
 801fe4c:	9b04      	ldr	r3, [sp, #16]
 801fe4e:	4650      	mov	r0, sl
 801fe50:	b1eb      	cbz	r3, 801fe8e <_strtod_l+0x8ee>
 801fe52:	4a2d      	ldr	r2, [pc, #180]	; (801ff08 <_strtod_l+0x968>)
 801fe54:	403a      	ands	r2, r7
 801fe56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801fe5a:	f04f 31ff 	mov.w	r1, #4294967295
 801fe5e:	d819      	bhi.n	801fe94 <_strtod_l+0x8f4>
 801fe60:	0d12      	lsrs	r2, r2, #20
 801fe62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801fe66:	fa01 f303 	lsl.w	r3, r1, r3
 801fe6a:	4298      	cmp	r0, r3
 801fe6c:	d117      	bne.n	801fe9e <_strtod_l+0x8fe>
 801fe6e:	4b29      	ldr	r3, [pc, #164]	; (801ff14 <_strtod_l+0x974>)
 801fe70:	429f      	cmp	r7, r3
 801fe72:	d102      	bne.n	801fe7a <_strtod_l+0x8da>
 801fe74:	3001      	adds	r0, #1
 801fe76:	f43f addf 	beq.w	801fa38 <_strtod_l+0x498>
 801fe7a:	4b23      	ldr	r3, [pc, #140]	; (801ff08 <_strtod_l+0x968>)
 801fe7c:	403b      	ands	r3, r7
 801fe7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801fe82:	f04f 0a00 	mov.w	sl, #0
 801fe86:	9b04      	ldr	r3, [sp, #16]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d1a0      	bne.n	801fdce <_strtod_l+0x82e>
 801fe8c:	e5de      	b.n	801fa4c <_strtod_l+0x4ac>
 801fe8e:	f04f 33ff 	mov.w	r3, #4294967295
 801fe92:	e7ea      	b.n	801fe6a <_strtod_l+0x8ca>
 801fe94:	460b      	mov	r3, r1
 801fe96:	e7e8      	b.n	801fe6a <_strtod_l+0x8ca>
 801fe98:	ea53 030a 	orrs.w	r3, r3, sl
 801fe9c:	d088      	beq.n	801fdb0 <_strtod_l+0x810>
 801fe9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fea0:	b1db      	cbz	r3, 801feda <_strtod_l+0x93a>
 801fea2:	423b      	tst	r3, r7
 801fea4:	d0ef      	beq.n	801fe86 <_strtod_l+0x8e6>
 801fea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fea8:	9a04      	ldr	r2, [sp, #16]
 801feaa:	4650      	mov	r0, sl
 801feac:	4659      	mov	r1, fp
 801feae:	b1c3      	cbz	r3, 801fee2 <_strtod_l+0x942>
 801feb0:	f7ff fb57 	bl	801f562 <sulp>
 801feb4:	4602      	mov	r2, r0
 801feb6:	460b      	mov	r3, r1
 801feb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801febc:	f7e0 f9e6 	bl	800028c <__adddf3>
 801fec0:	4682      	mov	sl, r0
 801fec2:	468b      	mov	fp, r1
 801fec4:	e7df      	b.n	801fe86 <_strtod_l+0x8e6>
 801fec6:	4013      	ands	r3, r2
 801fec8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801fecc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801fed0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801fed4:	f04f 3aff 	mov.w	sl, #4294967295
 801fed8:	e7d5      	b.n	801fe86 <_strtod_l+0x8e6>
 801feda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fedc:	ea13 0f0a 	tst.w	r3, sl
 801fee0:	e7e0      	b.n	801fea4 <_strtod_l+0x904>
 801fee2:	f7ff fb3e 	bl	801f562 <sulp>
 801fee6:	4602      	mov	r2, r0
 801fee8:	460b      	mov	r3, r1
 801feea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801feee:	f7e0 f9cb 	bl	8000288 <__aeabi_dsub>
 801fef2:	2200      	movs	r2, #0
 801fef4:	2300      	movs	r3, #0
 801fef6:	4682      	mov	sl, r0
 801fef8:	468b      	mov	fp, r1
 801fefa:	f7e0 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 801fefe:	2800      	cmp	r0, #0
 801ff00:	d0c1      	beq.n	801fe86 <_strtod_l+0x8e6>
 801ff02:	e60e      	b.n	801fb22 <_strtod_l+0x582>
 801ff04:	fffffc02 	.word	0xfffffc02
 801ff08:	7ff00000 	.word	0x7ff00000
 801ff0c:	39500000 	.word	0x39500000
 801ff10:	000fffff 	.word	0x000fffff
 801ff14:	7fefffff 	.word	0x7fefffff
 801ff18:	08027200 	.word	0x08027200
 801ff1c:	4631      	mov	r1, r6
 801ff1e:	4628      	mov	r0, r5
 801ff20:	f002 f950 	bl	80221c4 <__ratio>
 801ff24:	ec59 8b10 	vmov	r8, r9, d0
 801ff28:	ee10 0a10 	vmov	r0, s0
 801ff2c:	2200      	movs	r2, #0
 801ff2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ff32:	4649      	mov	r1, r9
 801ff34:	f7e0 fddc 	bl	8000af0 <__aeabi_dcmple>
 801ff38:	2800      	cmp	r0, #0
 801ff3a:	d07c      	beq.n	8020036 <_strtod_l+0xa96>
 801ff3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d04c      	beq.n	801ffdc <_strtod_l+0xa3c>
 801ff42:	4b95      	ldr	r3, [pc, #596]	; (8020198 <_strtod_l+0xbf8>)
 801ff44:	2200      	movs	r2, #0
 801ff46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ff4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020198 <_strtod_l+0xbf8>
 801ff4e:	f04f 0800 	mov.w	r8, #0
 801ff52:	4b92      	ldr	r3, [pc, #584]	; (802019c <_strtod_l+0xbfc>)
 801ff54:	403b      	ands	r3, r7
 801ff56:	9311      	str	r3, [sp, #68]	; 0x44
 801ff58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff5a:	4b91      	ldr	r3, [pc, #580]	; (80201a0 <_strtod_l+0xc00>)
 801ff5c:	429a      	cmp	r2, r3
 801ff5e:	f040 80b2 	bne.w	80200c6 <_strtod_l+0xb26>
 801ff62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ff66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ff6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ff6e:	ec4b ab10 	vmov	d0, sl, fp
 801ff72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801ff76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ff7a:	f002 f84b 	bl	8022014 <__ulp>
 801ff7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ff82:	ec53 2b10 	vmov	r2, r3, d0
 801ff86:	f7e0 fb37 	bl	80005f8 <__aeabi_dmul>
 801ff8a:	4652      	mov	r2, sl
 801ff8c:	465b      	mov	r3, fp
 801ff8e:	f7e0 f97d 	bl	800028c <__adddf3>
 801ff92:	460b      	mov	r3, r1
 801ff94:	4981      	ldr	r1, [pc, #516]	; (802019c <_strtod_l+0xbfc>)
 801ff96:	4a83      	ldr	r2, [pc, #524]	; (80201a4 <_strtod_l+0xc04>)
 801ff98:	4019      	ands	r1, r3
 801ff9a:	4291      	cmp	r1, r2
 801ff9c:	4682      	mov	sl, r0
 801ff9e:	d95e      	bls.n	802005e <_strtod_l+0xabe>
 801ffa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffa2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ffa6:	4293      	cmp	r3, r2
 801ffa8:	d103      	bne.n	801ffb2 <_strtod_l+0xa12>
 801ffaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffac:	3301      	adds	r3, #1
 801ffae:	f43f ad43 	beq.w	801fa38 <_strtod_l+0x498>
 801ffb2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80201b0 <_strtod_l+0xc10>
 801ffb6:	f04f 3aff 	mov.w	sl, #4294967295
 801ffba:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ffbc:	4620      	mov	r0, r4
 801ffbe:	f001 fcfd 	bl	80219bc <_Bfree>
 801ffc2:	9907      	ldr	r1, [sp, #28]
 801ffc4:	4620      	mov	r0, r4
 801ffc6:	f001 fcf9 	bl	80219bc <_Bfree>
 801ffca:	4631      	mov	r1, r6
 801ffcc:	4620      	mov	r0, r4
 801ffce:	f001 fcf5 	bl	80219bc <_Bfree>
 801ffd2:	4629      	mov	r1, r5
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f001 fcf1 	bl	80219bc <_Bfree>
 801ffda:	e613      	b.n	801fc04 <_strtod_l+0x664>
 801ffdc:	f1ba 0f00 	cmp.w	sl, #0
 801ffe0:	d11b      	bne.n	802001a <_strtod_l+0xa7a>
 801ffe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ffe6:	b9f3      	cbnz	r3, 8020026 <_strtod_l+0xa86>
 801ffe8:	4b6b      	ldr	r3, [pc, #428]	; (8020198 <_strtod_l+0xbf8>)
 801ffea:	2200      	movs	r2, #0
 801ffec:	4640      	mov	r0, r8
 801ffee:	4649      	mov	r1, r9
 801fff0:	f7e0 fd74 	bl	8000adc <__aeabi_dcmplt>
 801fff4:	b9d0      	cbnz	r0, 802002c <_strtod_l+0xa8c>
 801fff6:	4640      	mov	r0, r8
 801fff8:	4649      	mov	r1, r9
 801fffa:	4b6b      	ldr	r3, [pc, #428]	; (80201a8 <_strtod_l+0xc08>)
 801fffc:	2200      	movs	r2, #0
 801fffe:	f7e0 fafb 	bl	80005f8 <__aeabi_dmul>
 8020002:	4680      	mov	r8, r0
 8020004:	4689      	mov	r9, r1
 8020006:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802000a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 802000e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020010:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020014:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020018:	e79b      	b.n	801ff52 <_strtod_l+0x9b2>
 802001a:	f1ba 0f01 	cmp.w	sl, #1
 802001e:	d102      	bne.n	8020026 <_strtod_l+0xa86>
 8020020:	2f00      	cmp	r7, #0
 8020022:	f43f ad7e 	beq.w	801fb22 <_strtod_l+0x582>
 8020026:	4b61      	ldr	r3, [pc, #388]	; (80201ac <_strtod_l+0xc0c>)
 8020028:	2200      	movs	r2, #0
 802002a:	e78c      	b.n	801ff46 <_strtod_l+0x9a6>
 802002c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80201a8 <_strtod_l+0xc08>
 8020030:	f04f 0800 	mov.w	r8, #0
 8020034:	e7e7      	b.n	8020006 <_strtod_l+0xa66>
 8020036:	4b5c      	ldr	r3, [pc, #368]	; (80201a8 <_strtod_l+0xc08>)
 8020038:	4640      	mov	r0, r8
 802003a:	4649      	mov	r1, r9
 802003c:	2200      	movs	r2, #0
 802003e:	f7e0 fadb 	bl	80005f8 <__aeabi_dmul>
 8020042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020044:	4680      	mov	r8, r0
 8020046:	4689      	mov	r9, r1
 8020048:	b933      	cbnz	r3, 8020058 <_strtod_l+0xab8>
 802004a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802004e:	9012      	str	r0, [sp, #72]	; 0x48
 8020050:	9313      	str	r3, [sp, #76]	; 0x4c
 8020052:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8020056:	e7dd      	b.n	8020014 <_strtod_l+0xa74>
 8020058:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 802005c:	e7f9      	b.n	8020052 <_strtod_l+0xab2>
 802005e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020062:	9b04      	ldr	r3, [sp, #16]
 8020064:	2b00      	cmp	r3, #0
 8020066:	d1a8      	bne.n	801ffba <_strtod_l+0xa1a>
 8020068:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802006c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802006e:	0d1b      	lsrs	r3, r3, #20
 8020070:	051b      	lsls	r3, r3, #20
 8020072:	429a      	cmp	r2, r3
 8020074:	d1a1      	bne.n	801ffba <_strtod_l+0xa1a>
 8020076:	4640      	mov	r0, r8
 8020078:	4649      	mov	r1, r9
 802007a:	f7e0 fe1d 	bl	8000cb8 <__aeabi_d2lz>
 802007e:	f7e0 fa8d 	bl	800059c <__aeabi_l2d>
 8020082:	4602      	mov	r2, r0
 8020084:	460b      	mov	r3, r1
 8020086:	4640      	mov	r0, r8
 8020088:	4649      	mov	r1, r9
 802008a:	f7e0 f8fd 	bl	8000288 <__aeabi_dsub>
 802008e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020090:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020094:	ea43 030a 	orr.w	r3, r3, sl
 8020098:	4313      	orrs	r3, r2
 802009a:	4680      	mov	r8, r0
 802009c:	4689      	mov	r9, r1
 802009e:	d053      	beq.n	8020148 <_strtod_l+0xba8>
 80200a0:	a335      	add	r3, pc, #212	; (adr r3, 8020178 <_strtod_l+0xbd8>)
 80200a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200a6:	f7e0 fd19 	bl	8000adc <__aeabi_dcmplt>
 80200aa:	2800      	cmp	r0, #0
 80200ac:	f47f acce 	bne.w	801fa4c <_strtod_l+0x4ac>
 80200b0:	a333      	add	r3, pc, #204	; (adr r3, 8020180 <_strtod_l+0xbe0>)
 80200b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200b6:	4640      	mov	r0, r8
 80200b8:	4649      	mov	r1, r9
 80200ba:	f7e0 fd2d 	bl	8000b18 <__aeabi_dcmpgt>
 80200be:	2800      	cmp	r0, #0
 80200c0:	f43f af7b 	beq.w	801ffba <_strtod_l+0xa1a>
 80200c4:	e4c2      	b.n	801fa4c <_strtod_l+0x4ac>
 80200c6:	9b04      	ldr	r3, [sp, #16]
 80200c8:	b333      	cbz	r3, 8020118 <_strtod_l+0xb78>
 80200ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80200cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80200d0:	d822      	bhi.n	8020118 <_strtod_l+0xb78>
 80200d2:	a32d      	add	r3, pc, #180	; (adr r3, 8020188 <_strtod_l+0xbe8>)
 80200d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200d8:	4640      	mov	r0, r8
 80200da:	4649      	mov	r1, r9
 80200dc:	f7e0 fd08 	bl	8000af0 <__aeabi_dcmple>
 80200e0:	b1a0      	cbz	r0, 802010c <_strtod_l+0xb6c>
 80200e2:	4649      	mov	r1, r9
 80200e4:	4640      	mov	r0, r8
 80200e6:	f7e0 fd5f 	bl	8000ba8 <__aeabi_d2uiz>
 80200ea:	2801      	cmp	r0, #1
 80200ec:	bf38      	it	cc
 80200ee:	2001      	movcc	r0, #1
 80200f0:	f7e0 fa08 	bl	8000504 <__aeabi_ui2d>
 80200f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200f6:	4680      	mov	r8, r0
 80200f8:	4689      	mov	r9, r1
 80200fa:	bb13      	cbnz	r3, 8020142 <_strtod_l+0xba2>
 80200fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020100:	9014      	str	r0, [sp, #80]	; 0x50
 8020102:	9315      	str	r3, [sp, #84]	; 0x54
 8020104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020108:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802010c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802010e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020110:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020114:	1a9b      	subs	r3, r3, r2
 8020116:	930d      	str	r3, [sp, #52]	; 0x34
 8020118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802011c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020120:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020124:	f001 ff76 	bl	8022014 <__ulp>
 8020128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802012c:	ec53 2b10 	vmov	r2, r3, d0
 8020130:	f7e0 fa62 	bl	80005f8 <__aeabi_dmul>
 8020134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020138:	f7e0 f8a8 	bl	800028c <__adddf3>
 802013c:	4682      	mov	sl, r0
 802013e:	468b      	mov	fp, r1
 8020140:	e78f      	b.n	8020062 <_strtod_l+0xac2>
 8020142:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020146:	e7dd      	b.n	8020104 <_strtod_l+0xb64>
 8020148:	a311      	add	r3, pc, #68	; (adr r3, 8020190 <_strtod_l+0xbf0>)
 802014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802014e:	f7e0 fcc5 	bl	8000adc <__aeabi_dcmplt>
 8020152:	e7b4      	b.n	80200be <_strtod_l+0xb1e>
 8020154:	2300      	movs	r3, #0
 8020156:	930e      	str	r3, [sp, #56]	; 0x38
 8020158:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802015a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802015c:	6013      	str	r3, [r2, #0]
 802015e:	f7ff ba65 	b.w	801f62c <_strtod_l+0x8c>
 8020162:	2b65      	cmp	r3, #101	; 0x65
 8020164:	f43f ab5d 	beq.w	801f822 <_strtod_l+0x282>
 8020168:	2b45      	cmp	r3, #69	; 0x45
 802016a:	f43f ab5a 	beq.w	801f822 <_strtod_l+0x282>
 802016e:	2201      	movs	r2, #1
 8020170:	f7ff bb92 	b.w	801f898 <_strtod_l+0x2f8>
 8020174:	f3af 8000 	nop.w
 8020178:	94a03595 	.word	0x94a03595
 802017c:	3fdfffff 	.word	0x3fdfffff
 8020180:	35afe535 	.word	0x35afe535
 8020184:	3fe00000 	.word	0x3fe00000
 8020188:	ffc00000 	.word	0xffc00000
 802018c:	41dfffff 	.word	0x41dfffff
 8020190:	94a03595 	.word	0x94a03595
 8020194:	3fcfffff 	.word	0x3fcfffff
 8020198:	3ff00000 	.word	0x3ff00000
 802019c:	7ff00000 	.word	0x7ff00000
 80201a0:	7fe00000 	.word	0x7fe00000
 80201a4:	7c9fffff 	.word	0x7c9fffff
 80201a8:	3fe00000 	.word	0x3fe00000
 80201ac:	bff00000 	.word	0xbff00000
 80201b0:	7fefffff 	.word	0x7fefffff

080201b4 <_strtod_r>:
 80201b4:	4b01      	ldr	r3, [pc, #4]	; (80201bc <_strtod_r+0x8>)
 80201b6:	f7ff b9f3 	b.w	801f5a0 <_strtod_l>
 80201ba:	bf00      	nop
 80201bc:	20000420 	.word	0x20000420

080201c0 <_strtol_l.isra.0>:
 80201c0:	2b01      	cmp	r3, #1
 80201c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201c6:	d001      	beq.n	80201cc <_strtol_l.isra.0+0xc>
 80201c8:	2b24      	cmp	r3, #36	; 0x24
 80201ca:	d906      	bls.n	80201da <_strtol_l.isra.0+0x1a>
 80201cc:	f000 ff38 	bl	8021040 <__errno>
 80201d0:	2316      	movs	r3, #22
 80201d2:	6003      	str	r3, [r0, #0]
 80201d4:	2000      	movs	r0, #0
 80201d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201da:	4f3a      	ldr	r7, [pc, #232]	; (80202c4 <_strtol_l.isra.0+0x104>)
 80201dc:	468e      	mov	lr, r1
 80201de:	4676      	mov	r6, lr
 80201e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80201e4:	5de5      	ldrb	r5, [r4, r7]
 80201e6:	f015 0508 	ands.w	r5, r5, #8
 80201ea:	d1f8      	bne.n	80201de <_strtol_l.isra.0+0x1e>
 80201ec:	2c2d      	cmp	r4, #45	; 0x2d
 80201ee:	d134      	bne.n	802025a <_strtol_l.isra.0+0x9a>
 80201f0:	f89e 4000 	ldrb.w	r4, [lr]
 80201f4:	f04f 0801 	mov.w	r8, #1
 80201f8:	f106 0e02 	add.w	lr, r6, #2
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d05c      	beq.n	80202ba <_strtol_l.isra.0+0xfa>
 8020200:	2b10      	cmp	r3, #16
 8020202:	d10c      	bne.n	802021e <_strtol_l.isra.0+0x5e>
 8020204:	2c30      	cmp	r4, #48	; 0x30
 8020206:	d10a      	bne.n	802021e <_strtol_l.isra.0+0x5e>
 8020208:	f89e 4000 	ldrb.w	r4, [lr]
 802020c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020210:	2c58      	cmp	r4, #88	; 0x58
 8020212:	d14d      	bne.n	80202b0 <_strtol_l.isra.0+0xf0>
 8020214:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020218:	2310      	movs	r3, #16
 802021a:	f10e 0e02 	add.w	lr, lr, #2
 802021e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020222:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020226:	2600      	movs	r6, #0
 8020228:	fbbc f9f3 	udiv	r9, ip, r3
 802022c:	4635      	mov	r5, r6
 802022e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020232:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020236:	2f09      	cmp	r7, #9
 8020238:	d818      	bhi.n	802026c <_strtol_l.isra.0+0xac>
 802023a:	463c      	mov	r4, r7
 802023c:	42a3      	cmp	r3, r4
 802023e:	dd24      	ble.n	802028a <_strtol_l.isra.0+0xca>
 8020240:	2e00      	cmp	r6, #0
 8020242:	db1f      	blt.n	8020284 <_strtol_l.isra.0+0xc4>
 8020244:	45a9      	cmp	r9, r5
 8020246:	d31d      	bcc.n	8020284 <_strtol_l.isra.0+0xc4>
 8020248:	d101      	bne.n	802024e <_strtol_l.isra.0+0x8e>
 802024a:	45a2      	cmp	sl, r4
 802024c:	db1a      	blt.n	8020284 <_strtol_l.isra.0+0xc4>
 802024e:	fb05 4503 	mla	r5, r5, r3, r4
 8020252:	2601      	movs	r6, #1
 8020254:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020258:	e7eb      	b.n	8020232 <_strtol_l.isra.0+0x72>
 802025a:	2c2b      	cmp	r4, #43	; 0x2b
 802025c:	bf08      	it	eq
 802025e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020262:	46a8      	mov	r8, r5
 8020264:	bf08      	it	eq
 8020266:	f106 0e02 	addeq.w	lr, r6, #2
 802026a:	e7c7      	b.n	80201fc <_strtol_l.isra.0+0x3c>
 802026c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020270:	2f19      	cmp	r7, #25
 8020272:	d801      	bhi.n	8020278 <_strtol_l.isra.0+0xb8>
 8020274:	3c37      	subs	r4, #55	; 0x37
 8020276:	e7e1      	b.n	802023c <_strtol_l.isra.0+0x7c>
 8020278:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802027c:	2f19      	cmp	r7, #25
 802027e:	d804      	bhi.n	802028a <_strtol_l.isra.0+0xca>
 8020280:	3c57      	subs	r4, #87	; 0x57
 8020282:	e7db      	b.n	802023c <_strtol_l.isra.0+0x7c>
 8020284:	f04f 36ff 	mov.w	r6, #4294967295
 8020288:	e7e4      	b.n	8020254 <_strtol_l.isra.0+0x94>
 802028a:	2e00      	cmp	r6, #0
 802028c:	da05      	bge.n	802029a <_strtol_l.isra.0+0xda>
 802028e:	2322      	movs	r3, #34	; 0x22
 8020290:	6003      	str	r3, [r0, #0]
 8020292:	4665      	mov	r5, ip
 8020294:	b942      	cbnz	r2, 80202a8 <_strtol_l.isra.0+0xe8>
 8020296:	4628      	mov	r0, r5
 8020298:	e79d      	b.n	80201d6 <_strtol_l.isra.0+0x16>
 802029a:	f1b8 0f00 	cmp.w	r8, #0
 802029e:	d000      	beq.n	80202a2 <_strtol_l.isra.0+0xe2>
 80202a0:	426d      	negs	r5, r5
 80202a2:	2a00      	cmp	r2, #0
 80202a4:	d0f7      	beq.n	8020296 <_strtol_l.isra.0+0xd6>
 80202a6:	b10e      	cbz	r6, 80202ac <_strtol_l.isra.0+0xec>
 80202a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80202ac:	6011      	str	r1, [r2, #0]
 80202ae:	e7f2      	b.n	8020296 <_strtol_l.isra.0+0xd6>
 80202b0:	2430      	movs	r4, #48	; 0x30
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d1b3      	bne.n	802021e <_strtol_l.isra.0+0x5e>
 80202b6:	2308      	movs	r3, #8
 80202b8:	e7b1      	b.n	802021e <_strtol_l.isra.0+0x5e>
 80202ba:	2c30      	cmp	r4, #48	; 0x30
 80202bc:	d0a4      	beq.n	8020208 <_strtol_l.isra.0+0x48>
 80202be:	230a      	movs	r3, #10
 80202c0:	e7ad      	b.n	802021e <_strtol_l.isra.0+0x5e>
 80202c2:	bf00      	nop
 80202c4:	08026fbd 	.word	0x08026fbd

080202c8 <_strtol_r>:
 80202c8:	f7ff bf7a 	b.w	80201c0 <_strtol_l.isra.0>

080202cc <_write_r>:
 80202cc:	b538      	push	{r3, r4, r5, lr}
 80202ce:	4d07      	ldr	r5, [pc, #28]	; (80202ec <_write_r+0x20>)
 80202d0:	4604      	mov	r4, r0
 80202d2:	4608      	mov	r0, r1
 80202d4:	4611      	mov	r1, r2
 80202d6:	2200      	movs	r2, #0
 80202d8:	602a      	str	r2, [r5, #0]
 80202da:	461a      	mov	r2, r3
 80202dc:	f7e6 faab 	bl	8006836 <_write>
 80202e0:	1c43      	adds	r3, r0, #1
 80202e2:	d102      	bne.n	80202ea <_write_r+0x1e>
 80202e4:	682b      	ldr	r3, [r5, #0]
 80202e6:	b103      	cbz	r3, 80202ea <_write_r+0x1e>
 80202e8:	6023      	str	r3, [r4, #0]
 80202ea:	bd38      	pop	{r3, r4, r5, pc}
 80202ec:	2000e190 	.word	0x2000e190

080202f0 <__assert_func>:
 80202f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80202f2:	4614      	mov	r4, r2
 80202f4:	461a      	mov	r2, r3
 80202f6:	4b09      	ldr	r3, [pc, #36]	; (802031c <__assert_func+0x2c>)
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	4605      	mov	r5, r0
 80202fc:	68d8      	ldr	r0, [r3, #12]
 80202fe:	b14c      	cbz	r4, 8020314 <__assert_func+0x24>
 8020300:	4b07      	ldr	r3, [pc, #28]	; (8020320 <__assert_func+0x30>)
 8020302:	9100      	str	r1, [sp, #0]
 8020304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020308:	4906      	ldr	r1, [pc, #24]	; (8020324 <__assert_func+0x34>)
 802030a:	462b      	mov	r3, r5
 802030c:	f000 ff60 	bl	80211d0 <fiprintf>
 8020310:	f002 ff8e 	bl	8023230 <abort>
 8020314:	4b04      	ldr	r3, [pc, #16]	; (8020328 <__assert_func+0x38>)
 8020316:	461c      	mov	r4, r3
 8020318:	e7f3      	b.n	8020302 <__assert_func+0x12>
 802031a:	bf00      	nop
 802031c:	200003b8 	.word	0x200003b8
 8020320:	08027228 	.word	0x08027228
 8020324:	08027235 	.word	0x08027235
 8020328:	08027263 	.word	0x08027263

0802032c <_close_r>:
 802032c:	b538      	push	{r3, r4, r5, lr}
 802032e:	4d06      	ldr	r5, [pc, #24]	; (8020348 <_close_r+0x1c>)
 8020330:	2300      	movs	r3, #0
 8020332:	4604      	mov	r4, r0
 8020334:	4608      	mov	r0, r1
 8020336:	602b      	str	r3, [r5, #0]
 8020338:	f7e6 fa99 	bl	800686e <_close>
 802033c:	1c43      	adds	r3, r0, #1
 802033e:	d102      	bne.n	8020346 <_close_r+0x1a>
 8020340:	682b      	ldr	r3, [r5, #0]
 8020342:	b103      	cbz	r3, 8020346 <_close_r+0x1a>
 8020344:	6023      	str	r3, [r4, #0]
 8020346:	bd38      	pop	{r3, r4, r5, pc}
 8020348:	2000e190 	.word	0x2000e190

0802034c <quorem>:
 802034c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020350:	6903      	ldr	r3, [r0, #16]
 8020352:	690c      	ldr	r4, [r1, #16]
 8020354:	42a3      	cmp	r3, r4
 8020356:	4607      	mov	r7, r0
 8020358:	f2c0 8081 	blt.w	802045e <quorem+0x112>
 802035c:	3c01      	subs	r4, #1
 802035e:	f101 0814 	add.w	r8, r1, #20
 8020362:	f100 0514 	add.w	r5, r0, #20
 8020366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802036a:	9301      	str	r3, [sp, #4]
 802036c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020374:	3301      	adds	r3, #1
 8020376:	429a      	cmp	r2, r3
 8020378:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802037c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020380:	fbb2 f6f3 	udiv	r6, r2, r3
 8020384:	d331      	bcc.n	80203ea <quorem+0x9e>
 8020386:	f04f 0e00 	mov.w	lr, #0
 802038a:	4640      	mov	r0, r8
 802038c:	46ac      	mov	ip, r5
 802038e:	46f2      	mov	sl, lr
 8020390:	f850 2b04 	ldr.w	r2, [r0], #4
 8020394:	b293      	uxth	r3, r2
 8020396:	fb06 e303 	mla	r3, r6, r3, lr
 802039a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802039e:	b29b      	uxth	r3, r3
 80203a0:	ebaa 0303 	sub.w	r3, sl, r3
 80203a4:	0c12      	lsrs	r2, r2, #16
 80203a6:	f8dc a000 	ldr.w	sl, [ip]
 80203aa:	fb06 e202 	mla	r2, r6, r2, lr
 80203ae:	fa13 f38a 	uxtah	r3, r3, sl
 80203b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80203b6:	fa1f fa82 	uxth.w	sl, r2
 80203ba:	f8dc 2000 	ldr.w	r2, [ip]
 80203be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80203c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80203c6:	b29b      	uxth	r3, r3
 80203c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80203cc:	4581      	cmp	r9, r0
 80203ce:	f84c 3b04 	str.w	r3, [ip], #4
 80203d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80203d6:	d2db      	bcs.n	8020390 <quorem+0x44>
 80203d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80203dc:	b92b      	cbnz	r3, 80203ea <quorem+0x9e>
 80203de:	9b01      	ldr	r3, [sp, #4]
 80203e0:	3b04      	subs	r3, #4
 80203e2:	429d      	cmp	r5, r3
 80203e4:	461a      	mov	r2, r3
 80203e6:	d32e      	bcc.n	8020446 <quorem+0xfa>
 80203e8:	613c      	str	r4, [r7, #16]
 80203ea:	4638      	mov	r0, r7
 80203ec:	f001 fd6e 	bl	8021ecc <__mcmp>
 80203f0:	2800      	cmp	r0, #0
 80203f2:	db24      	blt.n	802043e <quorem+0xf2>
 80203f4:	3601      	adds	r6, #1
 80203f6:	4628      	mov	r0, r5
 80203f8:	f04f 0c00 	mov.w	ip, #0
 80203fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8020400:	f8d0 e000 	ldr.w	lr, [r0]
 8020404:	b293      	uxth	r3, r2
 8020406:	ebac 0303 	sub.w	r3, ip, r3
 802040a:	0c12      	lsrs	r2, r2, #16
 802040c:	fa13 f38e 	uxtah	r3, r3, lr
 8020410:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020418:	b29b      	uxth	r3, r3
 802041a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802041e:	45c1      	cmp	r9, r8
 8020420:	f840 3b04 	str.w	r3, [r0], #4
 8020424:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020428:	d2e8      	bcs.n	80203fc <quorem+0xb0>
 802042a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802042e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020432:	b922      	cbnz	r2, 802043e <quorem+0xf2>
 8020434:	3b04      	subs	r3, #4
 8020436:	429d      	cmp	r5, r3
 8020438:	461a      	mov	r2, r3
 802043a:	d30a      	bcc.n	8020452 <quorem+0x106>
 802043c:	613c      	str	r4, [r7, #16]
 802043e:	4630      	mov	r0, r6
 8020440:	b003      	add	sp, #12
 8020442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020446:	6812      	ldr	r2, [r2, #0]
 8020448:	3b04      	subs	r3, #4
 802044a:	2a00      	cmp	r2, #0
 802044c:	d1cc      	bne.n	80203e8 <quorem+0x9c>
 802044e:	3c01      	subs	r4, #1
 8020450:	e7c7      	b.n	80203e2 <quorem+0x96>
 8020452:	6812      	ldr	r2, [r2, #0]
 8020454:	3b04      	subs	r3, #4
 8020456:	2a00      	cmp	r2, #0
 8020458:	d1f0      	bne.n	802043c <quorem+0xf0>
 802045a:	3c01      	subs	r4, #1
 802045c:	e7eb      	b.n	8020436 <quorem+0xea>
 802045e:	2000      	movs	r0, #0
 8020460:	e7ee      	b.n	8020440 <quorem+0xf4>
 8020462:	0000      	movs	r0, r0
 8020464:	0000      	movs	r0, r0
	...

08020468 <_dtoa_r>:
 8020468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802046c:	ed2d 8b02 	vpush	{d8}
 8020470:	ec57 6b10 	vmov	r6, r7, d0
 8020474:	b095      	sub	sp, #84	; 0x54
 8020476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802047c:	9105      	str	r1, [sp, #20]
 802047e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020482:	4604      	mov	r4, r0
 8020484:	9209      	str	r2, [sp, #36]	; 0x24
 8020486:	930f      	str	r3, [sp, #60]	; 0x3c
 8020488:	b975      	cbnz	r5, 80204a8 <_dtoa_r+0x40>
 802048a:	2010      	movs	r0, #16
 802048c:	f7fd ff64 	bl	801e358 <malloc>
 8020490:	4602      	mov	r2, r0
 8020492:	6260      	str	r0, [r4, #36]	; 0x24
 8020494:	b920      	cbnz	r0, 80204a0 <_dtoa_r+0x38>
 8020496:	4bb2      	ldr	r3, [pc, #712]	; (8020760 <_dtoa_r+0x2f8>)
 8020498:	21ea      	movs	r1, #234	; 0xea
 802049a:	48b2      	ldr	r0, [pc, #712]	; (8020764 <_dtoa_r+0x2fc>)
 802049c:	f7ff ff28 	bl	80202f0 <__assert_func>
 80204a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80204a4:	6005      	str	r5, [r0, #0]
 80204a6:	60c5      	str	r5, [r0, #12]
 80204a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80204aa:	6819      	ldr	r1, [r3, #0]
 80204ac:	b151      	cbz	r1, 80204c4 <_dtoa_r+0x5c>
 80204ae:	685a      	ldr	r2, [r3, #4]
 80204b0:	604a      	str	r2, [r1, #4]
 80204b2:	2301      	movs	r3, #1
 80204b4:	4093      	lsls	r3, r2
 80204b6:	608b      	str	r3, [r1, #8]
 80204b8:	4620      	mov	r0, r4
 80204ba:	f001 fa7f 	bl	80219bc <_Bfree>
 80204be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80204c0:	2200      	movs	r2, #0
 80204c2:	601a      	str	r2, [r3, #0]
 80204c4:	1e3b      	subs	r3, r7, #0
 80204c6:	bfb9      	ittee	lt
 80204c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80204cc:	9303      	strlt	r3, [sp, #12]
 80204ce:	2300      	movge	r3, #0
 80204d0:	f8c8 3000 	strge.w	r3, [r8]
 80204d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80204d8:	4ba3      	ldr	r3, [pc, #652]	; (8020768 <_dtoa_r+0x300>)
 80204da:	bfbc      	itt	lt
 80204dc:	2201      	movlt	r2, #1
 80204de:	f8c8 2000 	strlt.w	r2, [r8]
 80204e2:	ea33 0309 	bics.w	r3, r3, r9
 80204e6:	d11b      	bne.n	8020520 <_dtoa_r+0xb8>
 80204e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80204ee:	6013      	str	r3, [r2, #0]
 80204f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80204f4:	4333      	orrs	r3, r6
 80204f6:	f000 857a 	beq.w	8020fee <_dtoa_r+0xb86>
 80204fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204fc:	b963      	cbnz	r3, 8020518 <_dtoa_r+0xb0>
 80204fe:	4b9b      	ldr	r3, [pc, #620]	; (802076c <_dtoa_r+0x304>)
 8020500:	e024      	b.n	802054c <_dtoa_r+0xe4>
 8020502:	4b9b      	ldr	r3, [pc, #620]	; (8020770 <_dtoa_r+0x308>)
 8020504:	9300      	str	r3, [sp, #0]
 8020506:	3308      	adds	r3, #8
 8020508:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802050a:	6013      	str	r3, [r2, #0]
 802050c:	9800      	ldr	r0, [sp, #0]
 802050e:	b015      	add	sp, #84	; 0x54
 8020510:	ecbd 8b02 	vpop	{d8}
 8020514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020518:	4b94      	ldr	r3, [pc, #592]	; (802076c <_dtoa_r+0x304>)
 802051a:	9300      	str	r3, [sp, #0]
 802051c:	3303      	adds	r3, #3
 802051e:	e7f3      	b.n	8020508 <_dtoa_r+0xa0>
 8020520:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020524:	2200      	movs	r2, #0
 8020526:	ec51 0b17 	vmov	r0, r1, d7
 802052a:	2300      	movs	r3, #0
 802052c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020530:	f7e0 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 8020534:	4680      	mov	r8, r0
 8020536:	b158      	cbz	r0, 8020550 <_dtoa_r+0xe8>
 8020538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802053a:	2301      	movs	r3, #1
 802053c:	6013      	str	r3, [r2, #0]
 802053e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020540:	2b00      	cmp	r3, #0
 8020542:	f000 8551 	beq.w	8020fe8 <_dtoa_r+0xb80>
 8020546:	488b      	ldr	r0, [pc, #556]	; (8020774 <_dtoa_r+0x30c>)
 8020548:	6018      	str	r0, [r3, #0]
 802054a:	1e43      	subs	r3, r0, #1
 802054c:	9300      	str	r3, [sp, #0]
 802054e:	e7dd      	b.n	802050c <_dtoa_r+0xa4>
 8020550:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020554:	aa12      	add	r2, sp, #72	; 0x48
 8020556:	a913      	add	r1, sp, #76	; 0x4c
 8020558:	4620      	mov	r0, r4
 802055a:	f001 fdd7 	bl	802210c <__d2b>
 802055e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020562:	4683      	mov	fp, r0
 8020564:	2d00      	cmp	r5, #0
 8020566:	d07c      	beq.n	8020662 <_dtoa_r+0x1fa>
 8020568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802056a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802056e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020572:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8020576:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802057a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802057e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020582:	4b7d      	ldr	r3, [pc, #500]	; (8020778 <_dtoa_r+0x310>)
 8020584:	2200      	movs	r2, #0
 8020586:	4630      	mov	r0, r6
 8020588:	4639      	mov	r1, r7
 802058a:	f7df fe7d 	bl	8000288 <__aeabi_dsub>
 802058e:	a36e      	add	r3, pc, #440	; (adr r3, 8020748 <_dtoa_r+0x2e0>)
 8020590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020594:	f7e0 f830 	bl	80005f8 <__aeabi_dmul>
 8020598:	a36d      	add	r3, pc, #436	; (adr r3, 8020750 <_dtoa_r+0x2e8>)
 802059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802059e:	f7df fe75 	bl	800028c <__adddf3>
 80205a2:	4606      	mov	r6, r0
 80205a4:	4628      	mov	r0, r5
 80205a6:	460f      	mov	r7, r1
 80205a8:	f7df ffbc 	bl	8000524 <__aeabi_i2d>
 80205ac:	a36a      	add	r3, pc, #424	; (adr r3, 8020758 <_dtoa_r+0x2f0>)
 80205ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205b2:	f7e0 f821 	bl	80005f8 <__aeabi_dmul>
 80205b6:	4602      	mov	r2, r0
 80205b8:	460b      	mov	r3, r1
 80205ba:	4630      	mov	r0, r6
 80205bc:	4639      	mov	r1, r7
 80205be:	f7df fe65 	bl	800028c <__adddf3>
 80205c2:	4606      	mov	r6, r0
 80205c4:	460f      	mov	r7, r1
 80205c6:	f7e0 fac7 	bl	8000b58 <__aeabi_d2iz>
 80205ca:	2200      	movs	r2, #0
 80205cc:	4682      	mov	sl, r0
 80205ce:	2300      	movs	r3, #0
 80205d0:	4630      	mov	r0, r6
 80205d2:	4639      	mov	r1, r7
 80205d4:	f7e0 fa82 	bl	8000adc <__aeabi_dcmplt>
 80205d8:	b148      	cbz	r0, 80205ee <_dtoa_r+0x186>
 80205da:	4650      	mov	r0, sl
 80205dc:	f7df ffa2 	bl	8000524 <__aeabi_i2d>
 80205e0:	4632      	mov	r2, r6
 80205e2:	463b      	mov	r3, r7
 80205e4:	f7e0 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 80205e8:	b908      	cbnz	r0, 80205ee <_dtoa_r+0x186>
 80205ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80205ee:	f1ba 0f16 	cmp.w	sl, #22
 80205f2:	d854      	bhi.n	802069e <_dtoa_r+0x236>
 80205f4:	4b61      	ldr	r3, [pc, #388]	; (802077c <_dtoa_r+0x314>)
 80205f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80205fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020602:	f7e0 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8020606:	2800      	cmp	r0, #0
 8020608:	d04b      	beq.n	80206a2 <_dtoa_r+0x23a>
 802060a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802060e:	2300      	movs	r3, #0
 8020610:	930e      	str	r3, [sp, #56]	; 0x38
 8020612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020614:	1b5d      	subs	r5, r3, r5
 8020616:	1e6b      	subs	r3, r5, #1
 8020618:	9304      	str	r3, [sp, #16]
 802061a:	bf43      	ittte	mi
 802061c:	2300      	movmi	r3, #0
 802061e:	f1c5 0801 	rsbmi	r8, r5, #1
 8020622:	9304      	strmi	r3, [sp, #16]
 8020624:	f04f 0800 	movpl.w	r8, #0
 8020628:	f1ba 0f00 	cmp.w	sl, #0
 802062c:	db3b      	blt.n	80206a6 <_dtoa_r+0x23e>
 802062e:	9b04      	ldr	r3, [sp, #16]
 8020630:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020634:	4453      	add	r3, sl
 8020636:	9304      	str	r3, [sp, #16]
 8020638:	2300      	movs	r3, #0
 802063a:	9306      	str	r3, [sp, #24]
 802063c:	9b05      	ldr	r3, [sp, #20]
 802063e:	2b09      	cmp	r3, #9
 8020640:	d869      	bhi.n	8020716 <_dtoa_r+0x2ae>
 8020642:	2b05      	cmp	r3, #5
 8020644:	bfc4      	itt	gt
 8020646:	3b04      	subgt	r3, #4
 8020648:	9305      	strgt	r3, [sp, #20]
 802064a:	9b05      	ldr	r3, [sp, #20]
 802064c:	f1a3 0302 	sub.w	r3, r3, #2
 8020650:	bfcc      	ite	gt
 8020652:	2500      	movgt	r5, #0
 8020654:	2501      	movle	r5, #1
 8020656:	2b03      	cmp	r3, #3
 8020658:	d869      	bhi.n	802072e <_dtoa_r+0x2c6>
 802065a:	e8df f003 	tbb	[pc, r3]
 802065e:	4e2c      	.short	0x4e2c
 8020660:	5a4c      	.short	0x5a4c
 8020662:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8020666:	441d      	add	r5, r3
 8020668:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802066c:	2b20      	cmp	r3, #32
 802066e:	bfc1      	itttt	gt
 8020670:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020674:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020678:	fa09 f303 	lslgt.w	r3, r9, r3
 802067c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020680:	bfda      	itte	le
 8020682:	f1c3 0320 	rsble	r3, r3, #32
 8020686:	fa06 f003 	lslle.w	r0, r6, r3
 802068a:	4318      	orrgt	r0, r3
 802068c:	f7df ff3a 	bl	8000504 <__aeabi_ui2d>
 8020690:	2301      	movs	r3, #1
 8020692:	4606      	mov	r6, r0
 8020694:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020698:	3d01      	subs	r5, #1
 802069a:	9310      	str	r3, [sp, #64]	; 0x40
 802069c:	e771      	b.n	8020582 <_dtoa_r+0x11a>
 802069e:	2301      	movs	r3, #1
 80206a0:	e7b6      	b.n	8020610 <_dtoa_r+0x1a8>
 80206a2:	900e      	str	r0, [sp, #56]	; 0x38
 80206a4:	e7b5      	b.n	8020612 <_dtoa_r+0x1aa>
 80206a6:	f1ca 0300 	rsb	r3, sl, #0
 80206aa:	9306      	str	r3, [sp, #24]
 80206ac:	2300      	movs	r3, #0
 80206ae:	eba8 080a 	sub.w	r8, r8, sl
 80206b2:	930d      	str	r3, [sp, #52]	; 0x34
 80206b4:	e7c2      	b.n	802063c <_dtoa_r+0x1d4>
 80206b6:	2300      	movs	r3, #0
 80206b8:	9308      	str	r3, [sp, #32]
 80206ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206bc:	2b00      	cmp	r3, #0
 80206be:	dc39      	bgt.n	8020734 <_dtoa_r+0x2cc>
 80206c0:	f04f 0901 	mov.w	r9, #1
 80206c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80206c8:	464b      	mov	r3, r9
 80206ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80206ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80206d0:	2200      	movs	r2, #0
 80206d2:	6042      	str	r2, [r0, #4]
 80206d4:	2204      	movs	r2, #4
 80206d6:	f102 0614 	add.w	r6, r2, #20
 80206da:	429e      	cmp	r6, r3
 80206dc:	6841      	ldr	r1, [r0, #4]
 80206de:	d92f      	bls.n	8020740 <_dtoa_r+0x2d8>
 80206e0:	4620      	mov	r0, r4
 80206e2:	f001 f92b 	bl	802193c <_Balloc>
 80206e6:	9000      	str	r0, [sp, #0]
 80206e8:	2800      	cmp	r0, #0
 80206ea:	d14b      	bne.n	8020784 <_dtoa_r+0x31c>
 80206ec:	4b24      	ldr	r3, [pc, #144]	; (8020780 <_dtoa_r+0x318>)
 80206ee:	4602      	mov	r2, r0
 80206f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80206f4:	e6d1      	b.n	802049a <_dtoa_r+0x32>
 80206f6:	2301      	movs	r3, #1
 80206f8:	e7de      	b.n	80206b8 <_dtoa_r+0x250>
 80206fa:	2300      	movs	r3, #0
 80206fc:	9308      	str	r3, [sp, #32]
 80206fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020700:	eb0a 0903 	add.w	r9, sl, r3
 8020704:	f109 0301 	add.w	r3, r9, #1
 8020708:	2b01      	cmp	r3, #1
 802070a:	9301      	str	r3, [sp, #4]
 802070c:	bfb8      	it	lt
 802070e:	2301      	movlt	r3, #1
 8020710:	e7dd      	b.n	80206ce <_dtoa_r+0x266>
 8020712:	2301      	movs	r3, #1
 8020714:	e7f2      	b.n	80206fc <_dtoa_r+0x294>
 8020716:	2501      	movs	r5, #1
 8020718:	2300      	movs	r3, #0
 802071a:	9305      	str	r3, [sp, #20]
 802071c:	9508      	str	r5, [sp, #32]
 802071e:	f04f 39ff 	mov.w	r9, #4294967295
 8020722:	2200      	movs	r2, #0
 8020724:	f8cd 9004 	str.w	r9, [sp, #4]
 8020728:	2312      	movs	r3, #18
 802072a:	9209      	str	r2, [sp, #36]	; 0x24
 802072c:	e7cf      	b.n	80206ce <_dtoa_r+0x266>
 802072e:	2301      	movs	r3, #1
 8020730:	9308      	str	r3, [sp, #32]
 8020732:	e7f4      	b.n	802071e <_dtoa_r+0x2b6>
 8020734:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020738:	f8cd 9004 	str.w	r9, [sp, #4]
 802073c:	464b      	mov	r3, r9
 802073e:	e7c6      	b.n	80206ce <_dtoa_r+0x266>
 8020740:	3101      	adds	r1, #1
 8020742:	6041      	str	r1, [r0, #4]
 8020744:	0052      	lsls	r2, r2, #1
 8020746:	e7c6      	b.n	80206d6 <_dtoa_r+0x26e>
 8020748:	636f4361 	.word	0x636f4361
 802074c:	3fd287a7 	.word	0x3fd287a7
 8020750:	8b60c8b3 	.word	0x8b60c8b3
 8020754:	3fc68a28 	.word	0x3fc68a28
 8020758:	509f79fb 	.word	0x509f79fb
 802075c:	3fd34413 	.word	0x3fd34413
 8020760:	0802715b 	.word	0x0802715b
 8020764:	08027271 	.word	0x08027271
 8020768:	7ff00000 	.word	0x7ff00000
 802076c:	0802726d 	.word	0x0802726d
 8020770:	08027264 	.word	0x08027264
 8020774:	080274d2 	.word	0x080274d2
 8020778:	3ff80000 	.word	0x3ff80000
 802077c:	080273e8 	.word	0x080273e8
 8020780:	080272d0 	.word	0x080272d0
 8020784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020786:	9a00      	ldr	r2, [sp, #0]
 8020788:	601a      	str	r2, [r3, #0]
 802078a:	9b01      	ldr	r3, [sp, #4]
 802078c:	2b0e      	cmp	r3, #14
 802078e:	f200 80ad 	bhi.w	80208ec <_dtoa_r+0x484>
 8020792:	2d00      	cmp	r5, #0
 8020794:	f000 80aa 	beq.w	80208ec <_dtoa_r+0x484>
 8020798:	f1ba 0f00 	cmp.w	sl, #0
 802079c:	dd36      	ble.n	802080c <_dtoa_r+0x3a4>
 802079e:	4ac3      	ldr	r2, [pc, #780]	; (8020aac <_dtoa_r+0x644>)
 80207a0:	f00a 030f 	and.w	r3, sl, #15
 80207a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80207a8:	ed93 7b00 	vldr	d7, [r3]
 80207ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80207b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80207b4:	eeb0 8a47 	vmov.f32	s16, s14
 80207b8:	eef0 8a67 	vmov.f32	s17, s15
 80207bc:	d016      	beq.n	80207ec <_dtoa_r+0x384>
 80207be:	4bbc      	ldr	r3, [pc, #752]	; (8020ab0 <_dtoa_r+0x648>)
 80207c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80207c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80207c8:	f7e0 f840 	bl	800084c <__aeabi_ddiv>
 80207cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80207d0:	f007 070f 	and.w	r7, r7, #15
 80207d4:	2503      	movs	r5, #3
 80207d6:	4eb6      	ldr	r6, [pc, #728]	; (8020ab0 <_dtoa_r+0x648>)
 80207d8:	b957      	cbnz	r7, 80207f0 <_dtoa_r+0x388>
 80207da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80207de:	ec53 2b18 	vmov	r2, r3, d8
 80207e2:	f7e0 f833 	bl	800084c <__aeabi_ddiv>
 80207e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80207ea:	e029      	b.n	8020840 <_dtoa_r+0x3d8>
 80207ec:	2502      	movs	r5, #2
 80207ee:	e7f2      	b.n	80207d6 <_dtoa_r+0x36e>
 80207f0:	07f9      	lsls	r1, r7, #31
 80207f2:	d508      	bpl.n	8020806 <_dtoa_r+0x39e>
 80207f4:	ec51 0b18 	vmov	r0, r1, d8
 80207f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80207fc:	f7df fefc 	bl	80005f8 <__aeabi_dmul>
 8020800:	ec41 0b18 	vmov	d8, r0, r1
 8020804:	3501      	adds	r5, #1
 8020806:	107f      	asrs	r7, r7, #1
 8020808:	3608      	adds	r6, #8
 802080a:	e7e5      	b.n	80207d8 <_dtoa_r+0x370>
 802080c:	f000 80a6 	beq.w	802095c <_dtoa_r+0x4f4>
 8020810:	f1ca 0600 	rsb	r6, sl, #0
 8020814:	4ba5      	ldr	r3, [pc, #660]	; (8020aac <_dtoa_r+0x644>)
 8020816:	4fa6      	ldr	r7, [pc, #664]	; (8020ab0 <_dtoa_r+0x648>)
 8020818:	f006 020f 	and.w	r2, r6, #15
 802081c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020824:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020828:	f7df fee6 	bl	80005f8 <__aeabi_dmul>
 802082c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020830:	1136      	asrs	r6, r6, #4
 8020832:	2300      	movs	r3, #0
 8020834:	2502      	movs	r5, #2
 8020836:	2e00      	cmp	r6, #0
 8020838:	f040 8085 	bne.w	8020946 <_dtoa_r+0x4de>
 802083c:	2b00      	cmp	r3, #0
 802083e:	d1d2      	bne.n	80207e6 <_dtoa_r+0x37e>
 8020840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020842:	2b00      	cmp	r3, #0
 8020844:	f000 808c 	beq.w	8020960 <_dtoa_r+0x4f8>
 8020848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802084c:	4b99      	ldr	r3, [pc, #612]	; (8020ab4 <_dtoa_r+0x64c>)
 802084e:	2200      	movs	r2, #0
 8020850:	4630      	mov	r0, r6
 8020852:	4639      	mov	r1, r7
 8020854:	f7e0 f942 	bl	8000adc <__aeabi_dcmplt>
 8020858:	2800      	cmp	r0, #0
 802085a:	f000 8081 	beq.w	8020960 <_dtoa_r+0x4f8>
 802085e:	9b01      	ldr	r3, [sp, #4]
 8020860:	2b00      	cmp	r3, #0
 8020862:	d07d      	beq.n	8020960 <_dtoa_r+0x4f8>
 8020864:	f1b9 0f00 	cmp.w	r9, #0
 8020868:	dd3c      	ble.n	80208e4 <_dtoa_r+0x47c>
 802086a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802086e:	9307      	str	r3, [sp, #28]
 8020870:	2200      	movs	r2, #0
 8020872:	4b91      	ldr	r3, [pc, #580]	; (8020ab8 <_dtoa_r+0x650>)
 8020874:	4630      	mov	r0, r6
 8020876:	4639      	mov	r1, r7
 8020878:	f7df febe 	bl	80005f8 <__aeabi_dmul>
 802087c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020880:	3501      	adds	r5, #1
 8020882:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020886:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802088a:	4628      	mov	r0, r5
 802088c:	f7df fe4a 	bl	8000524 <__aeabi_i2d>
 8020890:	4632      	mov	r2, r6
 8020892:	463b      	mov	r3, r7
 8020894:	f7df feb0 	bl	80005f8 <__aeabi_dmul>
 8020898:	4b88      	ldr	r3, [pc, #544]	; (8020abc <_dtoa_r+0x654>)
 802089a:	2200      	movs	r2, #0
 802089c:	f7df fcf6 	bl	800028c <__adddf3>
 80208a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80208a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80208a8:	9303      	str	r3, [sp, #12]
 80208aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d15c      	bne.n	802096a <_dtoa_r+0x502>
 80208b0:	4b83      	ldr	r3, [pc, #524]	; (8020ac0 <_dtoa_r+0x658>)
 80208b2:	2200      	movs	r2, #0
 80208b4:	4630      	mov	r0, r6
 80208b6:	4639      	mov	r1, r7
 80208b8:	f7df fce6 	bl	8000288 <__aeabi_dsub>
 80208bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80208c0:	4606      	mov	r6, r0
 80208c2:	460f      	mov	r7, r1
 80208c4:	f7e0 f928 	bl	8000b18 <__aeabi_dcmpgt>
 80208c8:	2800      	cmp	r0, #0
 80208ca:	f040 8296 	bne.w	8020dfa <_dtoa_r+0x992>
 80208ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80208d2:	4630      	mov	r0, r6
 80208d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80208d8:	4639      	mov	r1, r7
 80208da:	f7e0 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80208de:	2800      	cmp	r0, #0
 80208e0:	f040 8288 	bne.w	8020df4 <_dtoa_r+0x98c>
 80208e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80208e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80208ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	f2c0 8158 	blt.w	8020ba4 <_dtoa_r+0x73c>
 80208f4:	f1ba 0f0e 	cmp.w	sl, #14
 80208f8:	f300 8154 	bgt.w	8020ba4 <_dtoa_r+0x73c>
 80208fc:	4b6b      	ldr	r3, [pc, #428]	; (8020aac <_dtoa_r+0x644>)
 80208fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020902:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020908:	2b00      	cmp	r3, #0
 802090a:	f280 80e3 	bge.w	8020ad4 <_dtoa_r+0x66c>
 802090e:	9b01      	ldr	r3, [sp, #4]
 8020910:	2b00      	cmp	r3, #0
 8020912:	f300 80df 	bgt.w	8020ad4 <_dtoa_r+0x66c>
 8020916:	f040 826d 	bne.w	8020df4 <_dtoa_r+0x98c>
 802091a:	4b69      	ldr	r3, [pc, #420]	; (8020ac0 <_dtoa_r+0x658>)
 802091c:	2200      	movs	r2, #0
 802091e:	4640      	mov	r0, r8
 8020920:	4649      	mov	r1, r9
 8020922:	f7df fe69 	bl	80005f8 <__aeabi_dmul>
 8020926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802092a:	f7e0 f8eb 	bl	8000b04 <__aeabi_dcmpge>
 802092e:	9e01      	ldr	r6, [sp, #4]
 8020930:	4637      	mov	r7, r6
 8020932:	2800      	cmp	r0, #0
 8020934:	f040 8243 	bne.w	8020dbe <_dtoa_r+0x956>
 8020938:	9d00      	ldr	r5, [sp, #0]
 802093a:	2331      	movs	r3, #49	; 0x31
 802093c:	f805 3b01 	strb.w	r3, [r5], #1
 8020940:	f10a 0a01 	add.w	sl, sl, #1
 8020944:	e23f      	b.n	8020dc6 <_dtoa_r+0x95e>
 8020946:	07f2      	lsls	r2, r6, #31
 8020948:	d505      	bpl.n	8020956 <_dtoa_r+0x4ee>
 802094a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802094e:	f7df fe53 	bl	80005f8 <__aeabi_dmul>
 8020952:	3501      	adds	r5, #1
 8020954:	2301      	movs	r3, #1
 8020956:	1076      	asrs	r6, r6, #1
 8020958:	3708      	adds	r7, #8
 802095a:	e76c      	b.n	8020836 <_dtoa_r+0x3ce>
 802095c:	2502      	movs	r5, #2
 802095e:	e76f      	b.n	8020840 <_dtoa_r+0x3d8>
 8020960:	9b01      	ldr	r3, [sp, #4]
 8020962:	f8cd a01c 	str.w	sl, [sp, #28]
 8020966:	930c      	str	r3, [sp, #48]	; 0x30
 8020968:	e78d      	b.n	8020886 <_dtoa_r+0x41e>
 802096a:	9900      	ldr	r1, [sp, #0]
 802096c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802096e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020970:	4b4e      	ldr	r3, [pc, #312]	; (8020aac <_dtoa_r+0x644>)
 8020972:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020976:	4401      	add	r1, r0
 8020978:	9102      	str	r1, [sp, #8]
 802097a:	9908      	ldr	r1, [sp, #32]
 802097c:	eeb0 8a47 	vmov.f32	s16, s14
 8020980:	eef0 8a67 	vmov.f32	s17, s15
 8020984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020988:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802098c:	2900      	cmp	r1, #0
 802098e:	d045      	beq.n	8020a1c <_dtoa_r+0x5b4>
 8020990:	494c      	ldr	r1, [pc, #304]	; (8020ac4 <_dtoa_r+0x65c>)
 8020992:	2000      	movs	r0, #0
 8020994:	f7df ff5a 	bl	800084c <__aeabi_ddiv>
 8020998:	ec53 2b18 	vmov	r2, r3, d8
 802099c:	f7df fc74 	bl	8000288 <__aeabi_dsub>
 80209a0:	9d00      	ldr	r5, [sp, #0]
 80209a2:	ec41 0b18 	vmov	d8, r0, r1
 80209a6:	4639      	mov	r1, r7
 80209a8:	4630      	mov	r0, r6
 80209aa:	f7e0 f8d5 	bl	8000b58 <__aeabi_d2iz>
 80209ae:	900c      	str	r0, [sp, #48]	; 0x30
 80209b0:	f7df fdb8 	bl	8000524 <__aeabi_i2d>
 80209b4:	4602      	mov	r2, r0
 80209b6:	460b      	mov	r3, r1
 80209b8:	4630      	mov	r0, r6
 80209ba:	4639      	mov	r1, r7
 80209bc:	f7df fc64 	bl	8000288 <__aeabi_dsub>
 80209c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209c2:	3330      	adds	r3, #48	; 0x30
 80209c4:	f805 3b01 	strb.w	r3, [r5], #1
 80209c8:	ec53 2b18 	vmov	r2, r3, d8
 80209cc:	4606      	mov	r6, r0
 80209ce:	460f      	mov	r7, r1
 80209d0:	f7e0 f884 	bl	8000adc <__aeabi_dcmplt>
 80209d4:	2800      	cmp	r0, #0
 80209d6:	d165      	bne.n	8020aa4 <_dtoa_r+0x63c>
 80209d8:	4632      	mov	r2, r6
 80209da:	463b      	mov	r3, r7
 80209dc:	4935      	ldr	r1, [pc, #212]	; (8020ab4 <_dtoa_r+0x64c>)
 80209de:	2000      	movs	r0, #0
 80209e0:	f7df fc52 	bl	8000288 <__aeabi_dsub>
 80209e4:	ec53 2b18 	vmov	r2, r3, d8
 80209e8:	f7e0 f878 	bl	8000adc <__aeabi_dcmplt>
 80209ec:	2800      	cmp	r0, #0
 80209ee:	f040 80b9 	bne.w	8020b64 <_dtoa_r+0x6fc>
 80209f2:	9b02      	ldr	r3, [sp, #8]
 80209f4:	429d      	cmp	r5, r3
 80209f6:	f43f af75 	beq.w	80208e4 <_dtoa_r+0x47c>
 80209fa:	4b2f      	ldr	r3, [pc, #188]	; (8020ab8 <_dtoa_r+0x650>)
 80209fc:	ec51 0b18 	vmov	r0, r1, d8
 8020a00:	2200      	movs	r2, #0
 8020a02:	f7df fdf9 	bl	80005f8 <__aeabi_dmul>
 8020a06:	4b2c      	ldr	r3, [pc, #176]	; (8020ab8 <_dtoa_r+0x650>)
 8020a08:	ec41 0b18 	vmov	d8, r0, r1
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	4630      	mov	r0, r6
 8020a10:	4639      	mov	r1, r7
 8020a12:	f7df fdf1 	bl	80005f8 <__aeabi_dmul>
 8020a16:	4606      	mov	r6, r0
 8020a18:	460f      	mov	r7, r1
 8020a1a:	e7c4      	b.n	80209a6 <_dtoa_r+0x53e>
 8020a1c:	ec51 0b17 	vmov	r0, r1, d7
 8020a20:	f7df fdea 	bl	80005f8 <__aeabi_dmul>
 8020a24:	9b02      	ldr	r3, [sp, #8]
 8020a26:	9d00      	ldr	r5, [sp, #0]
 8020a28:	930c      	str	r3, [sp, #48]	; 0x30
 8020a2a:	ec41 0b18 	vmov	d8, r0, r1
 8020a2e:	4639      	mov	r1, r7
 8020a30:	4630      	mov	r0, r6
 8020a32:	f7e0 f891 	bl	8000b58 <__aeabi_d2iz>
 8020a36:	9011      	str	r0, [sp, #68]	; 0x44
 8020a38:	f7df fd74 	bl	8000524 <__aeabi_i2d>
 8020a3c:	4602      	mov	r2, r0
 8020a3e:	460b      	mov	r3, r1
 8020a40:	4630      	mov	r0, r6
 8020a42:	4639      	mov	r1, r7
 8020a44:	f7df fc20 	bl	8000288 <__aeabi_dsub>
 8020a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a4a:	3330      	adds	r3, #48	; 0x30
 8020a4c:	f805 3b01 	strb.w	r3, [r5], #1
 8020a50:	9b02      	ldr	r3, [sp, #8]
 8020a52:	429d      	cmp	r5, r3
 8020a54:	4606      	mov	r6, r0
 8020a56:	460f      	mov	r7, r1
 8020a58:	f04f 0200 	mov.w	r2, #0
 8020a5c:	d134      	bne.n	8020ac8 <_dtoa_r+0x660>
 8020a5e:	4b19      	ldr	r3, [pc, #100]	; (8020ac4 <_dtoa_r+0x65c>)
 8020a60:	ec51 0b18 	vmov	r0, r1, d8
 8020a64:	f7df fc12 	bl	800028c <__adddf3>
 8020a68:	4602      	mov	r2, r0
 8020a6a:	460b      	mov	r3, r1
 8020a6c:	4630      	mov	r0, r6
 8020a6e:	4639      	mov	r1, r7
 8020a70:	f7e0 f852 	bl	8000b18 <__aeabi_dcmpgt>
 8020a74:	2800      	cmp	r0, #0
 8020a76:	d175      	bne.n	8020b64 <_dtoa_r+0x6fc>
 8020a78:	ec53 2b18 	vmov	r2, r3, d8
 8020a7c:	4911      	ldr	r1, [pc, #68]	; (8020ac4 <_dtoa_r+0x65c>)
 8020a7e:	2000      	movs	r0, #0
 8020a80:	f7df fc02 	bl	8000288 <__aeabi_dsub>
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	4630      	mov	r0, r6
 8020a8a:	4639      	mov	r1, r7
 8020a8c:	f7e0 f826 	bl	8000adc <__aeabi_dcmplt>
 8020a90:	2800      	cmp	r0, #0
 8020a92:	f43f af27 	beq.w	80208e4 <_dtoa_r+0x47c>
 8020a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020a98:	1e6b      	subs	r3, r5, #1
 8020a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8020a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020aa0:	2b30      	cmp	r3, #48	; 0x30
 8020aa2:	d0f8      	beq.n	8020a96 <_dtoa_r+0x62e>
 8020aa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020aa8:	e04a      	b.n	8020b40 <_dtoa_r+0x6d8>
 8020aaa:	bf00      	nop
 8020aac:	080273e8 	.word	0x080273e8
 8020ab0:	080273c0 	.word	0x080273c0
 8020ab4:	3ff00000 	.word	0x3ff00000
 8020ab8:	40240000 	.word	0x40240000
 8020abc:	401c0000 	.word	0x401c0000
 8020ac0:	40140000 	.word	0x40140000
 8020ac4:	3fe00000 	.word	0x3fe00000
 8020ac8:	4baf      	ldr	r3, [pc, #700]	; (8020d88 <_dtoa_r+0x920>)
 8020aca:	f7df fd95 	bl	80005f8 <__aeabi_dmul>
 8020ace:	4606      	mov	r6, r0
 8020ad0:	460f      	mov	r7, r1
 8020ad2:	e7ac      	b.n	8020a2e <_dtoa_r+0x5c6>
 8020ad4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020ad8:	9d00      	ldr	r5, [sp, #0]
 8020ada:	4642      	mov	r2, r8
 8020adc:	464b      	mov	r3, r9
 8020ade:	4630      	mov	r0, r6
 8020ae0:	4639      	mov	r1, r7
 8020ae2:	f7df feb3 	bl	800084c <__aeabi_ddiv>
 8020ae6:	f7e0 f837 	bl	8000b58 <__aeabi_d2iz>
 8020aea:	9002      	str	r0, [sp, #8]
 8020aec:	f7df fd1a 	bl	8000524 <__aeabi_i2d>
 8020af0:	4642      	mov	r2, r8
 8020af2:	464b      	mov	r3, r9
 8020af4:	f7df fd80 	bl	80005f8 <__aeabi_dmul>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	4630      	mov	r0, r6
 8020afe:	4639      	mov	r1, r7
 8020b00:	f7df fbc2 	bl	8000288 <__aeabi_dsub>
 8020b04:	9e02      	ldr	r6, [sp, #8]
 8020b06:	9f01      	ldr	r7, [sp, #4]
 8020b08:	3630      	adds	r6, #48	; 0x30
 8020b0a:	f805 6b01 	strb.w	r6, [r5], #1
 8020b0e:	9e00      	ldr	r6, [sp, #0]
 8020b10:	1bae      	subs	r6, r5, r6
 8020b12:	42b7      	cmp	r7, r6
 8020b14:	4602      	mov	r2, r0
 8020b16:	460b      	mov	r3, r1
 8020b18:	d137      	bne.n	8020b8a <_dtoa_r+0x722>
 8020b1a:	f7df fbb7 	bl	800028c <__adddf3>
 8020b1e:	4642      	mov	r2, r8
 8020b20:	464b      	mov	r3, r9
 8020b22:	4606      	mov	r6, r0
 8020b24:	460f      	mov	r7, r1
 8020b26:	f7df fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8020b2a:	b9c8      	cbnz	r0, 8020b60 <_dtoa_r+0x6f8>
 8020b2c:	4642      	mov	r2, r8
 8020b2e:	464b      	mov	r3, r9
 8020b30:	4630      	mov	r0, r6
 8020b32:	4639      	mov	r1, r7
 8020b34:	f7df ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b38:	b110      	cbz	r0, 8020b40 <_dtoa_r+0x6d8>
 8020b3a:	9b02      	ldr	r3, [sp, #8]
 8020b3c:	07d9      	lsls	r1, r3, #31
 8020b3e:	d40f      	bmi.n	8020b60 <_dtoa_r+0x6f8>
 8020b40:	4620      	mov	r0, r4
 8020b42:	4659      	mov	r1, fp
 8020b44:	f000 ff3a 	bl	80219bc <_Bfree>
 8020b48:	2300      	movs	r3, #0
 8020b4a:	702b      	strb	r3, [r5, #0]
 8020b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b4e:	f10a 0001 	add.w	r0, sl, #1
 8020b52:	6018      	str	r0, [r3, #0]
 8020b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	f43f acd8 	beq.w	802050c <_dtoa_r+0xa4>
 8020b5c:	601d      	str	r5, [r3, #0]
 8020b5e:	e4d5      	b.n	802050c <_dtoa_r+0xa4>
 8020b60:	f8cd a01c 	str.w	sl, [sp, #28]
 8020b64:	462b      	mov	r3, r5
 8020b66:	461d      	mov	r5, r3
 8020b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020b6c:	2a39      	cmp	r2, #57	; 0x39
 8020b6e:	d108      	bne.n	8020b82 <_dtoa_r+0x71a>
 8020b70:	9a00      	ldr	r2, [sp, #0]
 8020b72:	429a      	cmp	r2, r3
 8020b74:	d1f7      	bne.n	8020b66 <_dtoa_r+0x6fe>
 8020b76:	9a07      	ldr	r2, [sp, #28]
 8020b78:	9900      	ldr	r1, [sp, #0]
 8020b7a:	3201      	adds	r2, #1
 8020b7c:	9207      	str	r2, [sp, #28]
 8020b7e:	2230      	movs	r2, #48	; 0x30
 8020b80:	700a      	strb	r2, [r1, #0]
 8020b82:	781a      	ldrb	r2, [r3, #0]
 8020b84:	3201      	adds	r2, #1
 8020b86:	701a      	strb	r2, [r3, #0]
 8020b88:	e78c      	b.n	8020aa4 <_dtoa_r+0x63c>
 8020b8a:	4b7f      	ldr	r3, [pc, #508]	; (8020d88 <_dtoa_r+0x920>)
 8020b8c:	2200      	movs	r2, #0
 8020b8e:	f7df fd33 	bl	80005f8 <__aeabi_dmul>
 8020b92:	2200      	movs	r2, #0
 8020b94:	2300      	movs	r3, #0
 8020b96:	4606      	mov	r6, r0
 8020b98:	460f      	mov	r7, r1
 8020b9a:	f7df ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b9e:	2800      	cmp	r0, #0
 8020ba0:	d09b      	beq.n	8020ada <_dtoa_r+0x672>
 8020ba2:	e7cd      	b.n	8020b40 <_dtoa_r+0x6d8>
 8020ba4:	9a08      	ldr	r2, [sp, #32]
 8020ba6:	2a00      	cmp	r2, #0
 8020ba8:	f000 80c4 	beq.w	8020d34 <_dtoa_r+0x8cc>
 8020bac:	9a05      	ldr	r2, [sp, #20]
 8020bae:	2a01      	cmp	r2, #1
 8020bb0:	f300 80a8 	bgt.w	8020d04 <_dtoa_r+0x89c>
 8020bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020bb6:	2a00      	cmp	r2, #0
 8020bb8:	f000 80a0 	beq.w	8020cfc <_dtoa_r+0x894>
 8020bbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020bc0:	9e06      	ldr	r6, [sp, #24]
 8020bc2:	4645      	mov	r5, r8
 8020bc4:	9a04      	ldr	r2, [sp, #16]
 8020bc6:	2101      	movs	r1, #1
 8020bc8:	441a      	add	r2, r3
 8020bca:	4620      	mov	r0, r4
 8020bcc:	4498      	add	r8, r3
 8020bce:	9204      	str	r2, [sp, #16]
 8020bd0:	f000 fffa 	bl	8021bc8 <__i2b>
 8020bd4:	4607      	mov	r7, r0
 8020bd6:	2d00      	cmp	r5, #0
 8020bd8:	dd0b      	ble.n	8020bf2 <_dtoa_r+0x78a>
 8020bda:	9b04      	ldr	r3, [sp, #16]
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	dd08      	ble.n	8020bf2 <_dtoa_r+0x78a>
 8020be0:	42ab      	cmp	r3, r5
 8020be2:	9a04      	ldr	r2, [sp, #16]
 8020be4:	bfa8      	it	ge
 8020be6:	462b      	movge	r3, r5
 8020be8:	eba8 0803 	sub.w	r8, r8, r3
 8020bec:	1aed      	subs	r5, r5, r3
 8020bee:	1ad3      	subs	r3, r2, r3
 8020bf0:	9304      	str	r3, [sp, #16]
 8020bf2:	9b06      	ldr	r3, [sp, #24]
 8020bf4:	b1fb      	cbz	r3, 8020c36 <_dtoa_r+0x7ce>
 8020bf6:	9b08      	ldr	r3, [sp, #32]
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	f000 809f 	beq.w	8020d3c <_dtoa_r+0x8d4>
 8020bfe:	2e00      	cmp	r6, #0
 8020c00:	dd11      	ble.n	8020c26 <_dtoa_r+0x7be>
 8020c02:	4639      	mov	r1, r7
 8020c04:	4632      	mov	r2, r6
 8020c06:	4620      	mov	r0, r4
 8020c08:	f001 f89a 	bl	8021d40 <__pow5mult>
 8020c0c:	465a      	mov	r2, fp
 8020c0e:	4601      	mov	r1, r0
 8020c10:	4607      	mov	r7, r0
 8020c12:	4620      	mov	r0, r4
 8020c14:	f000 ffee 	bl	8021bf4 <__multiply>
 8020c18:	4659      	mov	r1, fp
 8020c1a:	9007      	str	r0, [sp, #28]
 8020c1c:	4620      	mov	r0, r4
 8020c1e:	f000 fecd 	bl	80219bc <_Bfree>
 8020c22:	9b07      	ldr	r3, [sp, #28]
 8020c24:	469b      	mov	fp, r3
 8020c26:	9b06      	ldr	r3, [sp, #24]
 8020c28:	1b9a      	subs	r2, r3, r6
 8020c2a:	d004      	beq.n	8020c36 <_dtoa_r+0x7ce>
 8020c2c:	4659      	mov	r1, fp
 8020c2e:	4620      	mov	r0, r4
 8020c30:	f001 f886 	bl	8021d40 <__pow5mult>
 8020c34:	4683      	mov	fp, r0
 8020c36:	2101      	movs	r1, #1
 8020c38:	4620      	mov	r0, r4
 8020c3a:	f000 ffc5 	bl	8021bc8 <__i2b>
 8020c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	4606      	mov	r6, r0
 8020c44:	dd7c      	ble.n	8020d40 <_dtoa_r+0x8d8>
 8020c46:	461a      	mov	r2, r3
 8020c48:	4601      	mov	r1, r0
 8020c4a:	4620      	mov	r0, r4
 8020c4c:	f001 f878 	bl	8021d40 <__pow5mult>
 8020c50:	9b05      	ldr	r3, [sp, #20]
 8020c52:	2b01      	cmp	r3, #1
 8020c54:	4606      	mov	r6, r0
 8020c56:	dd76      	ble.n	8020d46 <_dtoa_r+0x8de>
 8020c58:	2300      	movs	r3, #0
 8020c5a:	9306      	str	r3, [sp, #24]
 8020c5c:	6933      	ldr	r3, [r6, #16]
 8020c5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020c62:	6918      	ldr	r0, [r3, #16]
 8020c64:	f000 ff60 	bl	8021b28 <__hi0bits>
 8020c68:	f1c0 0020 	rsb	r0, r0, #32
 8020c6c:	9b04      	ldr	r3, [sp, #16]
 8020c6e:	4418      	add	r0, r3
 8020c70:	f010 001f 	ands.w	r0, r0, #31
 8020c74:	f000 8086 	beq.w	8020d84 <_dtoa_r+0x91c>
 8020c78:	f1c0 0320 	rsb	r3, r0, #32
 8020c7c:	2b04      	cmp	r3, #4
 8020c7e:	dd7f      	ble.n	8020d80 <_dtoa_r+0x918>
 8020c80:	f1c0 001c 	rsb	r0, r0, #28
 8020c84:	9b04      	ldr	r3, [sp, #16]
 8020c86:	4403      	add	r3, r0
 8020c88:	4480      	add	r8, r0
 8020c8a:	4405      	add	r5, r0
 8020c8c:	9304      	str	r3, [sp, #16]
 8020c8e:	f1b8 0f00 	cmp.w	r8, #0
 8020c92:	dd05      	ble.n	8020ca0 <_dtoa_r+0x838>
 8020c94:	4659      	mov	r1, fp
 8020c96:	4642      	mov	r2, r8
 8020c98:	4620      	mov	r0, r4
 8020c9a:	f001 f8ab 	bl	8021df4 <__lshift>
 8020c9e:	4683      	mov	fp, r0
 8020ca0:	9b04      	ldr	r3, [sp, #16]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	dd05      	ble.n	8020cb2 <_dtoa_r+0x84a>
 8020ca6:	4631      	mov	r1, r6
 8020ca8:	461a      	mov	r2, r3
 8020caa:	4620      	mov	r0, r4
 8020cac:	f001 f8a2 	bl	8021df4 <__lshift>
 8020cb0:	4606      	mov	r6, r0
 8020cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d069      	beq.n	8020d8c <_dtoa_r+0x924>
 8020cb8:	4631      	mov	r1, r6
 8020cba:	4658      	mov	r0, fp
 8020cbc:	f001 f906 	bl	8021ecc <__mcmp>
 8020cc0:	2800      	cmp	r0, #0
 8020cc2:	da63      	bge.n	8020d8c <_dtoa_r+0x924>
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	4659      	mov	r1, fp
 8020cc8:	220a      	movs	r2, #10
 8020cca:	4620      	mov	r0, r4
 8020ccc:	f000 fe98 	bl	8021a00 <__multadd>
 8020cd0:	9b08      	ldr	r3, [sp, #32]
 8020cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020cd6:	4683      	mov	fp, r0
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	f000 818f 	beq.w	8020ffc <_dtoa_r+0xb94>
 8020cde:	4639      	mov	r1, r7
 8020ce0:	2300      	movs	r3, #0
 8020ce2:	220a      	movs	r2, #10
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	f000 fe8b 	bl	8021a00 <__multadd>
 8020cea:	f1b9 0f00 	cmp.w	r9, #0
 8020cee:	4607      	mov	r7, r0
 8020cf0:	f300 808e 	bgt.w	8020e10 <_dtoa_r+0x9a8>
 8020cf4:	9b05      	ldr	r3, [sp, #20]
 8020cf6:	2b02      	cmp	r3, #2
 8020cf8:	dc50      	bgt.n	8020d9c <_dtoa_r+0x934>
 8020cfa:	e089      	b.n	8020e10 <_dtoa_r+0x9a8>
 8020cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020d02:	e75d      	b.n	8020bc0 <_dtoa_r+0x758>
 8020d04:	9b01      	ldr	r3, [sp, #4]
 8020d06:	1e5e      	subs	r6, r3, #1
 8020d08:	9b06      	ldr	r3, [sp, #24]
 8020d0a:	42b3      	cmp	r3, r6
 8020d0c:	bfbf      	itttt	lt
 8020d0e:	9b06      	ldrlt	r3, [sp, #24]
 8020d10:	9606      	strlt	r6, [sp, #24]
 8020d12:	1af2      	sublt	r2, r6, r3
 8020d14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8020d16:	bfb6      	itet	lt
 8020d18:	189b      	addlt	r3, r3, r2
 8020d1a:	1b9e      	subge	r6, r3, r6
 8020d1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8020d1e:	9b01      	ldr	r3, [sp, #4]
 8020d20:	bfb8      	it	lt
 8020d22:	2600      	movlt	r6, #0
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	bfb5      	itete	lt
 8020d28:	eba8 0503 	sublt.w	r5, r8, r3
 8020d2c:	9b01      	ldrge	r3, [sp, #4]
 8020d2e:	2300      	movlt	r3, #0
 8020d30:	4645      	movge	r5, r8
 8020d32:	e747      	b.n	8020bc4 <_dtoa_r+0x75c>
 8020d34:	9e06      	ldr	r6, [sp, #24]
 8020d36:	9f08      	ldr	r7, [sp, #32]
 8020d38:	4645      	mov	r5, r8
 8020d3a:	e74c      	b.n	8020bd6 <_dtoa_r+0x76e>
 8020d3c:	9a06      	ldr	r2, [sp, #24]
 8020d3e:	e775      	b.n	8020c2c <_dtoa_r+0x7c4>
 8020d40:	9b05      	ldr	r3, [sp, #20]
 8020d42:	2b01      	cmp	r3, #1
 8020d44:	dc18      	bgt.n	8020d78 <_dtoa_r+0x910>
 8020d46:	9b02      	ldr	r3, [sp, #8]
 8020d48:	b9b3      	cbnz	r3, 8020d78 <_dtoa_r+0x910>
 8020d4a:	9b03      	ldr	r3, [sp, #12]
 8020d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020d50:	b9a3      	cbnz	r3, 8020d7c <_dtoa_r+0x914>
 8020d52:	9b03      	ldr	r3, [sp, #12]
 8020d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020d58:	0d1b      	lsrs	r3, r3, #20
 8020d5a:	051b      	lsls	r3, r3, #20
 8020d5c:	b12b      	cbz	r3, 8020d6a <_dtoa_r+0x902>
 8020d5e:	9b04      	ldr	r3, [sp, #16]
 8020d60:	3301      	adds	r3, #1
 8020d62:	9304      	str	r3, [sp, #16]
 8020d64:	f108 0801 	add.w	r8, r8, #1
 8020d68:	2301      	movs	r3, #1
 8020d6a:	9306      	str	r3, [sp, #24]
 8020d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	f47f af74 	bne.w	8020c5c <_dtoa_r+0x7f4>
 8020d74:	2001      	movs	r0, #1
 8020d76:	e779      	b.n	8020c6c <_dtoa_r+0x804>
 8020d78:	2300      	movs	r3, #0
 8020d7a:	e7f6      	b.n	8020d6a <_dtoa_r+0x902>
 8020d7c:	9b02      	ldr	r3, [sp, #8]
 8020d7e:	e7f4      	b.n	8020d6a <_dtoa_r+0x902>
 8020d80:	d085      	beq.n	8020c8e <_dtoa_r+0x826>
 8020d82:	4618      	mov	r0, r3
 8020d84:	301c      	adds	r0, #28
 8020d86:	e77d      	b.n	8020c84 <_dtoa_r+0x81c>
 8020d88:	40240000 	.word	0x40240000
 8020d8c:	9b01      	ldr	r3, [sp, #4]
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	dc38      	bgt.n	8020e04 <_dtoa_r+0x99c>
 8020d92:	9b05      	ldr	r3, [sp, #20]
 8020d94:	2b02      	cmp	r3, #2
 8020d96:	dd35      	ble.n	8020e04 <_dtoa_r+0x99c>
 8020d98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020d9c:	f1b9 0f00 	cmp.w	r9, #0
 8020da0:	d10d      	bne.n	8020dbe <_dtoa_r+0x956>
 8020da2:	4631      	mov	r1, r6
 8020da4:	464b      	mov	r3, r9
 8020da6:	2205      	movs	r2, #5
 8020da8:	4620      	mov	r0, r4
 8020daa:	f000 fe29 	bl	8021a00 <__multadd>
 8020dae:	4601      	mov	r1, r0
 8020db0:	4606      	mov	r6, r0
 8020db2:	4658      	mov	r0, fp
 8020db4:	f001 f88a 	bl	8021ecc <__mcmp>
 8020db8:	2800      	cmp	r0, #0
 8020dba:	f73f adbd 	bgt.w	8020938 <_dtoa_r+0x4d0>
 8020dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc0:	9d00      	ldr	r5, [sp, #0]
 8020dc2:	ea6f 0a03 	mvn.w	sl, r3
 8020dc6:	f04f 0800 	mov.w	r8, #0
 8020dca:	4631      	mov	r1, r6
 8020dcc:	4620      	mov	r0, r4
 8020dce:	f000 fdf5 	bl	80219bc <_Bfree>
 8020dd2:	2f00      	cmp	r7, #0
 8020dd4:	f43f aeb4 	beq.w	8020b40 <_dtoa_r+0x6d8>
 8020dd8:	f1b8 0f00 	cmp.w	r8, #0
 8020ddc:	d005      	beq.n	8020dea <_dtoa_r+0x982>
 8020dde:	45b8      	cmp	r8, r7
 8020de0:	d003      	beq.n	8020dea <_dtoa_r+0x982>
 8020de2:	4641      	mov	r1, r8
 8020de4:	4620      	mov	r0, r4
 8020de6:	f000 fde9 	bl	80219bc <_Bfree>
 8020dea:	4639      	mov	r1, r7
 8020dec:	4620      	mov	r0, r4
 8020dee:	f000 fde5 	bl	80219bc <_Bfree>
 8020df2:	e6a5      	b.n	8020b40 <_dtoa_r+0x6d8>
 8020df4:	2600      	movs	r6, #0
 8020df6:	4637      	mov	r7, r6
 8020df8:	e7e1      	b.n	8020dbe <_dtoa_r+0x956>
 8020dfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020dfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020e00:	4637      	mov	r7, r6
 8020e02:	e599      	b.n	8020938 <_dtoa_r+0x4d0>
 8020e04:	9b08      	ldr	r3, [sp, #32]
 8020e06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	f000 80fd 	beq.w	802100a <_dtoa_r+0xba2>
 8020e10:	2d00      	cmp	r5, #0
 8020e12:	dd05      	ble.n	8020e20 <_dtoa_r+0x9b8>
 8020e14:	4639      	mov	r1, r7
 8020e16:	462a      	mov	r2, r5
 8020e18:	4620      	mov	r0, r4
 8020e1a:	f000 ffeb 	bl	8021df4 <__lshift>
 8020e1e:	4607      	mov	r7, r0
 8020e20:	9b06      	ldr	r3, [sp, #24]
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d05c      	beq.n	8020ee0 <_dtoa_r+0xa78>
 8020e26:	6879      	ldr	r1, [r7, #4]
 8020e28:	4620      	mov	r0, r4
 8020e2a:	f000 fd87 	bl	802193c <_Balloc>
 8020e2e:	4605      	mov	r5, r0
 8020e30:	b928      	cbnz	r0, 8020e3e <_dtoa_r+0x9d6>
 8020e32:	4b80      	ldr	r3, [pc, #512]	; (8021034 <_dtoa_r+0xbcc>)
 8020e34:	4602      	mov	r2, r0
 8020e36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020e3a:	f7ff bb2e 	b.w	802049a <_dtoa_r+0x32>
 8020e3e:	693a      	ldr	r2, [r7, #16]
 8020e40:	3202      	adds	r2, #2
 8020e42:	0092      	lsls	r2, r2, #2
 8020e44:	f107 010c 	add.w	r1, r7, #12
 8020e48:	300c      	adds	r0, #12
 8020e4a:	f7fd fa9b 	bl	801e384 <memcpy>
 8020e4e:	2201      	movs	r2, #1
 8020e50:	4629      	mov	r1, r5
 8020e52:	4620      	mov	r0, r4
 8020e54:	f000 ffce 	bl	8021df4 <__lshift>
 8020e58:	9b00      	ldr	r3, [sp, #0]
 8020e5a:	3301      	adds	r3, #1
 8020e5c:	9301      	str	r3, [sp, #4]
 8020e5e:	9b00      	ldr	r3, [sp, #0]
 8020e60:	444b      	add	r3, r9
 8020e62:	9307      	str	r3, [sp, #28]
 8020e64:	9b02      	ldr	r3, [sp, #8]
 8020e66:	f003 0301 	and.w	r3, r3, #1
 8020e6a:	46b8      	mov	r8, r7
 8020e6c:	9306      	str	r3, [sp, #24]
 8020e6e:	4607      	mov	r7, r0
 8020e70:	9b01      	ldr	r3, [sp, #4]
 8020e72:	4631      	mov	r1, r6
 8020e74:	3b01      	subs	r3, #1
 8020e76:	4658      	mov	r0, fp
 8020e78:	9302      	str	r3, [sp, #8]
 8020e7a:	f7ff fa67 	bl	802034c <quorem>
 8020e7e:	4603      	mov	r3, r0
 8020e80:	3330      	adds	r3, #48	; 0x30
 8020e82:	9004      	str	r0, [sp, #16]
 8020e84:	4641      	mov	r1, r8
 8020e86:	4658      	mov	r0, fp
 8020e88:	9308      	str	r3, [sp, #32]
 8020e8a:	f001 f81f 	bl	8021ecc <__mcmp>
 8020e8e:	463a      	mov	r2, r7
 8020e90:	4681      	mov	r9, r0
 8020e92:	4631      	mov	r1, r6
 8020e94:	4620      	mov	r0, r4
 8020e96:	f001 f835 	bl	8021f04 <__mdiff>
 8020e9a:	68c2      	ldr	r2, [r0, #12]
 8020e9c:	9b08      	ldr	r3, [sp, #32]
 8020e9e:	4605      	mov	r5, r0
 8020ea0:	bb02      	cbnz	r2, 8020ee4 <_dtoa_r+0xa7c>
 8020ea2:	4601      	mov	r1, r0
 8020ea4:	4658      	mov	r0, fp
 8020ea6:	f001 f811 	bl	8021ecc <__mcmp>
 8020eaa:	9b08      	ldr	r3, [sp, #32]
 8020eac:	4602      	mov	r2, r0
 8020eae:	4629      	mov	r1, r5
 8020eb0:	4620      	mov	r0, r4
 8020eb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8020eb6:	f000 fd81 	bl	80219bc <_Bfree>
 8020eba:	9b05      	ldr	r3, [sp, #20]
 8020ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ebe:	9d01      	ldr	r5, [sp, #4]
 8020ec0:	ea43 0102 	orr.w	r1, r3, r2
 8020ec4:	9b06      	ldr	r3, [sp, #24]
 8020ec6:	430b      	orrs	r3, r1
 8020ec8:	9b08      	ldr	r3, [sp, #32]
 8020eca:	d10d      	bne.n	8020ee8 <_dtoa_r+0xa80>
 8020ecc:	2b39      	cmp	r3, #57	; 0x39
 8020ece:	d029      	beq.n	8020f24 <_dtoa_r+0xabc>
 8020ed0:	f1b9 0f00 	cmp.w	r9, #0
 8020ed4:	dd01      	ble.n	8020eda <_dtoa_r+0xa72>
 8020ed6:	9b04      	ldr	r3, [sp, #16]
 8020ed8:	3331      	adds	r3, #49	; 0x31
 8020eda:	9a02      	ldr	r2, [sp, #8]
 8020edc:	7013      	strb	r3, [r2, #0]
 8020ede:	e774      	b.n	8020dca <_dtoa_r+0x962>
 8020ee0:	4638      	mov	r0, r7
 8020ee2:	e7b9      	b.n	8020e58 <_dtoa_r+0x9f0>
 8020ee4:	2201      	movs	r2, #1
 8020ee6:	e7e2      	b.n	8020eae <_dtoa_r+0xa46>
 8020ee8:	f1b9 0f00 	cmp.w	r9, #0
 8020eec:	db06      	blt.n	8020efc <_dtoa_r+0xa94>
 8020eee:	9905      	ldr	r1, [sp, #20]
 8020ef0:	ea41 0909 	orr.w	r9, r1, r9
 8020ef4:	9906      	ldr	r1, [sp, #24]
 8020ef6:	ea59 0101 	orrs.w	r1, r9, r1
 8020efa:	d120      	bne.n	8020f3e <_dtoa_r+0xad6>
 8020efc:	2a00      	cmp	r2, #0
 8020efe:	ddec      	ble.n	8020eda <_dtoa_r+0xa72>
 8020f00:	4659      	mov	r1, fp
 8020f02:	2201      	movs	r2, #1
 8020f04:	4620      	mov	r0, r4
 8020f06:	9301      	str	r3, [sp, #4]
 8020f08:	f000 ff74 	bl	8021df4 <__lshift>
 8020f0c:	4631      	mov	r1, r6
 8020f0e:	4683      	mov	fp, r0
 8020f10:	f000 ffdc 	bl	8021ecc <__mcmp>
 8020f14:	2800      	cmp	r0, #0
 8020f16:	9b01      	ldr	r3, [sp, #4]
 8020f18:	dc02      	bgt.n	8020f20 <_dtoa_r+0xab8>
 8020f1a:	d1de      	bne.n	8020eda <_dtoa_r+0xa72>
 8020f1c:	07da      	lsls	r2, r3, #31
 8020f1e:	d5dc      	bpl.n	8020eda <_dtoa_r+0xa72>
 8020f20:	2b39      	cmp	r3, #57	; 0x39
 8020f22:	d1d8      	bne.n	8020ed6 <_dtoa_r+0xa6e>
 8020f24:	9a02      	ldr	r2, [sp, #8]
 8020f26:	2339      	movs	r3, #57	; 0x39
 8020f28:	7013      	strb	r3, [r2, #0]
 8020f2a:	462b      	mov	r3, r5
 8020f2c:	461d      	mov	r5, r3
 8020f2e:	3b01      	subs	r3, #1
 8020f30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020f34:	2a39      	cmp	r2, #57	; 0x39
 8020f36:	d050      	beq.n	8020fda <_dtoa_r+0xb72>
 8020f38:	3201      	adds	r2, #1
 8020f3a:	701a      	strb	r2, [r3, #0]
 8020f3c:	e745      	b.n	8020dca <_dtoa_r+0x962>
 8020f3e:	2a00      	cmp	r2, #0
 8020f40:	dd03      	ble.n	8020f4a <_dtoa_r+0xae2>
 8020f42:	2b39      	cmp	r3, #57	; 0x39
 8020f44:	d0ee      	beq.n	8020f24 <_dtoa_r+0xabc>
 8020f46:	3301      	adds	r3, #1
 8020f48:	e7c7      	b.n	8020eda <_dtoa_r+0xa72>
 8020f4a:	9a01      	ldr	r2, [sp, #4]
 8020f4c:	9907      	ldr	r1, [sp, #28]
 8020f4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020f52:	428a      	cmp	r2, r1
 8020f54:	d02a      	beq.n	8020fac <_dtoa_r+0xb44>
 8020f56:	4659      	mov	r1, fp
 8020f58:	2300      	movs	r3, #0
 8020f5a:	220a      	movs	r2, #10
 8020f5c:	4620      	mov	r0, r4
 8020f5e:	f000 fd4f 	bl	8021a00 <__multadd>
 8020f62:	45b8      	cmp	r8, r7
 8020f64:	4683      	mov	fp, r0
 8020f66:	f04f 0300 	mov.w	r3, #0
 8020f6a:	f04f 020a 	mov.w	r2, #10
 8020f6e:	4641      	mov	r1, r8
 8020f70:	4620      	mov	r0, r4
 8020f72:	d107      	bne.n	8020f84 <_dtoa_r+0xb1c>
 8020f74:	f000 fd44 	bl	8021a00 <__multadd>
 8020f78:	4680      	mov	r8, r0
 8020f7a:	4607      	mov	r7, r0
 8020f7c:	9b01      	ldr	r3, [sp, #4]
 8020f7e:	3301      	adds	r3, #1
 8020f80:	9301      	str	r3, [sp, #4]
 8020f82:	e775      	b.n	8020e70 <_dtoa_r+0xa08>
 8020f84:	f000 fd3c 	bl	8021a00 <__multadd>
 8020f88:	4639      	mov	r1, r7
 8020f8a:	4680      	mov	r8, r0
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	220a      	movs	r2, #10
 8020f90:	4620      	mov	r0, r4
 8020f92:	f000 fd35 	bl	8021a00 <__multadd>
 8020f96:	4607      	mov	r7, r0
 8020f98:	e7f0      	b.n	8020f7c <_dtoa_r+0xb14>
 8020f9a:	f1b9 0f00 	cmp.w	r9, #0
 8020f9e:	9a00      	ldr	r2, [sp, #0]
 8020fa0:	bfcc      	ite	gt
 8020fa2:	464d      	movgt	r5, r9
 8020fa4:	2501      	movle	r5, #1
 8020fa6:	4415      	add	r5, r2
 8020fa8:	f04f 0800 	mov.w	r8, #0
 8020fac:	4659      	mov	r1, fp
 8020fae:	2201      	movs	r2, #1
 8020fb0:	4620      	mov	r0, r4
 8020fb2:	9301      	str	r3, [sp, #4]
 8020fb4:	f000 ff1e 	bl	8021df4 <__lshift>
 8020fb8:	4631      	mov	r1, r6
 8020fba:	4683      	mov	fp, r0
 8020fbc:	f000 ff86 	bl	8021ecc <__mcmp>
 8020fc0:	2800      	cmp	r0, #0
 8020fc2:	dcb2      	bgt.n	8020f2a <_dtoa_r+0xac2>
 8020fc4:	d102      	bne.n	8020fcc <_dtoa_r+0xb64>
 8020fc6:	9b01      	ldr	r3, [sp, #4]
 8020fc8:	07db      	lsls	r3, r3, #31
 8020fca:	d4ae      	bmi.n	8020f2a <_dtoa_r+0xac2>
 8020fcc:	462b      	mov	r3, r5
 8020fce:	461d      	mov	r5, r3
 8020fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020fd4:	2a30      	cmp	r2, #48	; 0x30
 8020fd6:	d0fa      	beq.n	8020fce <_dtoa_r+0xb66>
 8020fd8:	e6f7      	b.n	8020dca <_dtoa_r+0x962>
 8020fda:	9a00      	ldr	r2, [sp, #0]
 8020fdc:	429a      	cmp	r2, r3
 8020fde:	d1a5      	bne.n	8020f2c <_dtoa_r+0xac4>
 8020fe0:	f10a 0a01 	add.w	sl, sl, #1
 8020fe4:	2331      	movs	r3, #49	; 0x31
 8020fe6:	e779      	b.n	8020edc <_dtoa_r+0xa74>
 8020fe8:	4b13      	ldr	r3, [pc, #76]	; (8021038 <_dtoa_r+0xbd0>)
 8020fea:	f7ff baaf 	b.w	802054c <_dtoa_r+0xe4>
 8020fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	f47f aa86 	bne.w	8020502 <_dtoa_r+0x9a>
 8020ff6:	4b11      	ldr	r3, [pc, #68]	; (802103c <_dtoa_r+0xbd4>)
 8020ff8:	f7ff baa8 	b.w	802054c <_dtoa_r+0xe4>
 8020ffc:	f1b9 0f00 	cmp.w	r9, #0
 8021000:	dc03      	bgt.n	802100a <_dtoa_r+0xba2>
 8021002:	9b05      	ldr	r3, [sp, #20]
 8021004:	2b02      	cmp	r3, #2
 8021006:	f73f aec9 	bgt.w	8020d9c <_dtoa_r+0x934>
 802100a:	9d00      	ldr	r5, [sp, #0]
 802100c:	4631      	mov	r1, r6
 802100e:	4658      	mov	r0, fp
 8021010:	f7ff f99c 	bl	802034c <quorem>
 8021014:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021018:	f805 3b01 	strb.w	r3, [r5], #1
 802101c:	9a00      	ldr	r2, [sp, #0]
 802101e:	1aaa      	subs	r2, r5, r2
 8021020:	4591      	cmp	r9, r2
 8021022:	ddba      	ble.n	8020f9a <_dtoa_r+0xb32>
 8021024:	4659      	mov	r1, fp
 8021026:	2300      	movs	r3, #0
 8021028:	220a      	movs	r2, #10
 802102a:	4620      	mov	r0, r4
 802102c:	f000 fce8 	bl	8021a00 <__multadd>
 8021030:	4683      	mov	fp, r0
 8021032:	e7eb      	b.n	802100c <_dtoa_r+0xba4>
 8021034:	080272d0 	.word	0x080272d0
 8021038:	080274d1 	.word	0x080274d1
 802103c:	08027264 	.word	0x08027264

08021040 <__errno>:
 8021040:	4b01      	ldr	r3, [pc, #4]	; (8021048 <__errno+0x8>)
 8021042:	6818      	ldr	r0, [r3, #0]
 8021044:	4770      	bx	lr
 8021046:	bf00      	nop
 8021048:	200003b8 	.word	0x200003b8

0802104c <__sflush_r>:
 802104c:	898a      	ldrh	r2, [r1, #12]
 802104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021052:	4605      	mov	r5, r0
 8021054:	0710      	lsls	r0, r2, #28
 8021056:	460c      	mov	r4, r1
 8021058:	d458      	bmi.n	802110c <__sflush_r+0xc0>
 802105a:	684b      	ldr	r3, [r1, #4]
 802105c:	2b00      	cmp	r3, #0
 802105e:	dc05      	bgt.n	802106c <__sflush_r+0x20>
 8021060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021062:	2b00      	cmp	r3, #0
 8021064:	dc02      	bgt.n	802106c <__sflush_r+0x20>
 8021066:	2000      	movs	r0, #0
 8021068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802106c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802106e:	2e00      	cmp	r6, #0
 8021070:	d0f9      	beq.n	8021066 <__sflush_r+0x1a>
 8021072:	2300      	movs	r3, #0
 8021074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021078:	682f      	ldr	r7, [r5, #0]
 802107a:	602b      	str	r3, [r5, #0]
 802107c:	d032      	beq.n	80210e4 <__sflush_r+0x98>
 802107e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021080:	89a3      	ldrh	r3, [r4, #12]
 8021082:	075a      	lsls	r2, r3, #29
 8021084:	d505      	bpl.n	8021092 <__sflush_r+0x46>
 8021086:	6863      	ldr	r3, [r4, #4]
 8021088:	1ac0      	subs	r0, r0, r3
 802108a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802108c:	b10b      	cbz	r3, 8021092 <__sflush_r+0x46>
 802108e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021090:	1ac0      	subs	r0, r0, r3
 8021092:	2300      	movs	r3, #0
 8021094:	4602      	mov	r2, r0
 8021096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021098:	6a21      	ldr	r1, [r4, #32]
 802109a:	4628      	mov	r0, r5
 802109c:	47b0      	blx	r6
 802109e:	1c43      	adds	r3, r0, #1
 80210a0:	89a3      	ldrh	r3, [r4, #12]
 80210a2:	d106      	bne.n	80210b2 <__sflush_r+0x66>
 80210a4:	6829      	ldr	r1, [r5, #0]
 80210a6:	291d      	cmp	r1, #29
 80210a8:	d82c      	bhi.n	8021104 <__sflush_r+0xb8>
 80210aa:	4a2a      	ldr	r2, [pc, #168]	; (8021154 <__sflush_r+0x108>)
 80210ac:	40ca      	lsrs	r2, r1
 80210ae:	07d6      	lsls	r6, r2, #31
 80210b0:	d528      	bpl.n	8021104 <__sflush_r+0xb8>
 80210b2:	2200      	movs	r2, #0
 80210b4:	6062      	str	r2, [r4, #4]
 80210b6:	04d9      	lsls	r1, r3, #19
 80210b8:	6922      	ldr	r2, [r4, #16]
 80210ba:	6022      	str	r2, [r4, #0]
 80210bc:	d504      	bpl.n	80210c8 <__sflush_r+0x7c>
 80210be:	1c42      	adds	r2, r0, #1
 80210c0:	d101      	bne.n	80210c6 <__sflush_r+0x7a>
 80210c2:	682b      	ldr	r3, [r5, #0]
 80210c4:	b903      	cbnz	r3, 80210c8 <__sflush_r+0x7c>
 80210c6:	6560      	str	r0, [r4, #84]	; 0x54
 80210c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80210ca:	602f      	str	r7, [r5, #0]
 80210cc:	2900      	cmp	r1, #0
 80210ce:	d0ca      	beq.n	8021066 <__sflush_r+0x1a>
 80210d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80210d4:	4299      	cmp	r1, r3
 80210d6:	d002      	beq.n	80210de <__sflush_r+0x92>
 80210d8:	4628      	mov	r0, r5
 80210da:	f7fd f983 	bl	801e3e4 <_free_r>
 80210de:	2000      	movs	r0, #0
 80210e0:	6360      	str	r0, [r4, #52]	; 0x34
 80210e2:	e7c1      	b.n	8021068 <__sflush_r+0x1c>
 80210e4:	6a21      	ldr	r1, [r4, #32]
 80210e6:	2301      	movs	r3, #1
 80210e8:	4628      	mov	r0, r5
 80210ea:	47b0      	blx	r6
 80210ec:	1c41      	adds	r1, r0, #1
 80210ee:	d1c7      	bne.n	8021080 <__sflush_r+0x34>
 80210f0:	682b      	ldr	r3, [r5, #0]
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d0c4      	beq.n	8021080 <__sflush_r+0x34>
 80210f6:	2b1d      	cmp	r3, #29
 80210f8:	d001      	beq.n	80210fe <__sflush_r+0xb2>
 80210fa:	2b16      	cmp	r3, #22
 80210fc:	d101      	bne.n	8021102 <__sflush_r+0xb6>
 80210fe:	602f      	str	r7, [r5, #0]
 8021100:	e7b1      	b.n	8021066 <__sflush_r+0x1a>
 8021102:	89a3      	ldrh	r3, [r4, #12]
 8021104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021108:	81a3      	strh	r3, [r4, #12]
 802110a:	e7ad      	b.n	8021068 <__sflush_r+0x1c>
 802110c:	690f      	ldr	r7, [r1, #16]
 802110e:	2f00      	cmp	r7, #0
 8021110:	d0a9      	beq.n	8021066 <__sflush_r+0x1a>
 8021112:	0793      	lsls	r3, r2, #30
 8021114:	680e      	ldr	r6, [r1, #0]
 8021116:	bf08      	it	eq
 8021118:	694b      	ldreq	r3, [r1, #20]
 802111a:	600f      	str	r7, [r1, #0]
 802111c:	bf18      	it	ne
 802111e:	2300      	movne	r3, #0
 8021120:	eba6 0807 	sub.w	r8, r6, r7
 8021124:	608b      	str	r3, [r1, #8]
 8021126:	f1b8 0f00 	cmp.w	r8, #0
 802112a:	dd9c      	ble.n	8021066 <__sflush_r+0x1a>
 802112c:	6a21      	ldr	r1, [r4, #32]
 802112e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021130:	4643      	mov	r3, r8
 8021132:	463a      	mov	r2, r7
 8021134:	4628      	mov	r0, r5
 8021136:	47b0      	blx	r6
 8021138:	2800      	cmp	r0, #0
 802113a:	dc06      	bgt.n	802114a <__sflush_r+0xfe>
 802113c:	89a3      	ldrh	r3, [r4, #12]
 802113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021142:	81a3      	strh	r3, [r4, #12]
 8021144:	f04f 30ff 	mov.w	r0, #4294967295
 8021148:	e78e      	b.n	8021068 <__sflush_r+0x1c>
 802114a:	4407      	add	r7, r0
 802114c:	eba8 0800 	sub.w	r8, r8, r0
 8021150:	e7e9      	b.n	8021126 <__sflush_r+0xda>
 8021152:	bf00      	nop
 8021154:	20400001 	.word	0x20400001

08021158 <_fflush_r>:
 8021158:	b538      	push	{r3, r4, r5, lr}
 802115a:	690b      	ldr	r3, [r1, #16]
 802115c:	4605      	mov	r5, r0
 802115e:	460c      	mov	r4, r1
 8021160:	b913      	cbnz	r3, 8021168 <_fflush_r+0x10>
 8021162:	2500      	movs	r5, #0
 8021164:	4628      	mov	r0, r5
 8021166:	bd38      	pop	{r3, r4, r5, pc}
 8021168:	b118      	cbz	r0, 8021172 <_fflush_r+0x1a>
 802116a:	6983      	ldr	r3, [r0, #24]
 802116c:	b90b      	cbnz	r3, 8021172 <_fflush_r+0x1a>
 802116e:	f7fd f831 	bl	801e1d4 <__sinit>
 8021172:	4b14      	ldr	r3, [pc, #80]	; (80211c4 <_fflush_r+0x6c>)
 8021174:	429c      	cmp	r4, r3
 8021176:	d11b      	bne.n	80211b0 <_fflush_r+0x58>
 8021178:	686c      	ldr	r4, [r5, #4]
 802117a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802117e:	2b00      	cmp	r3, #0
 8021180:	d0ef      	beq.n	8021162 <_fflush_r+0xa>
 8021182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021184:	07d0      	lsls	r0, r2, #31
 8021186:	d404      	bmi.n	8021192 <_fflush_r+0x3a>
 8021188:	0599      	lsls	r1, r3, #22
 802118a:	d402      	bmi.n	8021192 <_fflush_r+0x3a>
 802118c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802118e:	f7e5 fef7 	bl	8006f80 <__retarget_lock_acquire_recursive>
 8021192:	4628      	mov	r0, r5
 8021194:	4621      	mov	r1, r4
 8021196:	f7ff ff59 	bl	802104c <__sflush_r>
 802119a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802119c:	07da      	lsls	r2, r3, #31
 802119e:	4605      	mov	r5, r0
 80211a0:	d4e0      	bmi.n	8021164 <_fflush_r+0xc>
 80211a2:	89a3      	ldrh	r3, [r4, #12]
 80211a4:	059b      	lsls	r3, r3, #22
 80211a6:	d4dd      	bmi.n	8021164 <_fflush_r+0xc>
 80211a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211aa:	f7e5 fefd 	bl	8006fa8 <__retarget_lock_release_recursive>
 80211ae:	e7d9      	b.n	8021164 <_fflush_r+0xc>
 80211b0:	4b05      	ldr	r3, [pc, #20]	; (80211c8 <_fflush_r+0x70>)
 80211b2:	429c      	cmp	r4, r3
 80211b4:	d101      	bne.n	80211ba <_fflush_r+0x62>
 80211b6:	68ac      	ldr	r4, [r5, #8]
 80211b8:	e7df      	b.n	802117a <_fflush_r+0x22>
 80211ba:	4b04      	ldr	r3, [pc, #16]	; (80211cc <_fflush_r+0x74>)
 80211bc:	429c      	cmp	r4, r3
 80211be:	bf08      	it	eq
 80211c0:	68ec      	ldreq	r4, [r5, #12]
 80211c2:	e7da      	b.n	802117a <_fflush_r+0x22>
 80211c4:	080270e0 	.word	0x080270e0
 80211c8:	08027100 	.word	0x08027100
 80211cc:	080270c0 	.word	0x080270c0

080211d0 <fiprintf>:
 80211d0:	b40e      	push	{r1, r2, r3}
 80211d2:	b503      	push	{r0, r1, lr}
 80211d4:	4601      	mov	r1, r0
 80211d6:	ab03      	add	r3, sp, #12
 80211d8:	4805      	ldr	r0, [pc, #20]	; (80211f0 <fiprintf+0x20>)
 80211da:	f853 2b04 	ldr.w	r2, [r3], #4
 80211de:	6800      	ldr	r0, [r0, #0]
 80211e0:	9301      	str	r3, [sp, #4]
 80211e2:	f001 fbcd 	bl	8022980 <_vfiprintf_r>
 80211e6:	b002      	add	sp, #8
 80211e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80211ec:	b003      	add	sp, #12
 80211ee:	4770      	bx	lr
 80211f0:	200003b8 	.word	0x200003b8

080211f4 <rshift>:
 80211f4:	6903      	ldr	r3, [r0, #16]
 80211f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80211fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80211fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021202:	f100 0414 	add.w	r4, r0, #20
 8021206:	dd45      	ble.n	8021294 <rshift+0xa0>
 8021208:	f011 011f 	ands.w	r1, r1, #31
 802120c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021214:	d10c      	bne.n	8021230 <rshift+0x3c>
 8021216:	f100 0710 	add.w	r7, r0, #16
 802121a:	4629      	mov	r1, r5
 802121c:	42b1      	cmp	r1, r6
 802121e:	d334      	bcc.n	802128a <rshift+0x96>
 8021220:	1a9b      	subs	r3, r3, r2
 8021222:	009b      	lsls	r3, r3, #2
 8021224:	1eea      	subs	r2, r5, #3
 8021226:	4296      	cmp	r6, r2
 8021228:	bf38      	it	cc
 802122a:	2300      	movcc	r3, #0
 802122c:	4423      	add	r3, r4
 802122e:	e015      	b.n	802125c <rshift+0x68>
 8021230:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021234:	f1c1 0820 	rsb	r8, r1, #32
 8021238:	40cf      	lsrs	r7, r1
 802123a:	f105 0e04 	add.w	lr, r5, #4
 802123e:	46a1      	mov	r9, r4
 8021240:	4576      	cmp	r6, lr
 8021242:	46f4      	mov	ip, lr
 8021244:	d815      	bhi.n	8021272 <rshift+0x7e>
 8021246:	1a9b      	subs	r3, r3, r2
 8021248:	009a      	lsls	r2, r3, #2
 802124a:	3a04      	subs	r2, #4
 802124c:	3501      	adds	r5, #1
 802124e:	42ae      	cmp	r6, r5
 8021250:	bf38      	it	cc
 8021252:	2200      	movcc	r2, #0
 8021254:	18a3      	adds	r3, r4, r2
 8021256:	50a7      	str	r7, [r4, r2]
 8021258:	b107      	cbz	r7, 802125c <rshift+0x68>
 802125a:	3304      	adds	r3, #4
 802125c:	1b1a      	subs	r2, r3, r4
 802125e:	42a3      	cmp	r3, r4
 8021260:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021264:	bf08      	it	eq
 8021266:	2300      	moveq	r3, #0
 8021268:	6102      	str	r2, [r0, #16]
 802126a:	bf08      	it	eq
 802126c:	6143      	streq	r3, [r0, #20]
 802126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021272:	f8dc c000 	ldr.w	ip, [ip]
 8021276:	fa0c fc08 	lsl.w	ip, ip, r8
 802127a:	ea4c 0707 	orr.w	r7, ip, r7
 802127e:	f849 7b04 	str.w	r7, [r9], #4
 8021282:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021286:	40cf      	lsrs	r7, r1
 8021288:	e7da      	b.n	8021240 <rshift+0x4c>
 802128a:	f851 cb04 	ldr.w	ip, [r1], #4
 802128e:	f847 cf04 	str.w	ip, [r7, #4]!
 8021292:	e7c3      	b.n	802121c <rshift+0x28>
 8021294:	4623      	mov	r3, r4
 8021296:	e7e1      	b.n	802125c <rshift+0x68>

08021298 <__hexdig_fun>:
 8021298:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802129c:	2b09      	cmp	r3, #9
 802129e:	d802      	bhi.n	80212a6 <__hexdig_fun+0xe>
 80212a0:	3820      	subs	r0, #32
 80212a2:	b2c0      	uxtb	r0, r0
 80212a4:	4770      	bx	lr
 80212a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80212aa:	2b05      	cmp	r3, #5
 80212ac:	d801      	bhi.n	80212b2 <__hexdig_fun+0x1a>
 80212ae:	3847      	subs	r0, #71	; 0x47
 80212b0:	e7f7      	b.n	80212a2 <__hexdig_fun+0xa>
 80212b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80212b6:	2b05      	cmp	r3, #5
 80212b8:	d801      	bhi.n	80212be <__hexdig_fun+0x26>
 80212ba:	3827      	subs	r0, #39	; 0x27
 80212bc:	e7f1      	b.n	80212a2 <__hexdig_fun+0xa>
 80212be:	2000      	movs	r0, #0
 80212c0:	4770      	bx	lr
	...

080212c4 <__gethex>:
 80212c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212c8:	ed2d 8b02 	vpush	{d8}
 80212cc:	b089      	sub	sp, #36	; 0x24
 80212ce:	ee08 0a10 	vmov	s16, r0
 80212d2:	9304      	str	r3, [sp, #16]
 80212d4:	4bbc      	ldr	r3, [pc, #752]	; (80215c8 <__gethex+0x304>)
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	9301      	str	r3, [sp, #4]
 80212da:	4618      	mov	r0, r3
 80212dc:	468b      	mov	fp, r1
 80212de:	4690      	mov	r8, r2
 80212e0:	f7de ff76 	bl	80001d0 <strlen>
 80212e4:	9b01      	ldr	r3, [sp, #4]
 80212e6:	f8db 2000 	ldr.w	r2, [fp]
 80212ea:	4403      	add	r3, r0
 80212ec:	4682      	mov	sl, r0
 80212ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80212f2:	9305      	str	r3, [sp, #20]
 80212f4:	1c93      	adds	r3, r2, #2
 80212f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80212fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80212fe:	32fe      	adds	r2, #254	; 0xfe
 8021300:	18d1      	adds	r1, r2, r3
 8021302:	461f      	mov	r7, r3
 8021304:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021308:	9100      	str	r1, [sp, #0]
 802130a:	2830      	cmp	r0, #48	; 0x30
 802130c:	d0f8      	beq.n	8021300 <__gethex+0x3c>
 802130e:	f7ff ffc3 	bl	8021298 <__hexdig_fun>
 8021312:	4604      	mov	r4, r0
 8021314:	2800      	cmp	r0, #0
 8021316:	d13a      	bne.n	802138e <__gethex+0xca>
 8021318:	9901      	ldr	r1, [sp, #4]
 802131a:	4652      	mov	r2, sl
 802131c:	4638      	mov	r0, r7
 802131e:	f7fe f8fb 	bl	801f518 <strncmp>
 8021322:	4605      	mov	r5, r0
 8021324:	2800      	cmp	r0, #0
 8021326:	d168      	bne.n	80213fa <__gethex+0x136>
 8021328:	f817 000a 	ldrb.w	r0, [r7, sl]
 802132c:	eb07 060a 	add.w	r6, r7, sl
 8021330:	f7ff ffb2 	bl	8021298 <__hexdig_fun>
 8021334:	2800      	cmp	r0, #0
 8021336:	d062      	beq.n	80213fe <__gethex+0x13a>
 8021338:	4633      	mov	r3, r6
 802133a:	7818      	ldrb	r0, [r3, #0]
 802133c:	2830      	cmp	r0, #48	; 0x30
 802133e:	461f      	mov	r7, r3
 8021340:	f103 0301 	add.w	r3, r3, #1
 8021344:	d0f9      	beq.n	802133a <__gethex+0x76>
 8021346:	f7ff ffa7 	bl	8021298 <__hexdig_fun>
 802134a:	2301      	movs	r3, #1
 802134c:	fab0 f480 	clz	r4, r0
 8021350:	0964      	lsrs	r4, r4, #5
 8021352:	4635      	mov	r5, r6
 8021354:	9300      	str	r3, [sp, #0]
 8021356:	463a      	mov	r2, r7
 8021358:	4616      	mov	r6, r2
 802135a:	3201      	adds	r2, #1
 802135c:	7830      	ldrb	r0, [r6, #0]
 802135e:	f7ff ff9b 	bl	8021298 <__hexdig_fun>
 8021362:	2800      	cmp	r0, #0
 8021364:	d1f8      	bne.n	8021358 <__gethex+0x94>
 8021366:	9901      	ldr	r1, [sp, #4]
 8021368:	4652      	mov	r2, sl
 802136a:	4630      	mov	r0, r6
 802136c:	f7fe f8d4 	bl	801f518 <strncmp>
 8021370:	b980      	cbnz	r0, 8021394 <__gethex+0xd0>
 8021372:	b94d      	cbnz	r5, 8021388 <__gethex+0xc4>
 8021374:	eb06 050a 	add.w	r5, r6, sl
 8021378:	462a      	mov	r2, r5
 802137a:	4616      	mov	r6, r2
 802137c:	3201      	adds	r2, #1
 802137e:	7830      	ldrb	r0, [r6, #0]
 8021380:	f7ff ff8a 	bl	8021298 <__hexdig_fun>
 8021384:	2800      	cmp	r0, #0
 8021386:	d1f8      	bne.n	802137a <__gethex+0xb6>
 8021388:	1bad      	subs	r5, r5, r6
 802138a:	00ad      	lsls	r5, r5, #2
 802138c:	e004      	b.n	8021398 <__gethex+0xd4>
 802138e:	2400      	movs	r4, #0
 8021390:	4625      	mov	r5, r4
 8021392:	e7e0      	b.n	8021356 <__gethex+0x92>
 8021394:	2d00      	cmp	r5, #0
 8021396:	d1f7      	bne.n	8021388 <__gethex+0xc4>
 8021398:	7833      	ldrb	r3, [r6, #0]
 802139a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802139e:	2b50      	cmp	r3, #80	; 0x50
 80213a0:	d13b      	bne.n	802141a <__gethex+0x156>
 80213a2:	7873      	ldrb	r3, [r6, #1]
 80213a4:	2b2b      	cmp	r3, #43	; 0x2b
 80213a6:	d02c      	beq.n	8021402 <__gethex+0x13e>
 80213a8:	2b2d      	cmp	r3, #45	; 0x2d
 80213aa:	d02e      	beq.n	802140a <__gethex+0x146>
 80213ac:	1c71      	adds	r1, r6, #1
 80213ae:	f04f 0900 	mov.w	r9, #0
 80213b2:	7808      	ldrb	r0, [r1, #0]
 80213b4:	f7ff ff70 	bl	8021298 <__hexdig_fun>
 80213b8:	1e43      	subs	r3, r0, #1
 80213ba:	b2db      	uxtb	r3, r3
 80213bc:	2b18      	cmp	r3, #24
 80213be:	d82c      	bhi.n	802141a <__gethex+0x156>
 80213c0:	f1a0 0210 	sub.w	r2, r0, #16
 80213c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80213c8:	f7ff ff66 	bl	8021298 <__hexdig_fun>
 80213cc:	1e43      	subs	r3, r0, #1
 80213ce:	b2db      	uxtb	r3, r3
 80213d0:	2b18      	cmp	r3, #24
 80213d2:	d91d      	bls.n	8021410 <__gethex+0x14c>
 80213d4:	f1b9 0f00 	cmp.w	r9, #0
 80213d8:	d000      	beq.n	80213dc <__gethex+0x118>
 80213da:	4252      	negs	r2, r2
 80213dc:	4415      	add	r5, r2
 80213de:	f8cb 1000 	str.w	r1, [fp]
 80213e2:	b1e4      	cbz	r4, 802141e <__gethex+0x15a>
 80213e4:	9b00      	ldr	r3, [sp, #0]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	bf14      	ite	ne
 80213ea:	2700      	movne	r7, #0
 80213ec:	2706      	moveq	r7, #6
 80213ee:	4638      	mov	r0, r7
 80213f0:	b009      	add	sp, #36	; 0x24
 80213f2:	ecbd 8b02 	vpop	{d8}
 80213f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213fa:	463e      	mov	r6, r7
 80213fc:	4625      	mov	r5, r4
 80213fe:	2401      	movs	r4, #1
 8021400:	e7ca      	b.n	8021398 <__gethex+0xd4>
 8021402:	f04f 0900 	mov.w	r9, #0
 8021406:	1cb1      	adds	r1, r6, #2
 8021408:	e7d3      	b.n	80213b2 <__gethex+0xee>
 802140a:	f04f 0901 	mov.w	r9, #1
 802140e:	e7fa      	b.n	8021406 <__gethex+0x142>
 8021410:	230a      	movs	r3, #10
 8021412:	fb03 0202 	mla	r2, r3, r2, r0
 8021416:	3a10      	subs	r2, #16
 8021418:	e7d4      	b.n	80213c4 <__gethex+0x100>
 802141a:	4631      	mov	r1, r6
 802141c:	e7df      	b.n	80213de <__gethex+0x11a>
 802141e:	1bf3      	subs	r3, r6, r7
 8021420:	3b01      	subs	r3, #1
 8021422:	4621      	mov	r1, r4
 8021424:	2b07      	cmp	r3, #7
 8021426:	dc0b      	bgt.n	8021440 <__gethex+0x17c>
 8021428:	ee18 0a10 	vmov	r0, s16
 802142c:	f000 fa86 	bl	802193c <_Balloc>
 8021430:	4604      	mov	r4, r0
 8021432:	b940      	cbnz	r0, 8021446 <__gethex+0x182>
 8021434:	4b65      	ldr	r3, [pc, #404]	; (80215cc <__gethex+0x308>)
 8021436:	4602      	mov	r2, r0
 8021438:	21de      	movs	r1, #222	; 0xde
 802143a:	4865      	ldr	r0, [pc, #404]	; (80215d0 <__gethex+0x30c>)
 802143c:	f7fe ff58 	bl	80202f0 <__assert_func>
 8021440:	3101      	adds	r1, #1
 8021442:	105b      	asrs	r3, r3, #1
 8021444:	e7ee      	b.n	8021424 <__gethex+0x160>
 8021446:	f100 0914 	add.w	r9, r0, #20
 802144a:	f04f 0b00 	mov.w	fp, #0
 802144e:	f1ca 0301 	rsb	r3, sl, #1
 8021452:	f8cd 9008 	str.w	r9, [sp, #8]
 8021456:	f8cd b000 	str.w	fp, [sp]
 802145a:	9306      	str	r3, [sp, #24]
 802145c:	42b7      	cmp	r7, r6
 802145e:	d340      	bcc.n	80214e2 <__gethex+0x21e>
 8021460:	9802      	ldr	r0, [sp, #8]
 8021462:	9b00      	ldr	r3, [sp, #0]
 8021464:	f840 3b04 	str.w	r3, [r0], #4
 8021468:	eba0 0009 	sub.w	r0, r0, r9
 802146c:	1080      	asrs	r0, r0, #2
 802146e:	0146      	lsls	r6, r0, #5
 8021470:	6120      	str	r0, [r4, #16]
 8021472:	4618      	mov	r0, r3
 8021474:	f000 fb58 	bl	8021b28 <__hi0bits>
 8021478:	1a30      	subs	r0, r6, r0
 802147a:	f8d8 6000 	ldr.w	r6, [r8]
 802147e:	42b0      	cmp	r0, r6
 8021480:	dd63      	ble.n	802154a <__gethex+0x286>
 8021482:	1b87      	subs	r7, r0, r6
 8021484:	4639      	mov	r1, r7
 8021486:	4620      	mov	r0, r4
 8021488:	f000 fef2 	bl	8022270 <__any_on>
 802148c:	4682      	mov	sl, r0
 802148e:	b1a8      	cbz	r0, 80214bc <__gethex+0x1f8>
 8021490:	1e7b      	subs	r3, r7, #1
 8021492:	1159      	asrs	r1, r3, #5
 8021494:	f003 021f 	and.w	r2, r3, #31
 8021498:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802149c:	f04f 0a01 	mov.w	sl, #1
 80214a0:	fa0a f202 	lsl.w	r2, sl, r2
 80214a4:	420a      	tst	r2, r1
 80214a6:	d009      	beq.n	80214bc <__gethex+0x1f8>
 80214a8:	4553      	cmp	r3, sl
 80214aa:	dd05      	ble.n	80214b8 <__gethex+0x1f4>
 80214ac:	1eb9      	subs	r1, r7, #2
 80214ae:	4620      	mov	r0, r4
 80214b0:	f000 fede 	bl	8022270 <__any_on>
 80214b4:	2800      	cmp	r0, #0
 80214b6:	d145      	bne.n	8021544 <__gethex+0x280>
 80214b8:	f04f 0a02 	mov.w	sl, #2
 80214bc:	4639      	mov	r1, r7
 80214be:	4620      	mov	r0, r4
 80214c0:	f7ff fe98 	bl	80211f4 <rshift>
 80214c4:	443d      	add	r5, r7
 80214c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80214ca:	42ab      	cmp	r3, r5
 80214cc:	da4c      	bge.n	8021568 <__gethex+0x2a4>
 80214ce:	ee18 0a10 	vmov	r0, s16
 80214d2:	4621      	mov	r1, r4
 80214d4:	f000 fa72 	bl	80219bc <_Bfree>
 80214d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80214da:	2300      	movs	r3, #0
 80214dc:	6013      	str	r3, [r2, #0]
 80214de:	27a3      	movs	r7, #163	; 0xa3
 80214e0:	e785      	b.n	80213ee <__gethex+0x12a>
 80214e2:	1e73      	subs	r3, r6, #1
 80214e4:	9a05      	ldr	r2, [sp, #20]
 80214e6:	9303      	str	r3, [sp, #12]
 80214e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80214ec:	4293      	cmp	r3, r2
 80214ee:	d019      	beq.n	8021524 <__gethex+0x260>
 80214f0:	f1bb 0f20 	cmp.w	fp, #32
 80214f4:	d107      	bne.n	8021506 <__gethex+0x242>
 80214f6:	9b02      	ldr	r3, [sp, #8]
 80214f8:	9a00      	ldr	r2, [sp, #0]
 80214fa:	f843 2b04 	str.w	r2, [r3], #4
 80214fe:	9302      	str	r3, [sp, #8]
 8021500:	2300      	movs	r3, #0
 8021502:	9300      	str	r3, [sp, #0]
 8021504:	469b      	mov	fp, r3
 8021506:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802150a:	f7ff fec5 	bl	8021298 <__hexdig_fun>
 802150e:	9b00      	ldr	r3, [sp, #0]
 8021510:	f000 000f 	and.w	r0, r0, #15
 8021514:	fa00 f00b 	lsl.w	r0, r0, fp
 8021518:	4303      	orrs	r3, r0
 802151a:	9300      	str	r3, [sp, #0]
 802151c:	f10b 0b04 	add.w	fp, fp, #4
 8021520:	9b03      	ldr	r3, [sp, #12]
 8021522:	e00d      	b.n	8021540 <__gethex+0x27c>
 8021524:	9b03      	ldr	r3, [sp, #12]
 8021526:	9a06      	ldr	r2, [sp, #24]
 8021528:	4413      	add	r3, r2
 802152a:	42bb      	cmp	r3, r7
 802152c:	d3e0      	bcc.n	80214f0 <__gethex+0x22c>
 802152e:	4618      	mov	r0, r3
 8021530:	9901      	ldr	r1, [sp, #4]
 8021532:	9307      	str	r3, [sp, #28]
 8021534:	4652      	mov	r2, sl
 8021536:	f7fd ffef 	bl	801f518 <strncmp>
 802153a:	9b07      	ldr	r3, [sp, #28]
 802153c:	2800      	cmp	r0, #0
 802153e:	d1d7      	bne.n	80214f0 <__gethex+0x22c>
 8021540:	461e      	mov	r6, r3
 8021542:	e78b      	b.n	802145c <__gethex+0x198>
 8021544:	f04f 0a03 	mov.w	sl, #3
 8021548:	e7b8      	b.n	80214bc <__gethex+0x1f8>
 802154a:	da0a      	bge.n	8021562 <__gethex+0x29e>
 802154c:	1a37      	subs	r7, r6, r0
 802154e:	4621      	mov	r1, r4
 8021550:	ee18 0a10 	vmov	r0, s16
 8021554:	463a      	mov	r2, r7
 8021556:	f000 fc4d 	bl	8021df4 <__lshift>
 802155a:	1bed      	subs	r5, r5, r7
 802155c:	4604      	mov	r4, r0
 802155e:	f100 0914 	add.w	r9, r0, #20
 8021562:	f04f 0a00 	mov.w	sl, #0
 8021566:	e7ae      	b.n	80214c6 <__gethex+0x202>
 8021568:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802156c:	42a8      	cmp	r0, r5
 802156e:	dd72      	ble.n	8021656 <__gethex+0x392>
 8021570:	1b45      	subs	r5, r0, r5
 8021572:	42ae      	cmp	r6, r5
 8021574:	dc36      	bgt.n	80215e4 <__gethex+0x320>
 8021576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802157a:	2b02      	cmp	r3, #2
 802157c:	d02a      	beq.n	80215d4 <__gethex+0x310>
 802157e:	2b03      	cmp	r3, #3
 8021580:	d02c      	beq.n	80215dc <__gethex+0x318>
 8021582:	2b01      	cmp	r3, #1
 8021584:	d115      	bne.n	80215b2 <__gethex+0x2ee>
 8021586:	42ae      	cmp	r6, r5
 8021588:	d113      	bne.n	80215b2 <__gethex+0x2ee>
 802158a:	2e01      	cmp	r6, #1
 802158c:	d10b      	bne.n	80215a6 <__gethex+0x2e2>
 802158e:	9a04      	ldr	r2, [sp, #16]
 8021590:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021594:	6013      	str	r3, [r2, #0]
 8021596:	2301      	movs	r3, #1
 8021598:	6123      	str	r3, [r4, #16]
 802159a:	f8c9 3000 	str.w	r3, [r9]
 802159e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80215a0:	2762      	movs	r7, #98	; 0x62
 80215a2:	601c      	str	r4, [r3, #0]
 80215a4:	e723      	b.n	80213ee <__gethex+0x12a>
 80215a6:	1e71      	subs	r1, r6, #1
 80215a8:	4620      	mov	r0, r4
 80215aa:	f000 fe61 	bl	8022270 <__any_on>
 80215ae:	2800      	cmp	r0, #0
 80215b0:	d1ed      	bne.n	802158e <__gethex+0x2ca>
 80215b2:	ee18 0a10 	vmov	r0, s16
 80215b6:	4621      	mov	r1, r4
 80215b8:	f000 fa00 	bl	80219bc <_Bfree>
 80215bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215be:	2300      	movs	r3, #0
 80215c0:	6013      	str	r3, [r2, #0]
 80215c2:	2750      	movs	r7, #80	; 0x50
 80215c4:	e713      	b.n	80213ee <__gethex+0x12a>
 80215c6:	bf00      	nop
 80215c8:	0802734c 	.word	0x0802734c
 80215cc:	080272d0 	.word	0x080272d0
 80215d0:	080272e1 	.word	0x080272e1
 80215d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d1eb      	bne.n	80215b2 <__gethex+0x2ee>
 80215da:	e7d8      	b.n	802158e <__gethex+0x2ca>
 80215dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d1d5      	bne.n	802158e <__gethex+0x2ca>
 80215e2:	e7e6      	b.n	80215b2 <__gethex+0x2ee>
 80215e4:	1e6f      	subs	r7, r5, #1
 80215e6:	f1ba 0f00 	cmp.w	sl, #0
 80215ea:	d131      	bne.n	8021650 <__gethex+0x38c>
 80215ec:	b127      	cbz	r7, 80215f8 <__gethex+0x334>
 80215ee:	4639      	mov	r1, r7
 80215f0:	4620      	mov	r0, r4
 80215f2:	f000 fe3d 	bl	8022270 <__any_on>
 80215f6:	4682      	mov	sl, r0
 80215f8:	117b      	asrs	r3, r7, #5
 80215fa:	2101      	movs	r1, #1
 80215fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021600:	f007 071f 	and.w	r7, r7, #31
 8021604:	fa01 f707 	lsl.w	r7, r1, r7
 8021608:	421f      	tst	r7, r3
 802160a:	4629      	mov	r1, r5
 802160c:	4620      	mov	r0, r4
 802160e:	bf18      	it	ne
 8021610:	f04a 0a02 	orrne.w	sl, sl, #2
 8021614:	1b76      	subs	r6, r6, r5
 8021616:	f7ff fded 	bl	80211f4 <rshift>
 802161a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802161e:	2702      	movs	r7, #2
 8021620:	f1ba 0f00 	cmp.w	sl, #0
 8021624:	d048      	beq.n	80216b8 <__gethex+0x3f4>
 8021626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802162a:	2b02      	cmp	r3, #2
 802162c:	d015      	beq.n	802165a <__gethex+0x396>
 802162e:	2b03      	cmp	r3, #3
 8021630:	d017      	beq.n	8021662 <__gethex+0x39e>
 8021632:	2b01      	cmp	r3, #1
 8021634:	d109      	bne.n	802164a <__gethex+0x386>
 8021636:	f01a 0f02 	tst.w	sl, #2
 802163a:	d006      	beq.n	802164a <__gethex+0x386>
 802163c:	f8d9 0000 	ldr.w	r0, [r9]
 8021640:	ea4a 0a00 	orr.w	sl, sl, r0
 8021644:	f01a 0f01 	tst.w	sl, #1
 8021648:	d10e      	bne.n	8021668 <__gethex+0x3a4>
 802164a:	f047 0710 	orr.w	r7, r7, #16
 802164e:	e033      	b.n	80216b8 <__gethex+0x3f4>
 8021650:	f04f 0a01 	mov.w	sl, #1
 8021654:	e7d0      	b.n	80215f8 <__gethex+0x334>
 8021656:	2701      	movs	r7, #1
 8021658:	e7e2      	b.n	8021620 <__gethex+0x35c>
 802165a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802165c:	f1c3 0301 	rsb	r3, r3, #1
 8021660:	9315      	str	r3, [sp, #84]	; 0x54
 8021662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021664:	2b00      	cmp	r3, #0
 8021666:	d0f0      	beq.n	802164a <__gethex+0x386>
 8021668:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802166c:	f104 0314 	add.w	r3, r4, #20
 8021670:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021674:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021678:	f04f 0c00 	mov.w	ip, #0
 802167c:	4618      	mov	r0, r3
 802167e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021682:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021686:	d01c      	beq.n	80216c2 <__gethex+0x3fe>
 8021688:	3201      	adds	r2, #1
 802168a:	6002      	str	r2, [r0, #0]
 802168c:	2f02      	cmp	r7, #2
 802168e:	f104 0314 	add.w	r3, r4, #20
 8021692:	d13f      	bne.n	8021714 <__gethex+0x450>
 8021694:	f8d8 2000 	ldr.w	r2, [r8]
 8021698:	3a01      	subs	r2, #1
 802169a:	42b2      	cmp	r2, r6
 802169c:	d10a      	bne.n	80216b4 <__gethex+0x3f0>
 802169e:	1171      	asrs	r1, r6, #5
 80216a0:	2201      	movs	r2, #1
 80216a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80216a6:	f006 061f 	and.w	r6, r6, #31
 80216aa:	fa02 f606 	lsl.w	r6, r2, r6
 80216ae:	421e      	tst	r6, r3
 80216b0:	bf18      	it	ne
 80216b2:	4617      	movne	r7, r2
 80216b4:	f047 0720 	orr.w	r7, r7, #32
 80216b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80216ba:	601c      	str	r4, [r3, #0]
 80216bc:	9b04      	ldr	r3, [sp, #16]
 80216be:	601d      	str	r5, [r3, #0]
 80216c0:	e695      	b.n	80213ee <__gethex+0x12a>
 80216c2:	4299      	cmp	r1, r3
 80216c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80216c8:	d8d8      	bhi.n	802167c <__gethex+0x3b8>
 80216ca:	68a3      	ldr	r3, [r4, #8]
 80216cc:	459b      	cmp	fp, r3
 80216ce:	db19      	blt.n	8021704 <__gethex+0x440>
 80216d0:	6861      	ldr	r1, [r4, #4]
 80216d2:	ee18 0a10 	vmov	r0, s16
 80216d6:	3101      	adds	r1, #1
 80216d8:	f000 f930 	bl	802193c <_Balloc>
 80216dc:	4681      	mov	r9, r0
 80216de:	b918      	cbnz	r0, 80216e8 <__gethex+0x424>
 80216e0:	4b1a      	ldr	r3, [pc, #104]	; (802174c <__gethex+0x488>)
 80216e2:	4602      	mov	r2, r0
 80216e4:	2184      	movs	r1, #132	; 0x84
 80216e6:	e6a8      	b.n	802143a <__gethex+0x176>
 80216e8:	6922      	ldr	r2, [r4, #16]
 80216ea:	3202      	adds	r2, #2
 80216ec:	f104 010c 	add.w	r1, r4, #12
 80216f0:	0092      	lsls	r2, r2, #2
 80216f2:	300c      	adds	r0, #12
 80216f4:	f7fc fe46 	bl	801e384 <memcpy>
 80216f8:	4621      	mov	r1, r4
 80216fa:	ee18 0a10 	vmov	r0, s16
 80216fe:	f000 f95d 	bl	80219bc <_Bfree>
 8021702:	464c      	mov	r4, r9
 8021704:	6923      	ldr	r3, [r4, #16]
 8021706:	1c5a      	adds	r2, r3, #1
 8021708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802170c:	6122      	str	r2, [r4, #16]
 802170e:	2201      	movs	r2, #1
 8021710:	615a      	str	r2, [r3, #20]
 8021712:	e7bb      	b.n	802168c <__gethex+0x3c8>
 8021714:	6922      	ldr	r2, [r4, #16]
 8021716:	455a      	cmp	r2, fp
 8021718:	dd0b      	ble.n	8021732 <__gethex+0x46e>
 802171a:	2101      	movs	r1, #1
 802171c:	4620      	mov	r0, r4
 802171e:	f7ff fd69 	bl	80211f4 <rshift>
 8021722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021726:	3501      	adds	r5, #1
 8021728:	42ab      	cmp	r3, r5
 802172a:	f6ff aed0 	blt.w	80214ce <__gethex+0x20a>
 802172e:	2701      	movs	r7, #1
 8021730:	e7c0      	b.n	80216b4 <__gethex+0x3f0>
 8021732:	f016 061f 	ands.w	r6, r6, #31
 8021736:	d0fa      	beq.n	802172e <__gethex+0x46a>
 8021738:	449a      	add	sl, r3
 802173a:	f1c6 0620 	rsb	r6, r6, #32
 802173e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8021742:	f000 f9f1 	bl	8021b28 <__hi0bits>
 8021746:	42b0      	cmp	r0, r6
 8021748:	dbe7      	blt.n	802171a <__gethex+0x456>
 802174a:	e7f0      	b.n	802172e <__gethex+0x46a>
 802174c:	080272d0 	.word	0x080272d0

08021750 <L_shift>:
 8021750:	f1c2 0208 	rsb	r2, r2, #8
 8021754:	0092      	lsls	r2, r2, #2
 8021756:	b570      	push	{r4, r5, r6, lr}
 8021758:	f1c2 0620 	rsb	r6, r2, #32
 802175c:	6843      	ldr	r3, [r0, #4]
 802175e:	6804      	ldr	r4, [r0, #0]
 8021760:	fa03 f506 	lsl.w	r5, r3, r6
 8021764:	432c      	orrs	r4, r5
 8021766:	40d3      	lsrs	r3, r2
 8021768:	6004      	str	r4, [r0, #0]
 802176a:	f840 3f04 	str.w	r3, [r0, #4]!
 802176e:	4288      	cmp	r0, r1
 8021770:	d3f4      	bcc.n	802175c <L_shift+0xc>
 8021772:	bd70      	pop	{r4, r5, r6, pc}

08021774 <__match>:
 8021774:	b530      	push	{r4, r5, lr}
 8021776:	6803      	ldr	r3, [r0, #0]
 8021778:	3301      	adds	r3, #1
 802177a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802177e:	b914      	cbnz	r4, 8021786 <__match+0x12>
 8021780:	6003      	str	r3, [r0, #0]
 8021782:	2001      	movs	r0, #1
 8021784:	bd30      	pop	{r4, r5, pc}
 8021786:	f813 2b01 	ldrb.w	r2, [r3], #1
 802178a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802178e:	2d19      	cmp	r5, #25
 8021790:	bf98      	it	ls
 8021792:	3220      	addls	r2, #32
 8021794:	42a2      	cmp	r2, r4
 8021796:	d0f0      	beq.n	802177a <__match+0x6>
 8021798:	2000      	movs	r0, #0
 802179a:	e7f3      	b.n	8021784 <__match+0x10>

0802179c <__hexnan>:
 802179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217a0:	680b      	ldr	r3, [r1, #0]
 80217a2:	6801      	ldr	r1, [r0, #0]
 80217a4:	115e      	asrs	r6, r3, #5
 80217a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80217aa:	f013 031f 	ands.w	r3, r3, #31
 80217ae:	b087      	sub	sp, #28
 80217b0:	bf18      	it	ne
 80217b2:	3604      	addne	r6, #4
 80217b4:	2500      	movs	r5, #0
 80217b6:	1f37      	subs	r7, r6, #4
 80217b8:	4682      	mov	sl, r0
 80217ba:	4690      	mov	r8, r2
 80217bc:	9301      	str	r3, [sp, #4]
 80217be:	f846 5c04 	str.w	r5, [r6, #-4]
 80217c2:	46b9      	mov	r9, r7
 80217c4:	463c      	mov	r4, r7
 80217c6:	9502      	str	r5, [sp, #8]
 80217c8:	46ab      	mov	fp, r5
 80217ca:	784a      	ldrb	r2, [r1, #1]
 80217cc:	1c4b      	adds	r3, r1, #1
 80217ce:	9303      	str	r3, [sp, #12]
 80217d0:	b342      	cbz	r2, 8021824 <__hexnan+0x88>
 80217d2:	4610      	mov	r0, r2
 80217d4:	9105      	str	r1, [sp, #20]
 80217d6:	9204      	str	r2, [sp, #16]
 80217d8:	f7ff fd5e 	bl	8021298 <__hexdig_fun>
 80217dc:	2800      	cmp	r0, #0
 80217de:	d14f      	bne.n	8021880 <__hexnan+0xe4>
 80217e0:	9a04      	ldr	r2, [sp, #16]
 80217e2:	9905      	ldr	r1, [sp, #20]
 80217e4:	2a20      	cmp	r2, #32
 80217e6:	d818      	bhi.n	802181a <__hexnan+0x7e>
 80217e8:	9b02      	ldr	r3, [sp, #8]
 80217ea:	459b      	cmp	fp, r3
 80217ec:	dd13      	ble.n	8021816 <__hexnan+0x7a>
 80217ee:	454c      	cmp	r4, r9
 80217f0:	d206      	bcs.n	8021800 <__hexnan+0x64>
 80217f2:	2d07      	cmp	r5, #7
 80217f4:	dc04      	bgt.n	8021800 <__hexnan+0x64>
 80217f6:	462a      	mov	r2, r5
 80217f8:	4649      	mov	r1, r9
 80217fa:	4620      	mov	r0, r4
 80217fc:	f7ff ffa8 	bl	8021750 <L_shift>
 8021800:	4544      	cmp	r4, r8
 8021802:	d950      	bls.n	80218a6 <__hexnan+0x10a>
 8021804:	2300      	movs	r3, #0
 8021806:	f1a4 0904 	sub.w	r9, r4, #4
 802180a:	f844 3c04 	str.w	r3, [r4, #-4]
 802180e:	f8cd b008 	str.w	fp, [sp, #8]
 8021812:	464c      	mov	r4, r9
 8021814:	461d      	mov	r5, r3
 8021816:	9903      	ldr	r1, [sp, #12]
 8021818:	e7d7      	b.n	80217ca <__hexnan+0x2e>
 802181a:	2a29      	cmp	r2, #41	; 0x29
 802181c:	d156      	bne.n	80218cc <__hexnan+0x130>
 802181e:	3102      	adds	r1, #2
 8021820:	f8ca 1000 	str.w	r1, [sl]
 8021824:	f1bb 0f00 	cmp.w	fp, #0
 8021828:	d050      	beq.n	80218cc <__hexnan+0x130>
 802182a:	454c      	cmp	r4, r9
 802182c:	d206      	bcs.n	802183c <__hexnan+0xa0>
 802182e:	2d07      	cmp	r5, #7
 8021830:	dc04      	bgt.n	802183c <__hexnan+0xa0>
 8021832:	462a      	mov	r2, r5
 8021834:	4649      	mov	r1, r9
 8021836:	4620      	mov	r0, r4
 8021838:	f7ff ff8a 	bl	8021750 <L_shift>
 802183c:	4544      	cmp	r4, r8
 802183e:	d934      	bls.n	80218aa <__hexnan+0x10e>
 8021840:	f1a8 0204 	sub.w	r2, r8, #4
 8021844:	4623      	mov	r3, r4
 8021846:	f853 1b04 	ldr.w	r1, [r3], #4
 802184a:	f842 1f04 	str.w	r1, [r2, #4]!
 802184e:	429f      	cmp	r7, r3
 8021850:	d2f9      	bcs.n	8021846 <__hexnan+0xaa>
 8021852:	1b3b      	subs	r3, r7, r4
 8021854:	f023 0303 	bic.w	r3, r3, #3
 8021858:	3304      	adds	r3, #4
 802185a:	3401      	adds	r4, #1
 802185c:	3e03      	subs	r6, #3
 802185e:	42b4      	cmp	r4, r6
 8021860:	bf88      	it	hi
 8021862:	2304      	movhi	r3, #4
 8021864:	4443      	add	r3, r8
 8021866:	2200      	movs	r2, #0
 8021868:	f843 2b04 	str.w	r2, [r3], #4
 802186c:	429f      	cmp	r7, r3
 802186e:	d2fb      	bcs.n	8021868 <__hexnan+0xcc>
 8021870:	683b      	ldr	r3, [r7, #0]
 8021872:	b91b      	cbnz	r3, 802187c <__hexnan+0xe0>
 8021874:	4547      	cmp	r7, r8
 8021876:	d127      	bne.n	80218c8 <__hexnan+0x12c>
 8021878:	2301      	movs	r3, #1
 802187a:	603b      	str	r3, [r7, #0]
 802187c:	2005      	movs	r0, #5
 802187e:	e026      	b.n	80218ce <__hexnan+0x132>
 8021880:	3501      	adds	r5, #1
 8021882:	2d08      	cmp	r5, #8
 8021884:	f10b 0b01 	add.w	fp, fp, #1
 8021888:	dd06      	ble.n	8021898 <__hexnan+0xfc>
 802188a:	4544      	cmp	r4, r8
 802188c:	d9c3      	bls.n	8021816 <__hexnan+0x7a>
 802188e:	2300      	movs	r3, #0
 8021890:	f844 3c04 	str.w	r3, [r4, #-4]
 8021894:	2501      	movs	r5, #1
 8021896:	3c04      	subs	r4, #4
 8021898:	6822      	ldr	r2, [r4, #0]
 802189a:	f000 000f 	and.w	r0, r0, #15
 802189e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80218a2:	6022      	str	r2, [r4, #0]
 80218a4:	e7b7      	b.n	8021816 <__hexnan+0x7a>
 80218a6:	2508      	movs	r5, #8
 80218a8:	e7b5      	b.n	8021816 <__hexnan+0x7a>
 80218aa:	9b01      	ldr	r3, [sp, #4]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d0df      	beq.n	8021870 <__hexnan+0xd4>
 80218b0:	f04f 32ff 	mov.w	r2, #4294967295
 80218b4:	f1c3 0320 	rsb	r3, r3, #32
 80218b8:	fa22 f303 	lsr.w	r3, r2, r3
 80218bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80218c0:	401a      	ands	r2, r3
 80218c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80218c6:	e7d3      	b.n	8021870 <__hexnan+0xd4>
 80218c8:	3f04      	subs	r7, #4
 80218ca:	e7d1      	b.n	8021870 <__hexnan+0xd4>
 80218cc:	2004      	movs	r0, #4
 80218ce:	b007      	add	sp, #28
 80218d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218d4 <_localeconv_r>:
 80218d4:	4800      	ldr	r0, [pc, #0]	; (80218d8 <_localeconv_r+0x4>)
 80218d6:	4770      	bx	lr
 80218d8:	20000510 	.word	0x20000510

080218dc <_lseek_r>:
 80218dc:	b538      	push	{r3, r4, r5, lr}
 80218de:	4d07      	ldr	r5, [pc, #28]	; (80218fc <_lseek_r+0x20>)
 80218e0:	4604      	mov	r4, r0
 80218e2:	4608      	mov	r0, r1
 80218e4:	4611      	mov	r1, r2
 80218e6:	2200      	movs	r2, #0
 80218e8:	602a      	str	r2, [r5, #0]
 80218ea:	461a      	mov	r2, r3
 80218ec:	f7e4 ffe6 	bl	80068bc <_lseek>
 80218f0:	1c43      	adds	r3, r0, #1
 80218f2:	d102      	bne.n	80218fa <_lseek_r+0x1e>
 80218f4:	682b      	ldr	r3, [r5, #0]
 80218f6:	b103      	cbz	r3, 80218fa <_lseek_r+0x1e>
 80218f8:	6023      	str	r3, [r4, #0]
 80218fa:	bd38      	pop	{r3, r4, r5, pc}
 80218fc:	2000e190 	.word	0x2000e190

08021900 <__ascii_mbtowc>:
 8021900:	b082      	sub	sp, #8
 8021902:	b901      	cbnz	r1, 8021906 <__ascii_mbtowc+0x6>
 8021904:	a901      	add	r1, sp, #4
 8021906:	b142      	cbz	r2, 802191a <__ascii_mbtowc+0x1a>
 8021908:	b14b      	cbz	r3, 802191e <__ascii_mbtowc+0x1e>
 802190a:	7813      	ldrb	r3, [r2, #0]
 802190c:	600b      	str	r3, [r1, #0]
 802190e:	7812      	ldrb	r2, [r2, #0]
 8021910:	1e10      	subs	r0, r2, #0
 8021912:	bf18      	it	ne
 8021914:	2001      	movne	r0, #1
 8021916:	b002      	add	sp, #8
 8021918:	4770      	bx	lr
 802191a:	4610      	mov	r0, r2
 802191c:	e7fb      	b.n	8021916 <__ascii_mbtowc+0x16>
 802191e:	f06f 0001 	mvn.w	r0, #1
 8021922:	e7f8      	b.n	8021916 <__ascii_mbtowc+0x16>

08021924 <__malloc_lock>:
 8021924:	4801      	ldr	r0, [pc, #4]	; (802192c <__malloc_lock+0x8>)
 8021926:	f7e5 bb2b 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 802192a:	bf00      	nop
 802192c:	20000948 	.word	0x20000948

08021930 <__malloc_unlock>:
 8021930:	4801      	ldr	r0, [pc, #4]	; (8021938 <__malloc_unlock+0x8>)
 8021932:	f7e5 bb39 	b.w	8006fa8 <__retarget_lock_release_recursive>
 8021936:	bf00      	nop
 8021938:	20000948 	.word	0x20000948

0802193c <_Balloc>:
 802193c:	b570      	push	{r4, r5, r6, lr}
 802193e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021940:	4604      	mov	r4, r0
 8021942:	460d      	mov	r5, r1
 8021944:	b976      	cbnz	r6, 8021964 <_Balloc+0x28>
 8021946:	2010      	movs	r0, #16
 8021948:	f7fc fd06 	bl	801e358 <malloc>
 802194c:	4602      	mov	r2, r0
 802194e:	6260      	str	r0, [r4, #36]	; 0x24
 8021950:	b920      	cbnz	r0, 802195c <_Balloc+0x20>
 8021952:	4b18      	ldr	r3, [pc, #96]	; (80219b4 <_Balloc+0x78>)
 8021954:	4818      	ldr	r0, [pc, #96]	; (80219b8 <_Balloc+0x7c>)
 8021956:	2166      	movs	r1, #102	; 0x66
 8021958:	f7fe fcca 	bl	80202f0 <__assert_func>
 802195c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021960:	6006      	str	r6, [r0, #0]
 8021962:	60c6      	str	r6, [r0, #12]
 8021964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021966:	68f3      	ldr	r3, [r6, #12]
 8021968:	b183      	cbz	r3, 802198c <_Balloc+0x50>
 802196a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802196c:	68db      	ldr	r3, [r3, #12]
 802196e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021972:	b9b8      	cbnz	r0, 80219a4 <_Balloc+0x68>
 8021974:	2101      	movs	r1, #1
 8021976:	fa01 f605 	lsl.w	r6, r1, r5
 802197a:	1d72      	adds	r2, r6, #5
 802197c:	0092      	lsls	r2, r2, #2
 802197e:	4620      	mov	r0, r4
 8021980:	f000 fc97 	bl	80222b2 <_calloc_r>
 8021984:	b160      	cbz	r0, 80219a0 <_Balloc+0x64>
 8021986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802198a:	e00e      	b.n	80219aa <_Balloc+0x6e>
 802198c:	2221      	movs	r2, #33	; 0x21
 802198e:	2104      	movs	r1, #4
 8021990:	4620      	mov	r0, r4
 8021992:	f000 fc8e 	bl	80222b2 <_calloc_r>
 8021996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021998:	60f0      	str	r0, [r6, #12]
 802199a:	68db      	ldr	r3, [r3, #12]
 802199c:	2b00      	cmp	r3, #0
 802199e:	d1e4      	bne.n	802196a <_Balloc+0x2e>
 80219a0:	2000      	movs	r0, #0
 80219a2:	bd70      	pop	{r4, r5, r6, pc}
 80219a4:	6802      	ldr	r2, [r0, #0]
 80219a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80219aa:	2300      	movs	r3, #0
 80219ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80219b0:	e7f7      	b.n	80219a2 <_Balloc+0x66>
 80219b2:	bf00      	nop
 80219b4:	0802715b 	.word	0x0802715b
 80219b8:	08027360 	.word	0x08027360

080219bc <_Bfree>:
 80219bc:	b570      	push	{r4, r5, r6, lr}
 80219be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80219c0:	4605      	mov	r5, r0
 80219c2:	460c      	mov	r4, r1
 80219c4:	b976      	cbnz	r6, 80219e4 <_Bfree+0x28>
 80219c6:	2010      	movs	r0, #16
 80219c8:	f7fc fcc6 	bl	801e358 <malloc>
 80219cc:	4602      	mov	r2, r0
 80219ce:	6268      	str	r0, [r5, #36]	; 0x24
 80219d0:	b920      	cbnz	r0, 80219dc <_Bfree+0x20>
 80219d2:	4b09      	ldr	r3, [pc, #36]	; (80219f8 <_Bfree+0x3c>)
 80219d4:	4809      	ldr	r0, [pc, #36]	; (80219fc <_Bfree+0x40>)
 80219d6:	218a      	movs	r1, #138	; 0x8a
 80219d8:	f7fe fc8a 	bl	80202f0 <__assert_func>
 80219dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80219e0:	6006      	str	r6, [r0, #0]
 80219e2:	60c6      	str	r6, [r0, #12]
 80219e4:	b13c      	cbz	r4, 80219f6 <_Bfree+0x3a>
 80219e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80219e8:	6862      	ldr	r2, [r4, #4]
 80219ea:	68db      	ldr	r3, [r3, #12]
 80219ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80219f0:	6021      	str	r1, [r4, #0]
 80219f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80219f6:	bd70      	pop	{r4, r5, r6, pc}
 80219f8:	0802715b 	.word	0x0802715b
 80219fc:	08027360 	.word	0x08027360

08021a00 <__multadd>:
 8021a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a04:	690e      	ldr	r6, [r1, #16]
 8021a06:	4607      	mov	r7, r0
 8021a08:	4698      	mov	r8, r3
 8021a0a:	460c      	mov	r4, r1
 8021a0c:	f101 0014 	add.w	r0, r1, #20
 8021a10:	2300      	movs	r3, #0
 8021a12:	6805      	ldr	r5, [r0, #0]
 8021a14:	b2a9      	uxth	r1, r5
 8021a16:	fb02 8101 	mla	r1, r2, r1, r8
 8021a1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8021a1e:	0c2d      	lsrs	r5, r5, #16
 8021a20:	fb02 c505 	mla	r5, r2, r5, ip
 8021a24:	b289      	uxth	r1, r1
 8021a26:	3301      	adds	r3, #1
 8021a28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8021a2c:	429e      	cmp	r6, r3
 8021a2e:	f840 1b04 	str.w	r1, [r0], #4
 8021a32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8021a36:	dcec      	bgt.n	8021a12 <__multadd+0x12>
 8021a38:	f1b8 0f00 	cmp.w	r8, #0
 8021a3c:	d022      	beq.n	8021a84 <__multadd+0x84>
 8021a3e:	68a3      	ldr	r3, [r4, #8]
 8021a40:	42b3      	cmp	r3, r6
 8021a42:	dc19      	bgt.n	8021a78 <__multadd+0x78>
 8021a44:	6861      	ldr	r1, [r4, #4]
 8021a46:	4638      	mov	r0, r7
 8021a48:	3101      	adds	r1, #1
 8021a4a:	f7ff ff77 	bl	802193c <_Balloc>
 8021a4e:	4605      	mov	r5, r0
 8021a50:	b928      	cbnz	r0, 8021a5e <__multadd+0x5e>
 8021a52:	4602      	mov	r2, r0
 8021a54:	4b0d      	ldr	r3, [pc, #52]	; (8021a8c <__multadd+0x8c>)
 8021a56:	480e      	ldr	r0, [pc, #56]	; (8021a90 <__multadd+0x90>)
 8021a58:	21b5      	movs	r1, #181	; 0xb5
 8021a5a:	f7fe fc49 	bl	80202f0 <__assert_func>
 8021a5e:	6922      	ldr	r2, [r4, #16]
 8021a60:	3202      	adds	r2, #2
 8021a62:	f104 010c 	add.w	r1, r4, #12
 8021a66:	0092      	lsls	r2, r2, #2
 8021a68:	300c      	adds	r0, #12
 8021a6a:	f7fc fc8b 	bl	801e384 <memcpy>
 8021a6e:	4621      	mov	r1, r4
 8021a70:	4638      	mov	r0, r7
 8021a72:	f7ff ffa3 	bl	80219bc <_Bfree>
 8021a76:	462c      	mov	r4, r5
 8021a78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8021a7c:	3601      	adds	r6, #1
 8021a7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8021a82:	6126      	str	r6, [r4, #16]
 8021a84:	4620      	mov	r0, r4
 8021a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a8a:	bf00      	nop
 8021a8c:	080272d0 	.word	0x080272d0
 8021a90:	08027360 	.word	0x08027360

08021a94 <__s2b>:
 8021a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a98:	460c      	mov	r4, r1
 8021a9a:	4615      	mov	r5, r2
 8021a9c:	461f      	mov	r7, r3
 8021a9e:	2209      	movs	r2, #9
 8021aa0:	3308      	adds	r3, #8
 8021aa2:	4606      	mov	r6, r0
 8021aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8021aa8:	2100      	movs	r1, #0
 8021aaa:	2201      	movs	r2, #1
 8021aac:	429a      	cmp	r2, r3
 8021aae:	db09      	blt.n	8021ac4 <__s2b+0x30>
 8021ab0:	4630      	mov	r0, r6
 8021ab2:	f7ff ff43 	bl	802193c <_Balloc>
 8021ab6:	b940      	cbnz	r0, 8021aca <__s2b+0x36>
 8021ab8:	4602      	mov	r2, r0
 8021aba:	4b19      	ldr	r3, [pc, #100]	; (8021b20 <__s2b+0x8c>)
 8021abc:	4819      	ldr	r0, [pc, #100]	; (8021b24 <__s2b+0x90>)
 8021abe:	21ce      	movs	r1, #206	; 0xce
 8021ac0:	f7fe fc16 	bl	80202f0 <__assert_func>
 8021ac4:	0052      	lsls	r2, r2, #1
 8021ac6:	3101      	adds	r1, #1
 8021ac8:	e7f0      	b.n	8021aac <__s2b+0x18>
 8021aca:	9b08      	ldr	r3, [sp, #32]
 8021acc:	6143      	str	r3, [r0, #20]
 8021ace:	2d09      	cmp	r5, #9
 8021ad0:	f04f 0301 	mov.w	r3, #1
 8021ad4:	6103      	str	r3, [r0, #16]
 8021ad6:	dd16      	ble.n	8021b06 <__s2b+0x72>
 8021ad8:	f104 0909 	add.w	r9, r4, #9
 8021adc:	46c8      	mov	r8, r9
 8021ade:	442c      	add	r4, r5
 8021ae0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021ae4:	4601      	mov	r1, r0
 8021ae6:	3b30      	subs	r3, #48	; 0x30
 8021ae8:	220a      	movs	r2, #10
 8021aea:	4630      	mov	r0, r6
 8021aec:	f7ff ff88 	bl	8021a00 <__multadd>
 8021af0:	45a0      	cmp	r8, r4
 8021af2:	d1f5      	bne.n	8021ae0 <__s2b+0x4c>
 8021af4:	f1a5 0408 	sub.w	r4, r5, #8
 8021af8:	444c      	add	r4, r9
 8021afa:	1b2d      	subs	r5, r5, r4
 8021afc:	1963      	adds	r3, r4, r5
 8021afe:	42bb      	cmp	r3, r7
 8021b00:	db04      	blt.n	8021b0c <__s2b+0x78>
 8021b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b06:	340a      	adds	r4, #10
 8021b08:	2509      	movs	r5, #9
 8021b0a:	e7f6      	b.n	8021afa <__s2b+0x66>
 8021b0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021b10:	4601      	mov	r1, r0
 8021b12:	3b30      	subs	r3, #48	; 0x30
 8021b14:	220a      	movs	r2, #10
 8021b16:	4630      	mov	r0, r6
 8021b18:	f7ff ff72 	bl	8021a00 <__multadd>
 8021b1c:	e7ee      	b.n	8021afc <__s2b+0x68>
 8021b1e:	bf00      	nop
 8021b20:	080272d0 	.word	0x080272d0
 8021b24:	08027360 	.word	0x08027360

08021b28 <__hi0bits>:
 8021b28:	0c03      	lsrs	r3, r0, #16
 8021b2a:	041b      	lsls	r3, r3, #16
 8021b2c:	b9d3      	cbnz	r3, 8021b64 <__hi0bits+0x3c>
 8021b2e:	0400      	lsls	r0, r0, #16
 8021b30:	2310      	movs	r3, #16
 8021b32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021b36:	bf04      	itt	eq
 8021b38:	0200      	lsleq	r0, r0, #8
 8021b3a:	3308      	addeq	r3, #8
 8021b3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021b40:	bf04      	itt	eq
 8021b42:	0100      	lsleq	r0, r0, #4
 8021b44:	3304      	addeq	r3, #4
 8021b46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021b4a:	bf04      	itt	eq
 8021b4c:	0080      	lsleq	r0, r0, #2
 8021b4e:	3302      	addeq	r3, #2
 8021b50:	2800      	cmp	r0, #0
 8021b52:	db05      	blt.n	8021b60 <__hi0bits+0x38>
 8021b54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021b58:	f103 0301 	add.w	r3, r3, #1
 8021b5c:	bf08      	it	eq
 8021b5e:	2320      	moveq	r3, #32
 8021b60:	4618      	mov	r0, r3
 8021b62:	4770      	bx	lr
 8021b64:	2300      	movs	r3, #0
 8021b66:	e7e4      	b.n	8021b32 <__hi0bits+0xa>

08021b68 <__lo0bits>:
 8021b68:	6803      	ldr	r3, [r0, #0]
 8021b6a:	f013 0207 	ands.w	r2, r3, #7
 8021b6e:	4601      	mov	r1, r0
 8021b70:	d00b      	beq.n	8021b8a <__lo0bits+0x22>
 8021b72:	07da      	lsls	r2, r3, #31
 8021b74:	d424      	bmi.n	8021bc0 <__lo0bits+0x58>
 8021b76:	0798      	lsls	r0, r3, #30
 8021b78:	bf49      	itett	mi
 8021b7a:	085b      	lsrmi	r3, r3, #1
 8021b7c:	089b      	lsrpl	r3, r3, #2
 8021b7e:	2001      	movmi	r0, #1
 8021b80:	600b      	strmi	r3, [r1, #0]
 8021b82:	bf5c      	itt	pl
 8021b84:	600b      	strpl	r3, [r1, #0]
 8021b86:	2002      	movpl	r0, #2
 8021b88:	4770      	bx	lr
 8021b8a:	b298      	uxth	r0, r3
 8021b8c:	b9b0      	cbnz	r0, 8021bbc <__lo0bits+0x54>
 8021b8e:	0c1b      	lsrs	r3, r3, #16
 8021b90:	2010      	movs	r0, #16
 8021b92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021b96:	bf04      	itt	eq
 8021b98:	0a1b      	lsreq	r3, r3, #8
 8021b9a:	3008      	addeq	r0, #8
 8021b9c:	071a      	lsls	r2, r3, #28
 8021b9e:	bf04      	itt	eq
 8021ba0:	091b      	lsreq	r3, r3, #4
 8021ba2:	3004      	addeq	r0, #4
 8021ba4:	079a      	lsls	r2, r3, #30
 8021ba6:	bf04      	itt	eq
 8021ba8:	089b      	lsreq	r3, r3, #2
 8021baa:	3002      	addeq	r0, #2
 8021bac:	07da      	lsls	r2, r3, #31
 8021bae:	d403      	bmi.n	8021bb8 <__lo0bits+0x50>
 8021bb0:	085b      	lsrs	r3, r3, #1
 8021bb2:	f100 0001 	add.w	r0, r0, #1
 8021bb6:	d005      	beq.n	8021bc4 <__lo0bits+0x5c>
 8021bb8:	600b      	str	r3, [r1, #0]
 8021bba:	4770      	bx	lr
 8021bbc:	4610      	mov	r0, r2
 8021bbe:	e7e8      	b.n	8021b92 <__lo0bits+0x2a>
 8021bc0:	2000      	movs	r0, #0
 8021bc2:	4770      	bx	lr
 8021bc4:	2020      	movs	r0, #32
 8021bc6:	4770      	bx	lr

08021bc8 <__i2b>:
 8021bc8:	b510      	push	{r4, lr}
 8021bca:	460c      	mov	r4, r1
 8021bcc:	2101      	movs	r1, #1
 8021bce:	f7ff feb5 	bl	802193c <_Balloc>
 8021bd2:	4602      	mov	r2, r0
 8021bd4:	b928      	cbnz	r0, 8021be2 <__i2b+0x1a>
 8021bd6:	4b05      	ldr	r3, [pc, #20]	; (8021bec <__i2b+0x24>)
 8021bd8:	4805      	ldr	r0, [pc, #20]	; (8021bf0 <__i2b+0x28>)
 8021bda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021bde:	f7fe fb87 	bl	80202f0 <__assert_func>
 8021be2:	2301      	movs	r3, #1
 8021be4:	6144      	str	r4, [r0, #20]
 8021be6:	6103      	str	r3, [r0, #16]
 8021be8:	bd10      	pop	{r4, pc}
 8021bea:	bf00      	nop
 8021bec:	080272d0 	.word	0x080272d0
 8021bf0:	08027360 	.word	0x08027360

08021bf4 <__multiply>:
 8021bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bf8:	4614      	mov	r4, r2
 8021bfa:	690a      	ldr	r2, [r1, #16]
 8021bfc:	6923      	ldr	r3, [r4, #16]
 8021bfe:	429a      	cmp	r2, r3
 8021c00:	bfb8      	it	lt
 8021c02:	460b      	movlt	r3, r1
 8021c04:	460d      	mov	r5, r1
 8021c06:	bfbc      	itt	lt
 8021c08:	4625      	movlt	r5, r4
 8021c0a:	461c      	movlt	r4, r3
 8021c0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021c10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021c14:	68ab      	ldr	r3, [r5, #8]
 8021c16:	6869      	ldr	r1, [r5, #4]
 8021c18:	eb0a 0709 	add.w	r7, sl, r9
 8021c1c:	42bb      	cmp	r3, r7
 8021c1e:	b085      	sub	sp, #20
 8021c20:	bfb8      	it	lt
 8021c22:	3101      	addlt	r1, #1
 8021c24:	f7ff fe8a 	bl	802193c <_Balloc>
 8021c28:	b930      	cbnz	r0, 8021c38 <__multiply+0x44>
 8021c2a:	4602      	mov	r2, r0
 8021c2c:	4b42      	ldr	r3, [pc, #264]	; (8021d38 <__multiply+0x144>)
 8021c2e:	4843      	ldr	r0, [pc, #268]	; (8021d3c <__multiply+0x148>)
 8021c30:	f240 115d 	movw	r1, #349	; 0x15d
 8021c34:	f7fe fb5c 	bl	80202f0 <__assert_func>
 8021c38:	f100 0614 	add.w	r6, r0, #20
 8021c3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021c40:	4633      	mov	r3, r6
 8021c42:	2200      	movs	r2, #0
 8021c44:	4543      	cmp	r3, r8
 8021c46:	d31e      	bcc.n	8021c86 <__multiply+0x92>
 8021c48:	f105 0c14 	add.w	ip, r5, #20
 8021c4c:	f104 0314 	add.w	r3, r4, #20
 8021c50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021c54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021c58:	9202      	str	r2, [sp, #8]
 8021c5a:	ebac 0205 	sub.w	r2, ip, r5
 8021c5e:	3a15      	subs	r2, #21
 8021c60:	f022 0203 	bic.w	r2, r2, #3
 8021c64:	3204      	adds	r2, #4
 8021c66:	f105 0115 	add.w	r1, r5, #21
 8021c6a:	458c      	cmp	ip, r1
 8021c6c:	bf38      	it	cc
 8021c6e:	2204      	movcc	r2, #4
 8021c70:	9201      	str	r2, [sp, #4]
 8021c72:	9a02      	ldr	r2, [sp, #8]
 8021c74:	9303      	str	r3, [sp, #12]
 8021c76:	429a      	cmp	r2, r3
 8021c78:	d808      	bhi.n	8021c8c <__multiply+0x98>
 8021c7a:	2f00      	cmp	r7, #0
 8021c7c:	dc55      	bgt.n	8021d2a <__multiply+0x136>
 8021c7e:	6107      	str	r7, [r0, #16]
 8021c80:	b005      	add	sp, #20
 8021c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c86:	f843 2b04 	str.w	r2, [r3], #4
 8021c8a:	e7db      	b.n	8021c44 <__multiply+0x50>
 8021c8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8021c90:	f1ba 0f00 	cmp.w	sl, #0
 8021c94:	d020      	beq.n	8021cd8 <__multiply+0xe4>
 8021c96:	f105 0e14 	add.w	lr, r5, #20
 8021c9a:	46b1      	mov	r9, r6
 8021c9c:	2200      	movs	r2, #0
 8021c9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021ca2:	f8d9 b000 	ldr.w	fp, [r9]
 8021ca6:	b2a1      	uxth	r1, r4
 8021ca8:	fa1f fb8b 	uxth.w	fp, fp
 8021cac:	fb0a b101 	mla	r1, sl, r1, fp
 8021cb0:	4411      	add	r1, r2
 8021cb2:	f8d9 2000 	ldr.w	r2, [r9]
 8021cb6:	0c24      	lsrs	r4, r4, #16
 8021cb8:	0c12      	lsrs	r2, r2, #16
 8021cba:	fb0a 2404 	mla	r4, sl, r4, r2
 8021cbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021cc2:	b289      	uxth	r1, r1
 8021cc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021cc8:	45f4      	cmp	ip, lr
 8021cca:	f849 1b04 	str.w	r1, [r9], #4
 8021cce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021cd2:	d8e4      	bhi.n	8021c9e <__multiply+0xaa>
 8021cd4:	9901      	ldr	r1, [sp, #4]
 8021cd6:	5072      	str	r2, [r6, r1]
 8021cd8:	9a03      	ldr	r2, [sp, #12]
 8021cda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021cde:	3304      	adds	r3, #4
 8021ce0:	f1b9 0f00 	cmp.w	r9, #0
 8021ce4:	d01f      	beq.n	8021d26 <__multiply+0x132>
 8021ce6:	6834      	ldr	r4, [r6, #0]
 8021ce8:	f105 0114 	add.w	r1, r5, #20
 8021cec:	46b6      	mov	lr, r6
 8021cee:	f04f 0a00 	mov.w	sl, #0
 8021cf2:	880a      	ldrh	r2, [r1, #0]
 8021cf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021cf8:	fb09 b202 	mla	r2, r9, r2, fp
 8021cfc:	4492      	add	sl, r2
 8021cfe:	b2a4      	uxth	r4, r4
 8021d00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021d04:	f84e 4b04 	str.w	r4, [lr], #4
 8021d08:	f851 4b04 	ldr.w	r4, [r1], #4
 8021d0c:	f8be 2000 	ldrh.w	r2, [lr]
 8021d10:	0c24      	lsrs	r4, r4, #16
 8021d12:	fb09 2404 	mla	r4, r9, r4, r2
 8021d16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021d1a:	458c      	cmp	ip, r1
 8021d1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021d20:	d8e7      	bhi.n	8021cf2 <__multiply+0xfe>
 8021d22:	9a01      	ldr	r2, [sp, #4]
 8021d24:	50b4      	str	r4, [r6, r2]
 8021d26:	3604      	adds	r6, #4
 8021d28:	e7a3      	b.n	8021c72 <__multiply+0x7e>
 8021d2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d1a5      	bne.n	8021c7e <__multiply+0x8a>
 8021d32:	3f01      	subs	r7, #1
 8021d34:	e7a1      	b.n	8021c7a <__multiply+0x86>
 8021d36:	bf00      	nop
 8021d38:	080272d0 	.word	0x080272d0
 8021d3c:	08027360 	.word	0x08027360

08021d40 <__pow5mult>:
 8021d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d44:	4615      	mov	r5, r2
 8021d46:	f012 0203 	ands.w	r2, r2, #3
 8021d4a:	4606      	mov	r6, r0
 8021d4c:	460f      	mov	r7, r1
 8021d4e:	d007      	beq.n	8021d60 <__pow5mult+0x20>
 8021d50:	4c25      	ldr	r4, [pc, #148]	; (8021de8 <__pow5mult+0xa8>)
 8021d52:	3a01      	subs	r2, #1
 8021d54:	2300      	movs	r3, #0
 8021d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021d5a:	f7ff fe51 	bl	8021a00 <__multadd>
 8021d5e:	4607      	mov	r7, r0
 8021d60:	10ad      	asrs	r5, r5, #2
 8021d62:	d03d      	beq.n	8021de0 <__pow5mult+0xa0>
 8021d64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021d66:	b97c      	cbnz	r4, 8021d88 <__pow5mult+0x48>
 8021d68:	2010      	movs	r0, #16
 8021d6a:	f7fc faf5 	bl	801e358 <malloc>
 8021d6e:	4602      	mov	r2, r0
 8021d70:	6270      	str	r0, [r6, #36]	; 0x24
 8021d72:	b928      	cbnz	r0, 8021d80 <__pow5mult+0x40>
 8021d74:	4b1d      	ldr	r3, [pc, #116]	; (8021dec <__pow5mult+0xac>)
 8021d76:	481e      	ldr	r0, [pc, #120]	; (8021df0 <__pow5mult+0xb0>)
 8021d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021d7c:	f7fe fab8 	bl	80202f0 <__assert_func>
 8021d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021d84:	6004      	str	r4, [r0, #0]
 8021d86:	60c4      	str	r4, [r0, #12]
 8021d88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021d90:	b94c      	cbnz	r4, 8021da6 <__pow5mult+0x66>
 8021d92:	f240 2171 	movw	r1, #625	; 0x271
 8021d96:	4630      	mov	r0, r6
 8021d98:	f7ff ff16 	bl	8021bc8 <__i2b>
 8021d9c:	2300      	movs	r3, #0
 8021d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021da2:	4604      	mov	r4, r0
 8021da4:	6003      	str	r3, [r0, #0]
 8021da6:	f04f 0900 	mov.w	r9, #0
 8021daa:	07eb      	lsls	r3, r5, #31
 8021dac:	d50a      	bpl.n	8021dc4 <__pow5mult+0x84>
 8021dae:	4639      	mov	r1, r7
 8021db0:	4622      	mov	r2, r4
 8021db2:	4630      	mov	r0, r6
 8021db4:	f7ff ff1e 	bl	8021bf4 <__multiply>
 8021db8:	4639      	mov	r1, r7
 8021dba:	4680      	mov	r8, r0
 8021dbc:	4630      	mov	r0, r6
 8021dbe:	f7ff fdfd 	bl	80219bc <_Bfree>
 8021dc2:	4647      	mov	r7, r8
 8021dc4:	106d      	asrs	r5, r5, #1
 8021dc6:	d00b      	beq.n	8021de0 <__pow5mult+0xa0>
 8021dc8:	6820      	ldr	r0, [r4, #0]
 8021dca:	b938      	cbnz	r0, 8021ddc <__pow5mult+0x9c>
 8021dcc:	4622      	mov	r2, r4
 8021dce:	4621      	mov	r1, r4
 8021dd0:	4630      	mov	r0, r6
 8021dd2:	f7ff ff0f 	bl	8021bf4 <__multiply>
 8021dd6:	6020      	str	r0, [r4, #0]
 8021dd8:	f8c0 9000 	str.w	r9, [r0]
 8021ddc:	4604      	mov	r4, r0
 8021dde:	e7e4      	b.n	8021daa <__pow5mult+0x6a>
 8021de0:	4638      	mov	r0, r7
 8021de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021de6:	bf00      	nop
 8021de8:	080274b0 	.word	0x080274b0
 8021dec:	0802715b 	.word	0x0802715b
 8021df0:	08027360 	.word	0x08027360

08021df4 <__lshift>:
 8021df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021df8:	460c      	mov	r4, r1
 8021dfa:	6849      	ldr	r1, [r1, #4]
 8021dfc:	6923      	ldr	r3, [r4, #16]
 8021dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021e02:	68a3      	ldr	r3, [r4, #8]
 8021e04:	4607      	mov	r7, r0
 8021e06:	4691      	mov	r9, r2
 8021e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021e0c:	f108 0601 	add.w	r6, r8, #1
 8021e10:	42b3      	cmp	r3, r6
 8021e12:	db0b      	blt.n	8021e2c <__lshift+0x38>
 8021e14:	4638      	mov	r0, r7
 8021e16:	f7ff fd91 	bl	802193c <_Balloc>
 8021e1a:	4605      	mov	r5, r0
 8021e1c:	b948      	cbnz	r0, 8021e32 <__lshift+0x3e>
 8021e1e:	4602      	mov	r2, r0
 8021e20:	4b28      	ldr	r3, [pc, #160]	; (8021ec4 <__lshift+0xd0>)
 8021e22:	4829      	ldr	r0, [pc, #164]	; (8021ec8 <__lshift+0xd4>)
 8021e24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021e28:	f7fe fa62 	bl	80202f0 <__assert_func>
 8021e2c:	3101      	adds	r1, #1
 8021e2e:	005b      	lsls	r3, r3, #1
 8021e30:	e7ee      	b.n	8021e10 <__lshift+0x1c>
 8021e32:	2300      	movs	r3, #0
 8021e34:	f100 0114 	add.w	r1, r0, #20
 8021e38:	f100 0210 	add.w	r2, r0, #16
 8021e3c:	4618      	mov	r0, r3
 8021e3e:	4553      	cmp	r3, sl
 8021e40:	db33      	blt.n	8021eaa <__lshift+0xb6>
 8021e42:	6920      	ldr	r0, [r4, #16]
 8021e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021e48:	f104 0314 	add.w	r3, r4, #20
 8021e4c:	f019 091f 	ands.w	r9, r9, #31
 8021e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021e58:	d02b      	beq.n	8021eb2 <__lshift+0xbe>
 8021e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8021e5e:	468a      	mov	sl, r1
 8021e60:	2200      	movs	r2, #0
 8021e62:	6818      	ldr	r0, [r3, #0]
 8021e64:	fa00 f009 	lsl.w	r0, r0, r9
 8021e68:	4302      	orrs	r2, r0
 8021e6a:	f84a 2b04 	str.w	r2, [sl], #4
 8021e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e72:	459c      	cmp	ip, r3
 8021e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8021e78:	d8f3      	bhi.n	8021e62 <__lshift+0x6e>
 8021e7a:	ebac 0304 	sub.w	r3, ip, r4
 8021e7e:	3b15      	subs	r3, #21
 8021e80:	f023 0303 	bic.w	r3, r3, #3
 8021e84:	3304      	adds	r3, #4
 8021e86:	f104 0015 	add.w	r0, r4, #21
 8021e8a:	4584      	cmp	ip, r0
 8021e8c:	bf38      	it	cc
 8021e8e:	2304      	movcc	r3, #4
 8021e90:	50ca      	str	r2, [r1, r3]
 8021e92:	b10a      	cbz	r2, 8021e98 <__lshift+0xa4>
 8021e94:	f108 0602 	add.w	r6, r8, #2
 8021e98:	3e01      	subs	r6, #1
 8021e9a:	4638      	mov	r0, r7
 8021e9c:	612e      	str	r6, [r5, #16]
 8021e9e:	4621      	mov	r1, r4
 8021ea0:	f7ff fd8c 	bl	80219bc <_Bfree>
 8021ea4:	4628      	mov	r0, r5
 8021ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8021eae:	3301      	adds	r3, #1
 8021eb0:	e7c5      	b.n	8021e3e <__lshift+0x4a>
 8021eb2:	3904      	subs	r1, #4
 8021eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8021eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8021ebc:	459c      	cmp	ip, r3
 8021ebe:	d8f9      	bhi.n	8021eb4 <__lshift+0xc0>
 8021ec0:	e7ea      	b.n	8021e98 <__lshift+0xa4>
 8021ec2:	bf00      	nop
 8021ec4:	080272d0 	.word	0x080272d0
 8021ec8:	08027360 	.word	0x08027360

08021ecc <__mcmp>:
 8021ecc:	b530      	push	{r4, r5, lr}
 8021ece:	6902      	ldr	r2, [r0, #16]
 8021ed0:	690c      	ldr	r4, [r1, #16]
 8021ed2:	1b12      	subs	r2, r2, r4
 8021ed4:	d10e      	bne.n	8021ef4 <__mcmp+0x28>
 8021ed6:	f100 0314 	add.w	r3, r0, #20
 8021eda:	3114      	adds	r1, #20
 8021edc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021ee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021ee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021ee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021eec:	42a5      	cmp	r5, r4
 8021eee:	d003      	beq.n	8021ef8 <__mcmp+0x2c>
 8021ef0:	d305      	bcc.n	8021efe <__mcmp+0x32>
 8021ef2:	2201      	movs	r2, #1
 8021ef4:	4610      	mov	r0, r2
 8021ef6:	bd30      	pop	{r4, r5, pc}
 8021ef8:	4283      	cmp	r3, r0
 8021efa:	d3f3      	bcc.n	8021ee4 <__mcmp+0x18>
 8021efc:	e7fa      	b.n	8021ef4 <__mcmp+0x28>
 8021efe:	f04f 32ff 	mov.w	r2, #4294967295
 8021f02:	e7f7      	b.n	8021ef4 <__mcmp+0x28>

08021f04 <__mdiff>:
 8021f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f08:	460c      	mov	r4, r1
 8021f0a:	4606      	mov	r6, r0
 8021f0c:	4611      	mov	r1, r2
 8021f0e:	4620      	mov	r0, r4
 8021f10:	4617      	mov	r7, r2
 8021f12:	f7ff ffdb 	bl	8021ecc <__mcmp>
 8021f16:	1e05      	subs	r5, r0, #0
 8021f18:	d110      	bne.n	8021f3c <__mdiff+0x38>
 8021f1a:	4629      	mov	r1, r5
 8021f1c:	4630      	mov	r0, r6
 8021f1e:	f7ff fd0d 	bl	802193c <_Balloc>
 8021f22:	b930      	cbnz	r0, 8021f32 <__mdiff+0x2e>
 8021f24:	4b39      	ldr	r3, [pc, #228]	; (802200c <__mdiff+0x108>)
 8021f26:	4602      	mov	r2, r0
 8021f28:	f240 2132 	movw	r1, #562	; 0x232
 8021f2c:	4838      	ldr	r0, [pc, #224]	; (8022010 <__mdiff+0x10c>)
 8021f2e:	f7fe f9df 	bl	80202f0 <__assert_func>
 8021f32:	2301      	movs	r3, #1
 8021f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f3c:	bfa4      	itt	ge
 8021f3e:	463b      	movge	r3, r7
 8021f40:	4627      	movge	r7, r4
 8021f42:	4630      	mov	r0, r6
 8021f44:	6879      	ldr	r1, [r7, #4]
 8021f46:	bfa6      	itte	ge
 8021f48:	461c      	movge	r4, r3
 8021f4a:	2500      	movge	r5, #0
 8021f4c:	2501      	movlt	r5, #1
 8021f4e:	f7ff fcf5 	bl	802193c <_Balloc>
 8021f52:	b920      	cbnz	r0, 8021f5e <__mdiff+0x5a>
 8021f54:	4b2d      	ldr	r3, [pc, #180]	; (802200c <__mdiff+0x108>)
 8021f56:	4602      	mov	r2, r0
 8021f58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021f5c:	e7e6      	b.n	8021f2c <__mdiff+0x28>
 8021f5e:	693e      	ldr	r6, [r7, #16]
 8021f60:	60c5      	str	r5, [r0, #12]
 8021f62:	6925      	ldr	r5, [r4, #16]
 8021f64:	f107 0114 	add.w	r1, r7, #20
 8021f68:	f104 0914 	add.w	r9, r4, #20
 8021f6c:	f100 0e14 	add.w	lr, r0, #20
 8021f70:	f107 0210 	add.w	r2, r7, #16
 8021f74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8021f78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021f7c:	46f2      	mov	sl, lr
 8021f7e:	2700      	movs	r7, #0
 8021f80:	f859 3b04 	ldr.w	r3, [r9], #4
 8021f84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021f88:	fa1f f883 	uxth.w	r8, r3
 8021f8c:	fa17 f78b 	uxtah	r7, r7, fp
 8021f90:	0c1b      	lsrs	r3, r3, #16
 8021f92:	eba7 0808 	sub.w	r8, r7, r8
 8021f96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021f9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021f9e:	fa1f f888 	uxth.w	r8, r8
 8021fa2:	141f      	asrs	r7, r3, #16
 8021fa4:	454d      	cmp	r5, r9
 8021fa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021faa:	f84a 3b04 	str.w	r3, [sl], #4
 8021fae:	d8e7      	bhi.n	8021f80 <__mdiff+0x7c>
 8021fb0:	1b2b      	subs	r3, r5, r4
 8021fb2:	3b15      	subs	r3, #21
 8021fb4:	f023 0303 	bic.w	r3, r3, #3
 8021fb8:	3304      	adds	r3, #4
 8021fba:	3415      	adds	r4, #21
 8021fbc:	42a5      	cmp	r5, r4
 8021fbe:	bf38      	it	cc
 8021fc0:	2304      	movcc	r3, #4
 8021fc2:	4419      	add	r1, r3
 8021fc4:	4473      	add	r3, lr
 8021fc6:	469e      	mov	lr, r3
 8021fc8:	460d      	mov	r5, r1
 8021fca:	4565      	cmp	r5, ip
 8021fcc:	d30e      	bcc.n	8021fec <__mdiff+0xe8>
 8021fce:	f10c 0203 	add.w	r2, ip, #3
 8021fd2:	1a52      	subs	r2, r2, r1
 8021fd4:	f022 0203 	bic.w	r2, r2, #3
 8021fd8:	3903      	subs	r1, #3
 8021fda:	458c      	cmp	ip, r1
 8021fdc:	bf38      	it	cc
 8021fde:	2200      	movcc	r2, #0
 8021fe0:	441a      	add	r2, r3
 8021fe2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021fe6:	b17b      	cbz	r3, 8022008 <__mdiff+0x104>
 8021fe8:	6106      	str	r6, [r0, #16]
 8021fea:	e7a5      	b.n	8021f38 <__mdiff+0x34>
 8021fec:	f855 8b04 	ldr.w	r8, [r5], #4
 8021ff0:	fa17 f488 	uxtah	r4, r7, r8
 8021ff4:	1422      	asrs	r2, r4, #16
 8021ff6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8021ffa:	b2a4      	uxth	r4, r4
 8021ffc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022000:	f84e 4b04 	str.w	r4, [lr], #4
 8022004:	1417      	asrs	r7, r2, #16
 8022006:	e7e0      	b.n	8021fca <__mdiff+0xc6>
 8022008:	3e01      	subs	r6, #1
 802200a:	e7ea      	b.n	8021fe2 <__mdiff+0xde>
 802200c:	080272d0 	.word	0x080272d0
 8022010:	08027360 	.word	0x08027360

08022014 <__ulp>:
 8022014:	b082      	sub	sp, #8
 8022016:	ed8d 0b00 	vstr	d0, [sp]
 802201a:	9b01      	ldr	r3, [sp, #4]
 802201c:	4912      	ldr	r1, [pc, #72]	; (8022068 <__ulp+0x54>)
 802201e:	4019      	ands	r1, r3
 8022020:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022024:	2900      	cmp	r1, #0
 8022026:	dd05      	ble.n	8022034 <__ulp+0x20>
 8022028:	2200      	movs	r2, #0
 802202a:	460b      	mov	r3, r1
 802202c:	ec43 2b10 	vmov	d0, r2, r3
 8022030:	b002      	add	sp, #8
 8022032:	4770      	bx	lr
 8022034:	4249      	negs	r1, r1
 8022036:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802203a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802203e:	f04f 0200 	mov.w	r2, #0
 8022042:	f04f 0300 	mov.w	r3, #0
 8022046:	da04      	bge.n	8022052 <__ulp+0x3e>
 8022048:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802204c:	fa41 f300 	asr.w	r3, r1, r0
 8022050:	e7ec      	b.n	802202c <__ulp+0x18>
 8022052:	f1a0 0114 	sub.w	r1, r0, #20
 8022056:	291e      	cmp	r1, #30
 8022058:	bfda      	itte	le
 802205a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802205e:	fa20 f101 	lsrle.w	r1, r0, r1
 8022062:	2101      	movgt	r1, #1
 8022064:	460a      	mov	r2, r1
 8022066:	e7e1      	b.n	802202c <__ulp+0x18>
 8022068:	7ff00000 	.word	0x7ff00000

0802206c <__b2d>:
 802206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802206e:	6905      	ldr	r5, [r0, #16]
 8022070:	f100 0714 	add.w	r7, r0, #20
 8022074:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022078:	1f2e      	subs	r6, r5, #4
 802207a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802207e:	4620      	mov	r0, r4
 8022080:	f7ff fd52 	bl	8021b28 <__hi0bits>
 8022084:	f1c0 0320 	rsb	r3, r0, #32
 8022088:	280a      	cmp	r0, #10
 802208a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022108 <__b2d+0x9c>
 802208e:	600b      	str	r3, [r1, #0]
 8022090:	dc14      	bgt.n	80220bc <__b2d+0x50>
 8022092:	f1c0 0e0b 	rsb	lr, r0, #11
 8022096:	fa24 f10e 	lsr.w	r1, r4, lr
 802209a:	42b7      	cmp	r7, r6
 802209c:	ea41 030c 	orr.w	r3, r1, ip
 80220a0:	bf34      	ite	cc
 80220a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80220a6:	2100      	movcs	r1, #0
 80220a8:	3015      	adds	r0, #21
 80220aa:	fa04 f000 	lsl.w	r0, r4, r0
 80220ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80220b2:	ea40 0201 	orr.w	r2, r0, r1
 80220b6:	ec43 2b10 	vmov	d0, r2, r3
 80220ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220bc:	42b7      	cmp	r7, r6
 80220be:	bf3a      	itte	cc
 80220c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80220c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80220c8:	2100      	movcs	r1, #0
 80220ca:	380b      	subs	r0, #11
 80220cc:	d017      	beq.n	80220fe <__b2d+0x92>
 80220ce:	f1c0 0c20 	rsb	ip, r0, #32
 80220d2:	fa04 f500 	lsl.w	r5, r4, r0
 80220d6:	42be      	cmp	r6, r7
 80220d8:	fa21 f40c 	lsr.w	r4, r1, ip
 80220dc:	ea45 0504 	orr.w	r5, r5, r4
 80220e0:	bf8c      	ite	hi
 80220e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80220e6:	2400      	movls	r4, #0
 80220e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80220ec:	fa01 f000 	lsl.w	r0, r1, r0
 80220f0:	fa24 f40c 	lsr.w	r4, r4, ip
 80220f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80220f8:	ea40 0204 	orr.w	r2, r0, r4
 80220fc:	e7db      	b.n	80220b6 <__b2d+0x4a>
 80220fe:	ea44 030c 	orr.w	r3, r4, ip
 8022102:	460a      	mov	r2, r1
 8022104:	e7d7      	b.n	80220b6 <__b2d+0x4a>
 8022106:	bf00      	nop
 8022108:	3ff00000 	.word	0x3ff00000

0802210c <__d2b>:
 802210c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022110:	4689      	mov	r9, r1
 8022112:	2101      	movs	r1, #1
 8022114:	ec57 6b10 	vmov	r6, r7, d0
 8022118:	4690      	mov	r8, r2
 802211a:	f7ff fc0f 	bl	802193c <_Balloc>
 802211e:	4604      	mov	r4, r0
 8022120:	b930      	cbnz	r0, 8022130 <__d2b+0x24>
 8022122:	4602      	mov	r2, r0
 8022124:	4b25      	ldr	r3, [pc, #148]	; (80221bc <__d2b+0xb0>)
 8022126:	4826      	ldr	r0, [pc, #152]	; (80221c0 <__d2b+0xb4>)
 8022128:	f240 310a 	movw	r1, #778	; 0x30a
 802212c:	f7fe f8e0 	bl	80202f0 <__assert_func>
 8022130:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022134:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022138:	bb35      	cbnz	r5, 8022188 <__d2b+0x7c>
 802213a:	2e00      	cmp	r6, #0
 802213c:	9301      	str	r3, [sp, #4]
 802213e:	d028      	beq.n	8022192 <__d2b+0x86>
 8022140:	4668      	mov	r0, sp
 8022142:	9600      	str	r6, [sp, #0]
 8022144:	f7ff fd10 	bl	8021b68 <__lo0bits>
 8022148:	9900      	ldr	r1, [sp, #0]
 802214a:	b300      	cbz	r0, 802218e <__d2b+0x82>
 802214c:	9a01      	ldr	r2, [sp, #4]
 802214e:	f1c0 0320 	rsb	r3, r0, #32
 8022152:	fa02 f303 	lsl.w	r3, r2, r3
 8022156:	430b      	orrs	r3, r1
 8022158:	40c2      	lsrs	r2, r0
 802215a:	6163      	str	r3, [r4, #20]
 802215c:	9201      	str	r2, [sp, #4]
 802215e:	9b01      	ldr	r3, [sp, #4]
 8022160:	61a3      	str	r3, [r4, #24]
 8022162:	2b00      	cmp	r3, #0
 8022164:	bf14      	ite	ne
 8022166:	2202      	movne	r2, #2
 8022168:	2201      	moveq	r2, #1
 802216a:	6122      	str	r2, [r4, #16]
 802216c:	b1d5      	cbz	r5, 80221a4 <__d2b+0x98>
 802216e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022172:	4405      	add	r5, r0
 8022174:	f8c9 5000 	str.w	r5, [r9]
 8022178:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802217c:	f8c8 0000 	str.w	r0, [r8]
 8022180:	4620      	mov	r0, r4
 8022182:	b003      	add	sp, #12
 8022184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802218c:	e7d5      	b.n	802213a <__d2b+0x2e>
 802218e:	6161      	str	r1, [r4, #20]
 8022190:	e7e5      	b.n	802215e <__d2b+0x52>
 8022192:	a801      	add	r0, sp, #4
 8022194:	f7ff fce8 	bl	8021b68 <__lo0bits>
 8022198:	9b01      	ldr	r3, [sp, #4]
 802219a:	6163      	str	r3, [r4, #20]
 802219c:	2201      	movs	r2, #1
 802219e:	6122      	str	r2, [r4, #16]
 80221a0:	3020      	adds	r0, #32
 80221a2:	e7e3      	b.n	802216c <__d2b+0x60>
 80221a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80221a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80221ac:	f8c9 0000 	str.w	r0, [r9]
 80221b0:	6918      	ldr	r0, [r3, #16]
 80221b2:	f7ff fcb9 	bl	8021b28 <__hi0bits>
 80221b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80221ba:	e7df      	b.n	802217c <__d2b+0x70>
 80221bc:	080272d0 	.word	0x080272d0
 80221c0:	08027360 	.word	0x08027360

080221c4 <__ratio>:
 80221c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221c8:	4688      	mov	r8, r1
 80221ca:	4669      	mov	r1, sp
 80221cc:	4681      	mov	r9, r0
 80221ce:	f7ff ff4d 	bl	802206c <__b2d>
 80221d2:	a901      	add	r1, sp, #4
 80221d4:	4640      	mov	r0, r8
 80221d6:	ec55 4b10 	vmov	r4, r5, d0
 80221da:	f7ff ff47 	bl	802206c <__b2d>
 80221de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80221e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80221e6:	eba3 0c02 	sub.w	ip, r3, r2
 80221ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80221ee:	1a9b      	subs	r3, r3, r2
 80221f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80221f4:	ec51 0b10 	vmov	r0, r1, d0
 80221f8:	2b00      	cmp	r3, #0
 80221fa:	bfd6      	itet	le
 80221fc:	460a      	movle	r2, r1
 80221fe:	462a      	movgt	r2, r5
 8022200:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022204:	468b      	mov	fp, r1
 8022206:	462f      	mov	r7, r5
 8022208:	bfd4      	ite	le
 802220a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802220e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022212:	4620      	mov	r0, r4
 8022214:	ee10 2a10 	vmov	r2, s0
 8022218:	465b      	mov	r3, fp
 802221a:	4639      	mov	r1, r7
 802221c:	f7de fb16 	bl	800084c <__aeabi_ddiv>
 8022220:	ec41 0b10 	vmov	d0, r0, r1
 8022224:	b003      	add	sp, #12
 8022226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802222a <__copybits>:
 802222a:	3901      	subs	r1, #1
 802222c:	b570      	push	{r4, r5, r6, lr}
 802222e:	1149      	asrs	r1, r1, #5
 8022230:	6914      	ldr	r4, [r2, #16]
 8022232:	3101      	adds	r1, #1
 8022234:	f102 0314 	add.w	r3, r2, #20
 8022238:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802223c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022240:	1f05      	subs	r5, r0, #4
 8022242:	42a3      	cmp	r3, r4
 8022244:	d30c      	bcc.n	8022260 <__copybits+0x36>
 8022246:	1aa3      	subs	r3, r4, r2
 8022248:	3b11      	subs	r3, #17
 802224a:	f023 0303 	bic.w	r3, r3, #3
 802224e:	3211      	adds	r2, #17
 8022250:	42a2      	cmp	r2, r4
 8022252:	bf88      	it	hi
 8022254:	2300      	movhi	r3, #0
 8022256:	4418      	add	r0, r3
 8022258:	2300      	movs	r3, #0
 802225a:	4288      	cmp	r0, r1
 802225c:	d305      	bcc.n	802226a <__copybits+0x40>
 802225e:	bd70      	pop	{r4, r5, r6, pc}
 8022260:	f853 6b04 	ldr.w	r6, [r3], #4
 8022264:	f845 6f04 	str.w	r6, [r5, #4]!
 8022268:	e7eb      	b.n	8022242 <__copybits+0x18>
 802226a:	f840 3b04 	str.w	r3, [r0], #4
 802226e:	e7f4      	b.n	802225a <__copybits+0x30>

08022270 <__any_on>:
 8022270:	f100 0214 	add.w	r2, r0, #20
 8022274:	6900      	ldr	r0, [r0, #16]
 8022276:	114b      	asrs	r3, r1, #5
 8022278:	4298      	cmp	r0, r3
 802227a:	b510      	push	{r4, lr}
 802227c:	db11      	blt.n	80222a2 <__any_on+0x32>
 802227e:	dd0a      	ble.n	8022296 <__any_on+0x26>
 8022280:	f011 011f 	ands.w	r1, r1, #31
 8022284:	d007      	beq.n	8022296 <__any_on+0x26>
 8022286:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802228a:	fa24 f001 	lsr.w	r0, r4, r1
 802228e:	fa00 f101 	lsl.w	r1, r0, r1
 8022292:	428c      	cmp	r4, r1
 8022294:	d10b      	bne.n	80222ae <__any_on+0x3e>
 8022296:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802229a:	4293      	cmp	r3, r2
 802229c:	d803      	bhi.n	80222a6 <__any_on+0x36>
 802229e:	2000      	movs	r0, #0
 80222a0:	bd10      	pop	{r4, pc}
 80222a2:	4603      	mov	r3, r0
 80222a4:	e7f7      	b.n	8022296 <__any_on+0x26>
 80222a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80222aa:	2900      	cmp	r1, #0
 80222ac:	d0f5      	beq.n	802229a <__any_on+0x2a>
 80222ae:	2001      	movs	r0, #1
 80222b0:	e7f6      	b.n	80222a0 <__any_on+0x30>

080222b2 <_calloc_r>:
 80222b2:	b513      	push	{r0, r1, r4, lr}
 80222b4:	434a      	muls	r2, r1
 80222b6:	4611      	mov	r1, r2
 80222b8:	9201      	str	r2, [sp, #4]
 80222ba:	f7fc f8e3 	bl	801e484 <_malloc_r>
 80222be:	4604      	mov	r4, r0
 80222c0:	b118      	cbz	r0, 80222ca <_calloc_r+0x18>
 80222c2:	9a01      	ldr	r2, [sp, #4]
 80222c4:	2100      	movs	r1, #0
 80222c6:	f7fc f885 	bl	801e3d4 <memset>
 80222ca:	4620      	mov	r0, r4
 80222cc:	b002      	add	sp, #8
 80222ce:	bd10      	pop	{r4, pc}

080222d0 <__ssputs_r>:
 80222d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222d4:	688e      	ldr	r6, [r1, #8]
 80222d6:	429e      	cmp	r6, r3
 80222d8:	4682      	mov	sl, r0
 80222da:	460c      	mov	r4, r1
 80222dc:	4690      	mov	r8, r2
 80222de:	461f      	mov	r7, r3
 80222e0:	d838      	bhi.n	8022354 <__ssputs_r+0x84>
 80222e2:	898a      	ldrh	r2, [r1, #12]
 80222e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80222e8:	d032      	beq.n	8022350 <__ssputs_r+0x80>
 80222ea:	6825      	ldr	r5, [r4, #0]
 80222ec:	6909      	ldr	r1, [r1, #16]
 80222ee:	eba5 0901 	sub.w	r9, r5, r1
 80222f2:	6965      	ldr	r5, [r4, #20]
 80222f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80222f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80222fc:	3301      	adds	r3, #1
 80222fe:	444b      	add	r3, r9
 8022300:	106d      	asrs	r5, r5, #1
 8022302:	429d      	cmp	r5, r3
 8022304:	bf38      	it	cc
 8022306:	461d      	movcc	r5, r3
 8022308:	0553      	lsls	r3, r2, #21
 802230a:	d531      	bpl.n	8022370 <__ssputs_r+0xa0>
 802230c:	4629      	mov	r1, r5
 802230e:	f7fc f8b9 	bl	801e484 <_malloc_r>
 8022312:	4606      	mov	r6, r0
 8022314:	b950      	cbnz	r0, 802232c <__ssputs_r+0x5c>
 8022316:	230c      	movs	r3, #12
 8022318:	f8ca 3000 	str.w	r3, [sl]
 802231c:	89a3      	ldrh	r3, [r4, #12]
 802231e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022322:	81a3      	strh	r3, [r4, #12]
 8022324:	f04f 30ff 	mov.w	r0, #4294967295
 8022328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802232c:	6921      	ldr	r1, [r4, #16]
 802232e:	464a      	mov	r2, r9
 8022330:	f7fc f828 	bl	801e384 <memcpy>
 8022334:	89a3      	ldrh	r3, [r4, #12]
 8022336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802233a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802233e:	81a3      	strh	r3, [r4, #12]
 8022340:	6126      	str	r6, [r4, #16]
 8022342:	6165      	str	r5, [r4, #20]
 8022344:	444e      	add	r6, r9
 8022346:	eba5 0509 	sub.w	r5, r5, r9
 802234a:	6026      	str	r6, [r4, #0]
 802234c:	60a5      	str	r5, [r4, #8]
 802234e:	463e      	mov	r6, r7
 8022350:	42be      	cmp	r6, r7
 8022352:	d900      	bls.n	8022356 <__ssputs_r+0x86>
 8022354:	463e      	mov	r6, r7
 8022356:	4632      	mov	r2, r6
 8022358:	6820      	ldr	r0, [r4, #0]
 802235a:	4641      	mov	r1, r8
 802235c:	f7fc f820 	bl	801e3a0 <memmove>
 8022360:	68a3      	ldr	r3, [r4, #8]
 8022362:	6822      	ldr	r2, [r4, #0]
 8022364:	1b9b      	subs	r3, r3, r6
 8022366:	4432      	add	r2, r6
 8022368:	60a3      	str	r3, [r4, #8]
 802236a:	6022      	str	r2, [r4, #0]
 802236c:	2000      	movs	r0, #0
 802236e:	e7db      	b.n	8022328 <__ssputs_r+0x58>
 8022370:	462a      	mov	r2, r5
 8022372:	f000 ffc9 	bl	8023308 <_realloc_r>
 8022376:	4606      	mov	r6, r0
 8022378:	2800      	cmp	r0, #0
 802237a:	d1e1      	bne.n	8022340 <__ssputs_r+0x70>
 802237c:	6921      	ldr	r1, [r4, #16]
 802237e:	4650      	mov	r0, sl
 8022380:	f7fc f830 	bl	801e3e4 <_free_r>
 8022384:	e7c7      	b.n	8022316 <__ssputs_r+0x46>
	...

08022388 <_svfiprintf_r>:
 8022388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802238c:	4698      	mov	r8, r3
 802238e:	898b      	ldrh	r3, [r1, #12]
 8022390:	061b      	lsls	r3, r3, #24
 8022392:	b09d      	sub	sp, #116	; 0x74
 8022394:	4607      	mov	r7, r0
 8022396:	460d      	mov	r5, r1
 8022398:	4614      	mov	r4, r2
 802239a:	d50e      	bpl.n	80223ba <_svfiprintf_r+0x32>
 802239c:	690b      	ldr	r3, [r1, #16]
 802239e:	b963      	cbnz	r3, 80223ba <_svfiprintf_r+0x32>
 80223a0:	2140      	movs	r1, #64	; 0x40
 80223a2:	f7fc f86f 	bl	801e484 <_malloc_r>
 80223a6:	6028      	str	r0, [r5, #0]
 80223a8:	6128      	str	r0, [r5, #16]
 80223aa:	b920      	cbnz	r0, 80223b6 <_svfiprintf_r+0x2e>
 80223ac:	230c      	movs	r3, #12
 80223ae:	603b      	str	r3, [r7, #0]
 80223b0:	f04f 30ff 	mov.w	r0, #4294967295
 80223b4:	e0d1      	b.n	802255a <_svfiprintf_r+0x1d2>
 80223b6:	2340      	movs	r3, #64	; 0x40
 80223b8:	616b      	str	r3, [r5, #20]
 80223ba:	2300      	movs	r3, #0
 80223bc:	9309      	str	r3, [sp, #36]	; 0x24
 80223be:	2320      	movs	r3, #32
 80223c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80223c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80223c8:	2330      	movs	r3, #48	; 0x30
 80223ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022574 <_svfiprintf_r+0x1ec>
 80223ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80223d2:	f04f 0901 	mov.w	r9, #1
 80223d6:	4623      	mov	r3, r4
 80223d8:	469a      	mov	sl, r3
 80223da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80223de:	b10a      	cbz	r2, 80223e4 <_svfiprintf_r+0x5c>
 80223e0:	2a25      	cmp	r2, #37	; 0x25
 80223e2:	d1f9      	bne.n	80223d8 <_svfiprintf_r+0x50>
 80223e4:	ebba 0b04 	subs.w	fp, sl, r4
 80223e8:	d00b      	beq.n	8022402 <_svfiprintf_r+0x7a>
 80223ea:	465b      	mov	r3, fp
 80223ec:	4622      	mov	r2, r4
 80223ee:	4629      	mov	r1, r5
 80223f0:	4638      	mov	r0, r7
 80223f2:	f7ff ff6d 	bl	80222d0 <__ssputs_r>
 80223f6:	3001      	adds	r0, #1
 80223f8:	f000 80aa 	beq.w	8022550 <_svfiprintf_r+0x1c8>
 80223fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223fe:	445a      	add	r2, fp
 8022400:	9209      	str	r2, [sp, #36]	; 0x24
 8022402:	f89a 3000 	ldrb.w	r3, [sl]
 8022406:	2b00      	cmp	r3, #0
 8022408:	f000 80a2 	beq.w	8022550 <_svfiprintf_r+0x1c8>
 802240c:	2300      	movs	r3, #0
 802240e:	f04f 32ff 	mov.w	r2, #4294967295
 8022412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022416:	f10a 0a01 	add.w	sl, sl, #1
 802241a:	9304      	str	r3, [sp, #16]
 802241c:	9307      	str	r3, [sp, #28]
 802241e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022422:	931a      	str	r3, [sp, #104]	; 0x68
 8022424:	4654      	mov	r4, sl
 8022426:	2205      	movs	r2, #5
 8022428:	f814 1b01 	ldrb.w	r1, [r4], #1
 802242c:	4851      	ldr	r0, [pc, #324]	; (8022574 <_svfiprintf_r+0x1ec>)
 802242e:	f7dd fed7 	bl	80001e0 <memchr>
 8022432:	9a04      	ldr	r2, [sp, #16]
 8022434:	b9d8      	cbnz	r0, 802246e <_svfiprintf_r+0xe6>
 8022436:	06d0      	lsls	r0, r2, #27
 8022438:	bf44      	itt	mi
 802243a:	2320      	movmi	r3, #32
 802243c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022440:	0711      	lsls	r1, r2, #28
 8022442:	bf44      	itt	mi
 8022444:	232b      	movmi	r3, #43	; 0x2b
 8022446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802244a:	f89a 3000 	ldrb.w	r3, [sl]
 802244e:	2b2a      	cmp	r3, #42	; 0x2a
 8022450:	d015      	beq.n	802247e <_svfiprintf_r+0xf6>
 8022452:	9a07      	ldr	r2, [sp, #28]
 8022454:	4654      	mov	r4, sl
 8022456:	2000      	movs	r0, #0
 8022458:	f04f 0c0a 	mov.w	ip, #10
 802245c:	4621      	mov	r1, r4
 802245e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022462:	3b30      	subs	r3, #48	; 0x30
 8022464:	2b09      	cmp	r3, #9
 8022466:	d94e      	bls.n	8022506 <_svfiprintf_r+0x17e>
 8022468:	b1b0      	cbz	r0, 8022498 <_svfiprintf_r+0x110>
 802246a:	9207      	str	r2, [sp, #28]
 802246c:	e014      	b.n	8022498 <_svfiprintf_r+0x110>
 802246e:	eba0 0308 	sub.w	r3, r0, r8
 8022472:	fa09 f303 	lsl.w	r3, r9, r3
 8022476:	4313      	orrs	r3, r2
 8022478:	9304      	str	r3, [sp, #16]
 802247a:	46a2      	mov	sl, r4
 802247c:	e7d2      	b.n	8022424 <_svfiprintf_r+0x9c>
 802247e:	9b03      	ldr	r3, [sp, #12]
 8022480:	1d19      	adds	r1, r3, #4
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	9103      	str	r1, [sp, #12]
 8022486:	2b00      	cmp	r3, #0
 8022488:	bfbb      	ittet	lt
 802248a:	425b      	neglt	r3, r3
 802248c:	f042 0202 	orrlt.w	r2, r2, #2
 8022490:	9307      	strge	r3, [sp, #28]
 8022492:	9307      	strlt	r3, [sp, #28]
 8022494:	bfb8      	it	lt
 8022496:	9204      	strlt	r2, [sp, #16]
 8022498:	7823      	ldrb	r3, [r4, #0]
 802249a:	2b2e      	cmp	r3, #46	; 0x2e
 802249c:	d10c      	bne.n	80224b8 <_svfiprintf_r+0x130>
 802249e:	7863      	ldrb	r3, [r4, #1]
 80224a0:	2b2a      	cmp	r3, #42	; 0x2a
 80224a2:	d135      	bne.n	8022510 <_svfiprintf_r+0x188>
 80224a4:	9b03      	ldr	r3, [sp, #12]
 80224a6:	1d1a      	adds	r2, r3, #4
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	9203      	str	r2, [sp, #12]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	bfb8      	it	lt
 80224b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80224b4:	3402      	adds	r4, #2
 80224b6:	9305      	str	r3, [sp, #20]
 80224b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022584 <_svfiprintf_r+0x1fc>
 80224bc:	7821      	ldrb	r1, [r4, #0]
 80224be:	2203      	movs	r2, #3
 80224c0:	4650      	mov	r0, sl
 80224c2:	f7dd fe8d 	bl	80001e0 <memchr>
 80224c6:	b140      	cbz	r0, 80224da <_svfiprintf_r+0x152>
 80224c8:	2340      	movs	r3, #64	; 0x40
 80224ca:	eba0 000a 	sub.w	r0, r0, sl
 80224ce:	fa03 f000 	lsl.w	r0, r3, r0
 80224d2:	9b04      	ldr	r3, [sp, #16]
 80224d4:	4303      	orrs	r3, r0
 80224d6:	3401      	adds	r4, #1
 80224d8:	9304      	str	r3, [sp, #16]
 80224da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224de:	4826      	ldr	r0, [pc, #152]	; (8022578 <_svfiprintf_r+0x1f0>)
 80224e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80224e4:	2206      	movs	r2, #6
 80224e6:	f7dd fe7b 	bl	80001e0 <memchr>
 80224ea:	2800      	cmp	r0, #0
 80224ec:	d038      	beq.n	8022560 <_svfiprintf_r+0x1d8>
 80224ee:	4b23      	ldr	r3, [pc, #140]	; (802257c <_svfiprintf_r+0x1f4>)
 80224f0:	bb1b      	cbnz	r3, 802253a <_svfiprintf_r+0x1b2>
 80224f2:	9b03      	ldr	r3, [sp, #12]
 80224f4:	3307      	adds	r3, #7
 80224f6:	f023 0307 	bic.w	r3, r3, #7
 80224fa:	3308      	adds	r3, #8
 80224fc:	9303      	str	r3, [sp, #12]
 80224fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022500:	4433      	add	r3, r6
 8022502:	9309      	str	r3, [sp, #36]	; 0x24
 8022504:	e767      	b.n	80223d6 <_svfiprintf_r+0x4e>
 8022506:	fb0c 3202 	mla	r2, ip, r2, r3
 802250a:	460c      	mov	r4, r1
 802250c:	2001      	movs	r0, #1
 802250e:	e7a5      	b.n	802245c <_svfiprintf_r+0xd4>
 8022510:	2300      	movs	r3, #0
 8022512:	3401      	adds	r4, #1
 8022514:	9305      	str	r3, [sp, #20]
 8022516:	4619      	mov	r1, r3
 8022518:	f04f 0c0a 	mov.w	ip, #10
 802251c:	4620      	mov	r0, r4
 802251e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022522:	3a30      	subs	r2, #48	; 0x30
 8022524:	2a09      	cmp	r2, #9
 8022526:	d903      	bls.n	8022530 <_svfiprintf_r+0x1a8>
 8022528:	2b00      	cmp	r3, #0
 802252a:	d0c5      	beq.n	80224b8 <_svfiprintf_r+0x130>
 802252c:	9105      	str	r1, [sp, #20]
 802252e:	e7c3      	b.n	80224b8 <_svfiprintf_r+0x130>
 8022530:	fb0c 2101 	mla	r1, ip, r1, r2
 8022534:	4604      	mov	r4, r0
 8022536:	2301      	movs	r3, #1
 8022538:	e7f0      	b.n	802251c <_svfiprintf_r+0x194>
 802253a:	ab03      	add	r3, sp, #12
 802253c:	9300      	str	r3, [sp, #0]
 802253e:	462a      	mov	r2, r5
 8022540:	4b0f      	ldr	r3, [pc, #60]	; (8022580 <_svfiprintf_r+0x1f8>)
 8022542:	a904      	add	r1, sp, #16
 8022544:	4638      	mov	r0, r7
 8022546:	f7fc f897 	bl	801e678 <_printf_float>
 802254a:	1c42      	adds	r2, r0, #1
 802254c:	4606      	mov	r6, r0
 802254e:	d1d6      	bne.n	80224fe <_svfiprintf_r+0x176>
 8022550:	89ab      	ldrh	r3, [r5, #12]
 8022552:	065b      	lsls	r3, r3, #25
 8022554:	f53f af2c 	bmi.w	80223b0 <_svfiprintf_r+0x28>
 8022558:	9809      	ldr	r0, [sp, #36]	; 0x24
 802255a:	b01d      	add	sp, #116	; 0x74
 802255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022560:	ab03      	add	r3, sp, #12
 8022562:	9300      	str	r3, [sp, #0]
 8022564:	462a      	mov	r2, r5
 8022566:	4b06      	ldr	r3, [pc, #24]	; (8022580 <_svfiprintf_r+0x1f8>)
 8022568:	a904      	add	r1, sp, #16
 802256a:	4638      	mov	r0, r7
 802256c:	f7fc fb28 	bl	801ebc0 <_printf_i>
 8022570:	e7eb      	b.n	802254a <_svfiprintf_r+0x1c2>
 8022572:	bf00      	nop
 8022574:	080274bc 	.word	0x080274bc
 8022578:	080274c6 	.word	0x080274c6
 802257c:	0801e679 	.word	0x0801e679
 8022580:	080222d1 	.word	0x080222d1
 8022584:	080274c2 	.word	0x080274c2

08022588 <_sungetc_r>:
 8022588:	b538      	push	{r3, r4, r5, lr}
 802258a:	1c4b      	adds	r3, r1, #1
 802258c:	4614      	mov	r4, r2
 802258e:	d103      	bne.n	8022598 <_sungetc_r+0x10>
 8022590:	f04f 35ff 	mov.w	r5, #4294967295
 8022594:	4628      	mov	r0, r5
 8022596:	bd38      	pop	{r3, r4, r5, pc}
 8022598:	8993      	ldrh	r3, [r2, #12]
 802259a:	f023 0320 	bic.w	r3, r3, #32
 802259e:	8193      	strh	r3, [r2, #12]
 80225a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80225a2:	6852      	ldr	r2, [r2, #4]
 80225a4:	b2cd      	uxtb	r5, r1
 80225a6:	b18b      	cbz	r3, 80225cc <_sungetc_r+0x44>
 80225a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80225aa:	4293      	cmp	r3, r2
 80225ac:	dd08      	ble.n	80225c0 <_sungetc_r+0x38>
 80225ae:	6823      	ldr	r3, [r4, #0]
 80225b0:	1e5a      	subs	r2, r3, #1
 80225b2:	6022      	str	r2, [r4, #0]
 80225b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80225b8:	6863      	ldr	r3, [r4, #4]
 80225ba:	3301      	adds	r3, #1
 80225bc:	6063      	str	r3, [r4, #4]
 80225be:	e7e9      	b.n	8022594 <_sungetc_r+0xc>
 80225c0:	4621      	mov	r1, r4
 80225c2:	f000 fd2d 	bl	8023020 <__submore>
 80225c6:	2800      	cmp	r0, #0
 80225c8:	d0f1      	beq.n	80225ae <_sungetc_r+0x26>
 80225ca:	e7e1      	b.n	8022590 <_sungetc_r+0x8>
 80225cc:	6921      	ldr	r1, [r4, #16]
 80225ce:	6823      	ldr	r3, [r4, #0]
 80225d0:	b151      	cbz	r1, 80225e8 <_sungetc_r+0x60>
 80225d2:	4299      	cmp	r1, r3
 80225d4:	d208      	bcs.n	80225e8 <_sungetc_r+0x60>
 80225d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80225da:	42a9      	cmp	r1, r5
 80225dc:	d104      	bne.n	80225e8 <_sungetc_r+0x60>
 80225de:	3b01      	subs	r3, #1
 80225e0:	3201      	adds	r2, #1
 80225e2:	6023      	str	r3, [r4, #0]
 80225e4:	6062      	str	r2, [r4, #4]
 80225e6:	e7d5      	b.n	8022594 <_sungetc_r+0xc>
 80225e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80225ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225f0:	6363      	str	r3, [r4, #52]	; 0x34
 80225f2:	2303      	movs	r3, #3
 80225f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80225f6:	4623      	mov	r3, r4
 80225f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80225fc:	6023      	str	r3, [r4, #0]
 80225fe:	2301      	movs	r3, #1
 8022600:	e7dc      	b.n	80225bc <_sungetc_r+0x34>

08022602 <__ssrefill_r>:
 8022602:	b510      	push	{r4, lr}
 8022604:	460c      	mov	r4, r1
 8022606:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022608:	b169      	cbz	r1, 8022626 <__ssrefill_r+0x24>
 802260a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802260e:	4299      	cmp	r1, r3
 8022610:	d001      	beq.n	8022616 <__ssrefill_r+0x14>
 8022612:	f7fb fee7 	bl	801e3e4 <_free_r>
 8022616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022618:	6063      	str	r3, [r4, #4]
 802261a:	2000      	movs	r0, #0
 802261c:	6360      	str	r0, [r4, #52]	; 0x34
 802261e:	b113      	cbz	r3, 8022626 <__ssrefill_r+0x24>
 8022620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022622:	6023      	str	r3, [r4, #0]
 8022624:	bd10      	pop	{r4, pc}
 8022626:	6923      	ldr	r3, [r4, #16]
 8022628:	6023      	str	r3, [r4, #0]
 802262a:	2300      	movs	r3, #0
 802262c:	6063      	str	r3, [r4, #4]
 802262e:	89a3      	ldrh	r3, [r4, #12]
 8022630:	f043 0320 	orr.w	r3, r3, #32
 8022634:	81a3      	strh	r3, [r4, #12]
 8022636:	f04f 30ff 	mov.w	r0, #4294967295
 802263a:	e7f3      	b.n	8022624 <__ssrefill_r+0x22>

0802263c <__ssvfiscanf_r>:
 802263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022640:	460c      	mov	r4, r1
 8022642:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8022646:	2100      	movs	r1, #0
 8022648:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802264c:	49b2      	ldr	r1, [pc, #712]	; (8022918 <__ssvfiscanf_r+0x2dc>)
 802264e:	91a0      	str	r1, [sp, #640]	; 0x280
 8022650:	f10d 0804 	add.w	r8, sp, #4
 8022654:	49b1      	ldr	r1, [pc, #708]	; (802291c <__ssvfiscanf_r+0x2e0>)
 8022656:	4fb2      	ldr	r7, [pc, #712]	; (8022920 <__ssvfiscanf_r+0x2e4>)
 8022658:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8022924 <__ssvfiscanf_r+0x2e8>
 802265c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022660:	4606      	mov	r6, r0
 8022662:	91a1      	str	r1, [sp, #644]	; 0x284
 8022664:	9300      	str	r3, [sp, #0]
 8022666:	f892 a000 	ldrb.w	sl, [r2]
 802266a:	f1ba 0f00 	cmp.w	sl, #0
 802266e:	f000 8151 	beq.w	8022914 <__ssvfiscanf_r+0x2d8>
 8022672:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022676:	f013 0308 	ands.w	r3, r3, #8
 802267a:	f102 0501 	add.w	r5, r2, #1
 802267e:	d019      	beq.n	80226b4 <__ssvfiscanf_r+0x78>
 8022680:	6863      	ldr	r3, [r4, #4]
 8022682:	2b00      	cmp	r3, #0
 8022684:	dd0f      	ble.n	80226a6 <__ssvfiscanf_r+0x6a>
 8022686:	6823      	ldr	r3, [r4, #0]
 8022688:	781a      	ldrb	r2, [r3, #0]
 802268a:	5cba      	ldrb	r2, [r7, r2]
 802268c:	0712      	lsls	r2, r2, #28
 802268e:	d401      	bmi.n	8022694 <__ssvfiscanf_r+0x58>
 8022690:	462a      	mov	r2, r5
 8022692:	e7e8      	b.n	8022666 <__ssvfiscanf_r+0x2a>
 8022694:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022696:	3201      	adds	r2, #1
 8022698:	9245      	str	r2, [sp, #276]	; 0x114
 802269a:	6862      	ldr	r2, [r4, #4]
 802269c:	3301      	adds	r3, #1
 802269e:	3a01      	subs	r2, #1
 80226a0:	6062      	str	r2, [r4, #4]
 80226a2:	6023      	str	r3, [r4, #0]
 80226a4:	e7ec      	b.n	8022680 <__ssvfiscanf_r+0x44>
 80226a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80226a8:	4621      	mov	r1, r4
 80226aa:	4630      	mov	r0, r6
 80226ac:	4798      	blx	r3
 80226ae:	2800      	cmp	r0, #0
 80226b0:	d0e9      	beq.n	8022686 <__ssvfiscanf_r+0x4a>
 80226b2:	e7ed      	b.n	8022690 <__ssvfiscanf_r+0x54>
 80226b4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80226b8:	f040 8083 	bne.w	80227c2 <__ssvfiscanf_r+0x186>
 80226bc:	9341      	str	r3, [sp, #260]	; 0x104
 80226be:	9343      	str	r3, [sp, #268]	; 0x10c
 80226c0:	7853      	ldrb	r3, [r2, #1]
 80226c2:	2b2a      	cmp	r3, #42	; 0x2a
 80226c4:	bf02      	ittt	eq
 80226c6:	2310      	moveq	r3, #16
 80226c8:	1c95      	addeq	r5, r2, #2
 80226ca:	9341      	streq	r3, [sp, #260]	; 0x104
 80226cc:	220a      	movs	r2, #10
 80226ce:	46ab      	mov	fp, r5
 80226d0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80226d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80226d8:	2b09      	cmp	r3, #9
 80226da:	d91d      	bls.n	8022718 <__ssvfiscanf_r+0xdc>
 80226dc:	4891      	ldr	r0, [pc, #580]	; (8022924 <__ssvfiscanf_r+0x2e8>)
 80226de:	2203      	movs	r2, #3
 80226e0:	f7dd fd7e 	bl	80001e0 <memchr>
 80226e4:	b140      	cbz	r0, 80226f8 <__ssvfiscanf_r+0xbc>
 80226e6:	2301      	movs	r3, #1
 80226e8:	eba0 0009 	sub.w	r0, r0, r9
 80226ec:	fa03 f000 	lsl.w	r0, r3, r0
 80226f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80226f2:	4318      	orrs	r0, r3
 80226f4:	9041      	str	r0, [sp, #260]	; 0x104
 80226f6:	465d      	mov	r5, fp
 80226f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80226fc:	2b78      	cmp	r3, #120	; 0x78
 80226fe:	d806      	bhi.n	802270e <__ssvfiscanf_r+0xd2>
 8022700:	2b57      	cmp	r3, #87	; 0x57
 8022702:	d810      	bhi.n	8022726 <__ssvfiscanf_r+0xea>
 8022704:	2b25      	cmp	r3, #37	; 0x25
 8022706:	d05c      	beq.n	80227c2 <__ssvfiscanf_r+0x186>
 8022708:	d856      	bhi.n	80227b8 <__ssvfiscanf_r+0x17c>
 802270a:	2b00      	cmp	r3, #0
 802270c:	d074      	beq.n	80227f8 <__ssvfiscanf_r+0x1bc>
 802270e:	2303      	movs	r3, #3
 8022710:	9347      	str	r3, [sp, #284]	; 0x11c
 8022712:	230a      	movs	r3, #10
 8022714:	9342      	str	r3, [sp, #264]	; 0x108
 8022716:	e081      	b.n	802281c <__ssvfiscanf_r+0x1e0>
 8022718:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802271a:	fb02 1303 	mla	r3, r2, r3, r1
 802271e:	3b30      	subs	r3, #48	; 0x30
 8022720:	9343      	str	r3, [sp, #268]	; 0x10c
 8022722:	465d      	mov	r5, fp
 8022724:	e7d3      	b.n	80226ce <__ssvfiscanf_r+0x92>
 8022726:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802272a:	2a20      	cmp	r2, #32
 802272c:	d8ef      	bhi.n	802270e <__ssvfiscanf_r+0xd2>
 802272e:	a101      	add	r1, pc, #4	; (adr r1, 8022734 <__ssvfiscanf_r+0xf8>)
 8022730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022734:	08022807 	.word	0x08022807
 8022738:	0802270f 	.word	0x0802270f
 802273c:	0802270f 	.word	0x0802270f
 8022740:	08022865 	.word	0x08022865
 8022744:	0802270f 	.word	0x0802270f
 8022748:	0802270f 	.word	0x0802270f
 802274c:	0802270f 	.word	0x0802270f
 8022750:	0802270f 	.word	0x0802270f
 8022754:	0802270f 	.word	0x0802270f
 8022758:	0802270f 	.word	0x0802270f
 802275c:	0802270f 	.word	0x0802270f
 8022760:	0802287b 	.word	0x0802287b
 8022764:	08022851 	.word	0x08022851
 8022768:	080227bf 	.word	0x080227bf
 802276c:	080227bf 	.word	0x080227bf
 8022770:	080227bf 	.word	0x080227bf
 8022774:	0802270f 	.word	0x0802270f
 8022778:	08022855 	.word	0x08022855
 802277c:	0802270f 	.word	0x0802270f
 8022780:	0802270f 	.word	0x0802270f
 8022784:	0802270f 	.word	0x0802270f
 8022788:	0802270f 	.word	0x0802270f
 802278c:	0802288b 	.word	0x0802288b
 8022790:	0802285d 	.word	0x0802285d
 8022794:	080227ff 	.word	0x080227ff
 8022798:	0802270f 	.word	0x0802270f
 802279c:	0802270f 	.word	0x0802270f
 80227a0:	08022887 	.word	0x08022887
 80227a4:	0802270f 	.word	0x0802270f
 80227a8:	08022851 	.word	0x08022851
 80227ac:	0802270f 	.word	0x0802270f
 80227b0:	0802270f 	.word	0x0802270f
 80227b4:	08022807 	.word	0x08022807
 80227b8:	3b45      	subs	r3, #69	; 0x45
 80227ba:	2b02      	cmp	r3, #2
 80227bc:	d8a7      	bhi.n	802270e <__ssvfiscanf_r+0xd2>
 80227be:	2305      	movs	r3, #5
 80227c0:	e02b      	b.n	802281a <__ssvfiscanf_r+0x1de>
 80227c2:	6863      	ldr	r3, [r4, #4]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	dd0d      	ble.n	80227e4 <__ssvfiscanf_r+0x1a8>
 80227c8:	6823      	ldr	r3, [r4, #0]
 80227ca:	781a      	ldrb	r2, [r3, #0]
 80227cc:	4552      	cmp	r2, sl
 80227ce:	f040 80a1 	bne.w	8022914 <__ssvfiscanf_r+0x2d8>
 80227d2:	3301      	adds	r3, #1
 80227d4:	6862      	ldr	r2, [r4, #4]
 80227d6:	6023      	str	r3, [r4, #0]
 80227d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80227da:	3a01      	subs	r2, #1
 80227dc:	3301      	adds	r3, #1
 80227de:	6062      	str	r2, [r4, #4]
 80227e0:	9345      	str	r3, [sp, #276]	; 0x114
 80227e2:	e755      	b.n	8022690 <__ssvfiscanf_r+0x54>
 80227e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80227e6:	4621      	mov	r1, r4
 80227e8:	4630      	mov	r0, r6
 80227ea:	4798      	blx	r3
 80227ec:	2800      	cmp	r0, #0
 80227ee:	d0eb      	beq.n	80227c8 <__ssvfiscanf_r+0x18c>
 80227f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80227f2:	2800      	cmp	r0, #0
 80227f4:	f040 8084 	bne.w	8022900 <__ssvfiscanf_r+0x2c4>
 80227f8:	f04f 30ff 	mov.w	r0, #4294967295
 80227fc:	e086      	b.n	802290c <__ssvfiscanf_r+0x2d0>
 80227fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022800:	f042 0220 	orr.w	r2, r2, #32
 8022804:	9241      	str	r2, [sp, #260]	; 0x104
 8022806:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802280c:	9241      	str	r2, [sp, #260]	; 0x104
 802280e:	2210      	movs	r2, #16
 8022810:	2b6f      	cmp	r3, #111	; 0x6f
 8022812:	9242      	str	r2, [sp, #264]	; 0x108
 8022814:	bf34      	ite	cc
 8022816:	2303      	movcc	r3, #3
 8022818:	2304      	movcs	r3, #4
 802281a:	9347      	str	r3, [sp, #284]	; 0x11c
 802281c:	6863      	ldr	r3, [r4, #4]
 802281e:	2b00      	cmp	r3, #0
 8022820:	dd41      	ble.n	80228a6 <__ssvfiscanf_r+0x26a>
 8022822:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022824:	0659      	lsls	r1, r3, #25
 8022826:	d404      	bmi.n	8022832 <__ssvfiscanf_r+0x1f6>
 8022828:	6823      	ldr	r3, [r4, #0]
 802282a:	781a      	ldrb	r2, [r3, #0]
 802282c:	5cba      	ldrb	r2, [r7, r2]
 802282e:	0712      	lsls	r2, r2, #28
 8022830:	d440      	bmi.n	80228b4 <__ssvfiscanf_r+0x278>
 8022832:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022834:	2b02      	cmp	r3, #2
 8022836:	dc4f      	bgt.n	80228d8 <__ssvfiscanf_r+0x29c>
 8022838:	466b      	mov	r3, sp
 802283a:	4622      	mov	r2, r4
 802283c:	a941      	add	r1, sp, #260	; 0x104
 802283e:	4630      	mov	r0, r6
 8022840:	f000 f9ce 	bl	8022be0 <_scanf_chars>
 8022844:	2801      	cmp	r0, #1
 8022846:	d065      	beq.n	8022914 <__ssvfiscanf_r+0x2d8>
 8022848:	2802      	cmp	r0, #2
 802284a:	f47f af21 	bne.w	8022690 <__ssvfiscanf_r+0x54>
 802284e:	e7cf      	b.n	80227f0 <__ssvfiscanf_r+0x1b4>
 8022850:	220a      	movs	r2, #10
 8022852:	e7dd      	b.n	8022810 <__ssvfiscanf_r+0x1d4>
 8022854:	2300      	movs	r3, #0
 8022856:	9342      	str	r3, [sp, #264]	; 0x108
 8022858:	2303      	movs	r3, #3
 802285a:	e7de      	b.n	802281a <__ssvfiscanf_r+0x1de>
 802285c:	2308      	movs	r3, #8
 802285e:	9342      	str	r3, [sp, #264]	; 0x108
 8022860:	2304      	movs	r3, #4
 8022862:	e7da      	b.n	802281a <__ssvfiscanf_r+0x1de>
 8022864:	4629      	mov	r1, r5
 8022866:	4640      	mov	r0, r8
 8022868:	f000 fb22 	bl	8022eb0 <__sccl>
 802286c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802286e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022872:	9341      	str	r3, [sp, #260]	; 0x104
 8022874:	4605      	mov	r5, r0
 8022876:	2301      	movs	r3, #1
 8022878:	e7cf      	b.n	802281a <__ssvfiscanf_r+0x1de>
 802287a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802287c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022880:	9341      	str	r3, [sp, #260]	; 0x104
 8022882:	2300      	movs	r3, #0
 8022884:	e7c9      	b.n	802281a <__ssvfiscanf_r+0x1de>
 8022886:	2302      	movs	r3, #2
 8022888:	e7c7      	b.n	802281a <__ssvfiscanf_r+0x1de>
 802288a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802288c:	06c3      	lsls	r3, r0, #27
 802288e:	f53f aeff 	bmi.w	8022690 <__ssvfiscanf_r+0x54>
 8022892:	9b00      	ldr	r3, [sp, #0]
 8022894:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022896:	1d19      	adds	r1, r3, #4
 8022898:	9100      	str	r1, [sp, #0]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	07c0      	lsls	r0, r0, #31
 802289e:	bf4c      	ite	mi
 80228a0:	801a      	strhmi	r2, [r3, #0]
 80228a2:	601a      	strpl	r2, [r3, #0]
 80228a4:	e6f4      	b.n	8022690 <__ssvfiscanf_r+0x54>
 80228a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80228a8:	4621      	mov	r1, r4
 80228aa:	4630      	mov	r0, r6
 80228ac:	4798      	blx	r3
 80228ae:	2800      	cmp	r0, #0
 80228b0:	d0b7      	beq.n	8022822 <__ssvfiscanf_r+0x1e6>
 80228b2:	e79d      	b.n	80227f0 <__ssvfiscanf_r+0x1b4>
 80228b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80228b6:	3201      	adds	r2, #1
 80228b8:	9245      	str	r2, [sp, #276]	; 0x114
 80228ba:	6862      	ldr	r2, [r4, #4]
 80228bc:	3a01      	subs	r2, #1
 80228be:	2a00      	cmp	r2, #0
 80228c0:	6062      	str	r2, [r4, #4]
 80228c2:	dd02      	ble.n	80228ca <__ssvfiscanf_r+0x28e>
 80228c4:	3301      	adds	r3, #1
 80228c6:	6023      	str	r3, [r4, #0]
 80228c8:	e7ae      	b.n	8022828 <__ssvfiscanf_r+0x1ec>
 80228ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80228cc:	4621      	mov	r1, r4
 80228ce:	4630      	mov	r0, r6
 80228d0:	4798      	blx	r3
 80228d2:	2800      	cmp	r0, #0
 80228d4:	d0a8      	beq.n	8022828 <__ssvfiscanf_r+0x1ec>
 80228d6:	e78b      	b.n	80227f0 <__ssvfiscanf_r+0x1b4>
 80228d8:	2b04      	cmp	r3, #4
 80228da:	dc06      	bgt.n	80228ea <__ssvfiscanf_r+0x2ae>
 80228dc:	466b      	mov	r3, sp
 80228de:	4622      	mov	r2, r4
 80228e0:	a941      	add	r1, sp, #260	; 0x104
 80228e2:	4630      	mov	r0, r6
 80228e4:	f000 f9d4 	bl	8022c90 <_scanf_i>
 80228e8:	e7ac      	b.n	8022844 <__ssvfiscanf_r+0x208>
 80228ea:	4b0f      	ldr	r3, [pc, #60]	; (8022928 <__ssvfiscanf_r+0x2ec>)
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	f43f aecf 	beq.w	8022690 <__ssvfiscanf_r+0x54>
 80228f2:	466b      	mov	r3, sp
 80228f4:	4622      	mov	r2, r4
 80228f6:	a941      	add	r1, sp, #260	; 0x104
 80228f8:	4630      	mov	r0, r6
 80228fa:	f7fc fa87 	bl	801ee0c <_scanf_float>
 80228fe:	e7a1      	b.n	8022844 <__ssvfiscanf_r+0x208>
 8022900:	89a3      	ldrh	r3, [r4, #12]
 8022902:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022906:	bf18      	it	ne
 8022908:	f04f 30ff 	movne.w	r0, #4294967295
 802290c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022914:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022916:	e7f9      	b.n	802290c <__ssvfiscanf_r+0x2d0>
 8022918:	08022589 	.word	0x08022589
 802291c:	08022603 	.word	0x08022603
 8022920:	08026fbd 	.word	0x08026fbd
 8022924:	080274c2 	.word	0x080274c2
 8022928:	0801ee0d 	.word	0x0801ee0d

0802292c <__sfputc_r>:
 802292c:	6893      	ldr	r3, [r2, #8]
 802292e:	3b01      	subs	r3, #1
 8022930:	2b00      	cmp	r3, #0
 8022932:	b410      	push	{r4}
 8022934:	6093      	str	r3, [r2, #8]
 8022936:	da08      	bge.n	802294a <__sfputc_r+0x1e>
 8022938:	6994      	ldr	r4, [r2, #24]
 802293a:	42a3      	cmp	r3, r4
 802293c:	db01      	blt.n	8022942 <__sfputc_r+0x16>
 802293e:	290a      	cmp	r1, #10
 8022940:	d103      	bne.n	802294a <__sfputc_r+0x1e>
 8022942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022946:	f000 bba5 	b.w	8023094 <__swbuf_r>
 802294a:	6813      	ldr	r3, [r2, #0]
 802294c:	1c58      	adds	r0, r3, #1
 802294e:	6010      	str	r0, [r2, #0]
 8022950:	7019      	strb	r1, [r3, #0]
 8022952:	4608      	mov	r0, r1
 8022954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022958:	4770      	bx	lr

0802295a <__sfputs_r>:
 802295a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802295c:	4606      	mov	r6, r0
 802295e:	460f      	mov	r7, r1
 8022960:	4614      	mov	r4, r2
 8022962:	18d5      	adds	r5, r2, r3
 8022964:	42ac      	cmp	r4, r5
 8022966:	d101      	bne.n	802296c <__sfputs_r+0x12>
 8022968:	2000      	movs	r0, #0
 802296a:	e007      	b.n	802297c <__sfputs_r+0x22>
 802296c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022970:	463a      	mov	r2, r7
 8022972:	4630      	mov	r0, r6
 8022974:	f7ff ffda 	bl	802292c <__sfputc_r>
 8022978:	1c43      	adds	r3, r0, #1
 802297a:	d1f3      	bne.n	8022964 <__sfputs_r+0xa>
 802297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022980 <_vfiprintf_r>:
 8022980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022984:	460d      	mov	r5, r1
 8022986:	b09d      	sub	sp, #116	; 0x74
 8022988:	4614      	mov	r4, r2
 802298a:	4698      	mov	r8, r3
 802298c:	4606      	mov	r6, r0
 802298e:	b118      	cbz	r0, 8022998 <_vfiprintf_r+0x18>
 8022990:	6983      	ldr	r3, [r0, #24]
 8022992:	b90b      	cbnz	r3, 8022998 <_vfiprintf_r+0x18>
 8022994:	f7fb fc1e 	bl	801e1d4 <__sinit>
 8022998:	4b89      	ldr	r3, [pc, #548]	; (8022bc0 <_vfiprintf_r+0x240>)
 802299a:	429d      	cmp	r5, r3
 802299c:	d11b      	bne.n	80229d6 <_vfiprintf_r+0x56>
 802299e:	6875      	ldr	r5, [r6, #4]
 80229a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229a2:	07d9      	lsls	r1, r3, #31
 80229a4:	d405      	bmi.n	80229b2 <_vfiprintf_r+0x32>
 80229a6:	89ab      	ldrh	r3, [r5, #12]
 80229a8:	059a      	lsls	r2, r3, #22
 80229aa:	d402      	bmi.n	80229b2 <_vfiprintf_r+0x32>
 80229ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229ae:	f7e4 fae7 	bl	8006f80 <__retarget_lock_acquire_recursive>
 80229b2:	89ab      	ldrh	r3, [r5, #12]
 80229b4:	071b      	lsls	r3, r3, #28
 80229b6:	d501      	bpl.n	80229bc <_vfiprintf_r+0x3c>
 80229b8:	692b      	ldr	r3, [r5, #16]
 80229ba:	b9eb      	cbnz	r3, 80229f8 <_vfiprintf_r+0x78>
 80229bc:	4629      	mov	r1, r5
 80229be:	4630      	mov	r0, r6
 80229c0:	f000 fbc8 	bl	8023154 <__swsetup_r>
 80229c4:	b1c0      	cbz	r0, 80229f8 <_vfiprintf_r+0x78>
 80229c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229c8:	07dc      	lsls	r4, r3, #31
 80229ca:	d50e      	bpl.n	80229ea <_vfiprintf_r+0x6a>
 80229cc:	f04f 30ff 	mov.w	r0, #4294967295
 80229d0:	b01d      	add	sp, #116	; 0x74
 80229d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229d6:	4b7b      	ldr	r3, [pc, #492]	; (8022bc4 <_vfiprintf_r+0x244>)
 80229d8:	429d      	cmp	r5, r3
 80229da:	d101      	bne.n	80229e0 <_vfiprintf_r+0x60>
 80229dc:	68b5      	ldr	r5, [r6, #8]
 80229de:	e7df      	b.n	80229a0 <_vfiprintf_r+0x20>
 80229e0:	4b79      	ldr	r3, [pc, #484]	; (8022bc8 <_vfiprintf_r+0x248>)
 80229e2:	429d      	cmp	r5, r3
 80229e4:	bf08      	it	eq
 80229e6:	68f5      	ldreq	r5, [r6, #12]
 80229e8:	e7da      	b.n	80229a0 <_vfiprintf_r+0x20>
 80229ea:	89ab      	ldrh	r3, [r5, #12]
 80229ec:	0598      	lsls	r0, r3, #22
 80229ee:	d4ed      	bmi.n	80229cc <_vfiprintf_r+0x4c>
 80229f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229f2:	f7e4 fad9 	bl	8006fa8 <__retarget_lock_release_recursive>
 80229f6:	e7e9      	b.n	80229cc <_vfiprintf_r+0x4c>
 80229f8:	2300      	movs	r3, #0
 80229fa:	9309      	str	r3, [sp, #36]	; 0x24
 80229fc:	2320      	movs	r3, #32
 80229fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a06:	2330      	movs	r3, #48	; 0x30
 8022a08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022bcc <_vfiprintf_r+0x24c>
 8022a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a10:	f04f 0901 	mov.w	r9, #1
 8022a14:	4623      	mov	r3, r4
 8022a16:	469a      	mov	sl, r3
 8022a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a1c:	b10a      	cbz	r2, 8022a22 <_vfiprintf_r+0xa2>
 8022a1e:	2a25      	cmp	r2, #37	; 0x25
 8022a20:	d1f9      	bne.n	8022a16 <_vfiprintf_r+0x96>
 8022a22:	ebba 0b04 	subs.w	fp, sl, r4
 8022a26:	d00b      	beq.n	8022a40 <_vfiprintf_r+0xc0>
 8022a28:	465b      	mov	r3, fp
 8022a2a:	4622      	mov	r2, r4
 8022a2c:	4629      	mov	r1, r5
 8022a2e:	4630      	mov	r0, r6
 8022a30:	f7ff ff93 	bl	802295a <__sfputs_r>
 8022a34:	3001      	adds	r0, #1
 8022a36:	f000 80aa 	beq.w	8022b8e <_vfiprintf_r+0x20e>
 8022a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a3c:	445a      	add	r2, fp
 8022a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8022a40:	f89a 3000 	ldrb.w	r3, [sl]
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	f000 80a2 	beq.w	8022b8e <_vfiprintf_r+0x20e>
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8022a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a54:	f10a 0a01 	add.w	sl, sl, #1
 8022a58:	9304      	str	r3, [sp, #16]
 8022a5a:	9307      	str	r3, [sp, #28]
 8022a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022a60:	931a      	str	r3, [sp, #104]	; 0x68
 8022a62:	4654      	mov	r4, sl
 8022a64:	2205      	movs	r2, #5
 8022a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a6a:	4858      	ldr	r0, [pc, #352]	; (8022bcc <_vfiprintf_r+0x24c>)
 8022a6c:	f7dd fbb8 	bl	80001e0 <memchr>
 8022a70:	9a04      	ldr	r2, [sp, #16]
 8022a72:	b9d8      	cbnz	r0, 8022aac <_vfiprintf_r+0x12c>
 8022a74:	06d1      	lsls	r1, r2, #27
 8022a76:	bf44      	itt	mi
 8022a78:	2320      	movmi	r3, #32
 8022a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a7e:	0713      	lsls	r3, r2, #28
 8022a80:	bf44      	itt	mi
 8022a82:	232b      	movmi	r3, #43	; 0x2b
 8022a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a88:	f89a 3000 	ldrb.w	r3, [sl]
 8022a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8022a8e:	d015      	beq.n	8022abc <_vfiprintf_r+0x13c>
 8022a90:	9a07      	ldr	r2, [sp, #28]
 8022a92:	4654      	mov	r4, sl
 8022a94:	2000      	movs	r0, #0
 8022a96:	f04f 0c0a 	mov.w	ip, #10
 8022a9a:	4621      	mov	r1, r4
 8022a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022aa0:	3b30      	subs	r3, #48	; 0x30
 8022aa2:	2b09      	cmp	r3, #9
 8022aa4:	d94e      	bls.n	8022b44 <_vfiprintf_r+0x1c4>
 8022aa6:	b1b0      	cbz	r0, 8022ad6 <_vfiprintf_r+0x156>
 8022aa8:	9207      	str	r2, [sp, #28]
 8022aaa:	e014      	b.n	8022ad6 <_vfiprintf_r+0x156>
 8022aac:	eba0 0308 	sub.w	r3, r0, r8
 8022ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8022ab4:	4313      	orrs	r3, r2
 8022ab6:	9304      	str	r3, [sp, #16]
 8022ab8:	46a2      	mov	sl, r4
 8022aba:	e7d2      	b.n	8022a62 <_vfiprintf_r+0xe2>
 8022abc:	9b03      	ldr	r3, [sp, #12]
 8022abe:	1d19      	adds	r1, r3, #4
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	9103      	str	r1, [sp, #12]
 8022ac4:	2b00      	cmp	r3, #0
 8022ac6:	bfbb      	ittet	lt
 8022ac8:	425b      	neglt	r3, r3
 8022aca:	f042 0202 	orrlt.w	r2, r2, #2
 8022ace:	9307      	strge	r3, [sp, #28]
 8022ad0:	9307      	strlt	r3, [sp, #28]
 8022ad2:	bfb8      	it	lt
 8022ad4:	9204      	strlt	r2, [sp, #16]
 8022ad6:	7823      	ldrb	r3, [r4, #0]
 8022ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8022ada:	d10c      	bne.n	8022af6 <_vfiprintf_r+0x176>
 8022adc:	7863      	ldrb	r3, [r4, #1]
 8022ade:	2b2a      	cmp	r3, #42	; 0x2a
 8022ae0:	d135      	bne.n	8022b4e <_vfiprintf_r+0x1ce>
 8022ae2:	9b03      	ldr	r3, [sp, #12]
 8022ae4:	1d1a      	adds	r2, r3, #4
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	9203      	str	r2, [sp, #12]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	bfb8      	it	lt
 8022aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8022af2:	3402      	adds	r4, #2
 8022af4:	9305      	str	r3, [sp, #20]
 8022af6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022bdc <_vfiprintf_r+0x25c>
 8022afa:	7821      	ldrb	r1, [r4, #0]
 8022afc:	2203      	movs	r2, #3
 8022afe:	4650      	mov	r0, sl
 8022b00:	f7dd fb6e 	bl	80001e0 <memchr>
 8022b04:	b140      	cbz	r0, 8022b18 <_vfiprintf_r+0x198>
 8022b06:	2340      	movs	r3, #64	; 0x40
 8022b08:	eba0 000a 	sub.w	r0, r0, sl
 8022b0c:	fa03 f000 	lsl.w	r0, r3, r0
 8022b10:	9b04      	ldr	r3, [sp, #16]
 8022b12:	4303      	orrs	r3, r0
 8022b14:	3401      	adds	r4, #1
 8022b16:	9304      	str	r3, [sp, #16]
 8022b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b1c:	482c      	ldr	r0, [pc, #176]	; (8022bd0 <_vfiprintf_r+0x250>)
 8022b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022b22:	2206      	movs	r2, #6
 8022b24:	f7dd fb5c 	bl	80001e0 <memchr>
 8022b28:	2800      	cmp	r0, #0
 8022b2a:	d03f      	beq.n	8022bac <_vfiprintf_r+0x22c>
 8022b2c:	4b29      	ldr	r3, [pc, #164]	; (8022bd4 <_vfiprintf_r+0x254>)
 8022b2e:	bb1b      	cbnz	r3, 8022b78 <_vfiprintf_r+0x1f8>
 8022b30:	9b03      	ldr	r3, [sp, #12]
 8022b32:	3307      	adds	r3, #7
 8022b34:	f023 0307 	bic.w	r3, r3, #7
 8022b38:	3308      	adds	r3, #8
 8022b3a:	9303      	str	r3, [sp, #12]
 8022b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b3e:	443b      	add	r3, r7
 8022b40:	9309      	str	r3, [sp, #36]	; 0x24
 8022b42:	e767      	b.n	8022a14 <_vfiprintf_r+0x94>
 8022b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b48:	460c      	mov	r4, r1
 8022b4a:	2001      	movs	r0, #1
 8022b4c:	e7a5      	b.n	8022a9a <_vfiprintf_r+0x11a>
 8022b4e:	2300      	movs	r3, #0
 8022b50:	3401      	adds	r4, #1
 8022b52:	9305      	str	r3, [sp, #20]
 8022b54:	4619      	mov	r1, r3
 8022b56:	f04f 0c0a 	mov.w	ip, #10
 8022b5a:	4620      	mov	r0, r4
 8022b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b60:	3a30      	subs	r2, #48	; 0x30
 8022b62:	2a09      	cmp	r2, #9
 8022b64:	d903      	bls.n	8022b6e <_vfiprintf_r+0x1ee>
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d0c5      	beq.n	8022af6 <_vfiprintf_r+0x176>
 8022b6a:	9105      	str	r1, [sp, #20]
 8022b6c:	e7c3      	b.n	8022af6 <_vfiprintf_r+0x176>
 8022b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b72:	4604      	mov	r4, r0
 8022b74:	2301      	movs	r3, #1
 8022b76:	e7f0      	b.n	8022b5a <_vfiprintf_r+0x1da>
 8022b78:	ab03      	add	r3, sp, #12
 8022b7a:	9300      	str	r3, [sp, #0]
 8022b7c:	462a      	mov	r2, r5
 8022b7e:	4b16      	ldr	r3, [pc, #88]	; (8022bd8 <_vfiprintf_r+0x258>)
 8022b80:	a904      	add	r1, sp, #16
 8022b82:	4630      	mov	r0, r6
 8022b84:	f7fb fd78 	bl	801e678 <_printf_float>
 8022b88:	4607      	mov	r7, r0
 8022b8a:	1c78      	adds	r0, r7, #1
 8022b8c:	d1d6      	bne.n	8022b3c <_vfiprintf_r+0x1bc>
 8022b8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b90:	07d9      	lsls	r1, r3, #31
 8022b92:	d405      	bmi.n	8022ba0 <_vfiprintf_r+0x220>
 8022b94:	89ab      	ldrh	r3, [r5, #12]
 8022b96:	059a      	lsls	r2, r3, #22
 8022b98:	d402      	bmi.n	8022ba0 <_vfiprintf_r+0x220>
 8022b9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b9c:	f7e4 fa04 	bl	8006fa8 <__retarget_lock_release_recursive>
 8022ba0:	89ab      	ldrh	r3, [r5, #12]
 8022ba2:	065b      	lsls	r3, r3, #25
 8022ba4:	f53f af12 	bmi.w	80229cc <_vfiprintf_r+0x4c>
 8022ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022baa:	e711      	b.n	80229d0 <_vfiprintf_r+0x50>
 8022bac:	ab03      	add	r3, sp, #12
 8022bae:	9300      	str	r3, [sp, #0]
 8022bb0:	462a      	mov	r2, r5
 8022bb2:	4b09      	ldr	r3, [pc, #36]	; (8022bd8 <_vfiprintf_r+0x258>)
 8022bb4:	a904      	add	r1, sp, #16
 8022bb6:	4630      	mov	r0, r6
 8022bb8:	f7fc f802 	bl	801ebc0 <_printf_i>
 8022bbc:	e7e4      	b.n	8022b88 <_vfiprintf_r+0x208>
 8022bbe:	bf00      	nop
 8022bc0:	080270e0 	.word	0x080270e0
 8022bc4:	08027100 	.word	0x08027100
 8022bc8:	080270c0 	.word	0x080270c0
 8022bcc:	080274bc 	.word	0x080274bc
 8022bd0:	080274c6 	.word	0x080274c6
 8022bd4:	0801e679 	.word	0x0801e679
 8022bd8:	0802295b 	.word	0x0802295b
 8022bdc:	080274c2 	.word	0x080274c2

08022be0 <_scanf_chars>:
 8022be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022be4:	4615      	mov	r5, r2
 8022be6:	688a      	ldr	r2, [r1, #8]
 8022be8:	4680      	mov	r8, r0
 8022bea:	460c      	mov	r4, r1
 8022bec:	b932      	cbnz	r2, 8022bfc <_scanf_chars+0x1c>
 8022bee:	698a      	ldr	r2, [r1, #24]
 8022bf0:	2a00      	cmp	r2, #0
 8022bf2:	bf0c      	ite	eq
 8022bf4:	2201      	moveq	r2, #1
 8022bf6:	f04f 32ff 	movne.w	r2, #4294967295
 8022bfa:	608a      	str	r2, [r1, #8]
 8022bfc:	6822      	ldr	r2, [r4, #0]
 8022bfe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8022c8c <_scanf_chars+0xac>
 8022c02:	06d1      	lsls	r1, r2, #27
 8022c04:	bf5f      	itttt	pl
 8022c06:	681a      	ldrpl	r2, [r3, #0]
 8022c08:	1d11      	addpl	r1, r2, #4
 8022c0a:	6019      	strpl	r1, [r3, #0]
 8022c0c:	6816      	ldrpl	r6, [r2, #0]
 8022c0e:	2700      	movs	r7, #0
 8022c10:	69a0      	ldr	r0, [r4, #24]
 8022c12:	b188      	cbz	r0, 8022c38 <_scanf_chars+0x58>
 8022c14:	2801      	cmp	r0, #1
 8022c16:	d107      	bne.n	8022c28 <_scanf_chars+0x48>
 8022c18:	682b      	ldr	r3, [r5, #0]
 8022c1a:	781a      	ldrb	r2, [r3, #0]
 8022c1c:	6963      	ldr	r3, [r4, #20]
 8022c1e:	5c9b      	ldrb	r3, [r3, r2]
 8022c20:	b953      	cbnz	r3, 8022c38 <_scanf_chars+0x58>
 8022c22:	bb27      	cbnz	r7, 8022c6e <_scanf_chars+0x8e>
 8022c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022c28:	2802      	cmp	r0, #2
 8022c2a:	d120      	bne.n	8022c6e <_scanf_chars+0x8e>
 8022c2c:	682b      	ldr	r3, [r5, #0]
 8022c2e:	781b      	ldrb	r3, [r3, #0]
 8022c30:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022c34:	071b      	lsls	r3, r3, #28
 8022c36:	d41a      	bmi.n	8022c6e <_scanf_chars+0x8e>
 8022c38:	6823      	ldr	r3, [r4, #0]
 8022c3a:	06da      	lsls	r2, r3, #27
 8022c3c:	bf5e      	ittt	pl
 8022c3e:	682b      	ldrpl	r3, [r5, #0]
 8022c40:	781b      	ldrbpl	r3, [r3, #0]
 8022c42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022c46:	682a      	ldr	r2, [r5, #0]
 8022c48:	686b      	ldr	r3, [r5, #4]
 8022c4a:	3201      	adds	r2, #1
 8022c4c:	602a      	str	r2, [r5, #0]
 8022c4e:	68a2      	ldr	r2, [r4, #8]
 8022c50:	3b01      	subs	r3, #1
 8022c52:	3a01      	subs	r2, #1
 8022c54:	606b      	str	r3, [r5, #4]
 8022c56:	3701      	adds	r7, #1
 8022c58:	60a2      	str	r2, [r4, #8]
 8022c5a:	b142      	cbz	r2, 8022c6e <_scanf_chars+0x8e>
 8022c5c:	2b00      	cmp	r3, #0
 8022c5e:	dcd7      	bgt.n	8022c10 <_scanf_chars+0x30>
 8022c60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022c64:	4629      	mov	r1, r5
 8022c66:	4640      	mov	r0, r8
 8022c68:	4798      	blx	r3
 8022c6a:	2800      	cmp	r0, #0
 8022c6c:	d0d0      	beq.n	8022c10 <_scanf_chars+0x30>
 8022c6e:	6823      	ldr	r3, [r4, #0]
 8022c70:	f013 0310 	ands.w	r3, r3, #16
 8022c74:	d105      	bne.n	8022c82 <_scanf_chars+0xa2>
 8022c76:	68e2      	ldr	r2, [r4, #12]
 8022c78:	3201      	adds	r2, #1
 8022c7a:	60e2      	str	r2, [r4, #12]
 8022c7c:	69a2      	ldr	r2, [r4, #24]
 8022c7e:	b102      	cbz	r2, 8022c82 <_scanf_chars+0xa2>
 8022c80:	7033      	strb	r3, [r6, #0]
 8022c82:	6923      	ldr	r3, [r4, #16]
 8022c84:	441f      	add	r7, r3
 8022c86:	6127      	str	r7, [r4, #16]
 8022c88:	2000      	movs	r0, #0
 8022c8a:	e7cb      	b.n	8022c24 <_scanf_chars+0x44>
 8022c8c:	08026fbd 	.word	0x08026fbd

08022c90 <_scanf_i>:
 8022c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c94:	4698      	mov	r8, r3
 8022c96:	4b74      	ldr	r3, [pc, #464]	; (8022e68 <_scanf_i+0x1d8>)
 8022c98:	460c      	mov	r4, r1
 8022c9a:	4682      	mov	sl, r0
 8022c9c:	4616      	mov	r6, r2
 8022c9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022ca2:	b087      	sub	sp, #28
 8022ca4:	ab03      	add	r3, sp, #12
 8022ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022caa:	4b70      	ldr	r3, [pc, #448]	; (8022e6c <_scanf_i+0x1dc>)
 8022cac:	69a1      	ldr	r1, [r4, #24]
 8022cae:	4a70      	ldr	r2, [pc, #448]	; (8022e70 <_scanf_i+0x1e0>)
 8022cb0:	2903      	cmp	r1, #3
 8022cb2:	bf18      	it	ne
 8022cb4:	461a      	movne	r2, r3
 8022cb6:	68a3      	ldr	r3, [r4, #8]
 8022cb8:	9201      	str	r2, [sp, #4]
 8022cba:	1e5a      	subs	r2, r3, #1
 8022cbc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022cc0:	bf88      	it	hi
 8022cc2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022cc6:	4627      	mov	r7, r4
 8022cc8:	bf82      	ittt	hi
 8022cca:	eb03 0905 	addhi.w	r9, r3, r5
 8022cce:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022cd2:	60a3      	strhi	r3, [r4, #8]
 8022cd4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022cd8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022cdc:	bf98      	it	ls
 8022cde:	f04f 0900 	movls.w	r9, #0
 8022ce2:	6023      	str	r3, [r4, #0]
 8022ce4:	463d      	mov	r5, r7
 8022ce6:	f04f 0b00 	mov.w	fp, #0
 8022cea:	6831      	ldr	r1, [r6, #0]
 8022cec:	ab03      	add	r3, sp, #12
 8022cee:	7809      	ldrb	r1, [r1, #0]
 8022cf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022cf4:	2202      	movs	r2, #2
 8022cf6:	f7dd fa73 	bl	80001e0 <memchr>
 8022cfa:	b328      	cbz	r0, 8022d48 <_scanf_i+0xb8>
 8022cfc:	f1bb 0f01 	cmp.w	fp, #1
 8022d00:	d159      	bne.n	8022db6 <_scanf_i+0x126>
 8022d02:	6862      	ldr	r2, [r4, #4]
 8022d04:	b92a      	cbnz	r2, 8022d12 <_scanf_i+0x82>
 8022d06:	6822      	ldr	r2, [r4, #0]
 8022d08:	2308      	movs	r3, #8
 8022d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022d0e:	6063      	str	r3, [r4, #4]
 8022d10:	6022      	str	r2, [r4, #0]
 8022d12:	6822      	ldr	r2, [r4, #0]
 8022d14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022d18:	6022      	str	r2, [r4, #0]
 8022d1a:	68a2      	ldr	r2, [r4, #8]
 8022d1c:	1e51      	subs	r1, r2, #1
 8022d1e:	60a1      	str	r1, [r4, #8]
 8022d20:	b192      	cbz	r2, 8022d48 <_scanf_i+0xb8>
 8022d22:	6832      	ldr	r2, [r6, #0]
 8022d24:	1c51      	adds	r1, r2, #1
 8022d26:	6031      	str	r1, [r6, #0]
 8022d28:	7812      	ldrb	r2, [r2, #0]
 8022d2a:	f805 2b01 	strb.w	r2, [r5], #1
 8022d2e:	6872      	ldr	r2, [r6, #4]
 8022d30:	3a01      	subs	r2, #1
 8022d32:	2a00      	cmp	r2, #0
 8022d34:	6072      	str	r2, [r6, #4]
 8022d36:	dc07      	bgt.n	8022d48 <_scanf_i+0xb8>
 8022d38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022d3c:	4631      	mov	r1, r6
 8022d3e:	4650      	mov	r0, sl
 8022d40:	4790      	blx	r2
 8022d42:	2800      	cmp	r0, #0
 8022d44:	f040 8085 	bne.w	8022e52 <_scanf_i+0x1c2>
 8022d48:	f10b 0b01 	add.w	fp, fp, #1
 8022d4c:	f1bb 0f03 	cmp.w	fp, #3
 8022d50:	d1cb      	bne.n	8022cea <_scanf_i+0x5a>
 8022d52:	6863      	ldr	r3, [r4, #4]
 8022d54:	b90b      	cbnz	r3, 8022d5a <_scanf_i+0xca>
 8022d56:	230a      	movs	r3, #10
 8022d58:	6063      	str	r3, [r4, #4]
 8022d5a:	6863      	ldr	r3, [r4, #4]
 8022d5c:	4945      	ldr	r1, [pc, #276]	; (8022e74 <_scanf_i+0x1e4>)
 8022d5e:	6960      	ldr	r0, [r4, #20]
 8022d60:	1ac9      	subs	r1, r1, r3
 8022d62:	f000 f8a5 	bl	8022eb0 <__sccl>
 8022d66:	f04f 0b00 	mov.w	fp, #0
 8022d6a:	68a3      	ldr	r3, [r4, #8]
 8022d6c:	6822      	ldr	r2, [r4, #0]
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d03d      	beq.n	8022dee <_scanf_i+0x15e>
 8022d72:	6831      	ldr	r1, [r6, #0]
 8022d74:	6960      	ldr	r0, [r4, #20]
 8022d76:	f891 c000 	ldrb.w	ip, [r1]
 8022d7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022d7e:	2800      	cmp	r0, #0
 8022d80:	d035      	beq.n	8022dee <_scanf_i+0x15e>
 8022d82:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022d86:	d124      	bne.n	8022dd2 <_scanf_i+0x142>
 8022d88:	0510      	lsls	r0, r2, #20
 8022d8a:	d522      	bpl.n	8022dd2 <_scanf_i+0x142>
 8022d8c:	f10b 0b01 	add.w	fp, fp, #1
 8022d90:	f1b9 0f00 	cmp.w	r9, #0
 8022d94:	d003      	beq.n	8022d9e <_scanf_i+0x10e>
 8022d96:	3301      	adds	r3, #1
 8022d98:	f109 39ff 	add.w	r9, r9, #4294967295
 8022d9c:	60a3      	str	r3, [r4, #8]
 8022d9e:	6873      	ldr	r3, [r6, #4]
 8022da0:	3b01      	subs	r3, #1
 8022da2:	2b00      	cmp	r3, #0
 8022da4:	6073      	str	r3, [r6, #4]
 8022da6:	dd1b      	ble.n	8022de0 <_scanf_i+0x150>
 8022da8:	6833      	ldr	r3, [r6, #0]
 8022daa:	3301      	adds	r3, #1
 8022dac:	6033      	str	r3, [r6, #0]
 8022dae:	68a3      	ldr	r3, [r4, #8]
 8022db0:	3b01      	subs	r3, #1
 8022db2:	60a3      	str	r3, [r4, #8]
 8022db4:	e7d9      	b.n	8022d6a <_scanf_i+0xda>
 8022db6:	f1bb 0f02 	cmp.w	fp, #2
 8022dba:	d1ae      	bne.n	8022d1a <_scanf_i+0x8a>
 8022dbc:	6822      	ldr	r2, [r4, #0]
 8022dbe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022dc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022dc6:	d1bf      	bne.n	8022d48 <_scanf_i+0xb8>
 8022dc8:	2310      	movs	r3, #16
 8022dca:	6063      	str	r3, [r4, #4]
 8022dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022dd0:	e7a2      	b.n	8022d18 <_scanf_i+0x88>
 8022dd2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022dd6:	6022      	str	r2, [r4, #0]
 8022dd8:	780b      	ldrb	r3, [r1, #0]
 8022dda:	f805 3b01 	strb.w	r3, [r5], #1
 8022dde:	e7de      	b.n	8022d9e <_scanf_i+0x10e>
 8022de0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022de4:	4631      	mov	r1, r6
 8022de6:	4650      	mov	r0, sl
 8022de8:	4798      	blx	r3
 8022dea:	2800      	cmp	r0, #0
 8022dec:	d0df      	beq.n	8022dae <_scanf_i+0x11e>
 8022dee:	6823      	ldr	r3, [r4, #0]
 8022df0:	05d9      	lsls	r1, r3, #23
 8022df2:	d50d      	bpl.n	8022e10 <_scanf_i+0x180>
 8022df4:	42bd      	cmp	r5, r7
 8022df6:	d909      	bls.n	8022e0c <_scanf_i+0x17c>
 8022df8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022e00:	4632      	mov	r2, r6
 8022e02:	4650      	mov	r0, sl
 8022e04:	4798      	blx	r3
 8022e06:	f105 39ff 	add.w	r9, r5, #4294967295
 8022e0a:	464d      	mov	r5, r9
 8022e0c:	42bd      	cmp	r5, r7
 8022e0e:	d028      	beq.n	8022e62 <_scanf_i+0x1d2>
 8022e10:	6822      	ldr	r2, [r4, #0]
 8022e12:	f012 0210 	ands.w	r2, r2, #16
 8022e16:	d113      	bne.n	8022e40 <_scanf_i+0x1b0>
 8022e18:	702a      	strb	r2, [r5, #0]
 8022e1a:	6863      	ldr	r3, [r4, #4]
 8022e1c:	9e01      	ldr	r6, [sp, #4]
 8022e1e:	4639      	mov	r1, r7
 8022e20:	4650      	mov	r0, sl
 8022e22:	47b0      	blx	r6
 8022e24:	f8d8 3000 	ldr.w	r3, [r8]
 8022e28:	6821      	ldr	r1, [r4, #0]
 8022e2a:	1d1a      	adds	r2, r3, #4
 8022e2c:	f8c8 2000 	str.w	r2, [r8]
 8022e30:	f011 0f20 	tst.w	r1, #32
 8022e34:	681b      	ldr	r3, [r3, #0]
 8022e36:	d00f      	beq.n	8022e58 <_scanf_i+0x1c8>
 8022e38:	6018      	str	r0, [r3, #0]
 8022e3a:	68e3      	ldr	r3, [r4, #12]
 8022e3c:	3301      	adds	r3, #1
 8022e3e:	60e3      	str	r3, [r4, #12]
 8022e40:	1bed      	subs	r5, r5, r7
 8022e42:	44ab      	add	fp, r5
 8022e44:	6925      	ldr	r5, [r4, #16]
 8022e46:	445d      	add	r5, fp
 8022e48:	6125      	str	r5, [r4, #16]
 8022e4a:	2000      	movs	r0, #0
 8022e4c:	b007      	add	sp, #28
 8022e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e52:	f04f 0b00 	mov.w	fp, #0
 8022e56:	e7ca      	b.n	8022dee <_scanf_i+0x15e>
 8022e58:	07ca      	lsls	r2, r1, #31
 8022e5a:	bf4c      	ite	mi
 8022e5c:	8018      	strhmi	r0, [r3, #0]
 8022e5e:	6018      	strpl	r0, [r3, #0]
 8022e60:	e7eb      	b.n	8022e3a <_scanf_i+0x1aa>
 8022e62:	2001      	movs	r0, #1
 8022e64:	e7f2      	b.n	8022e4c <_scanf_i+0x1bc>
 8022e66:	bf00      	nop
 8022e68:	08026ca8 	.word	0x08026ca8
 8022e6c:	0802301d 	.word	0x0802301d
 8022e70:	080202c9 	.word	0x080202c9
 8022e74:	080274e6 	.word	0x080274e6

08022e78 <_read_r>:
 8022e78:	b538      	push	{r3, r4, r5, lr}
 8022e7a:	4d07      	ldr	r5, [pc, #28]	; (8022e98 <_read_r+0x20>)
 8022e7c:	4604      	mov	r4, r0
 8022e7e:	4608      	mov	r0, r1
 8022e80:	4611      	mov	r1, r2
 8022e82:	2200      	movs	r2, #0
 8022e84:	602a      	str	r2, [r5, #0]
 8022e86:	461a      	mov	r2, r3
 8022e88:	f7e3 fcb8 	bl	80067fc <_read>
 8022e8c:	1c43      	adds	r3, r0, #1
 8022e8e:	d102      	bne.n	8022e96 <_read_r+0x1e>
 8022e90:	682b      	ldr	r3, [r5, #0]
 8022e92:	b103      	cbz	r3, 8022e96 <_read_r+0x1e>
 8022e94:	6023      	str	r3, [r4, #0]
 8022e96:	bd38      	pop	{r3, r4, r5, pc}
 8022e98:	2000e190 	.word	0x2000e190
 8022e9c:	00000000 	.word	0x00000000

08022ea0 <nan>:
 8022ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022ea8 <nan+0x8>
 8022ea4:	4770      	bx	lr
 8022ea6:	bf00      	nop
 8022ea8:	00000000 	.word	0x00000000
 8022eac:	7ff80000 	.word	0x7ff80000

08022eb0 <__sccl>:
 8022eb0:	b570      	push	{r4, r5, r6, lr}
 8022eb2:	780b      	ldrb	r3, [r1, #0]
 8022eb4:	4604      	mov	r4, r0
 8022eb6:	2b5e      	cmp	r3, #94	; 0x5e
 8022eb8:	bf0b      	itete	eq
 8022eba:	784b      	ldrbeq	r3, [r1, #1]
 8022ebc:	1c48      	addne	r0, r1, #1
 8022ebe:	1c88      	addeq	r0, r1, #2
 8022ec0:	2200      	movne	r2, #0
 8022ec2:	bf08      	it	eq
 8022ec4:	2201      	moveq	r2, #1
 8022ec6:	1e61      	subs	r1, r4, #1
 8022ec8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022ecc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022ed0:	42a9      	cmp	r1, r5
 8022ed2:	d1fb      	bne.n	8022ecc <__sccl+0x1c>
 8022ed4:	b90b      	cbnz	r3, 8022eda <__sccl+0x2a>
 8022ed6:	3801      	subs	r0, #1
 8022ed8:	bd70      	pop	{r4, r5, r6, pc}
 8022eda:	f082 0101 	eor.w	r1, r2, #1
 8022ede:	54e1      	strb	r1, [r4, r3]
 8022ee0:	1c42      	adds	r2, r0, #1
 8022ee2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022ee6:	2d2d      	cmp	r5, #45	; 0x2d
 8022ee8:	f102 36ff 	add.w	r6, r2, #4294967295
 8022eec:	4610      	mov	r0, r2
 8022eee:	d006      	beq.n	8022efe <__sccl+0x4e>
 8022ef0:	2d5d      	cmp	r5, #93	; 0x5d
 8022ef2:	d0f1      	beq.n	8022ed8 <__sccl+0x28>
 8022ef4:	b90d      	cbnz	r5, 8022efa <__sccl+0x4a>
 8022ef6:	4630      	mov	r0, r6
 8022ef8:	e7ee      	b.n	8022ed8 <__sccl+0x28>
 8022efa:	462b      	mov	r3, r5
 8022efc:	e7ef      	b.n	8022ede <__sccl+0x2e>
 8022efe:	7816      	ldrb	r6, [r2, #0]
 8022f00:	2e5d      	cmp	r6, #93	; 0x5d
 8022f02:	d0fa      	beq.n	8022efa <__sccl+0x4a>
 8022f04:	42b3      	cmp	r3, r6
 8022f06:	dcf8      	bgt.n	8022efa <__sccl+0x4a>
 8022f08:	4618      	mov	r0, r3
 8022f0a:	3001      	adds	r0, #1
 8022f0c:	4286      	cmp	r6, r0
 8022f0e:	5421      	strb	r1, [r4, r0]
 8022f10:	dcfb      	bgt.n	8022f0a <__sccl+0x5a>
 8022f12:	43d8      	mvns	r0, r3
 8022f14:	4430      	add	r0, r6
 8022f16:	1c5d      	adds	r5, r3, #1
 8022f18:	42b3      	cmp	r3, r6
 8022f1a:	bfa8      	it	ge
 8022f1c:	2000      	movge	r0, #0
 8022f1e:	182b      	adds	r3, r5, r0
 8022f20:	3202      	adds	r2, #2
 8022f22:	e7de      	b.n	8022ee2 <__sccl+0x32>

08022f24 <_strtoul_l.isra.0>:
 8022f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f28:	4e3b      	ldr	r6, [pc, #236]	; (8023018 <_strtoul_l.isra.0+0xf4>)
 8022f2a:	4686      	mov	lr, r0
 8022f2c:	468c      	mov	ip, r1
 8022f2e:	4660      	mov	r0, ip
 8022f30:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022f34:	5da5      	ldrb	r5, [r4, r6]
 8022f36:	f015 0508 	ands.w	r5, r5, #8
 8022f3a:	d1f8      	bne.n	8022f2e <_strtoul_l.isra.0+0xa>
 8022f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8022f3e:	d134      	bne.n	8022faa <_strtoul_l.isra.0+0x86>
 8022f40:	f89c 4000 	ldrb.w	r4, [ip]
 8022f44:	f04f 0801 	mov.w	r8, #1
 8022f48:	f100 0c02 	add.w	ip, r0, #2
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d05e      	beq.n	802300e <_strtoul_l.isra.0+0xea>
 8022f50:	2b10      	cmp	r3, #16
 8022f52:	d10c      	bne.n	8022f6e <_strtoul_l.isra.0+0x4a>
 8022f54:	2c30      	cmp	r4, #48	; 0x30
 8022f56:	d10a      	bne.n	8022f6e <_strtoul_l.isra.0+0x4a>
 8022f58:	f89c 0000 	ldrb.w	r0, [ip]
 8022f5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8022f60:	2858      	cmp	r0, #88	; 0x58
 8022f62:	d14f      	bne.n	8023004 <_strtoul_l.isra.0+0xe0>
 8022f64:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8022f68:	2310      	movs	r3, #16
 8022f6a:	f10c 0c02 	add.w	ip, ip, #2
 8022f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8022f72:	2500      	movs	r5, #0
 8022f74:	fbb7 f7f3 	udiv	r7, r7, r3
 8022f78:	fb03 f907 	mul.w	r9, r3, r7
 8022f7c:	ea6f 0909 	mvn.w	r9, r9
 8022f80:	4628      	mov	r0, r5
 8022f82:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8022f86:	2e09      	cmp	r6, #9
 8022f88:	d818      	bhi.n	8022fbc <_strtoul_l.isra.0+0x98>
 8022f8a:	4634      	mov	r4, r6
 8022f8c:	42a3      	cmp	r3, r4
 8022f8e:	dd24      	ble.n	8022fda <_strtoul_l.isra.0+0xb6>
 8022f90:	2d00      	cmp	r5, #0
 8022f92:	db1f      	blt.n	8022fd4 <_strtoul_l.isra.0+0xb0>
 8022f94:	4287      	cmp	r7, r0
 8022f96:	d31d      	bcc.n	8022fd4 <_strtoul_l.isra.0+0xb0>
 8022f98:	d101      	bne.n	8022f9e <_strtoul_l.isra.0+0x7a>
 8022f9a:	45a1      	cmp	r9, r4
 8022f9c:	db1a      	blt.n	8022fd4 <_strtoul_l.isra.0+0xb0>
 8022f9e:	fb00 4003 	mla	r0, r0, r3, r4
 8022fa2:	2501      	movs	r5, #1
 8022fa4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022fa8:	e7eb      	b.n	8022f82 <_strtoul_l.isra.0+0x5e>
 8022faa:	2c2b      	cmp	r4, #43	; 0x2b
 8022fac:	bf08      	it	eq
 8022fae:	f89c 4000 	ldrbeq.w	r4, [ip]
 8022fb2:	46a8      	mov	r8, r5
 8022fb4:	bf08      	it	eq
 8022fb6:	f100 0c02 	addeq.w	ip, r0, #2
 8022fba:	e7c7      	b.n	8022f4c <_strtoul_l.isra.0+0x28>
 8022fbc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8022fc0:	2e19      	cmp	r6, #25
 8022fc2:	d801      	bhi.n	8022fc8 <_strtoul_l.isra.0+0xa4>
 8022fc4:	3c37      	subs	r4, #55	; 0x37
 8022fc6:	e7e1      	b.n	8022f8c <_strtoul_l.isra.0+0x68>
 8022fc8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8022fcc:	2e19      	cmp	r6, #25
 8022fce:	d804      	bhi.n	8022fda <_strtoul_l.isra.0+0xb6>
 8022fd0:	3c57      	subs	r4, #87	; 0x57
 8022fd2:	e7db      	b.n	8022f8c <_strtoul_l.isra.0+0x68>
 8022fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8022fd8:	e7e4      	b.n	8022fa4 <_strtoul_l.isra.0+0x80>
 8022fda:	2d00      	cmp	r5, #0
 8022fdc:	da07      	bge.n	8022fee <_strtoul_l.isra.0+0xca>
 8022fde:	2322      	movs	r3, #34	; 0x22
 8022fe0:	f8ce 3000 	str.w	r3, [lr]
 8022fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8022fe8:	b942      	cbnz	r2, 8022ffc <_strtoul_l.isra.0+0xd8>
 8022fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022fee:	f1b8 0f00 	cmp.w	r8, #0
 8022ff2:	d000      	beq.n	8022ff6 <_strtoul_l.isra.0+0xd2>
 8022ff4:	4240      	negs	r0, r0
 8022ff6:	2a00      	cmp	r2, #0
 8022ff8:	d0f7      	beq.n	8022fea <_strtoul_l.isra.0+0xc6>
 8022ffa:	b10d      	cbz	r5, 8023000 <_strtoul_l.isra.0+0xdc>
 8022ffc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8023000:	6011      	str	r1, [r2, #0]
 8023002:	e7f2      	b.n	8022fea <_strtoul_l.isra.0+0xc6>
 8023004:	2430      	movs	r4, #48	; 0x30
 8023006:	2b00      	cmp	r3, #0
 8023008:	d1b1      	bne.n	8022f6e <_strtoul_l.isra.0+0x4a>
 802300a:	2308      	movs	r3, #8
 802300c:	e7af      	b.n	8022f6e <_strtoul_l.isra.0+0x4a>
 802300e:	2c30      	cmp	r4, #48	; 0x30
 8023010:	d0a2      	beq.n	8022f58 <_strtoul_l.isra.0+0x34>
 8023012:	230a      	movs	r3, #10
 8023014:	e7ab      	b.n	8022f6e <_strtoul_l.isra.0+0x4a>
 8023016:	bf00      	nop
 8023018:	08026fbd 	.word	0x08026fbd

0802301c <_strtoul_r>:
 802301c:	f7ff bf82 	b.w	8022f24 <_strtoul_l.isra.0>

08023020 <__submore>:
 8023020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023024:	460c      	mov	r4, r1
 8023026:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802302c:	4299      	cmp	r1, r3
 802302e:	d11d      	bne.n	802306c <__submore+0x4c>
 8023030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023034:	f7fb fa26 	bl	801e484 <_malloc_r>
 8023038:	b918      	cbnz	r0, 8023042 <__submore+0x22>
 802303a:	f04f 30ff 	mov.w	r0, #4294967295
 802303e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023046:	63a3      	str	r3, [r4, #56]	; 0x38
 8023048:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802304c:	6360      	str	r0, [r4, #52]	; 0x34
 802304e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8023052:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8023056:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802305a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802305e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8023062:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8023066:	6020      	str	r0, [r4, #0]
 8023068:	2000      	movs	r0, #0
 802306a:	e7e8      	b.n	802303e <__submore+0x1e>
 802306c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802306e:	0077      	lsls	r7, r6, #1
 8023070:	463a      	mov	r2, r7
 8023072:	f000 f949 	bl	8023308 <_realloc_r>
 8023076:	4605      	mov	r5, r0
 8023078:	2800      	cmp	r0, #0
 802307a:	d0de      	beq.n	802303a <__submore+0x1a>
 802307c:	eb00 0806 	add.w	r8, r0, r6
 8023080:	4601      	mov	r1, r0
 8023082:	4632      	mov	r2, r6
 8023084:	4640      	mov	r0, r8
 8023086:	f7fb f97d 	bl	801e384 <memcpy>
 802308a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802308e:	f8c4 8000 	str.w	r8, [r4]
 8023092:	e7e9      	b.n	8023068 <__submore+0x48>

08023094 <__swbuf_r>:
 8023094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023096:	460e      	mov	r6, r1
 8023098:	4614      	mov	r4, r2
 802309a:	4605      	mov	r5, r0
 802309c:	b118      	cbz	r0, 80230a6 <__swbuf_r+0x12>
 802309e:	6983      	ldr	r3, [r0, #24]
 80230a0:	b90b      	cbnz	r3, 80230a6 <__swbuf_r+0x12>
 80230a2:	f7fb f897 	bl	801e1d4 <__sinit>
 80230a6:	4b21      	ldr	r3, [pc, #132]	; (802312c <__swbuf_r+0x98>)
 80230a8:	429c      	cmp	r4, r3
 80230aa:	d12b      	bne.n	8023104 <__swbuf_r+0x70>
 80230ac:	686c      	ldr	r4, [r5, #4]
 80230ae:	69a3      	ldr	r3, [r4, #24]
 80230b0:	60a3      	str	r3, [r4, #8]
 80230b2:	89a3      	ldrh	r3, [r4, #12]
 80230b4:	071a      	lsls	r2, r3, #28
 80230b6:	d52f      	bpl.n	8023118 <__swbuf_r+0x84>
 80230b8:	6923      	ldr	r3, [r4, #16]
 80230ba:	b36b      	cbz	r3, 8023118 <__swbuf_r+0x84>
 80230bc:	6923      	ldr	r3, [r4, #16]
 80230be:	6820      	ldr	r0, [r4, #0]
 80230c0:	1ac0      	subs	r0, r0, r3
 80230c2:	6963      	ldr	r3, [r4, #20]
 80230c4:	b2f6      	uxtb	r6, r6
 80230c6:	4283      	cmp	r3, r0
 80230c8:	4637      	mov	r7, r6
 80230ca:	dc04      	bgt.n	80230d6 <__swbuf_r+0x42>
 80230cc:	4621      	mov	r1, r4
 80230ce:	4628      	mov	r0, r5
 80230d0:	f7fe f842 	bl	8021158 <_fflush_r>
 80230d4:	bb30      	cbnz	r0, 8023124 <__swbuf_r+0x90>
 80230d6:	68a3      	ldr	r3, [r4, #8]
 80230d8:	3b01      	subs	r3, #1
 80230da:	60a3      	str	r3, [r4, #8]
 80230dc:	6823      	ldr	r3, [r4, #0]
 80230de:	1c5a      	adds	r2, r3, #1
 80230e0:	6022      	str	r2, [r4, #0]
 80230e2:	701e      	strb	r6, [r3, #0]
 80230e4:	6963      	ldr	r3, [r4, #20]
 80230e6:	3001      	adds	r0, #1
 80230e8:	4283      	cmp	r3, r0
 80230ea:	d004      	beq.n	80230f6 <__swbuf_r+0x62>
 80230ec:	89a3      	ldrh	r3, [r4, #12]
 80230ee:	07db      	lsls	r3, r3, #31
 80230f0:	d506      	bpl.n	8023100 <__swbuf_r+0x6c>
 80230f2:	2e0a      	cmp	r6, #10
 80230f4:	d104      	bne.n	8023100 <__swbuf_r+0x6c>
 80230f6:	4621      	mov	r1, r4
 80230f8:	4628      	mov	r0, r5
 80230fa:	f7fe f82d 	bl	8021158 <_fflush_r>
 80230fe:	b988      	cbnz	r0, 8023124 <__swbuf_r+0x90>
 8023100:	4638      	mov	r0, r7
 8023102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023104:	4b0a      	ldr	r3, [pc, #40]	; (8023130 <__swbuf_r+0x9c>)
 8023106:	429c      	cmp	r4, r3
 8023108:	d101      	bne.n	802310e <__swbuf_r+0x7a>
 802310a:	68ac      	ldr	r4, [r5, #8]
 802310c:	e7cf      	b.n	80230ae <__swbuf_r+0x1a>
 802310e:	4b09      	ldr	r3, [pc, #36]	; (8023134 <__swbuf_r+0xa0>)
 8023110:	429c      	cmp	r4, r3
 8023112:	bf08      	it	eq
 8023114:	68ec      	ldreq	r4, [r5, #12]
 8023116:	e7ca      	b.n	80230ae <__swbuf_r+0x1a>
 8023118:	4621      	mov	r1, r4
 802311a:	4628      	mov	r0, r5
 802311c:	f000 f81a 	bl	8023154 <__swsetup_r>
 8023120:	2800      	cmp	r0, #0
 8023122:	d0cb      	beq.n	80230bc <__swbuf_r+0x28>
 8023124:	f04f 37ff 	mov.w	r7, #4294967295
 8023128:	e7ea      	b.n	8023100 <__swbuf_r+0x6c>
 802312a:	bf00      	nop
 802312c:	080270e0 	.word	0x080270e0
 8023130:	08027100 	.word	0x08027100
 8023134:	080270c0 	.word	0x080270c0

08023138 <__ascii_wctomb>:
 8023138:	b149      	cbz	r1, 802314e <__ascii_wctomb+0x16>
 802313a:	2aff      	cmp	r2, #255	; 0xff
 802313c:	bf85      	ittet	hi
 802313e:	238a      	movhi	r3, #138	; 0x8a
 8023140:	6003      	strhi	r3, [r0, #0]
 8023142:	700a      	strbls	r2, [r1, #0]
 8023144:	f04f 30ff 	movhi.w	r0, #4294967295
 8023148:	bf98      	it	ls
 802314a:	2001      	movls	r0, #1
 802314c:	4770      	bx	lr
 802314e:	4608      	mov	r0, r1
 8023150:	4770      	bx	lr
	...

08023154 <__swsetup_r>:
 8023154:	4b32      	ldr	r3, [pc, #200]	; (8023220 <__swsetup_r+0xcc>)
 8023156:	b570      	push	{r4, r5, r6, lr}
 8023158:	681d      	ldr	r5, [r3, #0]
 802315a:	4606      	mov	r6, r0
 802315c:	460c      	mov	r4, r1
 802315e:	b125      	cbz	r5, 802316a <__swsetup_r+0x16>
 8023160:	69ab      	ldr	r3, [r5, #24]
 8023162:	b913      	cbnz	r3, 802316a <__swsetup_r+0x16>
 8023164:	4628      	mov	r0, r5
 8023166:	f7fb f835 	bl	801e1d4 <__sinit>
 802316a:	4b2e      	ldr	r3, [pc, #184]	; (8023224 <__swsetup_r+0xd0>)
 802316c:	429c      	cmp	r4, r3
 802316e:	d10f      	bne.n	8023190 <__swsetup_r+0x3c>
 8023170:	686c      	ldr	r4, [r5, #4]
 8023172:	89a3      	ldrh	r3, [r4, #12]
 8023174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023178:	0719      	lsls	r1, r3, #28
 802317a:	d42c      	bmi.n	80231d6 <__swsetup_r+0x82>
 802317c:	06dd      	lsls	r5, r3, #27
 802317e:	d411      	bmi.n	80231a4 <__swsetup_r+0x50>
 8023180:	2309      	movs	r3, #9
 8023182:	6033      	str	r3, [r6, #0]
 8023184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023188:	81a3      	strh	r3, [r4, #12]
 802318a:	f04f 30ff 	mov.w	r0, #4294967295
 802318e:	e03e      	b.n	802320e <__swsetup_r+0xba>
 8023190:	4b25      	ldr	r3, [pc, #148]	; (8023228 <__swsetup_r+0xd4>)
 8023192:	429c      	cmp	r4, r3
 8023194:	d101      	bne.n	802319a <__swsetup_r+0x46>
 8023196:	68ac      	ldr	r4, [r5, #8]
 8023198:	e7eb      	b.n	8023172 <__swsetup_r+0x1e>
 802319a:	4b24      	ldr	r3, [pc, #144]	; (802322c <__swsetup_r+0xd8>)
 802319c:	429c      	cmp	r4, r3
 802319e:	bf08      	it	eq
 80231a0:	68ec      	ldreq	r4, [r5, #12]
 80231a2:	e7e6      	b.n	8023172 <__swsetup_r+0x1e>
 80231a4:	0758      	lsls	r0, r3, #29
 80231a6:	d512      	bpl.n	80231ce <__swsetup_r+0x7a>
 80231a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80231aa:	b141      	cbz	r1, 80231be <__swsetup_r+0x6a>
 80231ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80231b0:	4299      	cmp	r1, r3
 80231b2:	d002      	beq.n	80231ba <__swsetup_r+0x66>
 80231b4:	4630      	mov	r0, r6
 80231b6:	f7fb f915 	bl	801e3e4 <_free_r>
 80231ba:	2300      	movs	r3, #0
 80231bc:	6363      	str	r3, [r4, #52]	; 0x34
 80231be:	89a3      	ldrh	r3, [r4, #12]
 80231c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80231c4:	81a3      	strh	r3, [r4, #12]
 80231c6:	2300      	movs	r3, #0
 80231c8:	6063      	str	r3, [r4, #4]
 80231ca:	6923      	ldr	r3, [r4, #16]
 80231cc:	6023      	str	r3, [r4, #0]
 80231ce:	89a3      	ldrh	r3, [r4, #12]
 80231d0:	f043 0308 	orr.w	r3, r3, #8
 80231d4:	81a3      	strh	r3, [r4, #12]
 80231d6:	6923      	ldr	r3, [r4, #16]
 80231d8:	b94b      	cbnz	r3, 80231ee <__swsetup_r+0x9a>
 80231da:	89a3      	ldrh	r3, [r4, #12]
 80231dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80231e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80231e4:	d003      	beq.n	80231ee <__swsetup_r+0x9a>
 80231e6:	4621      	mov	r1, r4
 80231e8:	4630      	mov	r0, r6
 80231ea:	f000 f84d 	bl	8023288 <__smakebuf_r>
 80231ee:	89a0      	ldrh	r0, [r4, #12]
 80231f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80231f4:	f010 0301 	ands.w	r3, r0, #1
 80231f8:	d00a      	beq.n	8023210 <__swsetup_r+0xbc>
 80231fa:	2300      	movs	r3, #0
 80231fc:	60a3      	str	r3, [r4, #8]
 80231fe:	6963      	ldr	r3, [r4, #20]
 8023200:	425b      	negs	r3, r3
 8023202:	61a3      	str	r3, [r4, #24]
 8023204:	6923      	ldr	r3, [r4, #16]
 8023206:	b943      	cbnz	r3, 802321a <__swsetup_r+0xc6>
 8023208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802320c:	d1ba      	bne.n	8023184 <__swsetup_r+0x30>
 802320e:	bd70      	pop	{r4, r5, r6, pc}
 8023210:	0781      	lsls	r1, r0, #30
 8023212:	bf58      	it	pl
 8023214:	6963      	ldrpl	r3, [r4, #20]
 8023216:	60a3      	str	r3, [r4, #8]
 8023218:	e7f4      	b.n	8023204 <__swsetup_r+0xb0>
 802321a:	2000      	movs	r0, #0
 802321c:	e7f7      	b.n	802320e <__swsetup_r+0xba>
 802321e:	bf00      	nop
 8023220:	200003b8 	.word	0x200003b8
 8023224:	080270e0 	.word	0x080270e0
 8023228:	08027100 	.word	0x08027100
 802322c:	080270c0 	.word	0x080270c0

08023230 <abort>:
 8023230:	b508      	push	{r3, lr}
 8023232:	2006      	movs	r0, #6
 8023234:	f000 f8b6 	bl	80233a4 <raise>
 8023238:	2001      	movs	r0, #1
 802323a:	f7e3 fad5 	bl	80067e8 <_exit>

0802323e <__swhatbuf_r>:
 802323e:	b570      	push	{r4, r5, r6, lr}
 8023240:	460e      	mov	r6, r1
 8023242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023246:	2900      	cmp	r1, #0
 8023248:	b096      	sub	sp, #88	; 0x58
 802324a:	4614      	mov	r4, r2
 802324c:	461d      	mov	r5, r3
 802324e:	da07      	bge.n	8023260 <__swhatbuf_r+0x22>
 8023250:	2300      	movs	r3, #0
 8023252:	602b      	str	r3, [r5, #0]
 8023254:	89b3      	ldrh	r3, [r6, #12]
 8023256:	061a      	lsls	r2, r3, #24
 8023258:	d410      	bmi.n	802327c <__swhatbuf_r+0x3e>
 802325a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802325e:	e00e      	b.n	802327e <__swhatbuf_r+0x40>
 8023260:	466a      	mov	r2, sp
 8023262:	f000 f8bb 	bl	80233dc <_fstat_r>
 8023266:	2800      	cmp	r0, #0
 8023268:	dbf2      	blt.n	8023250 <__swhatbuf_r+0x12>
 802326a:	9a01      	ldr	r2, [sp, #4]
 802326c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023274:	425a      	negs	r2, r3
 8023276:	415a      	adcs	r2, r3
 8023278:	602a      	str	r2, [r5, #0]
 802327a:	e7ee      	b.n	802325a <__swhatbuf_r+0x1c>
 802327c:	2340      	movs	r3, #64	; 0x40
 802327e:	2000      	movs	r0, #0
 8023280:	6023      	str	r3, [r4, #0]
 8023282:	b016      	add	sp, #88	; 0x58
 8023284:	bd70      	pop	{r4, r5, r6, pc}
	...

08023288 <__smakebuf_r>:
 8023288:	898b      	ldrh	r3, [r1, #12]
 802328a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802328c:	079d      	lsls	r5, r3, #30
 802328e:	4606      	mov	r6, r0
 8023290:	460c      	mov	r4, r1
 8023292:	d507      	bpl.n	80232a4 <__smakebuf_r+0x1c>
 8023294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023298:	6023      	str	r3, [r4, #0]
 802329a:	6123      	str	r3, [r4, #16]
 802329c:	2301      	movs	r3, #1
 802329e:	6163      	str	r3, [r4, #20]
 80232a0:	b002      	add	sp, #8
 80232a2:	bd70      	pop	{r4, r5, r6, pc}
 80232a4:	ab01      	add	r3, sp, #4
 80232a6:	466a      	mov	r2, sp
 80232a8:	f7ff ffc9 	bl	802323e <__swhatbuf_r>
 80232ac:	9900      	ldr	r1, [sp, #0]
 80232ae:	4605      	mov	r5, r0
 80232b0:	4630      	mov	r0, r6
 80232b2:	f7fb f8e7 	bl	801e484 <_malloc_r>
 80232b6:	b948      	cbnz	r0, 80232cc <__smakebuf_r+0x44>
 80232b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232bc:	059a      	lsls	r2, r3, #22
 80232be:	d4ef      	bmi.n	80232a0 <__smakebuf_r+0x18>
 80232c0:	f023 0303 	bic.w	r3, r3, #3
 80232c4:	f043 0302 	orr.w	r3, r3, #2
 80232c8:	81a3      	strh	r3, [r4, #12]
 80232ca:	e7e3      	b.n	8023294 <__smakebuf_r+0xc>
 80232cc:	4b0d      	ldr	r3, [pc, #52]	; (8023304 <__smakebuf_r+0x7c>)
 80232ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80232d0:	89a3      	ldrh	r3, [r4, #12]
 80232d2:	6020      	str	r0, [r4, #0]
 80232d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80232d8:	81a3      	strh	r3, [r4, #12]
 80232da:	9b00      	ldr	r3, [sp, #0]
 80232dc:	6163      	str	r3, [r4, #20]
 80232de:	9b01      	ldr	r3, [sp, #4]
 80232e0:	6120      	str	r0, [r4, #16]
 80232e2:	b15b      	cbz	r3, 80232fc <__smakebuf_r+0x74>
 80232e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232e8:	4630      	mov	r0, r6
 80232ea:	f000 f889 	bl	8023400 <_isatty_r>
 80232ee:	b128      	cbz	r0, 80232fc <__smakebuf_r+0x74>
 80232f0:	89a3      	ldrh	r3, [r4, #12]
 80232f2:	f023 0303 	bic.w	r3, r3, #3
 80232f6:	f043 0301 	orr.w	r3, r3, #1
 80232fa:	81a3      	strh	r3, [r4, #12]
 80232fc:	89a0      	ldrh	r0, [r4, #12]
 80232fe:	4305      	orrs	r5, r0
 8023300:	81a5      	strh	r5, [r4, #12]
 8023302:	e7cd      	b.n	80232a0 <__smakebuf_r+0x18>
 8023304:	0801e16d 	.word	0x0801e16d

08023308 <_realloc_r>:
 8023308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802330a:	4607      	mov	r7, r0
 802330c:	4614      	mov	r4, r2
 802330e:	460e      	mov	r6, r1
 8023310:	b921      	cbnz	r1, 802331c <_realloc_r+0x14>
 8023312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023316:	4611      	mov	r1, r2
 8023318:	f7fb b8b4 	b.w	801e484 <_malloc_r>
 802331c:	b922      	cbnz	r2, 8023328 <_realloc_r+0x20>
 802331e:	f7fb f861 	bl	801e3e4 <_free_r>
 8023322:	4625      	mov	r5, r4
 8023324:	4628      	mov	r0, r5
 8023326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023328:	f000 f87a 	bl	8023420 <_malloc_usable_size_r>
 802332c:	42a0      	cmp	r0, r4
 802332e:	d20f      	bcs.n	8023350 <_realloc_r+0x48>
 8023330:	4621      	mov	r1, r4
 8023332:	4638      	mov	r0, r7
 8023334:	f7fb f8a6 	bl	801e484 <_malloc_r>
 8023338:	4605      	mov	r5, r0
 802333a:	2800      	cmp	r0, #0
 802333c:	d0f2      	beq.n	8023324 <_realloc_r+0x1c>
 802333e:	4631      	mov	r1, r6
 8023340:	4622      	mov	r2, r4
 8023342:	f7fb f81f 	bl	801e384 <memcpy>
 8023346:	4631      	mov	r1, r6
 8023348:	4638      	mov	r0, r7
 802334a:	f7fb f84b 	bl	801e3e4 <_free_r>
 802334e:	e7e9      	b.n	8023324 <_realloc_r+0x1c>
 8023350:	4635      	mov	r5, r6
 8023352:	e7e7      	b.n	8023324 <_realloc_r+0x1c>

08023354 <_raise_r>:
 8023354:	291f      	cmp	r1, #31
 8023356:	b538      	push	{r3, r4, r5, lr}
 8023358:	4604      	mov	r4, r0
 802335a:	460d      	mov	r5, r1
 802335c:	d904      	bls.n	8023368 <_raise_r+0x14>
 802335e:	2316      	movs	r3, #22
 8023360:	6003      	str	r3, [r0, #0]
 8023362:	f04f 30ff 	mov.w	r0, #4294967295
 8023366:	bd38      	pop	{r3, r4, r5, pc}
 8023368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802336a:	b112      	cbz	r2, 8023372 <_raise_r+0x1e>
 802336c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023370:	b94b      	cbnz	r3, 8023386 <_raise_r+0x32>
 8023372:	4620      	mov	r0, r4
 8023374:	f000 f830 	bl	80233d8 <_getpid_r>
 8023378:	462a      	mov	r2, r5
 802337a:	4601      	mov	r1, r0
 802337c:	4620      	mov	r0, r4
 802337e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023382:	f000 b817 	b.w	80233b4 <_kill_r>
 8023386:	2b01      	cmp	r3, #1
 8023388:	d00a      	beq.n	80233a0 <_raise_r+0x4c>
 802338a:	1c59      	adds	r1, r3, #1
 802338c:	d103      	bne.n	8023396 <_raise_r+0x42>
 802338e:	2316      	movs	r3, #22
 8023390:	6003      	str	r3, [r0, #0]
 8023392:	2001      	movs	r0, #1
 8023394:	e7e7      	b.n	8023366 <_raise_r+0x12>
 8023396:	2400      	movs	r4, #0
 8023398:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802339c:	4628      	mov	r0, r5
 802339e:	4798      	blx	r3
 80233a0:	2000      	movs	r0, #0
 80233a2:	e7e0      	b.n	8023366 <_raise_r+0x12>

080233a4 <raise>:
 80233a4:	4b02      	ldr	r3, [pc, #8]	; (80233b0 <raise+0xc>)
 80233a6:	4601      	mov	r1, r0
 80233a8:	6818      	ldr	r0, [r3, #0]
 80233aa:	f7ff bfd3 	b.w	8023354 <_raise_r>
 80233ae:	bf00      	nop
 80233b0:	200003b8 	.word	0x200003b8

080233b4 <_kill_r>:
 80233b4:	b538      	push	{r3, r4, r5, lr}
 80233b6:	4d07      	ldr	r5, [pc, #28]	; (80233d4 <_kill_r+0x20>)
 80233b8:	2300      	movs	r3, #0
 80233ba:	4604      	mov	r4, r0
 80233bc:	4608      	mov	r0, r1
 80233be:	4611      	mov	r1, r2
 80233c0:	602b      	str	r3, [r5, #0]
 80233c2:	f7e3 f9ff 	bl	80067c4 <_kill>
 80233c6:	1c43      	adds	r3, r0, #1
 80233c8:	d102      	bne.n	80233d0 <_kill_r+0x1c>
 80233ca:	682b      	ldr	r3, [r5, #0]
 80233cc:	b103      	cbz	r3, 80233d0 <_kill_r+0x1c>
 80233ce:	6023      	str	r3, [r4, #0]
 80233d0:	bd38      	pop	{r3, r4, r5, pc}
 80233d2:	bf00      	nop
 80233d4:	2000e190 	.word	0x2000e190

080233d8 <_getpid_r>:
 80233d8:	f7e3 b9ec 	b.w	80067b4 <_getpid>

080233dc <_fstat_r>:
 80233dc:	b538      	push	{r3, r4, r5, lr}
 80233de:	4d07      	ldr	r5, [pc, #28]	; (80233fc <_fstat_r+0x20>)
 80233e0:	2300      	movs	r3, #0
 80233e2:	4604      	mov	r4, r0
 80233e4:	4608      	mov	r0, r1
 80233e6:	4611      	mov	r1, r2
 80233e8:	602b      	str	r3, [r5, #0]
 80233ea:	f7e3 fa4c 	bl	8006886 <_fstat>
 80233ee:	1c43      	adds	r3, r0, #1
 80233f0:	d102      	bne.n	80233f8 <_fstat_r+0x1c>
 80233f2:	682b      	ldr	r3, [r5, #0]
 80233f4:	b103      	cbz	r3, 80233f8 <_fstat_r+0x1c>
 80233f6:	6023      	str	r3, [r4, #0]
 80233f8:	bd38      	pop	{r3, r4, r5, pc}
 80233fa:	bf00      	nop
 80233fc:	2000e190 	.word	0x2000e190

08023400 <_isatty_r>:
 8023400:	b538      	push	{r3, r4, r5, lr}
 8023402:	4d06      	ldr	r5, [pc, #24]	; (802341c <_isatty_r+0x1c>)
 8023404:	2300      	movs	r3, #0
 8023406:	4604      	mov	r4, r0
 8023408:	4608      	mov	r0, r1
 802340a:	602b      	str	r3, [r5, #0]
 802340c:	f7e3 fa4b 	bl	80068a6 <_isatty>
 8023410:	1c43      	adds	r3, r0, #1
 8023412:	d102      	bne.n	802341a <_isatty_r+0x1a>
 8023414:	682b      	ldr	r3, [r5, #0]
 8023416:	b103      	cbz	r3, 802341a <_isatty_r+0x1a>
 8023418:	6023      	str	r3, [r4, #0]
 802341a:	bd38      	pop	{r3, r4, r5, pc}
 802341c:	2000e190 	.word	0x2000e190

08023420 <_malloc_usable_size_r>:
 8023420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023424:	1f18      	subs	r0, r3, #4
 8023426:	2b00      	cmp	r3, #0
 8023428:	bfbc      	itt	lt
 802342a:	580b      	ldrlt	r3, [r1, r0]
 802342c:	18c0      	addlt	r0, r0, r3
 802342e:	4770      	bx	lr

08023430 <_init>:
 8023430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023432:	bf00      	nop
 8023434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023436:	bc08      	pop	{r3}
 8023438:	469e      	mov	lr, r3
 802343a:	4770      	bx	lr

0802343c <_fini>:
 802343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802343e:	bf00      	nop
 8023440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023442:	bc08      	pop	{r3}
 8023444:	469e      	mov	lr, r3
 8023446:	4770      	bx	lr
